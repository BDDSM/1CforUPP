////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мПрефиксСтраниц;
Перем мНомерСтраницы;
Перем мИмяИБ;
Перем мПутьКИБ;
Перем мИмяФайлаПравил;
Перем мИмяФайлаОбработки;
Перем мИмяФайлаДанных;
Перем мПутьВыгрузкиЗагрузки;
Перем мСписокЭтаповВыгрузки;
Перем мПрефиксФайловВыгрузки;

Перем мЭтапКонвертации;

Перем v7; // сервер 7.7

Перем мОбработкаОбмена;

Перем мБазоваяПоставка;

Перем ДатаНачала, ДатаОкончания;

Перем мФайлОбмена, Организация;

Перем мШрифтОбычный, мШрифтЖирный;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция сокращает двойные кавычки
//
Функция СократитьДвойныеКавычки(Знач Строка)

	Результат = Строка;
	Пока Найти(Результат, """") = 1 Цикл
		Результат = Сред(Результат, 2); 
	КонецЦикла; 
	Пока Найти(Результат, """") = СтрДлина(Результат) Цикл
		Результат = Сред(Результат, 1, СтрДлина(Результат) - 1); 
	КонецЦикла; 
	Возврат Результат;

КонецФункции 

// Процедура отвечает за перемещение по страницам формы
//
Процедура Шагнуть(КоличествоШагов = 1)
	
	Если ПустаяСтрока(мПрефиксСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	Если мНомерСтраницы = 0 Тогда
		Если мПрефиксСтраниц = "Ф" Тогда
			ВыбФайл = Новый Файл("C:\v77_v8\PrB77_8.xml");
			Если ВыбФайл.Существует() Тогда
				ИмяФайлаВыгруженныхДанных = ВыбФайл.ПолноеИмя;
				ИнициализироватьОбменИзФайла(ВыбФайл.ПолноеИмя, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.Далее.Доступность = НЕ (мНомерСтраницы = 0 И мПрефиксСтраниц = "ИБ" И ТаблицаПути.Количество() = 0);
	
	мНомерСтраницы = мНомерСтраницы + КоличествоШагов;
	
	Если мНомерСтраницы = 1 Тогда
		ТекстСообщения = "";
		ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаПроцесс;
	КонецЕсли;
	
	Если мНомерСтраницы = 2 И мПрефиксСтраниц = "Ф" Тогда
		Если НЕ ЗначениеЗаполнено(ИмяФайлаВыгруженныхДанных) Тогда
			Предупреждение("Укажите путь к файлу данных.");
			мНомерСтраницы = мНомерСтраницы - 1;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяСтраницы = мПрефиксСтраниц + "Страница" + мНомерСтраницы;
	ЭлементыФормы.ПанельКонвертации.ТекущаяСтраница = ЭлементыФормы.ПанельКонвертации.Страницы[ИмяСтраницы];
	
КонецПроцедуры

// Процедура отработки нажатия кнопки дале
//
Процедура ОтработатьНажатиеВперед()
	
	// Для загрузки из ИБ
	Если мПрефиксСтраниц = "ИБ" Тогда
		Если мНомерСтраницы = 2 Тогда
			
			Перерисовать(1, "ВОчереди");
			
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаПроцесс;
			
			ВремяНачалаПереноса = ТекущаяДата();
			ИмяИсточника = "ИБ: " + мИмяИБ + ", начало переноса: " + Формат(ВремяНачалаПереноса, "ДЛФ=T");
			
			КонвертацияИнформационнойБазы();
			
			ИмяИсточника = "ИБ: " + мИмяИБ + ", начало переноса: " + Формат(ВремяНачалаПереноса, "ДЛФ=T") + ", окончание переноса: " + Формат(ТекущаяДата(), "ДЛФ=T");
			
			КонвертацияЗавершена();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для загрузки из файла
	Если мПрефиксСтраниц = "Ф" Тогда
		Если мНомерСтраницы = 2 Тогда
			
			Перерисовать(3, "ВОчереди");
			
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаПроцесс;
			
			ВремяНачалаПереноса = ТекущаяДата();
			ИмяИсточника = "Файл: " + ИмяФайлаВыгруженныхДанных + ", начало переноса: " + Формат(ВремяНачалаПереноса, "ДЛФ=T");
			
			ЗагрузкаИнформационнойБазы();
			
			ИмяИсточника = "Файл: " + ИмяФайлаВыгруженныхДанных + ", начало переноса: " + Формат(ВремяНачалаПереноса, "ДЛФ=T") + ", окончание переноса: " + Формат(ТекущаяДата(), "ДЛФ=T");
			
			КонвертацияЗавершена();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мНомерСтраницы = 2 Тогда
		
		// Заврешение процесса
		Если ТаблицаОшибок.Количество() > 0 Тогда
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаОшибка;
			
		ИначеЕсли мБазоваяПоставка Тогда
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаУспехБазовая;
			
		Иначе
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаУспехПроф;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заносит информацию об ошибках в спецютаблицу
//
Процедура ЗафиксироватьОшибку(Этап, ТекстОшибки, ТекстРекомендации = "", Расшифровка = Неопределено)
	
	ОтобразитьТекстСостояния(ТекстОшибки, Истина);
	
	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	Если Этап = "Проверка данных" И НЕ ЗначениеЗаполнено(ТекстРекомендации) Тогда
		ТекстРекомендации = "Проверьте, все ли загруженные документы были проведены.";
	КонецЕсли;
	
	НоваяОшибка = ТаблицаОшибок.Добавить();
	НоваяОшибка.Этап			= Этап;
	НоваяОшибка.Ошибка			= ТекстОшибки;
	НоваяОшибка.Рекомендации	= ТекстРекомендации;
	НоваяОшибка.Расшифровка		= Расшифровка;
	
КонецПроцедуры

// Функция замещает сведения в существующей организации для Базовой поставки
//
Функция ИзменитьСведенияОбОрганизации(ИмяФайлаОбмена)
	
	ОткрытьФайлДанных(ИмяФайлаОбмена);
	
	Попытка
		Организация_ИНН = мФайлОбмена.ПолучитьАтрибут("ИНН");
		Организация_КПП = мФайлОбмена.ПолучитьАтрибут("КПП");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.ИНН,
		|	Организации.КПП
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() <> 0 Тогда
			ТекОрганизация = Результат.Получить(0);
			Если ТекОрганизация.ИНН <> Организация_ИНН
				ИЛИ ТекОрганизация.КПП <> Организация_КПП Тогда
				Объект = ТекОрганизация.Ссылка.ПолучитьОбъект();
				Объект.ИНН = Организация_ИНН;
				Объект.КПП = Организация_КПП;
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Если ТипЗнч(мФайлОбмена) = Тип("ЧтениеXML") Тогда
			мФайлОбмена.Закрыть();
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если ТипЗнч(мФайлОбмена) = Тип("ЧтениеXML") Тогда
		мФайлОбмена.Закрыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура открывает файл с данными для чтения атрибутов
//
Процедура ОткрытьФайлДанных(ИмяФайла)
	
	// Архивные файлы будем идентифицировать по расширению ".zip"
	Если Найти(ИмяФайла, ".zip") > 0 Тогда
		ИмяФайлаЗагрузкиДанных = мОбработкаОбмена.РаспаковатьZipФайл(ИмяФайлаВыгруженныхДанных);
	Иначе
		ИмяФайлаЗагрузкиДанных = ИмяФайла;
	КонецЕсли; 
	
	Если ТипЗнч(мФайлОбмена) = Тип("ЧтениеXML") Тогда
		мФайлОбмена.Закрыть();
	КонецЕсли;
	
	мФайлОбмена = Новый ЧтениеXML;
	мФайлОбмена.ОткрытьФайл(ИмяФайлаЗагрузкиДанных);
	мФайлОбмена.Прочитать();
	
КонецПроцедуры

// Прорисовка последней страницы обработки
//
Процедура КонвертацияЗавершена()
	
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаОшибка;
	Иначе
		
		Если мБазоваяПоставка Тогда
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаУспехБазовая;
		Иначе
			ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[мПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаУспехПроф;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Перерисовает все картинки начиная с указанной
//
Процедура Перерисовать(Этап, Состояние = "Ошибка", ОднаКартинка = Ложь)
	
	Если ОднаКартинка Тогда
		
		ЭлементыФормы[мПрефиксСтраниц + "КартинкаДействий" + Этап].Картинка = ОпределитьКартинку(Этап, Состояние);
		Если Состояние = "Выполняется" Тогда
			ТекущийШрифт = мШрифтЖирный;
			ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
		Иначе
			ТекущийШрифт = мШрифтОбычный;
			ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		КонецЕсли;
		ЭлементыФормы[мПрефиксСтраниц + "НадписьДействий" + Этап].Шрифт		= ТекущийШрифт;
		ЭлементыФормы[мПрефиксСтраниц + "КартинкаДействий" + Этап].Рамка	= ТекущаяРамка;
		
	Иначе
		
		ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		
		Для НомерКартинки = Этап По 4 Цикл
			ЭлементыФормы[мПрефиксСтраниц + "КартинкаДействий" + НомерКартинки].Картинка	= ОпределитьКартинку(НомерКартинки, Состояние);
			ЭлементыФормы[мПрефиксСтраниц + "НадписьДействий" + Этап].Шрифт					= мШрифтОбычный;
			ЭлементыФормы[мПрефиксСтраниц + "КартинкаДействий" + Этап].Рамка				= ТекущаяРамка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определение картинки для текущего этапа
//
Функция ОпределитьКартинку(Этап, Состояние)
	
	Попытка
		Если Этап = 1 Тогда
			Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Подключение"];
		ИначеЕсли Этап = 2 Тогда
			Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Выгрузка"];
		ИначеЕсли Этап = 3 Тогда
			Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Загрузка"];
		ИначеЕсли Этап = 4 Тогда
			Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Проверка"];
		КонецЕсли;
		
	Исключение
		Возврат Новый Картинка;
		
	КонецПопытки;
	
	Возврат Картинка;
	
КонецФункции

// Процедура выводит текст в окно состояния
//
Процедура ОтобразитьТекстСостояния(Текст, Ошибка = Ложь, Картинка = Неопределено)
	
	//Состояние(Текст);
	СостояниеПереноса = Текст;
	
КонецПроцедуры

// Процедура изменияет предстваление периода выгрузки
//
Процедура ИзменитьПериод()
	
	Если ПериодВыгрузкиДанных = 1 Тогда
		ДатаНачала	= ДобавитьМесяц(НачалоГода(ТекущаяДата()), -24);
	ИначеЕсли ПериодВыгрузкиДанных = 2 Тогда
		ДатаНачала	= ДобавитьМесяц(НачалоГода(ТекущаяДата()), -12);
	Иначе
		ДатаНачала	= Дата(2006, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

// ОБМЕН ЧЕРЕЗ COM

// Переход к диалогу загрузки данных из 7.7
//
Процедура ЗагрузитьИзИБ()
	
	мПрефиксСтраниц = "ИБ";
	
	ПолучитьСписокИБ();
	
	Шагнуть();
	
КонецПроцедуры

// Процедура получает из реестра список зарегистрированных ИБ
//
Процедура ПолучитьСписокИБ()
	
	СписокИБ = ПолучитьСписокИБ77();
	
	Если ТипЗнч(СписокИБ) = Тип("Строка") Тогда
		Предупреждение(СписокИБ);
	КонецЕсли;
	
	ТаблицаПути.Загрузить(СписокИБ);
	
КонецПроцедуры //ПолучитьСписокИБ

// Запуск процесса конвертации из 7.7
//
Процедура КонвертацияИнформационнойБазы()
	
	ТаблицаОшибок.Очистить();
	
	мСписокЭтаповВыгрузки = 0;
	
	Индикатор = 0;
	
	// Шаг №1 - подключение к ИБ
	ОтобразитьТекстСостояния("Подключение к информационной базе и авторизация");
	мЭтапКонвертации = "Подключение к информационной базе";
	Перерисовать(1, "Выполняется", Истина);
	Если НЕ ПодключитьсяКИБ() Тогда
		Шагнуть();
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 1;
	
	ОтобразитьТекстСостояния("Определение конфигурации и номера релиза информационной базы");
	Если НЕ ОпределитьКонфигурациюИБ() Тогда
		Перерисовать(1);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 2;
	
	Перерисовать(1, "Успех", Истина);
	
	// Шаг № 2 выгрузка данных
	ОтобразитьТекстСостояния("Загрузка правил переноса данных");
	мЭтапКонвертации = "Выгрузка данных";
	Перерисовать(2, "Выполняется", Истина);
	Если НЕ ВыгрузитьИБ() Тогда
		Перерисовать(2);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 50;
	
	Перерисовать(2, "Успех", Истина);
	
	// Шаг № 3 инициализация обмена и загрузка данных
	ОтобразитьТекстСостояния("Чтение выгруженных данных");
	мЭтапКонвертации = "Запуск обработки загрузки данных";
	Перерисовать(3, "Выполняется", Истина);
	Если НЕ ИнициализироватьОбменИзИБ() Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 51;
	
	ОтобразитьТекстСостояния("Загрузка данных");
	мЭтапКонвертации = "Загрузка данных";
	Если НЕ ЗагрузитьИзФайловВИБ() Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 99;
	
	Перерисовать(3, "Успех", Истина);
	
	// Шаг № 4 проверка загруженных данных
	ОтобразитьТекстСостояния("Проверка загруженных данных");
	мЭтапКонвертации = "Проверка данных";
	Перерисовать(4, "Выполняется", Истина);
	ПроверитьДанныеИзИБ();
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		Перерисовать(4);
		Индикатор = 100;
	Иначе
		Перерисовать(4, "Успех", Истина);
		// файлы удалим только если перенос завершен успешно,
		// так как их можно использовать для расследования возникших ошибок
		УдалитьФайлы(мПутьВыгрузкиЗагрузки, мПрефиксФайловВыгрузки + "*.xml");
	КонецЕсли;
	Индикатор = 100;
	
КонецПроцедуры

// Шаг 1: Подключение к ИБ
//
Функция ПодключитьсяКИБ()
	
	Попытка
		v7 = Новый COMObject("V1CEnterprise.Application"); 
	Исключение
		ТекстОшибкиПриПодключении		= "Не удалось произвести подключение к информационной базе: " + мИмяИБ;
		ОписаниеОшибкиПриПодключении	= "Возможно, на Вашем компьютере не установлена платформа 1С:Предприятие 7.7. Воспользуйтесь вариантом загрузки данных из файла, предварительно сформировав его в информационной базе, из которой производится перенос данных.";
		ТекстСкопироватьВИБ				= "Скопировать помощник в папку с информационной базой: " + мИмяИБ;
		Возврат Ложь;
	КонецПопытки;
	
	Открыта = v7.Initialize(v7.RMTrade, "/D""" + мПутьКИБ + """ /M ", "NO_SPLASH_SHOW");
	
	Если НЕ Открыта Тогда
		ТекстОшибкиПриПодключении		= "Не удалось произвести подключение к информационной базе: " + мИмяИБ;
		ОписаниеОшибкиПриПодключении	= "Возможно, Вы отменили подключение к информационной базе, ввели неправильный пароль, либо была попытка немонопольного подключения.";
		ТекстСкопироватьВИБ				= "Скопировать помощник в папку с информационной базой: " + мИмяИБ;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Заголовок = v7.ЗаголовокСистемы("Проверка базовой версии");
	Исключение
		ТекстОшибкиПриПодключении		= "Не удалось произвести подключение к информационной базе: " + мИмяИБ;
		ОписаниеОшибкиПриПодключении	= "Возможно, на Вашем компьютере установлена БАЗОВАЯ версия.";
		ТекстСкопироватьВИБ				= "Скопировать помощник в папку с информационной базой: " + мИмяИБ;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Открыта;
	
КонецФункции

// Шаг 1: Проверка идентификатора и версии ИБ
//
Функция ОпределитьКонфигурациюИБ()
	
	Попытка
		НомерРелизаКонфигурации		= v7.Константа.НомерРелиза;
		ИдентификаторКонфигурации	= v7.глИдентификаторКонфигурации();
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, "Производится перенос данных из нетиповой конфигурации", "Перенос из выбранной конфигурации не поддерживается.");
		v7 = "";
		Возврат Ложь;
	КонецПопытки;
	
	ВозрастРелизаКонфигурации = Число(Прав(СокрЛП(НомерРелизаКонфигурации), 3));
	
	Отбор = Новый Структура("ИдентификаторКонфигурации");
	Отбор.Вставить("ИдентификаторКонфигурации", ИдентификаторКонфигурации);
	Выборка = Справочники.КонвертацииИзИнформационныхБаз1СПредприятия77.Выбрать(,,Отбор);
	Если Выборка.Следующий() Тогда
		ВозрастРелизаПравил = Число(Прав(СокрЛП(Выборка.НомерРелиза), 3));
		
		Если ВозрастРелизаПравил > ВозрастРелизаКонфигурации Тогда
			ЗафиксироватьОшибку(мЭтапКонвертации, "Текущая версия правил предназначена для релиза конфигурации не ниже " + Выборка.НомерРелиза, "Рекомендуется обновить релиз конфигурации информационной базы, из которой производится перенос данных.");
			v7 = "";
			Возврат Ложь;
		КонецЕсли;
		
		Если Метаданные().Макеты.Найти("V77Exp_ert") <> Неопределено Тогда
			ЗаписатьФайлыДляПереносаНаДиск(ЭтотОбъект, мПутьВыгрузкиЗагрузки, Ложь);
			мИмяФайлаОбработки	= мПутьВыгрузкиЗагрузки + "V77Exp.ert";
			мИмяФайлаПравил		= мПутьВыгрузкиЗагрузки + "PrB.xml";
			
		Иначе
			ЗаписатьФайлыДляПереносаНаДиск(Выборка, мПутьВыгрузкиЗагрузки, Ложь);
			мИмяФайлаОбработки	= мПутьВыгрузкиЗагрузки + Выборка.КонвертацияОбработка + ".ert";
			мИмяФайлаПравил		= мПутьВыгрузкиЗагрузки + Выборка.КонвертацияПравила + ".xml";
			
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	ЗафиксироватьОшибку(мЭтапКонвертации, "Для выбранной конфигурации конвертация не поддерживается", "");
	v7 = "";
	Возврат Ложь;
	
КонецФункции

// Шаг 2: Выгрузка данных из конфигурации 7.7
//
Функция ВыгрузитьИБ()
	
	Попытка
		
		ВыгружаемыеДанные = "";
		
		ДатаНачалаСтр		= Формат(НачалоГода(ДатаНачала), "ДФ=dd.MM.yyyy");
		
		ПараметрыВыгрузки = v7.CreateObject("СписокЗначений");
		ПараметрыВыгрузки.ДобавитьЗначение(мИмяФайлаПравил,					"ИмяФайлаПравил");
		ПараметрыВыгрузки.ДобавитьЗначение(ДатаНачалаСтр,					"ДатаНачала");
		ПараметрыВыгрузки.ДобавитьЗначение("ВыполнитьАлгоритм",				"ИмяКоманды");
		ПараметрыВыгрузки.ДобавитьЗначение("ПолучитьТаблицуЭтаповВыгрузки",	"ИмяАлгоритма");
		v7.глОбработчикСообщений = ПараметрыВыгрузки;
		v7.EvalExpr("ОткрытьФормуМодально(""Отчет"", глОбработчикСообщений, """ + мИмяФайлаОбработки + """)");
		
		ТаблицаЭтаповВыгрузки = v7.глОбработчикСообщений;
		
		ТипВозвращенногоЗначения = v7.EvalExpr("ТипЗначенияСтр(глОбработчикСообщений)");
		
		Если ТипВозвращенногоЗначения <> "ТаблицаЗначений" Тогда
			Если (ТипВозвращенногоЗначения = "СписокЗначений") И (v7.глОбработчикСообщений.Получить("ИмяФайлаПравил") = Неопределено) Тогда
				Результат = v7.глОбработчикСообщений.ВСтрокуСРазделителями();
				
				ЗафиксироватьОшибку("Подключение к информационной базе: " + мИмяИБ, "При открытии обработки V77exp.ert возникли ошибки: " + Символы.ПС + Результат, "");
				
			Иначе
				ЗафиксироватьОшибку("Подключение к информационной базе: " + мИмяИБ, "Не удалось открыть обработку V77exp.ert.", "");
				
			КонецЕсли;
			
			v7 = "";
			Возврат Ложь;
		КонецЕсли;
		
		КоличествоЭтаповВыгрузки = ТаблицаЭтаповВыгрузки.КоличествоСтрок();
		
		ШагИндикатора = 46 / КоличествоЭтаповВыгрузки;
		
		Индикатор = 3;
		
		мСписокЭтаповВыгрузки = Новый СписокЗначений;
		
		БезОшибок = Истина;
		
		ИНН_КПП	= СокрЛП(v7.Константа.ИНН);
		ИНН = "";
		КПП = "";
		ОдинадцатыйСимвол = Сред(ИНН_КПП,11,1);
		Если Не ПустаяСтрока(ОдинадцатыйСимвол) И ОбщегоНазначения.ТолькоЦифрыВСтроке(ОдинадцатыйСимвол) Тогда // оказалось физическое лицо
			ИНН = Лев(ИНН_КПП,12);
			КПП = "";
		Иначе // оказалась организация
			ИНН = Лев(ИНН_КПП,10);
			КПП = Прав(ИНН_КПП,9);
		КонецЕсли;
		мПрефиксФайловВыгрузки = "ЗиК_" + ?(ОбщегоНазначения.ТолькоЦифрыВСтроке(ИНН + КПП), ИНН + "_" + КПП + "_", "ConvData_");
		
		Настройки = v7.CreateObject("СписокЗначений");
		Настройки.ДобавитьЗначение(Число(УчетЗадолженностиПоМесяцам),	"УчетЗадолженностиПоМесяцам");
		Настройки.ДобавитьЗначение(Число(ОбнулятьСальдо),				"ОбнулятьСальдо");
		
		ТаблицаЭтаповВыгрузки.ВыбратьСтроки();
		Пока ТаблицаЭтаповВыгрузки.ПолучитьСтроку() = 1 Цикл
			ОтобразитьТекстСостояния(ТаблицаЭтаповВыгрузки.Представление);
			
			ВыгружаемыеДанные = ТаблицаЭтаповВыгрузки.Представление;
			
			ОбработкаПрерыванияПользователя();
			
			ПараметрыВыгрузки = v7.CreateObject("СписокЗначений");
			ПараметрыВыгрузки.ДобавитьЗначение(мИмяФайлаПравил,									"ИмяФайлаПравил");
			ПараметрыВыгрузки.ДобавитьЗначение(ТаблицаЭтаповВыгрузки.ИспользуемыеПравила,		"ИспользуемыеПравилаВыгрузки");
			ПараметрыВыгрузки.ДобавитьЗначение(Настройки,			"ТаблицаНастройкиПараметров");
			
			мИмяФайлаДанных = мПутьВыгрузкиЗагрузки + мПрефиксФайловВыгрузки + Прав("000" + ТаблицаЭтаповВыгрузки.НомерСтроки, 4) + ".xml";
			ПараметрыВыгрузки.ДобавитьЗначение(мИмяФайлаДанных,									"ИмяФайлаДанных");
			
			Если ЗначениеЗаполнено(ТаблицаЭтаповВыгрузки.ДатаНачалаВыгрузки) Тогда
				ПараметрыВыгрузки.ДобавитьЗначение(ТаблицаЭтаповВыгрузки.ДатаНачалаВыгрузки,	"ДатаНачала");
			Иначе
				ПараметрыВыгрузки.ДобавитьЗначение(ДатаНачалаСтр,								"ДатаНачала");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТаблицаЭтаповВыгрузки.ДатаОкончанияВыгрузки) Тогда
				ПараметрыВыгрузки.ДобавитьЗначение(ТаблицаЭтаповВыгрузки.ДатаОкончанияВыгрузки,	"ДатаОкончания");
			КонецЕсли;
			
			ПараметрыВыгрузки.ДобавитьЗначение("Выгрузить",										"ИмяКоманды");
			v7.глОбработчикСообщений = ПараметрыВыгрузки;
			v7.EvalExpr("ОткрытьФормуМодально(""Отчет"", глОбработчикСообщений, """ + мИмяФайлаОбработки + """)");
			
			Индикатор = Окр(2 + ШагИндикатора * ТаблицаЭтаповВыгрузки.НомерСтроки);
			
			Результат = v7.глОбработчикСообщений.ВСтрокуСРазделителями();
			
			Если ТипЗнч(Результат) = Тип("Число") Тогда
				ЗафиксироватьОшибку("Выгрузка данных: " + ТаблицаЭтаповВыгрузки.Представление, "Не удалось произвести выгрузку данных.", "Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации.");
				БезОшибок = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если Результат <> "" Тогда
				СписокОшибок = СтрЗаменить(Результат, ",", Символы.ПС);
				Для НомерСтроки = 1 По СтрЧислоСтрок(СписокОшибок) Цикл
					МассивОшибки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СократитьДвойныеКавычки(СтрПолучитьСтроку(СписокОшибок, НомерСтроки)), "|");
					Если МассивОшибки.Количество() = 0 Тогда
						БезОшибок = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если МассивОшибки.Количество() = 1 Тогда
						ЗафиксироватьОшибку("Выгрузка данных: " + ТаблицаЭтаповВыгрузки.Представление, МассивОшибки[0], "");
						
					Иначе
						ЗафиксироватьОшибку("Выгрузка данных: " + ТаблицаЭтаповВыгрузки.Представление, МассивОшибки[0], МассивОшибки[1]);
						
					КонецЕсли;
					
					Если МассивОшибки.Количество() < 3 Тогда
						БезОшибок = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
				Продолжить;
			КонецЕсли;
			
			мСписокЭтаповВыгрузки.Добавить(Прав("000"+ТаблицаЭтаповВыгрузки.НомерСтроки, 4), ТаблицаЭтаповВыгрузки.Представление);
			
		КонецЦикла;
		
		v7 = "";
		Возврат БезОшибок;
		
	Исключение
		Если ПустаяСтрока(ВыгружаемыеДанные) Тогда
			ЗафиксироватьОшибку(мЭтапКонвертации, "Не удалось начать перенос данных", "Возможно, с информационной базой работают пользователи или неправильно был введен пароль пользователя. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.");
		Иначе
			ЗафиксироватьОшибку(мЭтапКонвертации, "Перенос данных завершился аварийно: " + ВыгружаемыеДанные, "Из меню 'Операции' откройте справочник 'Конвертации из информационных баз 1С:Предприятия', сохраните файлы в каталог '" + мПутьКИБ + "\ExtForms' и запустите помощник перехода из меню 'Сервис -> Дополнительные возможности' в ЗиК.");
		КонецЕсли;
		v7 = "";
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Шаг 3: Инициализация универсальной обработки загрузки и проверка существования выгруженных файлов
//
Функция ИнициализироватьОбменИзИБ()
	
	Если ТипЗнч(мСписокЭтаповВыгрузки) <> Тип("СписокЗначений") ИЛИ мСписокЭтаповВыгрузки.Количество() = 0 Тогда
		ЗафиксироватьОшибку(мЭтапКонвертации, "Не найдена информация о выгруженных данных", "Структура файла данных, из которого производится загрузка нарушена. Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия"".");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		мОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
		мОбработкаОбмена.РежимОбмена = "Загрузка";
		мОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
		ВыбФайл = Новый Файл(мИмяФайлаДанных);
		Если ВыбФайл.Существует() Тогда
			ИмяФайлаОбмена = ВыбФайл.ПолноеИмя;
			мОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
			мОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
			
			Если НЕ мОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
				ЭлементыФормы.ИмяФайлаВыгруженныхДанных.Значение = "";
				Возврат Ложь;
			КонецЕсли;
			
			Если мБазоваяПоставка Тогда //для базовой отдельно обработаем загрузку сведений об организации
				Если НЕ ИзменитьСведенияОбОрганизации(ИмяФайлаОбмена) Тогда
					ЗафиксироватьОшибку(мЭтапКонвертации, "Отсутствуют сведения об " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + ", Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия"".");
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Возврат Истина;
		Иначе
			ЗафиксироватьОшибку(мЭтапКонвертации, "Не найден файл с выгруженными данными: " + мИмяФайлаДанных, "Во временном каталоге, из которого производится загрузка, отсутствуют файл данных.");
			Возврат Ложь;
			
		КонецЕсли;
		
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, "Не удалось инициализировать обработку загрузки данных", "Структура файла данных, из которого производится загрузка нарушена. Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия"".");
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Шаг 3: Загрузка данных
//
Функция ЗагрузитьИзФайловВИБ()
	
	Организация = "";
	
	КоличествоЭтаповЗагрузки = мСписокЭтаповВыгрузки.Количество();
	
	ШагИндикатора = 48 / КоличествоЭтаповЗагрузки;
	
	Индикатор = 51;
	
	БезОшибок = Истина;
	
	Для Каждого ЭтапЗагрузки Из мСписокЭтаповВыгрузки Цикл
		ОтобразитьТекстСостояния(ЭтапЗагрузки.Представление);
		
		ОбработкаПрерыванияПользователя();
		
		мОбработкаОбмена.ИмяФайлаОбмена	= мПутьВыгрузкиЗагрузки + мПрефиксФайловВыгрузки + ЭтапЗагрузки.Значение + ".xml";
		мОбработкаОбмена.ВыполнитьЗагрузку();
		
		Индикатор = Окр(52 + ШагИндикатора * ЭтапЗагрузки.Значение);
		
		Если мОбработкаОбмена.ФлагОшибки Тогда
			ЗафиксироватьОшибку(мЭтапКонвертации, "Не удалось произвести загрузку данных: " + ЭтапЗагрузки.Представление, "Проверьте служебные сообщения в окне сообщений.");
			БезОшибок = Ложь;
			Продолжить;
		Иначе
			Организация = мОбработкаОбмена.Параметры.Организация;
		КонецЕсли;
	КонецЦикла;
	
	Возврат БезОшибок;
	
КонецФункции

// Шаг 4: Проверка загруженных данных
//
Процедура ПроверитьДанныеИзИБ()
	
	Попытка
		СписокПроверок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(мОбработкаОбмена.Параметры.Проверки);
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, "Не удалось получить правила проверки загруженных данных", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия"".");
		Возврат;
	КонецПопытки;
	
	Для Каждого Проверка Из СписокПроверок Цикл
		Попытка
			Выполнить(мОбработкаОбмена.Алгоритмы["Проверить" + Проверка]);
		Исключение
			ЗафиксироватьОшибку(мЭтапКонвертации, "Не удалось выполнить алгоритм проверки """ + Проверка + """", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия"".");
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// ОБМЕН ЧЕРЕЗ ФАЙЛ

// Переход к диалогу загрузки данных из файла
//
Процедура ЗагрузитьИзФайла()
	
	мИмяФайлаДанных = "";
	
	мПрефиксСтраниц = "Ф";
	
	Шагнуть();
	
КонецПроцедуры

// Процедура выбора файла для загрузки
//
Процедура ВыборФайла(Элемент, ПроверятьСуществование = Ложь)
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml|Архивный файл данных (*.aml)|*.aml";
	ДиалогФыбораФайла.Расширение					=	"xml";
	
	ДиалогФыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
		ИнициализироватьОбменИзФайла(ДиалогФыбораФайла.ПолноеИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Запуск процесса конвертации из выгруженного файла
//
Процедура ЗагрузкаИнформационнойБазы()
	
	ОтобразитьТекстСостояния("Начало переноса данных: " + ТекущаяДата(), , 0);
	
	мСписокЭтаповВыгрузки = 0;
	
	ТаблицаОшибок.Очистить();
	
	мИмяФайлаДанных = ИмяФайлаВыгруженныхДанных;
	
	// Шаг № 1 инициализация обмена и загрузка данных
	ОтобразитьТекстСостояния("Чтение выгруженных данных из файла");
	мЭтапКонвертации = "Запуск обработки загрузки данных";
	Перерисовать(3, "Выполняется", Истина);
	Если НЕ ИнициализироватьОбменИзФайла(мИмяФайлаДанных) Тогда
		Перерисовать(3);
		Возврат;
	КонецЕсли;
	
	// Шаг № 2 загрузка данных
	ОтобразитьТекстСостояния("Загрузка данных из файла");
	мЭтапКонвертации = "Загрузка данных";
	Если НЕ ЗагрузитьИзФайлаВИБ() Тогда
		Перерисовать(3);
		Возврат;
	КонецЕсли;
	
	Перерисовать(3, "Успех", Истина);
	
	// Шаг № 3 проверка загруженных данных
	мЭтапКонвертации = "Проверка данных";
	ОтобразитьТекстСостояния("Проверка загруженных данных");
	Перерисовать(4, "Выполняется", Истина);
	ПроверитьДанныеИзФайла();
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		Перерисовать(4);
	Иначе
		Перерисовать(4, "Успех", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Шаг 1: Инициализация универсальной обработки загрузки и проверка существования файла с выгруженными данными
//
Функция ИнициализироватьОбменИзФайла(ИмяФайла, ФормироватьСведения = Ложь)
	
	Попытка
		мОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
		мОбработкаОбмена.РежимОбмена = "Загрузка";
		мОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
		ВыбФайл = Новый Файл(ИмяФайла);
		Если ВыбФайл.Существует() Тогда
			ИмяФайлаОбмена = ВыбФайл.ПолноеИмя;
			мОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
			мОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
			
			Если НЕ мОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
				ЭлементыФормы.ИмяФайлаВыгруженныхДанных.Значение = "";
				Возврат Ложь;
			КонецЕсли;
			
			Если мБазоваяПоставка И НЕ ФормироватьСведения Тогда //для базовой отдельно обработаем загрузку сведений об организации
				Если НЕ ИзменитьСведенияОбОрганизации(ИмяФайлаОбмена) Тогда
					ЗафиксироватьОшибку(мЭтапКонвертации, "Отсутствуют сведения об " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + ", Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия"".");
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если мПрефиксСтраниц = "Ф" И ФормироватьСведения Тогда
				СформироватьСведенияОФайле();
			КонецЕсли;
			Возврат Истина;
		Иначе
			ЗафиксироватьОшибку(мЭтапКонвертации, "Не найден файл с выгруженными данными: " + ИмяФайла, "В каталоге, из которого производится загрузка, файл данных отсутствует. Укажите корректный путь к файлу данных.");
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, "Не удалось инициализировать обработку загрузки данных", "Структура файла данных, из которого производится загрузка нарушена. Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия"".");
		ЭлементыФормы.ИмяФайлаВыгруженныхДанных.Значение = "";
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Формирует внешнее представление периода, заданного датами начала и окончания периода. 
// Процедура используется в качестве обработчика события для полей ввода
// ДатаНачала и ДатаОкончания. Назначается методом ПодключитьОбработчикИзмененияДанных
// в обработчике "При открытии"
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//
//
// Параметры:
//  
// 
Процедура СформироватьСведенияОФайле()

	ОткрытьФайлДанных(ИмяФайлаВыгруженныхДанных);

	ТипДата                  = Тип("Дата");
	
	// Основные сведения
	Конфигурация			= мФайлОбмена.ПолучитьАтрибут("ИмяКонфигурацииИсточника");
	НомерРелиза				= мФайлОбмена.ПолучитьАтрибут("НомерРелиза");
	НаименованиеОрганизации	= мФайлОбмена.ПолучитьАтрибут("Организация");
	
	// Период выгрузки
	ДатаНачала		= XMLЗначение(ТипДата, СокрП(мФайлОбмена.ПолучитьАтрибут("НачалоПериодаВыгрузки")));
	ДатаОкончания	= XMLЗначение(ТипДата, СокрП(мФайлОбмена.ПолучитьАтрибут("ОкончаниеПериодаВыгрузки")));
	
	Если ДатаНачала < Дата(2006, 1, 1) Тогда
		ГодНачала	= 2006;
	Иначе
		ГодНачала	= Год(ДатаНачала);
	КонецЕсли;
	
	МесяцОкончания	= Формат(ДатаОкончания, "ДФ=ММММ");
	ГодОкончания	= Год(ДатаОкончания);
	
	СтрПериод = " с Января " + ГодНачала + " года по " + МесяцОкончания + " " + ГодОкончания + " года";
	
	ПредставлениеПериодаВыгрузки = "Кадровые данные за все время, расчетные данные" + СтрПериод;
	
	//Дата создания файла
	ДатаВыгрузкиДанных = XMLЗначение(ТипДата, СокрП(мФайлОбмена.ПолучитьАтрибут("ДатаВыгрузки")));
	
	// Размещение надписей на форме
	ЭлементыФормы.НадписьКонфигурация.Заголовок	= Конфигурация;
	ЭлементыФормы.НадписьНомерРелиза.Заголовок	= НомерРелиза;
	ЭлементыФормы.НадписьОрганизация.Заголовок	= НаименованиеОрганизации;
	ЭлементыФормы.НадписьПериод.Заголовок		= ПредставлениеПериодаВыгрузки;
	ЭлементыФормы.НадписьДата.Заголовок			= Формат(ДатаВыгрузкиДанных, "ДЛФ=DD; ДП=-");
	
	Если ТипЗнч(мФайлОбмена) = Тип("ЧтениеXML") Тогда
		мФайлОбмена.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // СформироватьПредставлениеПериода() 

// Шаг 2: Загрузка данных
//
Функция ЗагрузитьИзФайлаВИБ()
	
	Организация = "";
	
	ОбработкаПрерыванияПользователя();
	
	мОбработкаОбмена.ИмяФайлаОбмена		= мИмяФайлаДанных;
	мОбработкаОбмена.ВыполнитьЗагрузку();
	
	Если мОбработкаОбмена.ФлагОшибки Тогда
		ЗафиксироватьОшибку(мЭтапКонвертации, "Не удалось произвести загрузку данных", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия"".");
		Возврат Ложь;
	Иначе
		Организация = мОбработкаОбмена.Параметры.Организация;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Шаг 3: Проверка загруженных данных
//
Процедура ПроверитьДанныеИзФайла()
	
	Попытка
		СписокПроверок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(мОбработкаОбмена.Параметры.Проверки);
	Исключение
		ЗафиксироватьОшибку(мЭтапКонвертации, "Не удалось получить правила проверки загруженных данных", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия"".");
		Возврат;
	КонецПопытки;
	
	Для Каждого Проверка Из СписокПроверок Цикл
		Попытка
			Выполнить(мОбработкаОбмена.Алгоритмы["Проверить" + Проверка]);
		Исключение
			ЗафиксироватьОшибку(мЭтапКонвертации, "Не удалось выполнить алгоритм проверки """ + Проверка + """", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия"".");
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ЭлементыФормы.НадписьПояснениеЗагрузитьИзФайла.Заголовок = 
		"Выберите этот вариант, если Вы уже выгрузили данные из Вашей информационной базы при помощи ""Помощника перехода на " + Метаданные.Синоним + """";
		
	ЭлементыФормы.НадписьОрганизацияЗаголовок.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	
	ЭлементыФормы.НадписьНомерМинимальногоРелиза.Заголовок		= ОбщегоНазначения.ПолучитьЗначениеРеквизита(Справочники.КонвертацииИзИнформационныхБаз1СПредприятия77.ЗарплатаКадры, "НомерРелиза");
	
	ЭлементыФормы.ВыгружатьДанныеСПрошлогоГода.Заголовок		= Формат(Год(ДобавитьМесяц(НачалоГода(ТекущаяДата()), -12)), "ЧГ=") + " года";
	ЭлементыФормы.ВыгружатьДанныеСПозапрошлогоГода.Заголовок	= Формат(Год(ДобавитьМесяц(НачалоГода(ТекущаяДата()), -24)), "ЧГ=") + " года";
	
	ПериодВыгрузкиДанных = 1;
	ИзменитьПериод();
	
	мНомерСтраницы = 0;
	
	Если ПереноситьИз77 Тогда
		ЗагрузитьИзИБ();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура инициации процесса конвертации из ИБ
//
Процедура ЗагрузитьИзИБНажатие(Элемент)
	
	ЗагрузитьИзИБ();
	
КонецПроцедуры

// Процедура инициации процесса конвертации из файла
//
Процедура ЗагрузитьИзФайлаНажатие(Элемент)
	
	ЗагрузитьИзФайла();
	
КонецПроцедуры

// Процедура отработки движения вперед
//
Процедура ДалееНажатие(Элемент)
	
	Шагнуть();
	ОтработатьНажатиеВперед();
	
КонецПроцедуры

// Процедура возврата к первой странице
//
Процедура ВНачалоНажатие(Элемент)
	
	ЭлементыФормы.ПанельКонвертации.ТекущаяСтраница = ЭлементыФормы.ПанельКонвертации.Страницы.СтраницаНачало;
	мНомерСтраницы = 0;
	ОстаткиОбороты = 0;
	
КонецПроцедуры

// Процедура записывает путь в соответствующую переменную
//
Процедура ТаблицаПутиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		мПутьКИБ = "";
		мИмяИБ = "";
	Иначе
		мПутьКИБ = Элемент.ТекущиеДанные.Путь;
		мИмяИБ = Элемент.ТекущиеДанные.Имя;
	КонецЕсли;
	
КонецПроцедуры

// Процедура печати списка ошибок
//
Процедура ПечатьОшибкиНажатие(Элемент)
	
	Макет = ПолучитьМакет("СписокОшибок");
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Если мПрефиксСтраниц = "ИБ" Тогда
		ОбластьШапка.Параметры.ИмяИБ = мИмяИБ;
		ОбластьШапка.Параметры.ПутьКИБ = мПутьКИБ;
	Иначе
		ОбластьШапка.Параметры.ИмяИБ = "Файл данных";
		ОбластьШапка.Параметры.ПутьКИБ = ИмяФайлаВыгруженныхДанных;
	КонецЕсли;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ОбластьСтрока.Параметры.Этап			= СтрокаТаблицы.Этап;
		ОбластьСтрока.Параметры.Ошибка			= СтрокаТаблицы.Ошибка;
		ОбластьСтрока.Параметры.Рекомендации	= СтрокаТаблицы.Рекомендации;
		ОбластьСтрока.Параметры.Расшифровка		= СтрокаТаблицы.Расшифровка;

		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ОтчетОбОшибках, , , "Список ошибок конвертации данных из 1С:Предприятия 7.7", );
	
КонецПроцедуры

// Процедура отработки изменения пути к файлу выгрузки
//
Процедура ПутьКФайлуПриИзменении(Элемент)
	
	// Размещение надписей на форме
	ЭлементыФормы.НадписьКонфигурация.Заголовок	= "";
	ЭлементыФормы.НадписьНомерРелиза.Заголовок	= "";
	ЭлементыФормы.НадписьОрганизация.Заголовок	= "";
	ЭлементыФормы.НадписьПериод.Заголовок		= "";
	ЭлементыФормы.НадписьДата.Заголовок			= "";
	
	ИнициализироватьОбменИзФайла(ИмяФайлаВыгруженныхДанных, Истина);
	
КонецПроцедуры

// Процедура выбора файла выгрузки
//
Процедура ИмяФайлаВыгруженныхДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент);
	
КонецПроцедуры

// Открывает файл обмена во внешнем приложении
//
Процедура ИмяФайлаВыгруженныхДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

// Процедура продолжения работы в том же варианте конвертации
//
Процедура ПродолжитьНажатие(Элемент)
	
	мНомерСтраницы = 0;
	Шагнуть();
	
КонецПроцедуры

Процедура ПериодВыгрузкиДанныхПриИзменении(Элемент)
	
	ИзменитьПериод();
	
КонецПроцедуры

Процедура ПерейтиКЗагрузкеФайлаНажатие(Элемент)
	
	мНомерСтраницы	= 0;
	мПрефиксСтраниц	= "Ф";
	
	Шагнуть();
	ОтработатьНажатиеВперед();
	
КонецПроцедуры

Процедура НадписьСкопироватьВИБНажатие(Элемент)
	
	Если Метаданные().Макеты.Найти("PrB_Wiz_ert") <> Неопределено Тогда
		ЗаписатьФайлыДляПереносаНаДиск(ЭтотОбъект, мПутьКИБ + "ExtForms\");
		
	Иначе
		ЗаписатьФайлыДляПереносаНаДиск(Справочники.КонвертацииИзИнформационныхБаз1СПредприятия77.ЗарплатаКадры, мПутьКИБ + "ExtForms\");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьСкопироватьВПапкуНажатие(Элемент)
	
	ДиалогВыбораФайла				= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок		= "Укажите каталог для записи файлов конвертации";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Если Метаданные().Макеты.Найти("PrB_Wiz_ert") <> Неопределено Тогда
			ЗаписатьФайлыДляПереносаНаДиск(ЭтотОбъект, ДиалогВыбораФайла.Каталог + "\");
			
		Иначе
			ЗаписатьФайлыДляПереносаНаДиск(Справочники.КонвертацииИзИнформационныхБаз1СПредприятия77.ЗарплатаКадры, ДиалогВыбораФайла.Каталог + "\");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мЭтапКонвертации = "";

мПутьВыгрузкиЗагрузки = КаталогВременныхФайлов();

ТаблицаОшибок.Колонки.Добавить("Этап");
ТаблицаОшибок.Колонки.Добавить("Ошибка");
ТаблицаОшибок.Колонки.Добавить("Рекомендации");
ТаблицаОшибок.Колонки.Добавить("Расшифровка");

мШрифтОбычный = Новый Шрифт(,,,,,);
мШрифтЖирный = Новый Шрифт(,, Истина,,,);

мБазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);