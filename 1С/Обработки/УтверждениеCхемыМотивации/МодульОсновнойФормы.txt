////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;

Перем мСведенияОВидахРасчета;

Перем мВалютаУправленческогоУчета;

Перем мСписокНедоступныхРасчетов;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОформитьСтрокиНачисленийВзысканий(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Элемент.Данные = "Начисления");	
	КонецЦикла;

КонецПроцедуры // ОформитьСтрокиНачисленийВзысканий

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ДатаУтверждения = ОбщегоНазначения.ПолучитьРабочуюДату();
	
КонецПроцедуры //ПриОткрытии


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "ДействияФормы"

// Обработчик события Нажатие элемента формы ДействияФормы.Заполнить
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если ЗначениеЗаполнено(ВидСхемыМотивации) Тогда
		ЗаполнениеПоСхемамМотивации("УправленческиеНачисления");
		ЗаполнениеПоСхемамМотивации("УправленческиеУдержания");
	Иначе
		Сообщить("Не заполнен вид схемы мотивации");
	КонецЕсли;
		
КонецПроцедуры //ДействияФормыЗаполнить

// Обработчик события Нажатие элемента формы ДействияФормы.Утвердить
//
Процедура ДействияФормыУтвердить(Кнопка)
	
	УтвердитьВидСхемыМотивации();

КонецПроцедуры //ДействияФормыУтвердить

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельНачисления"

// Обработчик события Нажатие элемента формы КоманднаяПанельНачисления.Заполнить
//
Процедура КоманднаяПанельНачисленияЗаполнитьПоВидуСхемыМотивации()
	
	Если ЗначениеЗаполнено(ВидСхемыМотивации) Тогда
		ЗаполнениеПоСхемамМотивации("УправленческиеНачисления");
	Иначе
		Сообщить("Не заполнен вид схемы мотивации");
	КонецЕсли;

КонецПроцедуры //КоманднаяПанельНачисленияЗаполнитьПоВидуСхемыМотивации

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельУдержания"

// Обработчик события Нажатие элемента формы КоманднаяПанельКадровыйПлан.Заполнить
//
Процедура КоманднаяПанельУдержанияЗаполнитьПоВидуСхемыМотивации()
	
	Если ЗначениеЗаполнено(ВидСхемыМотивации) Тогда
		ЗаполнениеПоСхемамМотивации("УправленческиеУдержания");
	Иначе
		Сообщить("Не заполнен вид схемы мотивации");
	КонецЕсли;

КонецПроцедуры //КоманднаяПанельУдержанияЗаполнитьПоВидуСхемыМотивации

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события "ПриИзменении" элемента формы ВидСхемыМотивации
//
Процедура ВидСхемыМотивацииПриИзменении(Элемент)
	
	КоманднаяПанельНачисленияЗаполнитьПоВидуСхемыМотивации();
	КоманднаяПанельУдержанияЗаполнитьПоВидуСхемыМотивации();
	
КонецПроцедуры //ВидСхемыМотивацииПриИзменении



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "Начисления"

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Начисления", Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	
КонецПроцедуры //НачисленияВидРасчетаПриИзменении

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура НачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УправленческиеНачисления.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаПриемНаРаботу");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = мСписокНедоступныхРасчетов;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры //НачисленияВидРасчетаНачалоВыбора

Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры // НачисленияПриАктивизацииСтроки

Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчета);

КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ОформитьСтрокиНачисленийВзысканий(Элемент, ОформленияСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "Удержания"

Процедура УдержанияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Удержания", Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	
КонецПроцедуры

Процедура УдержанияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияУдержанияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры // НачисленияПриАктивизацииСтроки

Процедура ОбработчикОжиданияУдержанияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Удержания, мСведенияОВидахРасчета);

КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

Процедура УдержанияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ОформитьСтрокиНачисленийВзысканий(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура УдержанияФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, ЭтаФорма, Истина, ДатаУтверждения, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура УдержанияФизлицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, ЭтаФорма, Элемент.Значение, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УдержанияФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Физлицо");
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст, ,Истина, Истина);
	
КонецПроцедуры

Процедура УдержанияФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);
	
КонецПроцедуры


мСведенияОВидахРасчета = Новый Соответствие;

мВалютаУправленческогоУчета  = РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной("глВалютаУправленческогоУчета");

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);