////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Добавляет в табличную часть сведения для отображения картинки со статусом 
// документа в колонке Статус, а также Дату и Номер документа.
// 
// Параметры
//  ТабличнаяЧасть - табличная часть СформированныеДокументы или УчтенныеДокументы
Процедура ДополнитьСведениямиОДокументах(ТабличнаяЧасть)
	
	//Получим список документов
	МассивДокументов = ТабличнаяЧасть.ВыгрузитьКолонку("Документ");
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Получим сведения о документах
	СведенияОДокументах = ПолучитьСведенияОДокументах(МассивДокументов);
	
	//Добавим сведения в табличную часть
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		ДанныеДокумента = СведенияОДокументах.Найти(ДанныеСтроки.Документ, "Документ");
		
		Если ДанныеДокумента = Неопределено Тогда
			
			ДанныеСтроки.Статус	= 3;
			
		Иначе
			Если ДанныеДокумента.Проведен Тогда
				ДанныеСтроки.Статус	= 0;
			ИначеЕсли ДанныеДокумента.ПометкаУдаления Тогда
				ДанныеСтроки.Статус	= 1;
			Иначе
				ДанныеСтроки.Статус	= 2;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеДокумента, "Дата,Номер");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные для отображения информации о документе (дата / номер / статус).
//
// Параметры
//  МассивДокументов - массив ссылок на документы. 
//		Обязательно должен содержать элементы (ссылки на документы, для которых нужно получить данные).
//
// Возвращаемое значение
//  ТаблицаЗначений
Функция ПолучитьСведенияОДокументах(МассивДокументов)
	         
	МассивТипов = РегламентноеФормированиеДокументов.ПолучитьТипыДокументов(МассивДокументов);
	
	//Подготовим таблицу с ссылками
	ТаблицаДокументов = Новый ТаблицаЗначений();
	ТаблицаДокументов.Колонки.Добавить("Документ", Новый ОписаниеТипов(МассивТипов));
	Для Каждого Документ Из МассивДокументов Цикл
		ТаблицаДокументов.Добавить().Документ = Документ;
	КонецЦикла;
	
	//Выполним запрос
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.Документ
	|ПОМЕСТИТЬ СписокДокументов
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДокументов.Документ,
	|	СписокДокументов.Документ.ПометкаУдаления 	КАК ПометкаУдаления,
	|	СписокДокументов.Документ.Проведен 			КАК Проведен,
	|	СписокДокументов.Документ.Дата 				КАК Дата,
	|	СписокДокументов.Документ.Номер 			КАК Номер
	|ИЗ
	|	СписокДокументов КАК СписокДокументов"
	);
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ТаблицаДокументов);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаДокументов.Индексы.Добавить("Документ");
	
	Возврат ТаблицаДокументов;
	
КонецФункции

// Отображает картинку статуса документа в табличном поле.
// 
// Параметры
//  ОформленияСтрок - оформления строк табличного поля с данными табличной части,
//  					содержащей колонку Статус
//	Колонки - коллекция колонок табличного поля
Процедура ОтобразитьСтатусыДокументов(ОформленияСтрок, Колонки)
	
	Если Колонки.Статус.Видимость Тогда
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			//Картинка статуса
			ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку	= Истина;
			ОформлениеСтроки.Ячейки.Статус.ОтображатьТекст 		= Ложь;
			ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = ОформлениеСтроки.ДанныеСтроки.Статус;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ОбновлениеОтображения
// Выполняет настройки диалога, зависящие от количества строк в табличных частях
Процедура ОбновлениеОтображения()
	
	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.Панель.Страницы;
	СтраницаПанели.УчтенныеДокументы.Заголовок			= "Учтенные документы ("		+ УчтенныеДокументы.Количество() 		+ " поз.)";
	СтраницаПанели.СформированныеДокументы.Заголовок	= "Сформированные документы ("	+ СформированныеДокументы.Количество() 	+ " поз.)";
	
	// Управляем активностью кнопок командных панелей:
	// - СформированныеДокументы
	ДоступныКнопкиСформированныеДокументы 	= СформированныеДокументы.Количество()<>0;
	Для Каждого Кнопка Из ЭлементыФормы.КоманднаяПанельСформированныеДокументы.Кнопки Цикл
		Кнопка.Доступность 					= ДоступныКнопкиСформированныеДокументы;
		КнопкаКонтекстногоМеню 				= ЭлементыФормы.КоманднаяПанельКонтекстноеМенюСформированныеДокументы.Кнопки.Найти(Кнопка.Имя);
		Если КнопкаКонтекстногоМеню <> Неопределено Тогда
			КнопкаКонтекстногоМеню.Доступность 	= ДоступныКнопкиСформированныеДокументы;
		КонецЕсли;
	КонецЦикла;
	
	// - СформированныеДокументы / Перейти
	Для Каждого Кнопка Из ЭлементыФормы.КоманднаяПанельСформированныеДокументы.Кнопки.ПодменюПерейти.Кнопки Цикл
		Кнопка.Доступность 					= ДоступныКнопкиСформированныеДокументы;
	КонецЦикла;
	
	// - УчтенныеДокументы
	ДоступныКнопкиУчтенныеДокументы 		= УчтенныеДокументы.Количество()<>0;
	Для Каждого Кнопка Из ЭлементыФормы.КоманднаяПанельУчтенныеДокументы.Кнопки Цикл
		Кнопка.Доступность 					= ДоступныКнопкиУчтенныеДокументы;
		КнопкаКонтекстногоМеню 				= ЭлементыФормы.КоманднаяПанельКонтекстноеМенюУчтенныеДокументы.Кнопки.Найти(Кнопка.Имя);
		Если КнопкаКонтекстногоМеню <> Неопределено Тогда
			КнопкаКонтекстногоМеню.Доступность 	= ДоступныКнопкиУчтенныеДокументы;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Обработчик события ПриИзменении поля ввода Настройка
// Заполнение реквизитов по настройке
// Очистка списков документов
Процедура НастройкаПриИзменении(Элемент)
	
	ЗаполнитьДаннымиНастройки();
		
КонецПроцедуры

// Обработчик нажатия кнопки КнопкаВыбораПериода
// Выбор периода в диалоге
Процедура КнопкаВыбораПериодаНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал 	= Истина;
	НастройкаПериода.РедактироватьКакПериод 	= Истина;
	НастройкаПериода.ВариантНастройки 			= ВариантНастройкиПериода.Период;
	
	НастройкаПериода.УстановитьПериод(ДатаНачалаПериода, КонецДня(ДатаОкончанияПериода));
	
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНачалаПериода    = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончанияПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик нажатия кнопки "СформироватьДокументы" панели "ОсновныеДействия"
// Инициирует интерактивное выполнение задачи.
Процедура КнопкаСформироватьДокументы(Кнопка)
	
	// Используем этот заголовок, пока не убедимся, что реквизиты заполнены.
	// Далее будет использовать другой заголовок, с указанием настройки и периода.
	ЗаголовокСообщения = "Формирование документов"; 
	
	// Проверяем заполненность настройки
	Если Настройка.Пустая() Тогда
		Предупреждение("Не указана настройка", , ЗаголовокСообщения);
		Возврат;
	КонецЕсли;
	
	// Проверяем, что указан период
	Если ДатаОкончанияПериода = '0001-01-01' Тогда
		Предупреждение("Не указана дата окончания периода!", , ЗаголовокСообщения);
		Возврат;
	КонецЕсли;
	
	// Проверяем, что период - правильный
	Если ДатаНачалаПериода > ДатаОкончанияПериода Тогда
		Предупреждение("Дата окончания периода должна быть не меньше даты начала!", , ЗаголовокСообщения);
		Возврат;
	КонецЕсли;
	
	// Проверим, что дата начала периода формирования документов не нарушает последовательности формирования
	ПравильнаяДатаНачалаПериода = РегламентноеФормированиеДокументов.ПолучитьДатуНачалаСледующегоПериодаФормированияДокументов(Настройка);
	Если ПравильнаяДатаНачалаПериода <> '0001-01-01' И ДатаНачалаПериода <> ПравильнаяДатаНачалаПериода Тогда
		
		Если ДатаНачалаПериода > ПравильнаяДатаНачалаПериода Тогда
			Сообщение = "По данным за период " + ПредставлениеПериода(ПравильнаяДатаНачалаПериода, КонецДня(ДатаНачалаПериода)) + " документы не формировались.";
		Иначе
			Сообщение = "По данным за период " + ПредставлениеПериода(ДатаНачалаПериода, ПравильнаяДатаНачалаПериода - 1) + " документы уже сформированы.";
		КонецЕсли;
			
		Ответ = Вопрос(Сообщение + Символы.ПС 
		+ "Рекомендуется формировать документы за период с " + Формат(ПравильнаяДатаНачалаПериода, "ДЛФ=D") + "." + Символы.ПС 
		+ "Сформировать документы?",
		РежимДиалогаВопрос.ДаНет,
		, //таймаут
		КодВозвратаДиалога.Нет, 
		ЗаголовокСообщения);
			
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СформироватьДокументы() Тогда
		
		ДополнитьСведениямиОДокументах(СформированныеДокументы);
		ДополнитьСведениямиОДокументах(УчтенныеДокументы);
	
		Если СформированныеДокументы.Количество() = 0 Тогда
			Предупреждение("За период "+ПредставлениеПериода(ДатаНачалаПериода, КонецДня(ДатаОкончанияПериода))+" нет данных для формирования документов.",,"Формирование документов");
		Иначе
			Предупреждение("Документы сформированы.",,"Формирование документов");
		КонецЕсли;
		
	Иначе
		
		Предупреждение("Операция не выполнена!",,"Формирование документов");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

// Обработчик события Выбор поля ввода СформированныеДокументы
// Открывает выбранный документ
Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяСтрока.Документ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Обработчик события Выбор поля ввода УчтенныеДокументы
// Открывает выбранный документ
Процедура УчтенныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяСтрока.Документ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Обработчик события ПриПолученииДанных поля ввода УчтенныеДокументы
// Выводит сведения о документах в колонки табличного поля
Процедура УчтенныеДокументыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ОтобразитьСтатусыДокументов(ОформленияСтрок, ЭлементыФормы.УчтенныеДокументы.Колонки);
	
КонецПроцедуры

// Обработчик события ПриПолученииДанных поля ввода СформированныеДокументы
// Выводит сведения о документах в колонки табличного поля
Процедура СформированныеДокументыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ОтобразитьСтатусыДокументов(ОформленияСтрок, ЭлементыФормы.СформированныеДокументы.Колонки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ТАБЛИЧНЫХ ПОЛЕЙ

// Выбирает источник действий командной панели, кнопка которой передана,
// из табличных частей УчтенныеДокументы и СформированныеДокументы
//
// Параметры
//  Кнопка - кнопка командной панели
//
// Возвращаемое значение
//  Строка		  - имя табличной части
//  Пустая строка - не удалось определить источник действий
Функция ПолучитьТабличнуюЧастьПоКнопкеКоманднойПанели(Кнопка)
	
	КомандныеПанели = Новый Массив();
	КомандныеПанели.Добавить("КоманднаяПанельУчтенныеДокументы");
	КомандныеПанели.Добавить("КоманднаяПанельКонтекстноеМенюУчтенныеДокументы");
	КомандныеПанели.Добавить("КоманднаяПанельСформированныеДокументы");
	КомандныеПанели.Добавить("КоманднаяПанельКонтекстноеМенюСформированныеДокументы");
	
	Для Каждого КоманднаяПанель Из КомандныеПанели Цикл
		
		Если ЭлементыФормы[КоманднаяПанель].Кнопки.Индекс(Кнопка) >= 0 Тогда
			Возврат ЭлементыФормы[КоманднаяПанель].ИсточникДействий.Данные;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Выполняет групповую обработку отмеченных строк
//
// Параметры
//  Кнопка   - кнопка командной панели; по кнопке определяется обрабатываемая табличная часть
//  Действие - строка, идентификатор действия, которое надо выполнить
//
Процедура ВыполнитьГрупповуюОбработку(Кнопка, Действие)
	
	// Получим массив строк для групповой обработки
	ИмяТабличнойЧасти  = ПолучитьТабличнуюЧастьПоКнопкеКоманднойПанели(Кнопка);
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		// Такое может быть только при ошибке программирования
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтмеченныеСтроки   = ЭтотОбъект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Если ОтмеченныеСтроки.Количество() = 0 Тогда
		
		Предупреждение("Не установлены пометки для обрабатываемых документов.
		|Для установки пометок можно использовать кнопку на командной панели.", , Действие);
		
		Возврат;
		
	КонецЕсли;
	
	// Создаем индикатор
	Если ОтмеченныеСтроки.Количество()>2 Тогда
		ФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаИндикатора.МаксимальноеЗначение		= ОтмеченныеСтроки.Количество();
		ФормаИндикатора.КомментарийОбработкиДанных	= Действие;
		ФормаИндикатора.НаименованиеОбработкиДанных	= Действие;
		ФормаИндикатора.Открыть();
	Иначе
		ФормаИндикатора = Неопределено;
	КонецЕсли;
	
	Для Каждого ДанныеСтроки Из ОтмеченныеСтроки Цикл
		
		Объект = ДанныеСтроки.Документ.ПолучитьОбъект();
		Отказ = Ложь;
		
		Попытка
			
			Если Действие = "Проведение документов" Тогда
				
				Объект.Заблокировать();
				
				Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.ОтчетМастераСмены") 
					ИЛИ ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.ОтчетОСоставеСмены") Тогда
					Объект.мРазрешенОбходПроверкиЗапретаРедактированияЗакрытыхСмен = Истина;
				КонецЕсли;
				
				Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ИначеЕсли Действие = "Изменение пометки на удаление" Тогда
				
				Объект.Заблокировать();
				
				Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.ОтчетМастераСмены") 
					ИЛИ ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.ОтчетОСоставеСмены") Тогда
					Объект.мРазрешенОбходПроверкиЗапретаРедактированияЗакрытыхСмен = Истина;
				КонецЕсли;
				
				Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);
			ИначеЕсли Действие = "Печать документов" Тогда
				УниверсальныеМеханизмы.НапечататьДокументИзФормыСписка(Объект);	
			КонецЕсли;
		Исключение
			// Сообщения не выдаем, т.к. о возникшей проблеме покажет
			// а) то, что осталась отметка
			// б) то, что не поменялся статус в колонке
			Отказ = Истина;
		КонецПопытки;
		
		Если НЕ Отказ Тогда
			ДанныеСтроки.Пометка = Ложь;
		КонецЕсли;
		
		//Обновим индикатор выполнения
		Если ФормаИндикатора <> Неопределено Тогда
			ФормаИндикатора.КомментарийЗначения = "" + ДанныеСтроки.Документ;
			ФормаИндикатора.Значение 			= ФормаИндикатора.Значение + 1;
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
		
	КонецЦикла;
	
	// Убираем индикатор
	Если ФормаИндикатора <> Неопределено Тогда
		ФормаИндикатора.Закрыть();
	КонецЕсли;
	
	// Обновим статусы объектов
	ДополнитьСведениямиОДокументах(ЭтотОбъект[ИмяТабличнойЧасти]);
	
КонецПроцедуры

// Обработчик нажатия кнопки УстановитьФлажки командной панели 
// табличного поля СформированныеДокументы или табличного поля УчтенныеДокументы
Процедура УстановитьФлажкиНажатие(Кнопка)
	
	ИмяТабличнойЧасти = ПолучитьТабличнуюЧастьПоКнопкеКоманднойПанели(Кнопка);
	Для Каждого ДанныеСтроки Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
		ДанныеСтроки.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик нажатия кнопки СнятьФлажки командной панели 
// табличного поля СформированныеДокументы или табличного поля УчтенныеДокументы
Процедура СнятьФлажкиНажатие(Кнопка)
	
	ИмяТабличнойЧасти = ПолучитьТабличнуюЧастьПоКнопкеКоманднойПанели(Кнопка);
	Для Каждого ДанныеСтроки Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
		ДанныеСтроки.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик нажатия кнопки Провести командной панели 
// табличного поля СформированныеДокументы или табличного поля УчтенныеДокументы
Процедура ПровестиНажатие(Кнопка)
	
	ВыполнитьГрупповуюОбработку(Кнопка, "Проведение документов");
	
КонецПроцедуры

// Обработчик нажатия кнопки УстановитьПометкуУдаления командной панели 
// табличного поля СформированныеДокументы или табличного поля УчтенныеДокументы
Процедура УстановитьПометкуУдаленияНажатие(Кнопка)
	
	ВыполнитьГрупповуюОбработку(Кнопка, "Изменение пометки на удаление");
	
КонецПроцедуры

// Обработчик нажатия кнопки Печать командной панели 
// табличного поля СформированныеДокументы или табличного поля УчтенныеДокументы
Процедура ПечатьНажатие(Кнопка)
	
	ВыполнитьГрупповуюОбработку(Кнопка, "Печать документов");
	
КонецПроцедуры

// Обработчик нажатия кнопки Обновить командной панели 
// табличного поля СформированныеДокументы или табличного поля УчтенныеДокументы
Процедура ОбновитьНажатие(Кнопка)
	
	ИмяТабличнойЧасти = ПолучитьТабличнуюЧастьПоКнопкеКоманднойПанели(Кнопка);
	
	Если НЕ ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		// Обновим статусы объектов
		ДополнитьСведениямиОДокументах(ЭтотОбъект[ИмяТабличнойЧасти]);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия кнопки  "Структура подчиненности" меню "Перейти" командной панели 
// табличного поля СформированныеДокументы
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭлементыФормы.СформированныеДокументы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭлементыФормы.СформированныеДокументы.ТекущаяСтрока.Документ);
	
КонецПроцедуры

// Обработчик нажатия кнопки "Движения документа по регистрам" меню "Перейти" командной панели 
// табличного поля СформированныеДокументы
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	Если ЭлементыФормы.СформированныеДокументы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РаботаСДиалогами.НапечататьДвиженияДокумента(ЭлементыФормы.СформированныеДокументы.ТекущаяСтрока.Документ);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ