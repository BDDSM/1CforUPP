////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ЭлементУправления)

	Если ЭлементУправления = "ВидРасчетаДополнительногоОтпуска" Тогда
	 	МассивСпособовРасчета = Новый Массив;
	 	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	 	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
		СтруктураПараметров = Новый Структура("СпособРасчета, Предопределенный",МассивСпособовРасчета,Ложь);
	ИначеЕсли ЭлементУправления = "ВидРасчетаУчебногоОтпуска" Тогда
		МассивСпособовРасчета = Новый Массив;
		МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
		МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
		ВидыУчетаВремениУчебногоОтпуска = Новый СписокЗначений;
		ВидыУчетаВремениУчебногоОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение);
		ВидыУчетаВремениУчебногоОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации);
		ВидыУчетаВремениУчебногоОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности);
		СтруктураПараметров = Новый Структура("СпособРасчета, ОбозначениеВТабелеУчетаРабочегоВремени",МассивСпособовРасчета,ВидыУчетаВремениУчебногоОтпуска);
	ИначеЕсли ЭлементУправления = "ВидРасчетаОплатыПоСреднемуЗаработку" Тогда
	 	МассивСпособовРасчета = Новый Массив;
		МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
		МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
		СтруктураПараметров = Новый Структура("СпособРасчета, Предопределенный",МассивСпособовРасчета,Ложь);
	ИначеЕсли ЭлементУправления = "ВидНевыхода" Тогда
	 	СписокПричинНевыхода = Новый СписокЗначений;
		СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);
		СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет);
		СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
		СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыПоТКРФ);
		СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход);
		СтруктураПараметров = Новый Структура("Ссылка",СписокПричинНевыхода);
	Иначе
		СтруктураПараметров = Новый Структура();
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ТипДокументов = ТипЗнч(РасчетныйДокумент);
	Если ТипДокументов = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
		
		ЭлементыФормы.ПанельРеквизитов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитов.Страницы.Больничный;
		
		Если РасчетныйДокумент.Пустая() Тогда
			// заполнение поля "процент оплаты" для больничных листов
			Если Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
				ДатаНачалаСобытия = ДатаНачала;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДатаНачалаОплаты) Тогда
				ДатаНачалаОплаты = ДатаНачала;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПериодРасчетаСреднегоЗаработкаНачало) Тогда
				ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), - 12);
				ПериодРасчетаСреднегоЗаработкаОкончание = НачалоМесяца(ДатаНачалаСобытия) - 1;
			КонецЕсли;
			ВидРасчетаЗаСчетРаботодателя = ОбщегоНазначенияЗК.ОсобыйЭлемент(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций, "ОплатаБолезниЗаСчетРаботодателя");
		Иначе 	
			ВидРасчетаЗаСчетРаботодателя = ОбщегоНазначения.ПолучитьЗначениеРеквизита(РасчетныйДокумент, "ВидРасчетаЗаСчетРаботодателя");
		КонецЕсли;
		
		ЭлементыФормы.ПервичныйБольничныйЛист.ТолькоПросмотр = Не ЯвляетсяПродолжениемБолезни;
		ЭлементыФормы.ДатаНачалаСобытия.ТолькоПросмотр = ТолькоПросмотр Или (ЯвляетсяПродолжениемБолезни И ЗначениеЗаполнено(ПервичныйБольничныйЛист));
		ЭлементыФормы.ПанельПроцентовОграничений.ТекущаяСтраница = ?(ЗначениеЗаполнено(ВыплатаЗаСчетФедеральногоБюджета) И Не ПрименятьЛьготыПриНачисленииПособия, ЭлементыФормы.ПанельПроцентовОграничений.Страницы.СтраницаОсобыйРасчет, ЭлементыФормы.ПанельПроцентовОграничений.Страницы.СтраницаОбычныйРасчет);	
	
		НадоВводитьСлучайУходаЗаРебенком = ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
	    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.ТолькоПросмотр = Не НадоВводитьСлучайУходаЗаРебенком;
	    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.АвтоОтметкаНезаполненного = НадоВводитьСлучайУходаЗаРебенком;
	    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.ОтметкаНезаполненного = НадоВводитьСлучайУходаЗаРебенком И СлучайУходаЗаБольнымРебенком.Пустая();
		Если Не НадоВводитьСлучайУходаЗаРебенком И ЗначениеЗаполнено(СлучайУходаЗаБольнымРебенком) Тогда
			СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка()
		КонецЕсли;
		ЭлементыФормы.НадписьДней.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейОплаты)
	
	ИначеЕсли ТипДокументов = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда
		Если Не ЗначениеЗаполнено(ПроцентОплаты) И РасчетныйДокумент.Пустая() Тогда
			ПроцентОплаты = 100
		КонецЕсли;
		ЭлементыФормы.ПанельРеквизитов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитов.Страницы.Средний
	ИначеЕсли ТипДокументов = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
		Если РасчетныйДокумент.Пустая() Тогда
			Если Не ЗначениеЗаполнено(ПроцентОплаты) Тогда
				ПроцентОплаты = 100
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
				ДатаНачалаСобытия = ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ДатаНачалаДоп);
			КонецЕсли;
		КонецЕсли;
		Если Неявка = Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебный Тогда
			ЭлементыФормы.ПанельРеквизитов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитов.Страницы.УчебныйОтпуск
		Иначе
			ЭлементыФормы.ПанельРеквизитов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитов.Страницы.Отпуск
		КонецЕсли;
		ЭлементыФормы.НадписьОплачиваемыйПериод.Заголовок = "Оплачиваемый период: с " + ?(ЗначениеЗаполнено(?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ДатаНачалаДоп)),Формат(?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ДатаНачалаДоп),"ДЛФ=DD"),"<не указано>") + " по " + ?(ЗначениеЗаполнено(ДатаОкончания),Формат(ДатаОкончания,"ДЛФ=DD"),"<не указано>");
	ИначеЕсли ТипДокументов = Тип("ДокументСсылка.РегистрацияПростоевРаботниковОрганизаций") Тогда
		ЭлементыФормы.ПанельРеквизитов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитов.Страницы.Простой
	ИначеЕсли ТипДокументов = Тип("ДокументСсылка.НевыходыВОрганизациях") Тогда
		ЭлементыФормы.ПанельРеквизитов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитов.Страницы.Невыход
	Иначе // отпуск по уходу
		ЭлементыФормы.ПанельРеквизитов.Видимость = Ложь
	КонецЕсли;	  
	
	ТолькоПросмотр = ЗначениеЗаполнено(РасчетныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Если Модифицированность Тогда
		ЗаполнитьЗначенияСвойств(КлючУникальности,ЭтаФорма);
	КонецЕсли;
	Закрыть();
КонецПроцедуры

// страница Отпуск

Процедура ВидРасчетаДополнительногоОтпускаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаОтпускаОрганизаций");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
 	МассивСпособовРасчета = Новый СписокЗначений;
 	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
 	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = МассивСпособовРасчета;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

 	ВидыРасчетаОтпускОсновной = Новый СписокЗначений;
 	ВидыРасчетаОтпускОсновной.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни);
 	ВидыРасчетаОтпускОсновной.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка);
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = ВидыРасчетаОтпускОсновной;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ВидРасчетаДополнительногоОтпускаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидРасчетаДополнительногоОтпуска"), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
КонецПроцедуры

Процедура ВидРасчетаДополнительногоОтпускаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидРасчетаДополнительногоОтпуска"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

Процедура ПроцентОплатыРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Направление = 1 Тогда // увеличиваем значение
		Элемент.Значение = Элемент.Значение + 50;
	Иначе // = -1 - уменьшаем значение
		Элемент.Значение = Элемент.Значение - 50;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// страница Больничный

Процедура ФлажокПродолженияБолезниПриИзменении(Элемент)
	ЭлементыФормы.ПервичныйБольничныйЛист.ТолькоПросмотр = Не ЯвляетсяПродолжениемБолезни;
	Если Не ЯвляетсяПродолжениемБолезни Тогда
		Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
			ПервичныйБольничныйЛист = ""
		КонецЕсли;
		ДатаНачалаСобытия = ДатаНачала;
	КонецЕсли;
	ЭлементыФормы.ДатаНачалаСобытия.ТолькоПросмотр = ТолькоПросмотр Или (ЯвляетсяПродолжениемБолезни И ЗначениеЗаполнено(ПервичныйБольничныйЛист));
КонецПроцедуры

Процедура ПервичныйБольничныйЛистНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	мФормаВыбораПервичногоБольничногоЛиста = Документы.НачислениеПоБольничномуЛисту.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "ВыборПервичногоБЛДляНачисленияПоБЛ № " + НомерВходящегоДокумента);
	мФормаВыбораПервичногоБольничногоЛиста.Отбор.Сотрудник.Установить(Сотрудник);
	мФормаВыбораПервичногоБольничногоЛиста.Отбор.Организация.Установить(Организация);
	мФормаВыбораПервичногоБольничногоЛиста.Отбор.ЯвляетсяПродолжениемБолезни.Установить(Ложь);
	мФормаВыбораПервичногоБольничногоЛиста.НачальноеЗначениеВыбора = ПервичныйБольничныйЛист;
	мФормаВыбораПервичногоБольничногоЛиста.Порядок.Установить("Дата Убыв");
	мФормаВыбораПервичногоБольничногоЛиста.Открыть();
	
КонецПроцедуры

Процедура ПервичныйБольничныйЛистПриИзменении(Элемент)
	
	// Скопируем данные из первичного-листа 
	Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		
		БылаДатаНарушенияРежима = ДатаНарушенияРежима;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ПервичныйБольничныйЛист,"ДатаНачалаСобытия,ДатаНарушенияРежима,ПричинаНетрудоспособности,ВидРасчета,ПроцентОплаты,СлучайУходаЗаБольнымРебенком,ОграничениеПособия");
		Если Не ЗначениеЗаполнено(ДатаНарушенияРежима) Тогда
			ДатаНарушенияРежима = БылаДатаНарушенияРежима;
		КонецЕсли;
		
		ДнейОплаты = РассчитатьКалендарныеДниБолезни(ДатаНачалаСобытия, ДатаНачалаОплаты, ДатаОкончания, ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком);
		ЭлементыФормы.НадписьДней.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейОплаты)
	
	КонецЕсли; 

КонецПроцедуры

Процедура ПричинаНетрудоспособностиПриИзменении(Элемент)
	
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам;
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве;
	Иначе
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ;
	КонецЕсли;
	
	НачислениеПоБольничномуЛистуСервис.ПрочитатьРазмерыПособия(ЭтаФорма, Ложь, Ложь);
	
	НадоВводитьСлучайУходаЗаРебенком = Элемент.Значение = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.ТолькоПросмотр = Не НадоВводитьСлучайУходаЗаРебенком;
    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.АвтоОтметкаНезаполненного = НадоВводитьСлучайУходаЗаРебенком;
    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.ОтметкаНезаполненного = НадоВводитьСлучайУходаЗаРебенком И СлучайУходаЗаБольнымРебенком.Пустая();
	Если Не НадоВводитьСлучайУходаЗаРебенком И Не СлучайУходаЗаБольнымРебенком.Пустая() Тогда
		СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка()
	КонецЕсли;
	ДнейОплаты = РассчитатьКалендарныеДниБолезни(ДатаНачалаСобытия, ДатаНачалаОплаты, ДатаОкончания, ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком);
	ЭлементыФормы.НадписьДней.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейОплаты)
	
КонецПроцедуры

Процедура ДатаНачалаСобытияПриИзменении(Элемент)
	ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), - 12);
	ПериодРасчетаСреднегоЗаработкаОкончание = НачалоМесяца(ДатаНачалаСобытия) - 1;
КонецПроцедуры

Процедура ДатаНачалаОплатыПриИзменении(Элемент)
	ДнейОплаты = РассчитатьКалендарныеДниБолезни(ДатаНачалаСобытия, ДатаНачалаОплаты, ДатаОкончания, ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком);
	ЭлементыФормы.НадписьДней.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейОплаты)
КонецПроцедуры

Процедура ДнейОплатыПриИзменении(Элемент)
	ЭлементыФормы.НадписьДней.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейОплаты)
КонецПроцедуры

Процедура СтажЛетПриИзменении(Элемент)
	НачислениеПоБольничномуЛистуСервис.ОпределитьРазмерыПособияПоСтажу(ПричинаНетрудоспособности, СтажЛет, СтажМесяцев, ПроцентОплаты, ОграничениеПособия)
КонецПроцедуры

Процедура СтажМесяцевПриИзменении(Элемент)
	НачислениеПоБольничномуЛистуСервис.ОпределитьРазмерыПособияПоСтажу(ПричинаНетрудоспособности, СтажЛет, СтажМесяцев, ПроцентОплаты, ОграничениеПособия)
КонецПроцедуры

Процедура СтажЛет1ПриИзменении(Элемент)
	НачислениеПоБольничномуЛистуСервис.ОпределитьРазмерыПособияПоСтажу(ПричинаНетрудоспособности, СтажЛет, СтажМесяцев, ПроцентОплатыБезЛьгот, ОграничениеПособияБезЛьгот)
КонецПроцедуры

Процедура СтажМесяцев1ПриИзменении(Элемент)
	НачислениеПоБольничномуЛистуСервис.ОпределитьРазмерыПособияПоСтажу(ПричинаНетрудоспособности, СтажЛет, СтажМесяцев, ПроцентОплатыБезЛьгот, ОграничениеПособияБезЛьгот)
КонецПроцедуры

Процедура ПроцентОплатыБольничногоРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ТекущееЗначение = Элемент.Значение;
	Если Направление = 1 Тогда // увеличиваем значение
		Если ТекущееЗначение = 0 Тогда
			Элемент.Значение = 60;
		ИначеЕсли ТекущееЗначение = 60 Тогда
			Элемент.Значение = 80;
		ИначеЕсли ТекущееЗначение = 80 Тогда
			Элемент.Значение = 100;
		Иначе
			// далее увеличивать не будем 
		КонецЕсли;
	Иначе // = -1 - уменьшаем значение
		Если ТекущееЗначение = 100 Тогда
			Элемент.Значение = 80;
		ИначеЕсли ТекущееЗначение = 80 Тогда
			Элемент.Значение = 60;
		Иначе
			// далее уменьшать не будем 
		КонецЕсли;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура НадписьПоказЛьготныхДанныхНажатие(Элемент)
	ФормаРедактирования = ПолучитьФорму("ФормаДополнительныхДанных",ЭтаФорма,ЭтаФорма);
	ЗаполнитьЗначенияСвойств(ФормаРедактирования,ЭтаФорма,,"ТекущийЭлемент,Модифицированность,ВладелецФормы,Заголовок,СостояниеОкна,РазрешитьСостояниеОбычное");
	ФормаРедактирования.Открыть();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// страница Средний

Процедура ВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаОтпускаОрганизаций");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
 	МассивСпособовРасчета = Новый СписокЗначений;
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = МассивСпособовРасчета;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидРасчетаОплатыПоСреднемуЗаработку"), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
КонецПроцедуры

Процедура ВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидРасчетаОплатыПоСреднемуЗаработку"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

Процедура ПроцентОплатыПоСреднемуРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Направление = 1 Тогда // увеличиваем значение
		Элемент.Значение = Элемент.Значение + 50;
	Иначе // = -1 - уменьшаем значение
		Элемент.Значение = Элемент.Значение - 50;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// страница Невыход

Процедура ВидНевыходаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
 	СписокПричинНевыхода = Новый СписокЗначений;
	СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);
	СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет);
	СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
	СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыПоТКРФ);
	СписокПричинНевыхода.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход);
	СписокВыбора = СписокПричинНевыхода;
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидНевыходаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидНевыхода"), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
КонецПроцедуры

Процедура ВидНевыходаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидНевыхода"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

Процедура ВидРасчетаУчебногоОтпускаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаОтпускаОрганизаций");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
 	МассивСпособовРасчета = Новый СписокЗначений;
 	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
 	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = МассивСпособовРасчета;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

 	ВидыУчетаВремениУчебногоОтпуска = Новый СписокЗначений;
 	ВидыУчетаВремениУчебногоОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение);
 	ВидыУчетаВремениУчебногоОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации);
 	ВидыУчетаВремениУчебногоОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности);
	ФормаВыбораВидаРасчета.Отбор.ОбозначениеВТабелеУчетаРабочегоВремени.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.ОбозначениеВТабелеУчетаРабочегоВремени.Значение = ВидыУчетаВремениУчебногоОтпуска;
	ФормаВыбораВидаРасчета.Отбор.ОбозначениеВТабелеУчетаРабочегоВремени.Использование = Истина;
	
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ВидРасчетаУчебногоОтпускаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидРасчетаУчебногоОтпуска"), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
КонецПроцедуры

Процедура ВидРасчетаУчебногоОтпускаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидРасчетаУчебногоОтпуска"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА