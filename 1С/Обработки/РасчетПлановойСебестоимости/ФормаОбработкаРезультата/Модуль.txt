////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедуры выполняет необходимые действия при установке нового значения в поле
// выбора действия.
//
// Параметры:
//  ТекущийЭлементДействий - число, индекс устанавливаемого действия в списке действий
//
Процедура ПриИзмененииТекущегоДействия(ТекущийЭлементДействий)

	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаВыполнить.Действие = СписокДействий[ТекущийЭлементДействий].Значение;
	
	ДействиеНеВыполнено = Истина;
	
	Если СписокДействий[ТекущийЭлементДействий].Представление = "Добавить статью затрат" Тогда
		ЭлементыФормы.Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Сумма;
		
	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Изменить статью затрат" Тогда
		ЭлементыФормы.Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.СтатьяЗатрат;
		
	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Удалить статью затрат" Тогда
		ЭлементыФормы.Панель.Свертка = РежимСверткиЭлементаУправления.Верх;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииТекущегоДействия()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеДобавитьСтатьюЗатрат"), "Добавить статью затрат");
	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеИзменитьСтатьюЗатрат"), "Изменить статью затрат");
	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУдалитьСтатьюЗатрат"), "Удалить статью затрат");
	
	// Заполним список действий для выбора из выпадающего списка
	ЭлементыФормы.ПолеВыбораДействия.СписокВыбора = СписокДействий;
	
	// Попробуем вспомнить последнее выбранное значение из списка действий
	ТекущееДействие = ВосстановитьЗначение("РасчетПлановойСебестоимостиТекущееДействие");

	Если (ТипЗнч(ТекущееДействие) <> Тип("Действие"))
	 ИЛИ (СписокДействий.НайтиПоЗначению(ТекущееДействие) = Неопределено) Тогда
	 
	 	// Нет сохраненного значения или сохранено значение, отсутствующее в списке.
		ТекущееДействие = СписокДействий[0].Значение;
	КонецЕсли;

	ЭлементыФормы.ПолеВыбораДействия.Значение = ТекущееДействие;
	
	// Установим элементы формы в зависимости от выбранного действия
	ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(ТекущееДействие)));
	
	ДействиеНеВыполнено = Истина;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
// Если действие не было выполнено задает вопрос пользователю.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ДействиеНеВыполнено Тогда
		Если Вопрос("Выбранное действие не было выполнено! Продолжить?", 
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура добавляет указанную статью затрат в строки дерева результата расчета.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КнопкаВыполнитьНажатиеДобавитьСтатьюЗатрат(Элемент)
	
	// Должна быть выбрана статья затрат.
	Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		
		Предупреждение("Не выбрана статья затрат!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.СтатьяЗатрат;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаНоменклатуры Из ДеревоРезультат.Строки Цикл
		
		НоваяСтрока = СтрокаНоменклатуры.Строки.Добавить();
		НоваяСтрока.НоменклатураСтатьяЗатрат = СтатьяЗатрат;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтатьяЗатрат.ХарактерЗатрат;
		НоваяСтрока.ВидЗатрат = СтатьяЗатрат.ВидЗатрат;
		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.Валюта = мВалютаУправленческогоУчета;
		
		СтрокаНоменклатуры.Сумма = СтрокаНоменклатуры.Сумма + Сумма;
		
	КонецЦикла;
	
	ДействиеНеВыполнено = Ложь;
	Закрыть();
	
КонецПроцедуры // КнопкаВыполнитьНажатиеДобавитьСтатьюЗатрат()

// Процедура добавляет указанную статью затрат в строки дерева результата расчета.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КнопкаВыполнитьНажатиеИзменитьСтатьюЗатрат(Элемент)
	
	// Должна быть выбрана статья затрат.
	Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		
		Предупреждение("Не выбрана статья затрат!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.СтатьяЗатрат;
		Возврат;
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НоменклатураСтатьяЗатрат", СтатьяЗатрат);
	
	МассивСтрок = Новый Массив;
	Если ДеревоРезультат.Строки.Количество() <> 0 Тогда
		МассивСтрок = ДеревоРезультат.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	КонецЕсли;
	
	Для Каждого Строка Из МассивСтрок Цикл
		Строка.НоменклатураСтатьяЗатрат = НоваяСтатьяЗатрат;
	КонецЦикла;
	
	ДействиеНеВыполнено = Ложь;
	Закрыть();
	
КонецПроцедуры // КнопкаВыполнитьНажатиеИзменитьСтатьюЗатрат()

// Процедура добавляет указанную статью затрат в строки дерева результата расчета.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КнопкаВыполнитьНажатиеУдалитьСтатьюЗатрат(Элемент)
	
	// Должна быть выбрана статья затрат.
	Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		
		Предупреждение("Не выбрана статья затрат!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.СтатьяЗатрат;
		Возврат;
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НоменклатураСтатьяЗатрат", СтатьяЗатрат);
	
	МассивСтрок = Новый Массив;
	Если ДеревоРезультат.Строки.Количество() <> 0 Тогда
		МассивСтрок = ДеревоРезультат.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	КонецЕсли;
	
	Для Каждого Строка Из МассивСтрок Цикл
		СтрокаРодитель = Строка.Родитель;
		СтрокаРодитель.Строки.Удалить(Строка);
	КонецЦикла;
	
	ДействиеНеВыполнено = Ложь;
	Закрыть();
	
	
КонецПроцедуры // КнопкаВыполнитьНажатиеИзменитьСтатьюЗатрат()

// Процедура - обработчик события "ПриИзменении" поля выбора текущего действия.
//
Процедура ПолеВыбораДействияПриИзменении(Элемент)

	// Установим элементы формы в зависимости от выбранного действия
	Если СписокДействий.НайтиПоЗначению(Элемент.Значение) <> Неопределено Тогда
		ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(Элемент.Значение)));
	КонецЕсли;

КонецПроцедуры // ПолеВыбораДействияПриИзменении()