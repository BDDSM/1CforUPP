////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Переменная учетной политики
Перем мПоддерживатьНесколькоСхемМотивации;

// Переменные, хранящие сведения о подрядах сортировок 
Перем мПорядокСортировкиПодразделенияПоКоду;
Перем мПорядокСортировкиДолжностейПоКоду;

// Переменные механизма встроенной справки
Перем ОтображатьСправкуФормы;

// Валюта
Перем мПоказватьВалюту;
Перем мВалютаПоУмолчанию;

// Объекты форм
Перем мШтатноеРасписание;

// Хранит в себе сведения о видах расчтов
Перем мУпрВидыРасчетов;
Перем мРегВидыРасчетов;

Перем ОбработкаКомментариев;

Перем мЖирныйШрифт;
Перем ОтображенныеОрганизации;

Перем мВведенныеДолжности;
Перем мВведенныеВР;

Перем мСписокПустыхПодразделений;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Устанавливает отбор по виду расчета
//
Процедура ОтборПоВидуРасчета()
	
	ТабличноеПолеПоДолжности.Отбор.ВидРасчета.Использование = Истина;
	ТабличноеПолеПоДолжности.Отбор.ВидРасчета.ВидСравнения = ВидСравнения.ВСписке;
	СхемыМотивацииПодразделения.Отбор.ВидРасчета.Использование = Истина;
	СхемыМотивацииПодразделения.Отбор.ВидРасчета.ВидСравнения = ВидСравнения.ВСписке;
	Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности Тогда
		Если мУпрВидыРасчетов = Неопределено Тогда
			мУпрВидыРасчетов = Новый СписокЗначений;
			УпрВидыРасчетов = ПланыВидовРасчета.УправленческиеНачисления.Выбрать();
			Пока УпрВидыРасчетов.Следующий() Цикл
				мУпрВидыРасчетов.Добавить(УпрВидыРасчетов.Ссылка);
			КонецЦикла;
			мУпрВидыРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.ПустаяСсылка());
		КонецЕсли;
		ТабличноеПолеПоДолжности.Отбор.ВидРасчета.Значение = мУпрВидыРасчетов;
		СхемыМотивацииПодразделения.Отбор.ВидРасчета.Значение = мУпрВидыРасчетов;
	Иначе
		Если мРегВидыРасчетов = Неопределено Тогда
			мРегВидыРасчетов = Новый СписокЗначений;
			РегВидыРасчетов = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Выбрать();
			Пока РегВидыРасчетов.Следующий() Цикл
				мРегВидыРасчетов.Добавить(РегВидыРасчетов.Ссылка);
			КонецЦикла;
			мРегВидыРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());
		КонецЕсли;		
		ТабличноеПолеПоДолжности.Отбор.ВидРасчета.Значение = мРегВидыРасчетов;
		СхемыМотивацииПодразделения.Отбор.ВидРасчета.Значение = мРегВидыРасчетов;
	КонецЕсли;
		
КонецПроцедуры //ОтборПоВидуРасчета()

// Управляет валютой в зависимости от вида расчета
//
Процедура ПриИзмененииВидаРасчета(Значение, ИмяОбъекта)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета(ИмяОбъекта, Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаПоУмолчанию);

КонецПроцедуры

// Устанавливает видимость колонок "Валюта" 
// 
Процедура УстанвоитьВидимостьВалюты()
	
	ЭлементыФормы.ТабличноеПолеПоДолжности.Колонки.Валюта1.Видимость = мПоказватьВалюту;
	ЭлементыФормы.ТабличноеПолеПоДолжности.Колонки.Валюта2.Видимость = мПоказватьВалюту;
	ЭлементыФормы.ТабличноеПолеПоДолжности.Колонки.Валюта3.Видимость = мПоказватьВалюту;
	ЭлементыФормы.ТабличноеПолеПоДолжности.Колонки.Валюта4.Видимость = мПоказватьВалюту;
	ЭлементыФормы.ТабличноеПолеПоДолжности.Колонки.Валюта5.Видимость = мПоказватьВалюту;
	ЭлементыФормы.ТабличноеПолеПоДолжности.Колонки.Валюта6.Видимость = мПоказватьВалюту;
	
	ЭлементыФормы.СхемыМотивацииПодразделения.Колонки.Валюта1.Видимость = мПоказватьВалюту;
	ЭлементыФормы.СхемыМотивацииПодразделения.Колонки.Валюта2.Видимость = мПоказватьВалюту;
	ЭлементыФормы.СхемыМотивацииПодразделения.Колонки.Валюта3.Видимость = мПоказватьВалюту;
	ЭлементыФормы.СхемыМотивацииПодразделения.Колонки.Валюта4.Видимость = мПоказватьВалюту;	
	ЭлементыФормы.СхемыМотивацииПодразделения.Колонки.Валюта5.Видимость = мПоказватьВалюту;	
	ЭлементыФормы.СхемыМотивацииПодразделения.Колонки.Валюта6.Видимость = мПоказватьВалюту;	

КонецПроцедуры //УстанвоитьВидимостьВалюты

// Устанавливает заголовок реквизита "НадписьУправлениеВидимостьюДолжностей"
//
Процедура ЗаголовокДолжностей()
	
	Если ПоказыватьДолжности Тогда
		ЭлементыФормы.НадписьУправлениеВидимостьюДолжностей.Заголовок = "Скрыть схемы мотивации по должности";
	Иначе
		ЭлементыФормы.НадписьУправлениеВидимостьюДолжностей.Заголовок = "Показать схемы мотивации по должности";
	КонецЕсли;
	
КонецПроцедуры //ЗаголовокДолжностей

// Устанавливает отбор по подразделению и должности для ТЧ "СхемыМотивацииПодразделения"
//
Процедура УстановитьОтборСхемыМотивацииПоДолжности(Подразделение)
	
	СхемыМотивацииПодразделения.Отбор.Должность.Значение.Очистить();
	
	Если Подразделение = НеОпределено или Подразделение.Пустая() Тогда
		
		ОтборПоВидуРасчета();
		СхемыМотивацииПодразделения.Обновить();
		
	Иначе
		СхемыМотивацииПодразделения.Отбор.Подразделение.Значение.Очистить();
		СхемыМотивацииПодразделения.Отбор.Подразделение.Значение.Добавить(Неопределено);
		СхемыМотивацииПодразделения.Отбор.Подразделение.Значение.Добавить(Подразделение);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СхемыМотивацииРаботников.Должность,
		|	СхемыМотивацииРаботников.ВидРасчета
		|ИЗ
		|	РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|ГДЕ
		|	СхемыМотивацииРаботников.Подразделение = &Подразделение";
		Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И СхемыМотивацииРаботников.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;
		
		мВведенныеДолжности = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Должность");
		мВведенныеВР = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");
	
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписаниеОрганизаций.Должность
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
		|ГДЕ
		|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации = &Подразделение
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СхемыМотивацииРаботников.Должность
		|ИЗ
		|	РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|ГДЕ
		|	СхемыМотивацииРаботников.Подразделение = &Подразделение";
		Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И СхемыМотивацииРаботников.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СхемыМотивацииПодразделения.Отбор.Должность.Значение.Добавить(Выборка.Должность);
		КонецЦикла;
		
		УстановитьОтборПоВидуСМ();
		
		СхемыМотивацииПодразделения.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры //УстановитьОтборСхемыМотивацииПоДолжности

// Устанавливает отбор виду схемы мотивации
//
Процедура УстановитьОтборПоВидуСМ()
	
	Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности Тогда
		// получим учтенную политику по персоналу в разрезе поддержки нескольких схем мотивации 
		Если мПоддерживатьНесколькоСхемМотивации	= Неопределено Тогда
			глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").Свойство("ПоддерживатьНесколькоСхемМотивации",мПоддерживатьНесколькоСхемМотивации);
		КонецЕсли;
		
		Если мПоддерживатьНесколькоСхемМотивации Тогда
			СхемыМотивацииПодразделения.Отбор.ВидСхемыМотивации.Использование	= Истина;
			СхемыМотивацииПодразделения.Отбор.ВидСхемыМотивации.ВидСравнения	= ВидСравнения.Равно;
			СхемыМотивацииПодразделения.Отбор.ВидСхемыМотивации.Значение		= ВидСхемыМотивации;
			
			ТабличноеПолеПоДолжности.Отбор.ВидСхемыМотивации.Использование	= Истина;
			ТабличноеПолеПоДолжности.Отбор.ВидСхемыМотивации.ВидСравнения	= ВидСравнения.Равно;
			ТабличноеПолеПоДолжности.Отбор.ВидСхемыМотивации.Значение		= ВидСхемыМотивации;
			
		Иначе
			СхемыМотивацииПодразделения.Отбор.ВидСхемыМотивации.Использование	= Ложь;
			ТабличноеПолеПоДолжности.Отбор.ВидСхемыМотивации.Использование	= Ложь;
		КонецЕсли;
		
		СхемыМотивацииПодразделения.Отбор.Организация.Использование	= Ложь;
		ТабличноеПолеПоДолжности.Отбор.Организация.Использование	= Ложь;
	Иначе 
		СхемыМотивацииПодразделения.Отбор.ВидСхемыМотивации.Использование	= Ложь;
		ТабличноеПолеПоДолжности.Отбор.ВидСхемыМотивации.Использование	= Ложь;
	КонецЕсли;
		
КонецПроцедуры //УстановитьОтборПоВидуСМ

Процедура ПодготовитьСправкуФормы()
	
	ВидОрганизационнойСтруктурыПредприятия_ПоСтруктуреЮридическихЛиц	= ?(ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц, "inline", "none");
	ВидОрганизационнойСтруктурыПредприятия_ПоЦентрамОтветственности		= ?(ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности, "inline", "none");
	
	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());
	
	Если Не ПоказыватьДолжности Тогда
		СправкаПоДолжностям = "Для того чтоб открыть схемы мотивации по должности нужно нажать на гиперссылку <A id=Команда href=""V8:ShowMotivationSchemesByPosition""> ""Показать схемы мотивации по должности"" </A>";
	КонецЕсли;
	
	ЭлементыФормы.ПанельСправкиФормы.ЦветРамки			= РаботаСДиалогами.ВстроеннаяСправка_ЦветРамки();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветФона	= РаботаСДиалогами.ВстроеннаяСправка_ЦветФона();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветТекста	= РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки();

	ТекстМакетаВстроеннойСправки = "
	|<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|
	|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
	|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
	|		<DIV>Схема мотивации задает начисления, которые выплачиваются сотруднику на определенной должности.<BR>Вы можете задать схему мотивации:<LI>для должности, и тогда схема будет применяться для всех сотрудников предприятия, работающих на данной должности, вне зависимости от места работы (подразделения). " + СправкаПоДолжностям + "
	|		<LI>для конкретного рабочего места, и тогда схема будет применяться для сотрудников, работающих на данной должности в конкретном подразделении.</LI></DIV>
	|		<DIV>Начисления, введенные для всех сотрудников по указанной должности, выделяются <FONT color=#556B2F>таким</FONT> цветом. </DIV>
	|		<DIV>Формирование схем мотивации по рабочим местам может выполняться в соответствии со 
	|			<A id=ОткрытьСписок href=""V8:Справочники.ПодразделенияОрганизаций"">структурой организаций</A> - юридических лиц вашего предприятия или в соответствии со структурой <A id=ОткрытьСписок href=""V8:Справочники.Подразделения"">центров ответственности</A>. <BR>В начале работы со схемами мотивации рабочих мест вам необходимо выбрать один из этих режимов, но в дальнейшем вы сможете изменить выбранный вами режим.
	|				<DIV>Сейчас установлен режим формирования схем мотивации 
	|					<P id=ВидОрганизационнойСтруктурыПредприятия_ПоСтруктуреЮридическихЛиц style=""DISPLAY:"+ВидОрганизационнойСтруктурыПредприятия_ПоСтруктуреЮридическихЛиц+"""><A id=Команда href=""V8:SwitchOrganizationalStructure"">"+ВидОрганизационнойСтруктурыПредприятия+"</P>
	|					<P id=ВидОрганизационнойСтруктурыПредприятия_ПоЦентрамОтветственности style=""DISPLAY:"+ВидОрганизационнойСтруктурыПредприятия_ПоЦентрамОтветственности+"""><A id=Команда href=""V8:SwitchOrganizationalStructure"">"+ВидОрганизационнойСтруктурыПредприятия+"</A></P>
	|
	|				</DIV>
	|		<DIV>Если <A id=ОткрытьСписок href=""V8:РегистрыСведений.УчетнаяПолитикаПоПерсоналу""> учетная политика </A> по персоналу поддерживает работу с несколькими схемами мотивации, то кроме основной схемы мотивации вы можете формировать временные схемы мотивации и использовать их при начислении заработной платы.</DIV>
	|	</FONT></BODY>
	|</HTML>";
	
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);
	
КонецПроцедуры

// Обновляет содержимое справки
//
Процедура ОбновитьСправкуФормы(ПолеДанных = Неопределено)
	
	ПодготовитьСправкуФормы();
	
	ДокHTML = ЭлементыФормы.ВстроеннаяСправка.Документ;
	
КонецПроцедуры // ОбновитьСправкуФормы()

// Устанавливает видимость справки
//
Процедура УстановитьВидимостьСправкиФормы(ОбновитьСправку = Истина)
	
	РаботаСДиалогамиЗК.ИзменитьВидимостьПанелиПоГоризонтали(ЭтаФорма, ОтображатьСправкуФормы, "ОсновнаяПанель", "СправкиФормы");
	
	ЭлементыФормы.КоманднаяПанельСправкиФормы.Кнопки.ПереключениеСправкиФормы.Пометка = ОтображатьСправкуФормы;
	
	Если ОтображатьСправкуФормы Тогда
		ПодключитьОбработчикИзмененияДанных("ВидОрганизационнойСтруктурыПредприятия",	"ОбновитьСправкуФормы");
		Если ОбновитьСправку Тогда
			ОбновитьСправкуФормы();
		КонецЕсли;
		
	Иначе
		ОтключитьОбработчикИзмененияДанных("ВидОрганизационнойСтруктурыПредприятия");
		
	КонецЕсли;
	
КонецПроцедуры //УстановитьВидимостьСправкиФормы

Процедура ВыполнитьКомандуФормы(Команда, ТекущееЗначение = "") Экспорт
	
	Если Команда = "ВыборОрганизации" Тогда
		Форма = Справочники.Организации.ПолучитьФормуВыбора();
		Форма.ПараметрТекущаяСтрока	= Организация;
		Форма.ВладелецФормы			= Организация;
		Форма.Открыть();
	ИначеЕсли Команда = "ShowMotivationSchemesByPosition" Тогда
		НадписьУправлениеВидимостьюДолжностейНажатие();
	ИначеЕсли Команда = "SwitchOrganizationalStructure" Тогда
		Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности;
		Иначе
			ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
		КонецЕсли;
		ВидОрганизационнойСтруктурыПредприятияПриИзменении();
	Иначе
		Сообщить("Неизвестная команда: " + Команда);
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКомандуСправки()

Процедура ВстроеннаяСправкаonclick(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnClick(Элемент, pEvtObj, ЭтаФорма);
	
	ОбновитьСправкуФормы();
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseout(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseover(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj);
	
КонецПроцедуры

// Возвращает первое подразделение выбранной организации или предприятия
//
// Параметры
//
// Возвращаемое значение:
//   СправочникиСсылка.ПодразделенияОрганизаций   – первое подразделение организации.
//   ИЛИ (зависит от заданного режима формирования схем мотивации)
//   СправочникиСсылка.Подразделения   – первое подразделение предприятия.
//
Функция ПервоеПодразделениеОрганизации()

	Запрос = Новый Запрос;
	
	Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Владелец = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодразделенияОрганизаций.Наименование";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подразделения.Ссылка
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделения.Наименование"
	
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, ?(ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц,Справочники.ПодразделенияОрганизаций.ПустаяСсылка(),Справочники.Подразделения.ПустаяСсылка()));
	
КонецФункции // ПервоеПодразделениеОрганизации()

Процедура ДополнитьКоманднуюПанель()
	
	КнопкиКоманднойПанели = ЭлементыФормы.ДействияФормы.Кнопки;
	МестоВставки = КнопкиКоманднойПанели.Индекс(КнопкиКоманднойПанели.Найти("Действие"));
	
	ПодменюПорядокФормированияСМ = КнопкиКоманднойПанели.Вставить(МестоВставки, "ПорядокФормированияСМ", ТипКнопкиКоманднойПанели.Подменю, "Режим формирования схем мотивации");
	ПодменюПорядокФормированияСМ.Кнопки.Добавить("ПоОрганизациям", ТипКнопкиКоманднойПанели.Действие, "По структуре юридических лиц", Новый Действие("КоманднаяПанельРежимВводаПоОрганизациям"));
	ПодменюПорядокФормированияСМ.Кнопки.Добавить("ПоЦФО", ТипКнопкиКоманднойПанели.Действие, "По центрам ответственности", Новый Действие("КоманднаяПанельРежимВводаПоЦФО"));
	
	КнопкиКоманднойПанели.Вставить(МестоВставки + 1, "Разделитель5", ТипКнопкиКоманднойПанели.Разделитель); 
		
	ПодменюПорядокФормированияСМ.Кнопки.ПоЦФО.Пометка = НЕ ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
	ПодменюПорядокФормированияСМ.Кнопки.ПоОрганизациям.Пометка = ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;		
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	УстановитьВидимостьСправкиФормы(Ложь);
	
	ЗаголовокДолжностей();
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
	Если ИспользоватьУправленческийУчетЗарплаты Тогда
		ДополнитьКоманднуюПанель();
	КонецЕсли;
	
	Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		мПоказватьВалюту= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");		
		УстанвоитьВидимостьВалюты();
		Если мПоказватьВалюту Тогда
			мВалютаПоУмолчанию = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока) Тогда
			ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока = ПервоеПодразделениеОрганизации();
		КонецЕсли;
		
	Иначе
		
		мПоказватьВалюту =  глЗначениеПеременной("глЕстьВалютныеПоказатели");
		глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").Свойство("ПоддерживатьНесколькоСхемМотивации",мПоддерживатьНесколькоСхемМотивации);
		мВалютаПоУмолчанию = Константы.ВалютаУправленческогоУчета.Получить();
			
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ТабличноеПолеПодразделенияПоЦФО.ТекущаяСтрока) Тогда
			ЭлементыФормы.ТабличноеПолеПодразделенияПоЦФО.ТекущаяСтрока = ПервоеПодразделениеОрганизации();
		КонецЕсли;
		
	КонецЕсли;
	
	ВидОрганизационнойСтруктурыПредприятияПриИзменении();
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	ТабличноеПолеПодразделенияПоЦФО.Порядок.Установить("Порядок");
	ТабличноеПолеПодразделенияОрганизаций.Порядок.Установить("Владелец, Порядок");
	
	СхемыМотивацииПодразделения.Порядок.Установить("Должность Возр, ВидРасчета Возр");
	
КонецПроцедуры //ПриОткрытии

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	СхемыМотивацииПодразделения.Колонки.Добавить("Подразделение", Ложь);
	
	СхемыМотивацииПодразделения.Отбор.Подразделение.ВидСравнения = ВидСравнения.ВСписке;
	СхемыМотивацииПодразделения.Отбор.Подразделение.Использование = Истина;
	СхемыМотивацииПодразделения.Отбор.Должность.ВидСравнения = ВидСравнения.ВСписке;
	СхемыМотивацииПодразделения.Отбор.Должность.Использование = Истина;
	
	// вид организационной структуры
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
	
	Если НЕ ИспользоватьУправленческийУчетЗарплаты Тогда
		ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
	Иначе
		ВидОрганизационнойСтруктурыПредприятия = ВосстановитьЗначение("МотивацияПерсоналаВидОрганизационнойСтруктурыПредприятия");
		Если НЕ ЗначениеЗаполнено(ВидОрганизационнойСтруктурыПредприятия) Тогда
			ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности;
		КонецЕсли;
	КонецЕсли;
	
	ПоказыватьДолжности = ВосстановитьЗначение("МотивацияПерсоналаПоказыватьДолжности");
	Если НЕ ЗначениеЗаполнено(ПоказыватьДолжности) Тогда
		ПоказыватьДолжности = Ложь;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ИзменитьВидимостьПанелиПоВертикали(ЭтаФорма, ПоказыватьДолжности, "РабочаяОбласть", "СхемыМотивацийПоДолжностям");
	
	// Справка формы
	ОтображатьСправкуФормы = ВосстановитьЗначение("МотивацияПерсоналаСправкаФормы");
	Если НЕ ЗначениеЗаполнено(ОтображатьСправкуФормы) Тогда
		ОтображатьСправкуФормы = Истина;
	КонецЕсли;
	
	мПорядокСортировкиПодразделенияПоКоду = ВосстановитьЗначение("МотивацияПерсоналаПорядокСортировкиПодразделенияПоКоду");
	Если мПорядокСортировкиПодразделенияПоКоду = Неопределено Тогда
		мПорядокСортировкиПодразделенияПоКоду = 0;
	КонецЕсли;
	
	мПорядокСортировкиДолжностейПоКоду = ВосстановитьЗначение("МотивацияПерсоналаПорядокСортировкиДолжностейПоКоду");
	Если мПорядокСортировкиДолжностейПоКоду = Неопределено Тогда
		мПорядокСортировкиДолжностейПоКоду = 0;
	КонецЕсли;
	
	// проставляем организацию пользователя по умолчанию
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;
	
	ПодготовитьСправкуФормы();
	
КонецПроцедуры //ПередОткрытием

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьЗначение("МотивацияПерсоналаВидОрганизационнойСтруктурыПредприятия",ВидОрганизационнойСтруктурыПредприятия);
	СохранитьЗначение("МотивацияПерсоналаСправкаФормы",ОтображатьСправкуФормы);
	СохранитьЗначение("МотивацияПерсоналаПоказыватьДолжности",ПоказыватьДолжности);	
	СохранитьЗначение("МотивацияПерсоналаПорядокСортировкиПодразделенияПоКоду", мПорядокСортировкиПодразделенияПоКоду);
	СохранитьЗначение("МотивацияПерсоналаПорядокСортировкиДолжностейПоКоду",мПорядокСортировкиДолжностейПоКоду);

КонецПроцедуры //ПередЗакрытием

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытоШР" Тогда
		ТабличноеПолеПодразделенияПриАктивизацииСтроки();
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" Тогда
		Если мРегВидыРасчетов <> Неопределено Тогда
			Если Параметр = "ОсновныеНачисленияОрганизаций" Тогда
				мРегВидыРасчетов.Добавить(Источник);
			ИначеЕсли Параметр = "УправленческиеНачисления" Тогда
				мУпрВидыРасчетов.Добавить(Источник);
			КонецЕсли;
			ОтборПоВидуРасчета();
			СхемыМотивацииПодразделения.Обновить();
			ТабличноеПолеПоДолжности.Обновить();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьФормуМотивацииПерсонала" Тогда
		
		глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").Свойство("ПоддерживатьНесколькоСхемМотивации",мПоддерживатьНесколькоСхемМотивации);
        ВидОрганизационнойСтруктурыПредприятияПриИзменении();

	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Управляет видимостью справки
//
Процедура ПереключитьВидимостьСправкиФормы(Кнопка)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	УстановитьВидимостьСправкиФормы();
	
КонецПроцедуры //ПереключитьВидимостьСправкиФормы

// Устанавливает отборы в зависимости от выбранной организационной структуры 
//
Процедура ВидОрганизационнойСтруктурыПредприятияПриИзменении()
		
	Кнопки = ЭлементыФормы.КоманднаяПанельПредприятие.Кнопки;
	КнопкиДействие = ЭлементыФормы.КоманднаяПанельПредприятие.Кнопки.Действие.Кнопки;

	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
	
	Если ИспользоватьУправленческийУчетЗарплаты Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.ПорядокФормированияСМ.Кнопки.ПоЦФО.Пометка = НЕ ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
		ЭлементыФормы.ДействияФормы.Кнопки.ПорядокФормированияСМ.Кнопки.ПоОрганизациям.Пометка = ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
	КонецЕсли;

	Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		
		ЭлементыФормы.ПанельПодразделения.ТекущаяСтраница = ЭлементыФормы.ПанельПодразделения.Страницы.ПодразделенияОрганизаций;
		
		// установим отбор по должности организации
		УстановитьОтборСхемыМотивацииПоДолжности(ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока);
		
		ЭлементыФормы.НадписьВидСМ.Видимость = Ложь;
		ЭлементыФормы.НадписьСМ.Видимость = Ложь;
		
		мПоказватьВалюту = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
		УстанвоитьВидимостьВалюты();
		
		Если мПоказватьВалюту Тогда
			мВалютаПоУмолчанию = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;	
		
		Если Кнопки.Найти("ШтатноеРасписание") = Неопределено Тогда
			Кнопки.Добавить("ШтатноеРасписание", ТипКнопкиКоманднойПанели.Действие, "Штатное расписание",Новый Действие("ОткрытьШтатноеРасписание"));
		
			НоваяКнопка = КнопкиДействие.Добавить("ШтатноеРасписание", ТипКнопкиКоманднойПанели.Действие, "Штатное расписание",Новый Действие("ОткрытьШтатноеРасписание"));
 			НоваяКнопка.Подсказка = "Открыть штатное расписание";
			НоваяКнопка.Пояснение = "Открыть штатное расписание";
		КонецЕсли;

		Если КнопкиДействие.Найти("ЗаполнитьПоШтатномуРасписанию") = Неопределено Тогда
			НоваяКнопка = КнопкиДействие.Добавить("ЗаполнитьПоШтатномуРасписанию", ТипКнопкиКоманднойПанели.Действие, "Заполнить по штатному расписанию",Новый Действие("КоманднаяПанельПредприятиеЗаполнитьПоШтатномуРасписанию"));		
			
			НоваяКнопка.Подсказка = "Заполнить начисления сотрудников организации по штатному расписанию (по выбранному подразделению)";		
			НоваяКнопка.Пояснение = "Заполнить начисления сотрудников организации по штатному расписанию (по выбранному подразделению)";		
			НоваяКнопка.ИзменяетДанные = Истина;
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.ПанельПодразделения.ТекущаяСтраница = ЭлементыФормы.ПанельПодразделения.Страницы.ПоЦФО;
		
		// установим отбор по должности предприятия
		УстановитьОтборСхемыМотивацииПоДолжности(ЭлементыФормы.ТабличноеПолеПодразделенияПоЦФО.ТекущаяСтрока);
		
		// получим учтенную политику по персоналу в разрезе поддержки нескольких схем мотивации 
		Если мПоддерживатьНесколькоСхемМотивации = Неопределено Тогда
			глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").Свойство("ПоддерживатьНесколькоСхемМотивации",мПоддерживатьНесколькоСхемМотивации);
		КонецЕсли;
		Если мПоддерживатьНесколькоСхемМотивации Тогда
			ЭлементыФормы.НадписьВидСМ.Видимость	= Истина;
			ЭлементыФормы.НадписьСМ.Видимость		= Истина;
		Иначе
			ЭлементыФормы.НадписьВидСМ.Видимость	= Ложь;
			ЭлементыФормы.НадписьСМ.Видимость		= Ложь;
		КонецЕсли;
		
		мПоказватьВалюту =  глЗначениеПеременной("глЕстьВалютныеПоказатели");

		УстанвоитьВидимостьВалюты();
		
		мВалютаПоУмолчанию = Константы.ВалютаУправленческогоУчета.Получить();
		
		Если Кнопки.Найти("ШтатноеРасписание") <> Неопределено Тогда
			Индекс = Кнопки.Индекс(Кнопки.ШтатноеРасписание);
			Кнопки.Удалить(Индекс);
		КонецЕсли;
		Если  КнопкиДействие.Найти("ЗаполнитьПоШтатномуРасписанию") <> Неопределено Тогда
			Индекс = КнопкиДействие.Индекс(КнопкиДействие.ЗаполнитьПоШтатномуРасписанию);
			КнопкиДействие.Удалить(Индекс);
		КонецЕсли;
		Если  КнопкиДействие.Найти("ШтатноеРасписание") <> Неопределено Тогда
			Индекс = КнопкиДействие.Индекс(КнопкиДействие.ШтатноеРасписание);
			КнопкиДействие.Удалить(Индекс);
		КонецЕсли;
		
		
		// установим текс гиперссылки
		Если ВидСхемыМотивации = Справочники.ВариантыCхемМотивации.ПустаяСсылка() Тогда
			ЭлементыФормы.НадписьВидСМ.Заголовок = "Основная схема мотивации";
		Иначе
			ЭлементыФормы.НадписьВидСМ.Заголовок = ВидСхемыМотивации.Наименование;
		КонецЕсли;
		
	КонецЕсли;	
	
	ОтборПоВидуРасчета();
	ТабличноеПолеПоДолжности.Обновить();

	
КонецПроцедуры //ВидОрганизационнойСтруктурыПредприятияПриИзменении

// Процедура - обработчик события "Нажатие" гиперссылки НадписьВидСМ
//
Процедура НадписьВидСМНажатие(Элемент)
	
	Меню = Новый СписокЗначений;
	
	Меню.Добавить("Основная схема мотивации",,НЕ ЗначениеЗаполнено(ВидСхемыМотивации));
	
	Выборка = Справочники.ВариантыCхемМотивации.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Меню.Количество() < 5 Тогда
			Меню.Добавить(Выборка.Ссылка,,ВидСхемыМотивации = Выборка.Ссылка);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Меню.Добавить("Открыть список временных схем мотивации");
	
	ВидСМ = ВыбратьИзМеню(Меню,);
	Если ВидСМ <> Неопределено Тогда
		ВидСМ = ВидСМ.Значение;	
		Если ВидСМ = "Основная схема мотивации" Тогда
			ВидСхемыМотивации = Справочники.ВариантыCхемМотивации.ПустаяСсылка();
			Элемент.Заголовок = "Основная схема мотивации";
		ИначеЕсли ВидСМ = "Открыть список временных схем мотивации" Тогда
			Справочники.ВариантыCхемМотивации.ПолучитьФорму("ФормаСписка").Открыть();
		Иначе
			ВидСхемыМотивации = ВидСМ;
			Элемент.Заголовок = ВидСхемыМотивации.Наименование;
		КонецЕсли;
		
		УстановитьОтборПоВидуСМ();
	КонецЕсли;

КонецПроцедуры //НадписьВидСМНажатие

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "СхемыМотивацииПодразделения" ФОРМЫ

// Процедура - обработчик события "ПриАктивизацииЯчейки" табличного поля
//
Процедура СхемыМотивацииПодразделенияПриАктивизацииЯчейки(Элемент)
	
	ТекущаяКолонка = Элемент.ТекущаяКолонка;
	Если ТекущаяКолонка.Имя = "Должность" Тогда
		
		Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности Тогда
			СписокВыбора = ПроцедурыУправленияПерсоналомДополнительный.ВыбратьИзКадровогоПланаПредприятия("Должность", ЭлементыФормы.ТабличноеПолеПодразделенияПоЦФО.ТекущаяСтрока);
		Иначе
			СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("Должность",  Организация, ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока);
		КонецЕсли;
		КоличествоЗначений = СписокВыбора.Количество();
		
		ПолеВвода = ТекущаяКолонка.ЭлементУправления;
		ПолеВвода.СписокВыбора = СписокВыбора;
		ПолеВвода.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ПолеВвода.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СхемыМотивацииПодразделенияПриАктивизацииСтроки(Элемент)
		
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСхемыМотивацииПодразделенияПриАктивизацииСтроки", 0.05, Истина);

КонецПроцедуры

Процедура ОбработчикОжиданияСхемыМотивацииПодразделенияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.СхемыМотивацииПодразделения, мСведенияОВидахРасчета);

КонецПроцедуры

Процедура СхемыМотивацииПодразделенияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ВидРасчета) Тогда
			
			Для СчПоказателей = 1 По 6 Цикл
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость		= Ложь;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость					= Ложь;
				ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость						= Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
				ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость				= Ложь;
			КонецЦикла;

		ИначеЕсли ДанныеСтроки.Подразделение = НеОпределено Тогда
			Если мВведенныеДолжности.Найти(ДанныеСтроки.Должность) = Неопределено Или мВведенныеВР.Найти(ДанныеСтроки.ВидРасчета) = Неопределено Тогда
				РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета);
				ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноОливковоЗеленый;
			Иначе
				ОформлениеСтроки.ЦветТекста = WebЦвета.ЦветМорскойВолныТемный;
				ОформлениеСтроки.Ячейки.Показатели.УстановитьТекст("<данная строка не учитывается при расчете>");
				
				Для СчПоказателей = 1 По 6 Цикл
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость		= Ложь;
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость					= Ложь;
					ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость						= Ложь;
					ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
					ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость				= Ложь;
				КонецЦикла;
			КонецЕсли;
		Иначе
			РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СхемыМотивацииПодразделенияПриПолученииДанных

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля
//
Процедура СхемыМотивацииПодразделенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидРасчета) Тогда
		Отказ = Истина;
		ОбработкаКомментариев.УдалитьСообщения();
		ОбработкаКомментариев.ДобавитьСообщение("В редактируемой строке не указан вид расчета!", Перечисления.ВидыСообщений.Ошибка);
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		Подразделение = ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока;
	Иначе
		Подразделение = ЭлементыФормы.ТабличноеПолеПодразделенияПоЦФО.ТекущаяСтрока;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("Должность",ТекущиеДанные.Должность);
	Запрос.УстановитьПараметр("ВидРасчета",ТекущиеДанные.ВидРасчета);
	Запрос.УстановитьПараметр("Организация",ТекущиеДанные.Организация);
	Запрос.УстановитьПараметр("ВидСхемыМотивации",ТекущиеДанные.ВидСхемыМотивации);
	
	Запрос.Текст= "ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ВЫБОР
	              |		КОГДА СхемыМотивацииРаботников.Подразделение = НЕОПРЕДЕЛЕНО
	              |			ТОГДА 1
	              |		КОГДА СхемыМотивацииРаботников.Подразделение = &Подразделение
	              |			ТОГДА 2
	              |	КОНЕЦ КАК КодОшибки,
	              |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СхемыМотивацииРаботников.ВидРасчета) КАК Количество
	              |ИЗ
	              |	РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
	              |ГДЕ
	              |	(СхемыМотивацииРаботников.Подразделение = НЕОПРЕДЕЛЕНО
	              |			ИЛИ СхемыМотивацииРаботников.Подразделение = &Подразделение)
	              |	И СхемыМотивацииРаботников.Должность = &Должность
	              |	И СхемыМотивацииРаботников.ВидРасчета = &ВидРасчета
	              |	И СхемыМотивацииРаботников.Организация = &Организация
	              |	И СхемыМотивацииРаботников.ВидСхемыМотивации = &ВидСхемыМотивации
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ВЫБОР
	              |		КОГДА СхемыМотивацииРаботников.Подразделение = НЕОПРЕДЕЛЕНО
	              |			ТОГДА 1
	              |		КОГДА СхемыМотивацииРаботников.Подразделение = &Подразделение
	              |			ТОГДА 2
	              |	КОНЕЦ";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ДопустимоеПревышение = ?(НоваяСтрока, 0, 1);
		ОбработкаКомментариев.УдалитьСообщения();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КодОшибки = 1 И Выборка.Количество > ДопустимоеПревышение Тогда
				//Отказ = Истина;
				//ОбработкаКомментариев.ДобавитьСообщение("Для данной должности уже введена запись.", Перечисления.ВидыСообщений.Ошибка);
			ИначеЕсли Выборка.Количество > ДопустимоеПревышение Тогда
				ОбработкаКомментариев.ДобавитьСообщение("По данной должности, подразделению и виду расчета уже введена запись.", Перечисления.ВидыСообщений.Ошибка);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Отказ Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
		КонецЕсли;
	КонецЕсли;
	
	// впишем, если надо должность в отбор
	Если СхемыМотивацииПодразделения.Отбор.Должность.Значение.НайтиПоЗначению(Элемент.ТекущиеДанные.Должность) = НеОпределено Тогда
		СхемыМотивацииПодразделения.Отбор.Должность.Значение.Добавить(Элемент.ТекущиеДанные.Должность);
		СхемыМотивацииПодразделения.Обновить();
	КонецЕсли;
	
КонецПроцедуры //СхемыМотивацииПодразделенияПередОкончаниемРедактирования

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля
//
Процедура СхемыМотивацииПодразделенияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		Подразделение = ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока;
	Иначе
		Подразделение = ЭлементыФормы.ТабличноеПолеПодразделенияПоЦФО.ТекущаяСтрока;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		ОбработкаКомментариев.УдалитьСообщения();
		Отказ = Истина;
		ОбработкаКомментариев.ДобавитьСообщение("Новая строка не может быть добавлена, так как не выполнено позиционирование на подразделении!",Перечисления.ВидыСообщений.Ошибка);
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;

КонецПроцедуры //СхемыМотивацииПодразделенияПередНачаломДобавления


// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля
//
Процедура СхемыМотивацииПодразделенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			Подразделение = ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока;
		Иначе
			Подразделение = ЭлементыФормы.ТабличноеПолеПодразделенияПоЦФО.ТекущаяСтрока;
		КонецЕсли;
		
		Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			ДанныеСтроки.ВидРасчета			= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
			ДанныеСтроки.Подразделение 		= Подразделение;
			ДанныеСтроки.Организация		= Организация;
		Иначе
			ДанныеСтроки.ВидРасчета			= ПланыВидовРасчета.УправленческиеНачисления.ПустаяСсылка();
			ДанныеСтроки.Подразделение 		= Подразделение;
		КонецЕсли;

	КонецЕсли;
	

КонецПроцедуры //СхемыМотивацииПодразделенияПриНачалеРедактирования

// Процедура - обработчик события "ПриИзменении" реквизита "ВидРасчета" табличного поля
//
Процедура СхемыМотивацииПодразделенияВидРасчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаРасчета(Элемент.Значение, "СхемыМотивацииПодразделения");
	
КонецПроцедуры //СхемыМотивацииПодразделенияВидРасчетаПриИзменении

// Процедура - обработчик события "НачалоВыбораИзСписка" реквизита "Должность" табличного поля
//
Процедура СхемыМотивацииПодразделенияДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Элемент.СписокВыбора;
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;

КонецПроцедуры //СхемыМотивацииПодразделенияДолжностьНачалоВыбораИзСписка

Процедура СхемыМотивацииПодразделенияПередУдалением(Элемент, Отказ)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущаяСтрока.Подразделение) Тогда
		Отказ = Истина;
		ОбработкаКомментариев.УдалитьСообщения();
		ОбработкаКомментариев.ДобавитьСообщение("Нельзя удалять начисления, введенные для должности в табличной части по предприятию. Для удаления данного начисление, установите курсор на табличной части ""Должности"". ",Перечисления.ВидыСообщений.Ошибка);
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТабличноеПолеПодразделения" ФОРМЫ

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля
//
Процедура ТабличноеПолеПодразделенияПриАктивизацииСтроки()
	
	Организация = ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока.Владелец;
	Подразделение = ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока;
	УстановитьОтборСхемыМотивацииПоДолжности(Подразделение);
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстКнопиПечать = "Печать мотивации " + Подразделение;
		ЭлементыФормы.КоманднаяПанельПредприятие.Кнопки.Действие.Кнопки.Печать.Текст = ТекстКнопиПечать;	
		ЭлементыФормы.НадписьПредприятие.Заголовок = " Предприятие (" + Подразделение + ")";
	Иначе
		ТекстКнопиПечать = "Печать мотивации";		
		ЭлементыФормы.НадписьПредприятие.Заголовок = " Предприятие";
	КонецЕсли;
	
	Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности Тогда
		мПоказватьВалюту =  глЗначениеПеременной("глЕстьВалютныеПоказатели");
	Иначе
		мПоказватьВалюту = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
	КонецЕсли;
	
	УстанвоитьВидимостьВалюты();
	Если мПоказватьВалюту Тогда
		мВалютаПоУмолчанию = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
КонецПроцедуры //ТабличноеПолеПодразделенияПриАктивизацииСтроки

// Процедура - обработчик события "ПриПолученииДанных" табличного поля
//
Процедура ТабличноеПолеПодразделенияОрганизацийПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ОтображенныеОрганизации.Очистить();
	
	Для Каждого Оформление Из ОформленияСтрок Цикл
		Если Оформление.ДанныеСтроки = НеОпределено Тогда
			Оформление.Ячейки.Наименование.УстановитьТекст("Все организации");
			Оформление.Ячейки.Наименование.ОтображатьКартинку	= Ложь;
			Оформление.Ячейки.Наименование.Шрифт				= мЖирныйШрифт;
			Оформление.Ячейки.Организация.Видимость				= Ложь;
			Продолжить;
		КонецЕсли;
		
		ПерваяСтрока		= Истина;
		Представление		= "";
		НазваниеОрганизации	= "";
		
		Если ПоказателиСхемМотивацииПереопределяемый.ПервоеПодразделение(Оформление.ДанныеСтроки.Ссылка, Оформление.ДанныеСтроки.Владелец, НазваниеОрганизации, ОтображенныеОрганизации) Тогда
			Оформление.Ячейки.Организация.УстановитьТекст("      " + НазваниеОрганизации);
			Оформление.Ячейки.Организация.Шрифт = мЖирныйШрифт;
		Иначе
			Оформление.Ячейки.Организация.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ТабличноеПолеПодразделенияОрганизацийПриПолученииДанных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТабличноеПолеПодразделенияПоЦФО" ФОРМЫ

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля
//
Процедура ТабличноеПолеПодразделенияПоЦФОПриАктивизацииСтроки(Элемент)
	
	Подразделение = Элемент.ТекущаяСтрока;
	УстановитьОтборСхемыМотивацииПоДолжности(Подразделение);
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстКнопиПечать = "Печать мотивации " + Подразделение;
		ЭлементыФормы.КоманднаяПанельПредприятие.Кнопки.Действие.Кнопки.Печать.Текст = ТекстКнопиПечать;	
		ЭлементыФормы.НадписьПредприятие.Заголовок = " Предприятие (" + Подразделение + ")";
	Иначе
		ТекстКнопиПечать = "Печать мотивации";
		ЭлементыФормы.НадписьПредприятие.Заголовок = " Предприятие";
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоДолжностиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);

	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	    Если ДанныеСтроки.ВидРасчета = Неопределено 
	    	Или ДанныеСтроки.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка() 
	    	Или ДанныеСтроки.ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПустаяСсылка() Тогда
	    	
	    	Для СчПоказателей = 1 По 6 Цикл
	    		ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость		= Ложь;
	    		ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость					= Ложь;
	    		ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость						= Ложь;
	    		ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
	    		ОформлениеСтроки.Ячейки["ТарифныйРазряд" +СчПоказателей].Видимость				= Ложь;
	    	КонецЦикла;

		Иначе
	    	РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета);
	    КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ТабличноеПолеПоДолжностиПриПолученииДанных

// Процедура - обработчик события "ПриИзменении" реквизита "ВидРасчета" табличного поля
//
Процедура ТабличноеПолеПоДолжностиВидРасчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаРасчета(Элемент.Значение, "ТабличноеПолеПоДолжности");
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля
//
Процедура ТабличноеПолеПоДолжностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	мРегВидыРасчетов = Неопределено;
	ТабличноеПолеДолжностиПриАктивизацииСтроки();

	СхемыМотивацииПодразделения.Обновить();
	
КонецПроцедуры //ТабличноеПолеПоДолжностиПриОкончанииРедактирования

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля
//
Процедура ТабличноеПолеПоДолжностиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			ДанныеСтроки.ВидРасчета			= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
			ДанныеСтроки.Организация		= Организация;
		Иначе
			ДанныеСтроки.ВидРасчета			= ПланыВидовРасчета.УправленческиеНачисления.ПустаяСсылка();
		КонецЕсли;
		ДанныеСтроки.Должность			= ЭлементыФормы.ТабличноеПолеДолжности.ТекущаяСтрока;
		
	КонецЕсли;	
	
КонецПроцедуры //ТабличноеПолеПоДолжностиПриНачалеРедактирования

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля
//
Процедура ТабличноеПолеПоДолжностиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидРасчета) Тогда
		ОбработкаКомментариев.УдалитьСообщения();
		Отказ = Истина;
		ОбработкаКомментариев.ДобавитьСообщение("В редактируемой строке не указан вид расчета!",Перечисления.ВидыСообщений.Ошибка);
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Должность",ТекущиеДанные.Должность);
	Запрос.УстановитьПараметр("ВидРасчета",ТекущиеДанные.ВидРасчета);
	Запрос.УстановитьПараметр("Организация",ТекущиеДанные.Организация);
	Запрос.УстановитьПараметр("ВидСхемыМотивации",ТекущиеДанные.ВидСхемыМотивации);
	
	Запрос.Текст= "ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ВЫБОР
	              |		КОГДА СхемыМотивацииРаботников.Подразделение = НЕОПРЕДЕЛЕНО
	              |			ТОГДА 1
	              |	КОНЕЦ КАК КодОшибки,
	              |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СхемыМотивацииРаботников.ВидРасчета) КАК Количество
	              |ИЗ
	              |	РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
	              |ГДЕ
	              |	СхемыМотивацииРаботников.Подразделение = НЕОПРЕДЕЛЕНО
	              |	И СхемыМотивацииРаботников.Должность = &Должность
	              |	И СхемыМотивацииРаботников.ВидРасчета = &ВидРасчета
	              |	И СхемыМотивацииРаботников.Организация = &Организация
	              |	И СхемыМотивацииРаботников.ВидСхемыМотивации = &ВидСхемыМотивации
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ВЫБОР
	              |		КОГДА СхемыМотивацииРаботников.Подразделение = НЕОПРЕДЕЛЕНО
	              |			ТОГДА 1
	              |	КОНЕЦ";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		ДопустимоеПревышение = ?(НоваяСтрока, 0, 1);
		ОбработкаКомментариев.УдалитьСообщения();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество > ДопустимоеПревышение Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Для данной должности уже введена запись.", Перечисления.ВидыСообщений.Ошибка);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Отказ Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ТабличноеПолеПоДолжностиПередОкончаниемРедактирования

Процедура ТабличноеПолеПоДолжностиПриАктивизацииСтроки(Элемент)
		
	ПодключитьОбработчикОжидания("ОбработчикОжиданияТабличноеПолеПоДолжностиПриАктивизацииСтроки", 0.05, Истина);

КонецПроцедуры

Процедура ОбработчикОжиданияТабличноеПолеПоДолжностиПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ТабличноеПолеПоДолжности, мСведенияОВидахРасчета);

КонецПроцедуры

Процедура СхемыМотивацииПодразделенияПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Подразделение) Тогда
		Предупреждение("Для редактирования строки схемы мотивации должности """ + ДанныеСтроки.Должность+""" перейдите в раздел Должности данной формы");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТабличноеПолеДолжности" ФОРМЫ

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля
//
Процедура ТабличноеПолеДолжностиПриАктивизацииСтроки()
	
	Должность		= ЭлементыФормы.ТабличноеПолеДолжности.ТекущаяСтрока;
		
	Если ЗначениеЗаполнено(Должность) Тогда
		ТекстКнопиПечать = "Печать мотивации """ + Должность + """";
		ЭлементыФормы.КоманднаяПанельСМПоДолжности.Кнопки.ПодменюДолжности.Кнопки.Печать.Текст = ТекстКнопиПечать;
		ЭлементыФормы.НадписьДолжности.Заголовок = " Должности (" + Должность + ")";
	Иначе
		ТекстКнопиПечать = "Печать мотивации";
	КонецЕсли;
	
	ТабличноеПолеПоДолжности.Отбор.Должность.Использование	= Истина;
	ТабличноеПолеПоДолжности.Отбор.Должность.ВидСравнения	= ВидСравнения.Равно;
	Если Должность = Неопределено Тогда
		ТабличноеПолеПоДолжности.Отбор.Должность.Значение	= Справочники.ДолжностиОрганизаций.ПустаяСсылка();
	Иначе
		ТабличноеПолеПоДолжности.Отбор.Должность.Значение	= Должность;
	КонецЕсли;
	
	Если мСписокПустыхПодразделений = Неопределено Тогда
		мСписокПустыхПодразделений = Новый СписокЗначений;
		мСписокПустыхПодразделений.Добавить(НеОпределено);
		мСписокПустыхПодразделений.Добавить(Справочники.Подразделения.ПустаяСсылка());
		мСписокПустыхПодразделений.Добавить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		
	КонецЕсли;
	
	ТабличноеПолеПоДолжности.Отбор.Подразделение.Использование	= Истина;
	ТабличноеПолеПоДолжности.Отбор.Подразделение.ВидСравнения	= ВидСравнения.ВСписке;
	ТабличноеПолеПоДолжности.Отбор.Подразделение.Значение = мСписокПустыхПодразделений;

	
	УстановитьОтборПоВидуСМ();
	
	ОтборПоВидуРасчета();
	ТабличноеПолеПоДолжности.Обновить();
	
КонецПроцедуры //ТабличноеПолеДолжностиПриАктивизацииСтроки

// Процедура - обработчик события "Выбор(" табличного поля
//
Процедура ТабличноеПолеДолжностиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры //ТабличноеПолеДолжностиВыбор


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельДолжности" ФОРМЫ

// Открывает штатное расписание
//
Процедура ОткрытьШтатноеРасписание(Кнопка)
	
	Если мШтатноеРасписание = Неопределено или Не мШтатноеРасписание.Открыта() Тогда
		
		мШтатноеРасписание = РегистрыСведений.ШтатноеРасписаниеОрганизаций.ПолучитьФорму("ФормаСписка");
		Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			мШтатноеРасписание.ЭлементыФормы.Организация.Значение = Организация;
			мШтатноеРасписание.ЭлементыФормы.Подразделения.ТекущаяСтрока = ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока;
		КонецЕсли;
		Если Не мШтатноеРасписание.Открыта() Тогда
			мШтатноеРасписание.ПоложениеПрикрепленногоОкна = ВариантПрикрепленияОкна.Право;
			мШтатноеРасписание.Открыть();
		Иначе
			мШтатноеРасписание.Активизировать();
		КонецЕсли;
		
	Иначе		
		мШтатноеРасписание.Активизировать();
	КонецЕсли;
	
КонецПроцедуры //ОткрытьШтатноеРасписание

// Сворачивает панель "ПанельСхемыМотивацийПоДолжностям" 
//
Процедура НадписьУправлениеВидимостьюДолжностейНажатие()
	
	ПоказыватьДолжности = Не ПоказыватьДолжности;
	
	ЗаголовокДолжностей();
		
	РаботаСДиалогамиЗК.ИзменитьВидимостьПанелиПоВертикали(ЭтаФорма, ПоказыватьДолжности, "РабочаяОбласть", "СхемыМотивацийПоДолжностям");
	
	ПодготовитьСправкуФормы();
	
КонецПроцедуры //НадписьУправлениеВидимостьюДолжностейНажатие

// Печатает все схемы мотивации
//
Процедура ДействияФормыПечатьДляВсейКомпании(Кнопка)
	
	СформироватьЗапросДляПечати(ВидОрганизационнойСтруктурыПредприятия, ВидСхемыМотивации, Организация, мПоддерживатьНесколькоСхемМотивации, ОбработкаКомментариев, ЭлементыФормы, "ПоВсем");

КонецПроцедуры

// Печатает схемы мотивации по текущему подразделению
//
Процедура ДействияФормыПоПодразделению(Кнопка)
	
	СформироватьЗапросДляПечати(ВидОрганизационнойСтруктурыПредприятия, ВидСхемыМотивации, Организация, мПоддерживатьНесколькоСхемМотивации, ОбработкаКомментариев, ЭлементыФормы, "По подразделению");
	
КонецПроцедуры

// Печатает схемы мотивации по текущей должности
//
Процедура ДействияФормыПоДолжности(Кнопка)
	
	СформироватьЗапросДляПечати(ВидОрганизационнойСтруктурыПредприятия, ВидСхемыМотивации, Организация, мПоддерживатьНесколькоСхемМотивации, ОбработкаКомментариев, ЭлементыФормы, "По должности");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельРежимВвода" ФОРМЫ

// Устанавливает порядок ввода схем мотиваций по ЦФО
//
Процедура КоманднаяПанельРежимВводаПоЦФО(Кнопка)
	
	ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности;
	ВидОрганизационнойСтруктурыПредприятияПриИзменении();
	ЭлементыФормы.ТабличноеПолеПодразделенияПоЦФО.ТекущаяСтрока = ПервоеПодразделениеОрганизации();
		
КонецПроцедуры // КоманднаяПанельРежимВводаПоЦФО

// Устанавливает порядок ввода схем мотиваций по Организации
//
Процедура КоманднаяПанельРежимВводаПоОрганизациям(Кнопка)

	ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
	ВидОрганизационнойСтруктурыПредприятияПриИзменении();
	ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока = ПервоеПодразделениеОрганизации();
			
КонецПроцедуры //КоманднаяПанельРежимВводаПоОрганизациям

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДНОЙ ПАНЕЛИ "ПанельПодразделения" ФОРМЫ

// Процедура - заполняет схемы мотивации по штатному расписанию
//
Процедура КоманднаяПанельПредприятиеЗаполнитьПоШтатномуРасписанию(Кнопка)
	
	Подразделение = ЭлементыФормы.ТабличноеПолеПодразделенияОрганизаций.ТекущаяСтрока;
	Запрос = Новый Запрос;
	Если ВидОрганизационнойСтруктурыПредприятия = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ТекстЗапроса = 	
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЕСТЬNULL(СхемыМотивации.Должность, ШтатноеРасписаниеОрганизаций.Должность) КАК РезультатДолжность
			|ИЗ
			|	РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СхемыМотивацииРаботников.Должность КАК Должность
			|		ИЗ
			|			РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
			|		ГДЕ
			|			СхемыМотивацииРаботников.Подразделение = &Подразделение
			|			И СхемыМотивацииРаботников.Организация = &Организация) КАК СхемыМотивации
			|		ПО СхемыМотивации.Должность = ШтатноеРасписаниеОрганизаций.Должность
			|ГДЕ
			|	СхемыМотивации.Должность ЕСТЬ NULL И ШтатноеРасписаниеОрганизаций.Должность ЕСТЬ НЕ NULL";
		Иначе
			ТекстЗапроса = 	
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|	ШтатноеРасписаниеОрганизаций.Должность КАК РезультатДолжность
			|ИЗ
			|	РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СхемыМотивацииРаботников.Должность КАК Должность,
			|			СхемыМотивацииРаботников.Подразделение КАК Подразделение
			|		ИЗ
			|			РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
			|		ГДЕ
			|			СхемыМотивацииРаботников.Организация = &Организация) КАК СхемыМотивации
			|		ПО СхемыМотивации.Должность = ШтатноеРасписаниеОрганизаций.Должность
			|			И ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации = СхемыМотивации.Подразделение
			|ГДЕ
			|	СхемыМотивации.Должность ЕСТЬ NULL 
			|	И ШтатноеРасписаниеОрганизаций.Должность ЕСТЬ НЕ NULL ";
			
		КонецЕсли;

				
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Организация", Организация);		
		ПВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписиСМ = РегистрыСведений.СхемыМотивацииРаботников.СоздатьМенеджерЗаписи();
				МенеджерЗаписиСМ.Организация	= Организация;
				Если ЗначениеЗаполнено(Подразделение) Тогда
					МенеджерЗаписиСМ.Подразделение 	= Подразделение;
				Иначе
					МенеджерЗаписиСМ.Подразделение 	= Выборка.ПодразделениеОрганизации;
				КонецЕсли;
				МенеджерЗаписиСМ.Должность		= Выборка.РезультатДолжность;
				МенеджерЗаписиСМ.ВидРасчета		= ПВР;
				МенеджерЗаписиСМ.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
		ОтборПоВидуРасчета();
		ТабличноеПолеПоДолжности.Обновить();
			
	КонецЕсли;
		
КонецПроцедуры // КоманднаяПанельПредприятиеЗаполнитьПоШтатномуРасписанию

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчета = Новый Соответствие;

мЖирныйШрифт = Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,, Истина);
ОтображенныеОрганизации = Новый Соответствие;