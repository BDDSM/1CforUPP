Перем мДатаРедактирования;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполняет данными табличную часть ОС.
//
Процедура ЗаполнитьТаблицуОСДляРемонта()
	
	ОткликФормы = ЭтотОбъект.ПолучитьФорму("ФормаНастройкиЗаполненияОСДляРемонта").ОткрытьМодально();
	
	Если ОткликФормы = Истина Тогда
	
		Если ОсновныеСредстваДляРемонта.Количество() > 0 Тогда
			ОтветНаВопрос = Вопрос("Существующие строки теблицы и дерева будут очищены. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
			Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли;
		
		ЗаполнитьТаблицуОС();
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет склонение описания периода.
//
// Параметры
//  Период - ПеречислениеСсылка, период для его склонения
//  КоличествоПериодов - число, кол-во периодов
//
// Возвращаемое значение:
//   Строка, склоненный период
//
Функция ПолучитьНужнуюФормуПериода(Период, КоличествоПериодов)

	Если Период = Перечисления.Периодичность.Год Тогда
		Возврат ОбщегоНазначения.ФормаМножественногоЧисла("год", "года", "лет", КоличествоПериодов)
	ИначеЕсли Период = Перечисления.Периодичность.День Тогда
		Возврат ОбщегоНазначения.ФормаМножественногоЧисла("день", "дня", "дней", КоличествоПериодов)
	ИначеЕсли Период = Перечисления.Периодичность.Квартал Тогда
		Возврат ОбщегоНазначения.ФормаМножественногоЧисла("квартал", "квартала", "кварталов", КоличествоПериодов)
	ИначеЕсли Период = Перечисления.Периодичность.Месяц Тогда
		Возврат ОбщегоНазначения.ФормаМножественногоЧисла("месяц", "месяца", "месяцев", КоличествоПериодов)
	ИначеЕсли Период = Перечисления.Периодичность.Неделя Тогда
		Возврат ОбщегоНазначения.ФормаМножественногоЧисла("неделя", "недели", "недель", КоличествоПериодов)
	КонецЕсли; 

КонецФункции

// Процедура устанавливает отбор для отображения табличной части
// списка основных средств по текущей строке дерева.
// 
Процедура УстановитьОтбор()

	Если ЭлементыФормы.ДеревоУслуг.ТекущиеДанные <> Неопределено Тогда
	
		Если ТипЗнч(ЭлементыФормы.ДеревоУслуг.ТекущиеДанные.УслугаДата) = Тип("СправочникСсылка.Номенклатура") Тогда
			ЭлементыФормы.ОсновныеСредстваДляРемонта.ОтборСтрок.НоваяДатаРемонта.Использование = Ложь;
			ЭлементыФормы.ОсновныеСредстваДляРемонта.ОтборСтрок.Номенклатура.Использование     = Истина;
			ЭлементыФормы.ОсновныеСредстваДляРемонта.ОтборСтрок.Номенклатура.ВидСравнения      = ВидСравнения.Равно;
			ЭлементыФормы.ОсновныеСредстваДляРемонта.ОтборСтрок.Номенклатура.Значение          = ЭлементыФормы.ДеревоУслуг.ТекущиеДанные.УслугаДата;
		ИначеЕсли ТипЗнч(ЭлементыФормы.ДеревоУслуг.ТекущиеДанные.УслугаДата) = Тип("Дата") Тогда
			ЭлементыФормы.ОсновныеСредстваДляРемонта.ОтборСтрок.НоваяДатаРемонта.Использование = Истина;
			ЭлементыФормы.ОсновныеСредстваДляРемонта.ОтборСтрок.НоваяДатаРемонта.ВидСравнения  = ВидСравнения.Равно;
			ЭлементыФормы.ОсновныеСредстваДляРемонта.ОтборСтрок.НоваяДатаРемонта.Значение      = ЭлементыФормы.ДеревоУслуг.ТекущиеДанные.УслугаДата;
			ЭлементыФормы.ОсновныеСредстваДляРемонта.ОтборСтрок.Номенклатура.Использование     = Истина;
			ЭлементыФормы.ОсновныеСредстваДляРемонта.ОтборСтрок.Номенклатура.ВидСравнения      = ВидСравнения.Равно;
			ЭлементыФормы.ОсновныеСредстваДляРемонта.ОтборСтрок.Номенклатура.Значение          = ЭлементыФормы.ДеревоУслуг.ТекущиеДанные.Родитель.УслугаДата;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

// Процедура добавляет новую дату в дерево планируемых услуг и дат
// обслуживания ОС.
//
Процедура ВвестиНовуюДату()
	
	Если ЭлементыФормы.ДеревоУслуг.ТекущиеДанные <> Неопределено Тогда
		
		Если ЭлементыФормы.ДеревоУслуг.ТекущиеДанные.Уровень() = 0 Тогда
			СтрокаУслуги = ЭлементыФормы.ДеревоУслуг.ТекущиеДанные;
		Иначе
			СтрокаУслуги = ЭлементыФормы.ДеревоУслуг.ТекущиеДанные.Родитель;
		КонецЕсли;
		
		НоваяДата = ТекущаяДата();
		Если НЕ ВвестиДату(НоваяДата, СокрЛП(СтрокаУслуги.УслугаДата), ЧастиДаты.Дата) Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяДата) Тогда
			Предупреждение("Дата не может быть пустой.");
			Возврат;
		КонецЕсли; 
		
		Если СтрокаУслуги.Строки.Найти(НоваяДата, "УслугаДата") <> Неопределено Тогда
			Предупреждение("Для услуги """ + СокрЛП(СтрокаУслуги.УслугаДата) + """ дата """ + Формат(НоваяДата, "ДФ=dd.MM.yyyy") + """ уже определена.");
			Возврат;
		КонецЕсли; 
		
		НоваяСтрока = СтрокаУслуги.Строки.Добавить();
		НоваяСтрока.УслугаДата = НоваяДата;
		
		СтрокаУслуги.Строки.Сортировать("УслугаДата ВОЗР");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данными табличную часть ОС и дерево
// услуг по обслуживанию ОС
//
Процедура ЗаполнитьТаблицуОС()
	
	ЗаполнитьОсновнуюТаблицуОС();
	
	ЗаполнитьДерево(ДеревоУслуг, ЭлементыФормы.ДеревоУслуг);
	
КонецПроцедуры

// Процедура строит отчет по истории обслуживания ОС.
//
// Параметры:
//  УчитыватьУслугу - булево, при формировании отчета необходим отбор по услуге обслуживания.
//
Процедура АнализОбслуживанияОС(УчитыватьУслугу = Ложь)
	
	Если ЭлементыФормы.ОсновныеСредстваДляРемонта.ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЭлементыФормы.ОсновныеСредстваДляРемонта.ТекущиеДанные.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли; 
	
	Отчет = Отчеты.ОтчетОстаткиИОбороты.Создать();
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяРегистра", "ЗаказыНаОбслуживаниеОС");
	СтруктураНастроек.Вставить("ДатаНач", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяДатаНачалаОтчетов"));
	СтруктураНастроек.Вставить("ДатаКон", КонецДня(ТекущаяДата()));
	
	СоответствиеОтбора = Новый Соответствие;
	СоответствиеОтбора.Вставить("ОсновноеСредство", ЭлементыФормы.ОсновныеСредстваДляРемонта.ТекущиеДанные.ОсновноеСредство);
	Если УчитыватьУслугу Тогда
		СоответствиеОтбора.Вставить("Номенклатура", ЭлементыФормы.ОсновныеСредстваДляРемонта.ТекущиеДанные.Номенклатура);
	КонецЕсли; 
	СтруктураНастроек.Вставить("Отбор",СоответствиеОтбора);
	
	СтруктураНастроек.Вставить("ГруппировкиСтрок", Новый Структура("ОсновноеСредство, Номенклатура, Заказ"));
	СтруктураНастроек.Вставить("ВыбранныеПоля",  Новый Структура("Регистратор"));
	СтруктураНастроек.Вставить("РаскрашиватьИзмерения", Истина);
	
	Отчет.Настроить(СтруктураНастроек);
	
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Процедура строит отчет для анализа выработки ОС.
//
// Параметры:
//  УчитыватьПараметр - булево, при формировании отчета необходим отбор по параметру выработки ОС.
//
Процедура АнализВыработкиОС(УчитыватьПараметр = Ложь)
	
	Если ЭлементыФормы.ОсновныеСредстваДляРемонта.ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЭлементыФормы.ОсновныеСредстваДляРемонта.ТекущиеДанные.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли; 
	
	Отчет = Отчеты.ОтчетСписокКроссТаблица.Создать();
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяРегистра", "ВыработкаОС");
	СтруктураНастроек.Вставить("ДатаНач", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяДатаНачалаОтчетов"));
	СтруктураНастроек.Вставить("ДатаКон", КонецДня(ТекущаяДата()));
	
	СоответствиеОтбора = Новый Соответствие;
	СоответствиеОтбора.Вставить("ОсновноеСредство", ЭлементыФормы.ОсновныеСредстваДляРемонта.ТекущиеДанные.ОсновноеСредство);
	Если УчитыватьПараметр Тогда
		СоответствиеОтбора.Вставить("ПараметрВыработки", ЭлементыФормы.ОсновныеСредстваДляРемонта.ТекущиеДанные.ПараметрНаработкиОСПоНормативу);
	КонецЕсли; 
	СтруктураНастроек.Вставить("Отбор",СоответствиеОтбора);
	
	СтруктураНастроек.Вставить("ГруппировкиСтрок", Новый Структура("ОсновноеСредство, ПараметрВыработки"));
	СтруктураНастроек.Вставить("ВыбранныеПоля",  Новый Структура("Регистратор"));
	СтруктураНастроек.Вставить("РаскрашиватьИзмерения", Истина);
	
	Отчет.Настроить(СтруктураНастроек);
	
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ЭлементыФормы.ОсновныеСредстваДляРемонта.НастройкаОтбораСтрок.НоваяДатаРемонта.Доступность = Ложь;
	
	ДатаОкончанияПланирования = ТекущаяДата();
	
	Если ОсновныеСредстваДляРемонта.Количество() = 0 Тогда
		
		ЗаполнитьТаблицуОСДляРемонта();
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события элемента ОсновныеДействияФормы.Действие.
//
Процедура ОсновныеДействияФормыДействие(Кнопка)
	
	Перем СписокЗаказов;
	
	ОтветНаВопрос = Вопрос("Сформировать заказы на ремонт ОС?", РежимДиалогаВопрос.ОКОтмена);
	Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
		Возврат ;
	КонецЕсли;
	
	Если СформироватьЗаказыНаРемонт(ДеревоУслуг, СписокЗаказов) = Истина Тогда
	
		ЗаполнитьТаблицуОС();
		
		ФормаСпискаЗаказов = ЭтотОбъект.ПолучитьФорму("ФормаСформированныхЗаказов", ЭтаФорма, "СформированныеЗаказы");
		ФормаСпискаЗаказов.СписокДокументов = СписокЗаказов;
		ФормаСпискаЗаказов.Открыть();
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Заполнить.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	ЗаполнитьТаблицуОСДляРемонта();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельДеревоУслуг.НоваяДата.
//
Процедура КоманднаяПанельДеревоУслугНоваяДата(Кнопка)
	
	ВвестиНовуюДату();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.ОткрытьСписокЗаказовНаОбслуживаниеОС.
//
Процедура КоманднаяПанельФормыОткрытьСписокЗаказовНаОбслуживаниеОС(Кнопка)
	
	Документы.ЗаказНаОбслуживаниеОС.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ СПИСКА ОС

// Обработчик события элемента КоманднаяПанельОсновныеСредстваДляРемонта.АнализОбслуживанияОС.
//
Процедура КоманднаяПанельОсновныеСредстваДляРемонтаАнализОбслуживанияОС(Кнопка)
	
	АнализОбслуживанияОС();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельОсновныеСредстваДляРемонта.АнализВыработкиОС.
//
Процедура КоманднаяПанельОсновныеСредстваДляРемонтаАнализВыработкиОС(Кнопка)
	
	АнализВыработкиОС();
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельОсновныеСредстваДляРемонта.АнализВыработкиОСПоТекущемуПараметру.
//
Процедура КоманднаяПанельОсновныеСредстваДляРемонтаАнализВыработкиОСПоТекущемуПараметру(Кнопка)
	
	АнализВыработкиОС(Истина);
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельОсновныеСредстваДляРемонта.АнализОбслуживанияОСПоТекущейУслуге.
//
Процедура КоманднаяПанельОсновныеСредстваДляРемонтаАнализОбслуживанияОСПоТекущейУслуге(Кнопка)
	
	АнализОбслуживанияОС(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДЕРЕВА УСЛУГ ОБСЛУЖИВАНИЯ ОС

// Обработчик события ПриАктивизацииСтроки элемента формы ДеревоУслуг.
//
Процедура ДеревоУслугПриАктивизацииСтроки(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы ДеревоУслуг.
//
Процедура ДеревоУслугПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	ВвестиНовуюДату();
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ДеревоУслуг.
//
Процедура ДеревоУслугПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы ДеревоУслуг.
//
Процедура ДеревоУслугПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено И (ТипЗнч(Элемент.ТекущиеДанные.УслугаДата) <> Тип("Дата") ИЛИ Элемент.ТекущиеДанные.Уровень() <>1) Тогда
		Если ТипЗнч(Элемент.ТекущиеДанные.УслугаДата) = Тип("СправочникСсылка.Номенклатура") Тогда
			Элемент.ТекущиеДанные.УслугаДата.ПолучитьФорму().Открыть();
		КонецЕсли; 
		Отказ = Истина;
	КонецЕсли;
	
	мДатаРедактирования = Элемент.ТекущиеДанные.УслугаДата;
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента формы ДеревоУслуг.
//
Процедура ДеревоУслугПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли; 
	
	Если Строка.Уровень() <> 1
	 ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если Строка.УслугаДата = ПараметрыПеретаскивания.Значение[0].НоваяДатаРемонта Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли; 
	
	Если Строка.Родитель.УслугаДата <> ПараметрыПеретаскивания.Значение[0].Номенклатура Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОкончаниеПеретаскивания элемента формы ДеревоУслуг.
//
Процедура ДеревоУслугОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента формы ДеревоУслуг.
//
Процедура ДеревоУслугПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка.Уровень() <> 1
	 ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	НоваяДата = Строка.УслугаДата;
	
	Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
		СтрокаТЧ.НоваяДатаРемонта = НоваяДата;
	КонецЦикла;
	
	НоваяСтрокаТЧ = ОсновныеСредстваДляРемонта.Добавить();
	ОсновныеСредстваДляРемонта.Удалить(НоваяСтрокаТЧ);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ДеревоУслуг.УслугаДата.
//
Процедура ДеревоУслугУслугаДатаОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.ДеревоУслуг.ТекущиеДанные <> Неопределено И ЭлементыФормы.ДеревоУслуг.ТекущиеДанные.Уровень() = 1 Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = '00010101000000';
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы ДеревоУслуг.
//
Процедура ДеревоУслугПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущиеДанные.Уровень() <> 1 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.УслугаДата = мДатаРедактирования;
		мДатаРедактирования = Неопределено;
		Возврат;
	КонецЕсли; 
	
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.Уровень() = 1 Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.УслугаДата) Тогда
			Предупреждение("Дата не может быть пустой.");
			Отказ = Истина;
			Возврат;
		Иначе
			НайденнаяСтроки = Элемент.ТекущиеДанные.Родитель.Строки.НайтиСтроки(Новый Структура("УслугаДата", Элемент.ТекущиеДанные.УслугаДата));
			Если НайденнаяСтроки.Количество() > 1 Тогда
				Предупреждение("Для услуги """ + СокрЛП(Элемент.ТекущиеДанные.Родитель.УслугаДата) + """ дата """ + Формат(Элемент.ТекущиеДанные.УслугаДата, "ДФ=dd.MM.yyyy") + """ уже определена.");
				Отказ = Истина;
				Возврат;
			КонецЕсли; 
		КонецЕсли;
		Элемент.ТекущиеДанные.Родитель.Строки.Сортировать("УслугаДата ВОЗР");
	КонецЕсли;
	
	СтрокиТЧПрошлойДаты = ОсновныеСредстваДляРемонта.НайтиСтроки(Новый Структура("НоваяДатаРемонта", мДатаРедактирования));
	Для каждого СтрокаТЧПрошлойДаты Из СтрокиТЧПрошлойДаты Цикл
		СтрокаТЧПрошлойДаты.НоваяДатаРемонта = Элемент.ТекущиеДанные.УслугаДата;
	КонецЦикла; 
	
	УстановитьОтбор();
	
	НоваяСтрокаТЧ = ОсновныеСредстваДляРемонта.Добавить();
	ОсновныеСредстваДляРемонта.Удалить(НоваяСтрокаТЧ);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ДеревоУслуг.
//
Процедура ДеревоУслугПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ТипЗнч(ДанныеСтроки.УслугаДата) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ОсновныеСредстваДляРемонта.Найти(ДанныеСтроки.УслугаДата, "Номенклатура") = Неопределено Тогда
			ОформлениеСтроки.Ячейки.УслугаДата.ЦветТекста = WebЦвета.СветлоСерый;
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ДанныеСтроки.УслугаДата) = Тип("Дата") Тогда
		СтрокиДатаУслуга = ОсновныеСредстваДляРемонта.НайтиСтроки(Новый Структура("НоваяДатаРемонта, Номенклатура", ДанныеСтроки.УслугаДата, ДанныеСтроки.Родитель.УслугаДата));
		Если СтрокиДатаУслуга.Количество() = 0 Тогда
			ОформлениеСтроки.Ячейки.УслугаДата.ЦветТекста = WebЦвета.СветлоСерый;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СПИСКА ОС

// Обработчик события НачалоПеретаскивания элемента формы ОсновныеСредстваДляРемонта.
//
Процедура ОсновныеСредстваДляРемонтаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ОсновныеСредстваДляРемонта.
//
Процедура ОсновныеСредстваДляРемонтаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ДанныеСтроки.ПоследнийРемонтЗавершен Тогда
		ОформлениеСтроки.Ячейки.ПоследняяДатаРемонта.ЦветТекста = WebЦвета.ТемноКрасный;
	КонецЕсли; 

	Если НЕ ДанныеСтроки.НаличиеЗаказовНаРемонтОС Тогда
		ОформлениеСтроки.Ячейки.ПоследняяДатаРемонта.ЦветТекста = WebЦвета.ТемноСиний;
	КонецЕсли;
	
	Если ДанныеСтроки.РемонтПоНаработке Тогда
		ОформлениеСтроки.Ячейки.ЗначениеПараметраНаработкиОСПредставление.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.Ячейки.ЗначениеПараметраНаработкиОСПоНормативуПредставление.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	Иначе
		ОформлениеСтроки.Ячейки.ПериодичностьОбслуживанияПоНормативуПредставление.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ЗначениеПараметраНаработкиОС) Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЕдиницаНаработкиПоНормативу) Тогда
			ОформлениеСтроки.Ячейки.ЗначениеПараметраНаработкиОСПредставление.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.ЗначениеПараметраНаработкиОСПредставление.Текст            = Строка(ДанныеСтроки.ЗначениеПараметраНаработкиОС);
		Иначе
			ОформлениеСтроки.Ячейки.ЗначениеПараметраНаработкиОСПредставление.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.ЗначениеПараметраНаработкиОСПредставление.Текст            = Строка(ДанныеСтроки.ЗначениеПараметраНаработкиОС) + " " + Строка(ДанныеСтроки.ЕдиницаНаработкиПоНормативу);
		КонецЕсли;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ЗначениеПараметраНаработкиОСПоНормативу) Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЕдиницаНаработкиПоНормативу) Тогда
			ОформлениеСтроки.Ячейки.ЗначениеПараметраНаработкиОСПоНормативуПредставление.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.ЗначениеПараметраНаработкиОСПоНормативуПредставление.Текст = Строка(ДанныеСтроки.ЗначениеПараметраНаработкиОСПоНормативу);
		Иначе
			ОформлениеСтроки.Ячейки.ЗначениеПараметраНаработкиОСПоНормативуПредставление.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.ЗначениеПараметраНаработкиОСПоНормативуПредставление.Текст = Строка(ДанныеСтроки.ЗначениеПараметраНаработкиОСПоНормативу) + " " + Строка(ДанныеСтроки.ЕдиницаНаработкиПоНормативу);
		КонецЕсли;
	КонецЕсли; 
	
	ОформлениеСтроки.Ячейки.ПериодичностьОбслуживанияПоНормативуПредставление.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.ПериодичностьОбслуживанияПоНормативуПредставление.Текст = Строка(ДанныеСтроки.КоличествоПериодов) + " " + ПолучитьНужнуюФормуПериода(ДанныеСтроки.ПериодичностьОбслуживанияПоНормативу, ДанныеСтроки.КоличествоПериодов);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы ОсновныеСредстваДляРемонта.
//
Процедура ОсновныеСредстваДляРемонтаПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущаяКолонка <> Неопределено Тогда
		Если Элемент.ТекущаяКолонка.Имя = "ОсновноеСредство" Тогда
			Элемент.ТекущиеДанные.ОсновноеСредство.ПолучитьФорму().Открыть();
			Отказ = Истина;
		ИначеЕсли Элемент.ТекущаяКолонка.Имя = "Норматив"
			  ИЛИ Элемент.ТекущаяКолонка.Имя = "КоличествоПериодов"
			  ИЛИ Элемент.ТекущаяКолонка.Имя = "ПериодичностьОбслуживанияПоНормативу"
			  ИЛИ Элемент.ТекущаяКолонка.Имя = "ПараметрНаработкиОСПоНормативу"
			  ИЛИ Элемент.ТекущаяКолонка.Имя = "ЗначениеПараметраНаработкиОСПоНормативу" Тогда
			Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Норматив) Тогда
				Сообщить("Не указан норматив на обслуживание!", СтатусСообщения.Важное);
			Иначе
				Элемент.ТекущиеДанные.Норматив.ПолучитьФорму().Открыть();
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента формы ОсновныеСредстваДляРемонта.
//
Процедура ОсновныеСредстваДляРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
	
		СтрокаУслуги = ДеревоУслуг.Строки.Найти(Элемент.ТекущиеДанные.Номенклатура, "УслугаДата");
		Если СтрокаУслуги <> Неопределено Тогда
			СтрокаДаты = СтрокаУслуги.Строки.Найти(Элемент.ТекущиеДанные.НоваяДатаРемонта, "УслугаДата");
			Если СтрокаДаты = Неопределено Тогда
				НоваяСтрокаДаты = СтрокаУслуги.Строки.Добавить();
				НоваяСтрокаДаты.УслугаДата = Элемент.ТекущиеДанные.НоваяДатаРемонта;
				СтрокаУслуги.Строки.Сортировать("УслугаДата ВОЗР");
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

мДатаРедактирования = Неопределено;