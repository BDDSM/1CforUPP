// Содержит список возможных действий над документами
Перем СписокДействий;

// Содержит списки параметров действий
Перем СтруктураУточнениеДействий;

Процедура УстановитьВидимость()
	
	Если ПостроительОтчета.Текст="" Тогда
		
		ЭлементыФормы.ПанельНастройка.Страницы.СтраницаДействия.Доступность=Ложь;
		
	Иначе
		
		ЭлементыФормы.ПанельНастройка.Страницы.СтраницаДействия.Доступность=Истина;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()


Процедура КнопкаВыполнитьНажатие(Элемент)
	
	Если ТабДокументовФорма.Количество()>0 Тогда
		
		ТекстВопроса = "Изменение документов является необратимой операцией. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ОбработатьДокументы();
		ТабДокументовФорма.Очистить();
		
	КонецЕсли;
		
КонецПроцедуры

// Проверяет даты начала и конца ограничения оборотов и корректирует при необходимости
//
Процедура ПроверкаИнтервала()
	
	Если (ДатаКон='00010101') И (ДатаНач<>'00010101') Тогда
		
		ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(ДатаНач,Сценарий.Периодичность);
		
	ИначеЕсли (ДатаКон<>'00010101') И (ДатаНач='00010101') Тогда
		
		ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(ДатаКон,Сценарий.Периодичность);
		
	ИначеЕсли ДатаКон<ДатаНач Тогда
		
		Если ЭтаФорма.ТекущийЭлемент.Имя="ДатаКон" Тогда
			
			ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(ДатаКон,Сценарий.Периодичность);
			
		Иначе
			
			ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(ДатаНач,Сценарий.Периодичность);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаИнтервала()

Процедура СценарийПриИзменении(Элемент)	
	
	Если НЕ Сценарий.Пустая() Тогда
		
		ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(ДатаНач,Сценарий.Периодичность);
		ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(ДатаКон,Сценарий.Периодичность);
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		
		Если НЕ Сценарий.Пустая() Тогда
			
			ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(НП.ПолучитьДатуНачала(),Сценарий.Периодичность);
			ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(НП.ПолучитьДатуОкончания(),Сценарий.Периодичность);
		Иначе
			
			ДатаНач = НП.ПолучитьДатуНачала();
			ДатаКон = НП.ПолучитьДатуОкончания();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ДатаНачалаПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение,Сценарий.Периодичность);
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Сценарий.Периодичность,Направление);
	
	ПроверкаИнтервала();

КонецПроцедуры

Процедура ДатаКонцаПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(Элемент.Значение,Сценарий.Периодичность);
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаКонцаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Сценарий.Периодичность,Направление),Сценарий.Периодичность);

	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ВидыДокументов=Новый СписокЗначений;
	ВидыДокументов.Добавить("БюджетнаяОперация","Бюджетная операция");
	ВидыДокументов.Добавить("ВнутреннееПеремещениеСредствПриБюджетировании","Внутреннее перемещение средств при бюджетировании");
	ВидыДокументов.Добавить("ЗаявкаНаРасходованиеСредств","Заявка на расходование средств");
    ВидыДокументов.Добавить("РасчетПоМоделиБюджетирования","Расчет по модели бюджетирования");
			
	ЭлементыФормы.ВидДокумента.СписокВыбора=ВидыДокументов;
	
	Если НЕ ВидДокумента="" Тогда
		ЗаполнитьНачальныеНастройки();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСпискиДействий()
	
	Если НЕ ВидДокумента="" Тогда
		
		СписокДействий=Новый СписокЗначений;
		
		Если ВидДокумента="БюджетнаяОперация" Тогда
			
			СписокДействий.Добавить("ИзменитьСумму", "Изменить сумму операции");
			СписокДействий.Добавить("ИзменитьКоличество", "Изменить количество");
			СписокДействий.Добавить("ИзменитьЦену", "Изменить цену");
			СписокДействий.Добавить("ИзменитьРеквизит", "Изменить реквизит документа");
			СписокДействий.Добавить("ИзменитьСостояние", "Изменить состояние документа");
			
			СписокРеквизитов=Новый СписокЗначений;
			СписокРеквизитов.Добавить("Сценарий");
			СписокРеквизитов.Добавить("ПериодПланирования","Период планирования");
			СписокРеквизитов.Добавить("ВалютаДокумента","Валюта документа");
			СписокРеквизитов.Добавить("СтатьяОборотов","Статья оборотов");
			СписокРеквизитов.Добавить("ЦФО");
			СписокРеквизитов.Добавить("Проект");
			СписокРеквизитов.Добавить("Контрагент");
			СписокРеквизитов.Добавить("Номенклатура");
			СписокРеквизитов.Добавить("Ответственный");
			СписокРеквизитов.Добавить("Состояние");
			
			СписокПараметров=Новый СписокЗначений;
			СписокПараметров.Добавить("Относительное","Относительное изменение");
			СписокПараметров.Добавить("Абсолютное","Абсолютное изменение");
			СписокПараметров.Добавить("Значение","Установить значение");
			
			СтруктураУточнениеДействий=Новый Структура;
			СтруктураУточнениеДействий.Вставить("ИзменитьСумму",СписокПараметров);
			СтруктураУточнениеДействий.Вставить("ИзменитьКоличество",СписокПараметров);
			СтруктураУточнениеДействий.Вставить("ИзменитьЦену",СписокПараметров);
			СтруктураУточнениеДействий.Вставить("ИзменитьРеквизит",СписокРеквизитов);	
			
		ИначеЕсли ВидДокумента="ВнутреннееПеремещениеСредствПриБюджетировании" Тогда
			
			СписокДействий.Добавить("ИзменитьСумму", "Изменить сумму операции");
			СписокДействий.Добавить("ИзменитьКоличествоИсточник", "Изменить количество источника");
			СписокДействий.Добавить("ИзменитьКоличествоПриемник", "Изменить количество приемника");
			СписокДействий.Добавить("ИзменитьРеквизит", "Изменить реквизит документа");
			СписокДействий.Добавить("ИзменитьСостояние", "Изменить состояние документа");
			
			СписокРеквизитов=Новый СписокЗначений;
			СписокРеквизитов.Добавить("Сценарий");
			СписокРеквизитов.Добавить("ПериодПланирования","Период планирования");
			СписокРеквизитов.Добавить("СтатьяОборотов","Статья оборотов");
			СписокРеквизитов.Добавить("ЦФОИсточник","ЦФО - источник");
			СписокРеквизитов.Добавить("ЦФОПриемник","ЦФО - приемник");
			СписокРеквизитов.Добавить("ПроектИсточник","Проект - источник");
			СписокРеквизитов.Добавить("ПроектПриемник","Проект - приемник");
			СписокРеквизитов.Добавить("КонтрагентИсточник","Контрагент - источник");
			СписокРеквизитов.Добавить("КонтрагентПриемник","Контрагент - приемник");
			СписокРеквизитов.Добавить("НоменклатураИсточник","Номенклатура - источник");
			СписокРеквизитов.Добавить("НоменклатураПриемник","Номенклатура - приемник");
			СписокРеквизитов.Добавить("Ответственный");
			СписокРеквизитов.Добавить("Состояние");
			
			СписокПараметров=Новый СписокЗначений;
			СписокПараметров.Добавить("Относительное","Относительное изменение");
			СписокПараметров.Добавить("Абсолютное","Абсолютное изменение");
			СписокПараметров.Добавить("Значение","Установить значение");
			
			СтруктураУточнениеДействий=Новый Структура;
			СтруктураУточнениеДействий.Вставить("ИзменитьСумму",СписокПараметров);
			СтруктураУточнениеДействий.Вставить("ИзменитьКоличествоИсточник",СписокПараметров);
			СтруктураУточнениеДействий.Вставить("ИзменитьКоличествоПриемник",СписокПараметров);
			СтруктураУточнениеДействий.Вставить("ИзменитьРеквизит",СписокРеквизитов);
			
		ИначеЕсли ВидДокумента="ЗаявкаНаРасходованиеСредств" Тогда
			
			СписокДействий.Добавить("ИзменитьСумму", "Изменить сумму заявки");
			СписокДействий.Добавить("ИзменитьРеквизит", "Изменить реквизит документа");
			СписокДействий.Добавить("ИзменитьСостояние", "Изменить состояние документа");
			
			СписокРеквизитов=Новый СписокЗначений;
			СписокРеквизитов.Добавить("Сценарий");
			СписокРеквизитов.Добавить("ДатаРасхода","Дата расхода");
			СписокРеквизитов.Добавить("БанковскийСчетКасса","Место хранения");
			СписокРеквизитов.Добавить("ВалютаДокумента","Валюта документа");
			СписокРеквизитов.Добавить("СтатьяОборотов","Статья оборотов");
			СписокРеквизитов.Добавить("ЦФО");
			СписокРеквизитов.Добавить("Проект");
			СписокРеквизитов.Добавить("Номенклатура");
			СписокРеквизитов.Добавить("Ответственный");
			СписокРеквизитов.Добавить("Состояние");
			
			СписокПараметров=Новый СписокЗначений;
			СписокПараметров.Добавить("Относительное","Относительное изменение");
			СписокПараметров.Добавить("Абсолютное","Абсолютное изменение");
			СписокПараметров.Добавить("Значение","Установить значение");
			
			СтруктураУточнениеДействий=Новый Структура;
			СтруктураУточнениеДействий.Вставить("ИзменитьСумму",СписокПараметров);
			СтруктураУточнениеДействий.Вставить("ИзменитьРеквизит",СписокРеквизитов);
			
		ИначеЕсли ВидДокумента="РасчетПоМоделиБюджетирования" Тогда
			
			СписокДействий.Добавить("Пересчитать", "Выполнить расчет заново");
			СписокДействий.Добавить("ИзменитьРеквизит", "Изменить реквизит документа");
			СписокДействий.Добавить("ИзменитьСостояние", "Изменить состояние документа");
			
			СписокРеквизитов=Новый СписокЗначений;
			СписокРеквизитов.Добавить("Сценарий");
			СписокРеквизитов.Добавить("Ответственный");
			СписокРеквизитов.Добавить("Состояние");
			
			СтруктураУточнениеДействий=Новый Структура;
			СтруктураУточнениеДействий.Вставить("Пересчитать",Новый СписокЗначений);
			СтруктураУточнениеДействий.Вставить("ИзменитьРеквизит",СписокРеквизитов);
			
		КонецЕсли;
		
		СписокСостояний=Новый СписокЗначений;
		СписокСостояний.Добавить("Проведение","Проведение документов");
		СписокСостояний.Добавить("ОтменаПроведения","Отмена проведения документов");
		СписокСостояний.Добавить("ПометкаУдаления","Установка пометки удаления");
		СписокСостояний.Добавить("СнятьПометкуУдаления","Снятие пометки удаления");
		
		СтруктураУточнениеДействий.Вставить("ИзменитьСостояние",СписокСостояний);
				
	КонецЕсли;

	
КонецПроцедуры // УстановитьСпискиДействий()


Процедура ВидДокументаПриИзменении(Элемент)
	
	Если НЕ ВидДокумента="" Тогда
		
		УстановитьСпискиДействий();
		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	Действия.Очистить();
	ЭлементыФормы.ТабДокументовФорма.Значение.Очистить();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДействияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если ТипЗнч(СписокДействий)=Тип("СписокЗначений") Тогда
	
	Элемент.Колонки.Действие.ЭлементУправления.СписокВыбора=СписокДействий;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияДействиеПриИзменении(Элемент)
	
	Если НЕ Элемент.Значение="" Тогда
		
		СписокУточнения=СтруктураУточнениеДействий[Элемент.Значение];
		ЭлементыФормы.Действия.Колонки.УточнениеДействия.ЭлементУправления.СписокВыбора=СписокУточнения;
		
		ЭлементыФормы.Действия.ТекущиеДанные.УточнениеДействия="";
		
	КонецЕсли;
	
	ЭлементыФормы.Действия.ТекущиеДанные.ПараметрДействия=Неопределено;
		
КонецПроцедуры

Процедура ДействияПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элемент.ТекущиеДанные=Неопределено И НЕ Элемент.ТекущиеДанные.Действие="" Тогда
		СписокУточнения=СтруктураУточнениеДействий[Элемент.ТекущиеДанные.Действие];
		ЭлементыФормы.Действия.Колонки.УточнениеДействия.ЭлементУправления.СписокВыбора=СписокУточнения;
	КонецЕсли;
					
КонецПроцедуры

Процедура ДействияУточнениеДействияПриИзменении(Элемент)
	
	ЭлементыФормы.Действия.ТекущиеДанные.ПараметрДействия="";
	
КонецПроцедуры

Процедура ДействияПараметрДействияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.Действия.ТекущиеДанные.Действие="ИзменитьРеквизит" 
		И НЕ ЭлементыФормы.Действия.ТекущиеДанные.УточнениеДействия="" 
		И НЕ ВидДокумента="" Тогда
		
		Реквизит=Метаданные.Документы[ВидДокумента].Реквизиты.Найти(ЭлементыФормы.Действия.ТекущиеДанные.УточнениеДействия);
		
		МассивТипов = Реквизит.Тип.Типы();
		
		Если МассивТипов.Количество() = 1 Тогда
			
			Если МассивТипов[0]=Тип("Число") Тогда
				Параметр=0;
			ИначеЕсли МассивТипов[0]=Тип("Строка") Тогда
				Параметр="";
			ИначеЕсли МассивТипов[0]=Тип("Булево") Тогда
				Параметр=Истина;
			ИначеЕсли МассивТипов[0]=Тип("Дата") Тогда
				Параметр=ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаКон,Сценарий.Периодичность,1),Сценарий.Периодичность);
			Иначе
				
				Параметр = Новый(МассивТипов[0])
				
			КонецЕсли;
			
			Элемент.Значение=Параметр;
			Элемент.ВыбиратьТип = Ложь;
			
		Иначе 
			
			Если Найти(Реквизит.Имя,"Номенклатура")>0 Тогда
				
				Если Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
					
					Элемент.Значение=Новый (Тип("СправочникСсылка.НоменклатурныеГруппы"));
					
				Иначе
					
					Элемент.Значение=Новый (Тип("СправочникСсылка.Номенклатура"));
					
				КонецЕсли;
				
			Иначе
				
				Элемент.ОграничениеТипа = Реквизит.Тип;
				Элемент.ВыбиратьТип = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Не (ЭлементыФормы.Действия.ТекущиеДанные.Действие="" ИЛИ ЭлементыФормы.Действия.ТекущиеДанные.Действие="ИзменитьСостояние") Тогда
		
		Элемент.Значение=0;	
		
	КонецЕсли;
		
КонецПроцедуры

Процедура КоманднаяПанельДокументыЗаполнить(Кнопка)
	
	ЗаполнитьТаблицуДокументов();
	ЭлементыФормы.ТабДокументовФорма.Значение=ТабДокументов;
	ЭлементыФормы.ТабДокументовФорма.СоздатьКолонки();
		
	СтруктураИмяпредставление=Новый Структура;
	
	Для Каждого Реквизит Из Метаданные.Документы[ВидДокумента].Реквизиты Цикл
		СтруктураИмяПредставление.Вставить(Реквизит.Имя,Реквизит.Синоним);
	КонецЦикла;	
		
	Для Каждого Колонка Из ЭлементыФормы.ТабДокументовФорма.Колонки Цикл
				
		Шапка="";
		
		Если СтруктураИмяПредставление.Свойство(Колонка.Имя,Шапка) Тогда
			Колонка.ТекстШапки=Шапка;
		КонецЕсли;
		
		Колонка.ТолькоПросмотр=Истина;
		
	КонецЦикла;
	МассивШиринаКолонок = новый Массив;
	МассивШиринаКолонок.Добавить(35);
	МассивШиринаКолонок.Добавить(12);
	МассивШиринаКолонок.Добавить(8);
	МассивШиринаКолонок.Добавить(15);
	МассивШиринаКолонок.Добавить(30);
	МассивШиринаКолонок.Добавить(15);
	МассивШиринаКолонок.Добавить(30);
	МассивШиринаКолонок.Добавить(20);
	
	КоличествоКолонок = Мин(ЭлементыФормы.ТабДокументовФорма.Колонки.Количество(),МассивШиринаКолонок.Количество());

	Для а=0 по КоличествоКолонок-1 цикл
		ЭлементыФормы.ТабДокументовФорма.Колонки[а].Ширина = МассивШиринаКолонок[а];
	КонецЦикла;
	
КонецПроцедуры

Процедура ТабДокументовФормаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ТабДокументовФорма.Количество()>0 Тогда
		ОткрытьЗначение(ВыбраннаяСтрока.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабДокументовФормаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ=Истина;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
		
	Если НЕ ЗначениеЗаполнено(ДатаНач) Тогда
		ДатаНач=НачалоДня(РабочаяДата);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаКон) Тогда
		ДатаКон=КонецДня(РабочаяДата);
	КонецЕсли;
	
	Если НЕ ВидДокумента="" Тогда
		
		УстановитьСпискиДействий();
		ЗаполнитьНачальныеНастройки();
		ЭлементыФормы.ВидДокумента.Значение=ЭлементыФормы.ВидДокумента.СписокВыбора.НайтиПоЗначению(ВидДокумента).Значение;

	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры