Перем ДокументОперация;

Процедура ПриОткрытии()
	НазваниеКонсолидируемойГруппы = ВосстановитьЗначение("НазваниеКонсолидируемойГруппы");
	Дата = ДобавитьМесяц(ТекущаяДата(), -5*12);
	Для Ном = 1 по 10 Цикл
		ЭлементыФормы.Период.СписокВыбора.Добавить(НачалоГода(Дата), Формат(НачалоГода(Дата), "ДФ=yyyy"));
		Дата = ДобавитьМесяц(Дата, 12);
	КонецЦикла;

	Период = НачалоГода(ТекущаяДата());
	УстановитьВидимостьКнопок();
КонецПроцедуры

Процедура КоманднаяПанель2Заполнить(Кнопка)
	ТабличноеПолеОрганизации.Очистить();
	Выборка = Справочники.Организации.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТП = ТабличноеПолеОрганизации.Добавить();
		СтрокаТП.Организация = Выборка.Ссылка;
	КонецЦикла;
КонецПроцедуры

Процедура КонсолидироватьОтчет(ИмяОтчета, Сообщение = "")
	Состояние(Сообщение);

	Форма = Отчеты[ИмяОтчета].ПолучитьФорму("МСФО");
	Форма.ЗаполнитьНачальныеНастройки();

	// Отчеты самостоятельно "откручивают" периода назад на период, в зависимости от типа отчета.
	// Например в БалансеМСФО сравниваемый период всегда с прошлым годом, а в остальных формах
	// с аналогичным периодом.

	Форма.мДатаКонцаПериодаОтчета = КонецГода(Период);
	Форма.мДатаНачалаПериодаОтчета = НачалоГода(Период);
	Форма.КомментарийОбщий = "Сформировано автоматически при консолидации по данным ИБ.";

	// Временно сделано, что выбранная форма всегда будет МСФО.
	Форма.мВыбраннаяФорма = "МСФО";

	//Форма.мДатаНачалаПериодаОтчета = НачалоГода(ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, -12));

	Если ИмяОтчета = "МСФОБаланс" Тогда
		Форма.мЛистБаланс = Форма.ЭлементыФормы.ПолеТабличногоДокументаБаланс;
		Форма.мЛистБаланс.Области.ОргНазв.Значение = НазваниеКонсолидируемойГруппы;
		
	ИначеЕсли ИмяОтчета = "МСФОДвижениеКапитала" Тогда
		Форма.мЛистДвижениеКапитала = Форма.ЭлементыФормы.ПолеТабличногоДокументаДвижениеКапитала;
		Форма.мЛистДвижениеКапитала.Области.ОргНазв.Значение = НазваниеКонсолидируемойГруппы;
		
	ИначеЕсли ИмяОтчета = "МСФОДДС" Тогда
		Форма.мЛистДДС = Форма.ЭлементыФормы.ПолеТабличногоДокументаДДС;
		Форма.мЛистДДС.Области.ОргНазв.Значение = НазваниеКонсолидируемойГруппы;
		
	ИначеЕсли ИмяОтчета = "МСФОПрибылиИУбытки" Тогда
		Форма.мЛистПрибыляИУбытки = Форма.ЭлементыФормы.ПолеТабличногоДокументаПрибыляИУбытки;
		Форма.мЛистПрибыляИУбытки.Области.ОргНазв.Значение = НазваниеКонсолидируемойГруппы;
	КонецЕсли;
	
	Форма.мДелитель = 1;
	Форма.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	Форма.ТочностьЕдиницыИзмерения = 0;
	Форма.мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.КонсолидированныйПоИБ;
	
	МассивОрганизаций = Новый Массив();
	Для каждого Стр Из ТабличноеПолеОрганизации Цикл
		МассивОрганизаций.Добавить(Стр.Организация);
	КонецЦикла;
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	
	Форма.ЗаполнитьАвто(МассивОрганизаций);
	Форма.Сохранить();

	// корректиируем настройку страниц
	// ХранилищеДанных = Новый ХранилищеЗначения(Форма.мДеревоСтраницОтчета);
	// Форма.мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

	// финальная запись
	//Форма.мСохраненныйДок.Записать();
	
	СтрокаТП = ТабличноеПолеРезультат.Добавить();
	СтрокаТП.Отчет = Форма.мСохраненныйДок.НаименованиеОтчета;
	СтрокаТП.Ссылка = Форма.мСохраненныйДок.Ссылка;
	СтрокаТП.ОтчетФлажок = Истина;
	
	ЭтаФорма.Обновить();
КонецПроцедуры

Процедура ВыполнитьКонсолидацию()
	КонсолидироватьОтчет("МСФОБаланс",				"Консолидация баланса...");
	КонсолидироватьОтчет("МСФОДвижениеКапитала",	"Консолидация отчета об изменении в капитале...");
	КонсолидироватьОтчет("МСФОДДС",					"Консолидация отчета о движении денежных средств...");
	КонсолидироватьОтчет("МСФОПрибылиИУбытки",		"Консолидация отчета о прибылях и убытках...");
КонецПроцедуры

Процедура ТабличноеПолеРезультатВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Документ = ВыбраннаяСтрока.Ссылка;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ОткрытьЗначение(Документ);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьВидимостьКнопок()
    Всего = ЭлементыФормы.ПанельОсновная.Страницы.Количество();
	Текущая = Число(Сред(ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя, 9));

	Если Текущая < Всего Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность = Истина;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность = Ложь;
	КонецЕсли;

	Если Текущая > 1 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Истина;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Ложь;
	КонецЕсли;

	Если Текущая >= (Всего-1) Тогда
        ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Текст = "Выполнить";
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Текст = "Далее >>";
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыДалее(Кнопка)
    Всего = ЭлементыФормы.ПанельОсновная.Страницы.Количество();
	Текущая = Число(Сред(ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя, 9));

	Если Текущая = 1 Тогда
		Если НЕ ЗначениеЗаполнено(Период) Тогда
			Предупреждение("Не указан период консолидации.");
			Отказ = Истина;
			ТекущийЭлемент = ЭлементыФормы.Период;
			Возврат;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(НазваниеКонсолидируемойГруппы) Тогда
			Предупреждение("Не указано название консолидируемой группы.");
			Отказ = Истина;
			ТекущийЭлемент = ЭлементыФормы.НазваниеКонсолидируемойГруппы;
			Возврат;
		КонецЕсли; 
		
		Если ТабличноеПолеОрганизации.Количество() < 1 Тогда
			Предупреждение("Не выбрана ни одна организация.");
			ТекущийЭлемент = ЭлементыФормы.ТабличноеПолеОрганизации;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Текущая < Всего Тогда
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы["Страница" + (Текущая+1)];
	КонецЕсли;
	
	ЭтаФорма.Обновить();

	УстановитьВидимостьКнопок();
	
	Если Текущая = (Всего-2) Тогда
		СформироватьПроводки();
		
	ИначеЕсли Текущая = (Всего-1) Тогда
        ВыполнитьКонсолидацию();
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыНазад(Кнопка)
	Текущая = Число(Сред(ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя, 9));

	Если Текущая > 1 Тогда
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы["Страница" + (Текущая-1)];
	КонецЕсли;

	УстановитьВидимостьКнопок();
КонецПроцедуры

Процедура ПриЗакрытии()
	СохранитьЗначение("НазваниеКонсолидируемойГруппы", НазваниеКонсолидируемойГруппы);
КонецПроцедуры

Процедура СформироватьПроводки()
	МассивОрганизаций = Новый Массив();
	Для каждого Стр Из ТабличноеПолеОрганизации Цикл
		МассивОрганизаций.Добавить(Стр.Организация);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МеждународныйОстатки.Счет КАК Счет,
	               |	МеждународныйОстатки.Субконто1 КАК Контрагент,
	               |	МеждународныйОстатки.Организация КАК Организация,
	               |	СУММА(МеждународныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
	               |	СУММА(МеждународныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт,
	               |	СобственныеКонтрагентыК.Объект КАК Организация1,
	               |	СобственныеКонтрагентыО.Контрагент КАК Контрагент1
	               |ИЗ
	               |	РегистрБухгалтерии.Международный.Остатки(&Период, , &Контрагенты, Организация В (&Организация)) КАК МеждународныйОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыК
	               |		ПО МеждународныйОстатки.Субконто1 = СобственныеКонтрагентыК.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыО
	               |		ПО МеждународныйОстатки.Организация = СобственныеКонтрагентыО.Объект
	               |
	               |ГДЕ
	               |	СобственныеКонтрагентыК.ВидСвязи = &ВидСвязи И
	               |	СобственныеКонтрагентыО.ВидСвязи = &ВидСвязи И
	               |	СобственныеКонтрагентыК.Объект В(&Организация)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МеждународныйОстатки.Счет,
	               |	МеждународныйОстатки.Субконто1,
	               |	МеждународныйОстатки.Организация,
	               |	СобственныеКонтрагентыК.Объект,
	               |	СобственныеКонтрагентыО.Контрагент";
	 
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.УстановитьПараметр("ВидСвязи", Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("Период", КонецГода(Период));
	Запрос.УстановитьПараметр("Контрагенты", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты);

	ТЗРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Счета = ПланыСчетов.Международный;
	 
	Если ТипЗнч(ДокументОперация) = Тип("ДокументОбъект.ОперацияМеждународная") Тогда
		ДокументОперация.Движения.Международный.Очистить();
		ДокументОперация.Движения.Международный.Записать();
	КонецЕсли;
	 
	// Инвестиции / капитал
	Состояние("Поиск статей отчетности для элиминирования: Инвестиции / капитал");
	СтыковатьИтоги(ТЗРезультат, Счета.ИнвестицииВДочерниеКомпании, Счета.ОбыкновенныеАкции); //1051-3011
	СтыковатьИтоги(ТЗРезультат, Счета.ИнвестицииВДочерниеКомпании, Счета.ЭмиссионныйДоходОбыкновенныеАкции); //1051-3012
	СтыковатьИтоги(ТЗРезультат, Счета.ИнвестицииВДочерниеКомпании, Счета.ПривилегированныеАкции); //1051-3013
	СтыковатьИтоги(ТЗРезультат, Счета.ИнвестицииВДочерниеКомпании, Счета.ЭмиссионныйДоходПривилегированныеАкции); //1051-3014
	СтыковатьИтоги(ТЗРезультат, Счета.ИнвестицииВДочерниеКомпании, Счета.СобственныйКапиталПрочее); //1051-3015
	
	// Долгосрочная задолженность
	Состояние("Поиск статей отчетности для элиминирования: Долгосрочная задолженность");
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеДолгосрочные, Счета.ЗаймыОбеспеченныеДолгосрочные); //1073-4012
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеДолгосрочные, Счета.КонвертируемыеЗаймыДолгосрочные); //1073-4013
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеДолгосрочные, Счета.ЗаймыДолгосрочныеПрочиеБезУчетаПроцентовНеВалютные); //1073-40161
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеДолгосрочные, Счета.ПроцентыПоПрочимДолгосрочнымЗаймамНеВалютные); //1073-40162
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеДолгосрочные, Счета.ЗаймыДолгосрочныеПрочиеБезУчетаПроцентовВалютные); //1073-40163
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеДолгосрочные, Счета.ПроцентыПоПрочимДолгосрочнымЗаймамВалютные); //1073-40164
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеДолгосрочные, Счета.ДолгосрочныеЗаймыБеспроцентныеНеВалютные); //1073-4021
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеДолгосрочные, Счета.ДолгосрочныеЗаймыБеспроцентныеВалютные); //1073-4022
	СтыковатьИтоги(ТЗРезультат, Счета.ВложенияДляДивидендовДолгосрочные, Счета.ЗадолженностьДочернимОрганизациямДолгосрочная); //1072-40831
	СтыковатьИтоги(ТЗРезультат, Счета.ВложенияДляПродажиДолгосрочные, Счета.ЗадолженностьДочернимОрганизациямДолгосрочная); //1071-40831
	СтыковатьИтоги(ТЗРезультат, Счета.ЗадолженностьПокупателейНеттоДолгосрочная, Счета.ДолгосрочнаяКредиторскаяЗадолженность); //10911-4081
	СтыковатьИтоги(ТЗРезультат, Счета.ЗадолженностьСвязанныхСторонДолгосрочная, Счета.ОбязательстваПоФинансовойАрендеДолгосрочные); //10921-4091
	СтыковатьИтоги(ТЗРезультат, Счета.ПлатежиПоФинАрендеКПолучениюДолгосрочные, Счета.ОбязательстваПоФинансовойАрендеДолгосрочные); //10931-4091
	СтыковатьИтоги(ТЗРезультат, Счета.ПрочаяДебиторскаяЗадолженностьДолгосрочная, Счета.ЗадолженностьДочернимОрганизациямДолгосрочная); //10941-40831
	СтыковатьИтоги(ТЗРезультат, Счета.ПрочаяДебиторскаяЗадолженностьДолгосрочная, Счета.ЗадолженностьЗависимымОрганизациямДолгосрочная); //10941-40832
	СтыковатьИтоги(ТЗРезультат, Счета.ПрочаяДебиторскаяЗадолженностьДолгосрочная, Счета.ДолгосрочнаяКредиторскаяЗадолженность); //10941-4082

	// Краткосрочная задолженность
	Состояние("Поиск статей отчетности для элиминирования: Краткосрочная задолженность");
	СтыковатьИтоги(ТЗРезультат, Счета.ВложенияДляПродажиКраткосрочные, Счета.ЗадолженностьДочернимОрганизациямТекущая); //2041-50921
	СтыковатьИтоги(ТЗРезультат, Счета.ВложенияДляПродажиКраткосрочные, Счета.ПрочиеСчетаКОплатеТекущие); //2041-5093
	СтыковатьИтоги(ТЗРезультат, Счета.ВложенияДляДивидендовКраткосрочные, Счета.ЗадолженностьДочернимОрганизациямТекущая); //2042-50921
	СтыковатьИтоги(ТЗРезультат, Счета.ВложенияДляДивидендовКраткосрочные, Счета.ПрочиеСчетаКОплатеТекущие); //2042-5093
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеКраткосрочные, Счета.ЗаймыОбеспеченныеТекущие); //2043-5012
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеКраткосрочные, Счета.КонвертируемыеЗаймыТекущие); //2043-5013
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеКраткосрочные, Счета.ЗаймыТекущиеПрочиеБезУчетаПроцентовНеВалютные); //2043-50171
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеКраткосрочные, Счета.ПроцентыПоПрочимТекущимЗаймамНеВалютные); //2043-50172
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеКраткосрочные, Счета.ЗаймыТекущиеПрочиеБезУчетаПроцентовВалютные); //2043-50173
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеКраткосрочные, Счета.ПроцентыПоПрочимТекущимЗаймамВалютные); //2043-50174
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеКраткосрочные, Счета.ТекущиеЗаймыБеспроцентныеНеВалютные); //2043-5021
	СтыковатьИтоги(ТЗРезультат, Счета.ЗаймыВыданныеКраткосрочные, Счета.ТекущиеЗаймыБеспроцентныеВалютные); //2043-5022
	СтыковатьИтоги(ТЗРезультат, Счета.ЗадолженностьПокупателейНеттоТекущая, Счета.ТекущаяКредиторскаяЗадолженность); //20711-5091
	СтыковатьИтоги(ТЗРезультат, Счета.ЗадолженностьДочернихОрганизацийТекущая, Счета.ЗадолженностьДочернимОрганизациямТекущая); //207211-50921
	СтыковатьИтоги(ТЗРезультат, Счета.ЗадолженностьЗависимыхОрганизацийТекущая, Счета.ЗадолженностьДочернимОрганизациямТекущая); //207212-50921
	СтыковатьИтоги(ТЗРезультат, Счета.ЗадолженностьСовместныхЮрЛицТекущая, Счета.ЗадолженностьДочернимОрганизациямТекущая); //207213-50921
	СтыковатьИтоги(ТЗРезультат, Счета.ПлатежиПоФинАрендеКПолучениюТекущие, Счета.ЗадолженностьДочернимОрганизациямТекущая); //20731-50921
	СтыковатьИтоги(ТЗРезультат, Счета.РасчетыПоИмущественномуИЛичномуСтрахованию, Счета.ПрочиеСчетаКОплатеТекущие); //207411-5093
	СтыковатьИтоги(ТЗРезультат, Счета.РасчетыПоПретензиям, Счета.ПрочиеСчетаКОплатеТекущие); //207412-5093
	СтыковатьИтоги(ТЗРезультат, Счета.РасчетыПоПричитающимсяДивидендам, Счета.ПрочиеСчетаКОплатеТекущие); //207413-5093
	СтыковатьИтоги(ТЗРезультат, Счета.ПрочиеРасчетыСРазнымиДебиторами, Счета.ПрочиеСчетаКОплатеТекущие); //207419-5093
	СтыковатьИтоги(ТЗРезультат, Счета.РасчетыПоИмущественномуИЛичномуСтрахованию, Счета.ЗадолженностьДочернимОрганизациямТекущая); //207411-50921
	СтыковатьИтоги(ТЗРезультат, Счета.РасчетыПоПретензиям, Счета.ЗадолженностьДочернимОрганизациямТекущая); //207412-50921
	СтыковатьИтоги(ТЗРезультат, Счета.РасчетыПоПричитающимсяДивидендам, Счета.ЗадолженностьДочернимОрганизациямТекущая); //207413-50921
	СтыковатьИтоги(ТЗРезультат, Счета.ПрочиеРасчетыСРазнымиДебиторами, Счета.ЗадолженностьДочернимОрганизациямТекущая); //207419-50921
	
	СтыковатьИтоги(ТЗРезультат, Счета.ЗадолженностьПокупателейТекущая, Счета.РасчетыСПоставщикамиИПодрядчикамиТекущие); //20711-5091
	
	// Выкупленные собственные акции
	СтыковатьСальдо(ТЗРезультат, Счета.ЗадолженностьЗаВыкупленныеСобственныеАкции, Счета.СобственныеАкцииВыкупленные, "Кт"); // 5103-303
	
	// Задолженность по вкладам учредителей
	СтыковатьСальдо(ТЗРезультат, Счета.ПрочиеРасчетыСРазнымиДебиторами, Счета.РасчетыЗаРазмещенныеАкции, "Дт"); // 207419-20744
	
	// ДДС
	Состояние("Поиск статей отчетности для элиминирования: ДДС");
	МассивСчетовРасчета = Новый Массив();
	МассивСчетовРасчета.Добавить(Счета.ДебиторскаяЗадолженностьТекущая); //207
	МассивСчетовРасчета.Добавить(Счета.ВложенияДляПродажиКраткосрочные); //2041
	МассивСчетовРасчета.Добавить(Счета.ВложенияДляДивидендовКраткосрочные); //2042
	МассивСчетовРасчета.Добавить(Счета.ЗаймыВыданныеКраткосрочные); //2043
	МассивСчетовРасчета.Добавить(Счета.ДебиторскаяЗадолженностьДолгосрочная); //109
	МассивСчетовРасчета.Добавить(Счета.Инвестиции); //105
	МассивСчетовРасчета.Добавить(Счета.ВложенияДляПродажиДолгосрочные); //1071
	МассивСчетовРасчета.Добавить(Счета.ВложенияДляДивидендовДолгосрочные); //1072
	МассивСчетовРасчета.Добавить(Счета.ЗаймыВыданныеДолгосрочные); //1073
	МассивСчетовРасчета.Добавить(Счета.КредитыЗаймыПроцентныеДолгосрочные); //401
	МассивСчетовРасчета.Добавить(Счета.ДолгосрочныеЗаймыБеспроцентные); //402
	МассивСчетовРасчета.Добавить(Счета.ОтложенныеДоходыДолгосрочные); //403
	МассивСчетовРасчета.Добавить(Счета.ДолгосрочнаяКредиторскаяЗадолженность); //408
	МассивСчетовРасчета.Добавить(Счета.ПрочиеОбязательстваДолгосрочные); //409
	МассивСчетовРасчета.Добавить(Счета.КредитыЗаймыПроцентныеТекущие); //501
	МассивСчетовРасчета.Добавить(Счета.ТекущиеЗаймыБеспроцентные); //502
	МассивСчетовРасчета.Добавить(Счета.ОтложенныеДоходыТекущие); //503
	//МассивСчетовРасчета.Добавить(Счета.ИнструментыХеджированияТекущиеОбязательства); //507
	МассивСчетовРасчета.Добавить(Счета.ТекущаяКредиторскаяЗадолженность); //509
	МассивСчетовРасчета.Добавить(Счета.ПрочиеОбязательстваТекущие); //510
	
	СтыковатьСНулем(Счета.ДенежныеСредства, МассивСчетовРасчета, ПланыВидовХарактеристик.ВидыСубконтоМеждународные.СтатьиДвиженияДенежныхСредств, "Невозможно автоматически сформировать записи о движении денежных средств для консолидации, т.к. не соблюден баланс.");

	// Прочие доходы и расходы
	Состояние("Поиск статей отчетности для элиминирования: Прочие доходы и расходы");
	МассивСчетовДоходовРасходов = Новый Массив();
	МассивСчетовДоходовРасходов.Добавить(Счета.ПрочиеДоходыИРасходы); //800
	//МассивСчетовДоходовРасходов.Добавить(Счета.ЧрезвычайныеДоходыРасходы); //903
	МассивСчетовДоходовРасходов.Добавить(Счета.СобственныйКапиталИРезервы); //300
	
	СтыковатьСНулем(МассивСчетовДоходовРасходов, МассивСчетовРасчета, ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ВидыДоходовИРасходов, "Невозможно автоматически сформировать записи о прочих доходах и расходах для консолидации, т.к. не соблюден баланс.");
	
	// Выручка/прибыль
	Состояние("Поиск статей отчетности для элиминирования: Выручка / прибыль");
	
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счета.ЗадолженностьПокупателейДолгосрочная); //10911
	МассивСчетов.Добавить(Счета.ЗадолженностьСвязанныхСторонНеттоДолгосрочная); //1092
	МассивСчетов.Добавить(Счета.ПлатежиПоФинАрендеКПолучениюНеттоДолгосрочные); //1093
	МассивСчетов.Добавить(Счета.ПрочаяДебиторскаяЗадолженностьНеттоДолгосрочная); //1094
	МассивСчетов.Добавить(Счета.ЗадолженностьПокупателейТекущая); //20711
	МассивСчетов.Добавить(Счета.ЗадолженностьСвязанныхСторонНеттоТекущая); //2072
	МассивСчетов.Добавить(Счета.ПлатежиПоФинАрендеКПолучениюНеттоТекущие); //2073
	МассивСчетов.Добавить(Счета.ПрочаяДебиторскаяЗадолженностьНеттоТекущая); //2074
	МассивСчетов.Добавить(Счета.ПрочиеОтложенныеДоходыДолгосрочные); //4032
	МассивСчетов.Добавить(Счета.ПрочиеОтложенныеДоходыТекущие); //5032
	
	МассивСубконто = Новый Массив();
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.СтавкиНДС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МеждународныйОбороты.Счет,
	               |	МеждународныйОбороты.Субконто1,
	               |	МеждународныйОбороты.Субконто2,
	               |	МеждународныйОбороты.КорСчет,
	               |	МеждународныйОбороты.КорСубконто1 КАК Контрагент,
	               |	МеждународныйОбороты.Организация,
	               |	СобственныеКонтрагентыО.Контрагент КАК Контрагент1,
	               |	СобственныеКонтрагентыК.Объект КАК Организация1,
	               |	СУММА(МеждународныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	СУММА(МеждународныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Международный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В ИЕРАРХИИ (&Счет), &Субконто, Организация В (&Организация), КорСчет В ИЕРАРХИИ (&КорСчет), &Контрагенты) КАК МеждународныйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыК
	               |		ПО МеждународныйОбороты.КорСубконто1 = СобственныеКонтрагентыК.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыО
	               |		ПО МеждународныйОбороты.Организация = СобственныеКонтрагентыО.Объект
	               |
	               |ГДЕ
	               |	СобственныеКонтрагентыК.ВидСвязи = &ВидСвязи И
	               |	СобственныеКонтрагентыО.ВидСвязи = &ВидСвязи И
	               |	СобственныеКонтрагентыК.Объект В(&Организация)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МеждународныйОбороты.Счет,
	               |	МеждународныйОбороты.Субконто1,
	               |	МеждународныйОбороты.Субконто2,
	               |	МеждународныйОбороты.КорСчет,
	               |	МеждународныйОбороты.КорСубконто1,
	               |	МеждународныйОбороты.Организация,
	               |	СобственныеКонтрагентыО.Контрагент,
	               |	СобственныеКонтрагентыК.Объект";
	 
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.УстановитьПараметр("ВидСвязи", Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(Период));
	Запрос.УстановитьПараметр("Контрагенты", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты);
	Запрос.УстановитьПараметр("Субконто", МассивСубконто);
	Запрос.УстановитьПараметр("Счет", Счета.Выручка);
	Запрос.УстановитьПараметр("КорСчет", МассивСчетов);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуммаНДС = 0;
		Если Выборка.Субконто2 = Перечисления.СтавкиНДС.НДС10 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 10/110;
		ИначеЕсли Выборка.Субконто2 = Перечисления.СтавкиНДС.НДС10_110 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 10/110;
		ИначеЕсли Выборка.Субконто2 = Перечисления.СтавкиНДС.НДС18 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 18/118;
		ИначеЕсли Выборка.Субконто2 = Перечисления.СтавкиНДС.НДС18_118 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 18/118;
		ИначеЕсли Выборка.Субконто2 = Перечисления.СтавкиНДС.НДС20 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 20/120;
		ИначеЕсли Выборка.Субконто2 = Перечисления.СтавкиНДС.НДС20_120 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 20/120;
		КонецЕсли;
		Сумма = Выборка.СуммаОборотКт - СуммаНДС;

		ДобавитьПроводку(Счета.СебестоимостьПродаж, "", Счета.Выручка, Выборка.Субконто1, -Сумма);
	КонецЦикла;
	
	// Доля меньшинства
	Состояние("Поиск статей отчетности для элиминирования: Доля меньшинства");
	
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счета.ОбыкновенныеАкции); //3011
	МассивСчетов.Добавить(Счета.СобственныйКапиталПрочее); //3015
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(МеждународныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт,
	               |	МеждународныйОстатки.Субконто1 КАК Контрагент,
	               |	СобственныеКонтрагенты.Объект КАК Объект,
	               |	МеждународныйОстатки.Организация КАК Организация
	               |ИЗ
	               |	РегистрБухгалтерии.Международный.Остатки(&Период, Счет В ИЕРАРХИИ (&Счет), &Контрагенты, Организация В (&Организация)) КАК МеждународныйОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	               |		ПО МеждународныйОстатки.Субконто1 = СобственныеКонтрагенты.Контрагент И (СобственныеКонтрагенты.ВидСвязи = &ВидСвязи)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МеждународныйОстатки.Субконто1,
	               |	СобственныеКонтрагенты.Объект,
	               |	МеждународныйОстатки.Организация
	               |
	               |ИТОГИ СУММА(СуммаОстатокКт) ПО
	               |	Организация";
	
	Запрос.УстановитьПараметр("Период", КонецГода(Период));
	Запрос.УстановитьПараметр("Счет", МассивСчетов);
	Запрос.УстановитьПараметр("Контрагенты", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты);
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.УстановитьПараметр("ВидСвязи", Перечисления.ВидыСобственныхКонтрагентов.Организация);

	Результат = Запрос.Выполнить();
	ВыборкаПоОрганизациям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		ДоляУКНеНаша = 0;
		ДоляУКОбщая = 0;
		
		СтрокаТП = ТабличноеПолеОрганизации.Найти(ВыборкаПоОрганизациям.Организация, "Организация");
		Если СтрокаТП <> Неопределено Тогда
			Если СтрокаТП.Головная Тогда // Пропускаем головные
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Выборка = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			СтрокаТП = ТабличноеПолеОрганизации.Найти(Выборка.Объект, "Организация");
			Если СтрокаТП <> Неопределено Тогда
				Если СтрокаТП.Головная Тогда // Пропускаем головные
					Продолжить;
				КонецЕсли;
			Иначе
				ДоляУКНеНаша = ДоляУКНеНаша + Выборка.СуммаОстатокКт;
			КонецЕсли;
			
			ДоляУКОбщая = ДоляУКОбщая + Выборка.СуммаОстатокКт;
		КонецЦикла;

		Если ДоляУКОбщая <> 0 Тогда
			БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
			БухИтоги.РассчитатьИтоги("Международный", "КонечныйОстатокДт", "Сумма", "Счет", НачалоГода(Период), КонецГода(Период), , Счета.СуммарныеДоходыИРасходы, , , , "Организация", ВыборкаПоОрганизациям.Организация);
			СКД999 = БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счета.СуммарныеДоходыИРасходы);
			Сумма = СКД999 * ДоляУКНеНаша / ДоляУКОбщая;
			Если Сумма <> 0 Тогда
				ДобавитьПроводку(Счета.СуммарныеДоходыИРасходы, "", Счета.ДоляМеньшинстваВПрибылиИУбытки, "", Сумма, "Доля меньшинства в компании " + ВыборкаПоОрганизациям.Организация + ". ");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Прибыль от внутригрупповых операций
	Состояние("Поиск статей отчетности для элиминирования: Прибыль от внутригрупповых операций");
	МассивСчетов = Новый Структура();
	МассивСчетов.Вставить("Товары", Счета.Товары);
	МассивСчетов.Вставить("СырьеИМатериалы", Счета.СырьеИМатериалы);
	МассивСчетов.Вставить("НезавершенноеПроизводство", Счета.НезавершенноеПроизводство);
	МассивСчетов.Вставить("КомплектующиеИПолуфабрикаты", Счета.КомплектующиеИПолуфабрикаты);
	МассивСчетов.Вставить("ГотоваяПродукция", Счета.ГотоваяПродукция);
	МассивСчетов.Вставить("ТоварыОтгруженные", Счета.ТоварыОтгруженные);
	МассивСчетов.Вставить("ОС", Счета.ОсновныеСредства);
	МассивСчетов.Вставить("НМА", Счета.НематериальныеАктивы);

	Для каждого Стр Из ТабличноеПолеОрганизации Цикл // для каждой организации
		Для каждого Сч Из МассивСчетов Цикл // по каждому счету
			Счет = Сч.Значение;
			БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
			БухИтоги.РассчитатьИтоги("Международный", "КонечныйОстатокДт,НачальныйОстатокДт,ОборотДт", "Сумма", "Счет", НачалоГода(Период), КонецГода(Период), , Счет, , , ,"Организация", Стр.Организация);

			ПрибыльНаНачало = Стр[Сч.Ключ + "ПрибыльНаНачало"];
			ПрибыльВТеченииГода = Стр[Сч.Ключ + "ПрибыльВТеченииГода"];
			ОстатокТовараНаНачало = БухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);
			ОстатокТовараНаКонец = БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);
			
			Если Сч.Ключ = "ОС" Тогда
				ПоступлениеТовараВТеченииГода = БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ЗемельныеУчастки)
					+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.Здания)
					+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.СооруженияИОборудование)
					+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.МашиныИИнструменты)
					+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.АвтотранспортныеСредства)
					+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ВложенияВЛизинговоеОборудование)
					+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ПрочиеОсновныеСредства);
			ИначеЕсли Сч.Ключ = "НМА" Тогда
				ПоступлениеТовараВТеченииГода = БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.РасходыНаРазработку)
					+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.Гудвилл)
					+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ПатентыИИныеПрава)
					+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ПрограммноеОбеспечение)
					+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ПрочиеНематериальныеАктивы);
				
			Иначе
				ПоступлениеТовараВТеченииГода = БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);
			КонецЕсли;

			Если (ОстатокТовараНаНачало + ПоступлениеТовараВТеченииГода) <> 0 Тогда
				Сумма = (ПрибыльНаНачало + ПрибыльВТеченииГода) / (ОстатокТовараНаНачало + ПоступлениеТовараВТеченииГода) * ОстатокТовараНаКонец;
				Если Сумма <> 0 Тогда
					ДобавитьПроводку(Счет, "", Счета.Служебный, "", -Сумма, "Прибыль от внутригрупповых операций по организации " + Стр.Организация + ". ");
					ДобавитьПроводку(Счета.СебестоимостьПродаж, "", Счета.Служебный, "", Сумма, "Прибыль от внутригрупповых операций по организации " + Стр.Организация + ". ");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура СтыковатьСНулем(Счет, КорСчет, Субконто1, СообщениеОНесоблюденииБаланса = "")
	Счета = ПланыСчетов.Международный;
	
	МассивОрганизаций = Новый Массив();
	Для каждого Стр Из ТабличноеПолеОрганизации Цикл
		МассивОрганизаций.Добавить(Стр.Организация);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МеждународныйОбороты.Счет,
	               |	МеждународныйОбороты.Субконто1,
	               |	МеждународныйОбороты.КорСчет,
	               |	МеждународныйОбороты.КорСубконто1 КАК Контрагент,
	               |	МеждународныйОбороты.Организация,
	               |	СобственныеКонтрагентыО.Контрагент КАК Контрагент1,
	               |	СобственныеКонтрагентыК.Объект КАК Организация1,
	               |	СУММА(МеждународныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	СУММА(МеждународныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Международный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В ИЕРАРХИИ (&Счет), &Субконто1, Организация В (&Организация), КорСчет В ИЕРАРХИИ (&КорСчет), &Контрагенты) КАК МеждународныйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыК
	               |		ПО МеждународныйОбороты.КорСубконто1 = СобственныеКонтрагентыК.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагентыО
	               |		ПО МеждународныйОбороты.Организация = СобственныеКонтрагентыО.Объект
	               |
	               |ГДЕ
	               |	СобственныеКонтрагентыК.ВидСвязи = &ВидСвязи И
	               |	СобственныеКонтрагентыО.ВидСвязи = &ВидСвязи И
	               |	СобственныеКонтрагентыК.Объект В(&Организация)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МеждународныйОбороты.Счет,
	               |	МеждународныйОбороты.Субконто1,
	               |	МеждународныйОбороты.КорСчет,
	               |	МеждународныйОбороты.КорСубконто1,
	               |	МеждународныйОбороты.Организация,
	               |	СобственныеКонтрагентыО.Контрагент,
	               |	СобственныеКонтрагентыК.Объект";
	 
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.УстановитьПараметр("ВидСвязи", Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(Период));
	Запрос.УстановитьПараметр("Контрагенты", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты);
	Запрос.УстановитьПараметр("Субконто1", Субконто1);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("КорСчет", КорСчет);
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Если ТЗРезультат.Итог("СуммаОборотДт") <> ТЗРезультат.Итог("СуммаОборотКт") Тогда
		Сообщить(СообщениеОНесоблюденииБаланса, СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТЗРезультат Цикл
		Если СтрокаТЗ.СуммаОборотДт <> 0 Тогда
			ДобавитьПроводку(СтрокаТЗ.Счет, СтрокаТЗ.Субконто1, Счета.Служебный, , -СтрокаТЗ.СуммаОборотДт);
		КонецЕсли;
		Если СтрокаТЗ.СуммаОборотКт <> 0 Тогда
			ДобавитьПроводку(Счета.Служебный, , СтрокаТЗ.Счет, СтрокаТЗ.Субконто1, -СтрокаТЗ.СуммаОборотКт);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
Процедура СтыковатьСальдо(ТЗРезультат, СчетДт, СчетКт, ДтКт)
	Для каждого СтрокаТЗ Из ТЗРезультат Цикл
		Если (СтрокаТЗ.Счет = СчетДт) и (ДтКт = "Кт") или (СтрокаТЗ.Счет = СчетКт) и (ДтКт = "Дт") Тогда
			Если СтрокаТЗ["СуммаОстаток"+ДтКт] <> 0 Тогда
				ДобавитьПроводку(СчетДт, СтрокаТЗ.Контрагент, СчетКт, СтрокаТЗ.Контрагент, СтрокаТЗ["СуммаОстаток"+ДтКт]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СтыковатьИтоги(ТЗРезультат, СчетДт, СчетКт)
	Для каждого СтрокаТЗ Из ТЗРезультат Цикл
		Если СтрокаТЗ.Счет = СчетДт Тогда
			Для каждого СтрокаТЗНов Из ТЗРезультат Цикл
				Если (СтрокаТЗНов.Счет = СчетКт) и (СтрокаТЗНов.Организация = СтрокаТЗ.Организация1) и (СтрокаТЗНов.Контрагент = СтрокаТЗ.Контрагент1) Тогда
					ДобавитьПроводку(СчетКт, СтрокаТЗ.Контрагент1, СчетДт, СтрокаТЗ.Контрагент, Мин(СтрокаТЗ.СуммаОстатокДт, СтрокаТЗНов.СуммаОстатокКт));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьПроводку(СчетДт, СубконтоДт, СчетКт, СубконтоКт, Сумма, Содержание = "")
	Если ТипЗнч(ДокументОперация) <> Тип("ДокументОбъект.ОперацияМеждународная") Тогда
		ДокументОперация = Документы.ОперацияМеждународная.СоздатьДокумент();
		ДокументОперация.Дата = РабочаяДата;
		ДокументОперация.Комментарий = "Консолидация данных. Элиминирование статей отчетности.";
		ДокументОперация.УстановитьВремя();
		ДокументОперация.УстановитьНовыйНомер("0");
		ДокументОперация.Записать();
		
		Операция = ДокументОперация.Ссылка;
	КонецЕсли;

	Движение = ДокументОперация.Движения.Международный.Добавить();
	Движение.Период = РабочаяДата;
	Движение.СчетДт = СчетДт;
	Движение.СчетКт = СчетКт;
	Движение.Сумма = Сумма;
	Движение.Содержание = Содержание + "Элиминирование статей отчетности.";
	Движение.НомерЖурнала = "К";
	
	Если ТипЗнч(СубконтоДт) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		Если не Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.СтатьиДвиженияДенежныхСредств,) = Неопределено Тогда
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоМеждународные.СтатьиДвиженияДенежныхСредств] = СубконтоДт;
		КонецЕсли;
	КонецЕсли;	
	
	Если ТипЗнч(СубконтоКт) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		Если не Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.СтатьиДвиженияДенежныхСредств,) = Неопределено Тогда
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоМеждународные.СтатьиДвиженияДенежныхСредств] = СубконтоКт;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СубконтоДт) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если не Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты,) = Неопределено Тогда
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты] = СубконтоДт;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СубконтоКт) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если не Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты,) = Неопределено Тогда
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты] = СубконтоКт;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОперация.Движения.Международный.Записать();
КонецПроцедуры