Перем мВременныеФайлы;
Перем СоответствиеВариантовПериодаПериодичностям;
Перем ПеридичностьПоПризПериодОтч;
Перем Периоды;
Перем СоответствиеКНДВидуОтчета;
Перем СоответствиеКНДПризнакуНарастающегоИтога;
Перем СдвигВМесяцахПоПериодичности;
Перем СоответствиеПериодОтчМесяцуОкончания;
Перем СоответствиеПериодОтчПериодичности;
Перем СвойстваЭлементовПодменюОтправка;
Перем ДанныеФайлаОсновногоПредставления;
Перем СоответствиеКодуИзШаблонаПериодичности;
Перем ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета;

Процедура УстановитьПериодичность(НоваяПериодичность = Неопределено)
	
	Если НоваяПериодичность <> Неопределено Тогда
		Периодичность = НоваяПериодичность;
		Период = Неопределено;
	КонецЕсли;
	ПериодыПериодичности = Периоды.НайтиСтроки(Новый Структура("Периодичность", Периодичность));
	ЭлементыФормы.Период.СписокВыбора.Очистить();
	Для Каждого ПериодПериодичности Из ПериодыПериодичности Цикл
		ЭлементыФормы.Период.СписокВыбора.Добавить(ПериодПериодичности, ПериодПериодичности.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВидОтчетаПоКНД(КНД)
	
	ИсточникОтчета = СоответствиеКНДВидуОтчета[КНД];
	Если ИсточникОтчета <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ИсточникОтчета);
	КонецЕсли;
	Возврат Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка();

КонецФункции

Функция ОпределитьОрганизациюПоИННиКПП(ИНН, КПП)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ИНН = &ИНН");
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Если КПП <> "" Тогда
		Запрос.Текст = Запрос.Текст + "
	                      |	И Организации.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

Функция ОпределитьОрганизациюПоОКПО(КодПоОКПО)
	
	ИмяРеквКодПоОКПО = "КодПоОКПО";
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("КодОКПО") <> Неопределено Тогда
		ИмяРеквКодПоОКПО = "КодОКПО";
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации." + ИмяРеквКодПоОКПО + " = &КодПоОКПО");
	Запрос.УстановитьПараметр("КодПоОКПО", КодПоОКПО);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

Функция ПроанализироватьФайлВыгрузкиФНС(ПолноеИмяФайла)
	
	// восстанавливаем из макета соответствия КНД виду отчета и признаку сдачи нарастающим итогом
	СоответствиеКНДВидуОтчета = Новый Соответствие;
	СоответствиеКНДПризнакуНарастающегоИтога = Новый Соответствие;
	МакетКНД = КонтекстЭДО.ПолучитьМакет("ОписаниеФормДляИмпорта");
	Для Инд = 1 По МакетКНД.ВысотаТаблицы Цикл
		_КНД = СокрЛП(МакетКНД.Область(Инд, 1, Инд, 1).Текст);
		_ИсточникОтчета = СокрЛП(МакетКНД.Область(Инд, 2, Инд, 2).Текст);
		_НарастающимИтогом = ?(СокрЛП(МакетКНД.Область(Инд, 3, Инд, 3).Текст) = "X", Ложь, Истина);
		СоответствиеКНДВидуОтчета.Вставить(_КНД, _ИсточникОтчета);
		СоответствиеКНДПризнакуНарастающегоИтога.Вставить(_КНД, _НарастающимИтогом);
	КонецЦикла;
	
	// инициализиуем структуру с результатами анализа
	ПараметрыИмпорта = Новый Структура;
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ПолноеИмяФайла);
	Расширение = нрег(РасширениеФайла(ПолноеИмяФайла));
	Если Расширение = "xml" Тогда
		
		// считываем показатели файла
		ОбъектЧтениеXML = Новый ЧтениеXML;
		Попытка
			ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
			ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
			ПоказателиВыгрузки = Новый Соответствие;
			Пока ОбъектЧтениеXML.Прочитать() Цикл
				Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ОбъектЧтениеXML.Имя <> "СодПерСвед" Тогда
					Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
							ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	
			ОбъектЧтениеXML.Закрыть();
		Исключение
			Сообщить("Файл """ + КороткоеИмяФайла + """ не является файлом выгрузки в формате XML!");
			Возврат Ложь;
		КонецПопытки;
		
		// определение вида отчета
		КНД = ПоказателиВыгрузки["КНД"];
		Если КНД <> Неопределено И КНД <> "" Тогда
			ВидОтчетаВыгрузки = ВидОтчетаПоКНД(КНД);
			Если ВидОтчетаВыгрузки <> Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение организации
		ИНН = ?(ПоказателиВыгрузки["ИННЮЛ"] = Неопределено, "", ПоказателиВыгрузки["ИННЮЛ"]);
		КПП = ?(ПоказателиВыгрузки["КПП"] = Неопределено, "", ПоказателиВыгрузки["КПП"]);
		Если ИНН <> "" ИЛИ КПП <> "" Тогда
			ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
			Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение вида документа
		ВидДок = ПоказателиВыгрузки["ВидДок"];
		НомКорр = ПоказателиВыгрузки["НомКорр"];
		Если ВидДок <> Неопределено И ОбщегоНазначения.ТолькоЦифрыВСтроке(ВидДок) Тогда
			ПараметрыИмпорта.Вставить("ВидДокумента", Число(ВидДок));
		ИначеЕсли НомКорр <> Неопределено И ОбщегоНазначения.ТолькоЦифрыВСтроке(НомКорр) Тогда
			ПараметрыИмпорта.Вставить("ВидДокумента", Число(НомКорр));
		КонецЕсли;
		
		// определение налогового органа
		ОшибкаОпределенияНО = Ложь;
		ИдФайл = ПоказателиВыгрузки["ИдФайл"];
		Если ИдФайл <> Неопределено Тогда
			Вхождение_1 = Найти(ИдФайл, "_");
			Если Вхождение_1 = 0 Тогда
				ОшибкаОпределенияНО = Истина;
			Иначе
				_ИдФайл = Сред(ИдФайл, Вхождение_1 + 1);
				Вхождение_2 = Найти(_ИдФайл, "_");
				Если Вхождение_2 = 0 Тогда
					ОшибкаОпределенияНО = Истина;
				Иначе
					КодИФНС = Сред(_ИдФайл, Вхождение_2 + 1, 4);
					Если СтрДлина(КодИФНС) <> 4 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(КодИФНС) Тогда
						ОшибкаОпределенияНО = Истина;
					Иначе
						НОВыгрузки = Справочники.НалоговыеОрганы.НайтиПоКоду(КодИФНС);
						Если НОВыгрузки <> Справочники.НалоговыеОрганы.ПустаяСсылка() Тогда
							ПараметрыИмпорта.Вставить("Получатель", НОВыгрузки);
						Иначе
							ОшибкаОпределенияНО = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОшибкаОпределенияНО = Истина;
		КонецЕсли;
		
		// определение периода
		ОшибкаОпределенияПериода = Ложь;
		ГодПериодОтч = ПоказателиВыгрузки["ГодПериодОтч"];
		Если ГодПериодОтч = Неопределено Тогда
			ГодПериодОтч = ПоказателиВыгрузки["ОтчетГод"];
		КонецЕсли;
		ПериодОтч = ПоказателиВыгрузки["ПериодОтч"];
		Если ГодПериодОтч = Неопределено ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ГодПериодОтч) ИЛИ (ПериодОтч <> Неопределено И НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ПериодОтч)) Тогда
			ОшибкаОпределенияПериода = Истина;
		Иначе
			Если ПериодОтч = Неопределено Тогда
				ПериодичностьВыгрузки = Перечисления.Периодичность.Год;
				ДатаНачалаПериодаОтчетаВыгрузки = НачалоГода(Дата(Число(ГодПериодОтч), 1, 1));
				ДатаОкончанияПериодаОтчетаВыгрузки = КонецГода(ДатаНачалаПериодаОтчетаВыгрузки);
			Иначе
				ПериодичностьВыгрузки = СоответствиеПериодОтчПериодичности[ПериодОтч];
				НомерМесяцаПо = СоответствиеПериодОтчМесяцуОкончания[ПериодОтч];
				НарастающимИтогом = СоответствиеКНДПризнакуНарастающегоИтога[КНД];
				Если НомерМесяцаПо = Неопределено ИЛИ НарастающимИтогом = Неопределено ИЛИ ПериодичностьВыгрузки = Неопределено Тогда
					ОшибкаОпределенияПериода = Истина;
				Иначе
					Если НарастающимИтогом Тогда
						НомерМесяцаС = 1;
					Иначе
						СдвигМесяцев = СдвигВМесяцахПоПериодичности[ПериодичностьВыгрузки];
						Если СдвигМесяцев = Неопределено Тогда
							ОшибкаОпределенияПериода = Ложь;
						Иначе
							НомерМесяцаС = НомерМесяцаПо - СдвигМесяцев + 1;
							ДатаНачалаПериодаОтчетаВыгрузки = НачалоМесяца(Дата(Число(ГодПериодОтч), НомерМесяцаС, 1));
							ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(Дата(Число(ГодПериодОтч), НомерМесяцаПо, 1));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ОшибкаОпределенияПериода Тогда
			ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
		КонецЕсли;	
		
		// инициализируем текст на форме
		ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, "windows-1251");
		ПараметрыИмпорта.Вставить("Текст", ЧтениеТекста.Прочитать());
		ЧтениеТекста.Закрыть();
		
		// инициализируем переменные, содержащие двоичные данные и имя файла
		ПараметрыИмпорта.Вставить("ИмяФайла", КороткоеИмяФайлаПоПолному(ПолноеИмяФайла));
		ПараметрыИмпорта.Вставить("ДанныеФайла", Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый СжатиеДанных(9)));
		
	ИначеЕсли Расширение = "txt" Тогда
		
		// считываем текст и закрываем файл
		ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, "cp866");
		Текст = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		// проверка количества документов
		ЧислоДокументов = СтрЧислоВхождений(Текст, Символы.ПС + "@@@" + Символы.ПС) - 1;
		Если ЧислоДокументов < 1 Тогда
			Предупреждение("Файл выгрузки должен содержать выгрузку хотя бы одного отчета!");
			Возврат Ложь;
		ИначеЕсли ЧислоДокументов > 1 Тогда
			Предупреждение("Файл выгрузки должен содержать выгрузку только одного отчета!");
			Возврат Ложь;
		КонецЕсли;
		ПоказателиВыгрузки = Новый Соответствие;
		Для Инд = 1 По СтрЧислоСтрок(Текст) Цикл
			ТекСтрока = СтрПолучитьСтроку(Текст, Инд);
			ВхождениеДвоеточия = Найти(ТекСтрока, ":");
			Если ВхождениеДвоеточия <> 0 Тогда
				ПоказателиВыгрузки.Вставить(СокрЛП(Лев(ТекСтрока, ВхождениеДвоеточия - 1)), СокрЛП(Сред(ТекСтрока, ВхождениеДвоеточия + 1)));
			КонецЕсли;
		КонецЦикла;
		
		ТипИнф					= ПоказателиВыгрузки["ТипИнф"];
		ВерсФорм				= ПоказателиВыгрузки["ВерсФорм"];
		ЭтоАлко201				= (ВерсФорм <> Неопределено И ТипИнф <> Неопределено И ВерсФорм = "2.01" И Лев(ТипИнф, 5) = "11520");
		
		// определение организации
		КПП = "";
		КППИном					= ПоказателиВыгрузки["КППИном"];
		КППОП					= ПоказателиВыгрузки["КППОП"];
		КППЮЛ					= ПоказателиВыгрузки["КППЮЛ"];
		КППОПСРП				= ПоказателиВыгрузки["КППОПСРП"];
		Если КППИном <> Неопределено И КППИном <> "" Тогда
			КПП = КППИном;
		ИначеЕсли КППОП <> Неопределено И КППОП <> "" Тогда
			КПП = КППОП;
		ИначеЕсли КППОПСРП <> Неопределено И КППОПСРП <> "" Тогда
			КПП = КППОПСРП;
		ИначеЕсли КППЮЛ <> Неопределено Тогда
			КПП = КППЮЛ;
		КонецЕсли;
		
		ИНН = "";
		ИННИО					= ПоказателиВыгрузки["ИННИО"];
		ИННФЛ					= ПоказателиВыгрузки["ИННФЛ"];
		ИННЮЛ					= ПоказателиВыгрузки["ИННЮЛ"];
		Если ИННИО <> Неопределено И ИННИО <> "" Тогда
			ИНН = ИННИО;
		ИначеЕсли ИННФЛ <> Неопределено И ИННИО <> "" Тогда
			ИНН = ИННФЛ;
		ИначеЕсли ИННЮЛ <> Неопределено И ИННЮЛ <> "" Тогда
			ИНН = ИННЮЛ;
		КонецЕсли;
		
		Если ИНН <> "" ИЛИ КПП <> "" Тогда
			ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
			Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение налогового органа
		ИдПол = ПоказателиВыгрузки["ИдПол"];
		Если ИдПол <> Неопределено Тогда
			КодНО = СокрЛП(Лев(ИдПол, 4));
			НОВыгрузки = Справочники.НалоговыеОрганы.НайтиПоКоду(КодНО);
			Если НОВыгрузки <> Справочники.НалоговыеОрганы.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("Получатель", НОВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение вида отчета
		КНД = ПоказателиВыгрузки["КНД"];
		Если КНД <> Неопределено И КНД <> "" Тогда
			ВидОтчетаВыгрузки = ВидОтчетаПоКНД(КНД);
			Если ВидОтчетаВыгрузки <> Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
			КонецЕсли;
		ИначеЕсли ТипИнф <> Неопределено И ТипИнф <> "" Тогда
			ВидОтчетаВыгрузки = ВидОтчетаПоКНД(ТипИнф);
			Если ВидОтчетаВыгрузки <> Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение периода
		ГодПериодОтч			= ПоказателиВыгрузки["ГодПериодОтч"];
		_ПризПериодОтч			= ПоказателиВыгрузки["ПризПериодОтч"];
		_ПризПеридОтч			= ПоказателиВыгрузки["ПризПеридОтч"];
		ПризПериодОтч			= ?(_ПризПериодОтч = Неопределено, _ПризПеридОтч, _ПризПериодОтч);
		НомерПериодОтч			= ПоказателиВыгрузки["НомерПериодОтч"];
		НачПериодОтч			= ПоказателиВыгрузки["НачПериодОтч"];
		КонПериодОтч			= ПоказателиВыгрузки["КонПериодОтч"];
		
		ОшибкаОпределенияПериода = Ложь;
		Если ЭтоАлко201 Тогда
			ОшибкаОпределенияПериода = Истина; // пока не обрабатываем
		ИначеЕсли НачПериодОтч <> Неопределено И КонПериодОтч <> Неопределено Тогда // это 2.01
			Если ПризПериодОтч <> "2" И ПризПериодОтч <> "3" Тогда // таких не знаем
				ОшибкаОпределенияПериода = Истина;
			Иначе
				Если ПризПериодОтч = "2" Тогда
					ПериодичностьВыгрузки = Перечисления.Периодичность.Квартал;
				ИначеЕсли ПризПериодОтч = "3" Тогда
					ПериодичностьВыгрузки = Перечисления.Периодичность.Год;
				КонецЕсли;
				ДатаНачалаПериодаОтчетаВыгрузки = НачалоДня(Дата(Число(Сред(НачПериодОтч, 7)), Число(Сред(НачПериодОтч, 4, 2)), Число(Сред(НачПериодОтч, 1, 2))));
				ДатаОкончанияПериодаОтчетаВыгрузки = КонецДня(Дата(Число(Сред(КонПериодОтч, 7)), Число(Сред(КонПериодОтч, 4, 2)), Число(Сред(КонПериодОтч, 1, 2))));
			КонецЕсли;
		ИначеЕсли ГодПериодОтч <> Неопределено Тогда // это 3.00
			ГодВыгрузки = Число(ГодПериодОтч);
			ПериодичностьВыгрузки = ПеридичностьПоПризПериодОтч[ПризПериодОтч];
			Если ПериодичностьВыгрузки = Неопределено Тогда
				ОшибкаОпределенияПериода = Истина;
			Иначе
				Если ПризПериодОтч = Неопределено ИЛИ ПризПериодОтч = "" ИЛИ ПризПериодОтч = "0"  ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ПризПериодОтч) Тогда
					ПериодичностьВыгрузки = Перечисления.Периодичность.Год;
					ДатаНачалаПериодаОтчетаВыгрузки = НачалоГода(Дата(ГодПериодОтч, 1, 1));
					ДатаОкончанияПериодаОтчетаВыгрузки = КонецГода(ДатаНачалаПериодаОтчетаВыгрузки);
				Иначе 
					ПризПериодОтчЧисло = ?(ОбщегоНазначения.ТолькоЦифрыВСтроке(ПризПериодОтч), Число(ПризПериодОтч), 1);
					Если НомерПериодОтч = Неопределено ИЛИ НомерПериодОтч = ""
						ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(НомерПериодОтч) ИЛИ ПризПериодОтчЧисло > 3 Тогда
						НомерПериодОтчЧисло = 1;
					Иначе
						НомерПериодОтчЧисло = Число(НомерПериодОтч);
					КонецЕсли;
					НомерМесяцаПо = НомерПериодОтчЧисло * ПризПериодОтчЧисло;
					НарастающимИтогом = СоответствиеКНДПризнакуНарастающегоИтога[КНД];
					Если НарастающимИтогом = Неопределено Тогда
						ОшибкаОпределенияПериода = Истина;
					ИначеЕсли НарастающимИтогом = Истина Тогда
						НомерМесяцаС = 1;
					ИначеЕсли НарастающимИтогом = Ложь Тогда
						СдвигМесяцев = СдвигВМесяцахПоПериодичности[ПериодичностьВыгрузки];
						Если СдвигМесяцев = Неопределено Тогда
							ОшибкаОпределенияПериода = Ложь;
						Иначе
							НомерМесяцаС = НомерМесяцаПо - СдвигМесяцев + 1;
						КонецЕсли;
					КонецЕсли;
					Если НЕ ОшибкаОпределенияПериода Тогда
						ДатаНачалаПериодаОтчетаВыгрузки = НачалоМесяца(Дата(ГодВыгрузки, НомерМесяцаС, 1));
						ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(Дата(ГодВыгрузки, НомерМесяцаПо, 1));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОшибкаОпределенияПериода = Истина;
		КонецЕсли;
		
		Если НЕ ОшибкаОпределенияПериода Тогда
			ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
		КонецЕсли;
		
		// определение вида документа
		ПризнакВидаДокумента	= ПоказателиВыгрузки["ПризВидДок"];
		_НомерКорректировки		= ПоказателиВыгрузки["НомерКорр"];
		ВариантОтчета			= ПоказателиВыгрузки["ВарФОтч"];
		ИдДок					= ПоказателиВыгрузки["ИдДок"];
		ОшибкаОпределенияВерсии = Ложь;
		Если ЭтоАлко201 Тогда
			Если ИдДок <> Неопределено Тогда
				НомерОтчета = Прав(ИдДок, 2);
				Если ОбщегоНазначения.ТолькоЦифрыВСтроке(НомерОтчета) Тогда
					ПараметрыИмпорта.Вставить("ВидДокумента", Число(НомерОтчета) - 1);
				Иначе
					ОшибкаОпределенияВерсии = Ложь;
				КонецЕсли;
			Иначе
				ОшибкаОпределенияВерсии = Ложь;
			КонецЕсли;
		ИначеЕсли ВариантОтчета <> Неопределено Тогда // это формы бух. отчетности 2.01
			ПараметрыИмпорта.Вставить("ВидДокумента", ?(ВариантОтчета <> "999" ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ВариантОтчета), 0, Число(ВариантОтчета) - 1));
		ИначеЕсли _НомерКорректировки <> Неопределено Тогда
			ПараметрыИмпорта.Вставить("ВидДокумента", ?(ОбщегоНазначения.ТолькоЦифрыВСтроке(_НомерКорректировки), Число(_НомерКорректировки), 0));
		КонецЕсли;
		
		// инициализируем текст на форме
		ПараметрыИмпорта.Вставить("Текст", Текст);
		
		// инициализируем переменные, содержащие двоичные данные и имя файла
		ПараметрыИмпорта.Вставить("ИмяФайла", КороткоеИмяФайлаПоПолному(ПолноеИмяФайла));
		ПараметрыИмпорта.Вставить("ДанныеФайла", Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый СжатиеДанных(9)));
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// 
	Если НЕ ЗначениеЗаполнено(ТипПолучателя) И НЕ ПараметрыИмпорта.Свойство("ТипПолучателя") Тогда
		Если ЗначениеЗаполнено(ВидОтчета) И ЗначениеЗаполнено(ВидОтчета.ТипПолучателя) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", ВидОтчета.ТипПолучателя);
		ИначеЕсли ЗначениеЗаполнено(Получатель) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", ТипПолучателяПоТипуЗначенияПолучатель(Получатель));
		Иначе
			ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФНС);
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда
		Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВидОтчета) Тогда
		ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТипПолучателя) Тогда
		ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	КонецЕсли;
	Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	
	УстановитьПериодичность();
	
	Возврат Истина;
	
КонецФункции

Функция ПроанализироватьФайлВыгрузкиФСС(ПолноеИмяФайла)
	
	// инициализируем переменные, содержащие двоичные данные и имя файла
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	
	// считываем показатели файла
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		ПоказателиВыгрузки = Новый Соответствие;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ОбъектЧтениеXML.Имя <> "СодПерСвед" Тогда
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
						ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		ОбъектЧтениеXML.Закрыть();
	Исключение
		Предупреждение("Файл """ + КороткоеИмяФайла + """ не является файлом выгрузки в формате XML!");
		Возврат Ложь;
	КонецПопытки;
	
	ПараметрыИмпорта = Новый Структура;
	
	// определение вида отчета
	ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФСС);
	
	// определение вида отчета
	ПараметрыИмпорта.Вставить("ВидОтчета", Справочники.ВидыОтправляемыхДокументов.Отчет4ФСС);
	
	// определение организации
	ИНН = ?(ПоказателиВыгрузки["INN"] = Неопределено, "", ПоказателиВыгрузки["INN"]);
	КПП = ?(ПоказателиВыгрузки["KPP"] = Неопределено, "", ПоказателиВыгрузки["KPP"]);
	Если ИНН <> "" ИЛИ КПП <> "" Тогда
		ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
		Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
			ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	// определение вида документа
	НомКорр = ПоказателиВыгрузки["NumCorr"];
	Если НомКорр <> Неопределено И ОбщегоНазначения.ТолькоЦифрыВСтроке(НомКорр) Тогда
		ПараметрыИмпорта.Вставить("ВидДокумента", Число(НомКорр));
	КонецЕсли;
	
	// определение органа ФСС
	КодПодчиненности = ПоказателиВыгрузки["KPS_NUM"];
	Если КодПодчиненности <> Неопределено Тогда
		ПараметрыИмпорта.Вставить("Получатель", Лев(КодПодчиненности,4));
	КонецЕсли;
	
	// определение периода
	ОшибкаОпределенияПериода = Ложь;
	ГодПериодОтч 	= ПоказателиВыгрузки["YEAR_NUM"];
	ПериодОтч 		= ПоказателиВыгрузки["QUART_NUM"];
	
	Если ГодПериодОтч = Неопределено ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ГодПериодОтч) 
	 ИЛИ ПериодОтч = Неопределено ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ПериодОтч) ИЛИ Число(ПериодОтч) = 0 Тогда
		ОшибкаОпределенияПериода = Истина;
	Иначе
		ДатаНачалаПериодаОтчетаВыгрузки = НачалоГода(Дата(Число(ГодПериодОтч), 1, 1));
		
		Если ПериодОтч = "03" ИЛИ ПериодОтч = "06" ИЛИ ПериодОтч = "09" ИЛИ ПериодОтч = "12" Тогда
			ПериодичностьВыгрузки = Перечисления.Периодичность.Квартал;
		Иначе
			ПериодичностьВыгрузки = Перечисления.Периодичность.Месяц;
		КонецЕсли;
		
		ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(Дата(Число(ГодПериодОтч), Число(ПериодОтч), 1));
		Если НЕ ОшибкаОпределенияПериода Тогда
			ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем текст на форме
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, "windows-1251");
	ПараметрыИмпорта.Вставить("Текст", ЧтениеТекста.Прочитать());
	ЧтениеТекста.Закрыть();
	
	ПараметрыИмпорта.Вставить("ИмяФайла", КороткоеИмяФайла);
	ПараметрыИмпорта.Вставить("ДанныеФайла", Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый СжатиеДанных(9)));
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	УстановитьПериодичность();
	
	// инициализируем хранящиеся в памяти данные файла и его имя
	мИмяФайла = ПараметрыИмпорта.ИмяФайла;
	мЭлектронноеПредставление = ПараметрыИмпорта.ДанныеФайла;
	
	// прорисовываем текст выгрузки на форме
	ПредставлениеТекст = ПараметрыИмпорта.Текст;
	
	ДатаИмпорта = ТекущаяДата();
	
	Возврат Истина;
	
КонецФункции

Функция ПроанализироватьФайлВыгрузкиФСГС(ПолноеИмяФайла)
	
	ПараметрыИмпорта = Новый Структура;
	
	// считываем показатели файла
	ПоказателиВыгрузки = Новый Соответствие;
	СчетчикСекций = 0;
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			ИмяАтрибутаЗаголовка = "";
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ОбъектЧтениеXML.Имя = "section" Тогда
					СчетчикСекций = СчетчикСекций + 1;
				КонецЕсли;
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ОбъектЧтениеXML.Имя = "name" Тогда
						ИмяАтрибутаЗаголовка = ОбъектЧтениеXML.Значение;
						Продолжить;
					КонецЕсли;
					Если ОбъектЧтениеXML.Имя = "value" Тогда
						Если ЗначениеЗаполнено(ИмяАтрибутаЗаголовка) И ПоказателиВыгрузки[ИмяАтрибутаЗаголовка] = Неопределено Тогда
							ПоказателиВыгрузки.Вставить(ИмяАтрибутаЗаголовка, ОбъектЧтениеXML.Значение);
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
						ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ОбъектЧтениеXML.Закрыть();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ПоказателиВыгрузки["code"]) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// основные показатели из файла
	КодОтчета = СокрЛП(ПоказателиВыгрузки["code"]);
	КодПоОКУД = Прав("0000000" + Лев(КодОтчета, СтрДлина(КодОтчета) - 6), 7);
	ГодОтчета = СокрЛП(ПоказателиВыгрузки["year"]);
	ПериодОтчета = СокрЛП(ПоказателиВыгрузки["period"]);
	КодПериодичности = Прав(КодОтчета, 3);
	НарастающимИтогом = Ложь;
	
	// проверка количества секций, если 0 - отчет пустой
	Если СчетчикСекций = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// заполнение таблицы соответствий кода по ОКУД, кода XML-шаблона виду отчета и другим параметрам
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("КодПоОКУД");
	ТаблицаСоответствий.Колонки.Добавить("КодОтчета");
	ТаблицаСоответствий.Колонки.Добавить("ИсточникОтчета");
	ТаблицаСоответствий.Колонки.Добавить("КодПериодичности");
	ТаблицаСоответствий.Колонки.Добавить("НарастающимИтогом");
	
	МакетФормСтатистики = КонтекстЭДО.ПолучитьМакет("ОписаниеФормДляИмпортаФСГС");
	Для Инд = 2 По МакетФормСтатистики.ВысотаТаблицы Цикл
		СтрКодПоОКУД         = СокрЛП(МакетФормСтатистики.Область(Инд, 1, Инд, 1).Текст);
		СтрКодОтчета         = СокрЛП(МакетФормСтатистики.Область(Инд, 2, Инд, 2).Текст);
		СтрИсточникОтчета    = СокрЛП(МакетФормСтатистики.Область(Инд, 3, Инд, 3).Текст);
		СтрКодПериодичности  = СокрЛП(МакетФормСтатистики.Область(Инд, 4, Инд, 4).Текст);
		СтрНарастающимИтогом = ?(СокрЛП(МакетФормСтатистики.Область(Инд, 5, Инд, 5).Текст) = "", Ложь, Истина);
		Если СтрКодПоОКУД = "" Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаСоответствий.Добавить();
		НоваяСтрока.КодПоОКУД         = Прав("0000000" + СтрКодПоОКУД, 7);
		НоваяСтрока.КодОтчета         = СтрКодОтчета;
		НоваяСтрока.ИсточникОтчета    = СтрИсточникОтчета;
		НоваяСтрока.КодПериодичности  = СтрКодПериодичности;
		НоваяСтрока.НарастающимИтогом = СтрНарастающимИтогом;
	КонецЦикла;
	
	// определение вида отчета, периодичности и признака "НарастающимИтогом"
	НайденыеСтроки = ТаблицаСоответствий.НайтиСтроки(Новый Структура("КодОтчета", КодОтчета));
	Если НайденыеСтроки.Количество() = 0 Тогда
		НайденыеСтроки = ТаблицаСоответствий.НайтиСтроки(Новый Структура("КодПоОКУД", КодПоОКУД));
	КонецЕсли;
	
	ВидОтчетаВыгрузки = Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка();
	Если НайденыеСтроки.Количество() > 0 Тогда
		ИсточникОтчета = НайденыеСтроки[0].ИсточникОтчета;
		ВидОтчетаВыгрузки = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ИсточникОтчета);
		Если ЗначениеЗаполнено(НайденыеСтроки[0].КодПериодичности) Тогда
			КодПериодичности = Прав("000" + НайденыеСтроки[0].КодПериодичности, 3);
		КонецЕсли;
		НарастающимИтогом = НайденыеСтроки[0].НарастающимИтогом;
	КонецЕсли;
	
	Если ВидОтчетаВыгрузки <> Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
		ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
	КонецЕсли;
	
	// определение организации и органа ФСГС
	КодПоОКПО = ?(ПоказателиВыгрузки["okpo"] = Неопределено, "", СокрЛП(ПоказателиВыгрузки["okpo"]));
	
	ПараметрыИмпорта.Вставить("Получатель", Справочники.ОрганыФСГС.ПустаяСсылка());
	Если КодПоОКПО <> "" Тогда
		ОрганизацияВыгрузки = ОпределитьОрганизациюПоОКПО(КодПоОКПО);
		Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
			
			ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
			
			ОрганФСГСОрганизации = КонтекстЭДО.ОпределитьОрганФСГСОрганизации(ОрганизацияВыгрузки);
			Если ОрганФСГСОрганизации <> Неопределено И ОрганФСГСОрганизации <> Справочники.ОрганыФСГС.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("Получатель", ОрганФСГСОрганизации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФСГС);
	
	// установка вида документа по умолчанию
	ПараметрыИмпорта.Вставить("ВидДокумента", 0);
	
	// определение периода
	ОшибкаОпределенияПериода = Ложь;
	
	Если (ГодОтчета = Неопределено ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ГодОтчета))
		ИЛИ (ПериодОтчета = Неопределено ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ПериодОтчета))
		ИЛИ (КодПериодичности = "" ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(КодПериодичности)) Тогда
		ОшибкаОпределенияПериода = Истина;
	Иначе
		ПериодичностьВыгрузки = СоответствиеКодуИзШаблонаПериодичности[КодПериодичности];
		Если НарастающимИтогом = Неопределено ИЛИ ПериодичностьВыгрузки = Неопределено Тогда
			ОшибкаОпределенияПериода = Истина;
		Иначе
			СдвигМесяцев = СдвигВМесяцахПоПериодичности[ПериодичностьВыгрузки];
			Если СдвигМесяцев = Неопределено Тогда
				ОшибкаОпределенияПериода = Истина;
			Иначе
				НомерПериодаОтчета = Число(ПериодОтчета);
				Если НомерПериодаОтчета = 17 Тогда  // Год
					НомерМесяцаПо = 12;
				Иначе
					Если НомерПериодаОтчета * СдвигМесяцев > 12 Тогда
						НомерМесяцаПо = Мин(НомерПериодаОтчета, 12);
					Иначе
						НомерМесяцаПо = НомерПериодаОтчета * СдвигМесяцев;
					КонецЕсли; 
				КонецЕсли;
				Если НарастающимИтогом Тогда
					НомерМесяцаС = 1;
				Иначе
					НомерМесяцаС = Макс(НомерМесяцаПо - СдвигМесяцев, 0) + 1;
				КонецЕсли; 
				ДатаНачалаПериодаОтчетаВыгрузки = НачалоМесяца(Дата(Число(ГодОтчета), НомерМесяцаС, 1));
				ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(Дата(Число(ГодОтчета), НомерМесяцаПо, 1));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОшибкаОпределенияПериода Тогда
		ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
		ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
		ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
	КонецЕсли;
	
	// инициализируем текст на форме
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, "UTF-8");

	ПараметрыИмпорта.Вставить("Текст", ЧтениеТекста.Прочитать());
	ЧтениеТекста.Закрыть();
	
	// инициализируем переменные, содержащие двоичные данные и имя файла
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	
	ПараметрыИмпорта.Вставить("ИмяФайла", КороткоеИмяФайла);
	ПараметрыИмпорта.Вставить("ДанныеФайла", Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый СжатиеДанных(9)));
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	УстановитьПериодичность();
	
	// инициализируем хранящиеся в памяти данные файла и его имя
	мИмяФайла = ПараметрыИмпорта.ИмяФайла;
	мЭлектронноеПредставление = ПараметрыИмпорта.ДанныеФайла;
	
	// прорисовываем текст выгрузки на форме
	ПредставлениеТекст = ПараметрыИмпорта.Текст;
	
	ДатаИмпорта = ТекущаяДата();
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоФайлВыгрузкиФСС(ОсновнойФайл)
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	Расширение = нрег(РасширениеФайла(ОсновнойФайл));
	
	Для Инд = 0 По 8 Цикл
		КороткоеИмяФайла = СтрЗаменить(КороткоеИмяФайла, Строка(Инд), "9");
	КонецЦикла;
	
	Возврат Расширение = "xml" И Лев(КороткоеИмяФайла, 16) = "9999999999_9999_";
	
КонецФункции

Функция ЭтоФайлВыгрузкиФСГС(ПолноеИмяФайла)
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	
	// если точек в имени файла больше одной, то файл некорректный
	Если СтрЧислоВхождений(КороткоеИмяФайла, ".") <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// определяем имя файла без расширения
	ВхождениеТочки = Найти(КороткоеИмяФайла, ".");
	Окончание = Сред(КороткоеИмяФайла, ВхождениеТочки);
	ИмяБезРасширения = Лев(КороткоеИмяФайла, ВхождениеТочки - 1);
	Если ИмяБезРасширения = "" ИЛИ СтрДлина(Окончание) < 4 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Файл выгрузки в Росстат, только *.xml
	Если НРег(Окончание) = ".xml" Тогда
		
		// считываем ключевые атрибута из файла
		ОбъектЧтениеXML = Новый ЧтениеXML;
		
		Попытка
			ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
			ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
			ПоказателиВыгрузки = Новый Соответствие;
			Пока ОбъектЧтениеXML.Прочитать() Цикл
				Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если ОбъектЧтениеXML.Имя = "title" ИЛИ ОбъектЧтениеXML.Имя = "sections" Тогда
						Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
							ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, "");
						КонецЕсли;
					КонецЕсли;
					Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
							ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	
			ОбъектЧтениеXML.Закрыть();
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
		Если ПоказателиВыгрузки["code"]     = Неопределено
		 ИЛИ ПоказателиВыгрузки["form"]     = Неопределено
		 ИЛИ ПоказателиВыгрузки["shifr"]    = Неопределено
		 ИЛИ ПоказателиВыгрузки["period"]   = Неопределено
		 ИЛИ ПоказателиВыгрузки["title"]    = Неопределено
		 ИЛИ ПоказателиВыгрузки["sections"] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПоказателиВыгрузки["year"] = Неопределено ИЛИ ПустаяСтрока(ПоказателиВыгрузки["year"]) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	Конецесли;
	
	Возврат Истина;
	
КонецФункции

Функция ТипПолучателяПоТипуЗначенияПолучатель(Получатель)
	
	ТипЗначенияПолучатель = ТипЗнч(Получатель);
	Если ТипЗначенияПолучатель = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
		Возврат Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ИначеЕсли ТипЗначенияПолучатель = Тип("СправочникСсылка.ОрганыПФР") Тогда
		Возврат Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ИначеЕсли ТипЗначенияПолучатель = Тип("СправочникСсылка.ОрганыФСГС") Тогда
		Возврат Перечисления.ТипыКонтролирующихОрганов.ФСГС;
	ИначеЕсли ТипЗначенияПолучатель = Тип("Строка") Тогда
		Возврат Перечисления.ТипыКонтролирующихОрганов.ФСС;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрИмпорта(ПараметрыИмпорта, ИмяПараметра)
	
	Результат = Неопределено;
	ПараметрыИмпорта.Свойство(ИмяПараметра, Результат);
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьЭлектронноеПредставление(ВыбранныйФайл)
	
	ОпределитьФайлВТаблицеСвойствФайлов(КороткоеИмяФайлаПоПолному(ВыбранныйФайл), ОпределитьТипФайлаПФРилиБО(ВыбранныйФайл), Новый ДвоичныеДанные(ВыбранныйФайл), Ложь);
	
КонецПроцедуры

Функция ОпределитьТипФайлаБО(ПолноеИмяФайла)
	
	// формируем вспомогательное соответствие
	СоответствиеПрефиксаТипуФайлаБухОтчетности = Новый Соответствие;
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHOTCH_", Перечисления.ТипыФайловБухОтчетности.ОсновнойФайлОтчетности);
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHPZ_", Перечисления.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей);
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHAZ_", Перечисления.ТипыФайловБухОтчетности.ПояснительнаяЗаписка);
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHZSHP_", Перечисления.ТипыФайловБухОтчетности.АудиторскоеЗаключение);
	
	// определяем короткое имя файла
	КороткоеИмяФайла = ВРЕГ(КороткоеИмяФайлаПоПолному(ПолноеИмяФайла));
	
	// подбираем префиксы
	Для Каждого Эл Из СоответствиеПрефиксаТипуФайлаБухОтчетности Цикл
		Если Лев(КороткоеИмяФайла, СтрДлина(Эл.Ключ)) = Эл.Ключ Тогда
			Возврат Эл.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьТипФайлаПФРилиБО(ПолноеИмяФайла)
	
	// пытаемся определить, является ли файл частью БО и если Да, то какой именно
	ТипФайлаБО = ОпределитьТипФайлаБО(ПолноеИмяФайла);
	Если ТипФайлаБО <> Неопределено Тогда
		Возврат ТипФайлаБО;
	КонецЕсли;
	
	// пытаемся определить, является ли файл отчетом ПФР и если Да, то каким
	ТипФайлаОтчетностиПФР = ОпределитьТипФайлаПФР(ПолноеИмяФайла);
	Если ТипФайлаОтчетностиПФР <> Неопределено Тогда
		Возврат ТипФайлаОтчетностиПФР;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗагрузитьЭлектронныеПредставления(ВыбранныеФайлы)
	
	// очищаем таблицу свойств файлов
	ИнициализироватьТаблицуСвойствФайловПриНеобходимости(Истина);
	
	// загружаем файлы последовательно
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		ЗагрузитьЭлектронноеПредставление(ВыбранныйФайл);
	КонецЦикла;
	
КонецПроцедуры

Функция ПроанализироватьИЗагрузитьФайлыВыгрузки(ВыбранныеФайлы)
	
	ФайлыОтчетов = Новый Массив;
	
	Если ВыбранныеФайлы.Количество() = 1 Тогда
		ОсновнойФайл = ВыбранныеФайлы[0];
	Иначе
		
		Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
			РасширениеВыбранногоФайла = нрег(РасширениеФайла(ВыбранныйФайл));
			Если РасширениеВыбранногоФайла = "txt" ИЛИ РасширениеВыбранногоФайла = "xml" Тогда
				ФайлыОтчетов.Добавить(ВыбранныйФайл);
			КонецЕсли;
		КонецЦикла;
		
		Если ФайлыОтчетов.Количество() = 0 Тогда
			ОсновнойФайл = Неопределено;
		Иначе
			ОсновнойФайл = ФайлыОтчетов[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОсновнойФайл = Неопределено Тогда
		Предупреждение("Среди выбранных файлов не удалось обнаружить ни одного файла с расширением ""xml"" или ""txt""!");
		Возврат Ложь;
	КонецЕсли;
	
	// если файлов отчетов 2 или более, то считаем, что это комплект ПФР
	Если ФайлыОтчетов.Количество() > 1 Тогда
		ВидОтчета = Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета;
		ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	КонецЕсли;
	
	РезультатАнализа = Истина;
	Если ЭтоФайлВыгрузкиПФР(ОсновнойФайл) Тогда
		ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиПФР(ОсновнойФайл, КороткоеИмяФайлаПоПолному(ОсновнойФайл));
	ИначеЕсли ЭтоФайлВыгрузкиФСС(ОсновнойФайл) Тогда
		ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиФСС(ОсновнойФайл);
	ИначеЕсли ЭтоФайлВыгрузкиФНС(ОсновнойФайл) Тогда
		ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиФНС(ОсновнойФайл);
	ИначеЕсли ЭтоФайлВыгрузкиФСГС(ОсновнойФайл) Тогда
		ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиФСГС(ОсновнойФайл);
	КонецЕсли;
	
	Если НЕ РезультатАнализа Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаИмпорта = ТекущаяДатаСеанса();
	
	ОтработатьИзменениеВидаОтчета();
	
	ЗагрузитьЭлектронныеПредставления(ВыбранныеФайлы);
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоФайлВыгрузкиФНС(ОсновнойФайл)
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	Расширение = нрег(РасширениеФайла(ОсновнойФайл));
	
	Если ВРЕГ(Лев(КороткоеИмяФайла, 1)) = "O" И Расширение = "txt"
	ИЛИ ВРег(Лев(КороткоеИмяФайла, 3)) = "NO_" И Расширение = "xml"
	ИЛИ ВРег(Лев(КороткоеИмяФайла, 3)) = "ON_" И Расширение = "xml"Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоФайлВыгрузкиПФР(ОсновнойФайл)
	
	ПрефиксИмениФайлаПФР = "PFR-";
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	Расширение = нрег(РасширениеФайла(ОсновнойФайл));
	
	Если ВРЕГ(Лев(КороткоеИмяФайла, СтрДлина(ПрефиксИмениФайлаПФР))) = ПрефиксИмениФайлаПФР
	И Расширение = "xml" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьВидОтчетаПФР(ДеревоXML)
	
	Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
	СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
	Если СвойстваУзла.Получить("АНКЕТА_ЗЛ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.АнкетаЗастрахованногоЛица;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_ОБ_ОБМЕНЕ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_О_ДУБЛИКАТЕ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		
		УзелСведения = УзелПачкаВходящихДокументов.СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ;
		Если ТипЗнч(УзелСведения) = Тип("ОбъектXDTO") Тогда
			УзелСведенияОсновной = УзелСведения;
		Иначе
			Если УзелСведения.Количество() > 0 Тогда
				УзелСведенияОсновной = УзелСведения.Получить(0);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если УзелСведенияОсновной.Свойства().Получить("ВидФормы") <> Неопределено
		И СокрЛП(УзелСведенияОсновной.ВидФормы) = "СПВ-1" Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СведенияОВзносахИСтраховомСтажеСПВ1;
		Иначе
			Возврат Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета;
		КонецЕсли;
		
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_ВОЗНАГРАЖДЕНИЙ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.СведенияОНачисленномЗаработкеСЗВ63;
	ИначеЕсли СвойстваУзла.Получить("ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета;
	ИначеЕсли СвойстваУзла.Получить("КОНВЕРТАЦИЯ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_СВ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_НАЧИНАЯ_С_2012_ГОДА") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ1;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_НЕ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ2;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_ВЗНОСАМ_НА_ДОПОЛНИТЕЛЬНОЕ_СОЦИАЛЬНОЕ_ОБЕСПЕЧЕНИЕ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РВ3;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_О_ДОБРОВОЛЬНОМ_ВСТУПЛЕНИИ_В_ПРАВООТНОШЕНИЯ_В_ЦЕЛЯХ_УПЛАТЫ_ДСВ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеДСВ1;
	ИначеЕсли СвойстваУзла.Получить("РЕЕСТР_ДСВ_РАБОТОДАТЕЛЬ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РеестрДСВ3;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьОрганизациюПФР(КороткоеИмяФайла, ДеревоXML)
	
	СтрКлюч = "ORG-";
	ДлинаРегистрационногоНомераПФР = 14;
	ВхождениеКлюча = Найти(ВРЕГ(КороткоеИмяФайла), СтрКлюч);
	РегистрационныйНомерПФР = СокрЛП(Сред(КороткоеИмяФайла, ВхождениеКлюча + СтрДлина(СтрКлюч), ДлинаРегистрационногоНомераПФР));
	Если СтрДлина(РегистрационныйНомерПФР) <> ДлинаРегистрационногоНомераПФР Тогда
		
		Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// ищем регистрационный номер в файле
		РегистрационныйНомерПФР = Неопределено;
		УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
		СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
		Для Каждого СвойствоУзла Из СвойстваУзла Цикл
			
			ТекУзел = УзелПачкаВходящихДокументов[СвойствоУзла.Имя];
			Если ТипЗнч(ТекУзел) <> Тип("ОбъектXDTO") Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваТекущегоУзла = ТекУзел.Свойства();
			Если СвойстваТекущегоУзла.Получить("РегистрационныйНомерПФР") <> Неопределено Тогда
				РегистрационныйНомерПФР = СокрЛП(ТекУзел.РегистрационныйНомерПФР);
			ИначеЕсли СвойстваТекущегоУзла.Получить("РегистрационныйНомер") <> Неопределено Тогда
				РегистрационныйНомерПФР = СокрЛП(ТекУзел.РегистрационныйНомер);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ищем организацию по регистрационному номеру
	Если ЗначениеЗаполнено(РегистрационныйНомерПФР) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		                      |	Организации.Ссылка
		                      |ИЗ
		                      |	Справочник.Организации КАК Организации
		                      |ГДЕ
		                      |	Организации.РегистрационныйНомерПФР = &РегистрационныйНомерПФР");
		Запрос.УстановитьПараметр("РегистрационныйНомерПФР", РегистрационныйНомерПФР);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьПериодПФР(КороткоеИмяФайла, ДеревоXML)
	
	Результат = Новый Структура;
	
	// определяем год по имени файла
	КлючВИмениФайла = "-Y-";
	ВхождениеКлюча = Найти(КороткоеИмяФайла, КлючВИмениФайла);
	Если ВхождениеКлюча <> 0 Тогда
		СтрНомерГода = Сред(КороткоеИмяФайла, ВхождениеКлюча + СтрДлина(КлючВИмениФайла), 4);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СтрНомерГода) Тогда
			Результат.Вставить("Год", Число(СтрНомерГода));
		КонецЕсли;
	КонецЕсли;
	
	Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НомерКорректировки = Неопределено;
	УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
	СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
	Для Каждого СвойствоУзла Из СвойстваУзла Цикл
		
		ТекУзел = УзелПачкаВходящихДокументов[СвойствоУзла.Имя];
		Если ТипЗнч(ТекУзел) <> Тип("ОбъектXDTO") Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваТекущегоУзла = ТекУзел.Свойства();
		Если СвойстваТекущегоУзла.Получить("ОтчетныйГод") <> Неопределено Тогда
			
			СтрОтчетныйГод = СокрЛП(ТекУзел.ОтчетныйГод);
			Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СтрОтчетныйГод) Тогда
				ОтчетныйГод = Число(СтрОтчетныйГод);
			Иначе
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 1, 1));
			Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 12, 31));
			Результат.Вставить("Периодичность", Перечисления.Периодичность.Год);
			
		ИначеЕсли СвойстваТекущегоУзла.Получить("ОтчетныйПериод") <> Неопределено Тогда
			
			УзелОтчетныйПериод = ТекУзел.ОтчетныйПериод;
			СвойстваУзлаОтчетныйПериод = УзелОтчетныйПериод.Свойства();
			Если СвойстваУзлаОтчетныйПериод.Получить("Квартал") <> Неопределено
			И СвойстваУзлаОтчетныйПериод.Получить("Год") <> Неопределено Тогда
				
				Если ОбщегоНазначения.ТолькоЦифрыВСтроке(УзелОтчетныйПериод.Квартал)
				И ОбщегоНазначения.ТолькоЦифрыВСтроке(УзелОтчетныйПериод.Год) Тогда
					
					НомерГода = Число(УзелОтчетныйПериод.Год);
					НомерКвартала = Число(УзелОтчетныйПериод.Квартал);
					ДатаНачалаКвартала = НачалоКвартала(Дата(НомерГода, НомерКвартала*3, 1));
					ДатаОкончанияКвартала = КонецКвартала(ДатаНачалаКвартала);
					
					Результат.Вставить("ДатаНачалаПериода", ДатаНачалаКвартала);
					Результат.Вставить("ДатаОкончанияПериода", ДатаОкончанияКвартала);
					Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьНомерКорректировкиПФР(ДеревоXML);
	
	Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерКорректировки = Неопределено;
	УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
	СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
	Для Каждого СвойствоУзла Из СвойстваУзла Цикл
		
		ТекУзел = УзелПачкаВходящихДокументов[СвойствоУзла.Имя];
		Если ТипЗнч(ТекУзел) <> Тип("ОбъектXDTO") Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваТекущегоУзла = ТекУзел.Свойства();
		Если СвойстваТекущегоУзла.Получить("НомерКорректировки") <> Неопределено Тогда
			НомерКорректировки = СокрЛП(ТекУзел.НомерКорректировки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НомерКорректировки;
	
КонецФункции

Функция ПроанализироватьФайлВыгрузкиПФР(ОсновнойФайл, КороткоеИмяФайла)
	
	// структура-результат
	ПараметрыИмпорта = Новый Структура;
	
	// загружаем XML в дерево
	ДеревоXML = ДеревоXMLИзФайла(ОсновнойФайл);
	
	// пытаемся определить вид отчета
	РезультатОпределения = ОпределитьВидОтчетаПФР(ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		ПараметрыИмпорта.Вставить("ВидОтчета", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить организацию
	РезультатОпределения = ОпределитьОрганизациюПФР(КороткоеИмяФайла, ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		ПараметрыИмпорта.Вставить("Организация", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить свойства периода
	РезультатОпределения = ОпределитьПериодПФР(КороткоеИмяФайла, ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		Если РезультатОпределения.Свойство("ДатаНачалаПериода") И ЗначениеЗаполнено(РезультатОпределения.ДатаНачалаПериода) Тогда
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", РезультатОпределения.ДатаНачалаПериода);
		КонецЕсли;
		Если РезультатОпределения.Свойство("ДатаОкончанияПериода") И ЗначениеЗаполнено(РезультатОпределения.ДатаОкончанияПериода) Тогда
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", РезультатОпределения.ДатаОкончанияПериода);
		КонецЕсли;
		Если РезультатОпределения.Свойство("Периодичность") И ЗначениеЗаполнено(РезультатОпределения.Периодичность) Тогда
			ПараметрыИмпорта.Вставить("Периодичность", РезультатОпределения.Периодичность);
		КонецЕсли;
		Если РезультатОпределения.Свойство("Год") И ЗначениеЗаполнено(РезультатОпределения.Год) Тогда
			ПараметрыИмпорта.Вставить("Год", РезультатОпределения.Год);
		КонецЕсли;
	КонецЕсли;
	
	// пытаемся определить версию
	РезультатОпределения = ОпределитьНомерКорректировкиПФР(ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		ПараметрыИмпорта.Вставить("ВидДокумента", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить тип получателя
	Если НЕ ЗначениеЗаполнено(ТипПолучателя) И НЕ ПараметрыИмпорта.Свойство("ТипПолучателя") Тогда
		Если ЗначениеЗаполнено(ВидОтчета) И ЗначениеЗаполнено(ВидОтчета.ТипПолучателя) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", ВидОтчета.ТипПолучателя);
		ИначеЕсли ЗначениеЗаполнено(Получатель) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", ТипПолучателяПоТипуЗначенияПолучатель(Получатель));
		Иначе
			ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ПФР);
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда
		Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВидОтчета) Тогда
		ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Если ПараметрыИмпорта.Свойство("Год") И ЗначениеЗаполнено(ПараметрыИмпорта.Год) Тогда
			ДатаНачала = Дата(ПараметрыИмпорта.Год, 1, 1);
			ДатаОкончания = Дата(ПараметрыИмпорта.Год, 12, 31);
			Периодичность = Перечисления.Периодичность.Год;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипПолучателя) Тогда
		ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	КонецЕсли;
	Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	
	УстановитьПериодичность();
	
	ДатаИмпорта = ТекущаяДатаСеанса();
	
	Возврат Истина;
	
КонецФункции

Функция ИмпортироватьФайлы()
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = "Выберите файл(ы) для импорта";
	ДиалогВыбора.МножественныйВыбор = Истина;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбора.Фильтр = "Все файлы (*.*)|*.*";
	Если ДиалогВыбора.Выбрать() Тогда
		Возврат ПроанализироватьИЗагрузитьФайлыВыгрузки(ДиалогВыбора.ВыбранныеФайлы);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		Если НЕ ИмпортироватьФайлы() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		мСвойстваФайлов = КонтекстЭДО.ИзвлечьЭлектронныеПредставленияИзХранилища(?(НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования), Ссылка, ПараметрОбъектКопирования));
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыОтправляемыхДокументов");
	ЭлементыФормы.ВидОтчета.ОграничениеТипа = ОписаниеТипа;
	ВидОтчета = ОписаниеТипа.ПривестиЗначение(ВидОтчета);
	
	УстановитьПериодичность();
	ОбновитьФорму();
	ПрорисоватьФайлы();
	
КонецПроцедуры

Функция ИмяФайлаПриложения(ТипПриложения)
	
	Если мСвойстваФайлов = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтрФайл = мСвойстваФайлов.Найти(ТипПриложения, "ТипФайлаОтчетности");
	Если СтрФайл = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрФайл.ИмяФайла;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьФорму()
	
	// прорисовываем прочие ЭУ
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыОтправляемыхДокументов") Тогда
		ТипДокумента = ВидОтчета.ТипДокумента;
	Иначе
		ТипДокумента = Неопределено;
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ЗаявлениеОВвозеТоваров Тогда
		
		ЭлементыФормы.ПанельВидДокумента.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельФайлов.ТекущаяСтраница = ЭлементыФормы.ПанельФайлов.Страницы.СтраницаПрочаяОтчетность;
		ЭлементыФормы.ПанельПриложенияКБухгалтерскойОтчетности.Свертка = РежимСверткиЭлементаУправления.Низ;
		СтрокаПрорисовкиПодменюОтправка = "Отправить, РазделительПоказатьОтправки, ЦиклыОбмена";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.БухгалтерскаяОтчетность Тогда
		
		ЭлементыФормы.ПанельВидДокумента.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельФайлов.ТекущаяСтраница = ЭлементыФормы.ПанельФайлов.Страницы.СтраницаПрочаяОтчетность;
		ЭлементыФормы.ПанельПриложенияКБухгалтерскойОтчетности.Свертка = РежимСверткиЭлементаУправления.Нет;
		СтрокаПрорисовкиПодменюОтправка = "Отправить, РазделительПоказатьОтправки, ЦиклыОбмена";
		
		// прорисовываем приложения
		ФайлПояснительнойЗаписки = ИмяФайлаПриложения(Перечисления.ТипыФайловБухОтчетности.ПояснительнаяЗаписка);
		ФайлАудиторскогоЗаключения = ИмяФайлаПриложения(Перечисления.ТипыФайловБухОтчетности.АудиторскоеЗаключение);
		ФайлЗаявленияРевизионногоСоюза = ИмяФайлаПриложения(Перечисления.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей);
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.Форма2НДФЛ Тогда
		
		ЭлементыФормы.ПанельВидДокумента.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельФайлов.ТекущаяСтраница = ЭлементыФормы.ПанельФайлов.Страницы.СтраницаПрочаяОтчетность;
		ЭлементыФормы.ПанельПриложенияКБухгалтерскойОтчетности.Свертка = РежимСверткиЭлементаУправления.Низ;
		СтрокаПрорисовкиПодменюОтправка = "Отправить, РазделительПоказатьОтправки, ЦиклыОбмена";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ПрочаяОтчетностьФНС Тогда
		
		ЭлементыФормы.ПанельВидДокумента.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельФайлов.ТекущаяСтраница = ЭлементыФормы.ПанельФайлов.Страницы.СтраницаПрочаяОтчетность;
		ЭлементыФормы.ПанельПриложенияКБухгалтерскойОтчетности.Свертка = РежимСверткиЭлементаУправления.Низ;
		СтрокаПрорисовкиПодменюОтправка = "Отправить, РазделительПоказатьОтправки, ЦиклыОбмена";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ПрочаяОтчетностьПФР Тогда
		
		ЭлементыФормы.ПанельВидДокумента.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельФайлов.ТекущаяСтраница = ЭлементыФормы.ПанельФайлов.Страницы.СтраницаПрочаяОтчетность;
		ЭлементыФормы.ПанельПриложенияКБухгалтерскойОтчетности.Свертка = РежимСверткиЭлементаУправления.Низ;
		СтрокаПрорисовкиПодменюОтправка = "Отправить, РазделительПоказатьОтправки, ЦиклыОбмена";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.КомплектОтчетностиПФР Тогда
		
		ЭлементыФормы.ПанельВидДокумента.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельФайлов.ТекущаяСтраница = ЭлементыФормы.ПанельФайлов.Страницы.СтраницаКомплектПФР;
		ЭлементыФормы.ПанельПриложенияКБухгалтерскойОтчетности.Свертка = РежимСверткиЭлементаУправления.Низ;
		СтрокаПрорисовкиПодменюОтправка = "Отправить, РазделительПоказатьОтправки, ЦиклыОбмена";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4ФСС Тогда
		
		СтрокаПрорисовкиПодменюОтправка = "Отправить, ";
		
		РеквизитыОтправки = Неопределено;
		СтатусТекущейОтправки = Неопределено;
		Если ЗначениеЗаполнено(Ссылка) Тогда
			РеквизитыОтправки = РегламентированнаяОтчетность.ПолучитьРеквизитыОтправки4ФСС(Ссылка);
			Если ЗначениеЗаполнено(РеквизитыОтправки) Тогда
				СтатусТекущейОтправки = РеквизитыОтправки.СтатусОтправки;
			КонецЕсли;
		КонецЕсли;
		
		Если СтатусТекущейОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
			СтрокаПрорисовкиПодменюОтправка = СтрокаПрорисовкиПодменюОтправка + "ПолучитьРезультат, ";	
		ИначеЕсли СтатусТекущейОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
			СтрокаПрорисовкиПодменюОтправка = СтрокаПрорисовкиПодменюОтправка + "ПоказатьРезультатНеПринят, ";	
		ИначеЕсли СтатусТекущейОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
			СтрокаПрорисовкиПодменюОтправка = СтрокаПрорисовкиПодменюОтправка + "ПоказатьРезультатСдан, ";	
		КонецЕсли;
		
		СтрокаПрорисовкиПодменюОтправка = СтрокаПрорисовкиПодменюОтправка + "ПоказатьОтправки";	
		
		ЭлементыФормы.ПанельВидДокумента.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельФайлов.ТекущаяСтраница = ЭлементыФормы.ПанельФайлов.Страницы.СтраницаПрочаяОтчетность;
		ЭлементыФормы.ПанельПриложенияКБухгалтерскойОтчетности.Свертка = РежимСверткиЭлементаУправления.Низ;
		
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ОтчетФСГС Тогда
		
		ЭлементыФормы.ПанельВидДокумента.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельФайлов.ТекущаяСтраница = ЭлементыФормы.ПанельФайлов.Страницы.СтраницаПрочаяОтчетность;
		ЭлементыФормы.ПанельПриложенияКБухгалтерскойОтчетности.Свертка = РежимСверткиЭлементаУправления.Низ;
		СтрокаПрорисовкиПодменюОтправка = "Отправить, РазделительПоказатьОтправки, ЦиклыОбмена";
		
	Иначе
		
		ЭлементыФормы.ПанельВидДокумента.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельФайлов.ТекущаяСтраница = ЭлементыФормы.ПанельФайлов.Страницы.СтраницаПрочаяОтчетность;
		ЭлементыФормы.ПанельПриложенияКБухгалтерскойОтчетности.Свертка = РежимСверткиЭлементаУправления.Низ;
		СтрокаПрорисовкиПодменюОтправка = "Отправить, РазделительПоказатьОтправки, ЦиклыОбмена";
		
	КонецЕсли;
	
	// решаем, надо ли отображать пункт "Проверить в Интернете"
	УчетнаяЗаписьОрганизации = КонтекстЭДО.УчетнаяЗаписьОрганизации(Организация);
	Если ЗначениеЗаполнено(УчетнаяЗаписьОрганизации)
	И УчетнаяЗаписьОрганизации.СпецоператорСвязи = Перечисления.СпецоператорыСвязи.Такском
	И УчетнаяЗаписьОрганизации.ИспользоватьСервисОнлайнПроверкиОтчетов 
	И ТипДокумента <> Перечисления.ТипыОтправляемыхДокументов.ОтчетФСГС
	И ТипДокумента <> Перечисления.ТипыОтправляемыхДокументов.Отчет4ФСС Тогда
		СтрокаПрорисовкиПодменюОтправка = "Проверить, " + СтрокаПрорисовкиПодменюОтправка;
	КонецЕсли;
	
	ПрорисоватьПодменюОтправка(СтрокаПрорисовкиПодменюОтправка);
	
	// ЭУ периода
	Год		= Год(ДатаНачала);
	Период	= ОпределитьПериод();
	
	// ЭУ корректировки
	ЭлементыФормы.НомерКорректировки.Доступность = (Версия <> 0);
	Если Версия = 0 Тогда
		ВидДокумента = 0;
		ЭлементыФормы.НомерКорректировки.Доступность = Ложь;
	Иначе
		ВидДокумента = 1;
		НомерКорректировки = Версия;
		ЭлементыФормы.НомерКорректировки.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция РасширениеФайла(стрИмяФайла)
	
	СтрДлинаИмяФайла = СтрДлина(стрИмяФайла);
	Для Инд = 1 По СтрДлинаИмяФайла Цикл
		ТекущийИндекс = СтрДлинаИмяФайла - Инд + 1;
		Если Сред(стрИмяФайла, ТекущийИндекс, 1) = "." Тогда
			Возврат Сред(стрИмяФайла, ТекущийИндекс + 1);
		КонецЕсли;
	КонецЦикла;
	Возврат "";
	
КонецФункции

Функция ПолучитьОсновнойФайл()
	
	// пробуем найти основной файл бух. отчетности
	ОсновнойФайлБухОтчетности = мСвойстваФайлов.Найти(Перечисления.ТипыФайловБухОтчетности.ОсновнойФайлОтчетности, "ТипФайлаОтчетности");
	Если ОсновнойФайлБухОтчетности <> Неопределено Тогда
		Возврат ОсновнойФайлБухОтчетности;
	КонецЕсли;
	
	// находим первый файл с расширением xml или txt
	ОсновнойФайл = Неопределено;
	Для Каждого Стр Из мСвойстваФайлов Цикл
		нрегРасширениеФайла = нрег(РасширениеФайла(стр.ИмяФайла));
		Если нрегРасширениеФайла = "txt" ИЛИ нрегРасширениеФайла = "xml" Тогда
			ЭтоВыгрузкаВXML = (нрегРасширениеФайла = "xml");
			ОсновнойФайл = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОсновнойФайл;
	
КонецФункции

Функция ПолучитьДвоичныеДанные(ДвоичныеДанные)
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат КонтекстЭДО.ПолучитьМакет("ПустыеДвоичныеДанные");
	Иначе
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
КонецФункции

Процедура ПрорисоватьФайлы()
	
	// определяем, какой файл следует прорисовать
	Если мСвойстваФайлов = Неопределено ИЛИ мСвойстваФайлов.Количество() = 0 Тогда
		ЭтоВыгрузкаВXML = Ложь;
		ИмяФайла = "";
		ПредставлениеТекст = "";
		ФайлыКомплекта.Очистить();
	Иначе
		
		//////////////////////////////////////////////////////////////////////////////
		// Прорисовка одиночного электронного представления
		
		Если мСвойстваФайлов.Количество() = 1 Тогда
			ОсновнойФайл = мСвойстваФайлов[0];
		Иначе
			ОсновнойФайл = ПолучитьОсновнойФайл();
		КонецЕсли;
		
		// записываем данные основного файла во временный каталог
		Если ОсновнойФайл <> Неопределено Тогда
			
			ИмяФайла = ОсновнойФайл.ИмяФайла;
			
			ФайлОсновногоПредставления = ПолучитьИмяВременногоФайла("xml");
			мВременныеФайлы.Добавить(ФайлОсновногоПредставления);
			ПолучитьДвоичныеДанные(ОсновнойФайл.Данные).Записать(ФайлОсновногоПредставления);
			ДанныеФайлаОсновногоПредставления = ОсновнойФайл.Данные;
			
			ЭтоВыгрузкаВXML = (нрег(РасширениеФайла(ИмяФайла)) = "xml");
			Если ЭтоВыгрузкаВXML Тогда
				ЭлементыФормы.ПанельПредставление.ТекущаяСтраница = ЭлементыФормы.ПанельПредставление.Страницы.СтраницаXML;
				ЭлементыФормы.ПредставлениеXML.Перейти(ФайлОсновногоПредставления);
			Иначе
				ЭлементыФормы.ПанельПредставление.ТекущаяСтраница = ЭлементыФормы.ПанельПредставление.Страницы.СтраницаТекст;
				ПредставлениеТекст = КонтекстЭДО.ПрочитатьТекстИзФайла(ФайлОсновногоПредставления, "cp866");
			КонецЕсли;
			
		Иначе
			ДанныеФайлаОсновногоПредставления = Неопределено;
			ЭлементыФормы.ПанельПредставление.ТекущаяСтраница = ЭлементыФормы.ПанельПредставление.Страницы.СтраницаТекст;
			ИмяФайла = "";
			ПредставлениеТекст = "";
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// Прорисовка комплекта
		
		ТекДанные = ЭлементыФормы.ФайлыКомплекта.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ИмяФайлаТекДанные = ТекДанные.Имя;
		КонецЕсли;
		
		ФайлыКомплекта.Очистить();
		Для Каждого Стр Из мСвойстваФайлов Цикл
			НовСтр = ФайлыКомплекта.Добавить();
			НовСтр.Имя = Стр.ИмяФайла;
			НовСтр.Тип = Стр.ТипФайлаОтчетности;
			НовСтр.Данные = Стр.Данные;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИмяФайлаТекДанные) Тогда
			ТекДанные = ФайлыКомплекта.Найти(ИмяФайлаТекДанные, "Имя");
			Если ТекДанные <> Неопределено Тогда
				ЭлементыФормы.ФайлыКомплекта.ТекущаяСтрока = ТекДанные;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Состояние("Удаление временных файлов...");
	Для Каждого ИмяВременногоФайлаВыгрузкиВXML Из мВременныеФайлы Цикл
		ОбъектФайл = Новый Файл(ИмяВременногоФайлаВыгрузкиВXML);
		Если ОбъектФайл.Существует() Тогда
			Попытка
				УдалитьФайлы(ИмяВременногоФайлаВыгрузкиВXML);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьПериод()
	
	МесяцС = Месяц(ДатаНачала);
	МесяцПо = Месяц(ДатаОкончания);
	РезультатПоиска = Периоды.НайтиСтроки(Новый Структура("МесяцНачалаПериода, МесяцОкончанияПериода, Периодичность", МесяцС, МесяцПо, Периодичность));
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатПоиска[0];
	КонецЕсли;
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	// инициализируем реквизит Версия по реквизитам формы
	Если ЭлементыФормы.ПанельВидДокумента.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
		Версия = ВидДокумента * НомерКорректировки;
	Иначе
		Версия = 0;
	КонецЕсли;
	
	Если ВидОтчета.ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.КомплектОтчетностиПФР Тогда
		
		ДублирующиесяИменаФайлов = Новый Массив;
		Для Каждого Стр Из ФайлыКомплекта Цикл
			
			// проверяем типы файлов комплекта ПФР
			Если НЕ ЗначениеЗаполнено(Стр.Тип) Тогда
				НомерСтроки = ФайлыКомплекта.Индекс(Стр) + 1;
				Сообщить("В строке " + НомерСтроки + " таблицы файлов комплекта не задан тип.", СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
			
			// проверяем на наличие повторяющихся имен файлов
			Если ФайлыКомплекта.НайтиСтроки(Новый Структура("Имя", Стр.Имя)).Количество() > 1 Тогда
				Если ДублирующиесяИменаФайлов.Найти(Стр.Имя) = Неопределено Тогда
					ДублирующиесяИменаФайлов.Добавить(Стр.Имя);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДублирующиесяИменаФайлов.Количество() > 0 Тогда
			Сообщить("В таблице файлов комплекта имеются файлы с дублирующимися именами:", СтатусСообщения.Важное);
			Для Каждого Стр Из ДублирующиесяИменаФайлов Цикл
				Сообщить("- " + Стр, СтатусСообщения.Важное);
			КонецЦикла;
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// чистим файлы, если это не комплект ПФР
		Если ЭлементыФормы.ПанельФайлов.ТекущаяСтраница = ЭлементыФормы.ПанельФайлов.Страницы.СтраницаПрочаяОтчетность Тогда
			
			Если ВидОтчета.ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.БухгалтерскаяОтчетность Тогда
				
				// очищаем таблицу от файлов, не являющихся приложениями к БО
				СтрФайлыКУдалению = Новый Массив;
				Для Каждого СтрФайл Из мСвойстваФайлов Цикл
					Если СтрФайл.ТипФайлаОтчетности <> Перечисления.ТипыФайловБухОтчетности.АудиторскоеЗаключение
					И СтрФайл.ТипФайлаОтчетности <> Перечисления.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей
					И СтрФайл.ТипФайлаОтчетности <> Перечисления.ТипыФайловБухОтчетности.ПояснительнаяЗаписка Тогда
						СтрФайлыКУдалению.Добавить(СтрФайл);
					Конецесли;
				КонецЦикла;
				
				Для Каждого СтрФайлКУдалению Из СтрФайлыКУдалению Цикл
					мСвойстваФайлов.Удалить(СтрФайлКУдалению);
				КонецЦикла;
				
				// добавляем основной файл
				ОпределитьНовыйФайлВТаблицеСвойствФайлов(ИмяФайла, Перечисления.ТипыФайловБухОтчетности.ОсновнойФайлОтчетности, ДанныеФайлаОсновногоПредставления);
				
			Иначе
				мСвойстваФайлов.Очистить();
				ОпределитьНовыйФайлВТаблицеСвойствФайлов(ИмяФайла, Неопределено, ДанныеФайлаОсновногоПредставления);
			КонецЕсли;
			
		КонецЕсли;
		
		// инициализируем наименование, если оно пустое
		Если ПустаяСтрока(Наименование) ИЛИ НаименованиеБылоНазначеноАвтоматически() Тогда
			Наименование = СгенерироватьНаименование(ЭтотОбъект);
		КонецЕсли;
		
		// 
		Если ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР И ВидОтчета.ТипДокумента <> Перечисления.ТипыОтправляемыхДокументов.КомплектОтчетностиПФР Тогда
			ТипФайлаОтчетностиПФР = ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета[ВидОтчета];
			Для Каждого СтрФайл Из мСвойстваФайлов Цикл
				Если НЕ ЗначениеЗаполнено(СтрФайл.ТипФайлаОтчетности) Тогда
					СтрФайл.ТипФайлаОтчетности = ТипФайлаОтчетностиПФР;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НаименованиеБылоНазначеноАвтоматически()
	
	Возврат (СокрЛП(СгенерироватьНаименование(Ссылка)) = СокрЛП(Наименование));
	
КонецФункции

Функция ДеревоXMLИзФайла(ПутьКФайлу)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
		Фабрика = Новый ФабрикаXDTO;
		ДеревоXML = Фабрика.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		Возврат ДеревоXML;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СформироватьСтрокуПредставленияФайлов(КоличествоФайлов)
	
	ТекстФайлов = СтрЗаменить(ЧислоПрописью(КоличествоФайлов, "НП=Истина, НД=Ложь", "файл, файла, файлов, м, , , , ,0"),
								ЧислоПрописью(КоличествоФайлов, "НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
								"");
	
	Возврат Формат(КоличествоФайлов, "НГ=") + " " + ТекстФайлов;
	
КонецФункции

Функция СгенерироватьНаименование(Источник)
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		ТаблицаСвойствФайловИсточника = КонтекстЭДО.ИзвлечьЭлектронныеПредставленияИзХранилища(Источник);
	Иначе
		ТаблицаСвойствФайловИсточника = Источник.мСвойстваФайлов;
	КонецЕсли;
	
	Если ТаблицаСвойствФайловИсточника = Неопределено ИЛИ ТаблицаСвойствФайловИсточника.Количество() = 0 Тогда
		Возврат "";
	ИначеЕсли ТаблицаСвойствФайловИсточника.Количество() = 1 Тогда
		Возврат ТаблицаСвойствФайловИсточника[0].ИмяФайла;
	Иначе
		Если Источник.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета Тогда
			Возврат Строка(Источник.ВидОтчета) + " (" + СформироватьСтрокуПредставленияФайлов(ТаблицаСвойствФайловИсточника.Количество()) + ")";
		Иначе
			Возврат СформироватьСтрокуПредставленияФайлов(ТаблицаСвойствФайловИсточника.Количество());
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)
	
	ПриИзмененииВерсии();
	
КонецПроцедуры

Процедура ПриИзмененииВерсии()
	
	Версия = ВидДокумента * НомерКорректировки;
	ОбновитьФорму();
	
КонецПроцедуры

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.Значение = 0;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПериодичностьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.Периодичность.Месяц);
	СписокВыбора.Добавить(Перечисления.Периодичность.Квартал);
	Если Метаданные.Перечисления.Периодичность.ЗначенияПеречисления.Найти("Полугодие") <> Неопределено Тогда
		СписокВыбора.Добавить(Перечисления.Периодичность.Полугодие);
	КонецЕсли;
	СписокВыбора.Добавить(Перечисления.Периодичность.Год);
	
	РезультатВыбора = ВыбратьИзСписка(СписокВыбора, , СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора <> Неопределено Тогда
		УстановитьПериодичность(РезультатВыбора.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииВерсии();
	
КонецПроцедуры

Процедура ПериодичностьОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьПериодичность(Элемент.Значение);
	
КонецПроцедуры

Процедура ПериодПриИзменении(Элемент)
	
	ПриИзмененииЭлементовПериода();
	
КонецПроцедуры

Процедура ГодПриИзменении(Элемент)
	
	ПриИзмененииЭлементовПериода();
	
КонецПроцедуры

Процедура ПриИзмененииЭлементовПериода()
	
	ПериодСтрокаТЗ = Период;
	Если НЕ ЗначениеЗаполнено(ПериодСтрокаТЗ) Тогда
		ПустаяДата = '00010101000000';
		ДатаНачала = ПустаяДата;
		ДатаОкончания = ПустаяДата;
	Иначе
		ДатаНачала = НачалоМесяца(Дата(Год, ПериодСтрокаТЗ.МесяцНачалаПериода, 1));
		ДатаОкончания = КонецМесяца(Дата(Год, ПериодСтрокаТЗ.МесяцОкончанияПериода, 1));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОтправить(Кнопка)
	
	Если Модифицированность и Вопрос("Для продолжения необходимо сохранить введеную информацию." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Попытка
		РезультатЗаписи = ЗаписатьВФорме();
	Исключение
		РезультатЗаписи = Ложь;
	КонецПопытки;
	Если НЕ РезультатЗаписи Тогда
		Предупреждение("Во время сохранения произошли ошибки! Продолжение невозможно.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОтчета) тогда
		Предупреждение("Не выбран вид отчета!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипПолучателя) Тогда
		Предупреждение("Не выбран тип получателя!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыОтправляемыхДокументов") Тогда
		ТипДокумента = ВидОтчета.ТипДокумента;
	Иначе
		ТипДокумента = Неопределено;
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.БухгалтерскаяОтчетность
	ИЛИ ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ПрочаяОтчетностьФНС Тогда
		КонтекстЭДО.ОтправкаРегламентированногоОтчетаВФНС534(Ссылка);
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ЗаявлениеОВвозеТоваров Тогда
		КонтекстЭДО.ОтправкаРегламентированногоОтчетаВФНС534(Ссылка);
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.Форма2НДФЛ Тогда
		КонтекстЭДО.ОтправкаРегламентированногоОтчетаВФНС534(Ссылка);
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ПрочаяОтчетностьПФР
	ИЛИ ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.КомплектОтчетностиПФР Тогда
		КонтекстЭДО.ОтправкаРегламентированногоОтчетаВПФР(Ссылка);
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.Отчет4ФСС Тогда
		РегламентированнаяОтчетность.ОтправкаОбъектаВФСС(Ссылка);
	ИначеЕсли ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ОтчетФСГС Тогда
		КонтекстЭДО.ОтправкаРегламентированногоОтчетаВФСГС(Ссылка);
	Иначе
		Предупреждение("Не удалось определить тип документа!");
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Модифицированность = ЭтоНовый();
	
КонецПроцедуры

Процедура ДействияФормыЦиклыОбмена(Кнопка)
	
	Если ЭтоНовый() Тогда
		Предупреждение("Элемент не записан!");
		Возврат;
	КонецЕсли;
	
	КонтекстЭДО.ПолучитьФорму("УправлениеОбменом").Открыть();
	
	Если ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
	    ИмяСобытия = "Показать циклы обмена отчета ПФР";
	ИначеЕсли ВидОтчета.ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ЗаявлениеОВвозеТоваров Тогда
		ИмяСобытия = "Показать циклы обмена заявления";
	ИначеЕсли ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
		ИмяСобытия = "Показать циклы обмена с Росстатом";
	Иначе
		ИмяСобытия = "Показать циклы обмена";
	КонецЕсли;
	
	Оповестить(ИмяСобытия, Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыПоказатьРезультат(Кнопка)
	
	РеквизитыОтправки = РегламентированнаяОтчетность.ПолучитьРеквизитыОтправки4ФСС(Ссылка, Истина);
	
	Если РеквизитыОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаголовокПротокола = "Протокол обработки";
	РегламентированнаяОтчетность.ПоказатьПротоколОбработки(РеквизитыОтправки.Протокол.Получить(), ЗаголовокПротокола);
	
КонецПроцедуры

Процедура ДействияФормыПолучитьРезультат(Кнопка)
	
	Если РегламентированнаяОтчетность.ОбновитьРезультатОтправки4ФСС(Ссылка) Тогда
		РеквизитыОтправки = РегламентированнаяОтчетность.ПолучитьРеквизитыОтправки4ФСС(Ссылка, Истина);
		
		Если РеквизитыОтправки = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		ЗаголовокПротокола = "Протокол обработки";
		РегламентированнаяОтчетность.ПоказатьПротоколОбработки(РеквизитыОтправки.Протокол.Получить(), ЗаголовокПротокола);
	КонецЕсли;
	
	ОбновитьФорму();

КонецПроцедуры

Процедура ДействияФормыПоказатьОтправки(Кнопка)
	
	РегламентированнаяОтчетность.ПоказатьОтправки4ФСС(Ссылка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ МАШИНОЧИТАЕМЫХ ФОРМ ОТЧЕТА
//

Процедура ОсновныеДействияФормыПросмотр(Кнопка)
	
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыОтправляемыхДокументов") Тогда
		ТипДокумента = ВидОтчета.ТипДокумента;
		Если ТипДокумента <> Перечисления.ТипыОтправляемыхДокументов.БухгалтерскаяОтчетность
		И ТипДокумента <> Перечисления.ТипыОтправляемыхДокументов.ПрочаяОтчетностьФНС
		И ТипДокумента <> Перечисления.ТипыОтправляемыхДокументов.Форма2НДФЛ Тогда
			Предупреждение("Функция поддерживается только для форм бухгалетрской и налоговой отчетности.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мСвойстваФайлов = Неопределено Тогда
		Предупреждение("Электронное представление не определено!");
		Возврат;
	КонецЕсли;
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	Попытка
		мСвойстваФайлов[0].Данные.Записать(ВремФайл);
	Исключение
		Предупреждение("Не удалось выгрузить электронное представление отчета во временный файл!" + Символы.ПС + Символы.ПС + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// извлекаем параметры сформированного файла выгрузки
	СтруктураПараметров = СформироватьСтруктуруПараметровФайлаВыгрузки(ВремФайл);
	КаталогВремФайлов = КаталогВременныхФайлов();
	КаталогВремФайлов = ?(Прав(КаталогВремФайлов, 1) = "\", КаталогВремФайлов, КаталогВремФайлов + "\");
	ВремКаталог = КаталогВремФайлов + Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(ВремКаталог);
	
	// пытаемся создать отчет заданного вида
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		ИсточникОтчета = ?(ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыОтправляемыхДокументов"), ВидОтчета.Источник, ВидОтчета.ИсточникОтчета);
		Если ИсточникОтчета <> Неопределено Тогда
			ОбъектОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// выгружаем во временный каталог шаблоны печати, соответствующие сформированному файлу выгрузки
	ВыгрузитьШаблоныПечатиВКаталог(ОбъектОтчет, ВремКаталог, СтруктураПараметров["КНД"], ?(СтруктураПараметров["ЭтоXML"], СтруктураПараметров["ВерсФорм"], СтруктураПараметров["ВерФОтч"]));
	
	// пытаемся создать объект для формирования машиночитаемой формы
	ТаксДокПринт = Неопределено;
	Попытка
		ТаксДокПринт = Новый COMОбъект("TAXDOCPrt.TAXDOCPrint");
	Исключение
		// если не удалось создать объект, то спрашиваем у пользователя, хочет ли он установить компоненту
		Если Вопрос("Для формирования машиночитаемой формы необходимо установить в системе вспомогательную компоненту.
					|Установить компоненту сейчас?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Иначе
			// если не удалось создать объект и пользователь не против, то запускаем установку компоненты
			Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина) Тогда
				Предупреждение("Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.");
			Иначе
				ТаксДокПринт = Новый COMОбъект("TAXDOCPrt.TAXDOCPrint");
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
		Исключение
			ОбработатьОшибкуМодуляПечати();
			ТаксДокПринт = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ТаксДокПринт = Неопределено;
	УдалитьВременныйФайлИлиКаталог(ВремКаталог);
	УдалитьВременныйФайлИлиКаталог(ВремФайл);
	
КонецПроцедуры

Процедура ОбработатьОшибкуМодуляПечати()
	
	ОписаниеОшибки = СокрЛП(ОписаниеОшибки());
	КодОшибки = Сред(ОписаниеОшибки, Найти(ОписаниеОшибки, "0x"), 10);
	
	ТекстПредупреждения = "";
	Если КодОшибки = "0x80040004" ИЛИ КодОшибки = "0x80040005" Тогда
		ТекстПредупреждения = "Не удалось установить параметр печати!";
	ИначеЕсли КодОшибки = "0x80040001" Тогда
		ТекстПредупреждения = "При попытке печати в компоненте печати возникла неизвестная ошибка!";
	ИначеЕсли КодОшибки = "0x80040032" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось найти файл выгрузки отчета!";
	ИначеЕсли КодОшибки = "0x80040033" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось получить доступ к файлу выгрузки отчета!";
	ИначеЕсли КодОшибки = "0x8004000A" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать формат файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004000B" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать формат файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004000F" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать версию формата выгрузки из текста выгрузки!";
	ИначеЕсли КодОшибки = "0x80040010" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать форму по КНД в файле выгрузки!";
	ИначеЕсли КодОшибки = "0x80040014" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось сформировать машиночитаемую форму по причине некорректного файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004003C" Тогда
		Если Вопрос("Отсутствует шаблон для формирования машиночитаемой формы!
						|Возможно, необходимо зарегистрировать в информационной базе внешний шаблон.
						|Показать список зарегистрированных шаблонов?",
						 РежимДиалогаВопрос.ДаНет
						,
						,
						, "Ошибка при формировании машиночитаемой формы") = КодВозвратаДиалога.Да Тогда
			РегистрыСведений.ШаблоныПечатиМашиночитаемыхФорм.ПолучитьФормуСписка().Открыть();
		КонецЕсли;
		Возврат;
	ИначеЕсли КодОшибки = "0x80040046" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось найти каталог с шаблонами для печати!";
	ИначеЕсли КодОшибки = "0x80050035" Тогда
		ТекстПредупреждения = "Не найдена одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll)!";
	ИначеЕсли КодОшибки = "0x800501C5" Тогда
		ТекстПредупреждения = "Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), подменена или устарела!";
	ИначеЕсли КодОшибки = "0x80050030" Тогда
		ТекстПредупреждения = "Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), повреждена!";
	ИначеЕсли КодОшибки = "0x80040064" Тогда // печать прервана
		Возврат;
	ИначеЕсли КодОшибки = "0x80040001" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось найти каталог с шаблонами для печати!";
	Иначе
		ТекстПредупреждения = ОписаниеОшибки;
	КонецЕсли;

	ТекстПредупреждения = ТекстПредупреждения + ?(ПустаяСтрока(ТекстПредупреждения), "", Символы.ПС + Символы.ПС) +
							"Возможно, необходимо переустановить компоненту или вспомогательные библиотеки, используемые ей.
							|Хотите переустановить компоненту сейчас?";
	Если Вопрос(ТекстПредупреждения,
				РежимДиалогаВопрос.ДаНет,
				,
				,
				"Ошибка при формировании машиночитаемой формы") = КодВозвратаДиалога.Да Тогда
		Если Вопрос("Сейчас будет запущена программа установки компоненты печати.
						|Возможно, в ходе установки потребуется завершение сеанса работы ""1С:Предприятие"".
						|Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			УстановитьКомпонентуПечатиМашиночитаемыхФорм(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива)
	
	Попытка
		УдалитьФайлы(ВремФайлДистрибутива);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция УстановитьКомпонентуПечатиМашиночитаемыхФорм(ЖдатьЗавершения = Истина)
	
	МетаданныеМакета = Метаданные.Обработки.ОбщиеОбъектыРегламентированнойОтчетности.Макеты.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	
	// сохраняем дистрибутив во временный файл с расширением = исходное имя файла дистрибутива
	ВремФайлДистрибутива = ПолучитьИмяВременногоФайла(МетаданныеМакета.Синоним);
	ДвоичныеДанныеДистрибутива = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьМакет(МетаданныеМакета.Имя);
	Попытка
		ДвоичныеДанныеДистрибутива.Записать(ВремФайлДистрибутива);
	Исключение
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Предупреждение("Не удалось сохранить дистрибутив компоненты печати машиночитаемых форм во временный файл!" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	// запускаем инсталляцию
	Попытка
		ЗапуститьПриложение(ВремФайлДистрибутива, , ЖдатьЗавершения);
	Исключение
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Предупреждение("При попытке установки компоненты печати машиночитаемых форм произошла ошибка!" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	// возвращаем признак
	Если ЖдатьЗавершения Тогда
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Возврат КомпонентаПечатиМашиночитаемыхФормДоступна();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьВременныйФайлИлиКаталог(Объект)
	
	Попытка
		УдалитьФайлы(Объект);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ВыгрузитьШаблоныПечатиВКаталог(Объект, ВремКаталог, Знач КНД = Неопределено, Знач ВерсияФорматаВыгрузки = Неопределено)
	
	ТочныеПараметрыШаблонаЗаданы = (ЗначениеЗаполнено(КНД) И ЗначениеЗаполнено(ВерсияФорматаВыгрузки));
	
	// если точные параметры заданы, то сначала пытаемся извлечь внутренний шаблон
	КоличествоВыгруженныхШаблонов = 0;
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		ИспользуемыйШаблон = Неопределено;
		Пока СтрДлина(ВерсияФорматаВыгрузки) < 7 Цикл
			ВерсияФорматаВыгрузки = ВерсияФорматаВыгрузки + "0";
		КонецЦикла;
		ПрефиксИмениШаблона = СокрЛП(КНД + "_" + ВерсияФорматаВыгрузки);
		ПрефиксИмениМакетаШаблона = "МБ_" + СтрЗаменить(ПрефиксИмениШаблона, ".", "_");
	Иначе
		ПрефиксИмениМакетаШаблона = "МБ_";
	КонецЕсли;
	
	Если Объект <> Неопределено Тогда
		Попытка
			МакетыОтчета = Объект.ПолучитьФорму().Метаданные().Макеты;
			Для Каждого МакетОтчета Из МакетыОтчета Цикл
				Если МакетОтчета.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные
				И Лев(нрег(МакетОтчета.Имя), СтрДлина(ПрефиксИмениМакетаШаблона)) = нрег(ПрефиксИмениМакетаШаблона) Тогда
					СинонимМакета = СокрЛП(МакетОтчета.Синоним);
					ВхождениеПробела = Найти(СинонимМакета, " ");
					ИмяФайлаШаблона = ?(ВхождениеПробела = 0, СинонимМакета, Лев(СинонимМакета, СтрДлина(ВхождениеПробела - 1)));
					Попытка
						Объект.ПолучитьМакет(МакетОтчета.Имя).Записать(ВремКаталог + ИмяФайлаШаблона);
						КоличествоВыгруженныхШаблонов = КоличествоВыгруженныхШаблонов + 1;
					Исключение
						Сообщить("Не удалось выгрузить шаблон машиночитаемой формы """ + ИмяФайлаШаблона + """ во временный каталог!" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// выгружаем внешние шаблоны
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		РезультатЗапроса = ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм(ПрефиксИмениШаблона + "%");
		Если КоличествоВыгруженныхШаблонов = 0 И РезультатЗапроса.Пустой() Тогда
			РезультатЗапроса = ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм();
		КонецЕсли;
	Иначе
		РезультатЗапроса = ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм();
	КонецЕсли;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				Выборка.Шаблон.Получить().Записать(ВремКаталог + Выборка.ИмяФайлаШаблона);
			Исключение
				Сообщить("Не удалось выгрузить шаблон машиночитаемой формы """ + Выборка.ИмяФайлаШаблона + """ во временный каталог!" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм(ИмяФайлаШаблона = Неопределено)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона,
	                      |	ШаблоныПечатиМашиночитаемыхФорм.Шаблон
	                      |ИЗ
	                      |	РегистрСведений.ШаблоныПечатиМашиночитаемыхФорм КАК ШаблоныПечатиМашиночитаемыхФорм");
	Если ИмяФайлаШаблона <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
						  |ГДЕ
						  |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона ПОДОБНО &ИмяФайлаШаблона
						  |УПОРЯДОЧИТЬ ПО
						  |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона УБЫВ";
		Запрос.УстановитьПараметр("ИмяФайлаШаблона", ИмяФайлаШаблона);
	КонецЕсли;
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьСтруктуруПараметровФайлаВыгрузки(ФайлВыгрузки)

	ПоказателиВыгрузки = Новый Соответствие;
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ОбъектЧтениеXML.Имя <> "СодПерСвед" Тогда
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		ОбъектЧтениеXML.Закрыть();
		ПоказателиВыгрузки.Вставить("ЭтоXML", Истина);
	Исключение
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ФайлВыгрузки, "cp866");
		ТекСтр = Текст.ПрочитатьСтроку();
		Пока ТекСтр <> Неопределено Цикл
			ТекСтр = СокрЛП(ТекСтр);
			ВхождениеДвоеточия = Найти(ТекСтр, ":");
			Если ВхождениеДвоеточия <> 0 Тогда
				ПоказателиВыгрузки.Вставить(СокрЛП(Лев(ТекСтр, ВхождениеДвоеточия - 1)), СокрЛП(Сред(ТекСтр, ВхождениеДвоеточия + 1)));
			КонецЕсли;
			ТекСтр = Текст.ПрочитатьСтроку();
		КонецЦикла;
		Текст.Закрыть();
		ПоказателиВыгрузки.Вставить("ЭтоXML", Ложь);
	КонецПопытки;
	Возврат ПоказателиВыгрузки;

КонецФункции

Функция КомпонентаПечатиМашиночитаемыхФормДоступна()
	
	Попытка
		Объект = Новый COMОбъект("TAXDOCPrt.TAXDOCPrint");
		Объект = Неопределено;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ДействияФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед проверкой необходимо сохранить изменения?
					|Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Если НЕ ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОтчета.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		КонтекстЭДО.ПроверитьОтчетСИспользованиемСервисаОнлайнПроверкиПФР(Ссылка);
	Иначе
		КонтекстЭДО.ПроверитьОтчетСИспользованиемСервисаОнлайнПроверки(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Опрос форм" И Параметр.Ключ = Ссылка Тогда
		Параметр.Форма = ЭтаФорма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлПояснительнойЗапискиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПриложениеКБухгалтерскойОтчетности(Перечисления.ТипыФайловБухОтчетности.ПояснительнаяЗаписка);
	
КонецПроцедуры

Процедура ФайлАудиторскогоЗаключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПриложениеКБухгалтерскойОтчетности(Перечисления.ТипыФайловБухОтчетности.АудиторскоеЗаключение);
	
КонецПроцедуры

Процедура ФайлЗаявленияРевизионногоСоюзаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПриложениеКБухгалтерскойОтчетности(Перечисления.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей);
	
КонецПроцедуры

Процедура ОткрытьПриложениеКБухгалтерскойОтчетности(ТипФайлаБухгалтерскойОтчетности)
	
	РезультатПоиска = мСвойстваФайлов.Найти(ТипФайлаБухгалтерскойОтчетности, "ТипФайлаОтчетности");
	Если РезультатПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайла = КонтекстЭДО.ПолучитьКаталогВременныхФайлов() + РезультатПоиска.ИмяФайла;
	Попытка
		РезультатПоиска.Данные.Записать(ИмяВременногоФайла);
	Исключение
		Сообщить("Не удалось выгрузить файл """ + РезультатПоиска.ИмяФайла + """ во временный каталог.", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	мВременныеФайлы.Добавить(ИмяВременногоФайла);
	
	ЗапуститьПриложение(ИмяВременногоФайла);
	
КонецПроцедуры

Процедура ИнициализироватьТаблицуСвойствФайловПриНеобходимости(ОчиститьБезусловно = Ложь)
	
	Если мСвойстваФайлов = Неопределено Тогда
		мСвойстваФайлов = Новый ТаблицаЗначений;
		мСвойстваФайлов.Колонки.Добавить("ИмяФайла");
		мСвойстваФайлов.Колонки.Добавить("ТипФайлаОтчетности");
		мСвойстваФайлов.Колонки.Добавить("Данные");
	Иначе
		Если ОчиститьБезусловно Тогда
			мСвойстваФайлов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьФайлВТаблицеСвойствФайлов(КороткоеИмяФайла, ТипФайлаОтчетности, ДвДанные, ЗамещатьПоТипу = Истина)
	
	ИнициализироватьТаблицуСвойствФайловПриНеобходимости();
	
	Если ЗамещатьПоТипу Тогда
		РезультатПоиска = мСвойстваФайлов.НайтиСтроки(Новый Структура("ТипФайлаОтчетности", ТипФайлаОтчетности));
		Для Каждого Стр Из РезультатПоиска Цикл
			мСвойстваФайлов.Удалить(Стр);
		КонецЦикла;
	КонецЕсли;
	
	ОпределитьНовыйФайлВТаблицеСвойствФайлов(КороткоеИмяФайла, ТипФайлаОтчетности, ДвДанные);
	
КонецПроцедуры

Процедура ОпределитьНовыйФайлВТаблицеСвойствФайлов(ИмяФайла, ТипФайла, ДанныеФайла)
	
	НовСтр = мСвойстваФайлов.Добавить();
	НовСтр.ИмяФайла = ИмяФайла;
	НовСтр.ТипФайлаОтчетности = ТипФайла;
	НовСтр.Данные = ДанныеФайла;
	
КонецПроцедуры

Процедура ФайлПояснительнойЗапискиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбъектДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ОбъектДиалог.ПредварительныйПросмотр = Истина;
	Если ОбъектДиалог.Выбрать() Тогда
		ОпределитьФайлВТаблицеСвойствФайлов(КороткоеИмяФайлаПоПолному(ОбъектДиалог.ПолноеИмяФайла), Перечисления.ТипыФайловБухОтчетности.ПояснительнаяЗаписка, Новый ДвоичныеДанные(ОбъектДиалог.ПолноеИмяФайла));
		ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлАудиторскогоЗаключенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбъектДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ОбъектДиалог.ПредварительныйПросмотр = Истина;
	Если ОбъектДиалог.Выбрать() Тогда
		ОпределитьФайлВТаблицеСвойствФайлов(КороткоеИмяФайлаПоПолному(ОбъектДиалог.ПолноеИмяФайла), Перечисления.ТипыФайловБухОтчетности.АудиторскоеЗаключение, Новый ДвоичныеДанные(ОбъектДиалог.ПолноеИмяФайла));
		ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлЗаявленияРевизионногоСоюзаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбъектДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ОбъектДиалог.ПредварительныйПросмотр = Истина;
	Если ОбъектДиалог.Выбрать() Тогда
		ОпределитьФайлВТаблицеСвойствФайлов(КороткоеИмяФайлаПоПолному(ОбъектДиалог.ПолноеИмяФайла), Перечисления.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей, Новый ДвоичныеДанные(ОбъектДиалог.ПолноеИмяФайла));
		ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипПолучателяПриИзменении(Элемент)
	
	// приводим реквизит "Получатель" к новому типу получателя
	ПривестиПолучателяКТипу();
	
	// заполняем получателя нового типа из свойств организации
	ЗаполнитьПолучателяИзСвойствОрганизации();
	
	// перерисовываем остальные ЭУ
	ОбновитьФорму();
	
КонецПроцедуры

Процедура ПривестиПолучателяКТипу()
	
	ТипДоОграничения = ТипЗнч(Получатель);
	
	Если ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		ЭлементыФормы.Получатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.НалоговыеОрганы");
		ЭлементыФормы.Получатель.КнопкаВыбора = Истина;
		ЭлементыФормы.Получатель.КнопкаОткрытия = Истина;
	ИначеЕсли ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		ЭлементыФормы.Получатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ОрганыПФР");
		ЭлементыФормы.Получатель.КнопкаВыбора = Истина;
		ЭлементыФормы.Получатель.КнопкаОткрытия = Истина;
	ИначеЕсли ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
		ЭлементыФормы.Получатель.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
		ЭлементыФормы.Получатель.КнопкаВыбора = Ложь;
		ЭлементыФормы.Получатель.КнопкаОткрытия = Ложь;
	ИначеЕсли ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
		ЭлементыФормы.Получатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ОрганыФСГС");
		ЭлементыФормы.Получатель.КнопкаВыбора = Истина;
		ЭлементыФормы.Получатель.КнопкаОткрытия = Истина;
	Иначе
		ЭлементыФормы.Получатель.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		ЭлементыФормы.Получатель.КнопкаВыбора = Истина;
		ЭлементыФормы.Получатель.КнопкаОткрытия = Истина;
	КонецЕсли;
	
	Получатель = ЭлементыФормы.Получатель.ОграничениеТипа.ПривестиЗначение(Получатель);
	ЭлементыФормы.Получатель.ВыбиратьТип = Ложь;
	
	ТипЗнчПолучатель = ТипЗнч(Получатель);
	Если ТипДоОграничения <> ТипЗнчПолучатель Тогда
		Получатель = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнчПолучатель);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПолучателяИзСвойствОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ТипПолучателя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "КодНО");
		Если ЗначениеЗаполнено(СведенияОбОрганизации) И ЗначениеЗаполнено(СведенияОбОрганизации.КодНО) Тогда
			ИФНС = Справочники.НалоговыеОрганы.НайтиПоКоду(СокрЛП(СведенияОбОрганизации.КодНО));
			Если НЕ ИФНС.Пустая() Тогда
				Получатель = ИФНС;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "КодОрганаПФР");
		Если ЗначениеЗаполнено(СведенияОбОрганизации) И ЗначениеЗаполнено(СведенияОбОрганизации.КодОрганаПФР) Тогда
			ОрганПФР = Справочники.ОрганыПФР.НайтиПоКоду(СокрЛП(СведенияОбОрганизации.КодОрганаПФР));
			Если НЕ ОрганПФР.Пустая() Тогда
				Получатель = ОрганПФР;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "КодПодчФСС");
		Если ЗначениеЗаполнено(СведенияОбОрганизации) И ЗначениеЗаполнено(СведенияОбОрганизации.КодПодчФСС) Тогда
			Получатель = Лев(СокрЛП(СведенияОбОрганизации.КодПодчФСС), 4);
		КонецЕсли;
	ИначеЕсли ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "КодОрганаФСГС");
		Если ЗначениеЗаполнено(СведенияОбОрганизации) И ЗначениеЗаполнено(СведенияОбОрганизации.КодОрганаФСГС) Тогда
			ОрганФСГС = Справочники.ОрганыФСГС.НайтиПоКоду(СокрЛП(СведенияОбОрганизации.КодОрганаФСГС));
			Если НЕ ОрганФСГС.Пустая() Тогда
				Получатель = ОрганФСГС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидОтчета = Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьПолучателяИзСвойствОрганизации();
	ОбновитьФорму();
	
КонецПроцедуры

Процедура ПрорисоватьПодменюОтправка(ПунктыПрорисовки)
	
	СтруктураПунктыПрорисовки = Новый Структура(ПунктыПрорисовки);
	ПунктыПрорисовки = Новый Соответствие;
	Для Каждого Эл Из СтруктураПунктыПрорисовки Цикл
		ПунктыПрорисовки.Вставить(Эл.Ключ, Истина);
	КонецЦикла;
	
	ПодменюОтправка = ЭлементыФормы.ДействияФормы.Кнопки.Отправка;
	ПодменюОтправка.Кнопки.Очистить();
	Для Каждого Эл Из СвойстваЭлементовПодменюОтправка Цикл
		Если ПунктыПрорисовки[Эл.Ключ] = Истина Тогда
			НовыйЭлемент = ПодменюОтправка.Кнопки.Добавить(Эл.Ключ, Эл.Значение.ТипКнопки, Эл.Значение.Текст, Эл.Значение.Действие);
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Эл.Значение, "Доступность, ИзменяетДанные, Подсказка, Пояснение, Картинка, Отображение, СочетаниеКлавиш");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВидОтчетаПриИзменении(Элемент)
	
	ОтработатьИзменениеВидаОтчета();
	ОбновитьФорму();
	ПрорисоватьФайлы();
	
КонецПроцедуры

Процедура ОтработатьИзменениеВидаОтчета()
	
	Если ЗначениеЗаполнено(ВидОтчета)
	И ЗначениеЗаполнено(ВидОтчета.ТипПолучателя)
	И ВидОтчета.ТипПолучателя <> ТипПолучателя Тогда
		ТипПолучателя = ВидОтчета.ТипПолучателя;
	КонецЕсли;
	
	// приводим реквизит "Получатель" к новому типу получателя
	ПривестиПолучателяКТипу();
	
	// заполняем получателя нового типа из свойств организации
	ЗаполнитьПолучателяИзСвойствОрганизации();
	
КонецПроцедуры

Процедура ТаблицаФайловПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Предупреждение("Копирование запрещено!");
		Возврат;
	КонецЕсли;
	
	ОбъектДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ОбъектДиалог.МножественныйВыбор = Истина;
	Если ОбъектДиалог.Выбрать() Тогда
		
		// дописать анализ выбранных файлов
		СвойстваЗагружаемыхФайлов = ПроанализироватьФайлы(ОбъектДиалог.ВыбранныеФайлы);
		Для Каждого Стр Из СвойстваЗагружаемыхФайлов Цикл
			НовСтр = ФайлыКомплекта.Добавить();
			НовСтр.Имя = Стр.Имя;
			НовСтр.Тип = Стр.Тип;
			НовСтр.Данные = Новый ДвоичныеДанные(Стр.ПолноеИмяФайла);
		КонецЦикла;
		
		СохранитьКомплектПРФВСвойствахФайлов();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаФайловПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.Номер.УстановитьТекст(ФайлыКомплекта.Индекс(ОформлениеСтроки.ДанныеСтроки) + 1);
		Если ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.Имя) Тогда
			ОформлениеСтроки.Ячейки.Данные.УстановитьТекст("Показать");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Данные" Тогда
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.Данные) Тогда
			ПоказатьФайлКомплекта(ВыбраннаяСтрока.Данные, ВыбраннаяСтрока.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПоказатьФайлКомплекта(ПолноеИмяФайла, ИмяФайла)
	
	Если ТипЗнч(ПолноеИмяФайла) = Тип("Строка") Тогда
		ИмяФайлаДляОтображения = ПолноеИмяФайла;
	Иначе
		ИмяФайлаДляОтображения = ПолучитьИмяВременногоФайла("xml");
		ПолноеИмяФайла.Записать(ИмяФайлаДляОтображения);
		мВременныеФайлы.Добавить(ИмяФайлаДляОтображения);
	КонецЕсли;
	
	КонтекстЭДО.ПоказатьXMLИзФайла(ИмяФайлаДляОтображения, ИмяФайла);
	
КонецФункции

Функция ПроанализироватьФайлы(Файлы)
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Имя");
	ТаблицаРезультат.Колонки.Добавить("Тип");
	ТаблицаРезультат.Колонки.Добавить("ПолноеИмяФайла");
	
	Для Каждого ПолноеИмяФайла Из Файлы Цикл
		НовСтр = ТаблицаРезультат.Добавить();
		НовСтр.Имя = КороткоеИмяФайлаПоПолному(ПолноеИмяФайла);
		НовСтр.Тип = ОпределитьТипФайлаПФР(ПолноеИмяФайла);
		НовСтр.ПолноеИмяФайла = ПолноеИмяФайла;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция КороткоеИмяФайлаПоПолному(ПолноеИмяФайла)
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	Возврат ОбъектФайл.Имя;
	
КонецФункции

Функция ОпределитьТипФайлаПФР(ПолноеИмяФайла)
	
	// 
	ДеревоXML = ДеревоXMLИзФайла(ПолноеИмяФайла);
	Если ДеревоXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
	СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
	Если СвойстваУзла.Получить("АНКЕТА_ЗЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_ОБ_ОБМЕНЕ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_О_ДУБЛИКАТЕ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
	ИначеЕсли СвойстваУзла.Получить("ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_ВОЗНАГРАЖДЕНИЙ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("КОНВЕРТАЦИЯ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_СВ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_НАЧИНАЯ_С_2012_ГОДА") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_НЕ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_ВЗНОСАМ_НА_ДОПОЛНИТЕЛЬНОЕ_СОЦИАЛЬНОЕ_ОБЕСПЕЧЕНИЕ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_О_ДОБРОВОЛЬНОМ_ВСТУПЛЕНИИ_В_ПРАВООТНОШЕНИЯ_В_ЦЕЛЯХ_УПЛАТЫ_ДСВ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаДСВ;
	ИначеЕсли СвойстваУзла.Получить("РЕЕСТР_ДСВ_РАБОТОДАТЕЛЬ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.РеестрДСВ;
	Иначе
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПустаяСсылка();
	КонецЕсли;
	
	//ВидОтчетаПФР = ОпределитьВидОтчетаПФР(ДеревоXML);
	//Если НЕ ЗначениеЗаполнено(ВидОтчетаПФР) Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//СоответствиеВидаОтчетаТипуФайлаОтчетностиПФР = Новый Соответствие;
	//СоответствиеВидаОтчетаТипуФайлаОтчетностиПФР.Вставить(Справочники.ВидыОтправляемыхДокументов.АнкетаЗастрахованногоЛица, Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ);
	//СоответствиеВидаОтчетаТипуФайлаОтчетностиПФР.Вставить(Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства, Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ);
	//СоответствиеВидаОтчетаТипуФайлаОтчетностиПФР.Вставить(Справочники.ВидыОтправляемыхДокументов.СведенияОВзносахИСтраховомСтажеСПВ1, Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ);
	//СоответствиеВидаОтчетаТипуФайлаОтчетностиПФР.Вставить(Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета, Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ);
	//СоответствиеВидаОтчетаТипуФайлаОтчетностиПФР.Вставить(Справочники.ВидыОтправляемыхДокументов.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК, Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС);
	//СоответствиеВидаОтчетаТипуФайлаОтчетностиПФР.Вставить(Справочники.ВидыОтправляемыхДокументов.РСВ1, Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ);
	//СоответствиеВидаОтчетаТипуФайлаОтчетностиПФР.Вставить(Справочники.ВидыОтправляемыхДокументов.РСВ2, Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ);
	//СоответствиеВидаОтчетаТипуФайлаОтчетностиПФР.Вставить(Справочники.ВидыОтправляемыхДокументов.РВ3, Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ);
	//
	//ТипФайлаОтчетностиПФР = СоответствиеВидаОтчетаТипуФайлаОтчетностиПФР[ВидОтчетаПФР];
	//Если ТипФайлаОтчетностиПФР <> Неопределено Тогда
	//	Возврат ТипФайлаОтчетностиПФР;
	//Иначе
	//	Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
	//КонецЕсли;
	
КонецФункции

Процедура ФайлыКомплектаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СохранитьКомплектПРФВСвойствахФайлов();
	ПрорисоватьФайлы();
	
КонецПроцедуры

Процедура СохранитьКомплектПРФВСвойствахФайлов()
	
	мСвойстваФайлов = Новый ТаблицаЗначений;
	мСвойстваФайлов.Колонки.Добавить("ИмяФайла");
	мСвойстваФайлов.Колонки.Добавить("ТипФайлаОтчетности");
	мСвойстваФайлов.Колонки.Добавить("Данные");
	
	Для Каждого Стр из ФайлыКомплекта Цикл
		ОпределитьНовыйФайлВТаблицеСвойствФайлов(Стр.Имя, Стр.Тип, Стр.Данные);
	КонецЦикла;
	
КонецПроцедуры

Процедура ФайлПояснительнойЗапискиОчистка(Элемент, СтандартнаяОбработка)
	
	УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(Перечисления.ТипыФайловБухОтчетности.ПояснительнаяЗаписка);
	
КонецПроцедуры

Процедура ФайлАудиторскогоЗаключенияОчистка(Элемент, СтандартнаяОбработка)
	
	УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(Перечисления.ТипыФайловБухОтчетности.АудиторскоеЗаключение);
	
КонецПроцедуры

Процедура ФайлЗаявленияРевизионногоСоюзаОчистка(Элемент, СтандартнаяОбработка)
	
	УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(Перечисления.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей);
	
КонецПроцедуры

Процедура УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(ТипФайлаОтчетности)
	
	Если мСвойстваФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = мСвойстваФайлов.Найти(ТипФайлаОтчетности, "ТипФайлаОтчетности");
	Если РезультатПоиска <> Неопределено Тогда
		мСвойстваФайлов.Удалить(РезультатПоиска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидОтчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ВидыОтправляемыхДокументов.ПолучитьФормуВыбора(, Элемент);
	Если ЗначениеЗаполнено(ТипПолучателя) Тогда
		ФормаВыбора.Отбор.ТипПолучателя.Установить(ТипПолучателя);
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ФайлыКомплектаПослеУдаления(Элемент)
	
	СохранитьКомплектПРФВСвойствахФайлов();
	ПрорисоватьФайлы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

мВременныеФайлы = Новый Массив;

ПериодичностьПолугодиеДоступна = Метаданные.Перечисления.Периодичность.ЗначенияПеречисления.Найти("Полугодие") <> Неопределено;

Периоды = Новый ТаблицаЗначений;
Периоды.Колонки.Добавить("Периодичность");
Периоды.Колонки.Добавить("МесяцНачалаПериода");
Периоды.Колонки.Добавить("МесяцОкончанияПериода");
Периоды.Колонки.Добавить("Представление");

// год
НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Год;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 12;
НовСтр.Представление		= "Год";

// полугодие

Если ПериодичностьПолугодиеДоступна Тогда
	
	НовСтр = Периоды.Добавить();
	НовСтр.Периодичность		= Перечисления.Периодичность.Полугодие;
	НовСтр.МесяцНачалаПериода	= 1;
	НовСтр.МесяцОкончанияПериода= 6;
	НовСтр.Представление		= "I полугодие";
	
	НовСтр = Периоды.Добавить();
	НовСтр.Периодичность		= Перечисления.Периодичность.Полугодие;
	НовСтр.МесяцНачалаПериода	= 1;
	НовСтр.МесяцОкончанияПериода= 12;
	НовСтр.Представление		= "I - II полугодие";
	
	НовСтр = Периоды.Добавить();
	НовСтр.Периодичность		= Перечисления.Периодичность.Полугодие;
	НовСтр.МесяцНачалаПериода	= 7;
	НовСтр.МесяцОкончанияПериода= 12;
	НовСтр.Представление		= "II полугодие";
	
КонецЕсли;

// квартал
НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 3;
НовСтр.Представление		= "I квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 6;
НовСтр.Представление		= "I - II квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 9;
НовСтр.Представление		= "I - III квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 12;
НовСтр.Представление		= "I - IV квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 4;
НовСтр.МесяцОкончанияПериода= 6;
НовСтр.Представление		= "II квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 7;
НовСтр.МесяцОкончанияПериода= 9;
НовСтр.Представление		= "III квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 10;
НовСтр.МесяцОкончанияПериода= 12;
НовСтр.Представление		= "IV квартал";

// месяц
НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 1;
НовСтр.Представление		= "январь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 2;
НовСтр.Представление		= "январь - февраль";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 3;
НовСтр.Представление		= "январь - март";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 4;
НовСтр.Представление		= "январь - апрель";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 5;
НовСтр.Представление		= "январь - май";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 6;
НовСтр.Представление		= "январь - июнь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 7;
НовСтр.Представление		= "январь - июль";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 8;
НовСтр.Представление		= "январь - август";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 9;
НовСтр.Представление		= "январь - сентябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 10;
НовСтр.Представление		= "январь - октябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 11;
НовСтр.Представление		= "январь - ноябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 12;
НовСтр.Представление		= "январь - декабрь";

//
НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 2;
НовСтр.МесяцОкончанияПериода= 2;
НовСтр.Представление		= "февраль";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 3;
НовСтр.МесяцОкончанияПериода= 3;
НовСтр.Представление		= "март";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 4;
НовСтр.МесяцОкончанияПериода= 4;
НовСтр.Представление		= "апрель";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 5;
НовСтр.МесяцОкончанияПериода= 5;
НовСтр.Представление		= "май";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 6;
НовСтр.МесяцОкончанияПериода= 6;
НовСтр.Представление		= "июнь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 7;
НовСтр.МесяцОкончанияПериода= 7;
НовСтр.Представление		= "июль";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 8;
НовСтр.МесяцОкончанияПериода= 8;
НовСтр.Представление		= "август";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 9;
НовСтр.МесяцОкончанияПериода= 9;
НовСтр.Представление		= "сентябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 10;
НовСтр.МесяцОкончанияПериода= 10;
НовСтр.Представление		= "октябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 11;
НовСтр.МесяцОкончанияПериода= 11;
НовСтр.Представление		= "ноябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 12;
НовСтр.МесяцОкончанияПериода= 12;
НовСтр.Представление		= "декабрь";

НомерКорректировки = 1;
Год = Год(ТекущаяДата());

ПеридичностьПоПризПериодОтч = Новый Соответствие;
ПеридичностьПоПризПериодОтч.Вставить("0", Перечисления.Периодичность.Год);
ПеридичностьПоПризПериодОтч.Вставить("1", Перечисления.Периодичность.Месяц);
ПеридичностьПоПризПериодОтч.Вставить("3", Перечисления.Периодичность.Квартал);
ПеридичностьПоПризПериодОтч.Вставить("6", Перечисления.Периодичность.Квартал);
ПеридичностьПоПризПериодОтч.Вставить("9", Перечисления.Периодичность.Квартал);

СдвигВМесяцахПоПериодичности = Новый Соответствие;
СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Месяц, 1);
СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Квартал, 3);
Если ПериодичностьПолугодиеДоступна Тогда
	СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Полугодие, 6);
КонецЕсли;
СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Год, 12);

СоответствиеПериодОтчМесяцуОкончания = Новый Соответствие;
СоответствиеПериодОтчМесяцуОкончания.Вставить("01", 1);
СоответствиеПериодОтчМесяцуОкончания.Вставить("02", 2);
СоответствиеПериодОтчМесяцуОкончания.Вставить("03", 3);
СоответствиеПериодОтчМесяцуОкончания.Вставить("04", 4);
СоответствиеПериодОтчМесяцуОкончания.Вставить("05", 5);
СоответствиеПериодОтчМесяцуОкончания.Вставить("06", 6);
СоответствиеПериодОтчМесяцуОкончания.Вставить("07", 7);
СоответствиеПериодОтчМесяцуОкончания.Вставить("08", 8);
СоответствиеПериодОтчМесяцуОкончания.Вставить("09", 9);
СоответствиеПериодОтчМесяцуОкончания.Вставить("10", 10);
СоответствиеПериодОтчМесяцуОкончания.Вставить("11", 11);
СоответствиеПериодОтчМесяцуОкончания.Вставить("12", 12);
СоответствиеПериодОтчМесяцуОкончания.Вставить("21", 3);
СоответствиеПериодОтчМесяцуОкончания.Вставить("22", 6);
СоответствиеПериодОтчМесяцуОкончания.Вставить("23", 9);
СоответствиеПериодОтчМесяцуОкончания.Вставить("24", 12);
СоответствиеПериодОтчМесяцуОкончания.Вставить("31", 6);
СоответствиеПериодОтчМесяцуОкончания.Вставить("32", 12);
СоответствиеПериодОтчМесяцуОкончания.Вставить("33", 9);
СоответствиеПериодОтчМесяцуОкончания.Вставить("34", 12);

СоответствиеПериодОтчПериодичности = Новый Соответствие;
СоответствиеПериодОтчПериодичности.Вставить("01", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("02", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("03", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("04", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("05", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("06", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("07", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("08", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("09", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("10", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("11", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("12", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("21", Перечисления.Периодичность.Квартал);
СоответствиеПериодОтчПериодичности.Вставить("22", Перечисления.Периодичность.Квартал);
СоответствиеПериодОтчПериодичности.Вставить("23", Перечисления.Периодичность.Квартал);
СоответствиеПериодОтчПериодичности.Вставить("24", Перечисления.Периодичность.Квартал);
Если ПериодичностьПолугодиеДоступна Тогда
	СоответствиеПериодОтчПериодичности.Вставить("31", Перечисления.Периодичность.Полугодие);
	СоответствиеПериодОтчПериодичности.Вставить("32", Перечисления.Периодичность.Полугодие);
КонецЕсли;
СоответствиеПериодОтчПериодичности.Вставить("33", Перечисления.Периодичность.Квартал);
СоответствиеПериодОтчПериодичности.Вставить("34", Перечисления.Периодичность.Год);

СоответствиеКодуИзШаблонаПериодичности = Новый Соответствие;
СоответствиеКодуИзШаблонаПериодичности.Вставить("001", Перечисления.Периодичность.Год);
СоответствиеКодуИзШаблонаПериодичности.Вставить("002", Перечисления.Периодичность.Полугодие);
СоответствиеКодуИзШаблонаПериодичности.Вставить("004", Перечисления.Периодичность.Квартал);
СоответствиеКодуИзШаблонаПериодичности.Вставить("012", Перечисления.Периодичность.Месяц);
СоответствиеКодуИзШаблонаПериодичности.Вставить("036", Перечисления.Периодичность.Декада);
СоответствиеКодуИзШаблонаПериодичности.Вставить("056", Перечисления.Периодичность.Неделя);

СвойстваЭлементовПодменюОтправка = Новый Структура;
Для Каждого Эл Из ЭлементыФормы.ДействияФормы.Кнопки.Отправка.Кнопки Цикл
	СвойстваЭлемента = Новый Структура("Имя, ТипКнопки, Доступность, Действие, ИзменяетДанные, Текст, Подсказка, Пояснение, Картинка, Отображение, СочетаниеКлавиш");
	ЗаполнитьЗначенияСвойств(СвойстваЭлемента, Эл);
	СвойстваЭлементовПодменюОтправка.Вставить(Эл.Имя, СвойстваЭлемента);
КонецЦикла;

ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета = Новый Соответствие;
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.АнкетаЗастрахованногоЛица, Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.ЗаявлениеДСВ1, Перечисления.ТипыФайловОтчетностиПФР.ПачкаДСВ);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства, Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.ПередачаДСВвПФР, Перечисления.ТипыФайловОтчетностиПФР.ПачкаДСВ);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.ПередачаСЗВ4вПФР, Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.РеестрДСВ3, Перечисления.ТипыФайловОтчетностиПФР.РеестрДСВ);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.СведенияОВзносахИСтраховомСтажеСПВ1, Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.СведенияОНачисленномЗаработкеСЗВ63, Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК, Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.РВ3, Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.РСВ1, Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ);
ТипФайлаОтчетностиПФРПоПредопределенномуВидуОтчета.Вставить(Справочники.ВидыОтправляемыхДокументов.РСВ2, Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ);