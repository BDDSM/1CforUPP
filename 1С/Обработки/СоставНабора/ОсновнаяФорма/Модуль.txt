Перем мФормаДокумента;
Перем мКолонкиСоставНабора;

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура проверки заполнения табличной части состав набора.
//
// Параметры:
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг проверки.
//  Заголовок                  - строка, заголовок сообщения об ошибке.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСоставНабора(СтруктураОбязательныхПолей, Отказ, Заголовок)

	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.СоставНабора.Реквизиты;

	// Цмкл по строкам табличной части.
	Для каждого СтрокаТаблицы Из СоставНабора Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                                """ табличной части ""Состав набора"": ";

		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда

				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСоставНабора()

// Процедура сохраняет в документе состав набора.
//
Процедура ЗаписатьСоставНабораВДокумент()

	Документ.СоставНабора.Загрузить(СоставНабора.Выгрузить());

КонецПроцедуры // ЗаписатьСоставНабораВДокумент()

// Процедура устанавливает значения исходных параметров.
//
Процедура УстановитьЗначенияИсходныхПараметров()

	ЗаголовокФормы = Неопределено;
	мТолькоПросмотр = Неопределено;

	СтруктураИсходныхПараметров.Свойство("Номенклатура",      Номенклатура);
	СтруктураИсходныхПараметров.Свойство("Количество",        Количество);
	СтруктураИсходныхПараметров.Свойство("ЕдиницаИзмерения",  ЕдиницаИзмерения);
	СтруктураИсходныхПараметров.Свойство("ДокументОбъект",    Документ);
	СтруктураИсходныхПараметров.Свойство("ФормаДокумента",    мФормаДокумента);
	СтруктураИсходныхПараметров.Свойство("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	СтруктураИсходныхПараметров.Свойство("КлючСтроки",        КлючСтроки);
	СтруктураИсходныхПараметров.Свойство("ЗаголовокФормы",    ЗаголовокФормы);
	СтруктураИсходныхПараметров.Свойство("ТолькоПросмотр",    мТолькоПросмотр);

	Если ЗаголовокФормы <> Неопределено Тогда
		ЭтаФорма.Заголовок = ЗаголовокФормы;
		ЭлементыФормы.РамкаГруппыСоставНабора.Заголовок = ЗаголовокФормы;
	КонецЕсли;

	мТолькоПросмотр = ?(мТолькоПросмотр = Неопределено, Ложь, мТолькоПросмотр);

	ТолькоПросмотр = мТолькоПросмотр;

КонецПроцедуры // УстановитьЗначенияИсходныхПараметров()

// Процедура устанавливает отбор табличной части по реквизиту "КлючСтроки".
//
Процедура УстановитьОтборТабЧасти()

	ЭлементОтбора               = ЭлементыФормы.СоставНабора.ОтборСтрок.КлючСтроки;
	ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
	ЭлементОтбора.Значение      = КлючСтроки;
	ЭлементОтбора.Использование = Истина;

КонецПроцедуры // УстановитьОтборТабЧасти()

Процедура УстановитьВидимость()
	
	Если мФормаДокумента.ЭлементыФормы.ДействияФормы.Кнопки.Найти("ПоказатьСкрытьСчетаУчета") = Неопределено Тогда
		ПоказыватьВДокументахСчетаУчета = Ложь
	Иначе
		ПоказыватьВДокументахСчетаУчета = мФормаДокумента.ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка;
	КонецЕсли;
	
	Если ПоказыватьВДокументахСчетаУчета Тогда
		ОтражатьВБухгалтерскомУчете = Документ.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчетеНП = (Документ.ОтражатьВНалоговомУчете И (НЕ НалоговыйУчетУСН.ПрименениеУСН(Документ.Организация, Документ.Дата)));
	Иначе
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчетеНП = Ложь;
	КонецЕсли;
		
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставНабора.СчетУчетаБУ,  			ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставНабора.ПринятыеСчетУчетаБУ, 	ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставНабора.СчетУчетаНУ,  			ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчетеНП);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставНабора.ПринятыеСчетУчетаНУ, 	ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчетеНП);
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Проверим тип реквизита формы СтруктураПараметровФормы. Должен быть "Структура".
	// При неверном типе не будем запускать подбор.
	Если ТипЗнч(СтруктураИсходныхПараметров) <> Тип("Структура") Тогда
		Отказ = Истина;
		Предупреждение("Не верный тип параметра ""СтруктураИсходныхПараметров""!
		               |Данная обработка вызывается из других процедур конфигурации.
		               |Вручную ее вызывать запрещено."); 
		Возврат;
	КонецЕсли;

	УстановитьЗначенияИсходныхПараметров();

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Предупреждение("Не выбрана номенклатура!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	СоставНабора.Загрузить(Документ.СоставНабора.Выгрузить());

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	КолонкиТабЧастиДокумента = мФормаДокумента.ЭлементыФормы[ИмяТабличнойЧасти].Колонки;
	НастройкаОтбораСтрок     = ЭлементыФормы.СоставНабора.НастройкаОтбораСтрок;

	// Установим видимость и доступность колонок
	Для каждого Колонка Из мКолонкиСоставНабора Цикл
		Имя = Колонка.Имя;

		Если Имя = "НомерСтроки"
		 ИЛИ Имя = "Номенклатура"
		 ИЛИ Имя = "Количество"
		 ИЛИ Имя = "Всего"
		 ИЛИ Имя = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;

		Если КолонкиТабЧастиДокумента.Найти(Имя) = Неопределено Тогда
			Видимость         = Ложь;
			ИзменятьВидимость = Ложь;
			Доступность       = Ложь;
		Иначе
			Видимость         = КолонкиТабЧастиДокумента[Имя].Видимость;
			ИзменятьВидимость = КолонкиТабЧастиДокумента[Имя].ИзменятьВидимость;
			Доступность       = КолонкиТабЧастиДокумента[Имя].Доступность;
		КонецЕсли;

		Колонка.Видимость         = Видимость;
		Колонка.ИзменятьВидимость = ИзменятьВидимость;
		Колонка.Доступность       = Видимость;

		Если Имя <> "Код"
		   И Имя <> "Артикул"
		   И Имя <> "Всего" Тогда
			НастройкаОтбораСтрок[Имя].Доступность = ИзменятьВидимость;
		КонецЕсли;
	КонецЦикла;

	УстановитьОтборТабЧасти();
	
	УстановитьВидимость();	
	
	ЕстьСерийныеНомера = Документ.Метаданные().ТабличныеЧасти.Найти("СерийныеНомераСоставНабора") <> Неопределено;
	УчетСерийныхНомеров.УстановитьВидимостьКнопкиВводаСерийныхНомеров(ЭлементыФормы.КоманднаяПанельТовары, ЕстьСерийныеНомера);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриПовторномОткрытии" формы.
//
Процедура ПриПовторномОткрытии(СтандартнаяОбработка)

	Если ЭтаФорма.Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьСоставНабораВДокумент();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЭтаФорма.Модифицированность = Ложь;

	УстановитьЗначенияИсходныхПараметров();

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Предупреждение("Не выбрана номенклатура!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	УстановитьОтборТабЧасти();

КонецПроцедуры // ПриПовторномОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если ЭтаФорма.Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьСоставНабораВДокумент();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.СоставНабора.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСоставНабораВДокумент();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				Документ);
	СтруктураПараметров.Вставить("ОбработкаСоставНабора", 		ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"СоставНабора");
	СтруктураПараметров.Вставить("ИмяТабличнойЧастиСерийныеНомера", "СерийныеНомераСоставНабора");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		Документ.мПараметрыСвязиСтрокТЧ);
	СтруктураПараметров.Вставить("СоставНабораСтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СОСТАВ НАБОРА

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
//
Процедура СоставНабораПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиСоставНабора.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(СокрЛ(Формат(ДанныеСтроки.Количество * Количество, "ЧЦ=15; ЧДЦ=3")));
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиСоставНабора, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // СоставНабораПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
//
Процедура СоставНабораПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = КлючСтроки;
	КонецЕсли;

КонецПроцедуры // СоставНабораПриНачалеРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "ОК" командной панели формы.
//
Процедура КнопкаОКНажатие(Кнопка)

	Отказ = Ложь;
	ТекстЗаголовока = "Проверка заполнения состава набора документа """ + СокрЛП(Документ) + """: ";
	СтруктураОбязательныхПолей = Новый Структура("ЕдиницаИзмерения");

	ПроверитьЗаполнениеТабличнойЧастиСоставНабора(СтруктураОбязательныхПолей, Отказ, ТекстЗаголовока);

	Если НЕ Отказ Тогда
		ЗаписатьСоставНабораВДокумент();
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КнопкаОКНажатие()

Процедура СоставНабораСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СоставНабораСчетУчетаНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СоставНабораПринятыеСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СоставНабораПринятыеСчетУчетаНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СоставНабораНоменклатураПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.СоставНабора.ТекущиеДанные;
	ТекДанные.ЕдиницаИзмерения = ТекДанные.Номенклатура.ЕдиницаХраненияОстатков;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мКолонкиСоставНабора = ЭлементыФормы.СоставНабора.Колонки;