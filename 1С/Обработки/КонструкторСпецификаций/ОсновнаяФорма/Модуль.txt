Перем БылоВосстановлениеЗначений;
Перем ОбновитьДеревоСпецификаций;
Перем ОсновнаяСпецификацияНоменклатуры;
Перем ТекущаяОсновнаяСпецификация;

Перем ИспользоватьТолькоСборочныеСпецификации Экспорт;
Перем КлючОтчета;

Перем мФормаВводаФормулы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Производит заполнение и установку необходимых полей при изменении номенклатуры в строке.
//
Процедура ПриИзмененииНоменклатурыИХарактеристики(СтрокаДереваЗначений, Номенклатура, ХарактеристикаНоменклатуры = Неопределено)
	
	Если ХарактеристикаНоменклатуры = Неопределено Тогда
		ХарактеристикаНоменклатуры = СтрокаДереваЗначений.ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	Если СтрокаДереваЗначений.Уровень() = 0 Тогда
		КонечнаяПродукция 				= Номенклатура;
		КонечнаяХарактеристикаПродукции = ХарактеристикаНоменклатуры;
		ЗаполнитьДеревоСпецификаций();
	Иначе
		СтрокаДереваЗначений.Номенклатура = Номенклатура;
		СтрокаДереваЗначений.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		Если ТипЗнч(СтрокаДереваЗначений.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокаДереваЗначений.ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
		КонецЕсли;
		
		Если СтрокаДереваЗначений.Номенклатура <> СтрокаДереваЗначений.ЕдиницаИзмерения.Владелец Тогда
			СтрокаДереваЗначений.ЕдиницаИзмерения = Неопределено;
			
			Если ЗначениеЗаполнено(СтрокаДереваЗначений.Номенклатура) 
			   И ТипЗнч(СтрокаДереваЗначений.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				СтрокаДереваЗначений.ЕдиницаИзмерения = СтрокаДереваЗначений.Номенклатура.ЕдиницаХраненияОстатков;
				
				Если СтрокаДереваЗначений.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие Тогда
					СтрокаДереваЗначений.СтатьяЗатрат = СтрокаДереваЗначений.Номенклатура.СтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
				
		Если СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура Тогда
			СпецификацияНоменклатуры = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры, Дата);
			Если СтрокаДереваЗначений.ОсновнаяСпецификация <> СпецификацияНоменклатуры Тогда
				СтрокаДереваЗначений.ОсновнаяСпецификация = СпецификацияНоменклатуры;
			КонецЕсли;
		КонецЕсли;

		ЗаписатьСтрокуСпецификации(СтрокаДереваЗначений);
		
		Если ЗначениеЗаполнено(СтрокаДереваЗначений.ОсновнаяСпецификация) Тогда
			ЗаполнитьСтрокиДереваСпецификаций(СтрокаДереваЗначений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатурыИХарактеристики()

// Процедура производит установку блокировки элемента справочника "Спецификации номенклатуры".
//
Процедура ПередНачаломИзмененияСпецификации(СтрокаДереваЗначений, Отказ, Спецификация = Неопределено)
	
	СпецификацияОбъект = Неопределено;
	Если Спецификация <> Неопределено Тогда
		Если ЗначениеЗаполнено(Спецификация) Тогда
			СпецификацияОбъект = Спецификация.ПолучитьОбъект();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДереваЗначений.Спецификация) Тогда
		СпецификацияОбъект = СтрокаДереваЗначений.Спецификация.ПолучитьОбъект();
	Иначе
		Возврат;
	КонецЕсли;
	
	Попытка
		СпецификацияОбъект.Заблокировать();
	Исключение
		ОбщегоНазначения.Сообщение("Не удалось установить блокировку спецификации: " + СпецификацияОбъект);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры // ПередНачаломИзмененияСпецификации()

// Процедура производит снятие блокировки элемента справочника "Спецификации номенклатуры".
//
Процедура ПриОкончанииИзмененияСпецификации()
	
	Попытка
		СпецификацияОбъект.Разблокировать();
	Исключение
		ОбщегоНазначения.Сообщение("Не удалось снять блокировку со спецификации: " + СпецификацияОбъект);
	КонецПопытки;
	
КонецПроцедуры // ПриОкончанииИзмененияСпецификации()

// Процедура проверяет наличие спецификаций для номенклатуры.
//
Функция ЕстьСпецификацииНоменклатуры(Номенклатура)
	
	Массив = КритерииОтбора.СпецификацииИзделийПоНоменклатуре.Найти(Номенклатура);
	Если Массив.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЕстьСпецификацииНоменклатуры()

// Процедура добавляет в дерево спецификаций строку спецификации и исходные комплектующие.
//
// Параметры:
//	СтрокаСпецификации - СтрокаДереваЗначений - Текущая строка
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица номенклатуры для проверки зацикливания
//	ПроверятьКоличествоУровней - Булево - Признак необходимости проверки количества уровней
//	ОбработкаСобытияПередРазворачиванием - Булево - Признак вызова процедуры из обработчика события
//
Процедура ЗаполнитьСтрокиДереваСпецификаций(
	СтрокаСпецификации, 
	ТаблицаНоменклатуры = Неопределено, 
	ПроверятьКоличествоУровней = Истина,
	ОбработкаСобытияПередРазворачиванием = Ложь
	) Экспорт
	
	Если СтрокаСпецификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверятьКоличествоУровней И КоличествоУровней > 0 И (СтрокаСпецификации.Уровень() + 1) > КоличествоУровней Тогда
		СтрокаРодитель = СтрокаСпецификации.Строки.Добавить();
		Возврат;
	КонецЕсли;
	
	Если СтрокаСпецификации.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие
	 ИЛИ СтрокаСпецификации.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия
	 ИЛИ СтрокаСпецификации.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы Тогда
	    Спецификация = СтрокаСпецификации.Родитель.ОсновнаяСпецификация;
		ВыводитьГруппировкиПоВидамНормативов = Ложь;
		НеОбновлятьИсходныеКомплектующие = (СтрокаСпецификации.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие);
		НеОбновлятьВыходныеИзделия 		 = (СтрокаСпецификации.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия);
		НеОбновлятьВозвратныеОтходы 	 = (СтрокаСпецификации.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы);
	Иначе
		НеОбновлятьИсходныеКомплектующие = Ложь;
		ВыводитьГруппировкиПоВидамНормативов = (ВыводитьВыходныеИзделия ИЛИ ВыводитьВозвратныеОтходы);
		Если ТипЗнч(СтрокаСпецификации.Номенклатура) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
			Спецификация = СтрокаСпецификации.Номенклатура;
			НеОбновлятьВыходныеИзделия 		 = Истина;
			НеОбновлятьВозвратныеОтходы 	 = Истина;
		Иначе
			Спецификация = СтрокаСпецификации.ОсновнаяСпецификация;
			НеОбновлятьВыходныеИзделия 		 = Ложь;
			НеОбновлятьВозвратныеОтходы 	 = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаСпецификации.Строки.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Спецификация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаНоменклатуры = Неопределено Тогда
		ТаблицаНоменклатуры = Новый ТаблицаЗначений;
		ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура");
		ТаблицаНоменклатуры.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаНоменклатуры.Колонки.Добавить("ОсновнаяСпецификация");
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	
	Если Не ВыводитьГруппировкиПоВидамНормативов Тогда
		СтрокаРодитель = СтрокаСпецификации;
	КонецЕсли;
	
	Если Не НеОбновлятьИсходныеКомплектующие Тогда
		
		Если ВыводитьГруппировкиПоВидамНормативов Тогда
			СтрокаРодитель = СтрокаСпецификации.Строки.Добавить();
			СтрокаРодитель.Спецификация = Спецификация;
			СтрокаРодитель.ВидСтроки 	= Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие;
			СтрокаРодитель.Количество 	= Спецификация.ИсходныеКомплектующие.Количество();
		КонецЕсли;

		ИсходныеКомплектующие = Спецификация.ИсходныеКомплектующие;
		Для Каждого Строка Из ИсходныеКомплектующие Цикл
			
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.Спецификация    		   = Спецификация;
			НоваяСтрока.НомерСтрокиСпецификации    = Строка.НомерСтроки;
			Если Строка.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура
			 ИЛИ Строка.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры
			 ИЛИ Строка.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики Тогда
				НоваяСтрока.ВидСтроки			   = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
			ИначеЕсли Строка.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Узел Тогда
				НоваяСтрока.ВидСтроки			   = Перечисления.ВидыСтрокДереваСпецификаций.Узел;
			Иначе
				Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					НоваяСтрока.ВидСтроки			   = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
				ИначеЕсли ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.НоменклатурныеУзлы") Тогда
					НоваяСтрока.ВидСтроки			   = Перечисления.ВидыСтрокДереваСпецификаций.Узел;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.ВидНорматива				= Строка.ВидНорматива;
			НоваяСтрока.Номенклатура				= Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.Количество					= Строка.Количество;
			НоваяСтрока.ЕдиницаИзмерения			= Строка.ЕдиницаИзмерения;
			НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
			
			НоваяСтрока.ВидВоспроизводства			= Строка.ВидВоспроизводства;
			НоваяСтрока.ОсновнаяСпецификация		= Строка.Спецификация;
			НоваяСтрока.УказаниеНорматива			= Строка.УказаниеНорматива;
			НоваяСтрока.Формула						= Строка.Формула;
			НоваяСтрока.СписаниеКомплектующей		= Строка.СписаниеКомплектующей;
			НоваяСтрока.СвойствоДляСписания			= Строка.СвойствоДляСписания;
			
			Если Строка.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура
			 ИЛИ Строка.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры Тогда
			 
			 	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					НоваяСтрока.ВидНоменклатуры = Строка.Номенклатура.ВидНоменклатуры;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ОсновнаяСпецификация) Тогда
			 		ЕстьСпецификации = ЕстьСпецификацииНоменклатуры(Строка.Номенклатура);
				Иначе
					ЕстьСпецификации = Истина;
				КонецЕсли;
					
				НоваяСтрока.ЕстьСпецификации  = ЕстьСпецификации;
				
				Если Не ЕстьСпецификации Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ОсновнаяСпецификация) Тогда
					СпецификацияНоменклатуры = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, Дата);
					
					Если НЕ ЗначениеЗаполнено(СпецификацияНоменклатуры) Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока.ОсновнаяСпецификация = СпецификацияНоменклатуры;
				КонецЕсли;
				
				СтруктураПоиска.Очистить();
				СтруктураПоиска.Вставить("Номенклатура", 			   Строка.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
				СтруктураПоиска.Вставить("ОсновнаяСпецификация", 	   СпецификацияНоменклатуры);
				
				Строки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
				Если Строки.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаТаблицы = ТаблицаНоменклатуры.Добавить();				
				НоваяСтрокаТаблицы.Номенклатура 			  = Строка.Номенклатура;
				НоваяСтрокаТаблицы.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
				НоваяСтрокаТаблицы.ОсновнаяСпецификация 	  = СпецификацияНоменклатуры;
				
				ЗаполнитьСтрокиДереваСпецификаций(НоваяСтрока, ТаблицаНоменклатуры);
				
				Строки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
				ТаблицаНоменклатуры.Удалить(Строки.Получить(0));
				
			ИначеЕсли Строка.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Узел Тогда
				
				Если ТипЗнч(Строка.Номенклатура) <> Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска.Очистить();
				СтруктураПоиска.Вставить("Номенклатура", 			   Строка.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Неопределено);
				СтруктураПоиска.Вставить("ОсновнаяСпецификация", 	   Неопределено);
				
				Строки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
				Если Строки.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаТаблицы = ТаблицаНоменклатуры.Добавить();
				НоваяСтрокаТаблицы.Номенклатура 			  = Строка.Номенклатура;
				НоваяСтрокаТаблицы.ХарактеристикаНоменклатуры = Неопределено;
				НоваяСтрокаТаблицы.ОсновнаяСпецификация 	  = Неопределено;
				
				ЗаполнитьСтрокиДереваСпецификаций(НоваяСтрока, ТаблицаНоменклатуры);
				
				Строки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
				ТаблицаНоменклатуры.Удалить(Строки.Получить(0));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыводитьВыходныеИзделия И Не НеОбновлятьВыходныеИзделия Тогда
		
		Если ВыводитьГруппировкиПоВидамНормативов Тогда
			СтрокаРодитель = СтрокаСпецификации.Строки.Добавить();
			СтрокаРодитель.Спецификация = Спецификация;
			СтрокаРодитель.ВидСтроки 	= Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия;
			СтрокаРодитель.Количество 	= Спецификация.ВыходныеИзделия.Количество();
		КонецЕсли;
		
		ВыходныеИзделия = Спецификация.ВыходныеИзделия;
		Для Каждого Строка Из ВыходныеИзделия Цикл
			
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.Спецификация    		   = Спецификация;			
			НоваяСтрока.НомерСтрокиСпецификации    = Строка.НомерСтроки;
			НоваяСтрока.ВидСтроки				   = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие;
			НоваяСтрока.ВидНоменклатуры 		   = Строка.Номенклатура.ВидНоменклатуры;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);				
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыводитьВозвратныеОтходы И Не НеОбновлятьВозвратныеОтходы Тогда
		
		Если ВыводитьГруппировкиПоВидамНормативов Тогда
			СтрокаРодитель = СтрокаСпецификации.Строки.Добавить();
			СтрокаРодитель.Спецификация = Спецификация;
			СтрокаРодитель.ВидСтроки 	= Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы;
			СтрокаРодитель.Количество 	= Спецификация.ВозвратныеОтходы.Количество();
		КонецЕсли;
	
		ВозвратныеОтходы = Спецификация.ВозвратныеОтходы;
		Для Каждого Строка Из ВозвратныеОтходы Цикл
					
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.Спецификация    		   = Спецификация;
			НоваяСтрока.НомерСтрокиСпецификации    = Строка.НомерСтроки;
			НоваяСтрока.ВидСтроки				   = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныйОтход;
			Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				НоваяСтрока.ВидНоменклатуры 		   = Строка.Номенклатура.ВидНоменклатуры;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);			
				
		КонецЦикла;
		
	КонецЕсли;
	
	Если РазворачиватьДеревоСпецификаций
	   И Не ОбработкаСобытияПередРазворачиванием Тогда
		ЭлементыФормы.ДеревоСпецификаций.Развернуть(СтрокаСпецификации, Ложь);
		
		Если СтрокаСпецификации.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура
		 ИЛИ СтрокаСпецификации.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Узел
		Тогда
			Для Каждого Строка Из СтрокаСпецификации.Строки Цикл
				ЭлементыФормы.ДеревоСпецификаций.Развернуть(Строка, Ложь);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокиДереваСпецификаций()

// Процедура производит заполнение дерева спецификации по продукции.
//
Процедура ЗаполнитьДеревоСпецификаций(Продукция = Неопределено, ХарактеристикаПродукции = Неопределено, Спецификация = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Продукция) Тогда
		Продукция 				= КонечнаяПродукция;
		ХарактеристикаПродукции = КонечнаяХарактеристикаПродукции;
	КонецЕсли;
	
	ДеревоСпецификаций.Строки.Очистить();
	
	// Добавим в первую строку продукцию.
	СтрокаПродукции = ДеревоСпецификаций.Строки.Добавить();
	СтрокаПродукции.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.КонечнаяПродукция;
	СтрокаПродукции.Номенклатура = Продукция;
	СтрокаПродукции.ХарактеристикаНоменклатуры = ХарактеристикаПродукции;
	СтрокаПродукции.ВидНоменклатуры = Продукция.ВидНоменклатуры;
	
	// Определим спецификацию по умолчанию и добавим подчиненную строку.
	Если ЗначениеЗаполнено(Спецификация) Тогда
		
	ИначеЕсли ЗначениеЗаполнено(Продукция) Тогда
		Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Продукция, ХарактеристикаПродукции, Дата);
	Иначе
		Спецификация = Справочники.СпецификацииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	СтрокаПродукции.Спецификация 		 = Спецификация;
	СтрокаПродукции.ОсновнаяСпецификация = Спецификация;
	
	Если НЕ ЗначениеЗаполнено(Спецификация) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Очистить();
	СтруктураПоиска.Вставить("Номенклатура", 				Продукция);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", 	ХарактеристикаПродукции);
		
	МассивСтрок = Спецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаВыходногоИзделия = МассивСтрок[0];
		СтрокаПродукции.Количество = СтрокаВыходногоИзделия.Количество;
		СтрокаПродукции.ЕдиницаИзмерения = СтрокаВыходногоИзделия.ЕдиницаИзмерения;
	КонецЕсли;
	
	ЗаполнитьСтрокиДереваСпецификаций(СтрокаПродукции);
	
КонецПроцедуры // ЗаполнитьДеревоСпецификаций()

// Процедура создает новую спецификцию для выбранной номенклатуры.
//
Процедура СоздатьНовуюСпецификацию(СтрокаДереваЗначений, Номенклатура, ХарактеристикаНоменклатуры)
	
	НоваяСпецификация = Справочники.СпецификацииНоменклатуры.СоздатьЭлемент();
	НоваяСтрока = НоваяСпецификация.ВыходныеИзделия.Добавить();
	НоваяСтрока.Номенклатура 			   = Номенклатура;
	НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
	НоваяСтрока.Количество 		   		   = 1;
	НоваяСтрока.ЕдиницаИзмерения 		   = Номенклатура.ЕдиницаХраненияОстатков;
	НоваяСтрока.ДоляСтоимости 		   	   = 100;
	
	Форма = НоваяСпецификация.ПолучитьФорму();
	
	Если СтрокаДереваЗначений = Неопределено Тогда
		Форма.Открыть();
	Иначе
		Форма.ОткрытьМодально();
		
		Спецификация = НоваяСпецификация.Ссылка;
		СтрокаДереваЗначений.ОсновнаяСпецификация = Спецификация;
		
		Если СтрокаДереваЗначений.Уровень() = 0 Тогда
			СтрокаДереваЗначений.Спецификация = Спецификация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Спецификация) Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаДереваЗначений.Строки.Очистить();
		ЗаполнитьСтрокиДереваСпецификаций(СтрокаДереваЗначений);
		ЗаписатьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры, Спецификация);
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьНовуюСпецификацию()

// Процедура создает новую версию спецификации на основании текущей.
//
Процедура СоздатьНовуюВерсию(Спецификация)
	
	Если Спецификация = Неопределено ИЛИ Спецификация.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСпецификация = Справочники.СпецификацииНоменклатуры.СоздатьЭлемент();
	НоваяСпецификация.Заполнить(Спецификация);
	ФормаСпецификации = НоваяСпецификация.ПолучитьФорму();
	ФормаСпецификации.Открыть();
		
КонецПроцедуры // СоздатьНовуюВерсию()

// Функция определяет имя табличной части строки спецификации, соответствующее строке дерева спецификаций.
//
Функция ПолучитьИмяТабличнойЧастиСпецификации(СтрокаДереваЗначений, ТекстСообщения)
	
	Если СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура
	 ИЛИ СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Узел Тогда
		ИмяТабличнойЧасти = "ИсходныеКомплектующие";
		ТекстСообщения = "исходных комплектующих";
		
	ИначеЕсли СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие Тогда
		ИмяТабличнойЧасти = "ВыходныеИзделия";
		ТекстСообщения = "выходных изделий";
		
	ИначеЕсли СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныйОтход Тогда
		ИмяТабличнойЧасти = "ВозвратныеОтходы";
		ТекстСообщения = "возвратных отходов";
		
	Иначе
		ИмяТабличнойЧасти = Неопределено;
		
	КонецЕсли;
	
	Возврат ИмяТабличнойЧасти;

КонецФункции // ПолучитьИмяТабличнойЧастиСпецификации()

// Процедура добавляет новую строку исходных комплектующих в спецификацию.
//
Процедура ДобавитьСтрокуСпецификации(СтрокаДереваЗначений, Номенклатура, ХарактеристикаНоменклатуры, Копирование = Ложь, СтрокаДобавлена = Ложь)
	
	Если НЕ ЗначениеЗаполнено(СпецификацияОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваЗначений.Уровень() = 0 И (ВыводитьВыходныеИзделия ИЛИ ВыводитьВозвратныеОтходы) Тогда
		Возврат;
	КонецЕсли;
		
	Если СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие
	 ИЛИ СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия
	 ИЛИ СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы Тогда
		НоваяСтрокаДереваЗначений = СтрокаДереваЗначений.Строки.Добавить();
			
		Если СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие Тогда
			НоваяСтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
		ИначеЕсли СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия Тогда
			НоваяСтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие;
		ИначеЕсли СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы Тогда
			НоваяСтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныйОтход;
		КонецЕсли;
	ИначеЕсли СтрокаДереваЗначений.Уровень() = 0 Тогда
		НоваяСтрокаДереваЗначений = СтрокаДереваЗначений.Строки.Добавить();
		НоваяСтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
	ИначеЕсли СтрокаДобавлена Тогда
		НоваяСтрокаДереваЗначений = СтрокаДереваЗначений;
		НоваяСтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
	Иначе
		НоваяСтрокаДереваЗначений = СтрокаДереваЗначений.Родитель.Строки.Добавить();
		НоваяСтрокаДереваЗначений.ВидСтроки = СтрокаДереваЗначений.ВидСтроки;
	КонецЕсли;
	
	ТекстСообщения = "";
	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиСпецификации(НоваяСтрокаДереваЗначений, ТекстСообщения);
	Если ИмяТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НоваяСтрока = СпецификацияОбъект[ИмяТабличнойЧасти].Добавить();
	Если ИмяТабличнойЧасти = "ИсходныеКомплектующие"
	 ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" 
	Тогда
		Если Копирование Тогда
			НоваяСтрока.ВидНорматива = СтрокаДереваЗначений.ВидНорматива;
		Иначе
			НоваяСтрока.ВидНорматива 			= Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
			НоваяСтрока.УказаниеНорматива 		= Перечисления.ВидыУказанияНорматива.НаКоличествоПродукции;
			НоваяСтрока.СписаниеКомплектующей 	= Перечисления.ВариантыСписанияКомплектующих.Всегда;
		КонецЕсли;
	КонецЕсли;
	СпецификацияОбъект.Записать();
	
	Если Копирование Тогда
		Номенклатура 			   = СтрокаДереваЗначений.Номенклатура;
		ХарактеристикаНоменклатуры = СтрокаДереваЗначений.ХарактеристикаНоменклатуры;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваЗначений, СтрокаДереваЗначений);
	Иначе
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваЗначений, НоваяСтрока);
		
		НоваяСтрокаДереваЗначений.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
		НоваяСтрокаДереваЗначений.Спецификация = СпецификацияОбъект.Ссылка;
		НоваяСтрокаДереваЗначений.Количество   = 1;
	КонецЕсли;
	НоваяСтрокаДереваЗначений.НомерСтрокиСпецификации = НоваяСтрока.НомерСтроки;
	
	ПриИзмененииНоменклатурыИХарактеристики(НоваяСтрокаДереваЗначений, Номенклатура, ХарактеристикаНоменклатуры);
	
	СтрокаРодитель = НоваяСтрокаДереваЗначений.Родитель;
	
	Если РедактироватьВДиалоге Тогда
		Отказ = Ложь;
		ОткрытьСтрокуСпецификации(ЭлементыФормы, НоваяСтрокаДереваЗначений, Истина, Отказ);
		Если Отказ Тогда
			СтрокаРодитель.Строки.Удалить(НоваяСтрокаДереваЗначений);
			Возврат;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ДеревоСпецификаций.ТекущаяСтрока = НоваяСтрокаДереваЗначений;
	КонецЕсли;
	
	СтрокаРодитель = НоваяСтрокаДереваЗначений.Родитель;
	Если СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие
	 ИЛИ СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия
	 ИЛИ СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы Тогда
		СтрокаРодитель.Количество = СтрокаРодитель.Количество + 1;
	КонецЕсли;
	
	ЗаполнитьСтрокиДереваСпецификаций(НоваяСтрокаДереваЗначений);
	
КонецПроцедуры // ДобавитьСтрокуСпецификации()

// Процедура проверяет возможность сохранения строки спецификации.
//
Процедура ПроверитьВозможностьЗаписиСтрокиСпецификации(СтрокаДереваЗначений, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	Если ЗначениеЗаполнено(СпецификацияОбъект.Ссылка) Тогда
		
		ТекстСообщения = "";
		ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиСпецификации(СтрокаДереваЗначений, ТекстСообщения);
		Если ИмяТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НомерСтрокиСпецификации = СтрокаДереваЗначений.НомерСтрокиСпецификации;
		Попытка
			Строка = СпецификацияОбъект[ИмяТабличнойЧасти].Получить(НомерСтрокиСпецификации - 1);
		Исключение
			ОбщегоНазначения.Сообщение("Не удалось получить строку № " + НомерСтрокиСпецификации + " " + ТекстСообщения + " спецификации: " + СпецификацияОбъект);
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецПопытки;
		
	Иначе
		 СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьЗаписиСтрокиСпецификации()

// Процедура записывает изменение в строку исходных комплектующих.
//
Процедура ЗаписатьСтрокуСпецификации(СтрокаДереваЗначений)
	
	Если ЗначениеЗаполнено(СпецификацияОбъект.Ссылка) Тогда
		
		ТекстСообщения = "";
		ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиСпецификации(СтрокаДереваЗначений, ТекстСообщения);
		Если ИмяТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		НомерСтрокиСпецификации = СтрокаДереваЗначений.НомерСтрокиСпецификации;
		Попытка
			Строка = СпецификацияОбъект[ИмяТабличнойЧасти].Получить(НомерСтрокиСпецификации - 1);
		Исключение
			ОбщегоНазначения.Сообщение("Не удалось получить строку № " + НомерСтрокиСпецификации + " " + ТекстСообщения + " спецификации: " + СпецификацияОбъект);
			Возврат;
		КонецПопытки;
		
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДереваЗначений);
		Если ИмяТабличнойЧасти = "ИсходныеКомплектующие" Тогда
			Строка.Спецификация	= СтрокаДереваЗначений.ОсновнаяСпецификация;
		КонецЕсли;
		
		СпецификацияОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьСтрокуСпецификации()

// Процедура удаляет строку исходных комплектующих в спецификации.
//
Процедура УдалитьСтрокуСпецификации(СтрокаДереваЗначений, Отказ)
	
	Если ЗначениеЗаполнено(СпецификацияОбъект.Ссылка) И СтрокаДереваЗначений.НомерСтрокиСпецификации <> 0 Тогда
		
		ТекстСообщения = "";
		ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиСпецификации(СтрокаДереваЗначений, ТекстСообщения);
		Если ИмяТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НомерСтрокиСпецификации = СтрокаДереваЗначений.НомерСтрокиСпецификации;
		Попытка 
			СпецификацияОбъект[ИмяТабличнойЧасти].Удалить(НомерСтрокиСпецификации - 1);
		Исключение
			ОбщегоНазначения.Сообщение("Не удалось удалить строку № " + НомерСтрокиСпецификации + " " + ТекстСообщения + " спецификации: " + СпецификацияОбъект);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		СпецификацияОбъект.Записать();
		
		СтрокаРодитель = СтрокаДереваЗначений.Родитель;
		Если СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие
		 ИЛИ СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия
		 ИЛИ СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы Тогда
			СтрокаРодитель.Количество = СтрокаРодитель.Количество - 1;
		КонецЕсли;
		
		ЗаполнитьСтрокиДереваСпецификаций(СтрокаРодитель);
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьСтрокуСпецификации()

// Процедура записывает строки дерева спецификаций в регистр сведений.
//
Процедура СохранитьДеревоСпецификацийВРегистр()
	
	Если ДеревоСпецификаций.Строки.Количество() = 0
	 ИЛИ НЕ ЗначениеЗаполнено(ДеревоСпецификаций.Строки[0].Спецификация) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим значение временного регистра сведений.
	НаборЗаписей = РегистрыСведений.ДеревоСпецификаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(КлючОтчета, Истина);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Параметры = Новый Структура("ПараметрыВыпуска, КоличествоУровнейРазузлования, ДатаСпецификации");
	
	РезультатРазузлования = Новый Структура("ИсходныеКомплектующие");
		
	СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Количество, Спецификация");
	СтрокаДереваЗначений = ДеревоСпецификаций.Строки[0];
	ЗаполнитьЗначенияСвойств(СтруктураИсточник, СтрокаДереваЗначений);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Очистить();
	СтруктураПоиска.Вставить("Номенклатура", СтрокаДереваЗначений.Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаДереваЗначений.ХарактеристикаНоменклатуры);
	
	МассивСтрок = СтрокаДереваЗначений.ОсновнаяСпецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0
	   И Не ФормироватьОтчетыНаЕдиницуПродукции
	Тогда
		СтрокаВыходногоИзделия = МассивСтрок[0];
		КоличествоВыходногоИзделия = СтрокаВыходногоИзделия.Количество * СтрокаВыходногоИзделия.ЕдиницаИзмерения.Коэффициент;
		
		// Пересчитаем количество выходного изделия в единицы хранения.
		Если ЗначениеЗаполнено(СтрокаВыходногоИзделия.Номенклатура.ЕдиницаХраненияОстатков) И СтрокаВыходногоИзделия.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент <> 0 Тогда
			КоличествоВыходногоИзделия = КоличествоВыходногоИзделия / СтрокаВыходногоИзделия.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		КонецЕсли;
	Иначе
		КоличествоВыходногоИзделия = 1;
	КонецЕсли;
	
	СтруктураИсточник.Количество = КоличествоВыходногоИзделия;
	СтруктураИсточник.Коэффициент = СтруктураИсточник.ЕдиницаИзмерения.Коэффициент;
	
	Параметры.КоличествоУровнейРазузлования = КоличествоУровней;
	Параметры.ДатаСпецификации = Дата;
		
	МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточник, РезультатРазузлования, Параметры);
		
	Если МассивОшибок.Количество() > 0 Тогда
			
		Для каждого Ошибка из МассивОшибок Цикл
				
			ОбщегоНазначения.Сообщение("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
			ОбщегоНазначения.Сообщение(" Спецификация: " + Ошибка.Спецификация);
			ОбщегоНазначения.Сообщение(" Номер строки: " + Ошибка.НомерСтроки);
			ОбщегоНазначения.Сообщение(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
			
		КонецЦикла;
			
	КонецЕсли;
		
	Если РезультатРазузлования.ИсходныеКомплектующие = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ИсходныеКомплектующие = РезультатРазузлования.ИсходныеКомплектующие;
	
	// Пересчитаем количество материала в единицы хранения.
	Для Каждого Строка Из ИсходныеКомплектующие Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура.ЕдиницаХраненияОстатков) И Строка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент <> 0 Тогда
			Строка.Количество = Строка.Количество * Строка.Коэффициент / Строка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ИсходныеКомплектующие.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Уровень, Спецификация, СтатьяЗатрат, ВидВоспроизводства, ТочкаМаршрута, НомерОперацииМаршрута", "Количество");
	
	Для Каждого Строка Из ИсходныеКомплектующие Цикл
		
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Ключ 						= КлючОтчета;
		НоваяСтрока.НомерСтрокиДерева 			= 0;
		НоваяСтрока.Уровень 					= Строка.Уровень;
		НоваяСтрока.ВидСтроки 					= Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
		НоваяСтрока.ВидНоменклатуры 			= Строка.Номенклатура.ВидНоменклатуры;
		НоваяСтрока.ОсновнаяСпецификация 		= Строка.Спецификация;
		НоваяСтрока.ВидНорматива 				= Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
		
	НаборЗаписей.Записать();
	
КонецПроцедуры // СохранитьДеревоСпецификацийВРегистр()

// Процедура очищает набор записей.
//
Процедура ОчиститьНаборЗаписей()
	
	// Очистим значение временного регистра сведений.
	НаборЗаписей = РегистрыСведений.ДеревоСпецификаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(КлючОтчета, Истина);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры // ОчиститьНаборЗаписей()

// Процедура обработки ввода формулы.
//
Процедура ВводФормулы(Элемент)
	
	Форма = Обработки.ВводФормулы.ПолучитьФорму("ФормаВводаФормулы", ЭтаФорма, "дляФормаВводаФормулы");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция ввода формулы не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	
	
	// Передача параметров в форму.
	Форма.СправочникОбъект = ЭтотОбъект;
	Форма.НачальноеЗначениеВыбора = Элемент.Значение;
	Форма.РежимВыбора = Истина;
	
	мФормаВводаФормулы = Форма;
	
	Форма.Открыть();
	
КонецПроцедуры // ВводФормулы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает / снимает признак чередования цветов строк в списках.
//
Процедура УправлениеЧередованимЦветовСтрок()
	
	ЭлементыФормы.ДеревоСпецификаций.ЧередованиеЦветовСтрок 			  = ЧередованиеЦветовСтрок;
	ЭлементыФормы.ДеревоНоменклатуры.ЧередованиеЦветовСтрок 			  = ЧередованиеЦветовСтрок;
	ЭлементыФормы.СписокНоменклатура.ЧередованиеЦветовСтрок 			  = ЧередованиеЦветовСтрок;
	ЭлементыФормы.СписокХарактеристикиНоменклатуры.ЧередованиеЦветовСтрок = ЧередованиеЦветовСтрок;
	ЭлементыФормы.СписокСпецификацииНоменклатуры.ЧередованиеЦветовСтрок   = ЧередованиеЦветовСтрок;
	ЭлементыФормы.СписокНоменклатураОтдельный.ЧередованиеЦветовСтрок      = ЧередованиеЦветовСтрок;
	ЭлементыФормы.СписокСпецификацииОтдельный.ЧередованиеЦветовСтрок      = ЧередованиеЦветовСтрок;
	
КонецПроцедуры // УправлениеЧередованимЦветовСтрок()

// Процедура - устанавливает видимость элементов формы.
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.ДеревоСпецификаций.Колонки.ХарактеристикаНоменклатуры.Видимость = ИспользуютсяХарактеристикиНоменклатуры;
	
	Если ИспользуютсяХарактеристикиНоменклатуры Тогда
		ЭлементыФормы.ПанельСпецификации.ТекущаяСтраница = ЭлементыФормы.ПанельСпецификации.Страницы.СпецификацииХарактеристики;
	Иначе
		ЭлементыФормы.ПанельСпецификации.ТекущаяСтраница = ЭлементыФормы.ПанельСпецификации.Страницы.Спецификации;
	КонецЕсли;
	
	Если ПоказыватьДеревоНоменклатуры Тогда
		ЭлементыФормы.ПанельНоменклатура.ТекущаяСтраница = ЭлементыФормы.ПанельНоменклатура.Страницы.ДеревоНоменклатуры;
	Иначе
		ЭлементыФормы.ПанельНоменклатура.ТекущаяСтраница = ЭлементыФормы.ПанельНоменклатура.Страницы.Номенклатура;
	КонецЕсли;
	
	ЭлементыФормы.СписокСпецификацииНоменклатуры.Колонки.ВидСпецификации.Видимость = УправлениеПроизводством.ИспользоватьВидСпецификации(ИспользоватьТолькоСборочныеСпецификации);
	ЭлементыФормы.СписокСпецификацииОтдельный.Колонки.ВидСпецификации.Видимость = УправлениеПроизводством.ИспользоватьВидСпецификации(ИспользоватьТолькоСборочныеСпецификации);
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПослеВосстановленияЗначений" формы.
//
Процедура ПослеВосстановленияЗначений()
	
	БылоВосстановлениеЗначений = Истина;
	
КонецПроцедуры // ПослеВосстановленияЗначений()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если Не БылоВосстановлениеЗначений Тогда
		РедактироватьВДиалоге 			= Истина;
		РазворачиватьДеревоСпецификаций = Истина;
		
		ЗапрашиватьПодтверждениеПриСменеСпецификации = Истина;
		ЗапрашиватьПодтверждениеПриЗакрытии			 = Истина;
	КонецЕсли;
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры".
	ИспользуютсяХарактеристикиНоменклатуры = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.ДеревоСпецификаций.Колонки);
	
	УстановитьВидимость();
	УправлениеЧередованимЦветовСтрок();
	ЗаполнитьДеревоСпецификаций();
	
	// Установим видимость в зависимости от использования версий спецификаций.
	ИспользоватьВерсииСпецификацийНоменклатуры = Константы.ИспользоватьВерсииСпецификацийНоменклатуры.Получить();
	
	ЭлементыФормы.СписокСпецификацииНоменклатуры.Колонки.КодВерсии.Видимость 		   = ИспользоватьВерсииСпецификацийНоменклатуры;
	ЭлементыФормы.СписокСпецификацииНоменклатуры.Колонки.КодВерсии.ИзменятьВидимость = ИспользоватьВерсииСпецификацийНоменклатуры;
	
	ЭлементыФормы.СписокСпецификацииОтдельный.Колонки.КодВерсии.Видимость 		   = ИспользоватьВерсииСпецификацийНоменклатуры;
	ЭлементыФормы.СписокСпецификацииОтдельный.Колонки.КодВерсии.ИзменятьВидимость = ИспользоватьВерсииСпецификацийНоменклатуры;
	
	Если Не ИспользоватьВерсииСпецификацийНоменклатуры Тогда
		
		ИндексКнопкиСоздатьВерсию = ЭлементыФормы.КоманднаяПанельСпецификации.Кнопки.Индекс(ЭлементыФормы.КоманднаяПанельСпецификации.Кнопки.СоздатьВерсию);
		Если ИндексКнопкиСоздатьВерсию > -1 Тогда
			ЭлементыФормы.КоманднаяПанельСпецификации.Кнопки.Удалить(ИндексКнопкиСоздатьВерсию);
		КонецЕсли;
		
		МенюПерейти = ЭлементыФормы.КоманднаяПанельСпецификации.Кнопки.Подменю2;
		ИндексКнопкиВерсии = МенюПерейти.Кнопки.Индекс(МенюПерейти.Кнопки.ВерсииСпецификации);
		Если ИндексКнопкиСоздатьВерсию > -1 Тогда
			МенюПерейти.Кнопки.Удалить(ИндексКнопкиВерсии);
		КонецЕсли;
		
		ИндексКнопкиСоздатьВерсию = ЭлементыФормы.КоманднаяПанельСписокСпецификацииНоменклатуры.Кнопки.Индекс(ЭлементыФормы.КоманднаяПанельСписокСпецификацииНоменклатуры.Кнопки.СоздатьВерсию);
		Если ИндексКнопкиСоздатьВерсию > -1 Тогда
			ЭлементыФормы.КоманднаяПанельСписокСпецификацииНоменклатуры.Кнопки.Удалить(ИндексКнопкиСоздатьВерсию);
		КонецЕсли;
		
		МенюПерейти = ЭлементыФормы.КоманднаяПанельСписокСпецификацииНоменклатуры.Кнопки.Подменю2;
		ИндексКнопкиВерсии = МенюПерейти.Кнопки.Индекс(МенюПерейти.Кнопки.ВерсииСпецификации);
		Если ИндексКнопкиСоздатьВерсию > -1 Тогда
			МенюПерейти.Кнопки.Удалить(ИндексКнопкиВерсии);
		КонецЕсли;
		
	КонецЕсли;
	
	КлючОтчета = Новый УникальныйИдентификатор();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриСменеСтраницы" панели "ОсновнаяПанель".
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = 0 И ОбновитьДеревоСпецификаций Тогда
		ЗаполнитьДеревоСпецификаций();
		ОбновитьДеревоСпецификаций = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОчиститьНаборЗаписей();
		
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если Источник = мФормаВводаФормулы Тогда
		Формула = ЗначениеВыбора;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Одновить" командной панели
// табличного поля "ДеревоСпецификаций", осуществляет обновление
// данных в дереве спецификаций.
//
Процедура КоманднаяПанельДеревоСпецификацийОбновить(Кнопка)
	
	ЗаполнитьДеревоСпецификаций();
	
КонецПроцедуры // КоманднаяПанельОбновить()

// Процедура вызывается при нажатии кнопки "НайтиВСписке" командной панели
// табличного поля "ДеревоСпецификаций", осуществляет позиционирование 
// текущего элемента в списке справочника "Номенклатура".
//
Процедура КоманднаяПанельДеревоСпецификацийНайтиВСписке(Кнопка)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	Если ТипЗнч(СтрокаДереваЗначений.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ЭлементыФормы.СписокНоменклатура.ТекущаяСтрока 			= СтрокаДереваЗначений.Номенклатура;
		ЭлементыФормы.СписокНоменклатураОтдельный.ТекущаяСтрока = СтрокаДереваЗначений.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельДеревоСпецификацийНайтиВСписке()

// Процедура вызывается при нажатии кнопки "Печать дерева спецификаций" командной панели
// табличного поля "ДеревоСпецификаций".
//
Процедура КоманднаяПанельДеревоСпецификацийПечатьДеревоСпецификаций(Кнопка)
	
	ПечатьДереваСпецификаций(ДеревоСпецификаций);
	
КонецПроцедуры // КоманднаяПанельДеревоСпецификацийПечатьДеревоСпецификации()

// Процедура вызывается при нажатии кнопки "Печать покупных изделий" командной панели
// табличного поля "ДеревоСпецификаций".
//
Процедура КоманднаяПанельДеревоСпецификацийПечатьПокупныеИзделия(Кнопка)
	
	ПечатьПокупныеИзделия(ДеревоСпецификаций);
	
КонецПроцедуры // КоманднаяПанельДеревоСпецификацийПечатьПокупныеИзделия()

// Процедура вызывается при нажатии кнопки "Печать полуфабрикаты" командной панели
// табличного поля "ДеревоСпецификаций".
//
Процедура КоманднаяПанельДеревоСпецификацийПечатьПолуфабрикаты(Кнопка)
	
	ПечатьПолуфабрикаты(ДеревоСпецификаций);
	
КонецПроцедуры // КоманднаяПанельДеревоСпецификацийПечатьПолуфабрикаты()

// Процедура - обработчик события "ПриИзменении" флажка "ЧередованиеЦветовСтрок".
//
Процедура ЧередованиеЦветовСтрокПриИзменении(Элемент)
	
	УправлениеЧередованимЦветовСтрок();
	
КонецПроцедуры // ЧередованиеЦветовСтрокПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ПоказыватьДеревоНоменклатуры".
//
Процедура ПоказыватьДеревоНоменклатурыПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ПоказыватьДеревоНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "РазворачиватьДеревоСпецификаций".
//
Процедура РазворачиватьДеревоСпецификацийПриИзменении(Элемент)
	
	ОбновитьДеревоСпецификаций = Истина;
	
КонецПроцедуры // РазворачиватьДеревоСпецификацийПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ВыводитьВыходныеИзделия".
//
Процедура ВыводитьВыходныеИзделияПриИзменении(Элемент)
	
	ОбновитьДеревоСпецификаций = Истина;

КонецПроцедуры // ВыводитьВыходныеИзделияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ВыводитьВозвратныеОтходы".
//
Процедура ВыводитьВозвратныеОтходыПриИзменении(Элемент)
	
	ОбновитьДеревоСпецификаций = Истина;
	
КонецПроцедуры // ВыводитьВозвратныеОтходыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "КоличествоУровней".
//
Процедура КоличествоУровнейПриИзменении(Элемент)
	
	ОбновитьДеревоСпецификаций = Истина;
	
КонецПроцедуры // КоличествоУровнейПриИзменении()

Процедура КоманднаяПанельДеревоСпецификацийОтчетПоДеревуСпецификаций(Кнопка)
	
	СохранитьДеревоСпецификацийВРегистр();
	
	ФормаОтчета = ЭтотОбъект.ПолучитьФорму("ФормаОтчета", ЭтаФорма);
	ФормаОтчета.Ключ = КлючОтчета;
	ФормаОтчета.Открыть();
	
КонецПроцедуры // КоманднаяПанельДеревоСпецификацийОтчетПоДеревуСпецификаций()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ДЕРЕВО СПЕЦИФИКАЦИЙ"

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.КонечнаяПродукция
	 ИЛИ ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие
	 ИЛИ ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия
	 ИЛИ ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы Тогда
		КоличествоТолькоПросмотр = Истина;
	Иначе
		КоличествоТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ОформлениеСтроки.Ячейки.Количество.ТолькоПросмотр <> КоличествоТолькоПросмотр Тогда
		ОформлениеСтроки.Ячейки.Количество.ТолькоПросмотр 		= КоличествоТолькоПросмотр;
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр = КоличествоТолькоПросмотр;
		
		ОформлениеСтроки.Ячейки.Количество.ОтображатьТекст 		= Ложь;
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ОтображатьТекст = Ложь;
	КонецЕсли;
	
	Если КоличествоТолькоПросмотр ИЛИ ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие Тогда
		СтатьяЗатратТолькоПросмотр = Истина;
	Иначе
		СтатьяЗатратТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ОформлениеСтроки.Ячейки.СтатьяЗатрат.ТолькоПросмотр <> СтатьяЗатратТолькоПросмотр Тогда
		ОформлениеСтроки.Ячейки.СтатьяЗатрат.ТолькоПросмотр = СтатьяЗатратТолькоПросмотр;
	КонецЕсли;
	Если ОформлениеСтроки.Ячейки.ВидВоспроизводства.ТолькоПросмотр <> СтатьяЗатратТолькоПросмотр Тогда
		ОформлениеСтроки.Ячейки.ВидВоспроизводства.ТолькоПросмотр = СтатьяЗатратТолькоПросмотр;
	КонецЕсли;
	Если ОформлениеСтроки.Ячейки.Формула.ТолькоПросмотр <> СтатьяЗатратТолькоПросмотр Тогда
		ОформлениеСтроки.Ячейки.Формула.ТолькоПросмотр = СтатьяЗатратТолькоПросмотр;
	КонецЕсли;
	Если ОформлениеСтроки.Ячейки.УказаниеНорматива.ТолькоПросмотр <> СтатьяЗатратТолькоПросмотр Тогда
		ОформлениеСтроки.Ячейки.УказаниеНорматива.ТолькоПросмотр = СтатьяЗатратТолькоПросмотр;
	КонецЕсли;
	Если ОформлениеСтроки.Ячейки.СписаниеКомплектующей.ТолькоПросмотр <> СтатьяЗатратТолькоПросмотр Тогда
		ОформлениеСтроки.Ячейки.СписаниеКомплектующей.ТолькоПросмотр = СтатьяЗатратТолькоПросмотр;
	КонецЕсли;
	Если ОформлениеСтроки.Ячейки.СвойствоДляСписания.ТолькоПросмотр <> СтатьяЗатратТолькоПросмотр Тогда
		ОформлениеСтроки.Ячейки.СвойствоДляСписания.ТолькоПросмотр = СтатьяЗатратТолькоПросмотр;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие
	 ИЛИ ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия
	 ИЛИ ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы Тогда
		НоменклатураТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Номенклатура.Текст = "" + ДанныеСтроки.ВидСтроки + " (" + ДанныеСтроки.Количество + ")";
	Иначе
		НоменклатураТолькоПросмотр = Ложь;
		Если ДанныеСтроки.Номенклатура = Неопределено Тогда
		ИначеЕсли ВыводитьДляНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ОформлениеСтроки.Ячейки.Номенклатура.Текст = "" + ДанныеСтроки.Номенклатура.Код + " " + ДанныеСтроки.Номенклатура;
		ИначеЕсли ВыводитьДляНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул
		        И ДанныеСтроки.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.Узел
				И Не ПустаяСтрока(ДанныеСтроки.Номенклатура.Артикул)Тогда
			ОформлениеСтроки.Ячейки.Номенклатура.Текст = "" + СокрЛП(ДанныеСтроки.Номенклатура.Артикул) + " " + ДанныеСтроки.Номенклатура;
		КонецЕсли;
	КонецЕсли;
	
	Если ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр <> НоменклатураТолькоПросмотр Тогда
		ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр 			  = НоменклатураТолькоПросмотр;
		ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр = НоменклатураТолькоПросмотр;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.КонечнаяПродукция Тогда
		СпецификацияТолькоПросмотр = Ложь;
	Иначе
		СпецификацияТолькоПросмотр = ДанныеСтроки.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие
								 И (НоменклатураТолькоПросмотр
								 ИЛИ (ДанныеСтроки.ВидВоспроизводства <> Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка
								 	  И ДанныеСтроки.ВидВоспроизводства <> Перечисления.ВидыВоспроизводстваНоменклатуры.Производство));
	КонецЕсли;
									  
	Если ОформлениеСтроки.Ячейки.ОсновнаяСпецификация.ТолькоПросмотр <> СпецификацияТолькоПросмотр Тогда
		ОформлениеСтроки.Ячейки.ОсновнаяСпецификация.ТолькоПросмотр 	  = СпецификацияТолькоПросмотр;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.КонечнаяПродукция
	 ИЛИ ДанныеСтроки.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура Тогда
	 
	 	Если ДанныеСтроки.ЕстьСпецификации И НЕ ЗначениеЗаполнено(ДанныеСтроки.ОсновнаяСпецификация) Тогда
			ОформлениеСтроки.Ячейки.ОсновнаяСпецификация.ОтметкаНезаполненного = Истина;
		Иначе
			ОформлениеСтроки.Ячейки.ОсновнаяСпецификация.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоСпецификацийПриВыводеСтроки()

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийПередНачаломИзменения(Элемент, Отказ)
	
	СтрокаДереваЗначений = Элемент.ТекущиеДанные;
	Если СтрокаДереваЗначений.Уровень() > 0 Тогда
		ПередНачаломИзмененияСпецификации(СтрокаДереваЗначений, Отказ);
			
		Если РедактироватьВДиалоге И Не Отказ Тогда
			ОткрытьСтрокуСпецификации(ЭлементыФормы, СтрокаДереваЗначений);
			ПриОкончанииИзмененияСпецификации();
			
			ЗаполнитьСтрокиДереваСпецификаций(СтрокаДереваЗначений);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекущаяОсновнаяСпецификация = СтрокаДереваЗначений.ОсновнаяСпецификация;
	КонецЕсли;
	
КонецПроцедуры // ДеревоСпецификацийПередНачаломИзменения()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СтрокаДереваЗначений = Элемент.ТекущиеДанные;
	
	Если СтрокаДереваЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваЗначений.Уровень() > 0 Тогда
		
		Если НоваяСтрока И Не РедактироватьВДиалоге Тогда
			ЗаписатьСтрокуСпецификации(СтрокаДереваЗначений);
		КонецЕсли;
		
		ПриОкончанииИзмененияСпецификации();
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоСпецификацийПриОкончанииРедактирования()

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	СтрокаДереваЗначений = Элемент.ТекущиеДанные;
	Если СтрокаДереваЗначений = Неопределено Тогда
		
	ИначеЕсли СтрокаДереваЗначений.Уровень() = 0 И НЕ ЗначениеЗаполнено(СтрокаДереваЗначений.Спецификация) Тогда
		СоздатьНовуюСпецификацию(СтрокаДереваЗначений, СтрокаДереваЗначений.Номенклатура, СтрокаДереваЗначений.ХарактеристикаНоменклатуры);
		Отказ = Истина;
	ИначеЕсли Копирование 
		    И (СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие
			   ИЛИ СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия
			   ИЛИ СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы) Тогда
		Отказ = Истина;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДереваЗначений.Спецификация) Тогда
		
		ДобавитьСтроку = Истина;
		Если ВыводитьМенюПриВводеНовойСтроки 
		   И СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура Тогда
			Меню = Новый СписокЗначений;
			Меню.Добавить("ДобавитьСтроку", 	  "Добавить новую строку");
			Меню.Добавить("ДобавитьСпецификацию", "Добавить новую спецификацию");
			ВыбранныйЭлемент = ВыбратьИзМеню(Меню, Элемент);
			
			Если ВыбранныйЭлемент = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			Если ВыбранныйЭлемент.Значение = "ДобавитьСтроку" Тогда
				ДобавитьСтроку = Истина;
			Иначе
				ДобавитьСтроку = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			ПередНачаломИзмененияСпецификации(СтрокаДереваЗначений, Отказ);
			Если РедактироватьВДиалоге И Не Отказ Тогда
				ДобавитьСтрокуСпецификации(СтрокаДереваЗначений, , , Копирование);
				Отказ = Истина;
			Иначе
				Если СтрокаДереваЗначений.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие
				   И СтрокаДереваЗначений.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия
				   И СтрокаДереваЗначений.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы
				   И Не Копирование Тогда
				   ДобавитьСтрокуСпецификации(СтрокаДереваЗначений, , , Копирование);
				   Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СоздатьНовуюСпецификацию(СтрокаДереваЗначений, СтрокаДереваЗначений.Номенклатура, СтрокаДереваЗначений.ХарактеристикаНоменклатуры);
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДеревоСпецификацийПередНачаломДобавления()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	СтрокаДереваЗначений = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		СтрокаРодитель = СтрокаДереваЗначений.Родитель;
		Если СтрокаРодитель = Неопределено Тогда
			СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие;
		ИначеЕсли СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие Тогда
			СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
		ИначеЕсли СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия Тогда
			СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие;
		ИначеЕсли СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы Тогда
			СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныйОтход;
		КонецЕсли;
		
		Если СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура
		   И НЕ ЗначениеЗаполнено(СтрокаДереваЗначений.ВидНорматива) Тогда
			СтрокаДереваЗначений.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДереваЗначений.Номенклатура) Тогда
			СтрокаДереваЗначений.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
		Если СтрокаДереваЗначений.Уровень() > 0 Тогда
			ТекстСообщения = "";
			ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиСпецификации(СтрокаДереваЗначений, ТекстСообщения);
			Если ИмяТабличнойЧасти = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			НоваяСтрока = СпецификацияОбъект[ИмяТабличнойЧасти].Добавить();
			СпецификацияОбъект.Записать();
			
			СтрокаДереваЗначений.Спецификация 			 = СпецификацияОбъект.Ссылка;
			СтрокаДереваЗначений.НомерСтрокиСпецификации = НоваяСтрока.НомерСтроки;
		КонецЕсли;
		
	Иначе
		
		Если СтрокаДереваЗначений.Номенклатура = Неопределено Тогда
			СтрокаДереваЗначений.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ДеревоСпецификацийПриНачалеРедактирования()

// Процедура - обработчик события "ПередУдалением" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийПередУдалением(Элемент, Отказ)
	
	СтрокаДереваЗначений = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаДереваЗначений.Спецификация) Тогда
		ПередНачаломИзмененияСпецификации(СтрокаДереваЗначений, Отказ);
		УдалитьСтрокуСпецификации(СтрокаДереваЗначений, Отказ);
		ПриОкончанииИзмененияСпецификации();
	КонецЕсли;
	
КонецПроцедуры // ДеревоСпецификацийПередУдалением()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОЛОНОК ТАБЛИЧНОГО ПОЛЯ "ДЕРЕВО СПЕЦИФИКАЦИЙ"

// Процедура - обработчик события "ПриИзменении" поля "Номенклатура" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийНоменклатураПриИзменении(Элемент)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	
	Номенклатура = Элемент.Значение;
	ПриИзмененииНоменклатурыИХарактеристики(СтрокаДереваЗначений, Номенклатура)
	
КонецПроцедуры // ДеревоСпецификацийНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ХарактеристикаНоменклатуры" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	Номенклатура = СтрокаДереваЗначений.Номенклатура;
	ХарактеристикаНоменклатура = Элемент.Значение;
	ПриИзмененииНоменклатурыИХарактеристики(СтрокаДереваЗначений, Номенклатура, ХарактеристикаНоменклатура);
	
КонецПроцедуры // ДеревоСпецификацийХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОсновнаяСпецификация" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийОсновнаяСпецификацияПриИзменении(Элемент)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	
	Если СтрокаДереваЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.КонечнаяПродукция Тогда
		СтандартнаяОбработка = Истина;
		Если УстанавливатьСпецификациюКакОсновную Тогда
			ЗаписатьСпецификациюПоУмолчанию(СтрокаДереваЗначений.Номенклатура, СтрокаДереваЗначений.ХарактеристикаНоменклатуры, СтрокаДереваЗначений.ОсновнаяСпецификация, СтандартнаяОбработка);
		КонецЕсли;
		Если Не СтандартнаяОбработка Тогда
			СтрокаДереваЗначений.ОсновнаяСпецификация = ТекущаяОсновнаяСпецификация;
			Возврат;
		КонецЕсли;
	Иначе
		ЗаписатьСтрокуСпецификации(СтрокаДереваЗначений);
	КонецЕсли;
	
	ЗаполнитьСтрокиДереваСпецификаций(СтрокаДереваЗначений);
	
КонецПроцедуры // ДеревоСпецификацийОсновнаяСпецификацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля "ОсновнаяСпецификация" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийОсновнаяСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	Номенклатура = СтрокаДереваЗначений.Номенклатура;
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(Номенклатура, Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры // ДеревоСпецификацийСпецификацияНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля "Количество" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийКоличествоПриИзменении(Элемент)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	ЗаписатьСтрокуСпецификации(СтрокаДереваЗначений);
	
КонецПроцедуры // ДеревоСпецификацийКоличествоПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "Количество" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийКоличествоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	ПроверитьВозможностьЗаписиСтрокиСпецификации(СтрокаДереваЗначений, СтандартнаяОбработка);
	
КонецПроцедуры // ДеревоСпецификацийКоличествоОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля "ЕдиницаИзмерения" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	ЗаписатьСтрокуСпецификации(СтрокаДереваЗначений);
	
КонецПроцедуры // ДеревоСпецификацийЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "ЕдиницаИзмерения" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	ПроверитьВозможностьЗаписиСтрокиСпецификации(СтрокаДереваЗначений, СтандартнаяОбработка);
	
КонецПроцедуры // ДеревоСпецификацийЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля "СтатьяЗатрат" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	ЗаписатьСтрокуСпецификации(СтрокаДереваЗначений);
	
КонецПроцедуры // ДеревоСпецификацийСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "СтатьяЗатрат" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийСтатьяЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаДереваЗначений = ЭлементыФормы.ДеревоСпецификаций.ТекущиеДанные;
	ПроверитьВозможностьЗаписиСтрокиСпецификации(СтрокаДереваЗначений, СтандартнаяОбработка);
	
КонецПроцедуры // ДеревоСпецификацийСтатьяЗатратОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля "Формула" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийФормулаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВводФормулы(Элемент);
	
КонецПроцедуры // ДеревоСпецификацийФормулаНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НОМЕНКЛАТУРА"

// Процедура - обработчик события "Выбор" табличного поля "СписокНоменклатура".
//
Процедура СписокНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Не ВыбраннаяСтрока.ЭтоГруппа Тогда
		КонечнаяПродукция 				= ВыбраннаяСтрока;
		КонечнаяХарактеристикаПродукции = Неопределено;
		
		ХарактеристикаНоменклатуры = ЭлементыФормы.СписокХарактеристикиНоменклатуры.ТекущаяСтрока;
		Если ИспользуютсяХарактеристикиНоменклатуры И ХарактеристикаНоменклатуры <> Неопределено 
		   И ХарактеристикаНоменклатуры.Владелец = ВыбраннаяСтрока Тогда
			КонечнаяХарактеристикаПродукции = ХарактеристикаНоменклатуры;
		Иначе
			КонечнаяХарактеристикаПродукции = Неопределено;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ЗаполнитьДеревоСпецификаций(ВыбраннаяСтрока, КонечнаяХарактеристикаПродукции);
	КонецЕсли;
	
КонецПроцедуры // СписокНоменклатураВыбор()

// Процедура - обработчик события "Выбор" табличного поля "СписокНоменклатураОтдельный".
//
Процедура СписокНоменклатураОтдельныйВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Не ВыбраннаяСтрока.ЭтоГруппа Тогда
		КонечнаяПродукция 				= ВыбраннаяСтрока;
		
		ХарактеристикаНоменклатуры = ЭлементыФормы.СписокХарактеристикиНоменклатуры.ТекущаяСтрока;
		Если ИспользуютсяХарактеристикиНоменклатуры И ХарактеристикаНоменклатуры <> Неопределено 
		   И ХарактеристикаНоменклатуры.Владелец = ВыбраннаяСтрока Тогда
			КонечнаяХарактеристикаПродукции = ХарактеристикаНоменклатуры;
		Иначе
			КонечнаяХарактеристикаПродукции = Неопределено;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ЗаполнитьДеревоСпецификаций(ВыбраннаяСтрока, КонечнаяХарактеристикаПродукции);
	КонецЕсли;
	
КонецПроцедуры // СписокНоменклатураОтдельныйВыбор()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "СписокНоменклатура".
//
Процедура СписокНоменклатураПриАктивизацииСтроки(Элемент)
	
	Номенклатура = Элемент.ТекущаяСтрока;
	Если Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокХарактеристикиНоменклатуры.Отбор.Владелец.Установить(Номенклатура);
	
	СписокСпецификацииНоменклатуры.Отбор.СпецификацииИзделийПоНоменклатуре.ВидСравнения  = ВидСравнения.Равно;
	СписокСпецификацииНоменклатуры.Отбор.СпецификацииИзделийПоНоменклатуре.Значение = Номенклатура;
	СписокСпецификацииНоменклатуры.Отбор.СпецификацииИзделийПоНоменклатуре.Использование = Истина;
	
	СписокСпецификацииОтдельный.Отбор.СпецификацииИзделийПоНоменклатуре.ВидСравнения  = ВидСравнения.Равно;
	СписокСпецификацииОтдельный.Отбор.СпецификацииИзделийПоНоменклатуре.Значение      = Номенклатура;
	СписокСпецификацииОтдельный.Отбор.СпецификацииИзделийПоНоменклатуре.Использование = Истина;
	
	ОсновнаяСпецификацияНоменклатуры = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, Неопределено, Дата);
	
КонецПроцедуры // СписокНоменклатураПриАктивизацииСтроки()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "СписокНоменклатураОтдельный".
//
Процедура СписокНоменклатураОтдельныйПриАктивизацииСтроки(Элемент)
	
	Номенклатура = Элемент.ТекущаяСтрока;
	Если Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокХарактеристикиНоменклатуры.Отбор.Владелец.Установить(Номенклатура);
	
	СписокСпецификацииНоменклатуры.Отбор.СпецификацииИзделийПоНоменклатуре.ВидСравнения  = ВидСравнения.Равно;
	СписокСпецификацииНоменклатуры.Отбор.СпецификацииИзделийПоНоменклатуре.Значение = Номенклатура;
	СписокСпецификацииНоменклатуры.Отбор.СпецификацииИзделийПоНоменклатуре.Использование = Истина;
	
	СписокСпецификацииОтдельный.Отбор.СпецификацииИзделийПоНоменклатуре.ВидСравнения  = ВидСравнения.Равно;
	СписокСпецификацииОтдельный.Отбор.СпецификацииИзделийПоНоменклатуре.Значение      = Номенклатура;
	СписокСпецификацииОтдельный.Отбор.СпецификацииИзделийПоНоменклатуре.Использование = Истина;
	
	ХарактеристикаНоменклатуры = Неопределено;
	Если ИспользуютсяХарактеристикиНоменклатуры Тогда
		ХарактеристикаНоменклатуры = ЭлементыФормы.СписокХарактеристикиНоменклатуры.ТекущаяСтрока;
		Если ХарактеристикаНоменклатуры <> Неопределено И ХарактеристикаНоменклатуры.Владелец <> Номенклатура Тогда
			ХарактеристикаНоменклатуры = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОсновнаяСпецификацияНоменклатуры = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры, Дата);
	
КонецПроцедуры // СписокНоменклатураОтдельныйПриАктивизацииСтроки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ХАРАКТЕРИСТИКИ НОМЕНКЛАТУРЫ"

// Процедура - обработчик события "Выбор" табличного поля "СписокХарактеристикиНоменклатуры".
//
Процедура СписокХарактеристикиНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Не ВыбраннаяСтрока.ЭтоГруппа Тогда
		КонечнаяПродукция 				= ВыбраннаяСтрока.Владелец;
		КонечнаяХарактеристикаПродукции = ВыбраннаяСтрока;
		
		СтандартнаяОбработка = Ложь;
		ЗаполнитьДеревоСпецификаций(ВыбраннаяСтрока.Владелец, ВыбраннаяСтрока);
	КонецЕсли;

КонецПроцедуры // СписокХарактеристикиНоменклатурыВыбор()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "СписокХарактеристикиНоменклатуры".
//
Процедура СписокХарактеристикиНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ХарактеристикаНоменклатуры = Элемент.ТекущаяСтрока;
	Если ХарактеристикаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОсновнаяСпецификацияНоменклатуры = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(ХарактеристикаНоменклатуры.Владелец, ХарактеристикаНоменклатуры, Дата);
	Обновить();
	
КонецПроцедуры // СписокХарактеристикиНоменклатурыПриАктивизацииСтроки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "СПИСОК СПЕЦИФИКАЦИЙ НОМЕНКЛАТУРЫ"

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "СписокСпецификацииНоменклатуры".
//
Процедура СписокСпецификацииНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Ссылка = ОсновнаяСпецификацияНоменклатуры Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт( , , Истина);
	Иначе
		ОформлениеСтроки.Шрифт = Новый Шрифт( , , Ложь);
	КонецЕсли;
	
КонецПроцедуры // СписокСпецификацииНоменклатурыПриВыводеСтроки()

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "СписокСпецификацииНоменклатуры".
//
Процедура СписокСпецификацииНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = Истина;	
	
	Номенклатура = Элемент.Значение.Отбор.СпецификацииИзделийПоНоменклатуре.Значение;
	Если Номенклатура.ЭтоГруппа Тогда
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	СоздатьНовуюСпецификацию(
		Неопределено, // СтрокаДереваЗначений, 
		Номенклатура, 
		Неопределено // ХарактеристикаНоменклатуры
	);
	
КонецПроцедуры // СписокСпецификацииНоменклатурыПередНачаломДобавления()

// Процедура вызывается при нажатии кнопки "УстановитьОсновнуюСпецификацию" командной панели
// "Спецификации".
//
Процедура КоманднаяПанельСписокСпецификацииНоменклатурыУстановитьОсновнуюСпецификациюНаДату(Кнопка)
	
	Период = Дата;
	
	ТекущиеДанные = ЭлементыФормы.СписокСпецификацииНоменклатуры.ТекущиеДанные;
	Спецификация = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если Спецификация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Спецификация.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
		СтрокаВыходныеИзделия = Спецификация.ВыходныеИзделия[0];
		Номенклатура = СтрокаВыходныеИзделия.Номенклатура;
		Если ИспользуютсяХарактеристикиНоменклатуры Тогда
			ХарактеристикаНоменклатура = СтрокаВыходныеИзделия.ХарактеристикаНоменклатуры;
		Иначе
			ХарактеристикаНоменклатура = Неопределено;
		КонецЕсли;
	Иначе
		ТекущиеДанные = ЭлементыФормы.СписокНоменклатура.ТекущиеДанные;
		Номенклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		Если Номенклатура = Неопределено Тогда
			ТекущиеДанные = ЭлементыФормы.СписокНоменклатураОтдельный.ТекущиеДанные;
			Номенклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		КонецЕсли;
		Если ИспользуютсяХарактеристикиНоменклатуры Тогда
			ТекущиеДанные = ЭлементыФормы.СписокХарактеристикиНоменклатуры.ТекущиеДанные;
			ХарактеристикаНоменклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		Иначе
			ХарактеристикаНоменклатура = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ВвестиДату(Период,"Дата установки версии", ЧастиДаты.Дата) Тогда
		ЗаписатьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатура, Спецификация, , Период);
		ОсновнаяСпецификацияНоменклатуры = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатура, Дата);
		СписокСпецификацииНоменклатуры.Обновить();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельСписокСпецификацииНоменклатурыУстановитьОсновнуюСпецификациюНаДату()

// Процедура вызывается при нажатии кнопки "УстановитьОсновнуюСпецификацию" командной панели
// "Спецификации".
//
Процедура КоманднаяПанельСписокСпецификацииНоменклатурыУстановитьОсновнуюСпецификациюНаРабочуюДату(Кнопка)
	
	Период = РабочаяДата;
	
	ТекущиеДанные = ЭлементыФормы.СписокСпецификацииНоменклатуры.ТекущиеДанные;
	Спецификация = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если Спецификация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Спецификация.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
		СтрокаВыходныеИзделия = Спецификация.ВыходныеИзделия[0];
		Номенклатура = СтрокаВыходныеИзделия.Номенклатура;
		Если ИспользуютсяХарактеристикиНоменклатуры Тогда
			ХарактеристикаНоменклатура = СтрокаВыходныеИзделия.ХарактеристикаНоменклатуры;
		Иначе
			ХарактеристикаНоменклатура = Неопределено;
		КонецЕсли;
	Иначе
		ТекущиеДанные = ЭлементыФормы.СписокНоменклатура.ТекущиеДанные;
		Номенклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		Если Номенклатура = Неопределено Тогда
			ТекущиеДанные = ЭлементыФормы.СписокНоменклатураОтдельный.ТекущиеДанные;
			Номенклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		КонецЕсли;
		Если ИспользуютсяХарактеристикиНоменклатуры Тогда
			ТекущиеДанные = ЭлементыФормы.СписокХарактеристикиНоменклатуры.ТекущиеДанные;
			ХарактеристикаНоменклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		Иначе
			ХарактеристикаНоменклатура = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатура, Спецификация, , Период);
	ОсновнаяСпецификацияНоменклатуры = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатура, Дата);
	СписокСпецификацииНоменклатуры.Обновить();
	
КонецПроцедуры // КоманднаяПанельСписокСпецификацииНоменклатурыУстановитьОсновнуюСпецификациюНаРабочуюДату()

// Процедура вызывается при выборе пункта "Версии спецификации" командной панели "Спецификации".
//
Процедура КоманднаяПанельСписокСпецификацииНоменклатурыВерсииСпецификации(Кнопка)
	
	Спецификация = ЭлементыФормы.СписокСпецификацииНоменклатуры.ТекущаяСтрока;
	Если Спецификация = Неопределено ИЛИ Спецификация.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСписка = Справочники.СпецификацииНоменклатуры.ПолучитьФормуСписка(, ЭтаФорма);
	
	ФормаСписка.Отбор.Код.ВидСравнения  = ВидСравнения.Равно;
	ФормаСписка.Отбор.Код.Значение      = Спецификация.Код;
	ФормаСписка.Отбор.Код.Использование = Истина;
	
	ФормаСписка.Открыть();

КонецПроцедуры // КоманднаяПанельСписокСпецификацииНоменклатурыВерсииСпецификации()

// Процедура вызывается при выборе пункта "Создать версию" командной панели "Спецификации".
//
Процедура КоманднаяПанельСписокСпецификацииНоменклатурыСоздатьВерсию(Кнопка)
	
	Спецификация = ЭлементыФормы.СписокСпецификацииНоменклатуры.ТекущаяСтрока;
	СоздатьНовуюВерсию(Спецификация);
	
КонецПроцедуры // КоманднаяПанельСписокСпецификацииНоменклатурыСоздатьВерсию()

// Процедура печатает выбранный элемент 
// Печатается та форма, которая была отпечатана при нажатии в документе кнопки
// печати по умолчанию
//
Процедура КоманднаяПанельСписокСпецификацииНоменклатурыДействиеПечать(Кнопка)
	
	Если ЭлементыФормы.СписокСпецификацииНоменклатуры.ТекущаяСтрока = Неопределено тогда
		Возврат
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокументИзФормыСписка(ЭлементыФормы.СписокСпецификацииНоменклатуры.ТекущаяСтрока.ПолучитьОбъект());
	
КонецПроцедуры // КоманднаяПанельСписокСпецификацииНоменклатурыДействиеПечать()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "СПИСОК СПЕЦИФИКАЦИЙ ОТДЕЛЬНЫЙ"

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "СписокСпецификацииОтдельный".
//
Процедура СписокСпецификацииОтдельныйПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Ссылка = ОсновнаяСпецификацияНоменклатуры Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт( , , Истина);
	Иначе
		ОформлениеСтроки.Шрифт = Новый Шрифт( , , Ложь);
	КонецЕсли;
	
КонецПроцедуры // СписокСпецификацииОтдельныйПриВыводеСтроки()

// Процедура вызывается при нажатии кнопки "УстановитьОсновнуюСпецификацию" командной панели
// "Спецификации".
//
Процедура КоманднаяПанельСпецификацииУстановитьОсновнуюСпецификациюНаДату(Кнопка)
	
	Период = Дата;
	
	ТекущиеДанные = ЭлементыФормы.СписокСпецификацииОтдельный.ТекущиеДанные;
	Спецификация = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если Спецификация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Спецификация.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
		СтрокаВыходныеИзделия = Спецификация.ВыходныеИзделия[0];
		Номенклатура = СтрокаВыходныеИзделия.Номенклатура;
		Если ИспользуютсяХарактеристикиНоменклатуры Тогда
			ХарактеристикаНоменклатура = СтрокаВыходныеИзделия.ХарактеристикаНоменклатуры;
		Иначе
			ХарактеристикаНоменклатура = Неопределено;
		КонецЕсли;
	Иначе
		ТекущиеДанные = ЭлементыФормы.СписокНоменклатура.ТекущиеДанные;
		Номенклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		Если Номенклатура = Неопределено Тогда
			ТекущиеДанные = ЭлементыФормы.СписокНоменклатураОтдельный.ТекущиеДанные;
			Номенклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		КонецЕсли;
		Если ИспользуютсяХарактеристикиНоменклатуры Тогда
			ТекущиеДанные = ЭлементыФормы.СписокХарактеристикиНоменклатуры.ТекущиеДанные;
			ХарактеристикаНоменклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		Иначе
			ХарактеристикаНоменклатура = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ВвестиДату(Период,"Дата установки версии", ЧастиДаты.Дата) Тогда
		ЗаписатьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатура, Спецификация, , Период);
		ОсновнаяСпецификацияНоменклатуры = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатура, Дата);
		СписокСпецификацииОтдельный.Обновить();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельСпецификацииУстановитьОсновнуюСпецификациюНаДату()

// Процедура вызывается при нажатии кнопки "УстановитьОсновнуюСпецификацию" командной панели
// "Спецификации".
//
Процедура КоманднаяПанельСпецификацииУстановитьОсновнуюСпецификациюНаРабочуюДату(Кнопка)
	
	Период = РабочаяДата;
	
	ТекущиеДанные = ЭлементыФормы.СписокСпецификацииОтдельный.ТекущиеДанные;
	Спецификация = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если Спецификация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Спецификация.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
		СтрокаВыходныеИзделия = Спецификация.ВыходныеИзделия[0];
		Номенклатура = СтрокаВыходныеИзделия.Номенклатура;
		Если ИспользуютсяХарактеристикиНоменклатуры Тогда
			ХарактеристикаНоменклатура = СтрокаВыходныеИзделия.ХарактеристикаНоменклатуры;
		Иначе
			ХарактеристикаНоменклатура = Неопределено;
		КонецЕсли;	
	Иначе
		ТекущиеДанные = ЭлементыФормы.СписокНоменклатура.ТекущиеДанные;
		Номенклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		Если Номенклатура = Неопределено Тогда
			ТекущиеДанные = ЭлементыФормы.СписокНоменклатураОтдельный.ТекущиеДанные;
			Номенклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		КонецЕсли;
		Если ИспользуютсяХарактеристикиНоменклатуры Тогда
			ТекущиеДанные = ЭлементыФормы.СписокХарактеристикиНоменклатуры.ТекущиеДанные;
			ХарактеристикаНоменклатура = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
		Иначе
			ХарактеристикаНоменклатура = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатура, Спецификация, , Период);
	ОсновнаяСпецификацияНоменклатуры = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатура, Дата);
	СписокСпецификацииОтдельный.Обновить();
	
КонецПроцедуры // КоманднаяПанельСпецификацииУстановитьОсновнуюСпецификациюНаРабочуюДата()

// Процедура вызывается при выборе пункта "Версии спецификации" командной панели "Спецификации".
//
Процедура КоманднаяПанельСпецификацииВерсииСпецификации(Кнопка)
	
	Спецификация = ЭлементыФормы.СписокСпецификацииОтдельный.ТекущаяСтрока;
	Если Спецификация = Неопределено ИЛИ Спецификация.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСписка = Справочники.СпецификацииНоменклатуры.ПолучитьФормуСписка(, ЭтаФорма);
	
	ФормаСписка.Отбор.Код.ВидСравнения  = ВидСравнения.Равно;
	ФормаСписка.Отбор.Код.Значение      = Спецификация.Код;
	ФормаСписка.Отбор.Код.Использование = Истина;
	
	ФормаСписка.Открыть();
	
КонецПроцедуры // КоманднаяПанельСпецификацииВерсииСпецификации()

// Процедура вызывается при выборе пункта "Создать версию" командной панели "Спецификации".
//
Процедура КоманднаяПанельСпецификацииСоздатьВерсию(Кнопка)
	
	Спецификация = ЭлементыФормы.СписокСпецификацииОтдельный.ТекущаяСтрока;
	СоздатьНовуюВерсию(Спецификация);
	
КонецПроцедуры // КоманднаяПанельСпецификацииСоздатьВерсию()

// Процедура печатает выбранный элемент 
// Печатается та форма, которая была отпечатана при нажатии в документе кнопки
// печати по умолчанию
//
Процедура КоманднаяПанельСпецификацииДействиеПечать(Кнопка)
	
	Если ЭлементыФормы.СписокСпецификацииОтдельный.ТекущаяСтрока = Неопределено тогда
		Возврат
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокументИзФормыСписка(ЭлементыФормы.СписокСпецификацииОтдельный.ТекущаяСтрока.ПолучитьОбъект());
	
КонецПроцедуры // КоманднаяПанельСпецификацииДействиеПечать()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЯ

// Процедура - обработчик события "НачалоПеретаскивания" табличного поля "СписокНоменклатура".
//
Процедура СписокНоменклатураНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры // СписокНоменклатураНачалоПеретаскивания()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивВыбора = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(МассивВыбора) = Тип("Массив") Тогда
		Выбор = МассивВыбора[0];
	Иначе
		Выбор = МассивВыбора;
	КонецЕсли;
	
	Если ТипЗнч(Выбор) = Тип("СправочникСсылка.СпецификацииНоменклатуры")
	   И Строка.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура
	   И Строка.ВидСтроки <> Перечисления.ВидыСтрокДереваСпецификаций.КонечнаяПродукция Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(Выбор) = Тип("СправочникСсылка.Номенклатура")
	 ИЛИ ТипЗнч(Выбор) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
	 ИЛИ ТипЗнч(Выбор) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ДеревоСпецификацийПроверкаПеретаскивания()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Выбор Тогда
		СтандартнаяОбработка = Ложь;
		ВыводитьМенюПриПеретасивании = Истина;
	Иначе
		ВыводитьМенюПриПеретасивании = Ложь;
	КонецЕсли;
	
	МассивВыбора = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(МассивВыбора) = Тип("Массив") Тогда
		Выбор = МассивВыбора[0];
	Иначе
		Выбор = МассивВыбора;
	КонецЕсли;
	
	СтрокаДереваЗначений = Строка;
		
	Если ТипЗнч(Выбор) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Добавить = Истина;
		СтрокаДобавлена = Ложь;
		Если ВыводитьМенюПриПеретасивании И ЗначениеЗаполнено(СтрокаДереваЗначений.Спецификация)
		   И СтрокаДереваЗначений.Уровень() <> 0 Тогда
			
			Меню = Новый СписокЗначений;
			Меню.Добавить("Изменить", "Изменить номенклатуру ");
			Если НЕ ЗначениеЗаполнено(СтрокаДереваЗначений.ОсновнаяСпецификация)
			 ИЛИ ВыводитьВозвратныеОтходы ИЛИ ВыводитьВыходныеИзделия Тогда
				Меню.Добавить("Добавить", "Добавить новую строку");
			Иначе
				Меню.Добавить("Добавить", 			 "Добавить новую строку");
				Меню.Добавить("ДобавитьПодчиненную", "Добавить новую подчиненную строку");
			КонецЕсли;
			
			ВыбранныйЭлемент = ВыбратьИзМеню(Меню, Элемент);
			
			Если ВыбранныйЭлемент = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Если ВыбранныйЭлемент.Значение = "Добавить" Тогда
				Добавить = Истина;
			ИначеЕсли ВыбранныйЭлемент.Значение = "ДобавитьПодчиненную" Тогда
				НоваяСтрокаДереваЗначений = СтрокаДереваЗначений.Строки.Добавить();
				НоваяСтрокаДереваЗначений.Спецификация = СтрокаДереваЗначений.ОсновнаяСпецификация;
				СтрокаДереваЗначений = НоваяСтрокаДереваЗначений;
				СтрокаДобавлена = Истина;
			Иначе
				Добавить = Ложь;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДереваЗначений.ОсновнаяСпецификация)
			 И (Не ВыводитьВозвратныеОтходы И Не ВыводитьВыходныеИзделия)
			 И СтрокаДереваЗначений.Уровень() <> 0 Тогда
			
			Меню = Новый СписокЗначений;
			Меню.Добавить("Добавить", 			 "Добавить новую строку");
			Меню.Добавить("ДобавитьПодчиненную", "Добавить новую подчиненную строку");
			ВыбранныйЭлемент = ВыбратьИзМеню(Меню, Элемент);
			
			Если ВыбранныйЭлемент = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Если ВыбранныйЭлемент.Значение = "ДобавитьПодчиненную" Тогда
				НоваяСтрокаДереваЗначений = СтрокаДереваЗначений.Строки.Добавить();
				НоваяСтрокаДереваЗначений.Спецификация = СтрокаДереваЗначений.ОсновнаяСпецификация;
				СтрокаДереваЗначений = НоваяСтрокаДереваЗначений;
				СтрокаДобавлена = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДереваЗначений.Уровень() = 0 Тогда
			СтрокаДереваЗначений.Номенклатура = Выбор;
			ПриИзмененииНоменклатурыИХарактеристики(СтрокаДереваЗначений, Выбор);
			ЗаполнитьДеревоСпецификаций(Выбор, );
		Иначе
			Отказ = Ложь;
			ПередНачаломИзмененияСпецификации(СтрокаДереваЗначений, Отказ);
			Если Отказ Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;
			
			Если Добавить Тогда
				ДобавитьСтрокуСпецификации(СтрокаДереваЗначений, Выбор, , , СтрокаДобавлена);
			Иначе
				СтрокаДереваЗначений.Номенклатура = Выбор;
				ПриИзмененииНоменклатурыИХарактеристики(СтрокаДереваЗначений, Выбор);
				
				Если РедактироватьВДиалоге Тогда
					ОткрытьСтрокуСпецификации(ЭлементыФормы, СтрокаДереваЗначений);
				КонецЕсли;
				
				ЗаполнитьСтрокиДереваСпецификаций(СтрокаДереваЗначений);
				
			КонецЕсли;
			ПриОкончанииИзмененияСпецификации();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Выбор) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		
		Отказ = Ложь;
		ПередНачаломИзмененияСпецификации(СтрокаДереваЗначений, Отказ);
		Если Отказ Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		СтрокаДереваЗначений.ХарактеристикаНоменклатуры = Выбор;
		ПриИзмененииНоменклатурыИХарактеристики(СтрокаДереваЗначений, СтрокаДереваЗначений.Номенклатура, Выбор);
		
		Если РедактироватьВДиалоге Тогда
			ОткрытьСтрокуСпецификации(ЭлементыФормы, СтрокаДереваЗначений);
		КонецЕсли;
		
		ПриОкончанииИзмененияСпецификации();
		
	ИначеЕсли ТипЗнч(Выбор) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		
		Если УстанавливатьСпецификациюКакОсновную Тогда
			ВыполненаУстановка = Истина;
			ЗаписатьСпецификациюПоУмолчанию(СтрокаДереваЗначений.Номенклатура, СтрокаДереваЗначений.ХарактеристикаНоменклатуры, Выбор, ВыполненаУстановка);
			Если ВыполненаУстановка Тогда
				ОсновнаяСпецификацияНоменклатуры = Выбор;	
			КонецЕсли;
		КонецЕсли;
		Если СтрокаДереваЗначений.Уровень() = 0 Тогда
			ЗаполнитьДеревоСпецификаций(,,Выбор);
		Иначе
			Отказ = Ложь;
			ПередНачаломИзмененияСпецификации(СтрокаДереваЗначений, Отказ);
			Если Отказ Тогда
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;
			СтрокаДереваЗначений.ОсновнаяСпецификация = Выбор;
			ЗаписатьСтрокуСпецификации(СтрокаДереваЗначений);
			
			ПриОкончанииИзмененияСпецификации();
			
			ЗаполнитьСтрокиДереваСпецификаций(СтрокаДереваЗначений);
		КонецЕсли;
		
		Если РедактироватьВДиалоге Тогда
			ОткрытьСтрокуСпецификации(ЭлементыФормы, СтрокаДереваЗначений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоСпецификацийПеретаскивание()

Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
	f=0;
КонецПроцедуры

// Процедура - обработчик события "ПередРазворачиванием" табличного поля "ДеревоСпецификаций".
//
Процедура ДеревоСпецификацийПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НужноЗаполнитьКомплектующие = Ложь;
	
	Если Строка.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура
	 ИЛИ Строка.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Узел Тогда
	
		Для Каждого ПодчиненнаяСтрока Из Строка.Строки Цикл
		 
			Если Не ЗначениеЗаполнено(ПодчиненнаяСтрока.Номенклатура) Тогда
				НужноЗаполнитьКомплектующие = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
	Если Не НужноЗаполнитьКомплектующие Тогда
		Возврат;
	КонецЕсли;
	
	Строка.Строки.Очистить();
	ЗаполнитьСтрокиДереваСпецификаций(
		Строка,
		, 
		Ложь,
		Истина // ОбработкаСобытияПередРазворачиванием
		);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

БылоВосстановлениеЗначений = Ложь;
ОбновитьДеревоСпецификаций = Ложь;
ИспользоватьТолькоСборочныеСпецификации = глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");