Перем СтруктОстаткиУпр;
Перем СтруктОстаткиРегл;

Перем мВалютаРегламентированногоУчета;
Перем мВалютаУправленческогоУчета;
Перем мИспользоватьРасширеннуюАналитику;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Процедура добавляет выбранную статью затрат в документ
//
Процедура ДобавитьСтрокуВдокумент( СтатьяЗатрат, Выбор)
	
	СтруктПодбора = Новый Структура;
	СтруктПодбора.Вставить( "СтатьяЗатрат",       СтатьяЗатрат);
	СтруктПодбора.Вставить( "Команда",            СтруктПараметры["Команда"]);
	СтруктПодбора.Вставить( "СуммаУпр",           Выбор["СуммаУпр" ]);
	СтруктПодбора.Вставить( "СуммаРегл",          Выбор["СуммаРегл"]);
	СтруктПодбора.Вставить( "ПараметрыДокумента", СтруктПараметры);
		
	ОповеститьОВыборе(СтруктПодбора);
		
КонецПроцедуры // ДобавитьСтрокуВдокумент()

// Процедура устанавливает доступность элементов формы
//
Процедура УстановитьДоступность()
	
	ЭлементыФормы.Подразделение       .Доступность = ФлагУпрУчета;
	ЭлементыФормы.НадписьПодразделение.Доступность = ФлагУпрУчета;
	
	ЭлементыФормы.ПодразделениеОрганизации       .Доступность = ФлагРеглУчета;
	ЭлементыФормы.НадписьПодразделениеОрганизации.Доступность = ФлагРеглУчета;
	
	ЭлементыФормы.СпрСтатьиЗатрат.Колонки.ОстатокУпр .Видимость = ФлагУпрУчета;
	ЭлементыФормы.СпрСтатьиЗатрат.Колонки.ОстатокРегл.Видимость = ФлагРеглУчета;
	
КонецПроцедуры // УстановитьДоступность()

// Процедура заполняет структуру остатков.
//
Процедура ЗаполнитьСтруктуруОстатков(ТекГруппа = Неопределено)
	
	Запрос = Новый Запрос;
	
	ТекстПодр      = "";
	ТекстВидЗатрат = "";
	
	Запрос.УстановитьПараметр( "ПодрБух", ПодразделениеОрганизации);
	ТекстПодрБух = " И Подразделение = &ПодрБух";
	
	Запрос.УстановитьПараметр( "ПодрУпр", Подразделение);
	ТекстПодрУпр = " И Подразделение = &ПодрУпр";
	
	Если СтруктПараметры.Свойство("ВидЗатрат") Тогда
		
		Если СтруктПараметры["ВидЗатрат"] = "НематериальныеЗатраты" Тогда
			ТекстВидЗатратСпр = " И СтатьиЗатрат.ВидЗатрат <> &МатЗатраты ";
			ТекстВидЗатратРег = " И СтатьяЗатрат.ВидЗатрат <> &МатЗатраты ";
			
			Запрос.УстановитьПараметр( "МатЗатраты", Перечисления.ВидыЗатрат.Материальные);
		Иначе
			ОбщегоНазначения.Сообщение("Неверное значение параметра ""ВидЗатрат"".", СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка         КАК СтатьяЗатрат,
	|	ВЫБОР КОГДА Не РегНЗП_Упр.СтоимостьОстаток ЕСТЬ NULL ТОГДА
	|		РегНЗП_Упр.СтоимостьОстаток 
	|	КОГДА Не РегЗатраты_Упр.СуммаОстаток ЕСТЬ NULL ТОГДА
	|		РегЗатраты_Упр.СуммаОстаток 
	|	КОГДА Не РегБрак_Упр.СуммаОстаток ЕСТЬ NULL ТОГДА
	|		РегБрак_Упр.СуммаОстаток
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ОстатокУпр,
	|	ВЫБОР КОГДА Не РегНЗП_Бух.СтоимостьОстаток ЕСТЬ NULL ТОГДА
	|		РегНЗП_Бух.СтоимостьОстаток 
	|	КОГДА Не РегЗатраты_Бух.СуммаОстаток ЕСТЬ NULL ТОГДА
	|		РегЗатраты_Бух.СуммаОстаток 
	|	КОГДА Не РегБрак_Бух.СуммаОстаток ЕСТЬ NULL ТОГДА
	|		РегБрак_Бух.СуммаОстаток
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ОстатокБух
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.НезавершенноеПроизводство.Остатки(&КонДата, 
	|														СтатьяЗатрат.Родитель = &ТекГруппа " + ТекстВидЗатратРег + ТекстПодрУпр + "
	|															) КАК РегНЗП_Упр
	|	ПО 
	|		РегНЗП_Упр.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.Остатки(&КонДата, 
	|																СтатьяЗатрат.Родитель = &ТекГруппа И Организация = &Орг " + ТекстВидЗатратРег + ТекстПодрБух + "
	|																			) КАК РегНЗП_Бух
	|	ПО 
	|		РегНЗП_Бух.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.Затраты.Остатки(&КонДата, 
	|											СтатьяЗатрат.Родитель = &ТекГруппа " + ТекстВидЗатратРег + ТекстПодрУпр + "
	|										) КАК РегЗатраты_Упр
	|	ПО 
	|		РегЗатраты_Упр.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ЗатратыБухгалтерскийУчет.Остатки(&КонДата, 
	|														СтатьяЗатрат.Родитель = &ТекГруппа И Организация = &Орг " + ТекстВидЗатратРег + ТекстПодрБух + "
	|														) КАК РегЗатраты_Бух
	|	ПО 
	|		РегЗатраты_Бух.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.БракВПроизводстве.Остатки(&КонДата, 
	|											СтатьяЗатрат.Родитель = &ТекГруппа " + ТекстВидЗатратРег + ТекстПодрУпр + "
	|										) КАК РегБрак_Упр
	|	ПО 
	|		РегБрак_Упр.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.БракВПроизводствеБухгалтерскийУчет.Остатки(&КонДата, 
	|														СтатьяЗатрат.Родитель = &ТекГруппа И Организация = &Орг " + ТекстВидЗатратРег + ТекстПодрБух + "
	|														) КАК РегБрак_Бух
	|	ПО 
	|		РегБрак_Бух.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|
	|ГДЕ
	|	СтатьиЗатрат.Родитель = &ТекГруппа " + ТекстВидЗатратСпр + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "МатЗатраты", Перечисления.ВидыЗатрат.Материальные);
	Запрос.УстановитьПараметр( "ТекГруппа",  ?( ТекГруппа = Неопределено, ЭлементыФормы.СпрСтатьиЗатрат.ТекущаяСтрока, ТекГруппа));
	Запрос.УстановитьПараметр( "КонДата",    ДатаОстатков);
	Запрос.УстановитьПараметр( "Орг",        Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктОстаткиУпр .Очистить();
	СтруктОстаткиРегл.Очистить();
	
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		СтруктОстаткиУпр .Вставить( Обход.СтатьяЗатрат, Обход.ОстатокУпр);
		СтруктОстаткиРегл.Вставить( Обход.СтатьяЗатрат, Обход.ОстатокБух);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтруктуруОстатков()

// Процедура заполняет таблицу данными
//
Процедура ЗаполнитьСтруктуруОстатковРасширеннаяАналитика(ТекГруппа = Неопределено)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаЗатрат.СтатьяЗатрат,
	|	СУММА(УчетЗатрат.СтоимостьОстаток) КАК ОстатокУпр,
	|	0 КАК ОстатокБух
	|ИЗ
	|	РегистрНакопления.УчетЗатрат.Остатки(&КонДата, 
	|		АналитикаВидаУчета В (
	|			ВЫБРАТЬ
	|				Ссылка
	|      		ИЗ
	|				РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|			ГДЕ
	|              	РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|              	И Подразделение = &Подразделение
	|			)
	|		И АналитикаУчетаЗатрат В (
	|			ВЫБРАТЬ
	|				Ссылка
	|      		ИЗ
	|				РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|			ГДЕ
	|              	СтатьяЗатрат.Родитель = &ТекГруппа
	|              	//УсловиеВидЗатрат И СтатьяЗатрат.ВидЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыЗатрат.Материальные)
	|			)
	|	) КАК УчетЗатрат
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО
	|   	УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрАналитикаУчетаЗатрат.СтатьяЗатрат
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаЗатрат.СтатьяЗатрат,
	|	0 КАК ОстатокУпр,
	|	СУММА(УчетЗатратРегл.СтоимостьОстаток) КАК ОстатокБух
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл.Остатки(&КонДата, 
	|		АналитикаВидаУчета В (
	|			ВЫБРАТЬ
	|				Ссылка
	|      		ИЗ
	|				РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|			ГДЕ
	|              	РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|              	И Организация = &Организация
	|              	И ПодразделениеОрганизации = &ПодразделениеОрганизации
	|			)
	|		И АналитикаУчетаЗатрат В (
	|			ВЫБРАТЬ
	|				Ссылка
	|      		ИЗ
	|				РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|			ГДЕ
	|              	СтатьяЗатрат.Родитель = &ТекГруппа
	|              	//УсловиеВидЗатрат И СтатьяЗатрат.ВидЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыЗатрат.Материальные)
	|			)
	|	) КАК УчетЗатратРегл
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО
	|   	УчетЗатратРегл.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрАналитикаУчетаЗатрат.СтатьяЗатрат
	|";
	
	Если СтруктПараметры.Свойство("ВидЗатрат") Тогда
		
		Если СтруктПараметры.ВидЗатрат = "НематериальныеЗатраты" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УсловиеВидЗатрат", "");
		Иначе
			ОбщегоНазначения.Сообщение("Неверное значение параметра ""ВидЗатрат"".", СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТекГруппа", ?(ТекГруппа = Неопределено, ЭлементыФормы.СпрСтатьиЗатрат.ТекущаяСтрока, ТекГруппа));
	Запрос.УстановитьПараметр("КонДата", ДатаОстатков);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктОстаткиУпр .Очистить();
	СтруктОстаткиРегл.Очистить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОстатокУпр <> 0 Тогда
			СтруктОстаткиУпр.Вставить(Выборка.СтатьяЗатрат, Выборка.ОстатокУпр);
		КонецЕсли;
		Если Выборка.ОстатокБух Тогда
			СтруктОстаткиРегл.Вставить(Выборка.СтатьяЗатрат, Выборка.ОстатокБух);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтруктуруОстатковРасширеннаяАналитика()

// Процедура заполняет таблицу данными
//
Процедура ЗаполнитьОстатки(ТекГруппа = Неопределено)
	
	Если мИспользоватьРасширеннуюАналитику Тогда
		ЗаполнитьСтруктуруОстатковРасширеннаяАналитика(ТекГруппа);
	Иначе
		ЗаполнитьСтруктуруОстатков(ТекГруппа);
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьОстатки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ТипЗнч(СтруктПараметры) = Тип("Структура") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	СтруктОстаткиУпр  = Новый Соответствие;
	СтруктОстаткиРегл = Новый Соответствие;
	
	ФлагУпрУчета  = СтруктПараметры["ФлагУпрУчета" ];
	ФлагРеглУчета = СтруктПараметры["ФлагРеглУчета"];
	Организация   = СтруктПараметры["Организация"  ];
	
	Если СтруктПараметры.Свойство("Подразделение") Тогда
		Подразделение = СтруктПараметры["Подразделение"];
	КонецЕсли;
	Если СтруктПараметры.Свойство("ПодразделениеОрганизации") Тогда
		ПодразделениеОрганизации = СтруктПараметры["ПодразделениеОрганизации"];
	КонецЕсли;
	Если СтруктПараметры.Свойство("ДатаОстатков") Тогда
		ДатаОстатков = СтруктПараметры["ДатаОстатков"];
	Иначе
		ДатаОстатков = РабочаяДата;
	КонецЕсли;
	
	мИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДатаОстатков);
	
	ЗаполнитьОстатки(Справочники.СтатьиЗатрат.ПустаяСсылка());
	
	УстановитьДоступность();
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

Процедура КнопкаОбновитьНажатие(Элемент)
	
	ЗаполнитьОстатки(ЭлементыФормы.СпрСтатьиЗатрат.ТекущийРодитель);
	
КонецПроцедуры // КнопкаОбновитьНажатие()

// Процедура - обработчик события "ПриИзменении" поля "Подразделение".
//
Процедура ПодразделениеПриИзменении(Элемент)
	
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ФлагРеглУчета,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	ЗаполнитьОстатки(ЭлементыФормы.СпрСтатьиЗатрат.ТекущийРодитель);
	
КонецПроцедуры // ПодразделениеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ПодразделениеОрганизации".
//
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ЗаполнитьОстатки(ЭлементыФормы.СпрСтатьиЗатрат.ТекущийРодитель);
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля "ПодразделениеОрганизации".
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ФлагРеглУчета,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
	
КонецПроцедуры // ПодразделениеОрганизацииНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" флажка "ФлагРеглУчета".
//
Процедура ФлагРеглУчетаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры // ФлагРеглУчетаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ФлагРеглУчета".
//
Процедура ФлагУпрУчетаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры // ФлагУпрУчетаПриИзменении()

// Процедура - обработчик события "Выбор" табличного поля "ДеревоСтатейЗатрат".
//
Процедура ДеревоСтатейЗатратВыбор(Элемент, ТекГруппа, Колонка, СтандартнаяОбработка)
	
	ЗаполнитьОстатки(ТекГруппа);
	
КонецПроцедуры // ДеревоСтатейЗатратВыбор()

// Процедура - обработчик события "ПриПолученииДанных" табличного поля "СпрСтатьиЗатрат".
//
Процедура СпрСтатьиЗатратПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Колонки = ЭлементыФормы.СпрСтатьиЗатрат.Колонки;
	ОстатокУпрВидимость = Колонки.ОстатокУпр.Видимость;
	ОстатокРеглВидимость = Колонки.ОстатокРегл.Видимость;
	
	Если Не ОстатокУпрВидимость
	   И Не ОстатокРеглВидимость
	Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		Ячейки = ОформлениеСтроки.Ячейки;
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ОстатокУпрВидимость Тогда
			Остаток = СтруктОстаткиУпр[ДанныеСтроки.Ссылка];
			Ячейки.ОстатокУпр.УстановитьТекст(Остаток);
		КонецЕсли;
		
		Если ОстатокРеглВидимость Тогда
			Остаток = СтруктОстаткиРегл[ДанныеСтроки.Ссылка];
			Ячейки.ОстатокРегл.УстановитьТекст(Остаток);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СпрСтатьиЗатратПриПолученииДанных()


// Процедура - обработчик события "Выбор" табличного поля "СпрСтатьиЗатрат".
//
Процедура СпрСтатьиЗатратВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока.Ссылка.ЭтоГруппа Тогда
		
		ЗаполнитьОстатки(ВыбраннаяСтрока.Ссылка);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВводаСуммы = ПолучитьФорму("ФормаВводаСуммы");
		ФормаВводаСуммы.ЭлементыФормы.СуммаУпр         .Доступность = ФлагУпрУчета;
		ФормаВводаСуммы.ЭлементыФормы.СуммаРегл        .Доступность = ФлагРеглУчета;
		ФормаВводаСуммы.ЭлементыФормы.НадписьСуммаУпр  .Доступность = ФлагУпрУчета;
		ФормаВводаСуммы.ЭлементыФормы.НадписьСуммаРегл .Доступность = ФлагРеглУчета;
		ФормаВводаСуммы.ЭлементыФормы.НадписьВалютаУпр .Доступность = ФлагУпрУчета;
		ФормаВводаСуммы.ЭлементыФормы.НадписьВалютаРегл.Доступность = ФлагРеглУчета;
		
		ФормаВводаСуммы.ЭлементыФормы.НадписьВалютаУпр .Заголовок   = мВалютаУправленческогоУчета;
		ФормаВводаСуммы.ЭлементыФормы.НадписьВалютаРегл.Заголовок   = мВалютаРегламентированногоУчета;
		
		КурсУпр  = МодульВалютногоУчета.ПолучитьКурсВалюты( мВалютаУправленческогоУчета,     ДатаОстатков);
		КурсРегл = МодульВалютногоУчета.ПолучитьКурсВалюты( мВалютаРегламентированногоУчета, ДатаОстатков);
		
		ФормаВводаСуммы.ЭтаФорма.КурсУпрВалюты      = КурсУпр.Курс;
		ФормаВводаСуммы.ЭтаФорма.КратностьУпрВалюты = КурсУпр.Кратность;
		
		ФормаВводаСуммы.ЭтаФорма.КурсРеглВалюты      = КурсРегл.Курс;
		ФормаВводаСуммы.ЭтаФорма.КратностьРеглВалюты = КурсРегл.Кратность;
		
		ФормаВводаСуммы.ЭлементыФормы.СуммаУпр .АвтоОтметкаНезаполненного = ФлагУпрУчета;
		ФормаВводаСуммы.ЭлементыФормы.СуммаРегл.АвтоОтметкаНезаполненного = ФлагРеглУчета;
		
		Выбор = ФормаВводаСуммы.ОткрытьМодально();
		
		Если НЕ Выбор = Неопределено Тогда
			
			ДобавитьСтрокуВдокумент( ВыбраннаяСтрока.Ссылка, Выбор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СпрСтатьиЗатратВыбор()

// Процедура - обработчик события "ПриСменеТекущегоРодителя" табличного поля "СпрСтатьиЗатрат".
//
Процедура СпрСтатьиЗатратПриСменеТекущегоРодителя(Элемент)
	
	Если ЭлементыФормы.СпрСтатьиЗатрат.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОстатки(ЭлементыФормы.СпрСтатьиЗатрат.ТекущиеДанные.Родитель);
	
КонецПроцедуры // СпрСтатьиЗатратПриСменеТекущегоРодителя()

мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");