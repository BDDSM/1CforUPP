Перем МетаданныеПоТипам;

Процедура ПроверкаЗаполненияТабличнойЧасти(Отказ)
	
	
	//Ключ - название реквизита, значение - останавливать обработку, если значение не заполнено 
	СтруктураОбязательныхПолей = новый структура("Контрагент,Сумма,ДокументОснование,СтавкаНДС");

	РеестрСФкРегистрации = Список.Выгрузить();
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из РеестрСФкРегистрации Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + " : ";
			
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // 

				ПредставлениеРеквизита = РеестрСФкРегистрации.Колонки[КлючЗначение.Ключ].Заголовок;
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Элемент)
	
	//Если табличная часть заполнена неправильно - высокая вероятность возникновения ошибки при формировании вычета!
	Отказ = Ложь;
	ПроверкаЗаполненияТабличнойЧасти(Отказ);
	
	Если Отказ Тогда
		Предупреждение("Некорректно заполнен список авансов для формирования счетов-фактур. Обработка остановлена");
		Для каждого Строка Из Список Цикл
			Строка.СФсформирован = Ложь;
		КонецЦикла; 
		Возврат;
	КонецЕсли; 
	
	НеиспользуемыеСчетаФактуры = ОпределитьНаличиеНеиспользуемыхСчетовФактурЗаПериод();
	
	Если НеиспользуемыеСчетаФактуры.Количество() > 0 Тогда
		//Ответ = Вопрос("Регистрация счетов-фактур на суммовую разницу за указанный период выполнялась ранее
		//|(по организации обнаружены счета-фактуры на суммовую разницу за обрабатываемый период).
		//| Использовать номера ранее зарегистрированных счетов-фактур?", РежимДиалогаВопрос.ДаНетОтмена);
		//
		Ответ = Вопрос("По организации обнаружены счета-фактуры на суммовую разницу за обрабатываемый период,
		|которые не используются в списке счетов-фактур к регистрации (значение поля ""Счет-фактура"" по строке).
		|Номера найденных документов могут быть использованы для тех строк, у которых не установлен соответствующий
		|строке счет-фактура. 
		|Использовать номера ранее зарегистрированных счетов-фактур?
		| 
		|Да - Использовать номера обнаруженных счетов-фактур, неиспользованные пометить на удаление
		|Нет - Оставить обнаруженные счета-фактуры без изменений, продолжить процедуру регистрации
		|Отмена - Отменить формирование счетов-фактур на суммовые разницы", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Сообщить("Регистрация счетов-фактур на суммовую разницу отменена пользователем.", СтатусСообщения.Информация);
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			// В текущем цикле помечаем документы на удаление. Использование документов 
			// будет выполняться далее, непосредственно в процессе регистрации счетов-фактур
			Для каждого Документ Из НеиспользуемыеСчетаФактуры Цикл
				Если не Документ.ПометкаУдаления тогда
					ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЦикла; 
		Иначе
			НеиспользуемыеСчетаФактуры.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСчетаФактурыНаСуммовуюРазницу(НеиспользуемыеСчетаФактуры);

КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	
	РаботаСДиалогами.ОбработчикНастройкаПериодаНажатие(НачалоПериода, КонецПериода);
	
КонецПроцедуры

Процедура КоманднаяПанельЗаполнить(Кнопка)
	
	Отказ = Ложь;
	СообщениеОбОшибке = "Регистрация не выполнена.";
	АктивизироватьЭлемент = неопределено;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана организация";
		Отказ = Истина;
		Если АктивизироватьЭлемент = неопределено Тогда
			АктивизироватьЭлемент = ЭлементыФормы.Организация;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана дата начала заполнения";
		Отказ = Истина;
		Если АктивизироватьЭлемент = неопределено Тогда
			АктивизироватьЭлемент = ЭлементыФормы.НачалоПериода;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана дата окончания заполнения";
		Отказ = Истина;
		Если АктивизироватьЭлемент = неопределено Тогда
			АктивизироватьЭлемент = ЭлементыФормы.КонецПериода;
		КонецЕсли; 
	КонецЕсли;
	
	Если НачалоПериода > КонецПериода Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - дата начала заполнения больше даты окончния";
		Отказ = Истина;
		Если АктивизироватьЭлемент = неопределено Тогда
			АктивизироватьЭлемент = ЭлементыФормы.НачалоПериода;
		КонецЕсли; 
	КонецЕсли;
	
	Если не Отказ Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецПериода, Организация);
		ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы = ?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Ложь, УчетнаяПолитика.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы);
		
		Если не ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы Тогда
			Сообщить("Регистрация отдельных счетов-фактур на суммовые разницы требуется только в случае,
			|если в учетной политики организации установлен соответствующий признак.
			|По организации <"+Организация+"> регистрация отдельных счетов-фактур на суммовые разницы за указанный период не требуется.",СтатусСообщения.Информация);
		КонецЕсли; 
	КонецЕсли;
	
	Если Отказ Тогда
	    Предупреждение(СообщениеОбОшибке);
		ТекущийЭлемент = АктивизироватьЭлемент; 
		Возврат;
	КонецЕсли; 
	
	Если Список.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 

		Список.Очистить();

	КонецЕсли;
	
	ТаблицаРезультатов = Список.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	ЗаполнитьСтрокиДокумента(ТаблицаРезультатов);
	
	Список.Очистить();
	Список.Загрузить(ТаблицаРезультатов);
	
	Список.Сортировать("Дата Возр");
	
КонецПроцедуры

//Пересчет суммы НДС и валютной суммы при изменении суммы регл.
Процедура СписокСуммаПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.Список.ТекущиеДанные;
	Если не ТД = Неопределено  Тогда
	
		ПересчетНДСПоСтроке(ТД);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанель1СписокСчетовФактур(Кнопка)
	Форма = Документы.СчетФактураВыданный.ПолучитьФорму("ФормаСписка",,);
	Форма.ДокументСписок.Отбор.ВидСчетаФактуры.Установить(Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу);
	Форма.ДокументСписок.Отбор.Организация.Установить(Организация);
	
	Если НачалоПериода = '00010101'и КонецПериода = '00010101' Тогда
		//Отбор не требуется
		Форма.ДокументСписок.Отбор.Дата.Использование = Ложь;
	Иначе
		Если НачалоПериода = '00010101' Тогда
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
			Форма.ДокументСписок.Отбор.Дата.Значение = КонецДня(КонецПериода);
		ИначеЕсли КонецПериода = '00010101' Тогда
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.БольшеИлиРавно;
			Форма.ДокументСписок.Отбор.Дата.Значение = НачалоПериода;
		Иначе
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			Форма.ДокументСписок.Отбор.Дата.ЗначениеС = НачалоПериода;
			Форма.ДокументСписок.Отбор.Дата.ЗначениеПо= КонецДня(КонецПериода);
		КонецЕсли; 
		Форма.ДокументСписок.Отбор.Дата.Использование = Истина;
	КонецЕсли; 
	Форма.Открыть();
КонецПроцедуры

// Зачистка табличной части при смене организации
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Список.Количество() > 0 Тогда
		Если Вопрос("При смене организации необходимо очистить табличную часть. Очистить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Список.Очистить();
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()

    Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	
	// Проверка ведения однофирменности
	УчетнаяПолитикаНУ = Неопределено;
	НачалоПериода = УчетНДС.ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, РабочаяДата,, УчетнаяПолитикаНУ);
	КонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике (Организация, РабочаяДата,, УчетнаяПолитикаНУ);
	
КонецПроцедуры

// Выполняется при изенении документа-основания
// Производит определение валюты докумнта, возмодно изменение валютной суммы
Процедура СписокДокументОснованиеПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Список.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Дата) и ЗначениеЗаполнено(Элемент.Значение) Тогда
		ТекущиеДанные.Дата = Элемент.Значение.Дата;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СписокДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТД = Элементыформы.Список.ТекущиеДанные;
	
	СтандартнаяОбработка  = Ложь;
	СтруктураПараметров   = Новый Структура("Организация,Контрагент,НачалоПериода,КонецПериода",Организация,ТД.Контрагент,НачалоПериода, КонецДня(Конецпериода));
	СтруктураПараметров.Вставить("СторонаСчета",1); //при указании счета отбираются остатки по кредиту
	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка()); //для задания вида счета
	СтруктураПараметров.Вставить("ДоговорКонтрагента",Неопределено);

	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров,Элемент,Элемент.ТипЗначения);
КонецПроцедуры

Процедура СписокСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	Форма = Документы.СчетФактураВыданный.ПолучитьФорму("ФормаВыбора",Элемент,);
	Форма.ДокументСписок.Отбор.ВидСчетаФактуры.Установить(Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу);
	Форма.ДокументСписок.Отбор.Организация.Установить(Организация);
	
	Если НачалоПериода = '00010101'и КонецПериода = '00010101' Тогда
		//Отбор не требуется
		Форма.ДокументСписок.Отбор.Дата.Использование = Ложь;
	Иначе
		Если НачалоПериода = '00010101' Тогда
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
			Форма.ДокументСписок.Отбор.Дата.Значение = КонецДня(КонецПериода);
		ИначеЕсли КонецПериода = '00010101' Тогда
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.БольшеИлиРавно;
			Форма.ДокументСписок.Отбор.Дата.Значение = НачалоПериода;
		Иначе
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			Форма.ДокументСписок.Отбор.Дата.ЗначениеС = НачалоПериода;
			Форма.ДокументСписок.Отбор.Дата.ЗначениеПо= КонецДня(КонецПериода);
		КонецЕсли; 
		Форма.ДокументСписок.Отбор.Дата.Использование = Истина;
	КонецЕсли; 
	Форма.РежимВыбора = Истина;
	Форма.МножественныйВыбор = Ложь;
	ТД = Элементыформы.Список.ТекущиеДанные;
	Если не ТД = неопределено и ЗначениеЗаполнено(ТД.СчетФактура) Тогда
		Форма.НачальноеЗначениеВыбора = ТД.СчетФактура;
	КонецЕсли; 
	Форма.Открыть();
КонецПроцедуры

// Хранит метаданные по типам документов для определения наличия реквизита "ВалютаДокумента" и проч. нужд.
МетаданныеПоТипам = Новый соответствие();

СуммаСтарая = 0;