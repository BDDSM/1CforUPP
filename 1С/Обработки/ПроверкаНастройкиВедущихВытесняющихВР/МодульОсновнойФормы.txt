// таблица ведущих ВР всех ПВР, в ней будет итоговое состояние
// списка ведущих ВР для записи в БД
Перем мТаблицаВРВедущие;

// таблица вытесняющих ВР всех ПВР, в ней будет итоговое состояние
// списка вытесняющих ВР для записи в БД
Перем мТаблицаВРВытесняющие;

// таблица ВР у которых "сломана" настройка списка ведущих
Перем мТаблицаПлохихВРВедущие;

// таблица ВР у которых "сломана" настройка списка вытесняющих
Перем мТаблицаПлохихВРВытесняющие;

Перем мТаблицаОбязательныеКУдалению;

Перем ТекущийСписокВР; // список, который обрабатываем в текущий момент

/////////////////////////////////////////////////////////////////////////////

Функция ПолучитьТаблицуДляЗаписи(ИсходнаяТаблица, ТаблицаВРДляПроверки)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаВР", ТаблицаВРДляПроверки);
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаВР.Ссылка КАК Ссылка,
	|	ТаблицаВР.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТ_ТаблицаВР
	|ИЗ
	|	&ТаблицаВР КАК ТаблицаВР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Ссылка КАК Ссылка,
	|	ИсходнаяТаблица.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТ_ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаВР.Ссылка
	|ПОМЕСТИТЬ ВТ_Список1
	|ИЗ
	|	ВТ_ТаблицаВР КАК ВТ_ТаблицаВР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
	|		ПО ВТ_ТаблицаВР.Ссылка = ВТ_ИсходнаяТаблица.Ссылка
	|			И ВТ_ТаблицаВР.ВидРасчета = ВТ_ИсходнаяТаблица.ВидРасчета
	|ГДЕ
	|	ВТ_ИсходнаяТаблица.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходнаяТаблица.Ссылка
	|ПОМЕСТИТЬ ВТ_Список2
	|ИЗ
	|	ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаВР КАК ВТ_ТаблицаВР
	|		ПО (ВТ_ТаблицаВР.Ссылка = ВТ_ИсходнаяТаблица.Ссылка)
	|			И (ВТ_ТаблицаВР.ВидРасчета = ВТ_ИсходнаяТаблица.ВидРасчета)
	|ГДЕ
	|	ВТ_ТаблицаВР.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Список1.Ссылка
	|ИЗ
	|	ВТ_Список1 КАК ВТ_Список1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Список2.Ссылка
	|ИЗ
	|	ВТ_Список2 КАК ВТ_Список2";
	
	Возврат Запрос.Выполнить().Выгрузить();
	

КонецФункции // ПолучитьТаблицуДляЗаписи()



/////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьАктивизациюСтрокиСписокПлохихВР()

	//СписокВРУдалить - список вр, которые необходимо удалить
	//СписокВРДобавить - список ВР которые необходимо добавить
	
	ТекущаяСтрока = ЭлементыФормы.СписокПлохихВР.ТекущаяСтрока;
    Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийСписокВР = "Вытесняющие" Тогда
		ИмяСписка = "вытесняющих";
	Иначе
		ИмяСписка = "ведущих";
	КонецЕсли;
	
	ВРСсылка = ТекущаяСтрока.Значение;
	
	СписокВРУдалить.Очистить();
	СписокВРДобавить.Очистить();
	
	ВариантСпискаКорректировки = 0;
	ЭлементыФормы.КнопкаИсправитьОшибки.Доступность = Ложь;
				
	ТекстНадписи = "Вид расчета: """ + СОКРЛП(ВРСсылка) + """";
	ЭлементыФормы.НадписьВариантДействия.Заголовок = ТекстНадписи;
	ЭлементыФормы.ВариантСпискаКорректировки.Заголовок  = "удалить из списка " + ИмяСписка;
	ЭлементыФормы.ВариантСпискаКорректировки1.Заголовок = "добавить в список " + ИмяСписка;
	
	Если ТекущийСписокВР = "Ведущие" Тогда
		ТаблицаПлохихВР = мТаблицаПлохихВРВедущие;
	Иначе
		ТаблицаПлохихВР = мТаблицаПлохихВРВытесняющие;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Ссылка", ВРСсылка);
	МассивСтрок = ТаблицаПлохихВР.НайтиСтроки(ОтборСтрок);
	Для каждого СтрокаТЗ Из МассивСтрок Цикл
		
		Если Не СтрокаТЗ.Предопределенный Тогда
			Если СписокВРУдалить.НайтиПоЗначению(СтрокаТЗ.ВидРасчетаУдалить) = Неопределено Тогда
				СписокВРУдалить.Добавить(СтрокаТЗ.ВидРасчетаУдалить);
			КонецЕсли;
		КонецЕсли;
		
		Если СписокВРДобавить.НайтиПоЗначению(СтрокаТЗ.ВидРасчетаДобавить) = Неопределено Тогда
			СписокВРДобавить.Добавить(СтрокаТЗ.ВидРасчетаДобавить);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьАктивизациюТаблицаЦиклическихСсылок()

	ТекущаяСтрока = ЭлементыФормы.ТаблицаЦиклическихСсылок.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийСписокВР = "Вытесняющие" Тогда
		ИмяСписка = "вытесняющих";
	Иначе
		ИмяСписка = "ведущих";
	КонецЕсли;
	
	ВариантЦиклическаяСсылка = 0;
	ЭлементыФормы.КнопкаИсправитьОшибки.Доступность = Ложь;
	
	ВР1 = ТекущаяСтрока.Ссылка;
	ВР2 = ТекущаяСтрока.ВидРасчетаУдалить;
	ЭлементыФормы.ВариантЦиклическаяСсылка.Заголовок  = "из списка " + ИмяСписка + " удалить вид расчета """ + ВР2 + """";
	ЭлементыФормы.ВариантЦиклическаяСсылка1.Заголовок = "у вида расчета """ + ВР2 + """  из списка " + ИмяСписка + Символы.ПС + " удалить вид расчета """ + ВР1 + """";
	
	ТекстНадписи = "Вид расчета: """ + СОКРЛП(ВР1) + """";
	ЭлементыФормы.НадписьВРЦиклическаяССылка.Заголовок = ТекстНадписи;

КонецПроцедуры

Процедура УстановитьДоступностьКнопокиИсправить()

	ЭлементыФормы.КнопкаИсправитьОшибки.Заголовок = "Исправить";
	ЭлементыФормы.Отмена.Заголовок = "Отмена";
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.НачальнаяСтраница Тогда
		
		ЕстьОшибкиВытесняющихВР = мТаблицаПлохихВРВытесняющие.Количество()>0;
		ЕстьОшибкиВедущихВР 	= мТаблицаПлохихВРВедущие.Количество()>0;
		Если ЕстьОшибкиВытесняющихВР или ЕстьОшибкиВедущихВР Тогда
			ЭлементыФормы.КнопкаИсправитьОшибки.Видимость   = Истина;
			ЭлементыФормы.КнопкаИсправитьОшибки.Доступность = Истина;
		Иначе // нет ошибок
			ЭлементыФормы.КнопкаИсправитьОшибки.Видимость = Ложь;
			ЭлементыФормы.Отмена.Заголовок = "Закрыть";
		КонецЕсли;
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ОбязательныеКУдалению Тогда
		
		ЭлементыФормы.КнопкаИсправитьОшибки.Доступность = ВариантЦиклическаяСсылка > 0;
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.РедактированиеСписка Тогда
		
		ЭлементыФормы.КнопкаИсправитьОшибки.Доступность = ВариантСпискаКорректировки > 0;
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СохранениеНастроек Тогда	
		
		ЭлементыФормы.КнопкаИсправитьОшибки.Заголовок = "Записать исправления";
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьСтраницуОсновнойПанели()
	
	Если мТаблицаОбязательныеКУдалению.Количество() > 0 Тогда
		// проверяем наличие циклических ссылок в выбранном списке
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ОбязательныеКУдалению;
		
		Если ТекущийСписокВР = "Вытесняющие" Тогда
			ТекстНадписи = "Удаление циклических ссылок в списке вытесняющих видов расчета.";
		Иначе
			ТекстНадписи = "Удаление циклических ссылок в списке ведущих видов расчета.";
		КонецЕсли;
		ЭлементыФормы.НадписьЗаголовокОбязательныеКУдалению.Заголовок = ТекстНадписи;
		
		ТаблицаЦиклическихСсылок.Очистить();
		Для каждого СтрокаТЗ Из мТаблицаОбязательныеКУдалению Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаЦиклическихСсылок.Добавить(), СтрокаТЗ);
		КонецЦикла;
		
		ЭлементыФормы.ТаблицаЦиклическихСсылок.ТекущаяСтрока = ТаблицаЦиклическихСсылок[0];
		ОбработатьАктивизациюТаблицаЦиклическихСсылок();
		
	ИначеЕсли ТекущийСписокВР = "Ведущие" и мТаблицаПлохихВРВедущие.Количество()>0 или ТекущийСписокВР = "Вытесняющие" и мТаблицаПлохихВРВытесняющие.Количество()>0 Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.РедактированиеСписка;
		
		СписокПлохихВР.Очистить();
		
		Если ТекущийСписокВР = "Ведущие" Тогда
			ТаблицаПлохихВР = мТаблицаПлохихВРВедущие;
		Иначе
			ТаблицаПлохихВР = мТаблицаПлохихВРВытесняющие;
		КонецЕсли;
		
		//заполним списки на странице обработки
		//СписокПлохихВР - список ВР с плохими настройками
		Для каждого СтрокаТЗ Из ТаблицаПлохихВР Цикл
			Если СписокПлохихВР.НайтиПоЗначению(СтрокаТЗ.Ссылка) = Неопределено Тогда
				СписокПлохихВР.Добавить(СтрокаТЗ.Ссылка);
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.СписокПлохихВР.ТекущаяСтрока = СписокПлохихВР[0];
		
		ОбработатьАктивизациюСтрокиСписокПлохихВР();
	ИначеЕсли мТаблицаПлохихВРВедущие.Количество()= 0 и мТаблицаПлохихВРВытесняющие.Количество() = 0 Тогда
		// все ВР скорректированы
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СохранениеНастроек;
		
	Иначе // исправили все ошибки в выбранном списке, но остались ошибки в другом списке
		
		Если ТекущийСписокВР = "Ведущие" Тогда
			ТекущийСписокВР = "Вытесняющие";
			ТаблицаПлохихВР = мТаблицаПлохихВРВытесняющие;
			ТекстЗаголовка = "Исправление ошибок в списке вытесняющих расчетов";
		Иначе
			ТекущийСписокВР = "Ведущие";
			ТаблицаПлохихВР = мТаблицаПлохихВРВедущие;
			ТекстЗаголовка = "Исправление ошибок в списке ведущих расчетов";
		КонецЕсли;
		ЭлементыФормы.ЗаголовокРедактированиеСписка.Заголовок = ТекстЗаголовка;
		
		ОтборСтрок = Новый Структура("ОбязательныйКУдалению",Истина);
		мТаблицаОбязательныеКУдалению = ТаблицаПлохихВР.Скопировать(ОтборСтрок);
		мТаблицаОбязательныеКУдалению.Свернуть("Ссылка,ВидРасчетаУдалить");
		
		УстановитьСтраницуОсновнойПанели();
		
	КонецЕсли;
	
	УстановитьДоступностьКнопокиИсправить();
	
КонецПроцедуры

// Процедура выполняет проверку настройки при открытии формы
// и формирует таблицы со списками в.р.
Процедура ВыполнитьПервоначальнуюПроверкуПВР()
	
	ЕстьПлохиеПВР = ПроверкаИнформационнойБазыЗК.ЕстьОшибкиНастройкиВедущихВытесняющихВР(мТаблицаВРВытесняющие, мТаблицаПлохихВРВытесняющие, мТаблицаВРВедущие, мТаблицаПлохихВРВедущие);
	ЕстьОшибкиВытесняющихВР = мТаблицаПлохихВРВытесняющие.Количество()>0;
	ЕстьОшибкиВедущихВР 	= мТаблицаПлохихВРВедущие.Количество()>0;
	
	Если Не ЕстьОшибкиВытесняющихВР и Не ЕстьОшибкиВедущихВР Тогда
		ТекстРезультатПроверки = "Ошибок настройки списков вытесняющих и ведущих видов расчета не обнаружено";
		ЭлементыФормы.НадписьРезультатПроверки.ЦветТекста = ЦветаСтиля.ТекстСообщенияИнформации;
		ЭлементыФормы.ПолеКартинкаРезультатПроверки.Картинка = БиблиотекаКартинок.ВыполненоУспешно32;
	Иначе
		ЭлементыФормы.НадписьРезультатПроверки.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
		ЭлементыФормы.ПолеКартинкаРезультатПроверки.Картинка = БиблиотекаКартинок.Предупреждение32;
		Если ЕстьОшибкиВытесняющихВР и ЕстьОшибкиВедущихВР Тогда
			ТекущийСписокВР = "Ведущие"; //начнем исправление с ведущих
			ТекстРезультатПроверки = "Обнаружены ошибки настройки списка вытесняющих и ведущих видов расчета.
										|Для исправления ошибок нажмите кнопку ""Исправить"".";
		ИначеЕсли ЕстьОшибкиВедущихВР Тогда
			ТекущийСписокВР = "Ведущие";
			ТекстРезультатПроверки = "Обнаружены ошибки настройки списка ведущих видов расчета.
										|Для исправления ошибок нажмите кнопку ""Исправить"".";
		ИначеЕсли ЕстьОшибкиВытесняющихВР Тогда
			ТекущийСписокВР = "Вытесняющие";
			ТекстРезультатПроверки = "Обнаружены ошибки настройки списка вытесняющих видов расчета.
										|Для исправления ошибок нажмите кнопку ""Исправить"".";
		КонецЕсли;
	КонецЕсли;
	ЭлементыФормы.НадписьРезультатПроверки.Заголовок = ТекстРезультатПроверки;
	
	УстановитьДоступностьКнопокиИсправить();
	
КонецПроцедуры

// Процедура выполняет проверку настройки, но исходными данными
// являются таблицы значений, проверяется результат корректировки списков
// 
Процедура ПовторитьПроверкуВРПослеКорректировки()

	// выполним проверку настройки по новому состоянию таблицы 
	Если ТекущийСписокВР = "Ведущие" Тогда
		мТаблицаПлохихВРВедущие = ПроверкаИнформационнойБазыЗК.ПолучитьТаблицуПлохихВедущихВытесняющихВР(мТаблицаВРВедущие);
		ТаблицаПлохихВР = мТаблицаПлохихВРВедущие;
	Иначе
		мТаблицаПлохихВРВытесняющие = ПроверкаИнформационнойБазыЗК.ПолучитьТаблицуПлохихВедущихВытесняющихВР(мТаблицаВРВытесняющие);
		ТаблицаПлохихВР = мТаблицаПлохихВРВытесняющие;
	КонецЕсли;
	
	//Найдем ВР обязательные к удалению
	ОтборСтрок = Новый Структура("ОбязательныйКУдалению",Истина);
	мТаблицаОбязательныеКУдалению = ТаблицаПлохихВР.Скопировать(ОтборСтрок);
	мТаблицаОбязательныеКУдалению.Свернуть("Ссылка,ВидРасчетаУдалить");
	
	УстановитьСтраницуОсновнойПанели();

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура КнопкаИсправитьОшибкиНажатие(Элемент)
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.НачальнаяСтраница Тогда
		
		Если ТекущийСписокВР = "Ведущие" Тогда
			ТаблицаПлохихВР = мТаблицаПлохихВРВедущие;
			ТекстЗаголовка = "Исправление ошибок в списке ведущих расчетов";
		Иначе
			ТаблицаПлохихВР = мТаблицаПлохихВРВытесняющие;
			ТекстЗаголовка = "Исправление ошибок в списке вытесняющих расчетов";
		КонецЕсли;
		ЭлементыФормы.ЗаголовокРедактированиеСписка.Заголовок = ТекстЗаголовка;
		
		ОтборСтрок = Новый Структура("ОбязательныйКУдалению",Истина);
		мТаблицаОбязательныеКУдалению = ТаблицаПлохихВР.Скопировать(ОтборСтрок);
		мТаблицаОбязательныеКУдалению.Свернуть("Ссылка,ВидРасчетаУдалить");
		
		УстановитьСтраницуОсновнойПанели();
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ОбязательныеКУдалению Тогда
		
		ТекущаяСтрока = ЭлементыФормы.ТаблицаЦиклическихСсылок.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ВР1 = ТекущаяСтрока.Ссылка;
		ВР2 = ТекущаяСтрока.ВидРасчетаУдалить;
		
		Если ВариантЦиклическаяСсылка = 1 Тогда
			ВРСсылка  = ВР1;
			ВРУдалить = ВР2;
		Иначе
			ВРСсылка  = ВР2;
			ВРУдалить = ВР1;
		КонецЕсли;
		
		Если ТекущийСписокВР = "Ведущие" Тогда
			ТаблицаВРДляПроверки = мТаблицаВРВедущие;
		Иначе
			ТаблицаВРДляПроверки = мТаблицаВРВытесняющие;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("Ссылка", ВРСсылка);
		ОтборСтрок.Вставить("ВидРасчета", ВРУдалить);
		МассивСтрокКУдалению = ТаблицаВРДляПроверки.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаТЗ Из МассивСтрокКУдалению Цикл
			ТаблицаВРДляПроверки.Удалить(СтрокаТЗ);
		КонецЦикла;
		
		ПовторитьПроверкуВРПослеКорректировки();
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.РедактированиеСписка Тогда
		
			
		ТекущаяСтрока = ЭлементыФормы.СписокПлохихВР.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ВРСсылка = ТекущаяСтрока.Значение;
		
		Если ТекущийСписокВР = "Ведущие" Тогда
			ТаблицаВРДляПроверки = мТаблицаВРВедущие;
		Иначе
			ТаблицаВРДляПроверки = мТаблицаВРВытесняющие;
		КонецЕсли;
		
		Если ВариантСпискаКорректировки = 1 Тогда
			// удаляем
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("Ссылка", ВРСсылка);
			Для каждого СтрокаСписка Из СписокВРУдалить Цикл
				ОтборСтрок.Вставить("ВидРасчета", СтрокаСписка.Значение);
				МассивСтрокКУдалению = ТаблицаВРДляПроверки.НайтиСтроки(ОтборСтрок);
				Для каждого СтрокаТЗ Из МассивСтрокКУдалению Цикл
					ТаблицаВРДляПроверки.Удалить(СтрокаТЗ);
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			// добавляем
			Для каждого СтрокаСписка Из СписокВРДобавить Цикл
				
				НоваяСтрока = ТаблицаВРДляПроверки.Добавить();
				НоваяСтрока.Ссылка = ВРСсылка;
				НоваяСтрока.ВидРасчета = СтрокаСписка.Значение;
				НоваяСтрока.Предопределенный = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПовторитьПроверкуВРПослеКорректировки();

		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СохранениеНастроек Тогда	
		
		СохранитьДанные();
		
	КонецЕсли;
	

	//УстановитьДоступностьКнопокиДалее();
	
КонецПроцедуры

Процедура СписокПлохихВРПриАктивизацииСтроки(Элемент)
	ОбработатьАктивизациюСтрокиСписокПлохихВР();
КонецПроцедуры

Процедура ТаблицаЦиклическихСсылокПриАктивизацииСтроки(Элемент)
	ОбработатьАктивизациюТаблицаЦиклическихСсылок();
КонецПроцедуры

Процедура ВариантЦиклическаяСсылкаПриИзменении(Элемент)
	ЭлементыФормы.КнопкаИсправитьОшибки.Доступность = Истина;
КонецПроцедуры

Процедура ВариантСпискаКорректировкиПриИзменении(Элемент)
	ЭлементыФормы.КнопкаИсправитьОшибки.Доступность = Истина;
КонецПроцедуры

Процедура ЗаписатьНовуюНастройку(ТекущийСписокВР, НоваяТаблицаВР, ТаблицаДляЗаписи)
	
	Для каждого СтрокаТЗ Из ТаблицаДляЗаписи Цикл
		
		ВРСсылка = СтрокаТЗ.Ссылка;
		
		ВидРасчетаОбъект = ВРСсылка.ПолучитьОбъект();
		
		Если ТекущийСписокВР = "Вытесняющие" Тогда
			ВидРасчетаТаблица = ВидРасчетаОбъект.ВытесняющиеВидыРасчета;
		Иначе
			ВидРасчетаТаблица = ВидРасчетаОбъект.ВедущиеВидыРасчета;
		КонецЕсли;	
		
		// обходим с последней строки табличной части и удаляем не предопределенные строки
		Индекс = ВидРасчетаТаблица.Количество();
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Если ВидРасчетаТаблица[Индекс].Предопределенный Тогда
				Продолжить;
			КонецЕсли;
			ВидРасчетаТаблица.Удалить(Индекс);
		КонецЦикла;
		
		// получим новый список ведущих или вытесняющих
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("Ссылка", ВРСсылка);
		ВремТаблица = НоваяТаблицаВР.Скопировать(ОтборСтрок);
		ВремТаблица.Свернуть("ВидРасчета");
		МассивВР = ВремТаблица.ВыгрузитьКолонку("ВидРасчета");
		Для каждого ВР Из МассивВР Цикл
			Если ВидРасчетаТаблица.Найти(ВР,"ВидРасчета") = Неопределено Тогда
				НоваяСтрока            = ВидРасчетаТаблица.Добавить();
				НоваяСтрока.ВидРасчета = ВР;
			КонецЕсли;
		КонецЦикла;
		
		ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
		ВидРасчетаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьДанные()
	
	НачатьТранзакцию();
	
	// получим из БД текущую настройку списка ведущих или вытесняющих
	ТекстЗапросаВытесняющие = "";
	ТекстЗапросаВедущие = "";
	ПроверкаИнформационнойБазыЗК.ПолучитьТекстыЗапросовСписковВР(ТекстЗапросаВытесняющие, ТекстЗапросаВедущие);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВытесняющие;
	ИсходнаяТаблицаВытесняющие = Запрос.Выполнить().Выгрузить();
	// получим таблицу тех ВР, настройка которых изменилась
	ТаблицаДляЗаписиВытесняющие = ПолучитьТаблицуДляЗаписи(ИсходнаяТаблицаВытесняющие, мТаблицаВРВытесняющие);
	ЗаписатьНовуюНастройку("Вытесняющие",мТаблицаВРВытесняющие, ТаблицаДляЗаписиВытесняющие);
	
	Запрос.Текст = ТекстЗапросаВедущие;
	ИсходнаяТаблицаВедущие = Запрос.Выполнить().Выгрузить();
	// получим таблицу тех ВР, настройка которых изменилась
	ТаблицаДляЗаписиВедущие = ПолучитьТаблицуДляЗаписи(ИсходнаяТаблицаВедущие, мТаблицаВРВедущие);
	ЗаписатьНовуюНастройку("Ведущие", мТаблицаВРВедущие, ТаблицаДляЗаписиВедущие);

	ЗафиксироватьТранзакцию();
	
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.НачальнаяСтраница;
	
	// еще раз выполним проверку настройки
	ВыполнитьПервоначальнуюПроверкуПВР();
	
КонецПроцедуры

Процедура ОтменаНажатие(Элемент)
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.НачальнаяСтраница Тогда
		// стартовая страница, не задаем вопросы, просто закрываем форму
		Закрыть();
	Иначе
		
		ТекстВопроса = "Ошибки настройки не были исправлены." + Символы.ПС + "Закрыть форму?";
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,) = КодВозвратаДиалога.Да Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.НачальнаяСтраница;
	ВыполнитьПервоначальнуюПроверкуПВР();
	
КонецПроцедуры

//////////////////////////////////////////////////
мТаблицаПлохихВРВедущие = Новый ТаблицаЗначений;
мТаблицаПлохихВРВытесняющие = Новый ТаблицаЗначений;
мТаблицаВРВедущие = Новый ТаблицаЗначений;
мТаблицаВРВытесняющие = Новый ТаблицаЗначений;
мТаблицаОбязательныеКУдалению = Новый ТаблицаЗначений;
ТекущийСписокВР = "";