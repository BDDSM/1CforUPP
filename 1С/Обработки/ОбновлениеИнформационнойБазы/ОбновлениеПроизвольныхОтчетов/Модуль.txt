Процедура ЗаполнитьИдентификаторПользовательскойНастройки(ИмяПоля, КоллекцияПолей)

	ЗначениеПоля = КоллекцияПолей.Найти(ИмяПоля);
	Если ЗначениеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПоля.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	
КонецПроцедуры //

Процедура СделатьПараметрДоступным(ИмяПараметра, ПараметрыСКД)

	Параметр = ПараметрыСКД.Найти(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр.ОграничениеИспользования = Ложь;
	
КонецПроцедуры //

Функция ОбновитьНастройкиКомпоновки(СтарыеНастройки, СКД, ВидПроизвольногоОтчета)

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СтарыеНастройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Добавим группировки в пользовательские настройки
	Настройки.Структура.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	
	// Добавим отбор в пользовательские настройки
	Настройки.Отбор.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	
	// Добавим параметры в пользовательские настройки
	ЭлементыПараметровДанных = Настройки.ПараметрыДанных.Элементы;
	ЗаполнитьИдентификаторПользовательскойНастройки("Период", ЭлементыПараметровДанных);
	
	Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
		ИЛИ ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт
		ИЛИ ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		
		ЗаполнитьИдентификаторПользовательскойНастройки("СмещениеПериода", ЭлементыПараметровДанных);
		ЗаполнитьИдентификаторПользовательскойНастройки("Периодичность", ЭлементыПараметровДанных);
		ЗаполнитьИдентификаторПользовательскойНастройки("Горизонт", ЭлементыПараметровДанных);
	КонецЕсли; 
	
	Возврат Настройки;
	
КонецФункции //
 
Процедура ОбновитьСохраненныеНастройкиПроизвольныхОтчетов()

	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СохраненныеНастройки.ХранилищеНастроек,
	               |	СохраненныеНастройки.Ссылка КАК Ссылка,
	               |	СохраненныеНастройки.НастраиваемыйОбъект,
	               |	ПроизвольныеОтчеты.ВидПроизвольногоОтчета КАК ВидПроизвольногоОтчета,
	               |	ПроизвольныеОтчеты.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных
	               |ИЗ
	               |	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизвольныеОтчеты КАК ПроизвольныеОтчеты
	               |		ПО СохраненныеНастройки.НастраиваемыйОбъект = ПроизвольныеОтчеты.Ссылка
	               |ГДЕ
	               |	СохраненныеНастройки.НастраиваемыйОбъект ССЫЛКА Справочник.ПроизвольныеОтчеты
	               |	И СохраненныеНастройки.ТипНастройки = &ТипНастройки";
	 
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиОтчета);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СКД = Выборка.СхемаКомпоновкиДанных.Получить();
		ХранилищеНастроек = Выборка.ХранилищеНастроек.Получить();
		
		Настройки = ОбновитьНастройкиКомпоновки(ХранилищеНастроек.НастройкиКомпоновщика, СКД, Выборка.ВидПроизвольногоОтчета);
		
		ХранилищеНастроек.Вставить("НастройкиКомпоновщика", Настройки);
		
		НастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НастройкаОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(ХранилищеНастроек);
		НастройкаОбъект.Записать();
		
	КонецЦикла;
		
КонецПроцедуры //

Процедура ВыполнитьОбработку() Экспорт

	ОбщегоНазначения.СообщитьОСостоянииОбновления("Произвольные отчеты", "Обновление произвольных отчетов");

	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПроизвольныеОтчеты.Ссылка,
	               |	ПроизвольныеОтчеты.ВидПроизвольногоОтчета
	               |ИЗ
	               |	Справочник.ПроизвольныеОтчеты КАК ПроизвольныеОтчеты
	               |ГДЕ
	               |	(НЕ ПроизвольныеОтчеты.ЭтоГруппа)";
	 
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбработкаПрерыванияПользователя();		
		
		ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СКД = ОтчетОбъект.СхемаКомпоновкиДанных.Получить();
		
		СделатьПараметрДоступным("Период", СКД.Параметры);
		
		// Сконвертируем настройки СКД
		// Для этого их нужно передать в компоновщик настроек и получить обратно
		Настройки = ОбновитьНастройкиКомпоновки(СКД.НастройкиПоУмолчанию, СКД, Выборка.ВидПроизвольногоОтчета);
		ТиповыеОтчеты.ЗагрузитьВСхемуНастройкиКомпоновщика(СКД, Настройки);
		
		ОтчетОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(СКД);
		ОтчетОбъект.Записать();
		
	КонецЦикла;	
	
	// В сохраненных настройках также необходимо установить пользовательские настройки
	ОбновитьСохраненныеНастройкиПроизвольныхОтчетов();
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("Произвольные отчеты", "Обновление произвольных отчетов завершено",,, Истина);
	
КонецПроцедуры //

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ВыполнитьОбработку();
	
КонецПроцедуры