///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВидOnline;
Перем мВидOffline;
Перем мВидФР;
Перем мВидЭквайринговаяСистема;
Перем мВалютаРеглУчета;
Перем мСкладыВТабличнойЧасти;

Перем мМассивЭС;

///////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "При открытии" формы. Данное событие
// возникает при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Нет.
//
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Дата     = РабочаяДата;
	КассаККМ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	                                       "ОсновнаяКассаККМ");
	Запрос   = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|    СпрСклады.Ссылка  КАК Склад
	|ИЗ
	|    Справочник.Склады КАК СпрСклады
	|ГДЕ
	|    НЕ СпрСклады.ПометкаУдаления
	|    И  СпрСклады.ВидСклада <> &ВидСклада");
	Запрос.УстановитьПараметр("ВидСклада", Перечисления.ВидыСкладов.НТТ);

	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	ЭлементыФормы.Склад.СписокВыбора.ЗагрузитьЗначения(МассивСкладов);

	УстановитьДоступностьПоляСклад();

	мМассивЭС = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидЭквайринговаяСистема);

	КоличествоЭС = мМассивЭС.Количество();
	Для Тмп = 1 По КоличествоЭС Цикл
		ТекЭС = мМассивЭС[КоличествоЭС - Тмп];

		Если Не ПолучитьСерверТО().ПоддерживаетсяСверкаИтогов(ТекЭС) Тогда
			мМассивЭС.Удалить(КоличествоЭС - Тмп);
		КонецЕсли;
	КонецЦикла;

	МожноВыполнитьСверкуИтоговПоПлатежнымКартам = (мМассивЭС.Количество() <> 0
	   И ПолучитьСерверТО().ПолучитьСписокУстройств(мВидФР).Количество() <> 0);

	ЭлементыФормы.ВыполнитьСверкуИтоговПоПлатежнымКартам.Видимость = МожноВыполнитьСверкуИтоговПоПлатежнымКартам;
	ВыполнитьСверкуИтоговПоПлатежнымКартам = МожноВыполнитьСверкуИтоговПоПлатежнымКартам;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "При изменении" поля ввода "КассаККМ".
//
// Параметры:
//  Элемент - <ПолеВвода>
//          - Поле ввода, с которым связано данное событие ("КассаККМ").
//
Процедура КассаККМПриИзменении(Элемент)

	УстановитьДоступностьПоляСклад();

КонецПроцедуры // КассаККМПриИзменении()

// Процедура представляет обработчик события "Нажатие" кнопки
// "ЗакрытьСмену" командной панели "КоманднаяПанельДействий".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "ЗакрытьСмену").
//
Процедура КоманднаяПанельДействийЗакрытьСмену(Кнопка)

	МассивOnline  = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидOnline,  КассаККМ);
	МассивOffline = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидOffline, КассаККМ);
	МассивФР      = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидФР,      КассаККМ);

	Если ВыполнитьСверкуИтоговПоПлатежнымКартам Тогда
		Если мМассивЭС.Количество() = 1 Тогда
			ТекМассивЭС = мМассивЭС;
		Иначе
			ТекМассивЭС = Новый Массив;

			СписокЭС = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(мМассивЭС);
			СписокЭС.ЗаполнитьПометки(Истина);

			Если СписокЭС.ОтметитьЭлементы("Укажите эквайринговые системы...") Тогда
				Для Каждого ТекЭС Из СписокЭС Цикл
					Если ТекЭС.Пометка Тогда
						ТекМассивЭС.Добавить(ТекЭС.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Если МассивФР.Количество() = 0 Тогда
			ФР = Неопределено;
		ИначеЕсли МассивФР.Количество() = 1 Тогда
			ФР = МассивФР[0];
		Иначе
			ФР = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(МассивФР).ВыбратьЭлемент("Необходимо выбрать фискальный регистратор");
			Если ФР <> Неопределено Тогда
				ФР = ФР.Значение;
			КонецЕсли;
		КонецЕсли;

		Если ФР <> Неопределено Тогда
			Для Каждого ЭС Из ТекМассивЭС Цикл
				ПолучитьСерверТО().ИтогиДняПоКартам(ЭС, ФР);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если МассивOnline.Количество() > 0
	     Или МассивФР.Количество() > 0 Тогда
		ОбработкаЧековККМ();
		Пароль    = ПолучитьСерверТО().ПолучитьПарольАдминистратораККМ();
		Результат = Неопределено;
		ФР        = Неопределено;
		Для Каждого ФР Из МассивФР Цикл
			Результат = ПолучитьСерверТО().ОтчетСГашением(ФР, Пароль);
			Если ЗначениеЗаполнено(Результат) Тогда
				ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(Результат);
				Сообщить(ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли МассивOnline.Количество() = 0 И МассивOffline.Количество() = 0 И МассивФР.Количество() = 0 Тогда
		ОбработкаЧековККМ();
	КонецЕсли;

	Результат = Неопределено;
	ККМ       = Неопределено;
	Для Каждого ККМ Из МассивOffline Цикл
		ОбработкаЧековOffline(ККМ);
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельДействийЗакрытьСмену()

///////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает доступность поля выбора "Склад".
//
// Параметры:
//  Нет.
//
Процедура УстановитьДоступностьПоляСклад()

	МассивККМ                       = ПолучитьСерверТО().ПолучитьСписокУстройств(
	                                      мВидOffline,
	                                      КассаККМ);
	ЭлементыФормы.Склад.Доступность = (МассивККМ.Количество() > 0);

КонецПроцедуры // УстановитьДоступностьПоляСклад()

// Функция осуществляет создание нового документа "Отчёт о розничных продажах".
//
// Возвращаемое значение:
//  <ДокументОбъект.ОтчетОРозничныхПродажах> - Созданный документ.
//
Функция СоздатьОтчетОРозничныхПродажах()

	ДатаДокумента = КонецДня(Дата);
	ТекущаяДата   = ТекущаяДата();

	Если ДатаДокумента = КонецДня(ТекущаяДата) Тогда
		ДатаДокумента   = ТекущаяДата;
	КонецЕсли;

	Отчет             = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Отчет.Дата        = ДатаДокумента;
	Отчет.Склад       = Склад;
	Отчет.КассаККМ    = КассаККМ;
	Отчет.Организация = КассаККМ.Владелец;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Отчет, "Продажа");
	Отчет.ПриИзмененииДоговораЭквайринга();

	Отчет.УчитыватьНДС     = Истина;
	Отчет.СуммаВключаетНДС = Истина;

	Возврат Отчет;

КонецФункции // СоздатьОтчетОРозничныхПродажах()

// Функция выполняет запись переданного документа. Возвращает флаг успешной записи.
//
// Параметры:
//  ОтчетОРозничныхПродажах - объект документа.
//
// Возвращаемое значение:
//  Булево. Истина, если запись выполнена успешно.
//
Функция ЗаписатьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажах)

	ОтчетОРозничныхПродажах.ДополнитьДокументЗначениямиПоУмолчанию();

	Попытка
		ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		Результат = Истина;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать документ """ + ОтчетОРозничныхПродажах + """."
		   + Символы.ПС + Символы.ПС + ОписаниеОшибки());
		Результат = Ложь;
	КонецПопытки;

	Возврат Результат;

КонецФункции // ЗаписатьОтчетОРозничныхПродажах()

// Функция осуществляет перенос информации из чеков ККМ в отчёт о розничных продажах.
//
Процедура ОбработкаЧековККМ()

	Если КонецДня(Дата) = КонецДня(ТекущаяДата()) Тогда
		РежимПроведения = РежимПроведенияДокумента.Оперативный;
	Иначе
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	МассивДокументовКПроведению = Новый Массив;

	ОтчетОРозничныхПродажах = СоздатьОтчетОРозничныхПродажах();
	СоответствиеТарифов = УправлениеРозничнойТорговлей.СформироватьСоответствиеТарифовЭквайринг(ОтчетОРозничныхПродажах.ДоговорЭквайринга);

	ОтчетОРозничныхПродажах.Склад = Справочники.Склады.ПустаяСсылка();

	ЗапросПоЧекам = Новый Запрос;
	ЗапросПоЧекам.УстановитьПараметр("НачДата" , НачалоДня(Дата));
	ЗапросПоЧекам.УстановитьПараметр("КонДата" , КонецДня(Дата));
	ЗапросПоЧекам.УстановитьПараметр("КассаККМ", КассаККМ);

	ЗапросПоЧекам.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК Док
	|ГДЕ
	|	Док.Дата МЕЖДУ &НачДата И &КонДата
	|	И Док.КассаККМ = &КассаККМ
	|	И Док.Проведен
	|ДЛЯ ИЗМЕНЕНИЯ Документ.ЧекККМ
	|";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата"           , НачалоДня(Дата));
	Запрос.УстановитьПараметр("КонДата"           , КонецДня(Дата));
	Запрос.УстановитьПараметр("КассаККМ"          , КассаККМ);
	Запрос.УстановитьПараметр("ВидОперацииПродажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*,
	|	ПУСТАЯТАБЛИЦА.(КлючСтроки, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения, Количество, Цена) КАК СоставНабора,
	|	0 КАК КлючСтроки
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	Док.Номенклатура.Комплект КАК Комплект,
	|	Док.Ссылка.Склад КАК Склад,
	|	Док.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Количество
	|			ИНАЧЕ -Док.Количество
	|		КОНЕЦ) КАК Количество,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры КАК СерияНоменклатуры,
	|	Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Док.Коэффициент КАК Коэффициент,
	|	Док.Цена КАК Цена,
	|	Док.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	Док.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	Док.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Сумма
	|			ИНАЧЕ -Док.Сумма
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И Док.Ссылка.КассаККМ = &КассаККМ
	|	И Док.Ссылка.Проведен
	|	И НЕ Док.Номенклатура.Комплект

	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Цена,
	|	Док.ПроцентСкидкиНаценки,
	|	Док.ПроцентАвтоматическихСкидок,
	|	Док.УсловиеАвтоматическойСкидки,
	|	Док.ЗначениеУсловияАвтоматическойСкидки

	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Количество
	|			ИНАЧЕ -Док.Количество
	|		КОНЕЦ) <> 0) КАК ТоварыБезКомплектов

	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Док.Номенклатура.Комплект,
	|	Док.Ссылка.Склад КАК Склад,
	|	Док.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Количество
	|			ИНАЧЕ -Док.Количество
	|		КОНЕЦ КАК Количество,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры КАК СерияНоменклатуры,
	|	Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Док.Коэффициент КАК Коэффициент,
	|	Док.Цена КАК Цена,
	|	Док.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	Док.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	Док.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|	ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Сумма
	|			ИНАЧЕ -Док.Сумма
	|		КОНЕЦ КАК Сумма,
	|	Док.Ссылка.СоставНабора.(КлючСтроки, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения, Количество, Цена) КАК СоставНабора,
	|	Док.КлючСтроки
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И Док.Ссылка.КассаККМ = &КассаККМ
	|	И Док.Ссылка.Проведен
	|	И Док.Номенклатура.Комплект
	|";

	ЗапросПоОплате = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка.Склад КАК Склад,
	|	Док.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	Док.ВидОплаты КАК ВидОплаты,
	|	СУММА(ВЫБОР КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа ТОГДА
	|		Док.Сумма
	|	ИНАЧЕ
	|		-Док.Сумма
	|	КОНЕЦ) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК Док
	|ГДЕ
	|	Док.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И Док.Ссылка.КассаККМ = &КассаККМ
	|	И Док.Ссылка.Проведен
	|	И Док.ВидОплаты.ТипОплаты <> &ТипОплатыНаличные
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Ссылка,
	|	Док.НомерСтроки,
	|	Док.ВидОплаты.ТипОплаты,
	|	Док.ВидОплаты
	|");

	ЗапросПоОплате.УстановитьПараметр("НачДата"           , НачалоДня(Дата));
	ЗапросПоОплате.УстановитьПараметр("КонДата"           , КонецДня(Дата));
	ЗапросПоОплате.УстановитьПараметр("КассаККМ"          , КассаККМ);
	ЗапросПоОплате.УстановитьПараметр("ВидОперацииПродажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	ЗапросПоОплате.УстановитьПараметр("ТипОплатыНаличные" , Перечисления.ТипыОплатЧекаККМ.Наличные);

	ЗапросПоДисконтнымКартам = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Склад КАК Склад,
	|	Док.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	Док.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	СУММА(ВЫБОР КОГДА Док.ВидОперации = &ВидОперацииПродажа ТОГДА
	|		Док.СуммаДокумента
	|	ИНАЧЕ
	|		-Док.СуммаДокумента
	|	КОНЕЦ) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ КАК Док
	|ГДЕ
	|	Док.Дата МЕЖДУ &НачДата И &КонДата
	|	И Док.КассаККМ = &КассаККМ
	|	И Док.ДисконтнаяКарта <> &ПустаяДисконтнаяКарта
	|	И Док.Проведен
	|СГРУППИРОВАТЬ ПО
	|	Док.Склад,
	|	Док.ДисконтнаяКарта,
	|	Док.ВладелецДисконтнойКарты
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР КОГДА Док.ВидОперации = &ВидОперацииПродажа ТОГДА
	|		Док.СуммаДокумента
	|	ИНАЧЕ
	|		-Док.СуммаДокумента
	|	КОНЕЦ) <> 0
	|");

	ЗапросПоДисконтнымКартам.УстановитьПараметр("НачДата"              , НачалоДня(Дата));
	ЗапросПоДисконтнымКартам.УстановитьПараметр("КонДата"              , КонецДня(Дата));
	ЗапросПоДисконтнымКартам.УстановитьПараметр("КассаККМ"             , КассаККМ);
	ЗапросПоДисконтнымКартам.УстановитьПараметр("ПустаяДисконтнаяКарта", Справочники.ИнформационныеКарты.ПустаяСсылка());
	ЗапросПоДисконтнымКартам.УстановитьПараметр("ВидОперацииПродажа"   , Перечисления.ВидыОперацийЧекККМ.Продажа);
	ЗапросПоДисконтнымКартам.УстановитьПараметр("ТипОплатыНаличные"    , Перечисления.ТипыОплатЧекаККМ.Наличные);

	ОтменитьТранзакцию = Ложь;
	НачатьТранзакцию();

	РезультатЗапросаПоЧекам = ЗапросПоЧекам.Выполнить();
	РезультатЗапроса = Запрос.Выполнить();
	РезультатЗапросаПоОплате = ЗапросПоОплате.Выполнить();
	ТаблицаПоДисконтнымКартам = ЗапросПоДисконтнымКартам.Выполнить().Выгрузить();
	ТаблицаПоДисконтнымКартам.Индексы.Добавить("Склад");

	ТаблицаОплатПлатежныеКарты = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(РезультатЗапросаПоОплате,
	   Новый Структура("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта)).Выгрузить();
	ТаблицаОплатПлатежныеКарты.Индексы.Добавить("Склад");

	ТаблицаОплатБанковскиеКредиты = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(РезультатЗапросаПоОплате,
	   Новый Структура("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.БанковскийКредит)).Выгрузить();
	ТаблицаОплатБанковскиеКредиты.Индексы.Добавить("Склад");

	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = "За кассовую смену не продано ни одного товара по выбранной кассе ККМ.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		ОтменитьТранзакцию = Истина;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не мСкладыВТабличнойЧасти Тогда
				Если НЕ ЗначениеЗаполнено(ОтчетОРозничныхПродажах.Склад) Тогда
					ОтчетОРозничныхПродажах.Склад = Выборка.Склад;
				Иначе
					Если ОтчетОРозничныхПродажах.Склад <> Выборка.Склад Тогда // надо создавать новый документ
						Если Не ОтменитьТранзакцию Тогда
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Склад", ОтчетОРозничныхПродажах.Склад);

							МассивОплат = ТаблицаОплатПлатежныеКарты.НайтиСтроки(СтруктураПоиска);
							Для Каждого Оплата Из МассивОплат Цикл
								НоваяСтрока = ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами.Добавить();
								НоваяСтрока.ВидОплаты = Оплата.ВидОплаты;
								НоваяСтрока.Сумма = Оплата.Сумма;
								НоваяСтрока.ПроцентТорговойУступки = СоответствиеТарифов[НоваяСтрока.ВидОплаты];
								ОтчетОРозничныхПродажах.ПересчитатьТорговуюУступку(НоваяСтрока);

								ТаблицаОплатПлатежныеКарты.Удалить(Оплата);
							КонецЦикла;

							МассивОплат = ТаблицаОплатБанковскиеКредиты.НайтиСтроки(СтруктураПоиска);
							Для Каждого Оплата Из МассивОплат Цикл
								НоваяСтрока = ОтчетОРозничныхПродажах.ОплатаБанковскимиКредитами.Добавить();
								НоваяСтрока.ВидОплаты = Оплата.ВидОплаты;
								НоваяСтрока.Сумма = Оплата.Сумма;
								ОтчетОРозничныхПродажах.ПриИзмененииВидаОплатыБанковскимКредитом(НоваяСтрока);

								ТаблицаОплатБанковскиеКредиты.Удалить(Оплата);
							КонецЦикла;

							МассивДисконтныхКарт = ТаблицаПоДисконтнымКартам.НайтиСтроки(СтруктураПоиска);
							Для Каждого ПродажаПоДисконтнойКарте Из МассивДисконтныхКарт Цикл
								НоваяСтрока = ОтчетОРозничныхПродажах.ПродажиПоДисконтнымКартам.Добавить();
								НоваяСтрока.ДисконтнаяКарта = ПродажаПоДисконтнойКарте.ДисконтнаяКарта;
								НоваяСтрока.ВладелецДисконтнойКарты = ПродажаПоДисконтнойКарте.ВладелецДисконтнойКарты;
								НоваяСтрока.Сумма = ПродажаПоДисконтнойКарте.Сумма;

								ТаблицаПоДисконтнымКартам.Удалить(ПродажаПоДисконтнойКарте);
							КонецЦикла;

							Если ЗаписатьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажах) Тогда
								МассивДокументовКПроведению.Добавить(ОтчетОРозничныхПродажах);
							Иначе
								ОтменитьТранзакцию = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;

						ОтчетОРозничныхПродажах = СоздатьОтчетОРозничныхПродажах();
						СоответствиеТарифов = УправлениеРозничнойТорговлей.СформироватьСоответствиеТарифовЭквайринг(ОтчетОРозничныхПродажах.ДоговорЭквайринга);

						ОтчетОРозничныхПродажах.Склад = Выборка.Склад;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			СтрокаТабличнойЧасти = ОтчетОРозничныхПродажах.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка,
			   "Номенклатура, ЕдиницаИзмерения, Коэффициент, ХарактеристикаНоменклатуры, СерияНоменклатуры, Количество, Цена, ПроцентСкидкиНаценки, ПроцентАвтоматическихСкидок, УсловиеАвтоматическойСкидки, ЗначениеУсловияАвтоматическойСкидки, Сумма");

			Если Выборка.Комплект Тогда
				СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ОтчетОРозничныхПродажах);

				ВыборкаКомплектующих = Выборка.СоставНабора.Выбрать();
				Пока ВыборкаКомплектующих.Следующий() Цикл
					Если ВыборкаКомплектующих.КлючСтроки = Выборка.КлючСтроки Тогда
						СтрокаСоставаНабора = ОтчетОРозничныхПродажах.СоставНабора.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСоставаНабора, ВыборкаКомплектующих,
						   "Номенклатура, ЕдиницаИзмерения, ХарактеристикаНоменклатуры, СерияНоменклатуры, Количество, Цена");
						СтрокаСоставаНабора.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если мСкладыВТабличнойЧасти Тогда
				СтрокаТабличнойЧасти.Склад = Выборка.Склад;
			КонецЕсли;
		КонецЦикла;

		// Удаляем чеки.
		Если Не ОтменитьТранзакцию Тогда
			Попытка
				УдалитьОбъекты(РезультатЗапросаПоЧекам.Выгрузить().ВыгрузитьКолонку("Ссылка"), Ложь);
			Исключение
				ОтменитьТранзакцию = Истина;
				Предупреждение("Не удалось удалить чеки ККМ!");
			КонецПопытки;
		КонецЕсли;

		// Записываем ОтчетОРозничныхПродажах.
		Если Не ОтменитьТранзакцию И ОтчетОРозничныхПродажах.Товары.Количество() > 0 Тогда
			Для Каждого Оплата Из ТаблицаОплатПлатежныеКарты Цикл
				НоваяСтрока = ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами.Добавить();
				НоваяСтрока.ВидОплаты = Оплата.ВидОплаты;
				НоваяСтрока.Сумма = Оплата.Сумма;
				НоваяСтрока.ПроцентТорговойУступки = СоответствиеТарифов[НоваяСтрока.ВидОплаты];
				ОтчетОРозничныхПродажах.ПересчитатьТорговуюУступку(НоваяСтрока);
			КонецЦикла;

			Для Каждого Оплата Из ТаблицаОплатБанковскиеКредиты Цикл
				НоваяСтрока = ОтчетОРозничныхПродажах.ОплатаБанковскимиКредитами.Добавить();
				НоваяСтрока.ВидОплаты = Оплата.ВидОплаты;
				НоваяСтрока.Сумма = Оплата.Сумма;
				ОтчетОРозничныхПродажах.ПриИзмененииВидаОплатыБанковскимКредитом(НоваяСтрока);
			КонецЦикла;

			Для Каждого ПродажаПоДисконтнойКарте Из ТаблицаПоДисконтнымКартам Цикл
				НоваяСтрока = ОтчетОРозничныхПродажах.ПродажиПоДисконтнымКартам.Добавить();
				НоваяСтрока.ДисконтнаяКарта = ПродажаПоДисконтнойКарте.ДисконтнаяКарта;
				НоваяСтрока.ВладелецДисконтнойКарты = ПродажаПоДисконтнойКарте.ВладелецДисконтнойКарты;
				НоваяСтрока.Сумма = ПродажаПоДисконтнойКарте.Сумма;
			КонецЦикла;

			Если ЗаписатьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажах) Тогда
				МассивДокументовКПроведению.Добавить(ОтчетОРозничныхПродажах);
			Иначе
				ОтменитьТранзакцию = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ОтменитьТранзакцию Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
			Для Каждого ДокументКПроведению Из МассивДокументовКПроведению Цикл
				Попытка
					ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести документ """ + ДокументКПроведению + """.");
				КонецПопытки;

				ДокументКПроведению.ПолучитьФорму().Открыть();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЧековККМ()

// Процедура оссуществляет формирование документа "Отчёт о розничных продажах"
// по данным отчёта, загруженного из ККМ, подключенной в режиме Off-Line.
//
// Параметры:
//  ККМ - <Строка>
//      - Идентификатор ККМ, подключенной в режиме Off-Line.
//
Процедура ОбработкаЧековOffline(ККМ)

	Отчет     = Неопределено;
	Результат = ПолучитьСерверТО().ЗагрузитьОтчетОПродажах(ККМ, Отчет);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Если Отчет.Количество() = 0 Тогда
			Результат = ПолучитьСерверТО().ЗавершитьЗагрузкуОтчетаОПродажах(ККМ);
			Если ЗначениеЗаполнено(Результат) Тогда
				ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиККМOfflineТО(Результат);
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
			КонецЕсли;
		Иначе
			ДокОтчет = СоздатьОтчетОРозничныхПродажах();
			Позиция  = Неопределено;
			Для каждого Позиция Из Отчет Цикл
				Товар = ДокОтчет.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(Товар, Позиция);

				Товар.Коэффициент = Товар.ЕдиницаИзмерения.Коэффициент;

				Если мСкладыВТабличнойЧасти Тогда
					Товар.Склад = Склад;
				КонецЕсли;

				СуммаБезСкидок = Товар.Цена * Товар.Количество;
				Если СуммаБезСкидок <> 0 Тогда
					Товар.ПроцентСкидкиНаценки = (1 - Товар.Сумма / СуммаБезСкидок) * 100.0;
				КонецЕсли;
			КонецЦикла;

			ЗаписатьОтчетОРозничныхПродажах(ДокОтчет);

			Результат = ПолучитьСерверТО().ЗавершитьЗагрузкуОтчетаОПродажах(ККМ);
			Если ЗначениеЗаполнено(Результат) Тогда
				ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиККМOfflineТО(Результат);
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
			КонецЕсли;
			ДокОтчет.ПолучитьФорму().Открыть();
		КонецЕсли;
	Иначе
		ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиККМOfflineТО(Результат);
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры // ОбработкаЧековOffline()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = мВидOffline
	 Или Вид = мВидФР 
	 Или Вид = мВидЭквайринговаяСистема Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВидOnline               = Перечисления.ВидыТорговогоОборудования.ККМOnLine;
мВидOffline              = Перечисления.ВидыТорговогоОборудования.ККМOffLine;
мВидФР                   = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор;
мВидЭквайринговаяСистема = Перечисления.ВидыТорговогоОборудования.ЭквайринговаяСистема;
мВалютаРеглУчета         = глЗначениеПеременной("ВалютаРегламентированногоУчета");
УказаниеСкладов          = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мСкладыВТабличнойЧасти   = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации
                        Или УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);