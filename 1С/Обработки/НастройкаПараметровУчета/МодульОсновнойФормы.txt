////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;
Перем мТекущиеДанныеДоРедактирования;


///////////////////////////////////////////////////////////////////////////////
Перем мСтрокаКонстант Экспорт; 
Перем мСоответствиеРеквизитыФормы Экспорт;
Перем мСоответствиеОбъектыМетаданных Экспорт;
Перем мСтруктураПараметрыДоОткрытияФормы Экспорт;

//Перем мУчетнаяПолитикаНалоговыйУчет Экспорт;
//Перем мУчетнаяПолитикаПоЕСН Экспорт;
Перем мУчетнаяПолитикаПоНДФЛ Экспорт;
Перем мУчетнаяПолитикаПоРасчетуЗарплаты Экспорт;
Перем мУчетнаяПолитикаПоРасчетуЗарплатыОП Экспорт;
Перем мУчетнаяПолитикаПоПерсоналуОрганизаций Экспорт;
Перем мУчетнаяПолитикаПоРБП Экспорт;
Перем мУчетнаяПолитикаПоОО Экспорт;

Перем мСтавкиФССНСДоРедактирования Экспорт;

Перем ТаблицаЗаписейПравоПримененияЛьготПоЕСН Экспорт;
Перем мПравоПримененияЛьготПоЕСН Экспорт;
Перем мПрограммаБухучета;
Перем мЕстьКолонкаНУВариантУчетаРасходов;
Перем ТаблицаЗаписейУчетнаяПолитикаПоРБП Экспорт;
Перем ТаблицаЗаписейУчетнаяПолитикаПоОО Экспорт;
Перем ТаблицаЗаписейРазмерыОтчисленийВРезервы Экспорт;
Перем ТаблицаРезервовДоРедактирования;
Перем мБылГодРазмерыОО;
Перем мСоответствиеРасчетанаяБазаОО;
Перем мБылоОценочноеОбязательствоДляОтпуска;

Перем мСписокОбособленныхПодразделений;

///////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПроверитьЗаполнениеПериодов()
	
	ТекстСообщенияОбОшибке = "";
	
	Если ЭлементыФормы.ПанельНастроек.Страницы.РазмерыПособий.Видимость И Не ЗначениеЗаполнено(ДатаРазмеровОграниченияПособий) Тогда
		Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС;
		КонецЕсли;	
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + "Не задана дата применения максимальных размеров пособий";	    
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельНастроек.Страницы.ПрочиеСтавки.Видимость И Не ЗначениеЗаполнено(СтавкаРефинансированияЦБДата) Тогда
		Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС;
		КонецЕсли;	
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + "Не задана дата применения ставки рефинансирования ЦБ РФ";	    
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельНастроек.Страницы.ПрочиеСтавки.Видимость И Не ЗначениеЗаполнено(МинимальнаяОплатаТрудаРФДата) Тогда
		Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС;
		КонецЕсли;	
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + "Не задана дата применения МРОТ";	    
	КонецЕсли;
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции // ПроверитьЗаполнениеПериодов()

Функция ПроверитьВозможностьИзмененияУчетнойПолитикиПоПерсоналу()

	Если ЭлементыФормы.ПанельНастроек.Страницы.КадровыйУчет.Видимость Тогда
		ТекстСообщенияОбОшибке = "";
		БылЕдиныйНумераторКадровыхДокументов = мСтруктураПараметрыДоОткрытияФормы.ЕдиныйНумераторКадровыхДокументов;
		Если Не БылЕдиныйНумераторКадровыхДокументов и БылЕдиныйНумераторКадровыхДокументов <> ЕдиныйНумераторКадровыхДокументов Тогда
			// проверим возможность включения единого нумератора
			НельзяВключитьЕдиныйНумератор = Не ПроцедурыУправленияПерсоналомПолныеПрава.НомераКадровыхДокументовУникальны(Организация, Ложь, ТекстСообщенияОбОшибке);
			Если НельзяВключитьЕдиныйНумератор Тогда
				Возврат ТекстСообщенияОбОшибке;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПроверитьВозможностьИзмененияУчетнойПолитикиПоПерсоналу()

Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()
	
	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

Процедура ЗаполнитьСтруктурыУчетныхПолитик(ПриОткрытии = Ложь)

	// заполним структуры значениями учетных политик по умолчанию
	
	мУчетнаяПолитикаПоНДФЛ.Вставить("ОсобенностиИсчисленияНДФЛ", Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом);
	
	мУчетнаяПолитикаПоПерсоналуОрганизаций.Вставить("КонтрольКоличестваСтавокШтатногоРасписания", Ложь);
	мУчетнаяПолитикаПоПерсоналуОрганизаций.Вставить("КонтрольРазмераСтавокШтатногоРасписания", Ложь);
	мУчетнаяПолитикаПоПерсоналуОрганизаций.Вставить("ЕдиныйНумераторКадровыхДокументов", Ложь);
	мУчетнаяПолитикаПоПерсоналуОрганизаций.Вставить("ПоказыватьТабельныеНомераВДокументах", Ложь);
	мУчетнаяПолитикаПоПерсоналуОрганизаций.Вставить("ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах", Ложь);
	мУчетнаяПолитикаПоПерсоналуОрганизаций.Вставить("ПорядокСписанияФактическихОтпусков", Перечисления.ПорядокСписанияФактическихОтпусков.РасчетнымиДокументами);
	
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("ПроверкаПериодовНачисления", Ложь);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("УчетЗадолженностиПоМесяцам", Истина);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("УпрощенныйУчетНДФЛ", Ложь);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("ИспользуютсяНачисленияВВалюте", Ложь);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("РасчетЗарплатыОрганизацииПоОтветственным", Ложь);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("ПроцентДоплатыЗаРаботуВНочноеВремя", 20);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("ПроцентДоплатыЗаРаботуВВечернееВремя", 10);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("УчитыватьНевыходыДляПлановогоАванса", Истина);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("ДатаРасчетаПлановогоАванса", 15);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("УпрощенныйУчетВзаиморасчетов", Истина);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("НеУчитыватьПраздникиВоВремяОтпускаПриОплатеБольничных", Ложь);
	мУчетнаяПолитикаПоРасчетуЗарплаты.Вставить("НеУменьшатьПропорциональныеПремии", Ложь);
	
	мПравоПримененияЛьготПоЕСН.Вставить("ПравоНаЛьготы", Ложь);
	
	мУчетнаяПолитикаПоРБП.Вставить("РасходыПоОтпускам", Перечисления.ПорядокПризнанияРасходовПоОтпускам.ВМесяцеНачисления);
	
	мУчетнаяПолитикаПоОО.Вставить("ФормироватьБУ", Ложь);
	мУчетнаяПолитикаПоОО.Вставить("ФормироватьНУ", Ложь);
	мУчетнаяПолитикаПоОО.Вставить("ПорядокРасчета", Перечисления.ПорядокРасчетаОценочныхОбязательств.НачисленияИВзносы);
	мУчетнаяПолитикаПоОО.Вставить("ОценочноеОбязательствоДляОтпуска", Справочники.Резервы.ПустаяСсылка());

	Если ПриОткрытии Тогда
		мУчетнаяПолитикаПоРасчетуЗарплатыОП.Вставить("ДатаПередачиФССВыплатыПособий", "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтображениеТаблицыСтавокФССНС()

	Если ЭлементыФормы.ПанельНастроек.Страницы.СтраховыеВзносы.Видимость Тогда
		ЭлементыФормы.СтавкиФССНС.Колонки.Организация.Видимость = мСписокОбособленныхПодразделений.Количество()>1;
	КонецЕсли;

КонецПроцедуры

Функция СохранитьДанные()

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// проверим заполнение периодов
	СтрокаСообщенияОбОшибке = ПроверитьЗаполнениеПериодов();
	Если ЗначениеЗаполнено(СтрокаСообщенияОбОшибке) Тогда
		ОбработкаКомментариев.ДобавитьСообщение(СтрокаСообщенияОбОшибке, Перечисления.ВидыСообщений.Ошибка);
		ОбработкаКомментариев.ДобавитьСообщение("Новые параметры не записаны!", Перечисления.ВидыСообщений.ВажнаяИнформация);
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат Ложь;
	КонецЕсли;
	
	// проверим возможность изменения учетной политики по персоналу
	СтрокаСообщенияОбОшибке = ПроверитьВозможностьИзмененияУчетнойПолитикиПоПерсоналу();
	Если ЗначениеЗаполнено(СтрокаСообщенияОбОшибке) Тогда
		ОбработкаКомментариев.ДобавитьСообщение(СтрокаСообщенияОбОшибке, Перечисления.ВидыСообщений.Ошибка);
		ОбработкаКомментариев.ДобавитьСообщение("Новые параметры не записаны!", Перечисления.ВидыСообщений.ВажнаяИнформация);
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	//ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоЕСН, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоНДФЛ, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(мПравоПримененияЛьготПоЕСН, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоРасчетуЗарплаты, ЭтаФорма); 
	ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоРасчетуЗарплатыОП, ЭтаФорма); 
	ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоПерсоналуОрганизаций, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоРБП, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоОО, ЭтаФорма);
	
	НадоОбновитьУчетнаяПолитикаПоПерсоналуОрганизации = Ложь;
	Если Не ЗаписатьКонстанты(ЭтаФорма, НадоОбновитьУчетнаяПолитикаПоПерсоналуОрганизации) Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат Ложь;
	КонецЕсли;	
	
	// Записываем данные: АлгоритмыРасчетов, РазмерыПособий, ВычетыНДФЛ
	Если Не ЗаписатьОбщиеДанные(ЭтаФорма) Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗаписатьДанныеПоОрганизации(ЭтаФорма, НадоОбновитьУчетнаяПолитикаПоПерсоналуОрганизации) Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат Ложь;
	КонецЕсли;
	
	// запишем право на льготы по ЕСН
	Если СтраницаРасчетЕСНВидима
		и ЭлементыФормы.ПравоНаЛьготы.Доступность Тогда
		
		// регистр сведений ПравоПримененияЛьготПоЕСН
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", ДатаНачалаЛьготаЕСН);
		МассивСтрок = ТаблицаЗаписейПравоПримененияЛьготПоЕСН.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда 
			ЗаполнитьЗначенияСвойств(МассивСтрок[0], мПравоПримененияЛьготПоЕСН);
		Иначе
			// добавим значение из формы в таблицу
			НоваяСтрока = ТаблицаЗаписейПравоПримененияЛьготПоЕСН.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, мПравоПримененияЛьготПоЕСН);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = ДатаНачалаЛьготаЕСН;
			ТаблицаЗаписейПравоПримененияЛьготПоЕСН.Сортировать("Период");
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПравоПримененияЛьготПоЕСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		Если Не РаботаСДиалогамиЗК.ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейПравоПримененияЛьготПоЕСН, "Период") Тогда
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	// запишем учетную политику по РБП
	Если ЭлементыФормы.ПанельНастроек.Страницы.БухучетЗарплаты.Видимость
		и ЭлементыФормы.РасходыПоОтпускам.Доступность Тогда
		
		// регистр сведений УчетнаяПолитикаПоРБП
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", Дата(ПериодРБП,1,1));
		МассивСтрок = ТаблицаЗаписейУчетнаяПолитикаПоРБП.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(МассивСтрок[0], мУчетнаяПолитикаПоРБП);
		Иначе
			// добавим значение из формы в таблицу
			НоваяСтрока = ТаблицаЗаписейУчетнаяПолитикаПоРБП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, мУчетнаяПолитикаПоРБП);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = Дата(ПериодРБП,1,1);
			ТаблицаЗаписейУчетнаяПолитикаПоРБП.Сортировать("Период");
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоРБП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		Если Не РаботаСДиалогамиЗК.ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейУчетнаяПолитикаПоРБП, "Период") Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	// запишем учетную политику по ОО
	Если ЭлементыФормы.ПанельНастроек.Страницы.ОценочныеОбязательства.Видимость
		и ЭлементыФормы.ФормироватьБУ.Доступность Тогда
		
		// регистр сведений УчетнаяПолитикаПоОО
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", Дата(ПериодОО,1,1));
		МассивСтрок = ТаблицаЗаписейУчетнаяПолитикаПоОО.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(МассивСтрок[0], мУчетнаяПолитикаПоОО);
		Иначе
			// добавим значение из формы в таблицу
			НоваяСтрока = ТаблицаЗаписейУчетнаяПолитикаПоОО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, мУчетнаяПолитикаПоОО);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = Дата(ПериодОО,1,1);
			ТаблицаЗаписейУчетнаяПолитикаПоОО.Сортировать("Период");
		КонецЕсли;
		
		// проверим таблицу учетной политики
		Для каждого СтрокаТЗ Из ТаблицаЗаписейУчетнаяПолитикаПоОО Цикл
		
			Если Не СтрокаТЗ.ФормироватьБУ Тогда
				СтрокаТЗ.ФормироватьНУ = Ложь;
				СтрокаТЗ.ОценочноеОбязательствоДляОтпуска = Справочники.Резервы.ПустаяСсылка();
			КонецЕсли;
		
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоОценочнымОбязательствам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		Если Не РаботаСДиалогамиЗК.ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейУчетнаяПолитикаПоОО, "Период") Тогда
			Возврат Ложь;	
		КонецЕсли;
		
		// запишем размеры отчислений в резерв
		
		// перепишем данные из таблицы ТаблицаРезервов в ТаблицаЗаписейРазмерыОтчисленийВРезервы
		СохранитьТаблицуРезервов();
		НаборЗаписей = РегистрыСведений.РазмерыОтчисленийВРезервы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		Если Не РаботаСДиалогамиЗК.ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗаписейРазмерыОтчисленийВРезервы, "Период") Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельНастроек.Страницы.УправленческийУчет.Видимость
		и Не ЭлементыФормы.МетодПланированияУчетаЗатратНаПерсонал.ТолькоПросмотр Тогда
		
		НадоЗаписать = Ложь;
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоПерсоналу.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПоддерживатьНесколькоСхемМотивации 	= ПоддерживатьНесколькоСхемМотивации;
			НоваяЗапись.ПоказыватьТабельныеНомераВДокументах= ПоказыватьТабельныеНомераВДокументахУпр;
			НоваяЗапись.УпрощенныйУчетВзаиморасчетов 		= УпрощенныйУчетВзаиморасчетовУпр;
			НоваяЗапись.РасчетЗарплатыПоОтветственным 		= РасчетЗарплатыПоОтветственным;
			НоваяЗапись.КоличествоДнейОтпускаВГод 			= КоличествоДнейОтпускаВГод;
            НадоЗаписать = Истина;
			
		ИначеЕсли НаборЗаписей[0].ПоддерживатьНесколькоСхемМотивации <> ПоддерживатьНесколькоСхемМотивации
			ИЛИ НаборЗаписей[0].ПоказыватьТабельныеНомераВДокументах <> ПоказыватьТабельныеНомераВДокументахУпр
			ИЛИ НаборЗаписей[0].УпрощенныйУчетВзаиморасчетов <> УпрощенныйУчетВзаиморасчетовУпр
			ИЛИ НаборЗаписей[0].РасчетЗарплатыПоОтветственным <> РасчетЗарплатыПоОтветственным
			ИЛИ НаборЗаписей[0].КоличествоДнейОтпускаВГод <> КоличествоДнейОтпускаВГод Тогда
			
			НаборЗаписей[0].ПоддерживатьНесколькоСхемМотивации 	 = ПоддерживатьНесколькоСхемМотивации;
			НаборЗаписей[0].ПоказыватьТабельныеНомераВДокументах = ПоказыватьТабельныеНомераВДокументахУпр;
			НаборЗаписей[0].УпрощенныйУчетВзаиморасчетов 		 = УпрощенныйУчетВзаиморасчетовУпр;
			НаборЗаписей[0].РасчетЗарплатыПоОтветственным 		 = РасчетЗарплатыПоОтветственным;
			НаборЗаписей[0].КоличествоДнейОтпускаВГод 			 = КоличествоДнейОтпускаВГод;
			НадоЗаписать = Истина;
			
		КонецЕсли;
		
		Если НадоЗаписать Тогда
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				ОбработкаКомментариев.ПоказатьСообщения();
				Возврат Ложь
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
		
	Модифицированность = Ложь;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Применить.Доступность = Ложь;
	
	мСтруктураПараметрыДоОткрытияФормы.ЕдиныйНумераторКадровыхДокументов = ЕдиныйНумераторКадровыхДокументов;
	
	Возврат Истина;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ОсновныеДействияФормыПрименить(Кнопка)
	
	СохранитьДанные();
		
КонецПроцедуры

Процедура ОбработатьИзменениеОрганизации()

	ЗаполнитьСтруктурыУчетныхПолитик();
	ПолучитьДанныеПоОрганизации(ЭтаФорма);
	ПолучитьДанныеПравоПримененияЛьготПоЕСН();
	ПолучитьДанныеУчетнаяПолитикаПоРБП();
	ПолучитьДанныеУчетнаяПолитикаПоОценочнымОбязательствам();
	
	мСписокОбособленныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	мСписокОбособленныхПодразделений.Вставить(0, Организация);
	ОбработатьОтображениеТаблицыСтавокФССНС();

КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработатьИзменениеОрганизации();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	мУчетнаяПолитикаПоРасчетуЗарплатыОП.Вставить("ДатаПередачиФССВыплатыПособий", "");
	ПолучитьУчетнуюПолитикуПоРасчетуЗарплатыОП(ЭтаФорма);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, мУчетнаяПолитикаПоРасчетуЗарплатыОП);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА РасчетЗарплаты

Процедура РасчетЗарплатыОрганизацииПоОтветственнымПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьСписокРасчетчиковЗарплаты.Видимость = РасчетЗарплатыОрганизацииПоОтветственным;
	
КонецПроцедуры

Процедура НадписьСписокРасчетчиковЗарплатыНажатие(Элемент)
	
	ФормаРегистра = РегистрыСведений.РасчетчикиЗарплатыОрганизаций.ПолучитьФормуСписка(, ЭтаФорма, Элемент);
	ФормаРегистра.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА АлгоритмыРасчетов

Процедура УдержаниеЗаОтпускУменьшаетНалогиПриИзменении(Элемент)
	
	УстановитьЗаголовокНадписьУдержаниеЗаОтпускУменьшаетНалогиИнформация(ЭтаФорма);
	
КонецПроцедуры

Процедура ПорядокПересчетаМесячнойСтавкиВЧасовуюПриИзменении(Элемент)
	
	УстановитьЗаголовокНадписьПорядокРасчетаЧасовойСтавки(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА БухучетЗарплаты

Процедура УстановитьЗаголовокНадписиПорядокУчетаРБП()

	ТекстНадписи = "";
	Если РасходыПоОтпускам = Перечисления.ПорядокПризнанияРасходовПоОтпускам.ВМесяцеНачисления Тогда
		ТекстНадписи = "В бухгалтерском и налоговом учете суммы начисления отпускных будут списываться в расходы в месяце начисления отпуска. Расходы будущих периодов не формируются.";
	ИначеЕсли РасходыПоОтпускам = Перечисления.ПорядокПризнанияРасходовПоОтпускам.БУМесяцНачисленияНУМесяцОтпуска Тогда
		ТекстНадписи = "В бухгалтерском учете суммы начисления отпускных будут списываться в расходы в месяце начисления отпуска. Расходы будущих периодов не формируются"
		+ Символы.ПС + "В налоговом учете суммы начисления отпускных будут признаваться в качестве расходов в тех месяцах, на которые пришелся отпуск.";
	Иначе
		ТекстНадписи = "В бухгалтерском и налоговом учете суммы начисления отпускных будут признаваться в качестве расходов в тех месяцах, на которые пришелся отпуск";
	КонецЕсли;	
	
	ЭлементыФормы.НадписьПорядокУчетаОтпусковРБП.Заголовок = ТекстНадписи;

КонецПроцедуры

Процедура ВМесяцеНачисленияПриИзменении(Элемент)
	УстановитьЗаголовокНадписиПорядокУчетаРБП();
КонецПроцедуры


Процедура ОбработатьИзменениеПериодаРБП()
	
	ДатаПериодРБП = Дата(ПериодРБП,1,1);
	
	ДатаОкончания = "";
	Для каждого СтрокаТаблицы Из ТаблицаЗаписейУчетнаяПолитикаПоРБП Цикл
		Если СтрокаТаблицы.Период > ДатаПериодРБП Тогда
			ДатаОкончания = СтрокаТаблицы.Период;
			Прервать;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоРБП, СтрокаТаблицы);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, мУчетнаяПолитикаПоРБП);
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, мУчетнаяПолитикаПоРБП);
		НадписьОкончанияДействия = "по " + Формат(Год(ДатаОкончания), "ЧГ=") + " год";
	Иначе
		НадписьОкончанияДействия = "";
	КонецЕсли;
	ЭлементыФормы.НадписьОкончанияДействияРБП.Заголовок = НадписьОкончанияДействия;
	
КонецПроцедуры

Процедура ПериодРБППриИзменении(Элемент)
	
	ОбработатьИзменениеПериодаРБП();
	
КонецПроцедуры

Процедура ОбработчикОжиданияПериодРБПРегулирование()
	
	ОбработатьИзменениеПериодаРБП();
	
КонецПроцедуры

Процедура ПериодРБПРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПериодРБПРегулирование", 0.1, Истина);
		
КонецПроцедуры

Процедура НадписьИсторияРБРНажатие(Элемент)
	
	ОткрытьФормуИсторииЗначений(ЭтаФорма, Элемент, "УчетнаяПолитикаПоРБП", Неопределено, Организация, "История изменения настройки бухучета зарплаты", ТаблицаЗаписейУчетнаяПолитикаПоРБП, ЭлементыФормы.ПериодРБП.ТолькоПросмотр);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА ОценочныеОбязательства

Процедура ОбработатьИзменениеГодРазмерыОО(ПроверятьИзменениеТаблицы = Ложь)

	ЗаполнитьТаблицуРезервов(ПроверятьИзменениеТаблицы);

КонецПроцедуры

Процедура ОбработатьИзменениеФлагаФормироватьБУ()

	ЭлементыФормы.ФормироватьНУ.Доступность = ФормироватьБУ и ЭлементыФормы.ФормироватьБУ.Доступность;
	ЭлементыФормы.ОценочноеОбязательствоДляОтпуска.ТолькоПросмотр = Не (ФормироватьБУ и ЭлементыФормы.ФормироватьБУ.Доступность);
	ЭлементыФормы.ПорядокРасчета.Доступность = ФормироватьБУ и ЭлементыФормы.ФормироватьБУ.Доступность;
	ЭлементыФормы.ПорядокРасчетаНачисленияИВзносы.Доступность = ФормироватьБУ и ЭлементыФормы.ФормироватьБУ.Доступность;
	
	Если НЕ ФормироватьБУ Тогда
		ФормироватьНУ = Ложь;
		ОценочноеОбязательствоДляОтпуска = Справочники.Резервы.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ФормироватьБУПриИзменении(Элемент)
	
	ОбработатьИзменениеФлагаФормироватьБУ();
	
КонецПроцедуры

Процедура НадписьИсторияООНажатие(Элемент)
	
	ОткрытьФормуИсторииЗначений(ЭтаФорма, Элемент, "УчетнаяПолитикаПоОО", Неопределено, Организация, "История изменения настройки оценочных обязательств", ТаблицаЗаписейУчетнаяПолитикаПоОО, ЭлементыФормы.ПериодОО.ТолькоПросмотр);
	
КонецПроцедуры

Процедура ПериодООПриИзменении(Элемент)
	
	ДатаПериодОО = Дата(ПериодОО,1,1);
	
	ДатаОкончания = "";
	Для каждого СтрокаТаблицы Из ТаблицаЗаписейУчетнаяПолитикаПоОО Цикл
		Если СтрокаТаблицы.Период > ДатаПериодОО Тогда
			ДатаОкончания = СтрокаТаблицы.Период;
			Прервать;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоОО, СтрокаТаблицы);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, мУчетнаяПолитикаПоОО);
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, мУчетнаяПолитикаПоОО);
		НадписьОкончанияДействия = "по " + Формат(Год(ДатаОкончания), "ЧГ=") + " год";
	Иначе
		НадписьОкончанияДействия = "";
	КонецЕсли;
	ЭлементыФормы.НадписьОкончанияДействияОО.Заголовок = НадписьОкончанияДействия;
	
	ОбработатьИзменениеФлагаФормироватьБУ();
	
КонецПроцедуры

Процедура ГодРазмерыООПриИзменении(Элемент)
	ОбработатьИзменениеГодРазмерыОО(Истина);
КонецПроцедуры

Процедура ТаблицаРезервовПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущаяКолонка.Данные = "РасчетнаяБаза" Тогда
		
		Отказ = Истина;
		
		Резерв = ТекущиеДанные.Резерв;
		Если Не ЗначениеЗаполнено(Резерв) Тогда
			Возврат;
		КонецЕсли;
		
		ФормаНастройкиРезервов = Резерв.ПолучитьФорму("ФормаНастройкиРезервовЗК", ЭтаФорма, "РасчетнаяБаза");
		ФормаНастройкиРезервов.РедактироватьБазу = Истина;
		ФормаНастройкиРезервов.РедактироватьРазмерыОтчислений = Ложь;
		ФормаНастройкиРезервов.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаРезервовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(мТекущиеДанныеДоРедактирования, ТекущиеДанные);
	
КонецПроцедуры

Процедура ТаблицаРезервовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// проверим дубли резервов
	Если НоваяСтрока и ОтменаРедактирования Тогда
		Возврат;
	ИначеЕсли ОтменаРедактирования Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, мТекущиеДанныеДоРедактирования);
	Иначе
		
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Резерв) Тогда
			Предупреждение("Оценочное обязательство не выбрано!");
			Отказ = Истина;
			Возврат;	
		КонецЕсли;	
		СтруктураПоиска = Новый Структура("Резерв", Элемент.ТекущиеДанные.Резерв);	
		
		МассивСтрок = ТаблицаРезервов.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 1 Тогда
			Предупреждение("Оценочное обязательство: " + Элемент.ТекущиеДанные.Резерв + " уже выбрано!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаРезервовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		ОформлениеСтроки.Ячейки.РасчетнаяБаза.УстановитьТекст("<перейти к расчетной базе>");
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОценочноеОбязательствоДляОтпускаПриИзменении(Элемент)
	
	Если мБылоОценочноеОбязательствоДляОтпуска = ОценочноеОбязательствоДляОтпуска Тогда
		Возврат;
	КонецЕсли;;
	
	// Проверим, что бы это оценочное обязательство было в таблице
	// для текущего года
	
	// Установим отбор в таблице
	Если ГодРазмерыОО <> ПериодОО Тогда
		ГодРазмерыОО = ПериодОО;
		ЗаполнитьТаблицуРезервов(Истина);
	КонецЕсли;
	
	Отбор = Новый Структура("Резерв", ОценочноеОбязательствоДляОтпуска);
	НайденныеСтроки = ТаблицаРезервов.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаРезервов.Добавить();
		НоваяСтрока.Резерв = ОценочноеОбязательствоДляОтпуска;
	КонецЕсли;
	
	мБылоОценочноеОбязательствоДляОтпуска = ОценочноеОбязательствоДляОтпуска;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА СтраховыеВзносы

Процедура ОбработатьИзменениеПериодПредельнаяВеличинаБазыСтраховыхВзносов()

	ДатаПериод = Дата(ПериодПредельнаяВеличинаБазыСтраховыхВзносов,1,1);
	
	ДатаОкончания = "";
	НовоеЗначениеПредела = 0;
	Для каждого СтрокаТаблицы Из ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов Цикл
		Если СтрокаТаблицы.Период > ДатаПериод Тогда
			ДатаОкончания = СтрокаТаблицы.Период;
			Прервать;
		КонецЕсли;
		НовоеЗначениеПредела = СтрокаТаблицы.Размер;
	КонецЦикла;
	ПредельнаяВеличинаБазыСтраховыхВзносов = НовоеЗначениеПредела; 
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		НадписьОкончанияДействия = "по " + Формат(Год(ДатаОкончания), "ЧГ=") + " год";
	Иначе
		НадписьОкончанияДействия = "";
	КонецЕсли;
	ЭлементыФормы.НадписьОкончанияДействияПредельнаяВеличинаБазыСтраховыхВзносов.Заголовок = НадписьОкончанияДействия;

КонецПроцедуры

Процедура НадписьИсторияПредельнаяВеличинаБазыСтраховыхВзносов(Элемент)
	
	ОткрытьФормуИсторииЗначений(ЭтаФорма, Элемент, "ПредельнаяВеличинаБазыСтраховыхВзносов", Неопределено, Неопределено, "История изменения предельной величины базы страховых взносов", ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов, ЭлементыФормы.ПериодПредельнаяВеличинаБазыСтраховыхВзносов.ТолькоПросмотр);
	
КонецПроцедуры

Процедура ПериодПредельнаяВеличинаБазыСтраховыхВзносовПриИзменении(Элемент)
	
	ОбработатьИзменениеПериодПредельнаяВеличинаБазыСтраховыхВзносов();
	
КонецПроцедуры

Процедура ПериодПредельнаяВеличинаБазыСтраховыхВзносовРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ОбработатьИзменениеПериодПредельнаяВеличинаБазыСтраховыхВзносов();
	
КонецПроцедуры


Процедура ТарифСтраховыхВзносовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.Период.Текст = Формат(ОформлениеСтроки.Ячейки.Период.Значение, "ДФ=гггг") + " г.";
	КонецЦикла;
	
КонецПроцедуры

Процедура ТарифСтраховыхВзносовПериодПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Если Элемент.Значение <> НачалоГода(Элемент.Значение) Тогда
		Элемент.Значение = НачалоГода(Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТарифСтраховыхВзносовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидТарифа = ЭлементыФормы.ТарифСтраховыхВзносов.ОтборСтрок.ВидТарифа.Значение;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА РасчетЕСН

Процедура НадписьСтавкиЕСННажатие(Элемент)
	
	ФормаРегистра = РегистрыСведений.СведенияОСтавкахЕСНиПФР.ПолучитьФормуСписка("ФормаНабораЗаписей", ЭтаФорма, Элемент);
	ФормаРегистра.Открыть();	
	
КонецПроцедуры

Процедура НадписьИсторияЛьготаЕСННажатие(Элемент)
	
	ОткрытьФормуИсторииЗначений(ЭтаФорма, Элемент, "ПравоПримененияЛьготПоЕСН", Неопределено, Организация, "История изменения права применения льготы по ЕСН", ТаблицаЗаписейПравоПримененияЛьготПоЕСН, ЭлементыФормы.ПериодЛьготаЕСН.ТолькоПросмотр)
	
КонецПроцедуры

Процедура ОбработатьИзменениеПериодЛьготаЕСН() Экспорт
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(ПериодЛьготаЕСН, ДатаНачалаЛьготаЕСН);
	
	ДатаОкончания = "";
	Для каждого СтрокаТаблицы Из ТаблицаЗаписейПравоПримененияЛьготПоЕСН Цикл
		Если СтрокаТаблицы.Период > ДатаНачалаЛьготаЕСН Тогда
			ДатаОкончания = СтрокаТаблицы.Период;
			Прервать;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(мПравоПримененияЛьготПоЕСН, СтрокаТаблицы);
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, мПравоПримененияЛьготПоЕСН);
		НадписьОкончанияДействия = "по " + РаботаСДиалогами.ДатаКакМесяцПредставление(ДатаОкончания);
	Иначе
		НадписьОкончанияДействия = "";
	КонецЕсли;
	ЭлементыФормы.НадписьОкончанияДействияЛьготаЕСН.Заголовок = НадписьОкончанияДействия;
	
КонецПроцедуры

Процедура ПериодЛьготаЕСНПриИзменении(Элемент)
	ОбработатьИзменениеПериодЛьготаЕСН();
КонецПроцедуры

Процедура ПериодЛьготаЕСННачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	БылаДатаНачалаЛьготаЕСН = ДатаНачалаЛьготаЕСН;
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ДатаНачалаЛьготаЕСН, ЭтаФорма);
	Если БылаДатаНачалаЛьготаЕСН <> ДатаНачалаЛьготаЕСН Тогда
		Элемент.Значение = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(Элемент.Значение);
		ОбработатьИзменениеПериодЛьготаЕСН();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПериодЛьготаЕСНОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ПериодЛьготаЕСНРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДатаНачалаЛьготаЕСН = ДобавитьМесяц(ДатаНачалаЛьготаЕСН, Направление);
	ПериодЛьготаЕСН = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ДатаНачалаЛьготаЕСН);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПериодЛьготаЕСНРегулирование", 0.1, Истина);

КонецПроцедуры

Процедура ПериодЛьготаЕСНАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
		
КонецПроцедуры

Процедура ПериодЛьготаЕСНОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработчикОжиданияПериодЛьготаЕСНРегулирование()
	
	ОбработатьИзменениеПериодЛьготаЕСН();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА РасчетНДФЛ

Процедура ПериодНДФЛПриИзменении(Элемент)
	
	ОбработатьИзменениеПериодаНДФЛ(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработчикОжиданияПериодНДФЛРегулирование()
	
	ОбработатьИзменениеПериодаНДФЛ(ЭтаФорма);
	
КонецПроцедуры

Процедура ПериодНДФЛРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПериодНДФЛ = ПериодНДФЛ + Направление;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПериодНДФЛРегулирование", 0.1, Истина);
		
КонецПроцедуры

Процедура НадписьИсторияНДФЛНажатие(Элемент)
	
	ОткрытьФормуИсторииЗначений(ЭтаФорма, Элемент, "УчетнаяПолитикаПоНДФЛ", Неопределено, Организация, "История изменения настройки расчета НДФЛ", ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ, ЭлементыФормы.ПериодНДФЛ.ТолькоПросмотр)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА СтавкиФССНСиПЗ

Процедура СтавкиФССНСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ФормаОбработкиСтавкиФССНСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование, ЭтаФорма);
	
КонецПроцедуры

Процедура СтавкиФССНСПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбработатьОкончаниеРедактирвоанияСтрокиТабличногоПоля(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мСтавкиФССНСДоРедактирования, СтавкиФССНС);
	
КонецПроцедуры

Процедура СтавкиФССНСПериодПриИзменении(Элемент)
	
	ФормаОбработкиСтавкиФССНСПериодПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура СтавкиФССНСОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = мСписокОбособленныхПодразделений;
	
КонецПроцедуры

Процедура СтавкиФССНСОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ Организации.Ссылка = &Организация)
	|	И Организации.Наименование ПОДОБНО &Текст";
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Наименование;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СтавкиФССНСОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	Организации.Наименование,
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ Организации.Ссылка = &Организация)
	|	И Организации.Наименование ПОДОБНО &Текст";
	
	
	ТекстВПоле = Текст;
	
	// заменим спецсимволы
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "~", "~~");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "%", "~%");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "_", "~_");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "[", "~[");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "-", "~-");
	ТекстВПоле = ТекстВПоле+"%";
	
	Запрос.УстановитьПараметр("Текст", ТекстВПоле);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество = 0 Тогда
		Предупреждение("В поле ввода неверно задано наименование обособленного подразделения!");
		Значение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации");
		
	ИначеЕсли Количество < 51 Тогда
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
		
	Иначе
		Значение = Неопределено;
		
	КонецЕсли;
	
	СтандартнаяОбработка = (Значение = Неопределено);
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА РазмерыПособий

Процедура НадписьИсторияМаксимальныеРазмерыПособийНажатие(Элемент)
	
	ОткрытьФормуИсторииЗначений(ЭтаФорма, Элемент, "РазмерОграниченияПособияПоНетрудоспособности", Неопределено, Неопределено, "История изменения максимальных размеров пособий", ТаблицаЗаписейОграниченияПособия, ЭлементыФормы.ДатаРазмеровОграниченияПособий.ТолькоПросмотр);
	
КонецПроцедуры

Процедура ДатаРазмеровОграниченияПособийПриИзменении(Элемент)
	
	ФормаОбработкиДатаРазмеровОграниченияПособийПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ПоказатьИсториюИзмененияПособия(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат
	Иначе
		ВидПособия = Элемент.ТекущиеДанные.ВидПособия;
		ОткрытьФормуИсторииЗначений(ЭтаФорма, ЭлементыФормы.СписокГосударственныеПособия, "ГосударственныеПособия", "ВидПособия", ВидПособия, "История изменения пособия: " + ВидПособия, ТаблицаЗаписейГосударственныеПособия, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокГосударственныеПособияПериодНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьИсториюИзмененияПособия(Элемент);
	
КонецПроцедуры

Процедура СписокГосударственныеПособияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьИсториюИзмененияПособия(Элемент);
	
КонецПроцедуры

Процедура СписокГосударственныеПособияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	ПоказатьИсториюИзмененияПособия(Элемент);
	
КонецПроцедуры

Процедура НадписьОткрытьИндексациюНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ОткрытьПерерасчетПособийНаДетей("ИндексацияИПерерасчет");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА ПрочиеСтавки

Процедура НадписьИсторияСтавкаРефинансированияЦБНажатие(Элемент)
	
	ОткрытьФормуИсторииЗначений(ЭтаФорма, Элемент, "СтавкиРефинансированияЦБ", Неопределено, Неопределено, "История изменения ставок рефинансирования ЦБ", ТаблицаЗаписейСтавкиРефинансированияЦБ, ЭлементыФормы.СтавкаРефинансированияЦБДата.ТолькоПросмотр);
	
КонецПроцедуры

Процедура НадписьИсторияМРОТНажатие(Элемент)
	
	ОткрытьФормуИсторииЗначений(ЭтаФорма, Элемент, "МинимальнаяОплатаТрудаРФ", Неопределено, Неопределено, "История изменения Минимального размера оплаты труда", ТаблицаЗаписейМРОТ, ЭлементыФормы.МинимальнаяОплатаТрудаРФДата.ТолькоПросмотр);
	
КонецПроцедуры

Процедура СтавкаРефинансированияЦБДатаПриИзменении(Элемент)
	
	ФормаОбработкиСтавкаРефинансированияЦБДатаПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура МинимальнаяОплатаТрудаРФДатаПриИзменении(Элемент)
	
	ФормаОбработкиМинимальнаяОплатаТрудаРФДатаПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА РасчетНДФЛ

Процедура ПорядокУчетаСтандартныхВычетовПриИзменении(Элемент)
	
	УстановитьЗаголовокНадписиПорядокУчетаСтандартныхВычетов(ЭтаФорма);
	
КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА УправленческийУчет

Процедура РасчетЗарплатыПоОтветственнымПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьСписокРасчетчиковЗарплатыУпр.Видимость = РасчетЗарплатыПоОтветственным;
	
КонецПроцедуры

Процедура НадписьСписокРасчетчиковЗарплатыУпрНажатие(Элемент)
	
	ФормаРегистра = РегистрыСведений.РасчетчикиЗарплаты.ПолучитьФормуСписка(, ЭтаФорма, Элемент);
	ФормаРегистра.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общего назначения


Процедура ПолучитьПравоПримененияЛьготПоЕСН()
	
	НаборЗаписей = РегистрыСведений.ПравоПримененияЛьготПоЕСН.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	ТаблицаЗаписейПравоПримененияЛьготПоЕСН = НаборЗаписей.Выгрузить();
	ТаблицаЗаписейПравоПримененияЛьготПоЕСН.Сортировать("Период");
	
	Если ТаблицаЗаписейПравоПримененияЛьготПоЕСН.Количество() > 0 Тогда
		СтрокаТаблицы = ТаблицаЗаписейПравоПримененияЛьготПоЕСН[ТаблицаЗаписейПравоПримененияЛьготПоЕСН.Количество()-1];
		ЗаполнитьЗначенияСвойств(мПравоПримененияЛьготПоЕСН, СтрокаТаблицы);
		ДатаНачалаЛьготаЕСН = СтрокаТаблицы.Период;
	Иначе
		НоваяСтрока = ТаблицаЗаписейПравоПримененияЛьготПоЕСН.Добавить();
		НоваяСтрока.Период = ДатаНачалаЛьготаЕСН;
		НоваяСтрока.Организация = Организация;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,мПравоПримененияЛьготПоЕСН);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеПравоПримененияЛьготПоЕСН()

	Если СтраницаРасчетЕСНВидима Тогда
		ДатаНачалаЛьготаЕСН = НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату());
		ПолучитьПравоПримененияЛьготПоЕСН();
		ПериодЛьготаЕСН = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ДатаНачалаЛьготаЕСН);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, мПравоПримененияЛьготПоЕСН);
		ЭлементыФормы.НадписьОкончанияДействияЛьготаЕСН.Заголовок = "";
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДанныеУчетнаяПолитикаПоПерсоналу()

	Если ЭлементыФормы.ПанельНастроек.Страницы.УправленческийУчет.Видимость Тогда
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоПерсоналу.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			ПоддерживатьНесколькоСхемМотивации 		= Ложь;
			ПоказыватьТабельныеНомераВДокументахУпр = Ложь;
			УпрощенныйУчетВзаиморасчетовУпр			= Истина;
			РасчетЗарплатыПоОтветственным 			= Ложь;
			КоличествоДнейОтпускаВГод 				= 20;
		Иначе
			ПоддерживатьНесколькоСхемМотивации 		= НаборЗаписей[0].ПоддерживатьНесколькоСхемМотивации;
			ПоказыватьТабельныеНомераВДокументахУпр = НаборЗаписей[0].ПоказыватьТабельныеНомераВДокументах;
			УпрощенныйУчетВзаиморасчетовУпр			= НаборЗаписей[0].УпрощенныйУчетВзаиморасчетов;
			РасчетЗарплатыПоОтветственным 			= НаборЗаписей[0].РасчетЗарплатыПоОтветственным;
			КоличествоДнейОтпускаВГод 				= НаборЗаписей[0].КоличествоДнейОтпускаВГод;
		КонецЕсли;
		
		ЭлементыФормы.НадписьСписокРасчетчиковЗарплатыУпр.Видимость = РасчетЗарплатыПоОтветственным;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ПолучитьУчетнуюПолитикуПоРБП()
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоРБП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	ТаблицаЗаписейУчетнаяПолитикаПоРБП = НаборЗаписей.Выгрузить();
	ТаблицаЗаписейУчетнаяПолитикаПоРБП.Сортировать("Период");
	
	Если ТаблицаЗаписейУчетнаяПолитикаПоРБП.Количество() > 0 Тогда
		СтрокаТаблицы = ТаблицаЗаписейУчетнаяПолитикаПоРБП[ТаблицаЗаписейУчетнаяПолитикаПоРБП.Количество()-1];
		ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоРБП, СтрокаТаблицы);
		ПериодРБП = Год(СтрокаТаблицы.Период);
	Иначе
		НоваяСтрока = ТаблицаЗаписейУчетнаяПолитикаПоРБП.Добавить();
		НоваяСтрока.Период = Дата(ПериодРБП,1,1);
		НоваяСтрока.Организация = Организация;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,мУчетнаяПолитикаПоРБП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеУчетнаяПолитикаПоРБП()

	Если ЭлементыФормы.ПанельНастроек.Страницы.БухучетЗарплаты.Видимость Тогда
		ПериодРБП = Год(ОбщегоНазначения.ПолучитьРабочуюДату());
		ПолучитьУчетнуюПолитикуПоРБП();
		ЗаполнитьЗначенияСвойств(ЭтаФорма, мУчетнаяПолитикаПоРБП);
		УстановитьЗаголовокНадписиПорядокУчетаРБП();
		ЭлементыФормы.НадписьОкончанияДействияРБП.Заголовок = "";
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьТаблицуРезервов()

	ДатаПериода = Дата(мБылГодРазмерыОО,01,01);
	
	// перенесем в таблицу ТаблицаЗаписейРазмерыОтчисленийВРезервы
	// данные из таблицы ТаблицаРезервов на дату ДатаПериода
	
	// удалим строки, с периодом равным ДатаПериода
	СтруктураОтбора = Новый Структура("Период", ДатаПериода);
	НайденныеСтроки = ТаблицаЗаписейРазмерыОтчисленийВРезервы.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		ТаблицаЗаписейРазмерыОтчисленийВРезервы.Удалить(СтрокаТЗ);
	КонецЦикла;
	// получим состояние таблицы резервов
	ТаблицаСрезПоследнихРазмерыОтчислений = ПолучитьСрезПоследнихРазмерыОтчислений(ДатаПериода);
	
	Если ТаблицаРезервов.Количество() = 0 Тогда
		// таблица резервов на этот год пустая
		
		Если Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТаблицаСрезПоследнихРазмерыОтчислений, ТаблицаРезервов) Тогда
			// таблица среза не пустая, у существующих резервов на дату ДатаПериода установим нулевой размер
			Для каждого СтрокаТЗ Из ТаблицаСрезПоследнихРазмерыОтчислений Цикл
				НоваяСтрока = ТаблицаЗаписейРазмерыОтчисленийВРезервы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Период = ДатаПериода;
				НоваяСтрока.Размер = 0;
				НоваяСтрока.Организация = Организация;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе // есть резервы
		
		Если Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТаблицаСрезПоследнихРазмерыОтчислений, ТаблицаРезервов) Тогда
			// надо добавить в таблицу ТаблицаЗаписейРазмерыОтчисленийВРезервы строки по резервам на дату ДатаПериода
			// из таблицы ТаблицаРезервов с размером заданным там
			// из таблицы ТаблицаСрезПоследнихРазмерыОтчислений с нулевым размером
			 
			Для каждого СтрокаТЗ Из ТаблицаСрезПоследнихРазмерыОтчислений Цикл
				НоваяСтрока = ТаблицаЗаписейРазмерыОтчисленийВРезервы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Период = ДатаПериода;
				НоваяСтрока.Размер = 0;
				НоваяСтрока.Организация = Организация;
			КонецЦикла;
			
			Для каждого СтрокаТЗ Из ТаблицаРезервов Цикл
				НоваяСтрока = ТаблицаЗаписейРазмерыОтчисленийВРезервы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Период = ДатаПериода;
				НоваяСтрока.Размер = СтрокаТЗ.Размер;
				НоваяСтрока.Организация = Организация;
			КонецЦикла;
			
			ТаблицаЗаписейРазмерыОтчисленийВРезервы.Свернуть("Период, Резерв, Организация","Размер");
			ТаблицаЗаписейРазмерыОтчисленийВРезервы.Сортировать("Период Убыв");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСрезПоследнихРазмерыОтчислений(ДатаПериода)

	ТаблицаСрезПоследнихРазмерыОтчислений = ТаблицаРезервов.СкопироватьКолонки();
	
	МассивРезервНулевой = Новый Массив;
	СтруктураОтбора = Новый Структура("Резерв");
	Для каждого СтрокаТЗ Из ТаблицаЗаписейРазмерыОтчисленийВРезервы Цикл
		
		Если СтрокаТЗ.Период > ДатаПериода Тогда
			Продолжить;
		КонецЕсли;
		
		// проверим есть ли этот резерв в таблице
		СтруктураОтбора.Резерв = СтрокаТЗ.Резерв;
		НайденныеСтроки = ТаблицаСрезПоследнихРазмерыОтчислений.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			// такого резерва еще нет
			Если СтрокаТЗ.Размер = 0 Тогда
				// запомним этот резерв, его не надо добавлять
				МассивРезервНулевой.Добавить(СтрокаТЗ.Резерв);
			ИначеЕсли МассивРезервНулевой.Найти(СтрокаТЗ.Резерв) = Неопределено Тогда
				//
				НоваяСтрока = ТаблицаСрезПоследнихРазмерыОтчислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаСрезПоследнихРазмерыОтчислений;

КонецФункции // ТаблицаСрезПоследнихРазмерыОтчислений()

Процедура ЗаполнитьТаблицуРезервов(ПроверятьИзменениеТаблицы = Ложь)
	
	Если ПроверятьИзменениеТаблицы и ТаблицаРезервовДоРедактирования <> Неопределено
		и Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТаблицаРезервовДоРедактирования, ТаблицаРезервов) Тогда
		
		СохранитьТаблицуРезервов();

	КонецЕсли;
	
	ТаблицаРезервов.Очистить();
	Если ТаблицаЗаписейРазмерыОтчисленийВРезервы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// ТаблицаЗаписейРазмерыОтчисленийВРезервы - сортировка по периоду, по убыванию
	// заполним таблицу данными на ГодРазмерыОО
	
	ДатаПериода = Дата(ГодРазмерыОО,01,01);
	ТаблицаСрезПоследнихРазмерыОтчислений = ПолучитьСрезПоследнихРазмерыОтчислений(ДатаПериода);
	ТаблицаРезервов = ТаблицаСрезПоследнихРазмерыОтчислений.Скопировать();
	ТаблицаРезервовДоРедактирования = ТаблицаРезервов.Скопировать();
	мБылГодРазмерыОО = ГодРазмерыОО;

КонецПроцедуры

Процедура ПолучитьУчетнуюПолитикуПоОО()
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоОценочнымОбязательствам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	ТаблицаЗаписейУчетнаяПолитикаПоОО = НаборЗаписей.Выгрузить();
	ТаблицаЗаписейУчетнаяПолитикаПоОО.Колонки.ОценочноеОбязательствоДляОтпуска.Заголовок = "Оценочное обязательство по ежегодным отпускам";
	ТаблицаЗаписейУчетнаяПолитикаПоОО.Колонки.ФормироватьБУ.Заголовок = "Формировать в БУ";
	ТаблицаЗаписейУчетнаяПолитикаПоОО.Колонки.ФормироватьНУ.Заголовок = "Формировать в НУ";
	ТаблицаЗаписейУчетнаяПолитикаПоОО.Колонки.ПорядокРасчета.Заголовок = "Порядок расчета";
	ТаблицаЗаписейУчетнаяПолитикаПоОО.Сортировать("Период");
	
	Если ТаблицаЗаписейУчетнаяПолитикаПоОО.Количество() > 0 Тогда
		СтрокаТаблицы = ТаблицаЗаписейУчетнаяПолитикаПоОО[ТаблицаЗаписейУчетнаяПолитикаПоОО.Количество()-1];
		ЗаполнитьЗначенияСвойств(мУчетнаяПолитикаПоОО, СтрокаТаблицы);
		ПериодОО = Год(СтрокаТаблицы.Период); 
	Иначе
		НоваяСтрока = ТаблицаЗаписейУчетнаяПолитикаПоОО.Добавить();
		НоваяСтрока.Период = Дата(ПериодОО,1,1);
		НоваяСтрока.Организация = Организация;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,мУчетнаяПолитикаПоОО);
	КонецЕсли;
	
	ГодРазмерыОО = ПериодОО;
	мБылГодРазмерыОО = ГодРазмерыОО;
	
	НаборЗаписей = РегистрыСведений.РазмерыОтчисленийВРезервы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	ТаблицаЗаписейРазмерыОтчисленийВРезервы = НаборЗаписей.Выгрузить();
	ТаблицаЗаписейРазмерыОтчисленийВРезервы.Сортировать("Период Убыв");
	ЗаполнитьТаблицуРезервов();
	
КонецПроцедуры

Процедура ПолучитьДанныеУчетнаяПолитикаПоОценочнымОбязательствам()

	Если ЭлементыФормы.ПанельНастроек.Страницы.ОценочныеОбязательства.Видимость Тогда
		
		мТекущиеДанныеДоРедактирования = Новый Структура;
		Для каждого Колонка Из ТаблицаРезервов.Колонки Цикл
			мТекущиеДанныеДоРедактирования.Вставить(Колонка.Имя);
		КонецЦикла;
		
		ПериодОО = Год(ОбщегоНазначения.ПолучитьРабочуюДату());
		ПолучитьУчетнуюПолитикуПоОО();
		ЗаполнитьЗначенияСвойств(ЭтаФорма, мУчетнаяПолитикаПоОО);
		ЭлементыФормы.НадписьОкончанияДействияОО.Заголовок = "";
		мБылоОценочноеОбязательствоДляОтпуска = ОценочноеОбязательствоДляОтпуска;
		ОбработатьИзменениеФлагаФормироватьБУ();
		
	КонецЕсли;

КонецПроцедуры


Процедура ПолучитьДанныеИЗаполнитьРеквизитыФормы()
	
	// получим общие данные: АлгоритмыРасчетов, РазмерыПособий, ВычетыНДФЛ
	ПолучитьОбщиеДанныеИЗаполнитьФорму(ЭтаФорма);
	
	// получим данные по Организации
	ПолучитьДанныеПоОрганизации(ЭтаФорма);
	
	// получим ПравоПримененияЛьготПоЕСН
	ПолучитьДанныеПравоПримененияЛьготПоЕСН();
	
	// получим данные из УчетнаяПолитикаПоПерсоналу
	ПолучитьДанныеУчетнаяПолитикаПоПерсоналу();
	
	// получим данные из УчетнаяПолитикаПоРБП
	ПолучитьДанныеУчетнаяПолитикаПоРБП();
	
	// получим данные из УчетнаяПолитикаПоОценочнымОбязательствам
	ПолучитьДанныеУчетнаяПолитикаПоОценочнымОбязательствам();
	
	ОбработатьОтображениеТаблицыСтавокФССНС();
	
КонецПроцедуры

Процедура ЗаполнитьСоответствия()
	
	мСтруктураПараметрыДоОткрытияФормы.Вставить("ЕдиныйНумераторКадровыхДокументов", Неопределено);
	
	Для каждого СтраницаФормы Из ЭлементыФормы.ПанельНастроек.Страницы Цикл
	
		Если СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.АлгоритмыРасчетов Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты);
			МассивОбъектовМетаданных.Добавить(Метаданные.Константы.ОкруглятьДниОтпускаПриКомпенсации);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.УдержаниеЗаОтпускУменьшаетНалоги);
			МассивЭУ.Добавить(ЭлементыФормы.УдержаниеЗаОтпускУменьшаетНалоги1);
			МассивЭУ.Добавить(ЭлементыФормы.ПорядокПересчетаМесячнойСтавкиВЧасовую);
			МассивЭУ.Добавить(ЭлементыФормы.ПорядокПересчетаМесячнойСтавкиВЧасовую1);
			МассивЭУ.Добавить(ЭлементыФормы.ОкруглятьДниОтпускаПриКомпенсации);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.КадровыйУчет Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.КонтрольКоличестваСтавокШтатногоРасписания);  
			МассивЭУ.Добавить(ЭлементыФормы.КонтрольРазмераСтавокШтатногоРасписания);  
			МассивЭУ.Добавить(ЭлементыФормы.ЕдиныйНумераторКадровыхДокументов);
			МассивЭУ.Добавить(ЭлементыФормы.ПоказыватьТабельныеНомераВДокументах);
			МассивЭУ.Добавить(ЭлементыФормы.ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах);
			МассивЭУ.Добавить(ЭлементыФормы.КадровымиПриказами);
			МассивЭУ.Добавить(ЭлементыФормы.РасчетнымиДокументами);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
	
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.РасчетЗарплаты Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций);
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.ТарифПочтовогоСбораОрганизации);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.ПроверкаПериодовНачисления);
			МассивЭУ.Добавить(ЭлементыФормы.УпрощенныйУчетНДФЛ);
			МассивЭУ.Добавить(ЭлементыФормы.РасчетЗарплатыОрганизацииПоОтветственным);
			МассивЭУ.Добавить(ЭлементыФормы.ПроцентДоплатыЗаРаботуВНочноеВремя);   
			МассивЭУ.Добавить(ЭлементыФормы.ПроцентДоплатыЗаРаботуВВечернееВремя);
			МассивЭУ.Добавить(ЭлементыФормы.РасчетЗарплатыОрганизацииПоОтветственным);   
			МассивЭУ.Добавить(ЭлементыФормы.ИспользуютсяНачисленияВВалюте);
			МассивЭУ.Добавить(ЭлементыФормы.НеУчитыватьПраздникиВоВремяОтпускаПриОплатеБольничных);
			МассивЭУ.Добавить(ЭлементыФормы.НеУменьшатьПропорциональныеПремии);
			МассивЭУ.Добавить(ЭлементыФормы.ТарифПочтовогоСбора);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.ВыплатаЗарплаты Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.УчетЗадолженностиПоМесяцам);
			МассивЭУ.Добавить(ЭлементыФормы.УпрощенныйУчетВзаиморасчетов);
			МассивЭУ.Добавить(ЭлементыФормы.УчитыватьНевыходыДляПлановогоАванса);
			МассивЭУ.Добавить(ЭлементыФормы.ДатаРасчетаПлановогоАванса);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);	
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.РасчетНДФЛ Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.ОсобенностиИсчисленияНДФЛ);
			МассивЭУ.Добавить(ЭлементыФормы.ОсобенностиИсчисленияНДФЛ1);
			МассивЭУ.Добавить(ЭлементыФормы.ПериодНДФЛ);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.ОценочныеОбязательства Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаПоОценочнымОбязательствам);
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.РазмерыОтчисленийВРезервы);
			МассивОбъектовМетаданных.Добавить(Метаданные.Справочники.Резервы);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.ФормироватьБУ); 
			МассивЭУ.Добавить(ЭлементыФормы.ФормироватьНУ);
			МассивЭУ.Добавить(ЭлементыФормы.ОценочноеОбязательствоДляОтпуска);
			МассивЭУ.Добавить(ЭлементыФормы.ПорядокРасчета);
			МассивЭУ.Добавить(ЭлементыФормы.ПорядокРасчетаНачисленияИВзносы);
			МассивЭУ.Добавить(ЭлементыФормы.ГодРазмерыОО);
			МассивЭУ.Добавить(ЭлементыФормы.ТаблицаРезервов);
			МассивЭУ.Добавить(ЭлементыФормы.ПериодОО);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);	
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.БухучетЗарплаты Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаПоРБП);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.РасходыПоОтпускам); 
			МассивЭУ.Добавить(ЭлементыФормы.РасходыПоОтпускам1);
			МассивЭУ.Добавить(ЭлементыФормы.РасходыПоОтпускам2);
			МассивЭУ.Добавить(ЭлементыФормы.ПериодРБП);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.РасчетЕСН Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.ПравоПримененияЛьготПоЕСН);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.ПравоНаЛьготы);
			МассивЭУ.Добавить(ЭлементыФормы.ПериодЛьготаЕСН);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.СтраховыеВзносы Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.ТарифСтраховыхВзносов);
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов);
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.ВидТарифаСтраховыхВзносов);
			МассивЭУ.Добавить(ЭлементыФормы.ТарифСтраховыхВзносов);
			МассивЭУ.Добавить(ЭлементыФормы.ПредельнаяВеличинаБазыСтраховыхВзносов);
			МассивЭУ.Добавить(ЭлементыФормы.ПериодПредельнаяВеличинаБазыСтраховыхВзносов);
			МассивЭУ.Добавить(ЭлементыФормы.СтавкиФССНС);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);

			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.РасчетСтраховыхВзносов Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.Константы.ИспользуетсяТрудЧленовЛетныхЭкипажей);
			МассивОбъектовМетаданных.Добавить(Метаданные.Константы.ИспользуетсяТрудШахтеров);
			МассивОбъектовМетаданных.Добавить(Метаданные.Константы.ИспользуетсяТрудРаботающихВСтудотряде);
			МассивОбъектовМетаданных.Добавить(Метаданные.Константы.ИспользуетсяТрудЧленовЭкипажейМорскихСудов);
			МассивОбъектовМетаданных.Добавить(Метаданные.Константы.ИспользуетсяТрудФармацевтов);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.ИспользуетсяТрудЧленовЛетныхЭкипажей);
			МассивЭУ.Добавить(ЭлементыФормы.ИспользуетсяТрудШахтеров);
			МассивЭУ.Добавить(ЭлементыФормы.ИспользуетсяТрудРаботающихВСтудотряде);
			МассивЭУ.Добавить(ЭлементыФормы.ИспользуетсяТрудЧленовЭкипажейМорскихСудов);
			МассивЭУ.Добавить(ЭлементыФормы.ИспользуетсяТрудФармацевтов);
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.РазмерыПособий Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.РазмерОграниченияПособияПоНетрудоспособности);
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.ГосударственныеПособия);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.ДатаПередачиФССВыплатыПособий);
			МассивЭУ.Добавить(ЭлементыФормы.ПособиеПоВременнойНетрудоспособности);
			МассивЭУ.Добавить(ЭлементыФормы.ПособиеПоБеременности);
			МассивЭУ.Добавить(ЭлементыФормы.ДатаРазмеровОграниченияПособий);
			МассивЭУ.Добавить(ЭлементыФормы.СписокГосударственныеПособия);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.ПрочиеСтавки Тогда
			
			МассивОбъектовМетаданных = Новый Массив;
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.СтавкаРефинансированияЦБ);
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.МинимальнаяОплатаТрудаРФ);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.СтавкаРефинансированияЦБ);
			МассивЭУ.Добавить(ЭлементыФормы.СтавкаРефинансированияЦБДата);
			МассивЭУ.Добавить(ЭлементыФормы.МинимальнаяОплатаТрудаРФ);
			МассивЭУ.Добавить(ЭлементыФормы.МинимальнаяОплатаТрудаРФДата);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
			
		ИначеЕсли СтраницаФормы = ЭлементыФормы.ПанельНастроек.Страницы.УправленческийУчет Тогда
			
			// страница Управленческий учет
			МассивОбъектовМетаданных = Новый Массив;   
			МассивОбъектовМетаданных.Добавить(Метаданные.Константы.РежимНабораПерсонала);
			МассивОбъектовМетаданных.Добавить(Метаданные.Константы.МетодПланированияУчетаЗатратНаПерсонал);
			МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаПоПерсоналу);
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
			МассивЭУ = Новый Массив;
			МассивЭУ.Добавить(ЭлементыФормы.РежимНабораПерсонала);	
			МассивЭУ.Добавить(ЭлементыФормы.Переключатель2);
			МассивЭУ.Добавить(ЭлементыФормы.МетодПланированияУчетаЗатратНаПерсонал);
			МассивЭУ.Добавить(ЭлементыФормы.ПоддерживатьНесколькоСхемМотивации);
			МассивЭУ.Добавить(ЭлементыФормы.ПоказыватьТабельныеНомераВДокументахУпр);
			МассивЭУ.Добавить(ЭлементыФормы.УпрощенныйУчетВзаиморасчетовУпр);
			МассивЭУ.Добавить(ЭлементыФормы.РасчетЗарплатыПоОтветственным);
			МассивЭУ.Добавить(ЭлементыФормы.КоличествоДнейОтпускаВГод);
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
			
		Иначе // сюда попадут страницы, которые не будут показаны пользователю
			
			мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, Неопределено);
			
			МассивЭУ = Новый Массив;
			мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
			
		КонецЕсли;	
	
	КонецЦикла;
	
	СтраницаФормы = ЭлементыФормы.НадписьНастроитьВычетыПоНДФЛ;
			
	МассивОбъектовМетаданных = Новый Массив;
	МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.НДФЛВычетыПоДоходам);
	МассивОбъектовМетаданных.Добавить(Метаданные.РегистрыСведений.НДФЛРазмерВычетов);
	мСоответствиеОбъектыМетаданных.Вставить(СтраницаФормы, МассивОбъектовМетаданных);
			
	МассивЭУ = Новый Массив;
	мСоответствиеРеквизитыФормы.Вставить(СтраницаФормы, МассивЭУ);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ СТРАНИЦА ВыплатаЗарплаты

Процедура УчитыватьНевыходыДляПлановогоАвансаПриИзменении(Элемент)
	
	ЭлементыФормы.ДатаРасчетаПлановогоАванса.ТолькоПросмотр = Не УчитыватьНевыходыДляПлановогоАванса;
	Если УчитыватьНевыходыДляПлановогоАванса и ДатаРасчетаПлановогоАванса = 0 Тогда
		ДатаРасчетаПлановогоАванса = 15;
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСтруктурыУчетныхПолитик(Истина);
	ЗаполнитьСоответствия();
	ФормаОбработкиПередОткрытием(ЭтаФорма, Отказ);
	
	Если Отказ Тогда
		// все страницы формы недоступны, не открываем форму и сообщаем
		// пользователю о том, что у него нет прав
		Предупреждение("Нарушение прав доступа!");
	КонецЕсли;	
	
	СтраницаРасчетЕСНВидима = ЭлементыФормы.ПанельНастроек.Страницы.РасчетЕСН.Видимость;
	
	ЭлементыФормы.ПоказыватьУстаревшиеПараметрыУчета.Видимость = СтраницаРасчетЕСНВидима ИЛИ ЭлементыФормы.ПанельНастроек.Страницы.РазмерыПособий.Видимость; 
	
КонецПроцедуры

Процедура ВыполнитьПервоначальнойЗаполнениеФормы()

	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Применить.Доступность = Ложь;
	
	мСписокОбособленныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	мСписокОбособленныхПодразделений.Вставить(0, Организация);
	ЭлементыФормы.ТарифСтраховыхВзносов.ОтборСтрок.ВидТарифа.Использование = Истина;
	
	// получим из ИБ разрешенные данные и заполним форму обработки
	ПолучитьДанныеИЗаполнитьРеквизитыФормы();
	
	// запомним значения параметров до начала их редактирования
	ЗаполнитьЗначенияСвойств(мСтруктураПараметрыДоОткрытияФормы, ЭтаФорма);
	
	ЭлементыФормы.ДатаРасчетаПлановогоАванса.ТолькоПросмотр = НЕ ЭлементыФормы.УчитыватьНевыходыДляПлановогоАванса.Доступность или Не УчитыватьНевыходыДляПлановогоАванса;

	ЭлементыФормы.ДатаПередачиФССВыплатыПособий.СписокВыбора.Добавить('20110701', "01.07.2011");
	ЭлементыФормы.ДатаПередачиФССВыплатыПособий.СписокВыбора.Добавить('20120701', "01.07.2012");
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ВыполнитьПервоначальнойЗаполнениеФормы();
	
	ОбработатьПоказУстаревшихПараметровУчета(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	СписокГосударственныеПособия.Очистить();
	НДФЛВычетыПоДоходам.Очистить();
	НДФЛРазмерВычетов.Очистить();
	
	ВыполнитьПервоначальнойЗаполнениеФормы();
	
	ОбработатьПоказУстаревшихПараметровУчета(ЭтаФорма);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если Не СохранитьДанные() Тогда
				Отказ = Истина;	
			КонецЕсли;	
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Применить.Доступность = Модифицированность;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьПараметрыУчетаСтавкиРефинансированияЦБ" и Источник = ЭтаФорма Тогда
		
		ТаблицаЗаписейСтавкиРефинансированияЦБ = ТаблицаИсторииЗначений.Скопировать();
		
		Модифицированность = Истина;
		Если ТаблицаЗаписейСтавкиРефинансированияЦБ.Количество() > 0 Тогда
			// установим в форме последнее значение
			СтавкаРефинансированияЦБ     = ТаблицаЗаписейСтавкиРефинансированияЦБ[ТаблицаЗаписейСтавкиРефинансированияЦБ.Количество()-1].Размер;
			СтавкаРефинансированияЦБДата = ТаблицаЗаписейСтавкиРефинансированияЦБ[ТаблицаЗаписейСтавкиРефинансированияЦБ.Количество()-1].Период;
		Иначе
			СтавкаРефинансированияЦБ = 0 ;
			СтавкаРефинансированияЦБДата = ОбщегоНазначения.ПолучитьРабочуюДату();
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "ОбновитьПараметрыУчетаМинимальнаяОплатаТрудаРФ" и Источник = ЭтаФорма Тогда
		
		ТаблицаЗаписейМРОТ = ТаблицаИсторииЗначений.Скопировать();
		
		Модифицированность = Истина;
		Если ТаблицаЗаписейМРОТ.Количество() > 0 Тогда
			// установим в форме последнее значение
			МинимальнаяОплатаТрудаРФ     = ТаблицаЗаписейМРОТ[ТаблицаЗаписейМРОТ.Количество()-1].Размер;
			МинимальнаяОплатаТрудаРФДата = ТаблицаЗаписейМРОТ[ТаблицаЗаписейМРОТ.Количество()-1].Период;
		Иначе
			МинимальнаяОплатаТрудаРФ = 0 ;
			МинимальнаяОплатаТрудаРФДата = ОбщегоНазначения.ПолучитьРабочуюДату();
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "ОбновитьПараметрыУчетаРазмерОграниченияПособияПоНетрудоспособности" и Источник = ЭтаФорма Тогда
		
		ТаблицаЗаписейОграниченияПособия = ТаблицаИсторииЗначений.Скопировать();
		
		Если ТаблицаЗаписейОграниченияПособия.Количество() > 0 Тогда
			// установим в форме последнее значение
			ПособиеПоВременнойНетрудоспособности = ТаблицаЗаписейОграниченияПособия[ТаблицаЗаписейОграниченияПособия.Количество()-1].Размер;
			ПособиеПоБеременности = ТаблицаЗаписейОграниченияПособия[ТаблицаЗаписейОграниченияПособия.Количество()-1].РазмерПоБеременности;
			ДатаРазмеровОграниченияПособий = ТаблицаЗаписейОграниченияПособия[ТаблицаЗаписейОграниченияПособия.Количество()-1].Период;
		Иначе
			ПособиеПоВременнойНетрудоспособности = 0;
			ПособиеПоБеременности = 0;
			ДатаРазмеровОграниченияПособий = ОбщегоНазначения.ПолучитьРабочуюДату();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьПараметрыУчетаГосударственныеПособия" и Источник = ЭтаФорма Тогда
		
		Модифицированность = Истина;
		// получим строку из таблицы СписокГосударственныеПособия по данному пособию
		ТекущаяСтрока = СписокГосударственныеПособия.Найти(Параметр, "ВидПособия");
		
		//перепишем в таблицу новые значения истории
		СтруктураПоиска = Новый Структура("ВидПособия"); 
		СтруктураПоиска.Вставить("ВидПособия", Параметр);
		МассивСтрок = ТаблицаЗаписейГосударственныеПособия.НайтиСтроки(СтруктураПоиска);
		// удалим из таблицы строки по этому пособию
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			ТаблицаЗаписейГосударственныеПособия.Удалить(СтрокаТаблицы);
		КонецЦикла;
		// перенесем в таблицу строки из истории
		СтрокаТаблицы = Неопределено;
		Для каждого СтрокаТаблицы Из ТаблицаИсторииЗначений Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаЗаписейГосударственныеПособия.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		Если СтрокаТаблицы = Неопределено Тогда
			ТекущаяСтрока.Размер = 0;
			ТекущаяСтрока.Период = НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату());
		Иначе
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТаблицы);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьПараметрыУчетаУчетнаяПолитикаПоНДФЛ" и Источник = ЭтаФорма Тогда
		
		ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ = ТаблицаИсторииЗначений.Скопировать();
		
		Модифицированность = Истина;
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", Дата(ПериодНДФЛ,1,1));
		МассивСтрок = ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ОсобенностиИсчисленияНДФЛ  = МассивСтрок[0].ОсобенностиИсчисленияНДФЛ;
		ИначеЕсли ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.Количество() > 0 Тогда
			// установим в форме последнее значение
			ОсобенностиИсчисленияНДФЛ  = ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ[ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.Количество()-1].ОсобенностиИсчисленияНДФЛ;
			ПериодНДФЛ = Год(ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ[ТаблицаЗаписейУчетнаяПолитикаПоНДФЛ.Количество()-1].Период);
		КонецЕсли;	
		
	ИначеЕсли ИмяСобытия = "ОбновитьПараметрыУчетаУчетнаяПолитикаПоРБП" и Источник = ЭтаФорма Тогда
		
		ТаблицаЗаписейУчетнаяПолитикаПоРБП = ТаблицаИсторииЗначений.Скопировать();
		
		Модифицированность = Истина;
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", Дата(ПериодРБП,1,1));
		МассивСтрок = ТаблицаЗаписейУчетнаяПолитикаПоРБП.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			РасходыПоОтпускам  = МассивСтрок[0].РасходыПоОтпускам;
		ИначеЕсли ТаблицаЗаписейУчетнаяПолитикаПоРБП.Количество() > 0 Тогда
			// установим в форме последнее значение
			РасходыПоОтпускам  = ТаблицаЗаписейУчетнаяПолитикаПоРБП[ТаблицаЗаписейУчетнаяПолитикаПоРБП.Количество()-1].РасходыПоОтпускам;
			ПериодРБП = Год(ТаблицаЗаписейУчетнаяПолитикаПоРБП[ТаблицаЗаписейУчетнаяПолитикаПоРБП.Количество()-1].Период);
		КонецЕсли;	
		
	ИначеЕсли ИмяСобытия = "ОбновитьПараметрыУчетаУчетнаяПолитикаПоОО" и Источник = ЭтаФорма Тогда
		
		ТаблицаЗаписейУчетнаяПолитикаПоОО = ТаблицаИсторииЗначений.Скопировать();
		
		Модифицированность = Истина;
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", Дата(ПериодОО,1,1));
		МассивСтрок = ТаблицаЗаписейУчетнаяПолитикаПоОО.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ФормироватьБУ  = МассивСтрок[0].ФормироватьБУ;
			ФормироватьНУ  = МассивСтрок[0].ФормироватьНУ;
			ОценочноеОбязательствоДляОтпуска  = МассивСтрок[0].ОценочноеОбязательствоДляОтпуска;
			ПорядокРасчета  = МассивСтрок[0].ПорядокРасчета;
		ИначеЕсли ТаблицаЗаписейУчетнаяПолитикаПоОО.Количество() > 0 Тогда
			// установим в форме последнее значение
			ФормироватьБУ  = ТаблицаЗаписейУчетнаяПолитикаПоОО[ТаблицаЗаписейУчетнаяПолитикаПоОО.Количество()-1].ФормироватьБУ;
			ФормироватьНУ  = ТаблицаЗаписейУчетнаяПолитикаПоОО[ТаблицаЗаписейУчетнаяПолитикаПоОО.Количество()-1].ФормироватьНУ;
			ОценочноеОбязательствоДляОтпуска  = ТаблицаЗаписейУчетнаяПолитикаПоОО[ТаблицаЗаписейУчетнаяПолитикаПоОО.Количество()-1].ОценочноеОбязательствоДляОтпуска;
			ПорядокРасчета  = ТаблицаЗаписейУчетнаяПолитикаПоОО[ТаблицаЗаписейУчетнаяПолитикаПоОО.Количество()-1].ПорядокРасчета;;
			ПериодОО = Год(ТаблицаЗаписейУчетнаяПолитикаПоРБП[ТаблицаЗаписейУчетнаяПолитикаПоОО.Количество()-1].Период);
		КонецЕсли;
		
		мБылоОценочноеОбязательствоДляОтпуска = ОценочноеОбязательствоДляОтпуска;
		ОбработатьИзменениеФлагаФормироватьБУ();
		
	ИначеЕсли ИмяСобытия = "ОбновитьПараметрыУчетаПравоПримененияЛьготПоЕСН" и Источник = ЭтаФорма Тогда
		
		ТаблицаЗаписейПравоПримененияЛьготПоЕСН = ТаблицаИсторииЗначений.Скопировать();
		
		Модифицированность = Истина;
		СтруктураПоиска = Новый Структура("Период");
		СтруктураПоиска.Вставить("Период", ДатаНачалаЛьготаЕСН);
		МассивСтрок = ТаблицаЗаписейПравоПримененияЛьготПоЕСН.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ПравоНаЛьготы  = МассивСтрок[0].ПравоНаЛьготы;
		ИначеЕсли ТаблицаЗаписейПравоПримененияЛьготПоЕСН.Количество() > 0 Тогда
			// установим в форме последнее значение
			ПравоНаЛьготы  = ТаблицаЗаписейПравоПримененияЛьготПоЕСН[ТаблицаЗаписейПравоПримененияЛьготПоЕСН.Количество()-1].ПравоНаЛьготы;
			ПериодЛьготаЕСН = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ДатаНачалаЛьготаЕСН);
		КонецЕсли;	
		
	ИначеЕсли ИмяСобытия = "ОбновитьПараметрыУчетаНДФЛВычетыПоДоходам" и Источник = ЭтаФорма Тогда
		
		Модифицированность = Истина;
		// получим строку из таблицы НДФЛВычетыПоДоходам 
		ТекущаяСтрока = НДФЛВычетыПоДоходам.Найти(Параметр, "КодДохода");
		
		//перепишем в таблицу новые значения истории
		СтруктураПоиска = Новый Структура("КодДохода"); 
		СтруктураПоиска.Вставить("КодДохода", Параметр);
		МассивСтрок = ТаблицаЗаписейНДФЛВычетыПоДоходам.НайтиСтроки(СтруктураПоиска);
		// удалим из таблицы строки по этому коду
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			ТаблицаЗаписейНДФЛВычетыПоДоходам.Удалить(СтрокаТаблицы);
		КонецЦикла;
		// перенесем в таблицу строки из истории
		СтрокаТаблицы = Неопределено;
		Для каждого СтрокаТаблицы Из ТаблицаИсторииЗначений Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаЗаписейНДФЛВычетыПоДоходам.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		Если СтрокаТаблицы = Неопределено Тогда
			ТекущаяСтрока.ГодовойВычет = 0;
			ТекущаяСтрока.НормативЗатрат = 0;
			ТекущаяСтрока.Период = НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату());
		Иначе
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТаблицы);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьПараметрыУчетаНДФЛРазмерВычетов" и Источник = ЭтаФорма Тогда
		
		Модифицированность = Истина;
		// получим строку из таблицы НДФЛРазмерВычетов 
		ТекущаяСтрока = НДФЛРазмерВычетов.Найти(Параметр, "КодВычета");
		
		//перепишем в таблицу новые значения истории
		СтруктураПоиска = Новый Структура("КодВычета"); 
		СтруктураПоиска.Вставить("КодВычета", Параметр);
		МассивСтрок = ТаблицаЗаписейНДФЛРазмерВычетов.НайтиСтроки(СтруктураПоиска);
		// удалим из таблицы строки по этому коду
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			ТаблицаЗаписейНДФЛРазмерВычетов.Удалить(СтрокаТаблицы);
		КонецЦикла;
		// перенесем в таблицу строки из истории
		СтрокаТаблицы = Неопределено;
		Для каждого СтрокаТаблицы Из ТаблицаИсторииЗначений Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаЗаписейНДФЛРазмерВычетов.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		Если СтрокаТаблицы = Неопределено Тогда
			ТекущаяСтрока.ОграничениеПоДоходам = 0;
			ТекущаяСтрока.Размер = 0;
			ТекущаяСтрока.Период = НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату());
		Иначе
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТаблицы);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьРазмерыИндексируемыхГосударственныхПособий"  и Источник = ЭтаФорма Тогда
		
		ПолучитьРазмерыИндексируемыхГосударственныхПособий();
		
	ИначеЕсли ИмяСобытия = "ОбновитьПараметрыУчетаПредельнаяВеличинаБазыСтраховыхВзносов"  и Источник = ЭтаФорма Тогда
		
		ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов = ТаблицаИсторииЗначений.Скопировать();
		
		Модифицированность = Истина;
		Если ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов.Количество() > 0 Тогда
			// установим в форме последнее значение
			ПредельнаяВеличинаБазыСтраховыхВзносов = ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов[ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов.Количество()-1].Размер;
			ПериодПредельнаяВеличинаБазыСтраховыхВзносов = Год(ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов[ТаблицаЗаписейПредельнаяВеличинаБазыСтраховыхВзносов.Количество()-1].Период);
		Иначе
			ПредельнаяВеличинаБазыСтраховыхВзносов = 0 ;
			ПериодПредельнаяВеличинаБазыСтраховыхВзносов = 2010;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТарифПочтовогоСбораНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ТарифыПочтовогоСбора.ПолучитьФормуВыбора( ,Элемент, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура МетодПланированияУчетаЗатратНаПерсоналНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ЗначениеПеречисленияНачалоВыбора(ЭтаФорма, Перечисления.МетодыПланированияУчетаЗатратНаПерсонал, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура НадписьНастроитьВычетыПоНДФЛНажатие(Элемент)
	
	ФормаНастройкаВычетовПоНДФЛ = ПолучитьФорму("НастройкаВычетовПоНДФЛ", ЭтаФорма);
	
	МассивОбъектовМетаданных = мСоответствиеОбъектыМетаданных.Получить(ЭлементыФормы.НадписьНастроитьВычетыПоНДФЛ);
	Для каждого ОбъектМетаданных Из МассивОбъектовМетаданных Цикл
		
		РазрешеноРедактирование = ПравоДоступа("Редактирование", ОбъектМетаданных);
		
		ФормаНастройкаВычетовПоНДФЛ.ЭлементыФормы[ОбъектМетаданных.Имя].ТолькоПросмотр = НЕ РазрешеноРедактирование;
		
	КонецЦикла;
			
	ФормаНастройкаВычетовПоНДФЛ.ОткрытьМодально();
			
КонецПроцедуры

Процедура ПоказыватьУстаревшиеПараметрыУчетаПриИзменении(Элемент)
	
	ОбработатьПоказУстаревшихПараметровУчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мОбработкаПодбораПоСтроке                 = Ложь;
мТекстПодбораПоСтроке                     = "";
мПоследнееЗначениеЭлементаПодбораПоСтроке = Справочники.Организации.ПустаяСсылка();

мСтрокаКонстант = "";
мСоответствиеОбъектыМетаданных = Новый Соответствие();
мСоответствиеРеквизитыФормы    = Новый Соответствие();
мСтруктураПараметрыДоОткрытияФормы = Новый Структура();
мСтавкиФССНСДоРедактирования = Новый Структура("Организация, Период, Ставка");

//мУчетнаяПолитикаПоЕСН  = Новый Структура();
мУчетнаяПолитикаПоНДФЛ = Новый Структура();
мПравоПримененияЛьготПоЕСН = Новый Структура();
мУчетнаяПолитикаПоРасчетуЗарплаты = Новый Структура();
мУчетнаяПолитикаПоРасчетуЗарплатыОП = Новый Структура();
мУчетнаяПолитикаПоПерсоналуОрганизаций = Новый Структура();
мУчетнаяПолитикаПоРБП = Новый Структура();
мУчетнаяПолитикаПоОО = Новый Структура();
мСоответствиеРасчетанаяБазаОО = Новый Соответствие();

ТаблицаЗаписейРазмерыОтчисленийВРезервы = Новый ТаблицаЗначений();