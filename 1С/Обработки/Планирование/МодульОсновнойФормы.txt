////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
		
	Если УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Тогда
			
		мТекущаяНастройка = СтруктураНастройки;
		ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
			
	Иначе
		
		ПланыПродаж = Истина;
		ПланыПроизводства = Истина;
		ПланыЗакупок = Истина;
		РасширенноеПредставлениеДокументов = Ложь;
		ОтображатьГрафикРаботы = Ложь;
		
		УстановитьПериод();
		
	КонецЕсли;
	
	ИнициализацияДереваПланов(ДеревоПланов);
	ИнициализацияЭлементовУправленияФормы();
	УправлениеОтображениемЭлементовУправленияФормы();
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.СоставПлана.Колонки);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.Потребности.Колонки);
	
КонецПроцедуры // ПриОткрытии()

Процедура ПриЗакрытии()
	
	Перем СохраненнаяНастройка;
	
	Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.НаименованиеНастройки <> Неопределено И мТекущаяНастройка.Свойство("СохранятьАвтоматически") И мТекущаяНастройка.СохранятьАвтоматически Тогда
	
		СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
		СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
		СтруктураНастройки.Вставить("НаименованиеНастройки", мТекущаяНастройка.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", мТекущаяНастройка.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", мТекущаяНастройка.СохранятьАвтоматически);
		
		УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки);

	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельФормы

// Процедура - обработчик нажатия кнопки "ВосстановитьЗначения"
//
Процедура КоманднаяПанельФормыДействиеВосстановитьЗначения(Кнопка)
	
	ВосстановитьНастройки();
	ИнициализацияДереваПланов(ДеревоПланов);
	
КонецПроцедуры // КоманднаяПанельФормыДействиеВосстановитьЗначения()

// Процедура - обработчик нажатия кнопки "СохранитьЗначения"
//
Процедура КоманднаяПанельФормыДействиеСохранитьЗначения(Кнопка)
	
	СохранитьНастройки();
	
КонецПроцедуры // КоманднаяПанельФормыДействиеСохранитьЗначения()

////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

Процедура ПолеВводаСценарийПриИзменении(Элемент)
	
	ИнициализацияДереваПланов(ДеревоПланов);
	
КонецПроцедуры // ПолеВводаСценарийПриИзменении()

Процедура ПолеВводаДатаНачПриИзменении(Элемент)
	
	ИнициализацияДереваПланов(ДеревоПланов);
	ВывестиПроизводственнуюПрограмму(Неопределено, ПроизводственнаяПрограмма);
	ВывестиДиаграммуГанта(ЭлементыФормы.ДиаграммаГанта);
	
КонецПроцедуры // ПолеВводаДатаНачПриИзменении()

Процедура ПолеВводаДатаКонПриИзменении(Элемент)
	
	ИнициализацияДереваПланов(ДеревоПланов);
	ВывестиПроизводственнуюПрограмму(Неопределено, ПроизводственнаяПрограмма);
	ВывестиДиаграммуГанта(ЭлементыФормы.ДиаграммаГанта);

КонецПроцедуры // ПолеВводаДатаКонПриИзменении()

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	ИнициализацияНастройкиПериода(ДатаНач, ДатаКон);
	
	Если мНастройкаПериода.Редактировать() Тогда
		
		ДатаНач = мНастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = мНастройкаПериода.ПолучитьДатуОкончания();
		ИнициализацияДереваПланов(ДеревоПланов);

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ПолеВводаПериодичностьПриИзменении(Элемент)
	
	ВывестиСоставПлана(ЭлементыФормы.ДеревоПланов.ТекущиеДанные, СоставПлана, ЭлементыФормы.СоставПлана, ПолныйСоставПлана, АвтоматическийРасчетИсточниковОбеспечения);
	
КонецПроцедуры // ПолеВводаПериодичностьПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельСоставПлана

Процедура КоманднаяПанельПланыНастройка(Кнопка)
	
	Если Кнопка.Имя = "ПланыПродаж" Тогда
		
		ПланыПродаж = НЕ ПланыПродаж;
		Кнопка.Пометка = ПланыПродаж;
		
		УправлениеОтображениемЭлементовУправленияФормы();
		
		ИнициализацияДереваПланов(ДеревоПланов);
		
	ИначеЕсли Кнопка.Имя = "ПланыПроизводства" Тогда
		
		ПланыПроизводства = НЕ ПланыПроизводства;
		Кнопка.Пометка = ПланыПроизводства;
		
		УправлениеОтображениемЭлементовУправленияФормы();
		
		ИнициализацияДереваПланов(ДеревоПланов);
		
	ИначеЕсли Кнопка.Имя = "ПланыЗакупок" Тогда
		
		ПланыЗакупок = НЕ ПланыЗакупок;
		Кнопка.Пометка = ПланыЗакупок;
		
		УправлениеОтображениемЭлементовУправленияФормы();
		
		ИнициализацияДереваПланов(ДеревоПланов);
		
	ИначеЕсли Кнопка.Имя = "РасширенноеПредставлениеДокументов" Тогда
		
		РасширенноеПредставлениеДокументов = НЕ РасширенноеПредставлениеДокументов;
		Кнопка.Пометка = РасширенноеПредставлениеДокументов;
		
		ЭлементыФормы.ДеревоПланов.ОбновитьСтроки();
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПланыНастройка()

Процедура КоманднаяПанельПланыДействиеДобавить(Кнопка)
	
	ВвестиНовыйПлан(Кнопка.Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельПланыДействиеОбновить(Кнопка)
	
	ИнициализацияДереваПланов(ДеревоПланов);
	
КонецПроцедуры // КоманднаяПанельПланыДействиеОбновить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ДеревоПланов

Процедура ДеревоПлановПриАктивизацииСтроки(Элемент)
	
	ВывестиСоставПлана(Элемент.ТекущиеДанные, СоставПлана, ЭлементыФормы.СоставПлана, ПолныйСоставПлана, АвтоматическийРасчетИсточниковОбеспечения);
	УправлениеОтображениемЭлементовУправленияФормы();
	
КонецПроцедуры // ДеревоПлановПриАктивизацииСтроки()

Процедура ДеревоПлановПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ Элемент.ТекущиеДанные.План = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущиеДанные.План) = Тип("ПеречислениеСсылка.ВидыПланирования") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ФормаПлана = Элемент.ТекущиеДанные.План.ПолучитьФорму(, Элемент);
	ФормаПлана.Открыть();
	
КонецПроцедуры // ДеревоПлановПередНачаломИзменения()

Процедура ДеревоПлановПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ДанныеСтроки.План = Перечисления.ВидыПланирования.Продажи ИЛИ ТипЗнч(ДанныеСтроки.План) = Тип("ДокументСсылка.ПланПродаж") Тогда
			
			ОформлениеСтроки.Ячейки.План.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.План.ИндексКартинки = 0;
			
		ИначеЕсли ДанныеСтроки.План = Перечисления.ВидыПланирования.Производство ИЛИ ТипЗнч(ДанныеСтроки.План) = Тип("ДокументСсылка.ПланПроизводства")Тогда
			
			ОформлениеСтроки.Ячейки.План.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.План.ИндексКартинки = 1;
			
		ИначеЕсли ДанныеСтроки.План = Перечисления.ВидыПланирования.Закупки ИЛИ ТипЗнч(ДанныеСтроки.План) = Тип("ДокументСсылка.ПланЗакупок") Тогда
			
			ОформлениеСтроки.Ячейки.План.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.План.ИндексКартинки = 2;
			
		ИначеЕсли ДанныеСтроки.План = Неопределено Тогда
			
			ОформлениеСтроки.Ячейки.План.ОтображатьКартинку = Ложь;
			ОформлениеСтроки.Ячейки.План.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			
		Иначе
			
			ОформлениеСтроки.Ячейки.План.ОтображатьКартинку = Ложь;
			
		КонецЕсли;
			
		Если ДанныеСтроки.Уровень() = 0 ИЛИ РасширенноеПредставлениеДокументов = Ложь Тогда
			
			ОформлениеСтроки.Ячейки.План.УстановитьТекст(ДанныеСтроки.Представление);
			
		Иначе
			
			ОформлениеСтроки.Ячейки.План.УстановитьТекст(ДанныеСтроки.Представление + " " + ДанныеСтроки.План.Номер + " " + Формат(ДанныеСтроки.План.Дата, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДеревоПлановПриПолученииДанных()

Процедура ДеревоПлановПередРазворачиванием(Элемент, Строка, Отказ)
	
	ЗаполнитьПланы(Строка.Строки);
	
КонецПроцедуры // ДеревоПлановПередРазворачиванием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельСоставПлана

Процедура КоманднаяПанельСоставПланаРедактироватьСоставПлана(Кнопка)
	
	РедактироватьСоставПлана(ЭлементыФормы.ДеревоПланов.ТекущиеДанные, ЭлементыФормы.СоставПлана);
	
КонецПроцедуры // КоманднаяПанельСоставПланаРедактироватьСоставПлана()

Процедура КоманднаяПанельСоставПланаДействия(Кнопка)
	
	Если Кнопка.Имя = "РассчитатьИсточникиОбеспечения" Тогда
		
		ВывестиСоставПлана(ЭлементыФормы.ДеревоПланов.ТекущиеДанные, СоставПлана, ЭлементыФормы.СоставПлана, ПолныйСоставПлана, Истина);
		
	ИначеЕсли Кнопка.Имя = "РассчитатьПотребности" Тогда
		
		ВывестиПотребности(Потребности, ЭлементыФормы.СоставПлана.ТекущиеДанные, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельСоставПланаДействия()

Процедура КоманднаяПанельСоставПланаНастройка(Кнопка)
	
	Если Кнопка.Имя = "ПолныйСоставПлана" Тогда
		
		ПолныйСоставПлана = НЕ ПолныйСоставПлана;
		Кнопка.Пометка = ПолныйСоставПлана;
		
		УправлениеОтображениемЭлементовУправленияФормы();
		
		ВывестиСоставПлана(ЭлементыФормы.ДеревоПланов.ТекущиеДанные, СоставПлана, ЭлементыФормы.СоставПлана, ПолныйСоставПлана, АвтоматическийРасчетИсточниковОбеспечения);
		
	ИначеЕсли Кнопка.Имя = "АвтоматическийРасчетИсточниковОбеспечения" Тогда
		
		АвтоматическийРасчетИсточниковОбеспечения = НЕ АвтоматическийРасчетИсточниковОбеспечения;
		Кнопка.Пометка = АвтоматическийРасчетИсточниковОбеспечения;
		
		УправлениеОтображениемЭлементовУправленияФормы();
		
		ВывестиСоставПлана(ЭлементыФормы.ДеревоПланов.ТекущиеДанные, СоставПлана, ЭлементыФормы.СоставПлана, ПолныйСоставПлана, АвтоматическийРасчетИсточниковОбеспечения);
		
	ИначеЕсли Кнопка.Имя = "АвтоматическийРасчетПотребности" Тогда
		
		АвтоматическийРасчетПотребности = НЕ АвтоматическийРасчетПотребности;
		Кнопка.Пометка = АвтоматическийРасчетПотребности;
		
		УправлениеОтображениемЭлементовУправленияФормы();
		
		ВывестиПотребности(Потребности, ЭлементыФормы.СоставПлана.ТекущиеДанные, АвтоматическийРасчетПотребности);
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельСоставПланаНастройка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельПроизводственнаяПрограмма

Процедура КоманднаяПанельПроизводственнаяПрограммаПланироватьВсе(Кнопка)
	
	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	Попытка
		
		ВыполнитьПланирование(ПроизводственнаяПрограмма,,, ФормаПрогрессора);
		
	Исключение
		
		Предупреждение(ОписаниеОшибки());
		
	КонецПопытки;
	
	ВывестиПроизводственнуюПрограмму(Неопределено, ПроизводственнаяПрограмма);
	ВывестиДиаграммуГанта(ЭлементыФормы.ДиаграммаГанта);
	
КонецПроцедуры // КоманднаяПанельПроизводственнаяПрограммаПланироватьВсе()

Процедура КоманднаяПанельПроизводственнаяПрограммаПланироватьНераспланированные(Кнопка)
	
	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	Попытка
		
		ВыполнитьПланирование(ПроизводственнаяПрограмма,, Истина, ФормаПрогрессора);
		
	Исключение
		
		Предупреждение(ОписаниеОшибки());
		
	КонецПопытки;
	
	ВывестиПроизводственнуюПрограмму(Неопределено, ПроизводственнаяПрограмма);
	ВывестиДиаграммуГанта(ЭлементыФормы.ДиаграммаГанта);
	
КонецПроцедуры // КоманднаяПанельПроизводственнаяПрограммаПланироватьНераспланированные()

Процедура КоманднаяПанельПроизводственнаяПрограммаПланироватьВыбранные(Кнопка)
	
	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	Попытка
		
		ВыполнитьПланирование(ПроизводственнаяПрограмма, ЭлементыФормы.ПроизводственнаяПрограмма.ВыделенныеСтроки,, ФормаПрогрессора);
	
	Исключение
		
		Предупреждение(ОписаниеОшибки());
		
	КонецПопытки;
	
	ВывестиПроизводственнуюПрограмму(Неопределено, ПроизводственнаяПрограмма);
	ВывестиДиаграммуГанта(ЭлементыФормы.ДиаграммаГанта);
	
КонецПроцедуры // КоманднаяПанельПроизводственнаяПрограммаПланироватьВыбранные()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ КоманднаяПанельДиаграммаГанта

Процедура КоманднаяПанельДиаграммаГанта(Кнопка)
	
	Если Кнопка.Имя = "ДействиеСвернуть" Тогда
		
		Для каждого ТочкаДиаграммыГанта из ЭлементыФормы.ДиаграммаГанта.Точки Цикл
			
			ЭлементыФормы.ДиаграммаГанта.СвернутьТочку(ТочкаДиаграммыГанта, Истина);
			
		КонецЦикла;
		
	ИначеЕсли Кнопка.Имя = "ДействиеРазвернуть" Тогда
		
		Для каждого ТочкаДиаграммыГанта из ЭлементыФормы.ДиаграммаГанта.Точки Цикл
			
			ЭлементыФормы.ДиаграммаГанта.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
			
		КонецЦикла;
	
	ИначеЕсли Кнопка.Имя = "ДействиеОбновить" Тогда
		
		ВывестиДиаграммуГанта(ЭлементыФормы.ДиаграммаГанта);
		
	ИначеЕсли Кнопка.Имя = "ОтображатьГрафикРаботы" Тогда
		
		ОтображатьГрафикРаботы = НЕ ОтображатьГрафикРаботы;
		Кнопка.Пометка = ОтображатьГрафикРаботы;
		
		ВывестиДиаграммуГанта(ЭлементыФормы.ДиаграммаГанта);
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельДиаграммаГанта()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СоставПлана

Процедура СоставПланаПриАктивизацииСтроки(Элемент)
	
	ВывестиПотребности(Потребности, Элемент.ТекущиеДанные, АвтоматическийРасчетПотребности);
	
КонецПроцедуры // СоставПланаПриАктивизацииСтроки()

Процедура СоставПланаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		УстановитьОформлениеСтрокиСоставПлана(ОформлениеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры // СоставПланаПриПолученииДанных()

Процедура СоставПланаОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	
	ДеревоПлановТекущиеДанные = ЭлементыФормы.ДеревоПланов.ТекущиеДанные;
	
	Если ДеревоПлановТекущиеДанные = Неопределено ИЛИ ДеревоПлановТекущиеДанные.План = Неопределено ИЛИ ДеревоПлановТекущиеДанные.План <> Объект Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВывестиСоставПлана(ДеревоПлановТекущиеДанные, СоставПлана, ЭлементыФормы.СоставПлана, ПолныйСоставПлана, АвтоматическийРасчетИсточниковОбеспечения);
	
КонецПроцедуры // СоставПланаОбработкаЗаписиНовогоОбъекта()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПроизводственнаяПрограмма

Процедура ПроизводственнаяПрограммаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		УстановитьОформлениеСтрокиПроизводственнаяПрограмма(ОформлениеСтроки);
		
	КонецЦикла;

КонецПроцедуры // ПроизводственнаяПрограммаПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ИнициализацияЭлементовУправленияФормы()
	
	// КоманднаяПанельПланы
	ЭлементыФормы.КоманднаяПанельПланы.Кнопки.Настройка.Кнопки.ПланыПродаж.Пометка = ПланыПродаж;
	ЭлементыФормы.КоманднаяПанельПланы.Кнопки.Настройка.Кнопки.ПланыПроизводства.Пометка = ПланыПроизводства;
	ЭлементыФормы.КоманднаяПанельПланы.Кнопки.Настройка.Кнопки.ПланыЗакупок.Пометка = ПланыЗакупок;
	ЭлементыФормы.КоманднаяПанельПланы.Кнопки.Настройка.Кнопки.РасширенноеПредставлениеДокументов.Пометка = РасширенноеПредставлениеДокументов;
	
	// КоманднаяПанельСоставПлана
	ЭлементыФормы.КоманднаяПанельСоставПлана.Кнопки.Настройка.Кнопки.ПолныйСоставПлана.Пометка = ПолныйСоставПлана;
	ЭлементыФормы.КоманднаяПанельСоставПлана.Кнопки.Настройка.Кнопки.АвтоматическийРасчетИсточниковОбеспечения.Пометка = АвтоматическийРасчетИсточниковОбеспечения;
	ЭлементыФормы.КоманднаяПанельСоставПлана.Кнопки.Настройка.Кнопки.АвтоматическийРасчетПотребности.Пометка = АвтоматическийРасчетПотребности;
	
	// КоманднаяПанельДиаграммаГанта
	ЭлементыФормы.КоманднаяПанельДиаграммаГанта.Кнопки.Настройка.Кнопки.ОтображатьГрафикРаботы.Пометка = ОтображатьГрафикРаботы;
	
КонецПроцедуры // ИнициализацияЭлементовУправленияФормы()

Процедура УправлениеОтображениемЭлементовУправленияФормы()
	
	// Состав плана
	Если ЭлементыФормы.ДеревоПланов.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.ДеревоПланов.ТекущиеДанные.План = Неопределено ИЛИ ЭлементыФормы.ДеревоПланов.ТекущиеДанные.Уровень() = 0 Тогда
		
		СоставПланаЗаголовок = НСтр("ru='Состав плана'");
		
	ИначеЕсли ПолныйСоставПлана Тогда
		
		СоставПланаЗаголовок = НСтр("ru='Состав плана (полный)'");
		
	ИначеЕсли ЭлементыФормы.ДеревоПланов.ТекущиеДанные.Уровень() = 1 Тогда
		
		СоставПланаЗаголовок = НСтр("ru='Состав плана (только независимые)'");
		
	Иначе
		
		СоставПланаЗаголовок = НСтр("ru='Состав плана (только зависимые)'");
		
	КонецЕсли;
	
	ЭлементыФормы.РамкаГруппыСоставПлана.Заголовок = СоставПланаЗаголовок;
	
КонецПроцедуры // УправлениеОтображениемЭлементовУправленияФормы()

Процедура ВвестиНовыйПлан(ВидПлана)
	
	НовыйОбъект = Документы[ВидПлана].СоздатьДокумент();
	НовыйОбъект.Сценарий = Сценарий;
	НовыйОбъект.ДатаПланирования = ДатаНач;
	ФормаПлана = НовыйОбъект.ПолучитьФорму(, Этаформа);
	ФормаПлана.Открыть();
	
КонецПроцедуры // ВвестиНовыйПлан()

Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.Страницы[ТекущаяСтраница].Имя = "ПроизводственнаяПрограмма" Тогда
		
		ВывестиПроизводственнуюПрограмму(Неопределено, ПроизводственнаяПрограмма);
		ВывестиДиаграммуГанта(ЭлементыФормы.ДиаграммаГанта);
		
	КонецЕсли;
	
КонецПроцедуры // ПанельПриСменеСтраницы()