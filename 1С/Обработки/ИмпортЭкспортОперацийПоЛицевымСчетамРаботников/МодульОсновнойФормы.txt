Перем ДатаНач_ОткрытиеСчетов;
Перем ДатаКон_ОткрытиеСчетов;

Перем ДатаНач_ЗачислениеЗарплаты Экспорт;
Перем ДатаКон_ЗачислениеЗарплаты Экспорт;

Перем ДатаНач_Импорт;
Перем ДатаКон_Импорт;

Перем ЭкспортУжеОбновляли;
Перем ИмпортУжеОбновляли;

Перем ФорматФайла1;
Перем ФорматФайла3;
Перем ФорматФайла32;

// СОБЫТИЯ ФОРМЫ
Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.ЗявкиНаОткрытиеСчетов.Колонки.Организация.ТекстШапки = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.ПлатежныеПорученияЗачислениеЗарплаты.Колонки.Организация.ТекстШапки = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

Процедура ПриОткрытии()
	
	// Восстанавливаем параментры сеанса работы
	
	Значение = ВосстановитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.Кодировка");
	Если ЗначениеЗаполнено(Значение) Тогда
		Кодировка = Значение;
	Иначе
		Кодировка = 2;
	КонецЕсли;
	
	Значение = ВосстановитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.КаталогИмпорта");
	Если Значение <> Неопределено Тогда
		КаталогИмпорта = Значение;
	КонецЕсли;
	
	Значение = ВосстановитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.КаталогЭкспорта");
	Если Значение <> Неопределено Тогда
		КаталогЭкспорта = Значение;
	КонецЕсли;
	
	Значение = ВосстановитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.НомерСНачалаГода");
	Если Значение <> Неопределено Тогда
		НомерСНачалаГода = Значение;
	КонецЕсли;
	
	Значение = ВосстановитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.ОтделениеБанка");
	Если Значение <> Неопределено Тогда
		ОтделениеБанка = Значение;
	КонецЕсли;
	
	Значение = ВосстановитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.ФилиалОтделенияБанка");
	Если Значение <> Неопределено Тогда
		ФилиалОтделенияБанка = Значение;
	КонецЕсли;
	
	ДатаНач_ОткрытиеСчетов = НачалоМесяца(ТекущаяДата());
	ДатаКон_ОткрытиеСчетов = КонецМесяца(ТекущаяДата());
	
	Если ДатаНач_ЗачислениеЗарплаты = Неопределено Тогда
		ДатаНач_ЗачислениеЗарплаты = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если ДатаКон_ЗачислениеЗарплаты = Неопределено Тогда
		ДатаКон_ЗачислениеЗарплаты = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	ДатаНач_Импорт = НачалоМесяца(ТекущаяДата());
	ДатаКон_Импорт = КонецМесяца(ТекущаяДата());
	
	ОбновитьЗаявкиНаОткрытиеСчетов();
	ОбновитьЗачисленияЗарплаты();
	ПрочитатьСоставФайлов();

	ЭкспортУжеОбновляли = Ложь;
	ИмпортУжеОбновляли = Ложь;

	ДатаФормированияФайлов = ТекущаяДата();
	УстановитьЗаголовкиОрганизацийВФорме();
	
	ЭлементыФормы.ФорматФайлаОбмена.СписокВыбора.Добавить(Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия1, "Версия 1.0");
	ЭлементыФормы.ФорматФайлаОбмена.СписокВыбора.Добавить(Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия3, "Версия 3.0");
	ЭлементыФормы.ФорматФайлаОбмена.СписокВыбора.Добавить(Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия32, "Версия 3.2");
	ЭлементыФормы.ФорматФайлаОбмена.Значение = Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия1;
	ЭлементыФормы.ФорматФайлаОбмена1.СписокВыбора.Добавить(Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия1, "Версия 1.0");
	ЭлементыФормы.ФорматФайлаОбмена1.СписокВыбора.Добавить(Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия3, "Версия 3.0");
	ЭлементыФормы.ФорматФайлаОбмена1.СписокВыбора.Добавить(Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия32, "Версия 3.2");
	ЭлементыФормы.ФорматФайлаОбмена1.Значение = Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия1;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.Кодировка",  Кодировка);
	СохранитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.КаталогИмпорта",  КаталогИмпорта);
	СохранитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.КаталогЭкспорта", КаталогЭкспорта);
	СохранитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.НомерСНачалаГода", НомерСНачалаГода);
	СохранитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.ОтделениеБанка", ОтделениеБанка);
	СохранитьЗначение("Обработка.ИмпортЭкспортОперацийПоЛицевымСчетамРаботников.ФилиалОтделенияБанка", ФилиалОтделенияБанка);
	
КонецПроцедуры

// ОТКРЫТИЕ СЧЕТОВ

Процедура КаталогЭкспортаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораКаталогЭкспорта = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталогЭкспорта.Заголовок = "Открытие каталога для передачи файлов с операциями в банк";
	ДиалогВыбораКаталогЭкспорта.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораКаталогЭкспорта.Каталог = КаталогЭкспорта;
	
	Если Не ДиалогВыбораКаталогЭкспорта.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	КаталогЭкспорта = ДиалогВыбораКаталогЭкспорта.Каталог;
	
КонецПроцедуры

Процедура КаталогЭкспортаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(КаталогЭкспорта);
	
КонецПроцедуры


Процедура ОбновитьЗаявкиНаОткрытиеСчетов()
	
	ЗапросОткрытиеСчетов = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                    |	ЗаявкаНаОткрытиеСчетов.Ссылка,
	                                    |	ЗаявкаНаОткрытиеСчетов.ПометкаУдаления,
	                                    |	ЗаявкаНаОткрытиеСчетов.Номер,
	                                    |	ЗаявкаНаОткрытиеСчетов.Дата,
	                                    |	ЗаявкаНаОткрытиеСчетов.Проведен,
	                                    |	ЗаявкаНаОткрытиеСчетов.Организация,
	                                    |	ЗаявкаНаОткрытиеСчетов.Ответственный,
	                                    |	ЗаявкаНаОткрытиеСчетов.БанковскийСчет.НомерСчета Как НомерСчета,
	                                    |	ЗаявкаНаОткрытиеСчетов.ТекстПодтверждения,
	                                    |	ЗаявкаНаОткрытиеСчетов.НомерДоговора,
	                                    |	ЗаявкаНаОткрытиеСчетов.ОтделениеБанка,
	                                    |	ЗаявкаНаОткрытиеСчетов.ФилиалОтделенияБанка,
	                                    |	ЗаявкаНаОткрытиеСчетов.Комментарий,
	                                    |	ЗаявкаНаОткрытиеСчетов.ВидВклада
	                                    |ИЗ
	                                    |	Документ.ЗаявкаНаОткрытиеСчетов КАК ЗаявкаНаОткрытиеСчетов
	                                    |ГДЕ
										|	НЕ ЗаявкаНаОткрытиеСчетов.ВводНачальныхСведений
										|	И НЕ ЗаявкаНаОткрытиеСчетов.ПометкаУдаления
	                                    |	И ЗаявкаНаОткрытиеСчетов.Дата >= &ДатаНач
	                                    |	И ЗаявкаНаОткрытиеСчетов.Дата <= &ДатаКон");

	ЗапросОткрытиеСчетов.УстановитьПараметр("ДатаНач", ДатаНач_ОткрытиеСчетов);
	ЗапросОткрытиеСчетов.УстановитьПараметр("ДатаКон", ДатаКон_ОткрытиеСчетов);
	
	Выборка = ЗапросОткрытиеСчетов.Выполнить().Выбрать();
	
	ЗявкиНаОткрытиеСчетов.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяЗаявка = ЗявкиНаОткрытиеСчетов.Добавить();
		
		НоваяЗаявка.Дата                 = Выборка.Дата;
		НоваяЗаявка.Номер                = Выборка.Номер;
		НоваяЗаявка.Организация          = Выборка.Организация ;
		НоваяЗаявка.РасчетныйСчет        = Выборка.НомерСчета;
		НоваяЗаявка.НомерДоговора        = Выборка.НомерДоговора;
		НоваяЗаявка.ВидВклада            = Выборка.ВидВклада;
		НоваяЗаявка.Документ             = Выборка.Ссылка;
		
	КонецЦикла;
	
	ЭлементыФормы.РамкаГруппыОткрытиеСчетов.Заголовок = "Заявки на отрытие счетов (" + Формат(ДатаНач_ОткрытиеСчетов, "ДФ=dd.MM.yyyy") + " - " + Формат(ДатаКон_ОткрытиеСчетов, "ДФ=dd.MM.yyyy") + ")";
	
КонецПроцедуры


Процедура КоманднаяПанельЗявкиНаОткрытиеСчетовОбновить(Кнопка)
	
	ОбновитьЗаявкиНаОткрытиеСчетов();
	
КонецПроцедуры

Процедура КоманднаяПанельЗявкиНаОткрытиеСчетовУстановитьИнтервал(Кнопка)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач_ОткрытиеСчетов, ДатаКон_ОткрытиеСчетов);
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	ДатаНач_ОткрытиеСчетов = НастройкаПериода.ПолучитьДатуНачала();
	ДатаКон_ОткрытиеСчетов = НастройкаПериода.ПолучитьДатуОкончания();
	
	ОбновитьЗаявкиНаОткрытиеСчетов();
	
КонецПроцедуры

Процедура ЗявкиНаОткрытиеСчетовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Выгрузить.ОтображатьТекст = Ложь;
	ОформлениеСтроки.Ячейки.Выгрузить.ОтображатьФлажок = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельЗявкиНаОткрытиеСчетовУстановитьФлажки(Кнопка)
	
	Для каждого СтрокаЗаявок из ЗявкиНаОткрытиеСчетов ЦИкл
		СтрокаЗаявок.Выгрузить = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельЗявкиНаОткрытиеСчетовСнятьФлажки(Кнопка)
	
	Для каждого СтрокаЗаявок из ЗявкиНаОткрытиеСчетов ЦИкл
		СтрокаЗаявок.Выгрузить = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗявкиНаОткрытиеСчетовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументЗаявки = Документы.ЗаявкаНаОткрытиеСчетов.НайтиПоНомеру(ВыбраннаяСтрока.Номер, ВыбраннаяСтрока.Дата);
	ДокументЗаявки.ПолучитьОбъект().ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ЗявкиНаОткрытиеСчетовПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ЗявкиНаОткрытиеСчетовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура КоманднаяПанельЗявкиНаОткрытиеСчетовВыгрузить(Кнопка)
	
	Для каждого СтрокаСЗаявкой из ЗявкиНаОткрытиеСчетов цикл
		
		Если НЕ СтрокаСЗаявкой.Выгрузить Тогда
			Продолжить;
		КонецЕсли;
		
		// обрабатываем последовательно каждую заявку.
		ОчиститьДанныеЭкспорта();
		Заявка = СтрокаСЗаявкой.Документ.ПолучитьОбъект();
		ОрганизацияВЗаявке = Заявка.Организация;
		БанкВЗаявке = Заявка.БанковскийСчет.Банк;
		Для каждого СтрокаЗаявки из Заявка.РаботникиОрганизации Цикл
			Работник = СтрокаЗаявки.ФизЛицо;
			
			Если ВыгружатьТолькоНеИсполненныеЗаявки Тогда
				Если ПолучитьЛицевойСчет(Работник, ОрганизацияВЗаявке, БанкВЗаявке) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьОткрытиеСчета(Работник, Заявка.ВидВклада, Заявка.ДатаВыплатыЗаработнойПлаты, СтрокаЗаявки);
			
		КонецЦикла;
		
		Если ОткрытиеСчетов.Количество() > 0 Тогда
			// есть данные для отправки
			ЗадатьПараметрыСеанса(ДатаФормированияФайлов, Заявка.НомерДоговора, ОрганизацияВЗаявке, Заявка.БанковскийСчет, ПолучитьИДДокумента(СтрокаСЗаявкой.Документ));
			Документ = СтрокаСЗаявкой.Документ;
			КаталогЭкспортаДанных = КаталогЭкспорта;
			НачалоЭкспорта = ТекущаяДата();
			
			Если ЭкспортироватьДанные(НомерСНачалаГода, ОтделениеБанка) Тогда
				МенеджерЗаписиПротокола = РегистрыСведений.ПротоколыОбменаСБанком.СоздатьМенеджерЗаписи();
				МенеджерЗаписиПротокола.Документ = СтрокаСЗаявкой.Документ;
				МенеджерЗаписиПротокола.Дата = НачалоЭкспорта;
				МенеджерЗаписиПротокола.Содержание = ТекстXML;
				МенеджерЗаписиПротокола.Записать();
				
			КонецЕсли;
			
			Пока НачалоЭкспорта = ТекущаяДата() Цикл
			КонецЦикла;
		КонецЕсли;
		
		
		Если НомерСНачалаГода < 999 Тогда
			НомерСНачалаГода = НомерСНачалаГода + 1;
			
		Иначе
			НомерСНачалаГода = 0;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры


// ЗАЧИСЛЕНИЕ ЗАРПЛАТЫ

Процедура ОбновитьЗачисленияЗарплаты()
	
	ЗапросЗачисленияЗарплаты = Новый Запрос;
	
	ЗапросЗачисленияЗарплаты.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящее.Организация,
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.Номер,
	|	ПлатежноеПоручениеИсходящее.Дата,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК СчетОрганизации,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК НомерСчета
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
	|		ПО (ВЫБОР
	|				КОГДА ПлатежноеПоручениеИсходящее.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ПлатежноеПоручениеИсходящее.Организация
	|				ИНАЧЕ ПлатежноеПоручениеИсходящее.Организация.ГоловнаяОрганизация
	|			КОНЕЦ = УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация)
	|ГДЕ
	|	(НЕ ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетВзаиморасчетов, ИСТИНА))
	|	И ПлатежноеПоручениеИсходящее.Дата <= &ДатаКон
	|	И ПлатежноеПоручениеИсходящее.Дата >= &ДатаНач
	|	И (НЕ ПлатежноеПоручениеИсходящее.ПометкаУдаления)
	|	И ПлатежноеПоручениеИсходящее.ВидОперации = &ВидОперацииПеречислениеЗП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Организация,
	|	ЗарплатаКВыплате.Ссылка,
	|	ЗарплатаКВыплате.Номер,
	|	ЗарплатаКВыплате.Дата,
	|	ЗарплатаКВыплате.СуммаДокумента,
	|	ЗарплатаКВыплате.Организация.ОсновнойБанковскийСчет,
	|	ЗарплатаКВыплате.Организация.ОсновнойБанковскийСчет.НомерСчета
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплате
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
	|		ПО (ВЫБОР
	|				КОГДА ЗарплатаКВыплате.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ЗарплатаКВыплате.Организация
	|				ИНАЧЕ ЗарплатаКВыплате.Организация.ГоловнаяОрганизация
	|			КОНЕЦ = УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация)
	|ГДЕ
	|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.УпрощенныйУчетВзаиморасчетов, ИСТИНА)
	|	И ЗарплатаКВыплате.Дата <= &ДатаКон
	|	И ЗарплатаКВыплате.Дата >= &ДатаНач
	|	И ЗарплатаКВыплате.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|	И ЗарплатаКВыплате.Проведен
	|	И (НЕ ЗарплатаКВыплате.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручениеИсходящее.Ссылка";
	
	ЗапросЗачисленияЗарплаты.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач_ЗачислениеЗарплаты));
	ЗапросЗачисленияЗарплаты.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон_ЗачислениеЗарплаты));
	ЗапросЗачисленияЗарплаты.УстановитьПараметр("ВидОперацииПеречислениеЗП", Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП);
	
	Выборка = ЗапросЗачисленияЗарплаты.Выполнить().Выбрать();
	
	ПлатежныеПорученияЗачислениеЗарплаты.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяПлатежка = ПлатежныеПорученияЗачислениеЗарплаты.Добавить();
		
		НоваяПлатежка.Организация   	= Выборка.Организация;
		НоваяПлатежка.Документ      	= Выборка.Ссылка;
		НоваяПлатежка.ВидДокумента  	= ТипЗнч(Выборка.Ссылка);
		НоваяПлатежка.Дата          	= Выборка.Дата;
		НоваяПлатежка.Номер         	= Выборка.Номер;
		НоваяПлатежка.Сумма         	= Выборка.СуммаДокумента;
		НоваяПлатежка.СчетОрганизации	= Выборка.СчетОрганизации;
		НоваяПлатежка.РасчетныйСчет		= Выборка.НомерСчета;

	КонецЦикла;

	ЭлементыФормы.РамкаГруппыЗачислениеЗарплаты.Заголовок = "Платежные документы на зачисление зарплаты (" + Формат(ДатаНач_ЗачислениеЗарплаты, "ДФ=dd.MM.yyyy") + " - " + Формат(ДатаКон_ЗачислениеЗарплаты, "ДФ=dd.MM.yyyy") + ")";
	
	ЭкспортУжеОбновляли = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежныеПорученияЗачислениеЗарплатыОбновить(Кнопка)
	
	ОбновитьЗачисленияЗарплаты();
	
КонецПроцедуры

Процедура ПлатежныеПорученияЗачислениеЗарплатыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Выгрузить.ОтображатьТекст = Ложь;
	ОформлениеСтроки.Ячейки.Выгрузить.ОтображатьФлажок = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежныеПорученияЗачислениеЗарплатыУстановитьИнтервал(Кнопка)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач_ЗачислениеЗарплаты, ДатаКон_ЗачислениеЗарплаты);
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	ДатаНач_ЗачислениеЗарплаты = НастройкаПериода.ПолучитьДатуНачала();
	ДатаКон_ЗачислениеЗарплаты = НастройкаПериода.ПолучитьДатуОкончания();
	
	ОбновитьЗачисленияЗарплаты();
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежныеПорученияЗачислениеЗарплатыУстановитьФлажки(Кнопка)
	
	Для каждого СтрокаЗачислениеЗарплаты из ПлатежныеПорученияЗачислениеЗарплаты ЦИкл
		СтрокаЗачислениеЗарплаты.Выгрузить = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежныеПорученияЗачислениеЗарплатыСнятьФлажки(Кнопка)
	
	Для каждого СтрокаЗачислениеЗарплаты из ПлатежныеПорученияЗачислениеЗарплаты ЦИкл
		СтрокаЗачислениеЗарплаты.Выгрузить = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежныеПорученияЗачислениеЗарплатыВыгрузить(Кнопка)
	
	ОбязательныеПоля = Новый СписокЗначений;
	ОбязательныеПоля.Добавить(КаталогЭкспорта,					"Не указан каталог экспорта!");
	ОбязательныеПоля.Добавить(ДатаФормированияФайлов,			"Не указана дата формирования!");
	ОбязательныеПоля.Добавить(ОтделениеБанка,					"Не указано отделение банка!");
	ОбязательныеПоля.Добавить(НомерСНачалаГода,					"Не указан номер реестра!");
	ОбязательныеПоля.Добавить(НомерДоговораЗачисленияЗарплаты,	"Не указан номер договора!");
	
	Отказ = Ложь;
	Для Каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
		Если НЕ ЗначениеЗаполнено(ОбязательноеПоле.Значение) Тогда
			Сообщить(ОбязательноеПоле.Представление, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли	
	КонецЦикла;
	
	Если Отказ Тогда
		Сообщить("Экспорт зачисления зарплаты не выполнялся!", СтатусСообщения.Важное);
		Возврат
	КонецЕсли;	

	Если ФорматФайлаОбмена = ФорматФайла1 Тогда
		
		Для Каждого СтрокаСДокументом Из ПлатежныеПорученияЗачислениеЗарплаты Цикл
			
			Если НЕ СтрокаСДокументом.Выгрузить Тогда
				Продолжить;
			КонецЕсли;
			
			// обрабатываем последовательно каждую заявку.
			ОчиститьДанныеЭкспорта();
			
			Если ТипЗнч(СтрокаСДокументом.Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			
				Платежка = СтрокаСДокументом.Документ.ПолучитьОбъект();
			
				ОрганизацияВПлатежке= Платежка.Организация;
				БанкПеречисления	= Платежка.Контрагент;
				СчетОрганизации		= СтрокаСДокументом.СчетОрганизации;
				
				Для каждого СтрокаСВедомостью из Платежка.ПеречислениеЗаработнойПлаты Цикл
					
					Ведомость = СтрокаСВедомостью.Ведомость.ПолучитьОбъект();
					
					Для каждого СтрокаВедомости из Ведомость.Зарплата Цикл
						Работник = СтрокаВедомости.ФизЛицо;
						Сумма = СтрокаВедомости.Сумма + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
						ЛицевойСчет = ПолучитьЛицевойСчет(Работник, ОрганизацияВПлатежке, БанкПеречисления);
						Если ЛицевойСчет = Неопределено Тогда
							Сообщить("Перечисление (" + Сумма + " руб." + ")" + Работник + " не может быть произведено: отсутствует лицевой счет!", СтатусСообщения.Важное);
							Продолжить;
						КонецЕсли;
						ДобавитьЗачислениеЗарплаты(Работник, Сумма, ЛицевойСчет);
					КонецЦикла
					
				КонецЦикла;
				
			КонецЕсли;
				
			Если ТипЗнч(СтрокаСДокументом.Документ) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
				
				Ведомость = СтрокаСДокументом.Документ.ПолучитьОбъект();
			
				ОрганизацияВПлатежке= Ведомость.Организация;
				БанкПеречисления	= Ведомость.Банк;
				СчетОрганизации		= СтрокаСДокументом.СчетОрганизации;
				
				Для каждого СтрокаВедомости из Ведомость.Зарплата Цикл
					Работник = СтрокаВедомости.ФизЛицо;
					Сумма = СтрокаВедомости.Сумма + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
					ЛицевойСчет = ПолучитьЛицевойСчет(Работник, ОрганизацияВПлатежке, БанкПеречисления);
					Если ЛицевойСчет = Неопределено Тогда
						Сообщить("Перечисление (" + Сумма + " руб." + ")" + Работник + " не может быть произведено: отсутствует лицевой счет!", СтатусСообщения.Важное);
						Продолжить;
					КонецЕсли;
					ДобавитьЗачислениеЗарплаты(Работник, Сумма, ЛицевойСчет);
				КонецЦикла
					
				
			КонецЕсли;	
			
			Если ЗачислениеЗарплаты.Количество() > 0 Тогда
				
				ЗадатьПараметрыСеанса(ДатаФормированияФайлов, НомерДоговораЗачисленияЗарплаты, ОрганизацияВПлатежке, СчетОрганизации, ПолучитьИДДокумента(СтрокаСДокументом.Документ));
				КаталогЭкспортаДанных = КаталогЭкспорта;
				НачалоЭкспорта = ТекущаяДата();
				
				Если ЭкспортироватьДанные(НомерСНачалаГода, ОтделениеБанка) Тогда
					
					МенеджерЗаписиПротокола = РегистрыСведений.ПротоколыОбменаСБанком.СоздатьМенеджерЗаписи();
					МенеджерЗаписиПротокола.Документ = СтрокаСДокументом.Документ;
					МенеджерЗаписиПротокола.Дата = НачалоЭкспорта;
					МенеджерЗаписиПротокола.Содержание = ТекстXML;
					МенеджерЗаписиПротокола.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НомерСНачалаГода < 999 Тогда
				НомерСНачалаГода = НомерСНачалаГода + 1;
			Иначе
				НомерСНачалаГода = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ФорматФайлаОбмена = ФорматФайла3 Или ФорматФайлаобмена = ФорматФайла32 Тогда
		
		Для Каждого СтрокаСДокументом Из ПлатежныеПорученияЗачислениеЗарплаты Цикл
			
			Если НЕ СтрокаСДокументом.Выгрузить Тогда
				Продолжить;
			КонецЕсли;
			
			// обрабатываем последовательно каждую заявку.
			ОчиститьДанныеЭкспорта();
			
			Если ТипЗнч(СтрокаСДокументом.Документ) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			
				Платежка = СтрокаСДокументом.Документ.ПолучитьОбъект();
				
				ОрганизацияВПлатежке = Платежка.Организация;
				СчетОрганизации = Платежка.СчетОрганизации;
				БанкПеречисления = Платежка.Контрагент;
				
				Для каждого СтрокаСВедомостью из Платежка.ПеречислениеЗаработнойПлаты Цикл
					
					Ведомость = СтрокаСВедомостью.Ведомость.ПолучитьОбъект();
					
					Для каждого СтрокаВедомости из Ведомость.Зарплата Цикл
						Работник = СтрокаВедомости.ФизЛицо;
						Сумма = СтрокаВедомости.Сумма + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
						ЛицевойСчет = ПолучитьЛицевойСчет(Работник, ОрганизацияВПлатежке, БанкПеречисления);
						Если ЛицевойСчет = Неопределено Тогда
							Сообщить("Перечисление (" + Сумма + " руб." + ")" + Работник + " не может быть произведено: отсутствует лицевой счет!", СтатусСообщения.Важное);
							Продолжить;
						КонецЕсли;
						ДобавитьЗачислениеЗарплаты(Работник, Сумма, ЛицевойСчет);
					КонецЦикла
				КонецЦикла;
					
			КонецЕсли;
				
			Если ТипЗнч(СтрокаСДокументом.Документ) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
				
				Ведомость = СтрокаСДокументом.Документ.ПолучитьОбъект();
			
				ОрганизацияВПлатежке= Ведомость.Организация;
				БанкПеречисления	= Ведомость.Банк;
				СчетОрганизации		= СтрокаСДокументом.СчетОрганизации;
				
				Для каждого СтрокаВедомости из Ведомость.Зарплата Цикл
					Работник = СтрокаВедомости.ФизЛицо;
					Сумма = СтрокаВедомости.Сумма + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
					ЛицевойСчет = ПолучитьЛицевойСчет(Работник, ОрганизацияВПлатежке, БанкПеречисления);
					Если ЛицевойСчет = Неопределено Тогда
						Сообщить("Перечисление (" + Сумма + " руб." + ")" + Работник + " не может быть произведено: отсутствует лицевой счет!", СтатусСообщения.Важное);
						Продолжить;
					КонецЕсли;
					ДобавитьЗачислениеЗарплаты(Работник, Сумма, ЛицевойСчет);
				КонецЦикла
					
			КонецЕсли;	
			
			Если ЗачислениеЗарплаты.Количество() > 0 Тогда
				
				ЗадатьПараметрыСеанса(ДатаФормированияФайлов, НомерДоговораЗачисленияЗарплаты, ОрганизацияВПлатежке, СчетОрганизации, ПолучитьИДДокумента(СтрокаСДокументом.Документ));
				КаталогЭкспортаДанных = КаталогЭкспорта;
				НачалоЭкспорта = ТекущаяДата();
				
				Если ЭкспортироватьДанные(НомерСНачалаГода, ОтделениеБанка) Тогда
					
					МенеджерЗаписиПротокола = РегистрыСведений.ПротоколыОбменаСБанком.СоздатьМенеджерЗаписи();
					МенеджерЗаписиПротокола.Документ = СтрокаСДокументом.Документ;
					МенеджерЗаписиПротокола.Дата = НачалоЭкспорта;
					МенеджерЗаписиПротокола.Содержание = ТекстXML;
					МенеджерЗаписиПротокола.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если НомерСНачалаГода < 999 Тогда
				НомерСНачалаГода = НомерСНачалаГода + 1;
			Иначе
				НомерСНачалаГода = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


// ИМПОРТ

Процедура КаталогИмпортаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораКаталогаИмпорта = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталогаИмпорта.Заголовок = "Открытие каталога с файлами ответов из банка";
	ДиалогВыбораКаталогаИмпорта.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораКаталогаИмпорта.Каталог = КаталогИмпорта;
	
	Если Не ДиалогВыбораКаталогаИмпорта.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	КаталогИмпорта = ДиалогВыбораКаталогаИмпорта.Каталог;
	
	ПрочитатьСоставФайлов();

КонецПроцедуры

Процедура КаталогИмпортаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(КаталогИмпорта);
	
КонецПроцедуры

Процедура ПрочитатьСоставФайлов()
	
	ФайлыДляИмпорта.Очистить();
	
	ФайлДанных = Новый Файл(КаталогИмпорта);
	
	Если ФайлДанных.Существует() Тогда
		КаталогИмпортаДанных = КаталогИмпорта;
		МассивФайловИмпорта = НайтиФайлы(КаталогИмпорта, "*.*");
		Для Каждого ФайлИмпорта из МассивФайловИмпорта Цикл
			
			Если ФайлИмпорта.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
		
			ДатаИзменения = ФайлИмпорта.ПолучитьВремяИзменения();
			
			Если ДатаИзменения < ДатаНач_Импорт Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДатаИзменения > ДатаКон_Импорт Тогда
				Продолжить;
			КонецЕсли;
			
			Если ФайлИмпорта.Размер() > 10000000 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСФайлом = ФайлыДляИмпорта.Добавить();
			СтрокаСФайлом.Файл = ФайлИмпорта.Имя;
			СтрокаСФайлом.Дата = ДатаИзменения;
			ФайлИмпорта = Неопределено;
			
			Попытка
				ТочкаВхода = ПолучитьДеревоИзФайла(СтрокаСФайлом.Файл, Ложь);
				
				Если ТочкаВхода <> Неопределено Тогда
					СчетаПК = ПолучитьСчетаПК(ТочкаВхода, СтрокаСФайлом.Файл, Ложь);
					СтрокаСФайлом.ДатаОперации = Дата(СчетаПК.ДатаФормирования);
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭлементыФормы.РамкаГруппыФайлыДляИмпорта.Заголовок = "Файлы для импорта  (" + Формат(ДатаНач_Импорт, "ДФ=dd.MM.yyyy") + " - " + Формат(ДатаКон_Импорт, "ДФ=dd.MM.yyyy") + ")";
	
	ИмпортУжеОбновляли = Истина;
	
КонецПроцедуры


Процедура КоманднаяПанельФайлыДляИмпортаОбновить(Кнопка)
	
	ПрочитатьСоставФайлов();
	
КонецПроцедуры

Процедура КоманднаяПанельФайлыДляИмпортаУстановитьИнтервал(Кнопка)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач_Импорт, ДатаКон_Импорт);
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	ДатаНач_Импорт = НастройкаПериода.ПолучитьДатуНачала();
	ДатаКон_Импорт = НастройкаПериода.ПолучитьДатуОкончания();
	
	ПрочитатьСоставФайлов();
	
КонецПроцедуры

Процедура КоманднаяПанельФайлыДляИмпортаУстановитьФлажки(Кнопка)
	
	Для каждого СтрокаФайлыДляИмпорта из ФайлыДляИмпорта ЦИкл
		СтрокаФайлыДляИмпорта.Загрузить = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельФайлыДляИмпортаСнятьФлажки(Кнопка)
	
	Для каждого СтрокаФайлыДляИмпорта из ФайлыДляИмпорта ЦИкл
		СтрокаФайлыДляИмпорта.Загрузить = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ФайлыДляИмпортаПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ФайлыДляИмпортаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

// ОПЕРАЦИИ ПО СЧЕТАМ

Процедура КоманднаяПанельФайлыДляИмпортаЗагрузить(Кнопка)
	
	Для каждого СтрокаСФайлом из ФайлыДляИмпорта Цикл
		
		Если НЕ СтрокаСФайлом.Загрузить Тогда
			Продолжить;
		КонецЕсли;
		
		КаталогИмпортаДанных = КаталогИмпорта;
		ТочкаВхода = ПолучитьДеревоИзФайла(СтрокаСФайлом.Файл);
		Если ТочкаВхода = Неопределено Тогда
			ПроцедурыУправленияПерсоналом.СообщитьОбОшибкеОбработки("Импорт из файла " + СтрокаСФайлом.Файл, "Нарушена структура данных!");
			Продолжить;
		КонецЕсли;
		
		СчетаПК = ПолучитьСчетаПК(ТочкаВхода, СтрокаСФайлом.Файл);
		СтрокаГУИД = СчетаПК.ИдПервичногоДокумента;
		
		СтадияОбработки = "Анализ данных " + СтрокаСФайлом.Файл;
		
		ПервичныйДокумент = Документы.ЗаявкаНаОткрытиеСчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаГУИД));
		ЭлементыИмпорта = "РезультатОткрытияСчетов";
		
		Если НЕ ЗначениеЗаполнено(ПервичныйДокумент.Дата) Тогда
			
			ПервичныйДокумент = Документы.ПлатежноеПоручениеИсходящее.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаГУИД));
			
			Если НЕ ЗначениеЗаполнено(ПервичныйДокумент.Дата) Тогда
				
				ПервичныйДокумент = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаГУИД));
				
				Если НЕ ЗначениеЗаполнено(ПервичныйДокумент.Дата) Тогда
					ПроцедурыУправленияПерсоналом.СообщитьОбОшибкеОбработки(СтадияОбработки, "Не найден первичный документ!");
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		
			ЭлементыИмпорта = "РезультатЗачисленияЗарплаты";
			
		КонецЕсли;
		
		МенеджерЗаписиПротокола = РегистрыСведений.ПротоколыОбменаСБанком.СоздатьМенеджерЗаписи();
		МенеджерЗаписиПротокола.Документ = ПервичныйДокумент;
		МенеджерЗаписиПротокола.Дата = ТекущаяДата();
		МенеджерЗаписиПротокола.Содержание = ТекстXML;
		МенеджерЗаписиПротокола.Записать();
		
		Если ЭлементыИмпорта = "РезультатОткрытияСчетов" Тогда
			// записываем текст в первичный документ и проводим его
			ОбъектДокумента = ПервичныйДокумент.ПолучитьОбъект();
			Если ОбъектДокумента <> Неопределено Тогда
				ТекстПодтверждения = ОбъектДокумента.ТекстПодтверждения;
				Попытка
					ИсходноеДерево = ЗначениеИзСтрокиВнутр(ОбъектДокумента.ТекстПодтверждения);
				Исключение
					ИсходноеДерево = СоздатьДеревоЭкспорта();
				КонецПопытки;
				
				Если ТипЗнч(ИсходноеДерево) <> Тип("ДеревоЗначений") Тогда
					ИсходноеДерево = СоздатьДеревоЭкспорта();
				КонецЕсли;
				
				Для каждого ОперацияПодтверждения из СчетаПК.Содержимое.СТроки Цикл
					НоваяОперация = ИсходноеДерево.Строки.Добавить();
					СкопироватьСодержание(ОперацияПодтверждения, НоваяОперация);
				КонецЦикла;
				
				ОбъектДокумента.ТекстПодтверждения = ЗначениеВСтрокуВнутр(ИсходноеДерево);
				Попытка
					ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета,
					               |	ЛицевыеСчетаРаботниковОрганизации.ФизЛицо
					               |ИЗ
					               |	РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
					               |ГДЕ
					               |	ЛицевыеСчетаРаботниковОрганизации.Документ = &ДокументСсылка";
					Запрос.УстановитьПараметр("ДокументСсылка", ОбъектДокумента.Ссылка);
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						Сообщить("Записана информация о лицевом счете " + Выборка.НомерЛицевогоСчета + " (сотрудник " + Выборка.ФизЛицо + " )");
					КонецЦикла;
					
				Исключение
					Сообщить("Загрузка данных отменена!");
				КонецПопытки;
				
			Иначе
				ПроцедурыУправленияПерсоналом.СообщитьОбОшибкеОбработки(СтадияОбработки, "Не найден первичный документ!");
				
			КонецЕсли;
		КонецЕсли;
			
		Если ЭлементыИмпорта = "РезультатЗачисленияЗарплаты" Тогда
			
			// получаем массив операций
			МассивОпераций = ПроцедурыУправленияПерсоналом.ПолучитьОперацииПоЛицевымСчетамРаботников(СчетаПК.Содержимое, ЭлементыИмпорта);
			
			// для ППИ создаем ордер
			Если ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
				
				Ордер = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.СоздатьДокумент();
				Ордер.ДокументОснование = ПервичныйДокумент;
				Ордер.Организация = ПервичныйДокумент.Организация;
				
				ТаблицаПередачи = Новый ТаблицаЗначений;
				ТаблицаПередачи.Колонки.Добавить("Ведомость");
				ТаблицаПередачи.Колонки.Добавить("ФизЛицо");
				ТаблицаПередачи.Колонки.Добавить("СуммаПлатежа");
				
				ЗапросВедомостей = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                                |	ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты.(
				                                |		Ведомость
				                                |	),
				                                |	ПлатежноеПоручениеИсходящее.Ссылка
				                                |ИЗ
				                                |	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
				                                |ГДЕ
				                                |	ПлатежноеПоручениеИсходящее.Ссылка = &Платежка");
				
				ЗапросВедомостей.УстановитьПараметр("Платежка", ПервичныйДокумент);
				
				СписокВедомостей = Новый СписокЗначений();
				ВыборкаПлатежек = ЗапросВедомостей.Выполнить().Выбрать();
				СоответствиеРаботников = Новый Соответствие;

				Если ВыборкаПлатежек.Следующий() Тогда
					ВыборкаВедомостей = ВыборкаПлатежек.ПеречислениеЗаработнойПлаты.Выбрать();
					
					Пока ВыборкаВедомостей.Следующий() Цикл
						СписокВедомостей.Добавить(ВыборкаВедомостей.Ведомость);
					КонецЦикла;
					
					ЗапросРаботников = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ЗарплатаКВыплатеОрганизаций.Ссылка,
					|	ЗарплатаКВыплатеОрганизаций.Зарплата.(
					|		Физлицо
					|	)
					|ИЗ
					|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
					|ГДЕ
					|	ЗарплатаКВыплатеОрганизаций.Ссылка В (&СписокВедомостей)");
					
					ЗапросРаботников.УстановитьПараметр("СписокВедомостей", СписокВедомостей);
					
					НоваяВыборкаВедомостей = ЗапросРаботников.Выполнить().Выбрать();
					
					Пока НоваяВыборкаВедомостей.Следующий() Цикл
						ВыборкаРаботников = НоваяВыборкаВедомостей.Зарплата.Выбрать();
						Пока ВыборкаРаботников.Следующий() Цикл
							СоответствиеРаботников.Вставить(ВыборкаРаботников.ФизЛицо, НоваяВыборкаВедомостей.Ссылка);
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;
				
				СписокСотрудниковСНезачисленнойЗарплатой = "";	
				Для каждого ОперацияПодтверждения из МассивОпераций Цикл
					
						Если НРег(ОперацияПодтверждения.Результат) = "зачислено" Тогда
							СтрокаПередачи = ТаблицаПередачи.Добавить();
							СтрокаПередачи.ФизЛицо = ОперацияПодтверждения.Сотрудник;
							СтрокаПередачи.СуммаПлатежа = ОперацияПодтверждения.Сумма;
							СтрокаПередачи.Ведомость = СоответствиеРаботников[ОперацияПодтверждения.Сотрудник];
						Иначе
							СписокСотрудниковСНезачисленнойЗарплатой = СписокСотрудниковСНезачисленнойЗарплатой + Символы.ПС + " " + Строка(ОперацияПодтверждения.Сотрудник) + "  " + ОперацияПодтверждения.Результат;
						КонецЕсли;
						
				КонецЦикла;
					
				Ордер.Дата = ТекущаяДата();
				Ордер.ДатаВыписки = Ордер.Дата;
				Ордер.ЗаполнитьПеречислениеЗППоОбменуСБанком(ТаблицаПередачи, ПервичныйДокумент);
				ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(Ордер, глЗначениеПеременной("глТекущийПользователь"));
				Ордер.Записать();
				Если СписокСотрудниковСНезачисленнойЗарплатой <> "" Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Следующим сотрудникам деньги не зачислены на счет в банке: " + СписокСотрудниковСНезачисленнойЗарплатой, Истина, Строка(Ордер));
				КонецЕсли;
				Если МенеджерЗаписиПротокола.Документ = Неопределено Тогда
					МенеджерЗаписиПротокола.Документ = Ордер.Ссылка;
					МенеджерЗаписиПротокола.Записать();
				КонецЕсли;
				Ордер.ПолучитьФорму().Открыть();
				
			КонецЕсли;

			Если ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
				
				ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
				ОбработкаКомментариев.УдалитьСообщения();
				
				Ведомость = ПервичныйДокумент.ПолучитьОбъект();
				
				Зарплата = Ведомость.Зарплата.Выгрузить(, "Физлицо, Сумма, КомпенсацияЗаЗадержкуЗарплаты");
				
				ТаблицаПередачи = Новый ТаблицаЗначений;
				ТаблицаПередачи.Колонки.Добавить("Ведомость");
				ТаблицаПередачи.Колонки.Добавить("ФизЛицо");
				ТаблицаПередачи.Колонки.Добавить("СуммаПлатежа");
				
				СписокСотрудниковСНезачисленнойЗарплатой = Новый Массив;
				СписокСотрудниковСНесовпадающейЗарплатой = Новый Массив;
				
				Для каждого ОперацияПодтверждения из МассивОпераций Цикл
					
					СтрокаЗарплаты = Зарплата.Найти(ОперацияПодтверждения.Сотрудник, "Физлицо");
					Если СтрокаЗарплаты <> Неопределено Тогда
						
						Если НРег(ОперацияПодтверждения.Результат) <> "зачислено" Тогда
							СписокСотрудниковСНезачисленнойЗарплатой.Добавить(Строка(ОперацияПодтверждения.Сотрудник));
						ИначеЕсли ОперацияПодтверждения.Сумма <> СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты Тогда
							СписокСотрудниковСНесовпадающейЗарплатой.Добавить(Строка(ОперацияПодтверждения.Сотрудник));
						КонецЕсли;
						
						Зарплата.Удалить(СтрокаЗарплаты);
							
					КонецЕсли;	
						
				КонецЦикла;
				
				// Оставшиеся строки в ТЗ Зарплата - это те, на кого вообще ничего не пришло
				Для Каждого СтрокаЗарплаты Из Зарплата Цикл
					СписокСотрудниковСНезачисленнойЗарплатой.Добавить(Строка(СтрокаЗарплаты.Физлицо));
				КонецЦикла;	
					
				Если МенеджерЗаписиПротокола.Документ = Неопределено Тогда
					МенеджерЗаписиПротокола.Документ = ПервичныйДокумент.Ссылка;
					МенеджерЗаписиПротокола.Записать();
				КонецЕсли;
				
				ЕстьПроблемы = СписокСотрудниковСНезачисленнойЗарплатой.Количество() > 0 
					ИЛИ СписокСотрудниковСНесовпадающейЗарплатой.Количество() > 0;
				
				ПредставлениеВедомости = "Зарплата к выплате №" + Ведомость.Номер + " от " + Ведомость.Дата;
				Расшифровка = Новый Массив;
				Расшифровка.Добавить(Новый Структура("Представление, Расшифровка", "Открыть", Ведомость));
				
				Если ЕстьПроблемы Тогда
					
					РодительскаяСтрока = ОбработкаКомментариев.ДобавитьСообщение(ПредставлениеВедомости, Перечисления.ВидыСообщений.Ошибка, Расшифровка);
					
					Если СписокСотрудниковСНезачисленнойЗарплатой.Количество() > 0 Тогда
						КореньСообщения = ОбработкаКомментариев.ДобавитьСообщение("Следующим сотрудникам деньги не зачислены на счет в банке:",,,РодительскаяСтрока);
						Для Каждого Сотрудник Из СписокСотрудниковСНезачисленнойЗарплатой Цикл
							ОбработкаКомментариев.ДобавитьСообщение(Сотрудник,,,КореньСообщения);						
						КонецЦикла;	
						
					КонецЕсли;
					
					Если СписокСотрудниковСНесовпадающейЗарплатой.Количество() > 0 Тогда
						КореньСообщения = ОбработкаКомментариев.ДобавитьСообщение("Следующим сотрудникам деньги зачислены не в полном объеме:",,,РодительскаяСтрока);
						Для Каждого Сотрудник Из СписокСотрудниковСНесовпадающейЗарплатой Цикл
							ОбработкаКомментариев.ДобавитьСообщение(Сотрудник,,,КореньСообщения);						
						КонецЦикла;	
					КонецЕсли;
					
				Иначе
					
					ОбработкаКомментариев.ДобавитьСообщение(ПредставлениеВедомости + " перечислена успешно. ", Перечисления.ВидыСообщений.Информация, Расшифровка);

				КонецЕсли;	
				
				ОбработкаКомментариев.ПоказатьСообщения();

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ФайлыДляИмпортаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ЗапуститьПриложение(КаталогИмпорта + "\" + ВыбраннаяСтрока.Файл);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФайлыДляИмпортаЛицевыеСчетаСотрудников(Кнопка)
	
	РегистрыСведений.ЛицевыеСчетаРаботниковОрганизации.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ПлатежныеПорученияЗачислениеЗарплатыПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ПлатежныеПорученияЗачислениеЗарплатыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ПлатежныеПорученияЗачислениеЗарплатыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ВыбраннаяСтрока.Документ.ПолучитьОбъект().ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПлатежныеПорученияЗачислениеЗарплатыСчетОрганизацииПриИзменении(Элемент)
	
	ЭлементыФормы.ПлатежныеПорученияЗачислениеЗарплаты.ТекущаяСтрока.РасчетныйСчет = Элемент.Значение.НомерСчета
	
КонецПроцедуры

Процедура КоманднаяПанельЗявкиНаОткрытиеСчетовПечать(Кнопка)
	
	Для каждого СтрокаСЗаявкой из ЗявкиНаОткрытиеСчетов Цикл
		Если СтрокаСЗаявкой.Выгрузить Тогда
			ТабДокумент = ПечатьЗаявки(СтрокаСЗаявкой.Документ);
			НапечататьДокумент(ТабДокумент, 1, Ложь, "Заявка на открытие счетов №" + СтрокаСЗаявкой.Номер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежныеПорученияЗачислениеЗарплатыПечать(Кнопка)
	
	Для каждого СтрокаСПеречислением из ПлатежныеПорученияЗачислениеЗарплаты Цикл
		Если СтрокаСПеречислением.Выгрузить Тогда
			ТабДокумент = ПечатьПеречисленияЗарплаты(СтрокаСПеречислением.Документ);
			НапечататьДокумент(ТабДокумент, 1, Ложь, "Ведомость перечисленных средств на лицевые счета №" + СтрокаСПеречислением.Номер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


ФорматФайла1 = Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия1;
ФорматФайла3 = Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия3;
ФорматФайла32 = Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия32;