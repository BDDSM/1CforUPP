////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура управляет доступностью переключателей
// настройки отображения заказов
Процедура ДоступностьПереключателейЗаказов()
	
	ЭлементыФормы.ОтображатьЗаказыПокупателей.Доступность = ОтображатьЗаказы;
	ЭлементыФормы.ОтображатьЗаказыПоставщикам.Доступность = ОтображатьЗаказы;
	ЭлементыФормы.ОтображатьВсеЗаказы.Доступность         = ОтображатьЗаказы;    
	
	ЭлементыФормы._1День.Доступность         = НЕ ОтображатьЗаказы;  
	ЭлементыФормы._2Дня.Доступность         = НЕ ОтображатьЗаказы;  
	
КонецПроцедуры

// Процедура управляет доступностью реквизитов ограничения интервала показа календаря
//
Процедура ДоступностьПараметровОграниченияВремени()
	
	ЭлементыФормы.ОграничитьВремяС.Доступность = ОграничитьВремя;
	ЭлементыФормы.ОграничитьВремяПо.Доступность = ОграничитьВремя;
	
КонецПроцедуры

// Процедура заполняет данные построителя отчета
// для выбора списка пользователей календаря
Процедура ЗаполнитьПостроительОтчета();

	ПостроительОтчета.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ответственный
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|{ГДЕ
	|	Пользователи.Ссылка КАК Ответственный}";

	Если ПостроительОтчета.Отбор.Найти("Ответственный") = Неопределено Тогда
		ПостроительОтчета.Отбор.Добавить("Ответственный", "Ответственный", "Ответственный");
	КонецЕсли;

	ПостроительОтчета.Отбор["Ответственный"].Использование = Истина;
	ПостроительОтчета.Отбор["Ответственный"].ВидСравнения  = ВидСравненияПостроитель;

	Если ТипЗнч(ПостроительОтчета.Отбор["Ответственный"].Значение) = Тип("СписокЗначений") Тогда
		ПостроительОтчета.Отбор["Ответственный"].Значение = ПользовательКалендаря.Скопировать();
	Иначе
		Если ПользовательКалендаря.Количество() = 1 Тогда
			ПостроительОтчета.Отбор.Ответственный.Значение = ПользовательКалендаря[0].Значение;
		Иначе
			ПостроительОтчета.Отбор.Ответственный.Значение = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	СохраненныеЗначения = ВосстановитьЗначение("КалендарьПользователя");
	Если СохраненныеЗначения <> Неопределено И ТипЗнч(СохраненныеЗначения) = Тип("Структура") Тогда
		СохраненныеЗначения.Свойство("КоличествоДнейНаЗакладкеДень"    , КоличествоДнейНаЗакладкеДень);
		СохраненныеЗначения.Свойство("КоличествоДнейНедели"            , КоличествоДнейНедели);
		СохраненныеЗначения.Свойство("ОтображатьЗапланированныеСобытия", ОтображатьЗапланированныеСобытия);
		СохраненныеЗначения.Свойство("ТипСобытияКалендаря"             , ТипСобытияКалендаря);
		СохраненныеЗначения.Свойство("ОтображатьЗаказы"                , ОтображатьЗаказы);
		СохраненныеЗначения.Свойство("ОтображаемыеЗаказы"              , ОтображаемыеЗаказы);
		СохраненныеЗначения.Свойство("ОграничитьВремя"                 , ОграничитьВремя);
		СохраненныеЗначения.Свойство("ОграничитьВремяС"                , ОграничитьВремяС);
		СохраненныеЗначения.Свойство("ОграничитьВремяПо"               , ОграничитьВремяПо);
		СохраненныеЗначения.Свойство("ОтображатьЗанятостьПомещений"    , ОтображатьЗанятостьПомещений);
		СохраненныеЗначения.Свойство("ВидСравненияПостроитель"         , ВидСравненияПостроитель);
	КонецЕсли;

	Если КоличествоДнейНаЗакладкеДень = 0 Тогда
		КоличествоДнейНаЗакладкеДень  = 2;
	КонецЕсли;

	Если КоличествоДнейНедели = 0 Тогда
		КоличествоДнейНедели = 7;
	КонецЕсли;

	Если ОтображаемыеЗаказы = 0 Тогда
		ОтображаемыеЗаказы = 3;
	КонецЕсли;

	ЗаполнитьПостроительОтчета();

КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ДоступностьПереключателейЗаказов();
	ДоступностьПараметровОграниченияВремени();
	
	Если УправлениеДопПравамиПользователей.РазрешитьИзменениеПользователяВКалендареПользователя() <> Истина Тогда
		ЭлементыФормы.Ответственные.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ОграничитьВремяС.ШиринаСпискаВыбора  = 7;
	ЭлементыФормы.ОграничитьВремяПо.ШиринаСпискаВыбора = 7;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.ОК.
//
Процедура ОсновныеДействияФормыОК(Кнопка)

	СтароеЗначение = ПользовательКалендаря.Скопировать();
	ПользовательКалендаря.Очистить();

	Для каждого ЗначениеОтбора из ПостроительОтчета.Отбор Цикл
		Если ЗначениеОтбора.Использование Тогда
			Если ТипЗнч(ЗначениеОтбора.Значение) = Тип("СписокЗначений") Тогда
				МассивЗначений = ЗначениеОтбора.Значение.ВыгрузитьЗначения();
				Для каждого Значение из МассивЗначений Цикл
					Если ЗначениеЗаполнено(Значение) Тогда
						ПользовательКалендаря.Добавить(Значение);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеОтбора.Значение) Тогда
				ПользовательКалендаря.Добавить(ЗначениеОтбора.Значение);
			КонецЕсли;
		КонецЕсли;
		ВидСравненияПостроитель = ЗначениеОтбора.ВидСравнения;
	КонецЦикла;

	Если ПользовательКалендаря.Количество()=0 Тогда
		ПользовательКалендаря = СтароеЗначение;
		ЗаполнитьПостроительОтчета();
		Предупреждение("Обязательно выберите пользователей календаря");
		Возврат;
	КонецЕсли;

	СтруктураСохраняемыхЗначений = Новый Структура;
	СтруктураСохраняемыхЗначений.Вставить("КоличествоДнейНаЗакладкеДень"    , КоличествоДнейНаЗакладкеДень);
	СтруктураСохраняемыхЗначений.Вставить("КоличествоДнейНедели"            , КоличествоДнейНедели);
	СтруктураСохраняемыхЗначений.Вставить("ОтображатьЗапланированныеСобытия", ОтображатьЗапланированныеСобытия);
	СтруктураСохраняемыхЗначений.Вставить("ТипСобытияКалендаря"             , ТипСобытияКалендаря);
	СтруктураСохраняемыхЗначений.Вставить("ОтображатьЗаказы"                , ОтображатьЗаказы);
	СтруктураСохраняемыхЗначений.Вставить("ОтображаемыеЗаказы"              , ОтображаемыеЗаказы);
	СтруктураСохраняемыхЗначений.Вставить("ОграничитьВремя"                 , ОграничитьВремя);
	СтруктураСохраняемыхЗначений.Вставить("ОграничитьВремяС"                , ОграничитьВремяС);
	СтруктураСохраняемыхЗначений.Вставить("ОграничитьВремяПо"               , ОграничитьВремяПо);
	СтруктураСохраняемыхЗначений.Вставить("ОтображатьЗанятостьПомещений"    , ОтображатьЗанятостьПомещений);
	СтруктураСохраняемыхЗначений.Вставить("ПользовательКалендаря"           , ПользовательКалендаря);
	СтруктураСохраняемыхЗначений.Вставить("ВидСравненияПостроитель"         , ВидСравненияПостроитель);

	СохранитьЗначение("КалендарьПользователя", СтруктураСохраняемыхЗначений);

	ЭтаФорма.Закрыть(Истина);

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОграничитьВремя.
//
Процедура ОграничитьВремяПриИзменении(Элемент)
	ДоступностьПараметровОграниченияВремени();
КонецПроцедуры

Процедура ОграничитьВремяПоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДлинаЧаса = 3600;
	
	СписокВремен = Новый СписокЗначений;
	
	а = 0;
	ВремяСписка = ОграничитьВремяС; 
	НачалоДня = НачалоЧаса(ОграничитьВремяС)+1;
	ОкончаниеДня = КонецДня(ОграничитьВремяС);
	Пока НачалоЧаса(ВремяСписка) < НачалоЧаса(ОкончаниеДня) Цикл
		ВремяСписка = НачалоДня + а * ДлинаЧаса;
		СписокВремен.Добавить(ВремяСписка, СокрЛП(Формат(ВремяСписка,"ДФ=ЧЧ")));
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(Элемент.Значение);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент);
	Иначе
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент,НачальноеЗначение);
	КонецЕсли; 
	
	Если ВыбранноеВремя <> Неопределено Тогда
		Элемент.Значение = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОграничитьВремяСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДлинаЧаса = 3600;
	
	СписокВремен = Новый СписокЗначений;
	
	а = 0;
	ВремяСписка = ОграничитьВремяС; 
	НачалоДня = НачалоДня(ОграничитьВремяС)+1;
	КонецДня  = ?(НЕ ЗначениеЗаполнено(ОграничитьВремяПо),КонецДня(ОграничитьВремяС),НачалоЧаса(ОграничитьВремяПо));
	Пока НачалоЧаса(ВремяСписка) < НачалоЧаса(КонецДня) Цикл
		ВремяСписка = НачалоДня + а * ДлинаЧаса;
		СписокВремен.Добавить(ВремяСписка, СокрЛП(Формат(ВремяСписка,"ДФ=ЧЧ")));
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(Элемент.Значение);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент);
	Иначе
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент,НачальноеЗначение);
	КонецЕсли; 
	
	Если ВыбранноеВремя <> Неопределено Тогда
		Элемент.Значение = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры

Процедура _1ДеньПриИзменении(Элемент)
	
	ДоступностьПереключателейЗаказов();
	
КонецПроцедуры

Процедура _2ДняПриИзменении(Элемент)
	
	ДоступностьПереключателейЗаказов();
	
КонецПроцедуры

Процедура ОтображатьЗаказыПриИзменении(Элемент)
	
	ДоступностьПереключателейЗаказов();
	
КонецПроцедуры