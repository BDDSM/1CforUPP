////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСтруктураНедоступныхОтборов Экспорт; 

Перем мСписокДоступныхСпособовРасчета;// Список недоступных для начисления способов расчета
Перем мСоответствиеДоходовИВычетов;
Перем мСписокКодовВычетов;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

// Диалог настройки периода
Перем мНастройкаПериода;

// Хранит имена табличной части "показатели" для каждой из закладок
Перем мСоответствиеЗакладокИНазванийТЧПоказателей;
Перем мСоответствиеЗакладокИТЧПоказателей;

Перем мСведенияОВидахРасчета;

Перем мСпВидовРасчета;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЕстьПоказателиДляВывода(ВидРасчета, Режим)
	
	ЕстьПоказатели = Ложь;
	
	Если Режим = "Плановые" Тогда
		
		СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(Новый Соответствие, ВидРасчета, "ПлановыеНачисления");
		
		Для СчПоказателей = 1 По 6 Цикл
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ЕстьПоказатели = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] И
				(Не ЗначениеЗаполнено(ВидРасчета) Или (НЕ ЗначениеЗаполнено(СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"]) 
				Или СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0 Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется) И ЗначениеЗаполнено(ВидРасчета));
				
				Если ЕстьПоказатели Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(Новый Соответствие, ВидРасчета, "РазовыеНачисленияИУдержания");
		
		Для СчПоказателей = 1 По 6 Цикл
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ЕстьПоказатели = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] И
				(Не ЗначениеЗаполнено(ВидРасчета) Или (НЕ ЗначениеЗаполнено(СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"]) 
				Или СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 0 Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно) И ЗначениеЗаполнено(ВидРасчета));
				
				Если ЕстьПоказатели Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЕстьПоказатели;

КонецФункции //ЕстьПоказателиДляВывода

Процедура УказатьВладельцаПолюПодразделения(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Элемент.ВыборПоВладельцу = ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение
	КонецЕсли;

КонецПроцедуры

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//  и для ввода типа отнесения расходов к ЕНВД
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ИмяЭУ = "")
	
	Если ИмяЭУ = "КодВычета" Тогда
		СтруктураПараметров = Новый Структура("Ссылка", мСписокКодовВычетов);
	ИначеЕсли ИмяЭУ = "ДополнительныеНачисления" Тогда
		СтруктураПараметров = Новый Структура("КодДоходаНДФЛ", ПроведениеРасчетов.ПолучитьСписокКодовДоходаДополнительныхНачислений());
	ИначеЕсли ИмяЭУ = "ОсновныеНачисления" Тогда
		МассивВидовВремени = Новый СписокЗначений;
	    Если ЭлементыФормы.ПанельСтраницы.Страницы[0].Имя = "РазовыеРасчеты" Тогда
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеСверхНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		Иначе
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
		КонецЕсли;
		СтруктураПараметров = Новый Структура("КодДоходаНДФЛ, ВидВремени, СпособРасчета", ПроведениеРасчетов.ПолучитьСписокКодовДоходаОсновныхНачислений(), МассивВидовВремени, мСписокДоступныхСпособовРасчета);
	ИначеЕсли ТипЗнч(ИмяЭУ) = Тип("ПеречислениеСсылка.ОтнесениеРасходовКДеятельностиЕНВД") Тогда
		СтруктураПараметров = Новый Структура("ОтнесениеРасходовКДеятельностиЕНВД", ИмяЭУ);
	Иначе
		СтруктураПараметров = Новый Структура();
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()()

Процедура ОбновитьСписокПраздничныхДнейМесяца()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Праздник",Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(ДатаАктуальности));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня = &Праздник
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	СписокПраздников = Новый СписокЗначений; 			   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПраздников.Добавить(Выборка.ДатаКалендаря, Формат(Выборка.ДатаКалендаря, "ДФ='d ММММ'"));
	КонецЦикла;    
	ЭлементыФормы.ДатаПраздника.СписокВыбора = СписокПраздников;
	ЭлементыФормы.ДатаПраздника.ВысотаСпискаВыбора = СписокПраздников.Количество();

КонецПроцедуры

Функция СформироватьСписокПричинНевыхода(СпособРегистрацииВремени)

	СписокПричинНевыхода = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НулеваяСумма", Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	(НЕ ОсновныеНачисления.Предопределенный)
	|	И ОсновныеНачисления.СпособРасчета В(&НулеваяСумма)
	|	И ОсновныеНачисления.ВидВремени = &ВидВремени";
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		
		Запрос.УстановитьПараметр("ВидВремени", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		СписокПричинНевыхода.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
		СписокПричинНевыхода.Вставить(0,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет);
		СписокПричинНевыхода.Вставить(1,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход);
		СписокПричинНевыхода.Вставить(2,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);
		СписокПричинНевыхода.Вставить(3,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
		СписокПричинНевыхода.Вставить(4,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыПоТКРФ);
		
	Иначе // здесь только почасовые невыходы
		
		Запрос.УстановитьПараметр("ВидВремени", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
		СписокПричинНевыхода.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
		
	КонецЕсли;
	
	Возврат СписокПричинНевыхода
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	Если ЭлементыФормы.ПанельСтраницы.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		Возврат
	КонецЕсли;
	
	СтраницаДокумента = ЭлементыФормы.ПанельСтраницы.Страницы[0];
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	ДатаНачала		= НачалоМесяца(ДатаАктуальности);
	ДатаОкончания	= КонецМесяца(ДатаАктуальности);
	
	Если СтраницаДокумента.Имя = "НевыходыВОрганизацияхДляЦелойСмены" Тогда
		ЭлементыФормы.ВидРасчетаЦелосменныйНевыход.СписокВыбора = СформироватьСписокПричинНевыхода(Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены);
	ИначеЕсли СтраницаДокумента.Имя = "НевыходыВОрганизацияхДляЧастиСмены" Тогда
		ЭлементыФормы.ВидРасчетаВнутрисменныйНевыход.СписокВыбора = СформироватьСписокПричинНевыхода(Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены);
	ИначеЕсли СтраницаДокумента.Имя = "РазовыеДополнительныеНачисления" Тогда
		// Ограничим возможности выбора кодов вычета
		мСписокКодовВычетов = ПроведениеРасчетов.ПолучитьСписокВычетовКДоходам();
		ЭлементыФормы.КодВычета.ВысотаСпискаВыбора = мСписокКодовВычетов.Количество();
		ЭлементыФормы.КодВычета.ШиринаСпискаВыбора = 40;
		
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2761,Справочники.ВычетыНДФЛ.Код506);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка,Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2720,Справочники.ВычетыНДФЛ.Код501);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2730,Справочники.ВычетыНДФЛ.Код502);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2740,Справочники.ВычетыНДФЛ.Код505);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2760,Справочники.ВычетыНДФЛ.Код503);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2770,Справочники.ВычетыНДФЛ.Код504);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2790,Справочники.ВычетыНДФЛ.Код507);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2201,Справочники.ВычетыНДФЛ.Код405);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2202,Справочники.ВычетыНДФЛ.Код405);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2203,Справочники.ВычетыНДФЛ.Код405);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2204,Справочники.ВычетыНДФЛ.Код405);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2205,Справочники.ВычетыНДФЛ.Код405);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2206,Справочники.ВычетыНДФЛ.Код405);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2207,Справочники.ВычетыНДФЛ.Код405);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2208,Справочники.ВычетыНДФЛ.Код405);
		мСоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2209,Справочники.ВычетыНДФЛ.Код405);
		
	ИначеЕсли (СтраницаДокумента.Имя = "РазовыеРасчеты" Или СтраницаДокумента.Имя = "РазовыеРасчетыДляЧастиСмены") и ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		
		СписокНеДоступныхСпособовРасчета = ПроведениеРасчетов.ПолучитьСписокНачисленийПоСреднемуЗаработку();
		СписокНеДоступныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет);
		СписокНеДоступныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет);

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыРасчетаОплатыТруда.Ссылка
		|ИЗ
		|	Перечисление.СпособыРасчетаОплатыТруда КАК СпособыРасчетаОплатыТруда
		|ГДЕ
		|	(НЕ СпособыРасчетаОплатыТруда.Ссылка В (&Ссылка))";
		Запрос.УстановитьПараметр("Ссылка", СписокНеДоступныхСпособовРасчета);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			мСписокДоступныхСпособовРасчета.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	ИначеЕсли СтраницаДокумента.Имя = "ОплатаПраздничныхИВыходныхДнейОрганизаций" Тогда
		
		ОбновитьСписокПраздничныхДнейМесяца();
		
		ЭлементыФормы.ПанельСтраницы.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ОсновныеДействияФормы,ГраницаЭлементаУправления.Низ,ЭлементыФормы.ДатаАктуальности, ГраницаЭлементаУправления.Верх);
		ТекущаяВысотаФормы = ЭтаФорма.Высота;
		Если ТекущаяВысотаФормы < 400 Тогда
			ЭтаФорма.Высота = 400;
		КонецЕсли; 
		
	ИначеЕсли СтраницаДокумента.Имя = "ПереносЗадолженности" Тогда
		// Заполним реквизит формы МесяцСтрока
		МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодВозникновения);
	КонецЕсли;
	
	Если ВидРасчета <> Неопределено Тогда
		Если СтраницаДокумента.Имя = "ПостоянныеНачисления" Или СтраницаДокумента.Имя = "РазовыеРасчеты" Или СтраницаДокумента.Имя = "РазовыеДополнительныеНачисления" Или СтраницаДокумента.Имя = "РазовыеУдержания" Или СтраницаДокумента.Имя = "ПремииРаботниковОрганизаций" Тогда
			СтрокаПоказателей = мСоответствиеЗакладокИТЧПоказателей[СтраницаДокумента.Имя].Добавить();
			Для Сч = 1 По 6 Цикл
				СтрокаПоказателей["Показатель"+Сч] = Реквизиты["Показатель"+Сч];
			КонецЦикла;
		Иначе
			Если ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
				ЭлементыФормы.ПанельСтраницы.Свертка = РежимСверткиЭлементаУправления.Верх;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	

	Если СтраницаДокумента.Имя = "ПостоянныеНачисления" Или СтраницаДокумента.Имя = "РазовыеРасчеты" Или СтраницаДокумента.Имя = "РазовыеДополнительныеНачисления" Или СтраницаДокумента.Имя = "РазовыеУдержания" Или СтраницаДокумента.Имя = "ПремииРаботниковОрганизаций" Тогда
		
		Если СтраницаДокумента.Имя = "ПостоянныеНачисления" Тогда 
			Режим = "Плановые"
		Иначе
			Режим = "Ежемесячные"
		КонецЕсли;
		
		// у разовых начислений вид расчета выбирается в этой форме, поэтому панель никогда не сворачиваем
		Разовые = СтраницаДокумента.Имя = "РазовыеРасчеты" Или СтраницаДокумента.Имя = "РазовыеДополнительныеНачисления" Или СтраницаДокумента.Имя = "РазовыеУдержания";
		
		ЕстьПоказатели = ЕстьПоказателиДляВывода(Реквизиты.ВидРасчета, Режим);
		
		Сварачивать = ЕстьПоказатели Или Разовые;;

		Если Сварачивать Тогда
			Если глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций") Тогда
				Если ПостроительОтчета.Отбор.Найти("ОбособленноеПодразделение") <> Неопределено Тогда
					// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
					мМассивЭУ = Новый Массив();
					Для Сч = 1 По 6 Цикл
						мМассивЭУ.Добавить(ЭлементыФормы[мСоответствиеЗакладокИНазванийТЧПоказателей[СтраницаДокумента.Имя]].Колонки["Валюта"+Сч]);
					КонецЦикла;
					
					РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение);
				КонецЕсли;
				
				СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(Новый Соответствие, Реквизиты.ВидРасчета);
				КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
				Для СчПоказателей = 1 По Мин(КоличествоПоказателей, 6) Цикл
					ЭлементыФормы[мСоответствиеЗакладокИНазванийТЧПоказателей[СтраницаДокумента.Имя]].Колонки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
				КонецЦикла;
			Иначе
				Для Сч = 1 По 6 Цикл
					ЭлементыФормы[мСоответствиеЗакладокИНазванийТЧПоказателей[СтраницаДокумента.Имя]].Колонки["Валюта"+Сч].Видимость = Ложь;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ЭлементыФормы.ПанельСтраницы.Свертка = РежимСверткиЭлементаУправления.Низ;
		КонецЕсли;
	КонецЕсли;
	
	//Для тех мест где не заполнили реквизит "ЗаполнятьПоказателиАвтоматически" установим его значение равным Истина
	СвойствоЗаполнятьПоказателиАвтоматически = Неопределено;
	Реквизиты.Свойство("ЗаполнятьПоказателиАвтоматически", СвойствоЗаполнятьПоказателиАвтоматически);
	Если СвойствоЗаполнятьПоказателиАвтоматически = Неопределено Тогда
		ЗаполнятьПоказателиАвтоматически = Истина;
	КонецЕсли;
	
	НадписьЗаполнятьПоказателиАвтоматическиНажатие();
	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КнопкаВыполнитьНажатие()
	
	Если Реквизиты <> Неопределено Тогда
		ИмяТекущейСтраници = ЭлементыФормы.ПанельСтраницы.ТекущаяСтраница.Имя;
		ЗаполнитьЗначенияСвойств(Реквизиты,ЭтаФорма);
		ИмяТекущейСтраници = ЭлементыФормы.ПанельСтраницы.ТекущаяСтраница.Имя;
		Если ИмяТекущейСтраници = "ПремииРаботниковОрганизаций" Или ИмяТекущейСтраници = "РазовыеРасчеты" Или ИмяТекущейСтраници = "РазовыеДополнительныеНачисления"
			Или ИмяТекущейСтраници = "РазовыеУдержания" Или ИмяТекущейСтраници = "ПостоянныеНачисления" Тогда 
			
			Для Сч = 1 По 6 Цикл
				Реквизиты["Показатель"+Сч] = мСоответствиеЗакладокИТЧПоказателей[ИмяТекущейСтраници][0]["Показатель"+Сч];
				Если ИмяТекущейСтраници = "ПостоянныеНачисления" Тогда
					Реквизиты["Валюта"+Сч] = мСоответствиеЗакладокИТЧПоказателей[ИмяТекущейСтраници][0]["Валюта"+Сч];
					Если ТипЗнч(Реквизиты.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
						Реквизиты["ТарифныйРазряд"+Сч] = Показатели[0]["ТарифныйРазряд"+Сч];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	СтруктураВыбора = ПолучитьСписокРаботников();
	СтруктураВыбора.Вставить("ДатаАктуальности",ДатаАктуальности);
	
	ОповеститьОВыборе(СтруктураВыбора);
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает использование всех отборов
//
Процедура КоманднаяПанельОтборУстановитьФлажки(Кнопка)
	Для Каждого Отбор Из ПостроительОтчета.Отбор Цикл
		Если Найти(Отбор.ПутьКДанным,".") <> 0 Или Не мСтруктураНедоступныхОтборов.Свойство(Отбор.ПутьКДанным) Тогда
			Отбор.Использование = Истина
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура КоманднаяПанельОтборСнятьФлажки(Кнопка)
	Для Каждого Отбор Из ПостроительОтчета.Отбор Цикл
		Если Найти(Отбор.ПутьКДанным,".") <> 0 Или Не мСтруктураНедоступныхОтборов.Свойство(Отбор.ПутьКДанным) Тогда
			Отбор.Использование = Ложь
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода.
//
Процедура ВыбПериодНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(ДатаНачала, КонецДня(ДатаОкончания));
	
	Если мНастройкаПериода.Редактировать() Тогда
		ДатаНачала		= мНастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончания	= мНастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры // ВыбПериодНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ДатаАктуальностиПриИзменении(Элемент)
	
	Если ЭлементыФормы.ПанельСтраницы.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		Возврат
	КонецЕсли;
	
	СтраницаДокумента = ЭлементыФормы.ПанельСтраницы.Страницы[0];
	
	Если СтраницаДокумента.Имя = "ОплатаПраздничныхИВыходныхДнейОрганизаций" Тогда
		ОбновитьСписокПраздничныхДнейМесяца();
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключатьУволенныхПриИзменении(Элемент)
	ЗаполнитьНачальныеНастройки(Ложь);
КонецПроцедуры

Процедура ТабличноеПолеОтборПередУдалением(Элемент, Отказ)
	ИмяОтбора = Элемент.ТекущиеДанные.ПутьКДанным;
	Отказ = ЗначениеЗаполнено(ИмяОтбора) И Найти(ИмяОтбора,".") = 0 И мСтруктураНедоступныхОтборов.Свойство(ИмяОтбора);
КонецПроцедуры

Процедура ТабличноеПолеОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ИмяОтбора = ДанныеСтроки.ПутьКДанным;
	Если ЗначениеЗаполнено(ИмяОтбора) И Найти(ИмяОтбора,".") = 0 И мСтруктураНедоступныхОтборов.Свойство(ИмяОтбора) Тогда
		ОформлениеСтроки.Ячейки.Использование.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Имя.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ВидСравнения.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПолеОтборИмяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Или Найти(ВыбранноеЗначение,".") <> 0 Или Не мСтруктураНедоступныхОтборов.Свойство(ВыбранноеЗначение);
	Если Не СтандартнаяОбработка Тогда
		Предупреждение("Отбор по " + ?(ВыбранноеЗначение = "ОбособленноеПодразделение","организации","подразделению") + " уже установлен!");
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПолеОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отборы по свойствам и категориям должны быть обработаны специальным образом
	// Они определяются по представлению 
	Если Найти(НРег(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление), "категории") Тогда

		// Ограничение списка категорий
		Назначение = мСоответствиеНазначений.Получить(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление);

		УправлениеОтчетами.ОсуществитьВыборКатегории(Элемент, Назначение, ЭтаФорма, СтандартнаяОбработка);

	ИначеЕсли Найти(НРег(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление), "св-во") Тогда

		Свойство = мСоответствиеНазначений.Получить(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление);

		УправлениеОтчетами.ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);

	ИначеЕсли ВыбиратьСотрудника И ИмяРегистра = "РаботникиОрганизаций" И ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Имя = "Работник" И ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, ЭтотОбъект, Истина, ДатаАктуальности, ОбщегоНазначения.ГоловнаяОрганизация(ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение), 0, СтандартнаяОбработка, Элемент.Значение, Ложь);
		
	КонецЕсли;
	
	УказатьВладельцаПолюПодразделения(Элемент)
	
КонецПроцедуры

Процедура ТабличноеПолеОтборЗначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Если ВыбиратьСотрудника И ИмяРегистра = "РаботникиОрганизаций" И ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Имя = "Работник" Тогда
		ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 5, Текст, ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение);
	КонецЕсли;

	УказатьВладельцаПолюПодразделения(Элемент)
	
КонецПроцедуры

Процедура ТабличноеПолеОтборЗначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если ВыбиратьСотрудника И ИмяРегистра = "РаботникиОрганизаций" И ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Имя = "Работник" Тогда
		Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 5, Элемент.Значение, ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение);
	КонецЕсли;
	
	УказатьВладельцаПолюПодразделения(Элемент)
	
КонецПроцедуры

Процедура ПоказателиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Истина, ВидРасчета);

КонецПроцедуры

Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина
КонецПроцедуры

Процедура ПоказателиРазовыхРасчетовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ОбработатьОтображениеПоказателейДляРасчета(Элемент, ОформленияСтрок, мСведенияОВидахРасчета, "РазовыеНачисленияИУдержания", ВидРасчета);
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета, "РазовыеНачисленияИУдержания");
	
	Если ОформленияСтрок[0].Ячейки.Найти("Валюта1") <> Неопределено Тогда
		Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			Для СчПоказателей = 1 По 6 Цикл
				Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
					ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = СведенияОВидеРасчета["Валюта"+СчПоказателей+"Видимость"];
				Иначе
					ОформлениеСтроки.Ячейки["Валюта" + СчПоказателей].Видимость = Ложь
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьЗаполнятьПоказателиАвтоматическиНажатие()
	ИмяТекущейСтраници = ЭлементыФормы.ПанельСтраницы.ТекущаяСтраница.Имя;
	
	ЗаполнятьПоказателиАвтоматически = Не ЗаполнятьПоказателиАвтоматически;
	
	Если ЗаполнятьПоказателиАвтоматически Тогда
		КнопкаВыполнитьНажатие();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// страницы документов

// Процедура - обработчик события "НачалоВыбора" поля ввода вида расчета
Процедура ОсновнойВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Элемент.Значение) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
		ФормаВыбораВидаРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент);
		
		
		Если мСпВидовРасчета = Неопределено ТОгда
			// Заполним список доступных видов удержаний
			мСпВидовРасчета = Новый СписокЗначений;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	УдержанияОрганизаций.Ссылка
			|ИЗ
			|	ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
			|ГДЕ
			|	УдержанияОрганизаций.Предопределенный");
			
			мСпВидовРасчета.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
		
		ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
		ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = мСпВидовРасчета;
		ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = ИСТИНА;

	Иначе
		//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
		ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляФормыОтбораРаботников");
		
		МассивВидовВремени = Новый СписокЗначений;
		Если ЭлементыФормы.ПанельСтраницы.Страницы[0].Имя = "РазовыеРасчеты" Тогда
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеСверхНормы);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		Иначе
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
		КонецЕсли;
		
		ФормаВыбораВидаРасчета.Отбор.ВидВремени.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбораВидаРасчета.Отбор.ВидВремени.Значение = МассивВидовВремени;
		ФормаВыбораВидаРасчета.Отбор.ВидВремени.Использование = Истина;
		
		ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = мСписокДоступныхСпособовРасчета;
		ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;
		
		ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Значение = ПроведениеРасчетов.ПолучитьСписокКодовДоходаОсновныхНачислений();
		ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Использование = Истина;
		
	КонецЕсли;
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
Процедура ОсновнойВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	Если ТипЗнч(Элемент.Значение) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		 Возврат
	КонецЕсли;
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ОсновныеНачисления"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

Процедура ОсновнойВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	Если ТипЗнч(Элемент.Значение) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		 Возврат
	КонецЕсли;
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ОсновныеНачисления"), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
КонецПроцедуры

Процедура ДополнительныйВидРасчетаПриИзменении(Элемент)
	КодВычета = мСоответствиеДоходовИВычетов[Элемент.Значение.КодДоходаНДФЛ];

	ПоказателиРазовыхРасчетовДополнительные.Очистить();
	СтрокаПоказателей = ПоказателиРазовыхРасчетовДополнительные.Добавить();
	Для Сч = 1 По 6 Цикл
		СтрокаПоказателей["Показатель"+Сч] = Реквизиты["Показатель"+Сч];
	КонецЦикла;

КонецПроцедуры

Процедура ДополнительныйВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		 Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "ПодборВыбор");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Значение = ПроведениеРасчетов.ПолучитьСписокКодовДоходаДополнительныхНачислений();
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Использование = Истина;
	
	ФормаВыбораВидаРасчета.Открыть();
КонецПроцедуры

Процедура ДополнительныйВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ДополнительныеНачисления"), Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"));
КонецПроцедуры

Процедура ДополнительныйВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ДополнительныеНачисления"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода кода вычета по НДФЛ к доходу
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура КодВычетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокКодовВычетов,Элемент,мСписокКодовВычетов.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение
	КонецЕсли;
КонецПроцедуры

Процедура КодВычетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("КодВычета"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры

Процедура КодВычетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("КодВычета"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

Процедура ВидРасчетаНевыходНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля РаспределениеНачислений
Процедура РаспределениеНачисленийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ДанныеСтроки.ПодпадаетПодЕНВД = ?(ДанныеСтроки.ПодпадаетПодЕНВД = Неопределено, Ложь, ДанныеСтроки.ПодпадаетПодЕНВД);
	ОформлениеСтроки.Ячейки.СчетДт.ТолькоПросмотр = Не ДанныеСтроки.ПодпадаетПодЕНВД;
	
КонецПроцедуры

// Процедура - обработчик события "ПередОкончаниемРедактирования" строки ТЧ
Процедура РаспределениеНачисленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущаяКолонка.Имя = "ПодпадаетПодЕНВД" И НЕ Элемент.ТекущиеДанные.ПодпадаетПодЕНВД Тогда
		Элемент.ТекущиеДанные.СчетДт = ПланыСчетов.Хозрасчетный.ПустаяСсылка();	
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределениеНачисленийСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодВозникновения);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодВозникновения);
	
КонецПроцедуры // ПериодВозникновенияПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодВозникновения = ДобавитьМесяц(ПериодВозникновения, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодВозникновения);
	
КонецПроцедуры // ПериодВозникновенияРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодВозникновенияОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодВозникновения, ЭтаФорма);
	
КонецПроцедуры // ПериодВозникновенияНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодВозникновенияАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодВозникновенияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодВозникновенияОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля "ОсновнойВидРасчета1".
//
Процедура ОсновнойВидРасчета1ПриИзменении(Элемент)
	
	ПоказателиРазовыхУдержаний.Очистить();
	СтрокаПоказателей = ПоказателиРазовыхУдержаний.Добавить();
	Для Сч = 1 По 6 Цикл
		СтрокаПоказателей["Показатель"+Сч] = Реквизиты["Показатель"+Сч];
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ОсновнойВидРасчета".
//
Процедура ОсновнойВидРасчетаПриИзменении(Элемент)
	
	ПоказателиРазовыхРасчетов.Очистить();
	СтрокаПоказателей = ПоказателиРазовыхРасчетов.Добавить();
	Для Сч = 1 По 6 Цикл
		СтрокаПоказателей["Показатель"+Сч] = Реквизиты["Показатель"+Сч];
	КонецЦикла;

КонецПроцедуры

Процедура СчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНастройкаПериода = Новый НастройкаПериода;

мСтруктураНедоступныхОтборов = Новый Структура;
мСписокДоступныхСпособовРасчета = Новый СписокЗначений;

// Устанавливаем соответствие доходов и положенных по ним вычетов для целей исчисления НДФЛ
мСоответствиеДоходовИВычетов = Новый Соответствие;

мОбработкаПодбораПоСтроке                 = Ложь;
мТекстПодбораПоСтроке                     = "";
мПоследнееЗначениеЭлементаПодбораПоСтроке = Неопределено;


мСоответствиеЗакладокИНазванийТЧПоказателей = Новый Соответствие;
мСоответствиеЗакладокИНазванийТЧПоказателей.Вставить("ПостоянныеНачисления", "Показатели");
мСоответствиеЗакладокИНазванийТЧПоказателей.Вставить("РазовыеРасчеты", "ПоказателиРазовыхРасчетов");
мСоответствиеЗакладокИНазванийТЧПоказателей.Вставить("РазовыеДополнительныеНачисления", "ПоказателиРазовыхРасчетовДополнительные");
мСоответствиеЗакладокИНазванийТЧПоказателей.Вставить("РазовыеУдержания", "ПоказателиРазовыхУдержаний");
мСоответствиеЗакладокИНазванийТЧПоказателей.Вставить("ПремииРаботниковОрганизаций", "ПоказателиПремии");

мСоответствиеЗакладокИТЧПоказателей = Новый Соответствие;
мСоответствиеЗакладокИТЧПоказателей.Вставить("ПостоянныеНачисления", Показатели);
мСоответствиеЗакладокИТЧПоказателей.Вставить("РазовыеРасчеты", ПоказателиРазовыхРасчетов);
мСоответствиеЗакладокИТЧПоказателей.Вставить("РазовыеДополнительныеНачисления", ПоказателиРазовыхРасчетовДополнительные);
мСоответствиеЗакладокИТЧПоказателей.Вставить("РазовыеУдержания", ПоказателиРазовыхУдержаний);
мСоответствиеЗакладокИТЧПоказателей.Вставить("ПремииРаботниковОрганизаций", ПоказателиПремии);

мСведенияОВидахРасчета = Новый Соответствие;