///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мИспользоватьХарактеристики;
Перем мИспользоватьСерии;
Перем мСписокТерминалов;
Перем мПустаяХарактеристика;
Перем мПустаяСерия;

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "ДействияФормы"

// Процедура - обработчик события "ПриНажатии" кнопки "Заполнить"
// командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)

	Перем Запрос;
	Перем СтрокаОтбора;
	Перем Товар;
	Перем Число;
	Перем ШК;
	Перем Префикс;
	Перем ДлинаКода;
	Перем Вес;
	Перем Индекс;
	Перем МаксЗнач;
	Перем Цена;
	Перем Дата;

	Если ЭлементыФормы.ФлажокНастройкиГруппа.Значение
	     И ЭлементыФормы.ПолеВидаСравненияГруппа.Значение = Неопределено Тогда
		ЭлементыФормы.ФлажокНастройкиГруппа.Значение = Ложь;
	КонецЕсли;

	Если ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение
	     И ЭлементыФормы.ПолеВидаСравненияНоменклатура.Значение = Неопределено Тогда
		ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение = Ложь;
	КонецЕсли;

	Если ЭлементыФормы.ФлажокНастройкиСклад.Значение
	     И ЭлементыФормы.ПолеВидаСравненияСклад.Значение = Неопределено Тогда
		ЭлементыФормы.ФлажокНастройкиСклад.Значение = Ложь;
	КонецЕсли;

	Если ЭлементыФормы.ФлажокНастройкиТипЦен.Значение
	     И ЭлементыФормы.ПолеВидаСравненияТипЦен.Значение = Неопределено Тогда
		ЭлементыФормы.ФлажокНастройкиТипЦен.Значение = Ложь;
	КонецЕсли;

	Запрос = Новый Запрос(
	// Основная часть запроса
	"ВЫБРАТЬ
	|   ВЫБОР
	|      КОГДА СпрЦены.Ссылка = СпрСклады.ТипЦенРозничнойТорговли ТОГДА
	|         ИСТИНА
	|      ИНАЧЕ
	|         ЛОЖЬ
	|   КОНЕЦ                                               КАК Выгружать,
	|   ПзШтрихКоды.КодНоменклатуры                         КАК КодНоменклатуры,
	|   ПзШтрихКоды.НоменклатурнаяГруппа                    КАК НоменклатурнаяГруппа,
	|   ПзШтрихКоды.Номенклатура                            КАК Номенклатура,
	|   ПзШтрихКоды.Штрихкод                                КАК Штрихкод,"
	// Обработка использования характеристик
	+ ?(мИспользоватьХарактеристики,
	    "
	    |   ПзШтрихКоды.Характеристика                          КАК Характеристика,",
	    "") +
	// Продолжение основной части запроса
	"
	|   ПзШтрихКоды.ЕдиницаИзмерения                        КАК ЕдиницаИзмерения,
	|   ПзШтрихКоды.Артикул                                 КАК Артикул,"
	// Обработка использования серий
	+ ?(мИспользоватьСерии,
	    "
	    |   ПзШтрихКоды.Серия                                   КАК Серия,",
	    ""
	) +
	// Продолжение основной части запроса
	"
	|   ПзШтрихКоды.Качество                                КАК Качество,
	|   ВЫБОР
	|      КОГДА СпрСклады.ВидСклада = &НТТ ТОГДА
	|         ВЫБОР
	|            КОГДА РегОстаткиНТТ.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|               0
	|            ИНАЧЕ
	|               РегОстаткиНТТ.КоличествоОстаток
	|         КОНЕЦ
	|      КОГДА СпрСклады.ВидСклада = &Розничный ТОГДА
	|         ВЫБОР
	|            КОГДА РегОстаткиВРознице.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|               0
	|            ИНАЧЕ
	|               РегОстаткиВРознице.КоличествоОстаток
	|         КОНЕЦ
	|      ИНАЧЕ
	|         ВЫБОР
	|            КОГДА РегОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|               0
	|            ИНАЧЕ
	|               РегОстатки.КоличествоОстаток
	|         КОНЕЦ
	|   КОНЕЦ                                               КАК Количество,
	|   СпрЦены.Ссылка                                      КАК ТипЦен,
	|   0                                                   КАК Цена,
	|   СпрСклады.Ссылка                                    КАК Склад
	|ИЗ
	|   (
	|   ВЫБРАТЬ
	|      РегШК.Владелец.Код                               КАК КодНоменклатуры,
	|      РегШК.Владелец.НоменклатурнаяГруппа              КАК НоменклатурнаяГруппа,
	|      РегШК.Владелец                                   КАК Номенклатура,
	|      РегШК.Штрихкод                                   КАК Штрихкод,"
	// Обработка использования характеристик
	+ ?(мИспользоватьХарактеристики,
	    "
	    |      РегШК.ХарактеристикаНоменклатуры                 КАК Характеристика,",
	    ""
	) +
	// Продолжение основной части запроса
	"
	|      РегШК.ЕдиницаИзмерения                           КАК ЕдиницаИзмерения,
	|      РегШК.Владелец.Артикул                           КАК Артикул,"
	// Обработка использования серий
	+ ?(мИспользоватьСерии,
	    "
	    |      РегШК.СерияНоменклатуры                          КАК Серия,",
	    ""
	) +
	// Продолжение основной части запроса
	"
	|      РегШК.Качество                                   КАК Качество
	|   ИЗ
	|      РегистрСведений.Штрихкоды                        КАК РегШК
	|      ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|         Справочник.Номенклатура                       КАК СпрНоменклатура
	|         ПО РегШК.Владелец = СпрНоменклатура.Ссылка
	|   ОБЪЕДИНИТЬ ВСЕ
	|   ВЫБРАТЬ
	|      РегКоды.Номенклатура.Код                         КАК КодНоменклатуры,
	|      РегКоды.Номенклатура.НоменклатурнаяГруппа        КАК НоменклатурнаяГруппа,
	|      РегКоды.Номенклатура                             КАК Номенклатура,
	|      РегКоды.Код                                      КАК Штрихкод,"
	// Обработка использования характеристик
	+ ?(мИспользоватьХарактеристики,
	    "
	    |      РегКоды.ХарактеристикаНоменклатуры               КАК Характеристика,",
	    ""
	) +
	// Продолжение основной части запроса
	"
	|      РегКоды.Номенклатура.ЕдиницаХраненияОстатков     КАК ЕдиницаИзмерения,
	|      РегКоды.Номенклатура.Артикул                     КАК Артикул,"
	// Обработка использования серий
	+ ?(мИспользоватьСерии,
	    "
	    |      РегКоды.СерияНоменклатуры                        КАК Серия,",
	    ""
	) +
	// Продолжение основной части запроса
	"
	|      РегКоды.Качество                                 КАК Качество
	|   ИЗ
	|      РегистрСведений.КодыВесовогоТовара КАК РегКоды
	|   )                                                   КАК ПзШтрихКоды
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|      Справочник.Склады                                КАК СпрСклады
	|      ПО СпрСклады.ЭтоГруппа = Ложь
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|      Справочник.ТипыЦенНоменклатуры                   КАК СпрЦены
	|      ПО ИСТИНА
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|      РегистрНакопления.ТоварыНаСкладах.Остатки()      КАК РегОстатки
	|      ПО РегОстатки.Номенклатура = ПзШтрихКоды.Номенклатура"
	// Обработка использования характеристик
	+ ?(мИспользоватьХарактеристики,
	    "
	    |         И РегОстатки.ХарактеристикаНоменклатуры = ПзШтрихКоды.Характеристика",
	    "
	    |         И РегОстатки.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)"
	)
	// Обработка использования серий
	+ ?(мИспользоватьСерии,
	    "
	    |         И РегОстатки.СерияНоменклатуры = ПзШтрихКоды.Серия",
	    "
	    |         И РегОстатки.СерияНоменклатуры = &ПустаяСерия"
	) +
	// Продолжение основной части запроса
	"
	|         И РегОстатки.Качество = ПзШтрихКоды.Качество
	|         И РегОстатки.Склад = СпрСклады.Ссылка
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|      РегистрНакопления.ТоварыВНТТ.Остатки() КАК РегОстаткиНТТ
	|      ПО РегОстаткиНТТ.Номенклатура = ПзШтрихКоды.Номенклатура"
	// Обработка использования характеристик
	+ ?(мИспользоватьХарактеристики,
	    "
	    |         И РегОстаткиНТТ.ХарактеристикаНоменклатуры = ПзШтрихКоды.Характеристика",
	    "
	    |         И РегОстаткиНТТ.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)"
	)
	// Обработка использования серий
	+ ?(мИспользоватьСерии,
	    "
	    |         И РегОстаткиНТТ.СерияНоменклатуры = ПзШтрихКоды.Серия",
	    "
	    |         И РегОстаткиНТТ.СерияНоменклатуры = &ПустаяСерия"
	) +
	// Продолжение основной части запроса
	"
	|         И РегОстаткиНТТ.Склад = СпрСклады.Ссылка
	
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|      РегистрНакопления.ТоварыВРознице.Остатки() КАК РегОстаткиВРознице
	|      ПО РегОстаткиВРознице.Номенклатура = ПзШтрихКоды.Номенклатура"
	// Обработка использования характеристик
	+ ?(мИспользоватьХарактеристики,
	    "
	    |         И РегОстаткиВРознице.ХарактеристикаНоменклатуры = ПзШтрихКоды.Характеристика",
	    "
	    |         И РегОстаткиВРознице.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)"
	)
	// Обработка использования серий
	+ ?(мИспользоватьСерии,
	    "
	    |         И РегОстаткиВРознице.СерияНоменклатуры = ПзШтрихКоды.Серия",
	    "
	    |         И РегОстаткиВРознице.СерияНоменклатуры = &ПустаяСерия"
	) +
	// Продолжение основной части запроса
	"
	|         И РегОстаткиВРознице.Склад = СпрСклады.Ссылка
	
	|ГДЕ
	|   ПзШтрихКоды.Номенклатура.ПометкаУдаления = Ложь");
	Запрос.УстановитьПараметр("НТТ", Перечисления.ВидыСкладов.НТТ);
	Запрос.УстановитьПараметр("Розничный", Перечисления.ВидыСкладов.Розничный);
	Если Не мИспользоватьСерии Тогда
		Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	Если ЭлементыФормы.ФлажокНастройкиГруппа.Значение Тогда
		Запрос.Текст = Запрос.Текст + "
		|   И ПзШтрихКоды.НоменклатурнаяГруппа" + ПолучитьСтрокуЗапроса(ЭлементыФормы.ПолеВидаСравненияГруппа.Значение,
		                                                               "&Группа");
		Запрос.УстановитьПараметр("Группа", ЭлементыФормы.ПолеНастройкиГруппа.Значение);
	КонецЕсли;
	Если ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение Тогда
		Запрос.Текст = Запрос.Текст + "
		|   И ПзШтрихКоды.Номенклатура" + ПолучитьСтрокуЗапроса(ЭлементыФормы.ПолеВидаСравненияНоменклатура.Значение,
		                                                               "&Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", ЭлементыФормы.ПолеНастройкиНоменклатура.Значение);
	КонецЕсли;
	Если ЭлементыФормы.ФлажокНастройкиСклад.Значение Тогда
		Запрос.Текст = Запрос.Текст + "
		|   И СпрСклады.Ссылка" + ПолучитьСтрокуЗапроса(ЭлементыФормы.ПолеВидаСравненияСклад.Значение,
		                                                "&Склад");
		Запрос.УстановитьПараметр("Склад", ЭлементыФормы.ПолеНастройкиСклад.Значение);
	КонецЕсли;
	Если ЭлементыФормы.ФлажокНастройкиТипЦен.Значение Тогда
		Запрос.Текст = Запрос.Текст + "
		|   И СпрЦены.Ссылка" + ПолучитьСтрокуЗапроса(ЭлементыФормы.ПолеВидаСравненияТипЦен.Значение,
		                                                               "&ТипЦен");
		Запрос.УстановитьПараметр("ТипЦен", ЭлементыФормы.ПолеНастройкиТипЦен.Значение);
	КонецЕсли;
	СписокТоваров = Запрос.Выполнить().Выгрузить();
	Число         = Тип("Число");
	Префикс       = "2" + Константы.ПрефиксВесовогоТовара.Получить();
	ДлинаКода     = Константы.ДлинаКодаВесовогоТовара.Получить();
	МаксЗнач      = 10 - ДлинаКода;
	Вес           = "";
	Для Индекс = 1 По МаксЗнач Цикл
		Вес = Вес + "0";
	КонецЦикла;
	ДлинаКода     = Формат(ДлинаКода, "ЧГ=0");
	Дата          = ТекущаяДата();
	Для Каждого Товар Из СписокТоваров Цикл
		Товар.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Товар.Номенклатура,
		                                      ?(мИспользоватьХарактеристики, Товар.Характеристика, Неопределено),
		                                      Товар.ТипЦен,
		                                      Дата,
		                                      Товар.ЕдиницаИзмерения);
		Если ТипЗнч(Товар.Штрихкод) <> Число Тогда
			Продолжить;
		КонецЕсли;
		ШК = Префикс + Формат(Товар.Штрихкод, "ЧЦ=" + ДлинаКода + "; ЧВН=; ЧГ=0") + Вес;
		Товар.Штрихкод = ШК + РаботаСТорговымОборудованием.КонтрольныйСимволEAN(ШК, 13);
	КонецЦикла;
	УстановитьДоступностьКнопок();

КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура - обработчик события "ПриНажатии" кнопки "Отбор"
// командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Отбор"
//
Процедура ДействияФормыОтбор(Кнопка)

	Перем ПанельОтбора;
	Перем Верх;
	Перем Нет;

	ПанельОтбора   = ЭлементыФормы.ПанельОтбор;
	Верх           = РежимСверткиЭлементаУправления.Верх;
	Нет            = РежимСверткиЭлементаУправления.Нет;

	ПанельОтбора.Свертка = ?(ПанельОтбора.Свертка = Верх, Нет, Верх);

КонецПроцедуры // ДействияФормыОтбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "КомандыТоваров"

// Процедура - обработчик события "ПриНажатии" кнопки "ВыделитьВсе"
// командной панели "КомандыТоваров"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ВыделитьВсе"
//
Процедура КомандыТоваровВыделитьВсе(Кнопка)

	СписокТоваров.ЗаполнитьЗначения(Истина, "Выгружать");

КонецПроцедуры // КомандыТоваровВыделитьВсе()

// Процедура - обработчик события "ПриНажатии" кнопки "ОчиститьВыделение"
// командной панели "КомандыТоваров"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ОчиститьВыделение"
//
Процедура КомандыТоваровОчиститьВыделение(Кнопка)

	СписокТоваров.ЗаполнитьЗначения(Ложь, "Выгружать");

КонецПроцедуры // КомандыТоваровОчиститьВыделение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "ОсновныеДействияФормы"

// Процедура - обработчик события "ПриНажатии" кнопки "Выгрузить"
// командной панели "ОсновныеДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Выгрузить"
//
Процедура ОсновныеДействияФормыВыгрузить(Кнопка)

	Результат = Неопределено;

	Если СписокТоваров.Количество() = 0 Тогда
		Предупреждение("Нет данных для выгрузки.");
		Возврат;
	КонецЕсли;

	Ошибка     = "";
	КолвоСтрок = 0;

	ТаблицаДляТСД = Новый ТаблицаЗначений;
	ТаблицаДляТСД.Колонки.Добавить("Штрихкод");
	ТаблицаДляТСД.Колонки.Добавить("Наименование");
	ТаблицаДляТСД.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаДляТСД.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДляТСД.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаДляТСД.Колонки.Добавить("Качество");
	ТаблицаДляТСД.Колонки.Добавить("Цена");
	ТаблицаДляТСД.Колонки.Добавить("Количество");

	Для Каждого СтрокаТовара Из СписокТоваров Цикл
		Если Не СтрокаТовара.Выгружать Тогда
			Продолжить;
		КонецЕсли;

		Характеристика = ?(мИспользоватьХарактеристики, СтрокаТовара.Характеристика, мПустаяХарактеристика);
		Серия          = ?(мИспользоватьСерии, СтрокаТовара.Серия, мПустаяСерия);

		СтрокаТаблицы = ТаблицаДляТСД.Добавить();
		СтрокаТаблицы.Штрихкод                   = Строка(СтрокаТовара.Штрихкод);
		СтрокаТаблицы.Наименование               = Строка(СтрокаТовара.Номенклатура);
		СтрокаТаблицы.ЕдиницаИзмерения           = Строка(СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТаблицы.ХарактеристикаНоменклатуры = Строка(Характеристика);
		СтрокаТаблицы.СерияНоменклатуры          = Строка(Серия);
		СтрокаТаблицы.Качество                   = Строка(СтрокаТовара.Качество);
		СтрокаТаблицы.Цена                       = Число(СтрокаТовара.Цена);
		СтрокаТаблицы.Количество                 = Число(СтрокаТовара.Количество);
	КонецЦикла;

	Результат = ПолучитьСерверТО().ВыгрузитьТаблицуТСД(ТерминалСбораДанных, ТаблицаДляТСД);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Предупреждение("Выгрузка успешно завершена.
		               |Выгружено строк: " + Формат(ТаблицаДляТСД.Количество(), "ЧГ=0") + ".");
	Иначе
		Предупреждение("ВНИМАНИЕ! Произошла ошибка.
		               |Возможно товар не выгружен, либо выгружен частично
		               |Ошибка: " + ПолучитьСерверТО().ПолучитьТекстОшибкиТСДТО(Результат));
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПАНЕЛИ "Отбор"

// Процедура - обработчик события "ПриИзменении" поля выбора 
// "ПолеВидаСравненияСклад"
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора "ПолеВидаСравненияСклад"
//
Процедура ПолеВидаСравненияСкладПриИзменении(Элемент)

	ОбработатьИзменениеВидаСравнения(Элемент, "СправочникСсылка.Склады");

КонецПроцедуры // ПолеВидаСравненияСкладПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора 
// "ПолеВидаСравненияТипЦен"
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора "ПолеВидаСравненияТипЦен"
//
Процедура ПолеВидаСравненияТипЦенПриИзменении(Элемент)

	ОбработатьИзменениеВидаСравнения(Элемент, "СправочникСсылка.ТипыЦенНоменклатуры");

КонецПроцедуры // ПолеВидаСравненияТипЦенПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора 
// "ПолеВидаСравненияНоменклатура"
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора "ПолеВидаСравненияНоменклатура"
//
Процедура ПолеВидаСравненияНоменклатураПриИзменении(Элемент)

	ОбработатьИзменениеВидаСравнения(Элемент, "СправочникСсылка.Номенклатура");

КонецПроцедуры // ПолеВидаСравненияНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора 
// "ПолеВидаСравненияГруппа"
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора "ПолеВидаСравненияГруппа"
//
Процедура ПолеВидаСравненияГруппаПриИзменении(Элемент)

	ОбработатьИзменениеВидаСравнения(Элемент, "СправочникСсылка.НоменклатурныеГруппы");

КонецПроцедуры // ПолеВидаСравненияГруппаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода 
// "ПолеНастройкиСклад"
//
// Параметры
//  Элемент - <ПолеВвода>
//          - поле ввода "ПолеНастройкиСклад"
//
Процедура ПолеНастройкиСкладПриИзменении(Элемент)

	СписокТоваров.Очистить();
	УстановитьДоступностьКнопок();
	ЭлементыФормы.ФлажокНастройкиСклад.Значение = ЗначениеЗаполнено(Элемент.Значение);

КонецПроцедуры // ПолеНастройкиСкладПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода 
// "ПолеНастройкиТипЦен"
//
// Параметры
//  Элемент - <ПолеВвода>
//          - поле ввода "ПолеНастройкиТипЦен"
//
Процедура ПолеНастройкиТипЦенПриИзменении(Элемент)

	СписокТоваров.Очистить();
	УстановитьДоступностьКнопок();
	ЭлементыФормы.ФлажокНастройкиТипЦен.Значение = ЗначениеЗаполнено(Элемент.Значение);

КонецПроцедуры // ПолеНастройкиТипЦенПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода 
// "ПолеНастройкиНоменклатура"
//
// Параметры
//  Элемент - <ПолеВвода>
//          - поле ввода "ПолеНастройкиНоменклатура"
//
Процедура ПолеНастройкиНоменклатураПриИзменении(Элемент)

	СписокТоваров.Очистить();
	УстановитьДоступностьКнопок();
	ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение = ЗначениеЗаполнено(Элемент.Значение);

КонецПроцедуры // ПолеНастройкиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода 
// "ПолеНастройкиГруппа"
//
// Параметры
//  Элемент - <ПолеВвода>
//          - поле ввода "ПолеНастройкиГруппа"
//
Процедура ПолеНастройкиГруппаПриИзменении(Элемент)

	СписокТоваров.Очистить();
	УстановитьДоступностьКнопок();
	ЭлементыФормы.ФлажокНастройкиГруппа.Значение = ЗначениеЗаполнено(Элемент.Значение);

КонецПроцедуры // ПолеНастройкиГруппаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
// Параметры
//  Отказ                – <Булево> 
//                       – признак отказа от открытия формы; если в теле 
//                         процедуры-обработчика установить данному параметру 
//                         значение Истина, открытие формы выполнено не будет.
//
//  СтандартнаяОбработка – <Булево> 
//                       –  в данный параметр передается признак выполнения 
//                          стандартной (системной) обработки события; если в 
//                          теле процедуры-обработчика установить данному 
//                          параметру значение Ложь, стандартная обработка 
//                          события производиться не будет. Отказ от 
//                          стандартной обработки не отменяет открытие формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Отказ = (мСписокТерминалов.Количество() = 0);
	Если Отказ Тогда
		Предупреждение("Терминал сбора данных не подключен.");
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	СписокТерминалов = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(мСписокТерминалов);

	ЭлементыФормы.ТерминалСбораДанных.СписокВыбора = СписокТерминалов;

	ТерминалСбораДанных                              = СписокТерминалов[0].Значение;
	ЭлементыФормы.ТерминалСбораДанных.ТолькоПросмотр = (СписокТерминалов.Количество() = 1);

	Если Не мИспользоватьСерии Тогда
		Колонка                   = ЭлементыФормы.ПолеТовары.Колонки["Серия"];
		Колонка.Видимость         = Ложь;
		Колонка.ИзменятьВидимость = Ложь;
	КонецЕсли;
	
	Если Не мИспользоватьХарактеристики Тогда
		Колонка                   = ЭлементыФормы.ПолеТовары.Колонки["Характеристика"];
		Колонка.Видимость         = Ложь;
		Колонка.ИзменятьВидимость = Ложь;
	КонецЕсли;

	ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	ЗаполнитьПолеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияСклад);
	ЗаполнитьПолеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияТипЦен);
	ЗаполнитьПолеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияНоменклатура);
	ЗаполнитьПолеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияГруппа);

	ОбработатьИзменениеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияСклад, "СправочникСсылка.Склады");
	ОбработатьИзменениеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияТипЦен, "СправочникСсылка.ТипыЦенНоменклатуры");
	ОбработатьИзменениеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияНоменклатура, "СправочникСсылка.Номенклатура");
	ОбработатьИзменениеВидаСравнения(ЭлементыФормы.ПолеВидаСравненияГруппа, "СправочникСсылка.НоменклатурныеГруппы");
	
	ЭлементыФормы.ФлажокНастройкиСклад.Значение = Ложь;
	ЭлементыФормы.ФлажокНастройкиТипЦен.Значение = Ложь;
	ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение = Ложь;
	ЭлементыФормы.ФлажокНастройкиГруппа.Значение = Ложь;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает строку запроса товаров, соответствующую отбору
//
// Параметры
//  Сравнение    - <ВидСравнения>
//               - Вид сравнения при отборе.
//
//  Параметр     - <Строка>
//               - Имя параметра запроса.
//
// Возвращаемое значение:
//  <Строка>     - Строка, которую можно добавить в конец запроса.
//
Функция ПолучитьСтрокуЗапроса(Сравнение, Параметр)

	Результат = "";

	Если Сравнение = ВидСравнения.Больше Тогда
		Результат = " > " + Параметр;
	ИначеЕсли Сравнение = ВидСравнения.БольшеИлиРавно Тогда
		Результат = " >= " + Параметр;
	ИначеЕсли Сравнение = ВидСравнения.ВСписке Тогда
		Результат = " В (" + Параметр + ")";
	ИначеЕсли Сравнение = ВидСравнения.Меньше Тогда
		Результат = " < " + Параметр;
	ИначеЕсли Сравнение = ВидСравнения.МеньшеИлиРавно Тогда
		Результат = " <= " + Параметр;
	ИначеЕсли Сравнение = ВидСравнения.НеВСписке Тогда
		Результат = " НЕ В (" + Параметр + ")";
	ИначеЕсли Сравнение = ВидСравнения.НеРавно Тогда
		Результат = " <> " + Параметр;
	ИначеЕсли Сравнение = ВидСравнения.Равно Тогда
		Результат = " = " + Параметр;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСтрокуЗапроса()

// Процедура устанавливает доступность кнопок командной панели "КомандыТоваров"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьКнопок()
	
	Перем Кнопки;
	Перем Количество;
	
	Кнопки                                 = ЭлементыФормы.КомандыТоваров.Кнопки;
	Количество                             = СписокТоваров.Количество();
	Кнопки.ВыделитьВсе.Доступность         = (Количество <> 0);
	Кнопки.ОчиститьВыделение.Доступность   = (Количество <> 0);

КонецПроцедуры // УстановитьДоступностьКнопок()

// Процедура осуществляет настройку поля выбора вида сравнения
//
// Параметры
//  Поле - <ПолеВыбора>
//       - поле выбора вида сравнения
//
Процедура ЗаполнитьПолеВидаСравнения(Поле)

	Поле.СписокВыбора.Добавить(ВидСравнения.Равно);
	Поле.СписокВыбора.Добавить(ВидСравнения.НеРавно);
	Поле.СписокВыбора.Добавить(ВидСравнения.ВСписке);
	Поле.СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	Поле.СписокВыбора.Добавить(ВидСравнения.Больше);
	Поле.СписокВыбора.Добавить(ВидСравнения.БольшеИлиРавно);
	Поле.СписокВыбора.Добавить(ВидСравнения.Меньше);
	Поле.СписокВыбора.Добавить(ВидСравнения.МеньшеИлиРавно);
	Поле.Значение = ВидСравнения.Равно;

КонецПроцедуры // ЗаполнитьПолеВидаСравнения()

// Процедура осуществляет обработку изменения вида сравнения
//
// Параметры
//  Элемент - <ПолеВыбора>
//          - поле выбора, соответствующее виду сравнения
//
//  ИмяТипа - <Строка>
//          - имя типа данных сравниваемого значения
//
Процедура ОбработатьИзменениеВидаСравнения(Элемент, ИмяТипа)

	Перем ИмяПараметра;
	Перем Флажок;
	Перем ПолеНастройки;

	ИмяПараметра    = СтрЗаменить(Элемент.Имя, "ПолеВидаСравнения", "");
	Флажок          = ЭлементыФормы["ФлажокНастройки" + ИмяПараметра];
	ПолеНастройки   = ЭлементыФормы["ПолеНастройки" + ИмяПараметра];

	Если Элемент.Значение = ВидСравнения.Больше
		Или Элемент.Значение = ВидСравнения.Больше
		Или Элемент.Значение = ВидСравнения.БольшеИлиРавно
		Или Элемент.Значение = ВидСравнения.Меньше
		Или Элемент.Значение = ВидСравнения.МеньшеИлиРавно
		Или Элемент.Значение = ВидСравнения.НеРавно
		Или Элемент.Значение = ВидСравнения.Равно Тогда

		ПолеНастройки.ТипЗначения       = Новый ОписаниеТипов(ИмяТипа);
		Флажок.Значение                 = Истина;

	ИначеЕсли Элемент.Значение = ВидСравнения.ВСписке
		Или Элемент.Значение = ВидСравнения.НеВСписке Тогда

		ПолеНастройки.ТипЗначения       = Новый ОписаниеТипов("СписокЗначений");
		ПолеНастройки.ТипЗначенияСписка = Новый ОписаниеТипов(ИмяТипа);
		Флажок.Значение                 = Истина;
	Иначе
		Флажок.Значение                 = Ложь;
	КонецЕсли;

	СписокТоваров.Очистить();
	УстановитьДоступностьКнопок();

КонецПроцедуры // ОбработатьИзменениеВидаСравнения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
мИспользоватьСерии          = Константы.ИспользоватьСерииНоменклатуры.Получить();
мСписокТерминалов           = ПолучитьСерверТО().ПолучитьСписокУстройств(
                                  Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);
мПустаяХарактеристика       = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
мПустаяСерия                = Справочники.СерииНоменклатуры.ПустаяСсылка();