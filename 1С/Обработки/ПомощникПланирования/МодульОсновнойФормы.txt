////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВыбраннаяСтратегия;
Перем мНастройкаПериода;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьНачальныеЗначения()
	
	СтратегииРасчета.Очистить();
	
	Для каждого Стратегия из мМассивСтратегии Цикл
		
		НоваяСтратегия = СтратегииРасчета.Добавить();
		НоваяСтратегия.ВидСтратегии = Стратегия.ВидСтратегии;
		НоваяСтратегия.НаименованиеСтратегии = Стратегия.Представление;
		НоваяСтратегия.Процент = 100;
		НоваяСтратегия.Использование = Ложь;
		УстановитьИдентификаторСтроки(НоваяСтратегия, СтратегииРасчета.ВыгрузитьКолонку("ИдентификаторСтроки")); 
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьНачальныеЗначения()

Процедура ОбновитьСостоянияДокументов()
	
	Индекс = 0;
	
	Пока Индекс < СформированныеДокументы.Количество() Цикл
		
		СтрокаТаблицы = СформированныеДокументы[Индекс];
		
		Попытка
			
			Если СтрокаТаблицы.Документ.ПолучитьОбъект() = Неопределено Тогда
				
				СформированныеДокументы.Удалить(СтрокаТаблицы);
				Продолжить;
				
			КонецЕсли;
			
		Исключение
			
			СформированныеДокументы.Удалить(СтрокаТаблицы);
			Продолжить;
			
		КонецПопытки;
		
		Если СтрокаТаблицы.Документ.ПометкаУдаления Тогда
			
			СтрокаТаблицы.ПометкаУдаления  = Истина;
			СтрокаТаблицы.ДокументПроведен = Ложь;
			
		ИначеЕсли СтрокаТаблицы.Документ.Проведен Тогда
			
			СтрокаТаблицы.ПометкаУдаления  = Ложь;
			СтрокаТаблицы.ДокументПроведен = Истина;
			
		Иначе
			
			СтрокаТаблицы.ПометкаУдаления  = Ложь;
			СтрокаТаблицы.ДокументПроведен = Ложь;
			
		КонецЕсли; 
		
		Индекс = Индекс + 1;
	
	КонецЦикла; 

КонецПроцедуры // ОбновитьСостоянияДокументов()

Процедура УстановитьЭкспортныеПеременные()

	мСформированныеДокументы = СформированныеДокументы;

КонецПроцедуры // УстановитьЭкспортныеПеременные()

Процедура УстановитьПредставлениеРежимСложенияОбъединения()
	
	Результат = "";
	
	Результат = Результат + ?(мРежимСложениеОбъединениеСУчетомЗаказов = Истина, ?(ПустаяСтрока(Результат),"", ", ") + НСтр("ru = 'Заказ'"), "");
	Результат = Результат + ?(мРежимСложениеОбъединениеСУчетомПодразделений = Истина, ?(ПустаяСтрока(Результат),"", ", ") + НСтр("ru = 'Подразделение'"), "");
	Результат = Результат + ?(мРежимСложениеОбъединениеСУчетомПроектов = Истина, ?(ПустаяСтрока(Результат),"", ", ") + НСтр("ru = 'Проект'"), "");
	Результат = Результат + ?(мРежимСложениеОбъединениеСУчетомКонтрагентов = Истина, ?(ПустаяСтрока(Результат),"", ", ") + НСтр("ru = 'Контрагент'"), "");
	Результат = Результат + ?(мРежимСложениеОбъединениеСУчетомДоговоров = Истина, ?(ПустаяСтрока(Результат),"", ", ") + НСтр("ru = 'Договор'"), "");
	Результат = Результат + ?(мРежимСложениеОбъединениеСУчетомПериодов = Истина, ?(ПустаяСтрока(Результат),"", ", ") + "Период", "");
	
	Результат = ?(мРежимОбъединение = Истина, НСтр("ru = 'Объединение'"), НСтр("ru = 'Сложение'")) + ?(ПустаяСтрока(Результат), "", " (" + Результат + ")");
	
	РежимСложенияОбъединения = Результат;
	
КонецПроцедуры // УстановитьПредставлениеРежимСложенияОбъединения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ВосстановленыНастройки = Ложь;
	
	ИнициализацияПомощникаПланирования();
	
	Если мДокумент <> Неопределено Тогда
		
		КонечныеПланы.Очистить();
			
		НовыйКонечныйПлан = КонечныеПланы.Добавить();
		НовыйКонечныйПлан.ВидПлана = мВидПлана;
		НовыйКонечныйПлан.Сценарий = мДокумент.Сценарий;
		НовыйКонечныйПлан.ДатаНач = мДокумент.ДатаПланирования;
		НовыйКонечныйПлан.ДатаКон = мДокумент.ДатаПланирования;
		НовыйКонечныйПлан.Проект = мДокумент.Проект;
		НовыйКонечныйПлан.Подразделение = мДокумент.Подразделение;
			
		УправлениеПланированием.ВыровнятьДатуПоКонцуПериода(НовыйКонечныйПлан.ДатаКон, мДокумент.Сценарий.Периодичность);
		
		ЭлементыФормы.ТабличноеПолеКонечныеПланы.ИзменятьСоставСтрок = Ложь;
		ЭлементыФормы.ТабличноеПолеКонечныеПланы.ИзменятьПорядокСтрок = Ложь;
		
		Для каждого Колонка из ЭлементыФормы.ТабличноеПолеКонечныеПланы.Колонки Цикл
			
			Колонка.ТолькоПросмотр = Колонка.Имя <> "ПрофильРаспределения" И Колонка.Имя <> "ПрофильРаспределенияДетализацияПлана";
			
		КонецЦикла;
		
		ЭлементыФормы.Панель.Страницы.СформированныеДокументы.Видимость = Ложь;
		
		Заголовок = Заголовок + " (" + Строка(мДокумент) + ")";
		
		Если мДокумент.Метаданные().Реквизиты.Найти("НастройкиПомощникаПланирования") <> Неопределено Тогда
			
			НастройкиПомощникаПланирования = мДокумент.НастройкиПомощникаПланирования.Получить();
			
			Если ТипЗнч(НастройкиПомощникаПланирования) = Тип("Структура") Тогда
				
				ВосстановитьНастройкиИзСтруктуры(НастройкиПомощникаПланирования);
				ВосстановленыНастройки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
		СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
		
		Если УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Тогда
			
			мТекущаяНастройка = СтруктураНастройки;
			ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
			ВосстановленыНастройки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ВосстановленыНастройки Тогда
		
		УстановитьНачальныеЗначения();
		НастроитьПостроитель(ПостроительОтчета);
		
	КонецЕсли;
	
	УправлениеДоступностьюЭлементовУправления(ЭлементыФормы.ФлажокИзменитьРезультатРасчетаКоличества);
	УправлениеДоступностьюЭлементовУправления(ЭлементыФормы.ФлажокИзменитьРезультатРасчетаСуммы);
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимВыбораДатПериодом.Пометка = РежимВыбораДатПериодом;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.РежимВыбораДатПериодом.Пометка = РежимВыбораДатПериодом;
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(, ЭлементыФормы, "ТабличноеПолеКонечныеПланы.Проект");
	
	КолонкаВыполнятьРазузлование = ЭлементыФормы.ТабличноеПолеСтратегииРасчетаКоличества.Колонки.ВыполнятьРазузлование;
	КолонкаКоличествоУровнейРазузлования = ЭлементыФормы.ТабличноеПолеСтратегииРасчетаКоличества.Колонки.КоличествоУровнейРазузлования;
	
	КолонкаВыполнятьРазузлование.Видимость = мИспользоватьРазузлование И КолонкаВыполнятьРазузлование.Видимость;
	КолонкаВыполнятьРазузлование.ИзменятьВидимость = мИспользоватьРазузлование;
	КолонкаКоличествоУровнейРазузлования.Видимость = мИспользоватьРазузлование И КолонкаКоличествоУровнейРазузлования.Видимость;
	КолонкаКоличествоУровнейРазузлования.ИзменятьВидимость = мИспользоватьРазузлование;
	
	ЭлементыФормы.ТабличноеПолеКонечныеПланы.Колонки.ВидПлана.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыПланирования.Продажи);
	
	Если мИспользоватьВидПланаПроизводство Тогда
		
		ЭлементыФормы.ТабличноеПолеКонечныеПланы.Колонки.ВидПлана.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыПланирования.Производство);
		
	КонецЕсли;
	
	ЭлементыФормы.ТабличноеПолеКонечныеПланы.Колонки.ВидПлана.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыПланирования.Закупки);
	
КонецПроцедуры // ПриОткрытии()

Процедура ОбновлениеОтображения()
	
	УстановитьПредставлениеРежимСложенияОбъединения();
	
КонецПроцедуры // ОбновлениеОтображения()

Процедура ПриЗакрытии()
	
	Если мДокумент <> Неопределено И мДокумент.Метаданные().Реквизиты.Найти("НастройкиПомощникаПланирования") <> Неопределено И мДокумент.Модифицированность() Тогда
				
		СтруктураСНастройками = Новый Структура;
		СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
		мДокумент.НастройкиПомощникаПланирования = Новый ХранилищеЗначения(СтруктураСНастройками, Новый СжатиеДанных(9));
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УправлениеДоступностьюЭлементовУправления(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	
	ДоступностьЭлементов = Элемент.Значение;
	
	Если ИмяЭлемента = "ФлажокИзменитьРезультатРасчетаКоличества" Тогда
		
		ЭлементыФормы.ПолеВводаИзменитьРезультатРасчетаКоличестваПроцент.Доступность = ДоступностьЭлементов;
		
	ИначеЕсли ИмяЭлемента = "ФлажокИзменитьРезультатРасчетаСуммы" Тогда
		
		ЭлементыФормы.ПолеВводаИзменитьРезультатРасчетаСуммыПроцент.Доступность = ДоступностьЭлементов;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностьюЭлементовУправления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

Процедура ФлажокПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовУправления(Элемент);
	
КонецПроцедуры // ФлажокПриИзменении()

Процедура ПолеВыбораРезультатРасчетаКоличестваОкруглитьДоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораРезультатРасчетаКоличестваОкруглитьДоОчистка()

Процедура ПолеВыбораРезультатРасчетаСуммыОкруглитьДоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораРезультатРасчетаСуммыОкруглитьДоОчистка()

Процедура ФлажокИспользоватьСвойстваИКатегорииПриИзменении(Элемент)
	
	НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь);
	НастроитьПостроитель(ПостроительОтчета);
	ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
	
КонецПроцедуры // ФлажокИспользоватьСвойстваИКатегорииПриИзменении()

Процедура ПолеВводаДатаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если РежимВыбораДатПериодом Тогда
		
		СтандартнаяОбработка = Ложь;
	
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		мНастройкаПериода.УстановитьПериод(ТекущиеДанные.ДатаНач, ?(ТекущиеДанные.ДатаКон = Дата('00010101000000'), ТекущиеДанные.ДатаКон, КонецДня(ТекущиеДанные.ДатаКон)));
		
		Если мНастройкаПериода.Редактировать() Тогда
			
			ТекущиеДанные.ДатаНач = мНастройкаПериода.ПолучитьДатуНачала();
			ТекущиеДанные.ДатаКон = мНастройкаПериода.ПолучитьДатуОкончания();

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолеВводаДатаНачалоВыбора()

Процедура ПолеВводаРежимСложенияОбъединенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаРежимСложенияОбъединения = ОбработкаОбъект.ПолучитьФорму("ФормаРежимСложенияОбъединения", ЭтаФорма);
	ФормаРежимСложенияОбъединения.ОткрытьМодально();
	
КонецПроцедуры // ПолеВводаРежимСложенияОбъединенияНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельФормы"

Процедура КоманднаяПанельФормыВосстановитьНастройку(Кнопка)
	
	ВосстановитьНастройки();
	
КонецПроцедуры // КоманднаяПанельФормыВосстановитьНастройку()

Процедура КоманднаяПанельФормыСохранитьНастройку(Кнопка)
	
	СохранитьНастройки(ПостроительОтчета);
	
КонецПроцедуры // КоманднаяПанельФормыСохранитьНастройку()

Процедура КоманднаяПанельФормыВыбиратьДатыПериодом(Кнопка)
	
	РежимВыбораДатПериодом = НЕ РежимВыбораДатПериодом;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимВыбораДатПериодом.Пометка = РежимВыбораДатПериодом;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.РежимВыбораДатПериодом.Пометка = РежимВыбораДатПериодом;
	
КонецПроцедуры // КоманднаяПанельФормыВыбиратьДатыПериодом()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "ОсновныеДействияФормы"

Процедура ОсновныеДействияФормыДалее(Кнопка)
	
	Страницы = ЭлементыФормы.Панель.Страницы;
	Индекс = Страницы.Индекс(ЭлементыФормы.Панель.ТекущаяСтраница);
	
	Пока Истина Цикл
		
		Индекс = Индекс + 1;
		
		Если Индекс >= Страницы.Количество() Тогда
			
			Индекс = -1;
			
		ИначеЕсли Страницы.Получить(Индекс).Видимость = Ложь Тогда
			
			Продолжить;
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыФормы.Панель.ТекущаяСтраница = Страницы.Получить(Индекс);
	
КонецПроцедуры // ОсновныеДействияФормыДалее()

Процедура КнопкаВыполнитьНажатие(Элемент)
	
	УстановитьЭкспортныеПеременные();
	
	Если НЕ УстановитьПараметрыПостроителя(ПостроительОтчета) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверка корректности заполнения исходных данных
	Если НЕ КорректностьЗаполненияДокумента() ИЛИ НЕ КорректностьЗаполненияДанных() Тогда
		
		Предупреждение(НСтр("ru = 'Обнаружены ошибки заполнения исходных данных!'"));
		Возврат;
		
	КонецЕсли;
	
	ПостроительОтчета.Выполнить();
	
	Результат = ИнициализироватьТаблицуРезультата();
	РезультатЗапроса = ПостроительОтчета.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Для каждого ДанныеСтроки Из РезультатЗапроса Цикл
		
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), ДанныеСтроки);
		
	КонецЦикла;
	
	// Заполнение по стратегии ЗаполнитьДаннымиОтчета
	Для каждого Стратегия Из СтратегииРасчета.НайтиСтроки(Новый Структура("ВидСтратегии,Использование", "ЗаполнитьДаннымиОтчета", Истина)) Цикл
		
		ДополнитьРезультатДаннымиОтчета(Результат, Стратегия);
		
	КонецЦикла;
		
	Если Результат.Количество() = 0 Тогда
		
		Предупреждение(НСтр("ru = 'По указанным стратегиям расчета данные не выбраны!'"));
		Возврат;
		
	КонецЕсли;

	Если ВыполнитьОбработку(Результат) Тогда
		
		Если мДокумент <> Неопределено Тогда
		
			Предупреждение(НСтр("ru = 'Заполнение документа завершено.'"));
			
		Иначе
			
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы["СформированныеДокументы"];
			Предупреждение(НСтр("ru = 'Формирование документов завершено.'"));
			
		КонецЕсли;
		
	Иначе
		
		Если мДокумент <> Неопределено Тогда
		
			Предупреждение(НСтр("ru = 'Данные, выбранные по указанным стратегиям, не соответствуют заполняемому документу.'") + Символы.ПС + НСтр("ru = 'Заполнение документа не выполнено!'"));
			
		Иначе
			
			Предупреждение(НСтр("ru = 'Данные, выбранные по указанным стратегиям, не соответствуют формируемым документам.'") + Символы.ПС + НСтр("ru = 'Формирование документов не выполнено!'"));
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // КнопкаВыполнитьНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТабличноеПолеСтратегииРасчетаКоличества"

Процедура ТабличноеПолеСтратегииРасчетаКоличестваПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если НЕ Копирование Тогда
		
		СписокСтратегий = Новый СписокЗначений;
		
		Для каждого Стратегия из мМассивСтратегии Цикл
			
			СписокСтратегий.Добавить(Стратегия.ВидСтратегии, Стратегия.Представление);
			
		КонецЦикла;

		ВыбраннаяСтратегия = СписокСтратегий.ВыбратьЭлемент(НСтр("ru = 'Выбор типа стратегии'"));
		
		Если ВыбраннаяСтратегия = Неопределено Тогда
			
			Отказ = Истина;
			
		Иначе
			
			мВыбраннаяСтратегия = ВыбраннаяСтратегия;
			
			Если мВыбраннаяСтратегия.Значение = "ЗаполнитьДаннымиОтчета" Тогда
				
				ЭлементыФормы.ТабличноеПолеСтратегииРасчетаКоличества.Колонки.Наименование.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СохраненныеНастройки");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеСтратегииРасчетаКоличестваПередНачаломДобавления()

Процедура ТабличноеПолеСтратегииРасчетаКоличестваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если Копирование Тогда
			
			УстановитьИдентификаторСтроки(Элемент.ТекущиеДанные, СтратегииРасчета.ВыгрузитьКолонку("ИдентификаторСтроки"));
			
			Если Элемент.ТекущиеДанные.Использование Тогда
				
				НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь);
				НастроитьПостроитель(ПостроительОтчета);
				ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
				
			КонецЕсли;
			
		Иначе
			
			Элемент.ТекущиеДанные.ВидСтратегии = мВыбраннаяСтратегия.Значение;
			
			Элемент.ТекущиеДанные.НаименованиеСтратегии = мВыбраннаяСтратегия.Представление;
			Элемент.ТекущиеДанные.Процент = 100;
			УстановитьИдентификаторСтроки(Элемент.ТекущиеДанные, СтратегииРасчета.ВыгрузитьКолонку("ИдентификаторСтроки"));			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеСтратегииРасчетаКоличестваПриНачалеРедактирования()

Процедура ТабличноеПолеСтратегииРасчетаКоличестваПослеУдаления(Элемент)
	
	НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь);
	НастроитьПостроитель(ПостроительОтчета);
	ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
	
КонецПроцедуры // ТабличноеПолеСтратегииРасчетаКоличестваПослеУдаления()

Процедура ТабличноеПолеСтратегииРасчетаКоличестваПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ДанныеСтроки.ВидСтратегии <> "" Тогда
			
			ОформлениеСтроки.Ячейки.ВидСтратегии.УстановитьТекст(ПолучитьПараметрыСтратегииПоВиду(ДанныеСтроки.ВидСтратегии).Представление);
			
			Если ПолучитьПараметрыСтратегииПоВиду(ДанныеСтроки.ВидСтратегии).НаДату Тогда
					
				ОформлениеСтроки.Ячейки.НаДату.Видимость = Истина;
				ОформлениеСтроки.Ячейки.ДатаНач.Видимость = Ложь;
				ОформлениеСтроки.Ячейки.ДатаКон.Видимость = Ложь;
					
			Иначе
					
				ОформлениеСтроки.Ячейки.НаДату.Видимость = Ложь;
				ОформлениеСтроки.Ячейки.ДатаНач.Видимость = Истина;
				ОформлениеСтроки.Ячейки.ДатаКон.Видимость = Истина;
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеСтроки.ВидСтратегии = "ЗаполнитьДаннымиОтчета" Тогда
			
			Если ТипЗнч(ДанныеСтроки.НаименованиеСтратегии) = Тип("Строка") Тогда
				
				ДанныеСтроки.НаименованиеСтратегии = Справочники.СохраненныеНастройки.ПустаяСсылка();
				
			КонецЕсли;
			
			Если ДанныеСтроки.НаименованиеСтратегии = Справочники.СохраненныеНастройки.ПустаяСсылка() Тогда
				
				ОформлениеСтроки.Ячейки.Наименование.Текст = НСтр("ru = 'Заполнить данными отчета (настройка не выбрана)'");
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры // ТабличноеПолеСтратегииРасчетаКоличестваПриПолученииДанных()

Процедура ТабличноеПолеСтратегииРасчетаКоличестваПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Использование" Тогда
		
		НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь);
		НастроитьПостроитель(ПостроительОтчета);
		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеСтратегииРасчетаКоличестваПриИзмененииФлажка()

Процедура ТабличноеПолеСтратегииРасчетаКоличестваНаименованиеПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ТабличноеПолеСтратегииРасчетаКоличества.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.Использование Тогда
			
			УстановитьПредставленияПолей(ПостроительОтчета, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ТабличноеПолеСтратегииРасчетаКоличестваНаименованиеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТабличноеПолеСтратегииРасчетаСуммы"

Процедура ТабличноеПолеСтратегииРасчетаСуммыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		ОформлениеСтроки.Ячейки.СтратегияРасчетаСуммы.УстановитьТекст(Элемент.Колонки.СтратегияРасчетаСуммы.ЭлементУправления.СписокВыбора.НайтиПоЗначению(ОформлениеСтроки.ДанныеСтроки.СтратегияРасчетаСуммы).Представление);
		ОформлениеСтроки.Ячейки.Функция.УстановитьТекст(Элемент.Колонки.Функция.ЭлементУправления.СписокВыбора.НайтиПоЗначению(ОформлениеСтроки.ДанныеСтроки.Функция).Представление);
		
		Если ОформлениеСтроки.ДанныеСтроки.ТипЦен = Неопределено ИЛИ ОформлениеСтроки.ДанныеСтроки.ТипЦен.Пустая() Тогда
			
			ОформлениеСтроки.Ячейки.ТипЦен.ОтображатьКартинку = Ложь;
			ОформлениеСтроки.Ячейки.ТипЦен.Картинка = Новый Картинка;
			ОформлениеСтроки.Ячейки.ТипЦен.ТолькоПросмотр = Истина;
			
		ИначеЕсли ТипЗнч(ОформлениеСтроки.ДанныеСтроки.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
			
			ОформлениеСтроки.Ячейки.ТипЦен.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.ТипЦен.Картинка = БиблиотекаКартинок.СправочникНоменклатура;
			ОформлениеСтроки.Ячейки.ТипЦен.ТолькоПросмотр = Ложь;
			
		ИначеЕсли ТипЗнч(ОформлениеСтроки.ДанныеСтроки.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
			
			ОформлениеСтроки.Ячейки.ТипЦен.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.ТипЦен.Картинка = БиблиотекаКартинок.СправочникКонтрагенты;
			ОформлениеСтроки.Ячейки.ТипЦен.ТолькоПросмотр = Ложь;
			
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.ТипЦен.ТолькоПросмотр = ОформлениеСтроки.ДанныеСтроки.СтратегияРасчетаСуммы = 0;
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ДанныеСтроки.ВидСтратегии = "ЗаполнитьДаннымиОтчета" Тогда
			
			Если ТипЗнч(ДанныеСтроки.НаименованиеСтратегии) = Тип("Строка") Тогда
				
				ДанныеСтроки.НаименованиеСтратегии = Справочники.СохраненныеНастройки.ПустаяСсылка();
				
			КонецЕсли;
			
			Если ДанныеСтроки.НаименованиеСтратегии = Справочники.СохраненныеНастройки.ПустаяСсылка() Тогда
				
				ОформлениеСтроки.Ячейки.Наименование.Текст = НСтр("ru = 'Заполнить данными отчета (настройка не выбрана)'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ТабличноеПолеСтратегииРасчетаСуммыПриПолученииДанных()

Процедура ТабличноеПолеСтратегииРасчетаСуммыПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Использование" Тогда
		
		НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь);
		НастроитьПостроитель(ПостроительОтчета);
		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеСтратегииРасчетаСуммыПриИзмененииФлажка()

Процедура ТабличноеПолеСтратегииРасчетаСуммыСтратегияРасчетаСуммыПриИзменении(Элемент)
	
	СтратегияРасчетаСуммы = Элемент.Значение;
	
	Если СтратегияРасчетаСуммы = 0 Тогда
		
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатуры");
		ЭлементыФормы.ТабличноеПолеСтратегииРасчетаСуммы.ТекущиеДанные.ТипЦен = ОписаниеТипов.ПривестиЗначение();
		
	ИначеЕсли СтратегияРасчетаСуммы = 1 Тогда
		
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатуры");
		ЭлементыФормы.ТабличноеПолеСтратегииРасчетаСуммы.ТекущиеДанные.ТипЦен = ОписаниеТипов.ПривестиЗначение(ЭлементыФормы.ТабличноеПолеСтратегииРасчетаСуммы.ТекущиеДанные.ТипЦен);
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеСтратегииРасчетаСуммыСтратегияРасчетаСуммыПриИзменении()

Процедура ТабличноеПолеСтратегииРасчетаСуммыТипЦенНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.ТабличноеПолеСтратегииРасчетаСуммы.ТекущиеДанные.СтратегияРасчетаСуммы = 2 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("ТипыЦенНоменклатурыКонтрагентов", НСтр("ru = 'Номенклатуры контрагентов'"));
		СписокВыбора.Добавить("ТипыЦенНоменклатуры", НСтр("ru = 'Номенклатуры'"));

		ВыбранныйЭлемент = ВыбратьИзСписка(СписокВыбора, Элемент);

		Если ВыбранныйЭлемент = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(, Элемент);
		ФормаВыбора.Открыть();
		
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеСтратегииРасчетаСуммыТипЦенНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТабличноеПолеОтбор"

Процедура ТабличноеПолеОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отборы по свойствам должны быть обработаны специальным образом
	// Они определяются по представлению 
	Если Найти(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление, "св-во") Тогда

		Для каждого Назначение из мСоответствиеНазначений Цикл
			
			Если Найти(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление, Назначение.Ключ) > 0 Тогда
				
				Свойство = Назначение.Значение;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеОтчетами.ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);

	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеОтборЗначениеНачалоВыбора()

Процедура ТабличноеПолеОтборИмяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Выбор = ПолеНачалоВыбора(, ЭлементыФормы.ТабличноеПолеОтбор.ТекущиеДанные,, Истина);
	ПолеОбработкаВыбора(Элемент, Выбор, ЭлементыФормы.ТабличноеПолеОтбор, СтандартнаяОбработка);

КонецПроцедуры

Функция ПолеНачалоВыбора(Расшифровка = Неопределено, НачальноеЗначениеВыбора = Неопределено, Измерение = Ложь, Отбор = Ложь, Поле = Ложь, Порядок = Ложь, ДочерниеПоля = Истина) Экспорт
	
	ФормаВыборПоля = ПолучитьФорму("ФормаВыборПоля");
	ФормаВыборПоля.Расшифровка = Расшифровка;
	ФормаВыборПоля.НачальноеЗначениеВыбора = НачальноеЗначениеВыбора;
	
	ФормаВыборПоля.Измерение = Измерение;
	ФормаВыборПоля.Отбор = Отбор;
	ФормаВыборПоля.Поле = Поле;
	ФормаВыборПоля.Порядок = Порядок;
	ФормаВыборПоля.ДочерниеПоля = ДочерниеПоля;
	
	Возврат ФормаВыборПоля.ОткрытьМодально();
	
КонецФункции // ПолеНачалоВыбора()

Процедура ПолеОбработкаВыбора(Элемент, Выбор, ЭлементФормыТабличноеПоле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Выбор = Неопределено ИЛИ Выбор.Количество() = 0 Тогда
		
		ЭлементФормыТабличноеПоле.ЗакончитьРедактированиеСтроки(Истина);
		Возврат;
		
	КонецЕсли;
	
	Если Выбор.Количество() = 1 И ТипЗнч(Выбор[0].ПутьКДанным) <> Тип("Массив") Тогда
		
		Элемент.Значение = Выбор[0].ПутьКДанным;
		
	Иначе
		
		Для каждого ВыбранноеЗначение из Выбор Цикл
			
			Если ТипЗнч(ВыбранноеЗначение.ПутьКДанным) = Тип("Массив") Тогда
				
				Для каждого ПутьКДанным из ВыбранноеЗначение.ПутьКДанным Цикл
					
					ПостроительОтчета.Отбор.Добавить(ПутьКДанным);
					
				КонецЦикла;
				
			Иначе
			
				ПостроительОтчета.Отбор.Добавить(ПутьКДанным);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПолеОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельСформированныеДокументы"

Процедура КоманднаяПанельСформированныеДокументыУстановитьПометки(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Строка.Пометка = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыУстановитьПометки()

Процедура КоманднаяПанельСформированныеДокументыСнятьПометки(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Строка.Пометка = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыСнятьПометки()

Процедура КоманднаяПанельСформированныеДокументыПровести(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			ДокументОбъект = Строка.Документ.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено И НЕ ДокументОбъект.ПометкаУдаления Тогда
				
				Попытка
					
					Строка.Документ.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
					Строка.Пометка = Ложь;
					
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПровести()

Процедура КоманднаяПанельСформированныеДокументыПометитьНаУдаление(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			Если Строка.Документ.ПолучитьОбъект() <> Неопределено Тогда
				
				Строка.Документ.ПолучитьОбъект().УстановитьПометкуУдаления(НЕ Строка.ПометкаУдаления);
				Строка.Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПечать()

Процедура КоманднаяПанельСформированныеДокументыУдалить(Кнопка)
	
	КодВозврата = Вопрос(НСтр("ru = 'Внимание! Выбранные документы будут удалены без возможности восстановления
                          |и без проверки ссылочной целостности!'"), РежимДиалогаВопрос.ОКОтмена,,, НСтр("ru = 'Помощник планирования'"));
	
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			Если Строка.Документ.ПолучитьОбъект() <> Неопределено Тогда
				
				Строка.Документ.ПолучитьОбъект().Удалить();
				Строка.Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыУдалить()

Процедура КоманднаяПанельСформированныеДокументыПечать(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			ДокументОбъект = Строка.Документ.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено Тогда
				
				Попытка
					
					ДокументОбъект.Печать(ДокументОбъект.Метаданные().Имя);
					
				Исключение
					
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, (Строка(ДокументОбъект) + НСтр("ru = ', печать не выполнена'")));
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПечать()

Процедура КоманднаяПанельСформированныеДокументыОбновить(Кнопка)
	
	ОбновитьСостоянияДокументов();

КонецПроцедуры // КоманднаяПанельСформированныеДокументыОбновить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТабличноеПолеСформированныеДокументы"

Процедура ТабличноеПолеСформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОбновитьСостоянияДокументов();
	
	Попытка
		
		ОткрытьЗначение(ВыбраннаяСтрока.Документ);
		
	Исключение
	КонецПопытки;

КонецПроцедуры // ТабличноеПолеСформированныеДокументыВыбор()

Процедура ТабличноеПолеСформированныеДокументыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		ОформлениеСтроки.Ячейки.Проведен.ОтображатьТекст = Ложь;
		ОформлениеСтроки.Ячейки.Проведен.ОтображатьФлажок = Ложь;
		ОформлениеСтроки.Ячейки.Проведен.ОтображатьКартинку = Истина;
		
		Если ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления Тогда
			
			ОформлениеСтроки.Ячейки.Проведен.ИндексКартинки = 1;
			
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.ДокументПроведен Тогда
			
			ОформлениеСтроки.Ячейки.Проведен.ИндексКартинки = 0;
			
		Иначе
			
			ОформлениеСтроки.Ячейки.Проведен.ИндексКартинки = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ТабличноеПолеСформированныеДокументыПриПолученииДанных()

мНастройкаПериода = Новый НастройкаПериода;
мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;