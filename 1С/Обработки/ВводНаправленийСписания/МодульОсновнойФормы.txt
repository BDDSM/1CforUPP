Перем мПараметрыСвязиСтрокТЧ;
Перем мНовыйКлючСвязи;
Перем мИмяТабличнойЧастиНаправленияСписания;
Перем ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, ПрименениеУСН;
Перем ИспользоватьЗаказы;
Перем мСтрокаТабличнойЧасти;
Перем мВедениеУчетаЗатратПоПроектам;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура сохраняет в документе серийные номера.
//
Процедура ЗаписатьНаправленияСписанияВДокумент()
	
	Если Документ[ИмяТабличнойЧасти].Индекс(мСтрокаТабличнойЧасти) = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Документ[мИмяТабличнойЧастиНаправленияСписания].Загрузить(НаправленияСписания.Выгрузить());
	Документ.мПараметрыСвязиСтрокТЧ = мПараметрыСвязиСтрокТЧ;
	
	Если мНовыйКлючСвязи Тогда
		мСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьНаправленияСписанияВДокумент()

// Процедура заполняет табличую часть "Направления списания" по шаблону.
//
Процедура ЗаполнитьПоШаблону()
	
	ФормаВыбора = Справочники.НаправленияСписанияВыпущеннойПродукции.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.Заголовок = "Выберите шаблон направлений списания для заполнения";
	Если ЗначениеЗаполнено(Номенклатура.НаправлениеСписанияВыпущеннойПродукции) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Номенклатура.НаправлениеСписанияВыпущеннойПродукции;
	КонецЕсли;
	ШаблонНаправленийСписания = ФормаВыбора.ОткрытьМодально();
	
	Если ШаблонНаправленийСписания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ШаблонНаправленийСписания.Направления Цикл
		НоваяСтрока = НаправленияСписания.Добавить();
		НоваяСтрока.КлючСвязи = КлючСвязи;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура - устанавливает видимость элементов формы.
//
Процедура УстановитьВидимость()
	
	// Доступность элементов формы для указания сверхлимитного отпуска материалов.
	ИспользоватьЛимитыОтпускаМатериалов = УправлениеПроизводством.ИспользоватьЛимитыОтпускаМатериалов();
	ЭлементыФормы.НаправленияСписания.Колонки.ОтпущеноСверхЛимита.Видимость = ИспользоватьЛимитыОтпускаМатериалов И Документ.РазрешитьПревышениеЛимита;
	
	// Доступность колонки "Заказ".
	СтруктураКолонок = Новый Структура("Заказ");
	РаботаСДиалогами.УстановитьВидимостьКолонок(ЭлементыФормы.НаправленияСписания.Колонки, СтруктураКолонок, ИспользоватьЗаказы);
	
	ВедениеУчетаЗатратПоПроектам = ОтражатьВУправленческомУчете И мВедениеУчетаЗатратПоПроектам;
	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(ЭлементыФормы.НаправленияСписания.Колонки, , ВедениеУчетаЗатратПоПроектам);
	
	СтрокаРеквизитыУпрУчета = "НаправленияСписания.Подразделение";
	СтрокаРеквизитыБухУчета = "НаправленияСписания.ПодразделениеОрганизации, НаправленияСписания.СчетЗатрат";
	СтрокаРеквизитыНалУчета = "НаправленияСписания.СчетЗатратНУ";
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(Документ, ЭтаФорма, СтрокаРеквизитыУпрУчета, СтрокаРеквизитыБухУчета, СтрокаРеквизитыНалУчета);
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Перем ИсходнаяЕдиницаИзмерения;
	
	// Проверим тип реквизита формы СтруктураПараметровФормы. Должен быть "Структура".
	// При неверном типе не будем запускать подбор.
	Если ТипЗнч(СтруктураИсходныхПараметров) <> Тип("Структура") Тогда
		
		Отказ = Истина;
		Предупреждение("Не верный тип параметра ""СтруктураИсходныхПараметров""!
		               |Данная обработка вызывается из других процедур конфигурации.
		               |Вручную ее вызывать запрещено."); 
		Возврат;

	КонецЕсли;
	
	СозданиеНовыхСерийныхНомеров = Ложь;
	мИмяТабличнойЧастиПараметрыВыпускаПродукции = Неопределено;
	
	СтруктураИсходныхПараметров.Свойство("Номенклатура", 				Номенклатура);
	СтруктураИсходныхПараметров.Свойство("ХарактеристикаНоменклатуры", 	ХарактеристикаНоменклатуры);
	СтруктураИсходныхПараметров.Свойство("СерияНоменклатуры", 			СерияНоменклатуры);
	СтруктураИсходныхПараметров.Свойство("ЕдиницаИзмерения", 			ИсходнаяЕдиницаИзмерения);
	СтруктураИсходныхПараметров.Свойство("Количество", 					Количество);
	СтруктураИсходныхПараметров.Свойство("ДокументОбъект", 				Документ);
	СтруктураИсходныхПараметров.Свойство("ИмяТабличнойЧасти", 			ИмяТабличнойЧасти);
	СтруктураИсходныхПараметров.Свойство("ИмяТабличнойЧастиНаправленияСписания", мИмяТабличнойЧастиНаправленияСписания);
	СтруктураИсходныхПараметров.Свойство("НомерСтрокиТабличнойЧасти", 	НомерСтрокиТабличнойЧасти);
	СтруктураИсходныхПараметров.Свойство("ПараметрыСвязиСтрокТЧ",		мПараметрыСвязиСтрокТЧ);
	СтруктураИсходныхПараметров.Свойство("ПрименениеУСН",				ПрименениеУСН);
	СтруктураИсходныхПараметров.Свойство("ИспользоватьЗаказы",			ИспользоватьЗаказы);
	СтруктураИсходныхПараметров.Свойство("СтрокаТабличнойЧасти",		мСтрокаТабличнойЧасти);
	
	Если мИмяТабличнойЧастиНаправленияСписания = Неопределено Тогда
		мИмяТабличнойЧастиНаправленияСписания = "НаправленияСписания";
	КонецЕсли;
	
	Если НомерСтрокиТабличнойЧасти = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если мСтрокаТабличнойЧасти = Неопределено Тогда
		мСтрокаТабличнойЧасти = Документ[ИмяТабличнойЧасти].Получить(НомерСтрокиТабличнойЧасти - 1);
	КонецЕсли;
	
	Если ИспользоватьЗаказы = Неопределено Тогда
		ИспользоватьЗаказы = Истина;
	КонецЕсли;
	
	ОтражатьВУправленческомУчете = Документ.ОтражатьВУправленческомУчете;
	ОтражатьВБухгалтерскомУчете  = Документ.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете 	 = Документ.ОтражатьВНалоговомУчете;
	Организация					 = Документ.Организация;
	
	ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	Количество = ?(ЕдиницаИзмерения.Коэффициент <> 0, Количество * ИсходнаяЕдиницаИзмерения.Коэффициент / ЕдиницаИзмерения.Коэффициент, Количество);
	
	КлючСвязи = Документ[ИмяТабличнойЧасти].Получить(НомерСтрокиТабличнойЧасти - 1).КлючСвязи;
	Если КлючСвязи = 0 Тогда
		КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, Документ, ИмяТабличнойЧасти, Истина);
		мНовыйКлючСвязи = Истина;
	КонецЕсли;
	
	НаправленияСписания.Загрузить(Документ[мИмяТабличнойЧастиНаправленияСписания].Выгрузить());
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();
	ЭлементыФормы.НаправленияСписания.ОтборСтрок.КлючСвязи.Установить(КлючСвязи);
	ЭлементыФормы.НаправленияСписания.НастройкаОтбораСтрок.КлючСвязи.Доступность = Ложь;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриПовторномОткрытии" формы.
//
Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	Перем ИсходнаяЕдиницаИзмерения;
	
	Если ЭтаФорма.Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьНаправленияСписанияВДокумент();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Ложь;
	
	СтруктураИсходныхПараметров.Свойство("Номенклатура", 				Номенклатура);
	СтруктураИсходныхПараметров.Свойство("ХарактеристикаНоменклатуры", 	ХарактеристикаНоменклатуры);
	СтруктураИсходныхПараметров.Свойство("СерияНоменклатуры", 			СерияНоменклатуры);
	СтруктураИсходныхПараметров.Свойство("ЕдиницаИзмерения", 			ИсходнаяЕдиницаИзмерения);
	СтруктураИсходныхПараметров.Свойство("Количество", 					Количество);
	СтруктураИсходныхПараметров.Свойство("ДокументОбъект", 				Документ);
	СтруктураИсходныхПараметров.Свойство("ИмяТабличнойЧасти", 			ИмяТабличнойЧасти);
	СтруктураИсходныхПараметров.Свойство("НомерСтрокиТабличнойЧасти", 	НомерСтрокиТабличнойЧасти);
	СтруктураИсходныхПараметров.Свойство("ПараметрыСвязиСтрокТЧ",		мПараметрыСвязиСтрокТЧ);
	
	Если НомерСтрокиТабличнойЧасти = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	Количество = ?(ЕдиницаИзмерения.Коэффициент <> 0, Количество * ИсходнаяЕдиницаИзмерения.Коэффициент / ЕдиницаИзмерения.Коэффициент, Количество);
	
	КлючСвязи = Документ[ИмяТабличнойЧасти].Получить(НомерСтрокиТабличнойЧасти - 1).КлючСвязи;
	Если КлючСвязи = 0 Тогда
		КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, Документ, ИмяТабличнойЧасти, Истина);
		мНовыйКлючСвязи = Истина;
	КонецЕсли;
	
	ЭлементыФормы.НаправленияСписания.ОтборСтрок.КлючСвязи.Установить(КлючСвязи);
	
КонецПроцедуры // ПриПовторномОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьНаправленияСписанияВДокумент();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "ОК" командной панели формы.
//
Процедура КнопкаОКНажатие(Кнопка)
	
	ЗаписатьНаправленияСписанияВДокумент();
	ЭтаФорма.Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры // КнопкаОКНажатие()

// Процедура вызывается при нажатии кнопки "Заполнить из шаблона" командной панели
// табличного поля "ПараметрыВыпускаПродукции".
//
Процедура КоманднаяПанельНаправленияСписанияЗаполнитьИзШаблона(Кнопка)
	
	Отбор = Новый Структура("КлючСвязи", КлючСвязи);
	МассивСтрок = НаправленияСписания.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		Ответ = Вопрос("Направления списания продукции уже содержат строки. Очистить строки?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для Каждого Строка Из МассивСтрок Цикл
				НаправленияСписания.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПоШаблону();
	
КонецПроцедуры // КоманднаяПанельНаправленияСписанияЗаполнитьИзШаблона()

// Процедура вызывается при нажатии кнопки "Добавить из шаблона" командной панели
// табличного поля "ПараметрыВыпускаПродукции".
//
Процедура КоманднаяПанельНаправленияСписанияДобавитьИзШаблона(Кнопка)
	
	ЗаполнитьПоШаблону();
	
КонецПроцедуры // КоманднаяПанельНаправленияСписанияЗаполнитьИзШаблона()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// в строке табличной части "НаправленияСписания".
//
Процедура НаправленияСписанияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	ПустойХарактерЗатрат = НЕ ЗначениеЗаполнено(ХарактерЗатрат);
	
	Если ЭлементыФормы.НаправленияСписания.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.СчетЗатрат.Видимость 		= Не ПустойХарактерЗатрат;
	ОформлениеСтроки.Ячейки.СчетЗатрат.ТолькоПросмотр 	= ПустойХарактерЗатрат;
	ОформлениеСтроки.Ячейки.СчетЗатратНУ.Видимость 		= Не ПустойХарактерЗатрат;
	ОформлениеСтроки.Ячейки.СчетЗатратНУ.ТолькоПросмотр = ПустойХарактерЗатрат;
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ ПрименениеУСН));
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Продукция, ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	
КонецПроцедуры // НаправленияСписанияПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части НаправленияСписания.
//
Процедура НаправленияСписанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
			СтрокаТабличнойЧасти.СтатьяЗатрат = Номенклатура.СтатьяЗатрат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппаЗатрат;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
			СтрокаТабличнойЧасти.Коэффициент = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НаправленияСписанияПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода статьи затрат
// в строке табличной части "НаправленияСписания".
//
Процедура НаправленияСписанияСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НаправленияСписания.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
		СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТабличнойЧасти.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	Иначе
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат, "СчетЗатрат", "СчетЗатратНУ");
	КонецЕсли;
	
	УправлениеПроектами.УстановитьПроектПоУмолчанию(СтрокаТабличнойЧасти.Подразделение, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	
КонецПроцедуры // НаправленияСписанияСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "НаправленияСписания".
//
Процедура НаправленияСписанияСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НаправленияСписания.ТекущиеДанные;
	Колонки = ЭлементыФормы.НаправленияСписания.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             СтрокаТабличнойЧасти.Субконто1,
	                             Колонки.Субконто1,
	                             СтрокаТабличнойЧасти.Субконто2,
	                             Колонки.Субконто2,
	                             СтрокаТабличнойЧасти.Субконто3,
	                             Колонки.Субконто3);
								 
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, , "СчетЗатрат", "СчетЗатратНУ");
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ,
	                             СтрокаТабличнойЧасти.СубконтоНУ1,
	                             Колонки.СубконтоНУ1,
	                             СтрокаТабличнойЧасти.СубконтоНУ2,
	                             Колонки.СубконтоНУ2,
	                             СтрокаТабличнойЧасти.СубконтоНУ3,
	                             Колонки.СубконтоНУ3);
								 
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		СтрокаТабличнойЧасти.СтатьяЗатрат,
		Элемент.Значение,
		СтрокаТабличнойЧасти.Субконто1,
		СтрокаТабличнойЧасти.Субконто2,
		СтрокаТабличнойЧасти.Субконто3);
		
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		СтрокаТабличнойЧасти.СтатьяЗатрат,
		СтрокаТабличнойЧасти.СчетЗатратНУ,
		СтрокаТабличнойЧасти.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоНУ3);
	
КонецПроцедуры // НаправленияСписанияСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат.
//
Процедура НаправленияСписанияСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // НаправленияСписанияСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "НаправленияСписания".
//
Процедура НаправленияСписанияСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НаправленияСписания.ТекущиеДанные;
	Колонки = ЭлементыФормы.НаправленияСписания.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ,
	                             СтрокаТабличнойЧасти.СубконтоНУ1,
	                             Колонки.СубконтоНУ1,
	                             СтрокаТабличнойЧасти.СубконтоНУ2,
	                             Колонки.СубконтоНУ2,
	                             СтрокаТабличнойЧасти.СубконтоНУ3,
	                             Колонки.СубконтоНУ3);
								 
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		СтрокаТабличнойЧасти.СтатьяЗатрат,
		СтрокаТабличнойЧасти.СчетЗатратНУ,
		СтрокаТабличнойЧасти.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоНУ3);
	
КонецПроцедуры // НаправленияСписанияСчетЗатратНУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат НУ.
//
Процедура НаправленияСписанияСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // НаправленияСписанияСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
// табличной части "НаправленияСписания".
//
Процедура НаправленияСписанияПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 Элементыформы.НаправленияСписания.ТекущиеДанные.ПодразделениеОрганизации,
											 Элементыформы.НаправленияСписания.ТекущиеДанные.Подразделение,
											 Организация,
											 ЭтаФорма);
	
КонецПроцедуры // НаправленияСписанияПодразделениеОрганизацииНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделенияОрганизации
// табличной части "НаправленияСписания".
//
Процедура НаправленияСписанияПодразделениеОрганизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.НаправленияСписания.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПодразделениеОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,НалоговыйУчетУСН.ПрименениеУСН(Организация, Документ.Дата)) Тогда
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат, "СчетЗатрат", "СчетЗатратНУ");
	КонецЕсли;
	
КонецПроцедуры // НаправленияСписанияПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделения
// табличной части "НаправленияСписания".
//
Процедура НаправленияСписанияПодразделениеПриИзменении(Элемент)
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												   Элементыформы.НаправленияСписания.ТекущиеДанные.ПодразделениеОрганизации,
												   Элементыформы.НаправленияСписания.ТекущиеДанные.Подразделение,
												   Организация);
												   
	НаправленияСписанияПодразделениеОрганизацииПриИзменении(Элемент);
	
КонецПроцедуры // НаправленияСписанияПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "НаправленияСписания".
//
Процедура НаправленияСписанияЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	 	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "НаправленияСписания",, "Заказ");
	
КонецПроцедуры // НаправленияСписанияЗаказНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "НаправленияСписания".
//
Процедура НаправленияСписанияСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Не Номенклатура.Услуга Тогда
		РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Неопределено, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	КонецЕсли;
	
КонецПроцедуры // НаправленияСписанияСтатьяЗатратНачалоВыбора()

мНовыйКлючСвязи = Ложь;