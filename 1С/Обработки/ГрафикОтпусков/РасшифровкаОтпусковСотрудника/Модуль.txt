Перем мЖирныйШрифт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбновитьОтпуска()
	
	Отпуска.Очистить();
	
	Заголовок = "" + Физлицо + ", " + Формат(Год(ТекущаяДата), "ЧГ=") + " год";
	
	ЭлементыФормы.ФИО.Заголовок	= Физлицо;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Физлицо",	Физлицо);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.ВидДоговора,
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТрудовойДоговор
	|ПОМЕСТИТЬ ВТ_ФизическиеЛица
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И СотрудникиОрганизаций.Физлицо = &Физлицо
	|	И СотрудникиОрганизаций.Актуальность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтоТрудовойДоговор";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиОсновноеМесто.Сотрудник,
	|	РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА РаботникиОсновноеМесто.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОсновноеМестоРаботы
	|ПОМЕСТИТЬ ВТ_Сотрудники_ТрудовойДоговор
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТ_ФизическиеЛица ГДЕ ЭтоТрудовойДоговор)) КАК РаботникиОсновноеМесто
	|ГДЕ
	|	ВЫБОР
	|		КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ТекущаяДата
	|				И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
	|		ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
	|	КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтоОсновноеМестоРаботы,
	|	Физлицо";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СписокСотрудников.Сотрудник КАК Ссылка,
	|	СписокСотрудников.Сотрудник.Наименование КАК Наименование,
	|	СписокСотрудников.Физлицо КАК Физлицо,
	|	СписокСотрудников.ФизЛицо.Наименование КАК ФизлицоНаименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|		РаботникиОсновноеМесто.Физлицо КАК Физлицо,
	|		1 КАК Приоритет
	|	ИЗ
	|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
	|	
	|	ГДЕ
	|		РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
	|			
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОсновноеМесто.Физлицо
	|			
	|	ОБЪЕДИНИТЬ
	|			
	|	ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|		РаботникиСовместительство.Физлицо,
	|		2
	|	ИЗ
	|		ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
	|			
	|	ГДЕ
	|		НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы
	|		
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиСовместительство.Физлицо
	|			
	|	ОБЪЕДИНИТЬ
	|		
	|	ВЫБРАТЬ
	|		МАКСИМУМ(СотрудникиДУ.Сотрудник),
	|		СотрудникиДУ.Физлицо,
	|		ВЫБОР
	|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|				ТОГДА 3
	|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
	|				ТОГДА 4
	|			ИНАЧЕ 5
	|		КОНЕЦ
	|	ИЗ
	|		ВТ_ФизическиеЛица КАК СотрудникиДУ
	|			
	|	СГРУППИРОВАТЬ ПО
	|		СотрудникиДУ.Физлицо,
	|		ВЫБОР
	|			КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|				ТОГДА 3
	|			КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
	|				ТОГДА 4
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК СписокСотрудников
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						РаботникиОсновноеМесто.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиОсновноеМесто
	|			
	|					ГДЕ
	|						РаботникиОсновноеМесто.ЭтоОсновноеМестоРаботы
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						РаботникиСовместительство.Физлицо,
	|						2
	|					ИЗ
	|						ВТ_Сотрудники_ТрудовойДоговор КАК РаботникиСовместительство
	|			
	|					ГДЕ
	|						НЕ РаботникиСовместительство.ЭтоОсновноеМестоРаботы
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						ВЫБОР
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|								ТОГДА 3
	|							КОГДА СотрудникиДУ.ЭтоТрудовойДоговор
	|								ТОГДА 4
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|					ИЗ
	|						ВТ_ФизическиеЛица КАК СотрудникиДУ) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|	ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|		И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Сотрудник = Выборка.Ссылка;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	Отпуска.Физлицо КАК Сотрудник,
	|	Отпуска.ДатаНачала КАК ДатаНачала,
	|	Отпуска.ДатаОкончания,
	|	Отпуска.План КАК План,
	|	Отпуска.Утвержден,
	|	Отпуска.Регистратор,
	|	Отпуска.СостоялсяЧастично
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостояниеРаботников.ФизЛицо КАК Физлицо,
	|		СостояниеРаботников.Период КАК ДатаНачала,
	|		ДОБАВИТЬКДАТЕ(СостояниеРаботников.ПериодЗавершения, ДЕНЬ, -1) КАК ДатаОкончания,
	|		ЛОЖЬ КАК План,
	|		ИСТИНА КАК Утвержден,
	|		СостояниеРаботников.Регистратор КАК Регистратор,
	|		ЛОЖЬ КАК СостоялсяЧастично
	|	ИЗ
	|		РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|	ГДЕ
	|		СостояниеРаботников.ФизЛицо = &ФизЛицо
	|		И СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботника.ОтпускЕжегодный)
	|		И СостояниеРаботников.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|		И (СостояниеРаботников.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СостояниеРаботников.ПериодЗавершения МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПланированиеОтпускаРаботники.Сотрудник.Физлицо,
	|		ПланированиеОтпускаРаботники.ДатаНачала,
	|		ПланированиеОтпускаРаботники.ДатаОкончания,
	|		ИСТИНА,
	|		ВЫБОР
	|			КОГДА ПланированиеОтпускаРаботники.СостояниеУтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияУтверждения.Утвержден)
	|					И ПланированиеОтпускаРаботники.Ссылка.Проведен
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ПланированиеОтпускаРаботники.Ссылка,
	|		ВЫБОР
	|			КОГДА СостояниеРаботниковЧастично.Период ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПланированиеОтпуска.Работники КАК ПланированиеОтпускаРаботники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|			ПО ПланированиеОтпускаРаботники.Сотрудник.Физлицо = СостояниеРаботников.ФизЛицо
	|				И ПланированиеОтпускаРаботники.ДатаНачала = СостояниеРаботников.Период
	|				И (ПланированиеОтпускаРаботники.ДатаОкончания = ДОБАВИТЬКДАТЕ(СостояниеРаботников.ПериодЗавершения, ДЕНЬ, -1))
	|				И (СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботника.ОтпускЕжегодный))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботниковЧастично
	|			ПО ПланированиеОтпускаРаботники.Сотрудник.Физлицо = СостояниеРаботниковЧастично.ФизЛицо
	|				И (ПланированиеОтпускаРаботники.ДатаНачала МЕЖДУ СостояниеРаботниковЧастично.Период И ДОБАВИТЬКДАТЕ(СостояниеРаботниковЧастично.ПериодЗавершения, ДЕНЬ, -1)
	|					ИЛИ ПланированиеОтпускаРаботники.ДатаОкончания МЕЖДУ СостояниеРаботниковЧастично.Период И ДОБАВИТЬКДАТЕ(СостояниеРаботниковЧастично.ПериодЗавершения, ДЕНЬ, -1)
	|					ИЛИ СостояниеРаботниковЧастично.Период МЕЖДУ ПланированиеОтпускаРаботники.ДатаНачала И ПланированиеОтпускаРаботники.ДатаОкончания
	|					ИЛИ ДОБАВИТЬКДАТЕ(СостояниеРаботниковЧастично.ПериодЗавершения, ДЕНЬ, -1) МЕЖДУ ПланированиеОтпускаРаботники.ДатаНачала И ПланированиеОтпускаРаботники.ДатаОкончания)
	|				И (СостояниеРаботниковЧастично.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботника.ОтпускЕжегодный))
	|	ГДЕ
	|		ПланированиеОтпускаРаботники.ФизЛицо = &ФизЛицо
	|		И ПланированиеОтпускаРаботники.ДатаНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|		И ПланированиеОтпускаРаботники.ДатаОкончания МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД) И КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
	|		И СостояниеРаботников.Период ЕСТЬ NULL ) КАК Отпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала,
	|	План УБЫВ";
	
	ТаблицаПериодов = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки = 1;
	Для Каждого ТекущийПериод Из ТаблицаПериодов Цикл
		ТекущийПериод.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Строка = ТаблицаПериодов.Добавить();
	Строка.НомерСтроки		= -1;
	Строка.Сотрудник		= Физлицо;
	Строка.ДатаНачала		= ОбщегоНазначения.ПолучитьРабочуюДату();
	Строка.ДатаОкончания	= ОбщегоНазначения.ПолучитьРабочуюДату();
	Строка.План				= Ложь;
	
	ВыборкаПоОстаткам = ПроцедурыУправленияПерсоналомДополнительный.ПодготовитьДанныеПоУправленческимОтпускам(ТаблицаПериодов, Истина, , Истина);
	
	Пока ВыборкаПоОстаткам.Следующий() Цикл
		Если ВыборкаПоОстаткам.НомерСтроки = -1 Тогда // Подвал
			ОбщийОтпуск = ВыборкаПоОстаткам.Количество + ВыборкаПоОстаткам.ОстатокДополнительногоОтпуска;
			
			ЭлементыФормы.ДатаПриемаНаРаботу.Заголовок		= Формат(ВыборкаПоОстаткам.ДатаПриемаНаРаботу, "ДФ='д ММММ гггг ""г.""'");
			ЭлементыФормы.Сегодня.Заголовок					= "На сегодня, " + Формат(ОбщегоНазначения.ПолучитьРабочуюДату(), "ДФ='д ММММ'");
			Если ОбщийОтпуск >= 0 Тогда
				ЭлементыФормы.НадписьНеиспользованныйОтпуск.Заголовок	= "Неиспользованный отпуск";
				ЭлементыФормы.НеиспользованныйОтпуск.Заголовок			= Строка(ОбщийОтпуск) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОбщийОтпуск);
			Иначе
				ЭлементыФормы.НадписьНеиспользованныйОтпуск.Заголовок	= "Задолженность по отпуску";
				ЭлементыФормы.НеиспользованныйОтпуск.Заголовок	= Строка(-ОбщийОтпуск) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",(-ОбщийОтпуск));
			КонецЕсли;
			ЭлементыФормы.ДополнительныйОтпуск.Заголовок	= Строка(ВыборкаПоОстаткам.ОстатокДополнительногоОтпуска) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ВыборкаПоОстаткам.ОстатокДополнительногоОтпуска);
			
		Иначе
			НайденнаяСтрока = ТаблицаПериодов.Найти(ВыборкаПоОстаткам.НомерСтроки, "НомерСтроки");
			
			Строка = Отпуска.Вставить(Отпуска.Количество() - 4);
			Строка.Документ			= НайденнаяСтрока.Регистратор;
			Строка.ДатаНачала		= ВыборкаПоОстаткам.ДатаНачала;
			Строка.ДатаОкончания	= ВыборкаПоОстаткам.ДатаОкончания;
			Строка.Текст			= Формат(ВыборкаПоОстаткам.ДатаНачала,	"ДФ='d MMMM yyyy'") + " - " + Формат(ВыборкаПоОстаткам.ДатаОкончания,	"ДФ='d MMMM yyyy'");
			
			Комментарий = ПроцедурыУправленияПерсоналомДополнительный.ВернутьОписаниеОтпуска(ВыборкаПоОстаткам) + ". ";
			
			Если НайденнаяСтрока.План Тогда
				Строка.СтрокаОформления	= ?(НайденнаяСтрока.Утвержден, "З", "Ср");
				Если ВыборкаПоОстаткам.ДатаОкончания < ОбщегоНазначения.ПолучитьРабочуюДату() Тогда
					Комментарий = Комментарий + ?(НайденнаяСтрока.Утвержден, "Утвержден, " + ?(НайденнаяСтрока.СостоялсяЧастично, "состоялся частично", "не состоялся"), "Не был утвержден");
				Иначе
					Комментарий = Комментарий + ?(НайденнаяСтрока.Утвержден, "Утвержден", "Не утвержден");
				КонецЕсли;
			Иначе
				Комментарий = Комментарий + ?(ВыборкаПоОстаткам.ДатаОкончания < ОбщегоНазначения.ПолучитьРабочуюДату(), "Состоялся", "Состоится");
				Строка.СтрокаОформления	= "Сн";
			КонецЕсли;
			
			Строка.Описание	= Комментарий;
		КонецЕсли;
	КонецЦикла;
	
	Если Отпуска.Количество() > 0 Тогда
		ЭлементыФормы.ТабличноеПолеОтпуска.ТекущаяСтрока = Отпуска[Отпуска.Количество()-1];
	КонецЕсли;
		
	Если ПустаяСтрока(ЭлементыФормы.ДатаПриемаНаРаботу.Заголовок) Тогда
		ЭлементыФормы.НадписьДатаПриемаНаРаботу.Заголовок	= "Не работает";
	КонецЕсли;
	
	Отпуска.Сортировать("ДатаНачала ВОЗР");
	
КонецПроцедуры

Процедура ОткрытьДокумент(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДанныеСтроки.Документ.ПолучитьФорму();
	
	Если ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.ПланированиеОтпуска") Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Сотрудник",		Сотрудник);
		СтруктураОтбора.Вставить("ДатаНачала",		ДанныеСтроки.ДатаНачала);
		СтруктураОтбора.Вставить("ДатаОкончания",	ДанныеСтроки.ДатаОкончания);
		ТекущаяСтрока = Форма.Работники.НайтиСтроки(СтруктураОтбора);
		
		Если ТекущаяСтрока.Количество() > 0 Тогда
			Форма.ЭлементыФормы.Работники.ТекущаяСтрока = ТекущаяСтрока[0];
		КонецЕсли;
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ОбновитьОтпуска();
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	ОбновитьОтпуска();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьПлановыйОтпуск" Тогда
		ОбновитьОтпуска();
		
	ИначеЕсли ИмяСобытия = "ОбновитьФактическийОтпуск" Тогда
		ОбновитьОтпуска();
		
	ИначеЕсли ИмяСобытия = "ИзмененыОстаткиОтпусков" Тогда
		ОбновитьОтпуска();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыЗапланироватьОтпуск(Кнопка)
	
	Форма = Документы.ПланированиеОтпуска.ПолучитьФормуНовогоДокумента();
	
	Строка = Форма.Работники.Добавить();
	Строка.Сотрудник			= Сотрудник;
	Строка.СостояниеУтверждения	= Перечисления.СостоянияУтверждения.НеУтвержден;
	
	Форма.СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.НеУтвержденНеПроведен;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыПравоНаДополнительныеДниОтпуска(Кнопка)
	
	Форма = Документы.ПравоНаДополнительныеДниОтпуска.ПолучитьФормуНовогоДокумента();
	
	Строка = Форма.Работники.Добавить();
	Строка.Сотрудник	= Сотрудник;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыЗарегистрироватьФактическийОтпуск(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.ТабличноеПолеОтпуска.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.СтрокаОформления <> "З" Тогда
		Предупреждение("Зарегистрировать фактический отпуск можно только для запланированного утвержденного отпуска!");
		Возврат;
	КонецЕсли;
	
	НовыйДокумент = Документы.ОтсутствияНаРабочемМесте.ПолучитьФормуНовогоДокумента();
	Если ТипЗнч(НовыйДокумент) = Тип("Форма") Тогда
		НовыйДокумент.Физлицо			= Физлицо;
		НовыйДокумент.ДатаНачала		= ДанныеСтроки.ДатаНачала;
		НовыйДокумент.ДатаОкончания		= ДанныеСтроки.ДатаОкончания;
		НовыйДокумент.ПричинаОтсутствия	= Справочники.ПричиныОтсутствияНаРаботе.ЕжегодныйОтпуск;
		
	Иначе // Управляемая форма
		НовыйДокумент.Объект.Физлицо			= Физлицо;
		НовыйДокумент.Объект.ДатаНачала			= ДанныеСтроки.ДатаНачала;
		НовыйДокумент.Объект.ДатаОкончания		= ДанныеСтроки.ДатаОкончания;
		НовыйДокумент.Объект.ПричинаОтсутствия	= Справочники.ПричиныОтсутствияНаРаботе.ЕжегодныйОтпуск;
		
	КонецЕсли;
	НовыйДокумент.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыСправкаПоОтпуску(Кнопка)
	
	ФормированиеПечатныхФормДополнительный.ПечатьСправкиПоУправленческимОтпускамСотрудника(Физлицо, Сотрудник);
	
КонецПроцедуры

Процедура ДействияФормыОстаткиОтпусковСотрудника(Кнопка)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерСтроки",		Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("Сотрудник",		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",		Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания",	Новый ОписаниеТипов("Дата"));
	
	Строка = ТаблицаПериодов.Добавить();
	Строка.НомерСтроки		= -1;
	Строка.Сотрудник		= Физлицо;
	Строка.ДатаНачала		= ОбщегоНазначения.ПолучитьРабочуюДату();
	Строка.ДатаОкончания	= ОбщегоНазначения.ПолучитьРабочуюДату();
	
	Выборка = ПроцедурыУправленияПерсоналомДополнительный.ПодготовитьДанныеПоУправленческимОтпускам(ТаблицаПериодов, Истина, , , , Ложь);
	
	Если Выборка.Следующий() Тогда
		
		// Если остатки не актуальные, то дата остатков должна быть в прошедшем времени
		// Может сложиться ситуация, когда текущей или будущей датой ввели остатки, но не указали в них
		// предыдущий рабочий год. В этом случае остатки не будут считаться актуальными
		Если Выборка.НеАктуальный И Выборка.ДатаОстатков < ОбщегоНазначения.ПолучитьРабочуюДату() Тогда
			Форма = Справочники.ОстаткиОтпусков.ПолучитьФормуНовогоЭлемента(, ЭтаФорма);
			Форма.Физлицо			= Физлицо;
			Форма.ДатаАктуальности	= ОбщегоНазначения.ПолучитьРабочуюДату();
			
			ВыборкаПоРабочимГодам = Выборка.Выбрать();
			Пока ВыборкаПоРабочимГодам.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Форма.Остатки.Добавить(), ВыборкаПоРабочимГодам);
			КонецЦикла;
			
			Форма.ОткрытьМодально();
			
		Иначе
			Форма = Выборка.Ссылка.ПолучитьОбъект().ПолучитьФорму(, ЭтаФорма);
			Форма.ОткрытьМодально();
			
		КонецЕсли;
		
	Иначе
		Форма = Справочники.ОстаткиОтпусков.ПолучитьФормуНовогоЭлемента(, ЭтаФорма);
		Форма.Физлицо			= Физлицо;
		Форма.ДатаАктуальности	= ОбщегоНазначения.ПолучитьРабочуюДату();
		
		Строка = Форма.Остатки.Добавить();
		Строка.ДатаНачалаРабочегоГода		= НачалоГода(ДобавитьМесяц(ОбщегоНазначения.ПолучитьРабочуюДату(), -12));
		Строка.ДатаОкончанияРабочегоГода	= КонецГода(Строка.ДатаНачалаРабочегоГода);
		
		Форма.ОткрытьМодально();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОткрытьДокумент(Кнопка)
	
	ОткрытьДокумент(ЭлементыФормы.ТабличноеПолеОтпуска.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Отпуска

Процедура ТабличноеПолеОтпускаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.СтрокаОформления = "З" Тогда
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки	= 2;
		
	ИначеЕсли ДанныеСтроки.СтрокаОформления = "Ср" Тогда
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки	= 1;
		
	ИначеЕсли ДанныеСтроки.СтрокаОформления = "Сн" Тогда
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки	= 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеОтпускаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОткрытьДокумент(ЭлементыФормы.ТабличноеПолеОтпуска.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мЖирныйШрифт = Новый Шрифт(, , Истина);