////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Переменные механизма встроенной справки
Перем ОтображатьСправкуФормы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функции справки формы

Процедура ПодготовитьСправкуФормы()
	
	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());
	
	ЭлементыФормы.ПанельСправкиФормы.ЦветРамки			= РаботаСДиалогами.ВстроеннаяСправка_ЦветРамки();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветФона	= РаботаСДиалогами.ВстроеннаяСправка_ЦветФона();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветТекста	= РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки();
	
	КартинкаОтпускПлановыйУтвержденный		= РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.ОтпускПлановыйУтвержденный, ЭлементыФормы.ВстроеннаяСправка);
	КартинкаОтпускПлановыйНеутвержденный	= РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.ОтпускПлановыйНеутвержденный, ЭлементыФормы.ВстроеннаяСправка);
	КартинкаОтпускФактический				= РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.ОтпускФактический, ЭлементыФормы.ВстроеннаяСправка);
	
	ЦветНадписиМероприятия	= "#FFEBCD";
	
	ТекстМакетаВстроеннойСправки =
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|
	|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
	|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
	|		<DIV><IMG align=center src="+КартинкаОтпускПлановыйУтвержденный+"> - Утвержденные</DIV>
	|		<DIV><IMG align=center src="+КартинкаОтпускПлановыйНеутвержденный+"> - Неутвержденные</DIV>
	|		<DIV><IMG align=center src="+КартинкаОтпускФактический+"> - Фактические</DIV>
	|		<BR>
	|		<DIV><font style='background="+ЦветНадписиМероприятия+"'>Бледно-миндальным</font> цветом фона на диаграмме выделяются общефирменные мероприятия.</DIV>
	|		<BR><BR>
	|		<DIV>Двойной щелчок по сотруднику откроет расшифровку отпусков сотрудника за выбранный год.</DIV>
	|		<BR>
	|		<DIV>Двойной щелчок по интервалу откроет документ, которым зарегистрирован данный интервал.</DIV>
	|		<BR>
	|		<DIV>Зарегистрировать фактический отпуск по графику можно из формы расшифровки отпусков сотрудника за выбранный год.</DIV>
	|	</FONT></BODY>
	|</HTML>";
	
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);
	
КонецПроцедуры

Процедура ОбновитьСправкуФормы(ПолеДанных = Неопределено)
	
	ДокHTML = ЭлементыФормы.ВстроеннаяСправка.Документ;
	
КонецПроцедуры // ОбновитьСправкуФормы()

Процедура УстановитьВидимостьСправкиФормы(ОбновитьСправку = Истина)
	
	РаботаСДиалогамиЗК.ИзменитьВидимостьПанелиПоГоризонтали(ЭтаФорма, ОтображатьСправкуФормы, "ОсновнаяПанель", "СправкиФормы");
	
	ЭлементыФормы.КоманднаяПанельСправкиФормы.Кнопки.ПереключениеСправкиФормы.Пометка = ОтображатьСправкуФормы;
	
	Если ОтображатьСправкуФормы И ОбновитьСправку Тогда
		ОбновитьСправкуФормы();
	КонецЕсли;
	
КонецПроцедуры


// Функции ДЛЯ отрисовки диаграммы Ганта

// Функция возвращает структуру для расшифровки
// Расшифровка предназначена для идентификации документа, которым введен отпуск
// Идентификация нужна для создания протокола работы
//
Функция СформироватьРасшифровку(Регистратор, Сотрудник, ДатаНачала, ДатаОкончания, Утвержден = Истина) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Регистратор",	Регистратор);
	Структура.Вставить("Сотрудник",		Сотрудник);
	Структура.Вставить("ДатаНачала",	ДатаНачала);
	Структура.Вставить("ДатаОкончания",	ДатаОкончания);
	Структура.Вставить("Утвержден",		Утвержден);
	
	Возврат Структура;
	
КонецФункции

// Процедура рекурсивно получает свернутые точки и добавляет их в массив
//
Процедура ДобавитьСвернутыеТочки(ДиаграммаГанта, Точки, МассивСвернутыхТочек)
	
	Для Каждого Точка Из Точки Цикл
		Если Не ДиаграммаГанта.РазвернутаТочка(Точка) Тогда
			МассивСвернутыхТочек.Добавить(Точка.Значение);
		КонецЕсли;
		ДобавитьСвернутыеТочки(ДиаграммаГанта, Точка.Точки, МассивСвернутыхТочек);
	КонецЦикла;
	
КонецПроцедуры

// Процедура рекурсивно разворачивает точки, и оставляет свернутыми те, которые указаны в массиве
//
Процедура РазвернутьТочки(ДиаграммаГанта, Точки, МассивСвернутыхТочек)
	
	Для Каждого Точка Из Точки Цикл
		Если МассивСвернутыхТочек.Найти(Точка.Значение) = Неопределено Тогда
			ДиаграммаГанта.РазвернутьТочку(Точка, Ложь);
		Иначе
			ДиаграммаГанта.СвернутьТочку(Точка, Ложь);
		КонецЕсли;
		
		РазвернутьТочки(ДиаграммаГанта, Точка.Точки, МассивСвернутыхТочек);
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет пустые точки с подразделениями
Процедура УдалитьПустыеТочки(ДиаграммаГанта, Точки, ЕстьПустыеПодразделения)
	
	Для Каждого Точка Из Точки Цикл
		Если Точка.Точки.Количество() = 0 И Точка.Расшифровка = Неопределено Тогда
			Точки.Удалить(Точка);
			ЕстьПустыеПодразделения = Истина;
			Продолжить;
		КонецЕсли;
		
		УдалитьПустыеТочки(ДиаграммаГанта, Точка.Точки, ЕстьПустыеПодразделения);
	КонецЦикла;
	
КонецПроцедуры

// Функции отрисовки диаграммы Ганта

// Процедура обновляет диаграмму Ганта, вызывая процедуру обновления в зависимости от режима планирования
//
Процедура ОбновитьДиаграммуГанта()
	
	ДиаграммаГанта = ЭлементыФормы.ДиаграммаГантаГрафикОтпусков;
	
	ДиаграммаГанта.Обновление = Ложь;
	
	ДиаграммаГанта.ИнтервалыФона.Очистить();
	
	ДиаграммаГанта.УстановитьПолныйИнтервал(НачалоГода(ТекущаяДата), КонецГода(ТекущаяДата));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода",			НачалоГода(ТекущаяДата));
	Запрос.УстановитьПараметр("КонецПериода",			КонецГода(ТекущаяДата));
	
	// МЕРОПРИЯТИЯ
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Мероприятия.ДатаНачала КАК ДатаНачала,
	|	Мероприятия.ДатаОкончания
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.ДатаНачала >= &НачалоПериода
	|	И Мероприятия.ДатаОкончания <= &КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Интервал = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоДня(Выборка.ДатаНачала), КонецДня(Выборка.ДатаОкончания));
		Интервал.Цвет	= РаботаСДиалогамиДополнительный.ГрафикОтпусков_ЦветМероприятий();
	КонецЦикла;
	
	
	// ПЕРВОНАЧАЛЬНАЯ ОТРИСОВКА ДИАГРАММЫ ГАНТА
	
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Подразделение",			Подразделение);
	Запрос.УстановитьПараметр("ТекущаяДата",			ТекущаяДата);
	
	// Все найденные физические лица будут участвовать в отборе для фактических и запланированных отпусков
	МассивФизлицДляОтбора = Новый Массив;
	
	РеквизитУпорядочиванияФизическихЛиц = ГрафикОтпусковПереопределяемый.ПолучитьРеквизитУпорядочиванияФизическихЛиц();
	
	Если РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		Если ОтборПоРуководителям Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫРАЗИТЬ(ОтветственныеЛица.СтруктурнаяЕдиница КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
			|	ВЫРАЗИТЬ(ОтветственныеЛица.СтруктурнаяЕдиница КАК Справочник.ПодразделенияОрганизаций).Родитель КАК ПодразделениеРодитель,
			|	ОтветственныеЛица.ФизическоеЛицо.Наименование КАК ФИО,
			|	ОтветственныеЛица.ФизическоеЛицо КАК Физлицо
			|ПОМЕСТИТЬ ОтветственныеЛицаОрганизаций
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
			|			&КонецПериода,
			|			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
			|				И СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
			|				" + ?(Не Организация.Пустая(), "И СтруктурнаяЕдиница.Владелец = &Организация", "") + "
			|															) КАК ОтветственныеЛица
			|
			|" + ?(Не Организация.Пустая(), "ГДЕ ВЫРАЗИТЬ(ОтветственныеЛица.СтруктурнаяЕдиница КАК Справочник.ПодразделенияОрганизаций).Владелец = &Организация", "") + "
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Подразделение,
			|	ПодразделениеРодитель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтветственныеЛица.Подразделение.Владелец.Наименование КАК Организация,
			|	ОтветственныеЛица.Подразделение.Наименование КАК Подразделение,
			|	ОтветственныеЛица.ФИО КАК ФИО,
			|	ОтветственныеЛица.Физлицо,
			|	ОтветственныеЛицаРодителя.ФИО КАК ФИОРодитель,
			|	ОтветственныеЛицаРодителя.Физлицо КАК ФизлицоРодитель
			|ИЗ
			|	ОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаРодителя
			|		ПО ОтветственныеЛица.ПодразделениеРодитель = ОтветственныеЛицаРодителя.Подразделение
			|
			|УПОРЯДОЧИТЬ ПО
			|	Организация,
			|	ОтветственныеЛица.Подразделение.Порядок ИЕРАРХИЯ,
			|	ОтветственныеЛица.Физлицо." + РеквизитУпорядочиванияФизическихЛиц;
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Подразделения.Владелец.Наименование КАК Организация,
			|	Подразделения.Владелец КАК ОрганизацияСсылка,
			|	Подразделения.Наименование КАК Подразделение,
			|	Подразделения.Родитель.Наименование КАК ПодразделениеРодитель,
			|	РаботникиСрезПоследних.Сотрудник.Наименование КАК ФИО,
			|	РаботникиСрезПоследних.Сотрудник.Физлицо КАК Физлицо
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК Подразделения
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|				&КонецПериода,
			|				Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|				И Сотрудник.Актуальность
			|				" + ?(Не Организация.Пустая(), " И Организация = &ГоловнаяОрганизация", "") + ") КАК РаботникиСрезПоследних
			|		ПО Подразделения.Ссылка = РаботникиСрезПоследних.ПодразделениеОрганизации
			|			И РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|			И РаботникиСрезПоследних.ОбособленноеПодразделение" + ?(Не Организация.Пустая(), " = &Организация", " <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") + "
			|			" + ?(Не Организация.Пустая(), "И Подразделения.Владелец = &Организация", "") + "
			|" + ?(Не Организация.Пустая(), "ГДЕ Подразделения.Владелец = &Организация", "") + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	Организация,
			|	Подразделения.Родитель.Порядок ИЕРАРХИЯ,
			|	Подразделения.Порядок ИЕРАРХИЯ,
			|	РаботникиСрезПоследних.Сотрудник.Физлицо." + РеквизитУпорядочиванияФизическихЛиц;
			
		КонецЕсли;
		
	Иначе
		Если ОтборПоРуководителям Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтветственныеЛицаСрез.СтруктурнаяЕдиница.Наименование КАК Подразделение,
			|	ОтветственныеЛицаСрез.СтруктурнаяЕдиница КАК ПодразделениеСсылка,
			|	ОтветственныеЛицаСрез.СтруктурнаяЕдиница.Родитель КАК ПодразделениеРодитель,
			|	ОтветственныеЛицаСрез.ФизическоеЛицо.Наименование КАК ФИО,
			|	ОтветственныеЛицаСрез.ФизическоеЛицо КАК Физлицо
			|ПОМЕСТИТЬ ВТОтветственныеЛица
			|ИЗ
			|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&КонецПериода, СтруктурнаяЕдиница В ИЕРАРХИИ (&Подразделение)) КАК ОтветственныеЛицаСрез
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПодразделениеСсылка,
			|	ПодразделениеРодитель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	""Предприятие"" КАК Организация,
			|	ОтветственныеЛицаСрез.Подразделение КАК Подразделение,
			|	ОтветственныеЛицаСрез.ПодразделениеСсылка КАК ПодразделениеСсылка,
			|	ОтветственныеЛицаСрез.ФИО КАК ФИО,
			|	ОтветственныеЛицаСрез.Физлицо КАК Физлицо,
			|	ОтветственныеЛицаРодителяСрез.ФИО КАК ФИОРодитель,
			|	ОтветственныеЛицаРодителяСрез.Физлицо КАК ФизЛицоРодитель
			|ИЗ
			|	ВТОтветственныеЛица КАК ОтветственныеЛицаСрез
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ОтветственныеЛицаРодителяСрез
			|		ПО ОтветственныеЛицаСрез.ПодразделениеРодитель = ОтветственныеЛицаРодителяСрез.ПодразделениеСсылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОтветственныеЛицаСрез.ПодразделениеСсылка.Порядок ИЕРАРХИЯ,
			|	ОтветственныеЛицаСрез.Физлицо." + РеквизитУпорядочиванияФизическихЛиц;
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	""Предприятие"" КАК Организация,
			|	Работники.Подразделение.Наименование КАК Подразделение,
			|	Работники.ПодразделениеРодитель.Наименование КАК ПодразделениеРодитель,
			|	Работники.Физлицо.Наименование КАК ФИО,
			|	Работники.Физлицо
			|ИЗ
			|	(ВЫБРАТЬ
			|		Подразделения.Ссылка КАК Подразделение,
			|		Подразделения.Родитель КАК ПодразделениеРодитель,
			|		РаботникиСрезПоследних.ФизЛицо КАК Физлицо
			|	ИЗ
			|		Справочник.Подразделения КАК Подразделения
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(&КонецПериода, ) КАК РаботникиСрезПоследних
			|			ПО (РаботникиСрезПоследних.Подразделение В ИЕРАРХИИ (&Подразделение))
			|				И Подразделения.Ссылка = РаботникиСрезПоследних.Подразделение
			|				И (РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
			|	ГДЕ
			|		Подразделения.Ссылка В ИЕРАРХИИ(&Подразделение)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение,
			|		СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение.Родитель,
			|		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|				&КонецПериода,
			|				Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|					И Сотрудник.Актуальность
			|					И (НЕ Сотрудник.Физлицо В
			|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|								РаботникиСрезПоследних.ФизЛицо
			|							ИЗ
			|								РегистрСведений.Работники.СрезПоследних(&КонецПериода, ) КАК РаботникиСрезПоследних
			|							ГДЕ
			|								РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))) КАК РаботникиОрганизацийСрезПоследних
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			|			ПО РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
			|				И (СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение В ИЕРАРХИИ (&Подразделение))
			|	ГДЕ
			|		РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК Работники
			|
			|УПОРЯДОЧИТЬ ПО
			|	Работники.ПодразделениеРодитель.Порядок ИЕРАРХИЯ,
			|	Работники.Подразделение.Порядок ИЕРАРХИЯ,
			|	Работники.Физлицо." + РеквизитУпорядочиванияФизическихЛиц;
			
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивСвернутыхТочек = Новый Массив;
	
	ДобавитьСвернутыеТочки(ДиаграммаГанта, ДиаграммаГанта.Точки, МассивСвернутыхТочек);
	
	ДиаграммаГанта.Очистить();
	
	СерияПлан = ДиаграммаГанта.УстановитьСерию("План");
	СерияФакт = ДиаграммаГанта.УстановитьСерию("Факт");
	
	// Сначала выведем структуру предприятия
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Если (РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц) И Организация.Пустая() И Не ОтборПоРуководителям Тогда
			Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Организация);
			Точка.Текст	= Выборка.Организация;
		КонецЕсли;
		
		Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
			
			Если Не ОтборПоРуководителям Тогда
				Если Организация.Пустая() Тогда
					Если ЗначениеЗаполнено(Выборка.ПодразделениеРодитель) Тогда
						Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Подразделение, Выборка.ПодразделениеРодитель);
					Иначе
						Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Подразделение, Выборка.Организация);
					КонецЕслИ;
				Иначе
					Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Подразделение, Выборка.ПодразделениеРодитель);
				КонецЕсли;
				Точка.Текст	= Выборка.Подразделение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Затем сотрудников
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФИО = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		МассивФизлицДляОтбора.Добавить(Выборка.Физлицо);
		
		Если ОтборПоРуководителям Тогда
			Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Физлицо, Выборка.ФизлицоРодитель);
		Иначе
			Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Физлицо, Выборка.Подразделение);
		КонецЕсли;
		
		Точка.Текст			= Выборка.ФИО;
		Точка.Расшифровка	= Новый Структура("Физлицо, ФИО", Выборка.Физлицо, Выборка.ФИО);
	КонецЦикла;
	
	// Необходимо удалить пустые точки - подразделения
	// Процедура выполняется в цикле, так как после удаления пустых точек - детей, родительская точка тоже станет пустой
	ЕстьПустыеПодразделения = Истина;
	Пока ЕстьПустыеПодразделения Цикл
		ЕстьПустыеПодразделения = Ложь;
		
		УдалитьПустыеТочки(ДиаграммаГанта, ДиаграммаГанта.Точки, ЕстьПустыеПодразделения);
	КонецЦикла;
	
	Если Не ОтборПоРуководителям Тогда
		Выборка = Неопределено;
		
		Если РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(Сотрудники.ОбособленноеПодразделение.Наименование, ""Без организации"") КАК Организация,
			|	Сотрудники.ОбособленноеПодразделение КАК ОрганизацияСсылка,
			|	Сотрудники.Физлицо.Наименование КАК ФИО,
			|	Сотрудники.Физлицо
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Актуальность
			|	И (НЕ Сотрудники.Физлицо В
			|				(ВЫБРАТЬ
			|					Работники.ФизЛицо
			|				ИЗ
			|					РегистрСведений.Работники.СрезПоследних(&КонецПериода, ) КАК Работники
			|				ГДЕ
			|					Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|				
			|				ОБЪЕДИНИТЬ
			|				
			|				ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					Работники.Сотрудник.Физлицо
			|				ИЗ
			|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, (НЕ Сотрудник.Физлицо В
			|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|									Работники.ФизЛицо
			|								ИЗ
			|									РегистрСведений.Работники.СрезПоследних(&КонецПериода, ) КАК Работники
			|								ГДЕ
			|									Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))) КАК Работники
			|				ГДЕ
			|					Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))";
			Если Организация.Пустая() Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И (Сотрудники.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|		И Сотрудники.ОбособленноеПодразделение <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|	ИЛИ Сотрудники.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий))";
			Иначе
			Запрос.Текст = Запрос.Текст + "
			|	И Сотрудники.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
			|	И Сотрудники.ОбособленноеПодразделение = &Организация";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	" + ?(Организация.Пустая(), "Организация,", "") + "
			|	ФИО";
			Выборка = Запрос.Выполнить().Выбрать();
			
		ИначеЕсли Подразделение.Пустая() Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	""Предприятие"" КАК Организация,
			|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ОрганизацияСсылка,
			|	Сотрудники.Физлицо.Наименование КАК ФИО,
			|	Сотрудники.Физлицо
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Актуальность
			|	И (НЕ Сотрудники.Физлицо В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					Работники.ФизЛицо
			|				ИЗ
			|					РегистрСведений.Работники.СрезПоследних(&КонецПериода, ) КАК Работники
			|				ГДЕ
			|					Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|				
			|				ОБЪЕДИНИТЬ
			|				
			|				ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					Работники.Сотрудник.Физлицо
			|				ИЗ
			|					РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, ) КАК Работники
			|				ГДЕ
			|					Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФИО";
			Выборка = Запрос.Выполнить().Выбрать();
			
		КонецЕсли;
		
		Если Выборка <> Неопределено И Выборка.Количество() > 0 Тогда
			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
				Если (РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц) И Организация.Пустая() И НЕ Выборка.ОрганизацияСсылка.Пустая() Тогда
					Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Организация);
					Точка.Текст	= Выборка.Организация;
					
					ПодразделениеНаименование = "Без подразделения";
			
				Иначе
					Если (РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц) И Выборка.ОрганизацияСсылка.Пустая() Тогда
						ПодразделениеНаименование = "Без организации";
					Иначе
						ПодразделениеНаименование = "Без подразделения";
					КонецЕсли;
				
				КонецЕсли;
				
				ПодразделениеСсылка = Выборка.Организация + ПодразделениеНаименование;
				Точка = ДиаграммаГанта.УстановитьТочку(ПодразделениеСсылка, Выборка.Организация);
				
				Точка.Текст	= ПодразделениеНаименование;
				
				Пока Выборка.Следующий() Цикл
					Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Физлицо, ПодразделениеСсылка);
					
					МассивФизлицДляОтбора.Добавить(Выборка.Физлицо);
					
					Точка.Текст			= Выборка.ФИО;
					Точка.Расшифровка	= Новый Структура("Физлицо, ФИО", Выборка.Физлицо, Выборка.ФИО);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	РазвернутьТочки(ДиаграммаГанта, ДиаграммаГанта.Точки, МассивСвернутыхТочек);
	
	
	Запрос.УстановитьПараметр("МассивФизлиц",	МассивФизлицДляОтбора);
	
	// ПЛАНИРУЕМЫЕ ОТПУСКА
	Запрос.Текст = ГрафикОтпусковПереопределяемый.ПолучитьТекстЗапросаГрафикаОтпусков();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФИО") Цикл
		
		Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Физлицо);
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ДатаНачала = NULL Тогда
				Продолжить;
			КонецЕсли;
			Расшифровка	= СформироватьРасшифровку(Выборка.Регистратор, Выборка.Сотрудник, Выборка.ДатаНачала, Выборка.ДатаОкончания, Выборка.Утвержден);
			Интервал	= ДобавитьЗапланированныйОтпуск(Точка, Расшифровка);
		КонецЦикла;
		
	КонецЦикла;
	
	// ФАКТИЧЕСКИЕ ОТПУСКА
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтсутствиеНаРабочемМесте.Физлицо.Наименование КАК ФИО,
	|	ОтсутствиеНаРабочемМесте.Физлицо КАК Физлицо,
	|	ОтсутствиеНаРабочемМесте.ДатаНачала КАК ДатаНачала,
	|	ОтсутствиеНаРабочемМесте.ДатаОкончания,
	|	ОтсутствиеНаРабочемМесте.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ОтсутствияНаРабочемМесте КАК ОтсутствиеНаРабочемМесте
	|ГДЕ
	|	ОтсутствиеНаРабочемМесте.Проведен
	|	И ОтсутствиеНаРабочемМесте.ПричинаОтсутствия = ЗНАЧЕНИЕ(Справочник.ПричиныОтсутствияНаРаботе.ЕжегодныйОтпуск)
	|	И ОтсутствиеНаРабочемМесте.ДатаОкончания >= &НачалоПериода
	|	И ОтсутствиеНаРабочемМесте.ДатаНачала <= &КонецПериода
	|	И ОтсутствиеНаРабочемМесте.Физлицо В (&МассивФизлиц)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО,
	|	ДатаНачала";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ФИО") Цикл
		
		Точка = ДиаграммаГанта.УстановитьТочку(Выборка.Физлицо);
		
		Пока Выборка.Следующий() Цикл
			Расшифровка = СформироватьРасшифровку(Выборка.Регистратор, Выборка.Физлицо, Выборка.ДатаНачала, Выборка.ДатаОкончания);
			ДобавитьФактическийОтпуск(Точка, Расшифровка);
		КонецЦикла;
		
	КонецЦикла;
	
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры

Функция ДобавитьЗапланированныйОтпуск(ТочкаДиаграммыГанта, Расшифровка, ИнтервалДиаграммыГанта = Неопределено) Экспорт
	
	ИдРасшифровки = ЗначениеВСтрокуВнутр(Расшифровка);
	
	ДиаграммаГанта = ЭлементыФормы.ДиаграммаГантаГрафикОтпусков;
	
	Значение = ДиаграммаГанта.ПолучитьЗначение(ТочкаДиаграммыГанта, ДиаграммаГанта.УстановитьСерию("План"));
	
	Если ИнтервалДиаграммыГанта = Неопределено Тогда
		Интервал = Значение.Добавить();
		Интервал.Начало			= НачалоДня(Расшифровка.ДатаНачала);
		Интервал.Конец			= КонецДня(Расшифровка.ДатаОкончания);
		Интервал.Расшифровка	= Расшифровка;
	Иначе
		Интервал = ИнтервалДиаграммыГанта;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Расшифровка.Регистратор) ИЛИ (ЗначениеЗаполнено(Расшифровка.Регистратор) И ИнтервалДиаграммыГанта <> Неопределено) Тогда
	//	ТочкаДиаграммыГанта.Картинка = БиблиотекаКартинок.РедактироватьДокумент;
	//КонецЕсли;
	
	ПериодСтрокой = ПредставлениеПериода(Интервал.Начало, Интервал.Конец);
	Если Расшифровка.Утвержден Тогда
		Интервал.Цвет		= РаботаСДиалогамиДополнительный.ГрафикОтпусков_ЦветПлана();
		Интервал.Текст		= "Запланированный отпуск : " + ПериодСтрокой;
	Иначе
		Интервал.Цвет		= РаботаСДиалогамиДополнительный.ГрафикОтпусков_ЦветПланаНеУтвержденного();
		Интервал.Текст		= "Не утвержденный запланированный отпуск: " + ПериодСтрокой;
	КонецЕсли;
	
	Возврат Интервал;
	
КонецФункции

Процедура ДобавитьФактическийОтпуск(ТочкаДиаграммыГанта, Расшифровка, ИнтервалДиаграммыГанта = Неопределено, ИзменитьПротоколРаботы = Ложь) Экспорт
	
	ДиаграммаГанта = ЭлементыФормы.ДиаграммаГантаГрафикОтпусков;
	
	Значение = ДиаграммаГанта.ПолучитьЗначение(ТочкаДиаграммыГанта, ДиаграммаГанта.УстановитьСерию("Факт"));
	
	Если ИнтервалДиаграммыГанта = Неопределено Тогда
		Интервал = Значение.Добавить();
		Интервал.Начало			= НачалоДня(Расшифровка.ДатаНачала);
		Интервал.Конец			= КонецДня(Расшифровка.ДатаОкончания);
		Интервал.Расшифровка	= Расшифровка;
	Иначе
		Интервал = ИнтервалДиаграммыГанта;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Расшифровка.Регистратор) ИЛИ (ЗначениеЗаполнено(Расшифровка.Регистратор) И ИнтервалДиаграммыГанта <> Неопределено) Тогда
	//	ТочкаДиаграммыГанта.Картинка = БиблиотекаКартинок.РедактироватьДокумент;
	//КонецЕсли;
	
	ПериодСтрокой = ПредставлениеПериода(Интервал.Начало, Интервал.Конец);
	Интервал.Цвет		= РаботаСДиалогамиДополнительный.ГрафикОтпусков_ЦветФакта();
	Интервал.Текст	= "Фактический отпуск : " + ПериодСтрокой;
	
КонецПроцедуры

Процедура УдалитьОтпуск(ТочкаДиаграммыГанта, Расшифровка, ИнтервалДиаграммыГанта) Экспорт
	
	//ТочкаДиаграммыГанта.Картинка = БиблиотекаКартинок.РедактироватьДокумент;
	
	ИнтервалДиаграммыГанта.Значение.Удалить(ИнтервалДиаграммыГанта);
	
КонецПроцедуры


// Процедура вызывается при изменении режима планирования отпусков
// В процедуре выполняется первичная инициализация, необходимая для корректной работы
//
Процедура ПриИзмененииРежимаПланированияОтпусков()
	
	РежимПоСтруктуреЮридическихЛиц = РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
	
	Если РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц Тогда
		ЭлементыФормы.ПанельОтбор.ТекущаяСтраница	= ЭлементыФормы.ПанельОтбор.Страницы.ПоСтруктуреЮридическихЛиц;
	Иначе
		ЭлементыФормы.ПанельОтбор.ТекущаяСтраница	= ЭлементыФормы.ПанельОтбор.Страницы.ПоЦентрамОтветственности;
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Подменю.Кнопки.ПоСтруктуреЮридическихЛиц.Пометка	= РежимПоСтруктуреЮридическихЛиц;
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Подменю.Кнопки.ПоЦентрамОтветственности.Пометка	= Не РежимПоСтруктуреЮридическихЛиц;
	
	ОбновитьДиаграммуГанта();
	
КонецПроцедуры

Процедура ВывестиСправкуПоСотрудникуЗаГод(Физлицо)
	
	Форма = ПолучитьФорму("РасшифровкаОтпусковСотрудника");
	Форма.Физлицо		= Физлицо;
	Форма.ТекущаяДата	= ТекущаяДата;
	
	Форма.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Справка формы
	ОтображатьСправкуФормы = ВосстановитьЗначение("РедактированиеГрафикаОтпусковСправкаФормы");
	Если ОтображатьСправкуФормы = Неопределено Тогда
		ОтображатьСправкуФормы = Истина;
	КонецЕсли;
	
	ПодготовитьСправкуФормы();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Подразделение = ВосстановитьЗначение("Обработка.РедактированиеГрафикаОтпусков.Подразделение");
	Если Подразделение.Пустая() Тогда
		Подразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");
	КонецЕсли;
	Организация = ВосстановитьЗначение("Обработка.РедактированиеГрафикаОтпусков.Организация");
	Если Организация = Неопределено Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;
	
	РежимПланированияОтпусков = ВосстановитьЗначение("Обработка.РедактированиеГрафикаОтпусков.РежимПланированияОтпусков");
	Если РежимПланированияОтпусков.Пустая() Тогда
		РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
	КонецЕсли;
	ПриИзмененииРежимаПланированияОтпусков();
	
	УстановитьВидимостьСправкиФормы(Ложь);
	
	ДоступныПраваНаДополнительныеОтпуска = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ПравоНаДополнительныеДниОтпуска);
	ЭлементыФормы.ДействияФормы.Кнопки.ПравоНаДополнительныеДниОтпуска.Доступность = ДоступныПраваНаДополнительныеОтпуска;
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ПравоНаДополнительныеДниОтпуска.Доступность = ДоступныПраваНаДополнительныеОтпуска;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьПлановыйОтпуск" Тогда
		ОбновитьДиаграммуГанта();
		
	ИначеЕсли ИмяСобытия = "ОбновитьФактическийОтпуск" Тогда
		ОбновитьДиаграммуГанта();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("РедактированиеГрафикаОтпусковСправкаФормы",	ОтображатьСправкуФормы);
	
	СохранитьЗначение("Обработка.РедактированиеГрафикаОтпусков.РежимПланированияОтпусков",	РежимПланированияОтпусков);
	СохранитьЗначение("Обработка.РедактированиеГрафикаОтпусков.Подразделение",				Подразделение);
	СохранитьЗначение("Обработка.РедактированиеГрафикаОтпусков.Организация",				Организация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ПереключитьВидимостьСправкиФормы(Кнопка)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	УстановитьВидимостьСправкиФормы();
	
КонецПроцедуры


Процедура КоманднаяПанельГрафикОтпусковЗапланироватьОтпуск(Кнопка)
	
	Форма = Документы.ПланированиеОтпуска.ПолучитьФормуНовогоДокумента();
	
	Если РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности Тогда
		Форма.Подразделение = Подразделение;
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыЗарегистрироватьФактическийОтпуск(Кнопка)
	
	ГрафикОтпусковПереопределяемый.ФормаОбработкиЗарегистрироватьФактическийОтпуск();
	
КонецПроцедуры

Процедура ДействияФормыПравоНаДополнительныеДниОтпуска(Кнопка)
	
	Форма = Документы.ПравоНаДополнительныеДниОтпуска.ПолучитьФормуНовогоДокумента();
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыОтредактироватьОстаткиОтпусков(Кнопка)
	
	Форма = Справочники.ОстаткиОтпусков.ПолучитьФормуСписка("ФормаСпискаПоследнихОстатков");
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыОтчетПоОтпускам(Кнопка)
	
	Отчет = Отчеты.Отпуска.Создать();
	Форма = Отчет.ПолучитьФорму();
	Форма.Открыть();
	Форма.ОбновитьОтчет();
	
КонецПроцедуры

Процедура КоманднаяПанельЗаявкиКандидатовОтборПоРуководителям(Кнопка)
	
	ОтборПоРуководителям = Не ОтборПоРуководителям;
	
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОтборПоРуководителям.Пометка = ОтборПоРуководителям;
	
	ОбновитьДиаграммуГанта();
	
КонецПроцедуры


Процедура ПолеВводаРежимПланированияОтпусковПриИзменении(Элемент)
	
	ПриИзмененииРежимаПланированияОтпусков();
	
КонецПроцедуры


Процедура ПоСтруктуреЮридическихЛиц(Кнопка)
	
	РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
	
	ПриИзмененииРежимаПланированияОтпусков();
	
КонецПроцедуры

Процедура ПоЦентрамОтветственности(Кнопка)
	
	РежимПланированияОтпусков = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности;
	
	ПриИзмененииРежимаПланированияОтпусков();
	
КонецПроцедуры

Процедура ОбновитьГрафик(Кнопка)
	
	ОбновитьДиаграммуГанта();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьДиаграммуГанта();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДиаграммуГанта();
	
КонецПроцедуры

Процедура ВыборГодаПриИзменении(Элемент)
	
	ОбновитьДиаграммуГанта();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ДИАГРАММЫ ГАНТА

Процедура ДиаграммаГантаГрафикОтпусковОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровки) = Тип("Массив") Тогда
		Расшифровка = Расшифровки[1];
		
		Форма = Расшифровка.Регистратор.ПолучитьФорму();
		
		Если ТипЗнч(Расшифровка.Регистратор) = Тип("ДокументСсылка.ПланированиеОтпуска") Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Сотрудник",		Расшифровка.Сотрудник);
			СтруктураОтбора.Вставить("ДатаНачала",		Расшифровка.ДатаНачала);
			СтруктураОтбора.Вставить("ДатаОкончания",	Расшифровка.ДатаОкончания);
			ТекущаяСтрока = Форма.Работники.НайтиСтроки(СтруктураОтбора);
			
			Если ТекущаяСтрока.Количество() > 0 Тогда
				Форма.ЭлементыФормы.Работники.ТекущаяСтрока = ТекущаяСтрока[0];
			КонецЕсли;
		КонецЕсли;
		
		Форма.Открыть();
		
	ИначеЕсли ТипЗнч(Расшифровки) = Тип("Структура") Тогда
		ВывестиСправкуПоСотрудникуЗаГод(Расшифровки.Физлицо);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ТекущаяДата		= НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());