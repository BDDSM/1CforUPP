Перем мУникальныйНомер;
Перем мЗарезервированныйНомерРегистрацииТранспортныхУпаковок;


// ФОРМА СЛУЖИТ ДЛЯ РЕГИСТРАЦИИ ТОВАРОВ В ЮНИСКАН
///////////////////////////////////////////////////////////////////////////////


//ФУНКЦИИ РЕГИСТРАЦИИ ТОВАРА В ЮНИСКАН
//////////////////////////////////////////////////////////////////////////////

// Функция создает базовое дерево для регистрации товара
Функция СоздатьБазовоеДеревоДляРегистрацииТовара(GLNПредприятия, ПарольПредприятия)
	
	РезультирующееДерево = Новый ДеревоЗначений();
	РезультирующееДерево.Колонки.Добавить("Имя");
	РезультирующееДерево.Колонки.Добавить("Значение");

	// Узел создаем
	БазовыйУзел = ДобавитьУзелВДерево(РезультирующееДерево.Строки, "base460");
	
	// версия
	ДобавитьСтрокуВДерево(БазовыйУзел.Строки, "version", "1.0");
	
	// авторизация
	УзелАвторизации = ДобавитьУзелВДерево(БазовыйУзел.Строки, "enterprise");
	// логин
	ДобавитьУзелВДерево(УзелАвторизации.Строки, "gln", GLNПредприятия);
	// пароль
	ДобавитьУзелВДерево(УзелАвторизации.Строки, "password", ПарольПредприятия);
	
	Возврат РезультирующееДерево;
	
КонецФункции

// Функция Записывает в дерево информацию о товаре для регистрации
Функция СоздатьИнформациюОТовареДляРегистрации(Дерево, ВидПродукции, ТипПродукции, ТорговаяМарка, ОтличительныеСвойстваТовара)
	
	// создаем группу
	БазовыйУзел = ДобавитьГруппуВДерево(Дерево.Строки, 15);

	// группа для конкретного товара
	УзелЗаписи = ДобавитьЗаписьВДерево(БазовыйУзел.Строки, -1);
	
	// Параметры товара
	
	// ВидПродукции
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 272, ВидПродукции);
	// ТипПродукции
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 273, ТипПродукции);
	// ТорговаяМарка
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 95, ТорговаяМарка);
	//ОтличительныеСвойстваТовара
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 96, ОтличительныеСвойстваТовара);
	
	Возврат УзелЗаписи;
	
КонецФункции

// Функция создает информацию о потребительской упаковке
Функция СоздатьИнформациюОПотребительскойУпаковке(Дерево, УникальныйНомерДляРегистрации, ПрефиксПредприятия, НомерТовараПредприятия, 
						ТипУпаковки, КоличествоВес, ЕдиницаИзмерения, ОтличительныеСвойстваТовара, ДополнительныеСвойстваТовара, ОКП,
						ЕдиничнаяУпаковка = Неопределено)
						
	// создаем группу
	БазовыйУзел = ДобавитьГруппуВДерево(Дерево.Строки, 17);

	// группа для конкретной потребительской упаковки
	// если номер положительный, то все что ниже по иерархии будет пропущено
	ЧислоДляРегистрации = ?(УникальныйНомерДляРегистрации >= 0, мЗарезервированныйНомерРегистрацииТранспортныхУпаковок, УникальныйНомерДляРегистрации);
	УзелЗаписи = ДобавитьЗаписьВДерево(БазовыйУзел.Строки, ЧислоДляРегистрации);
	
	// Параметры потребительской упаковки
	Если НомерТовараПредприятия > 0 Тогда
		//ПрефиксПредприятия
		ДобавитьПараметрВДерево(УзелЗаписи.Строки, 129, ПрефиксПредприятия);
		
		СтрокаНомераТовара = "";
		ШтрихКодТовара = УправлениеРозничнойТорговлей.ПолучитьШтрихКодПоПредприятияюИНомеруТовара(ПрефиксПредприятия, НомерТовараПредприятия, СтрокаНомераТовара);

		//НомерТовараПредприятия
		ДобавитьПараметрВДерево(УзелЗаписи.Строки, 102, СтрокаНомераТовара);
		//КонтрольноеЧисло
		КонтрольноеЧисло = РаботаСТорговымОборудованием.КонтрольныйСимволEAN(ШтрихКодТовара, 13);
		ДобавитьПараметрВДерево(УзелЗаписи.Строки, 136, КонтрольноеЧисло);
	КонецЕсли;
	
	//ТипУпаковки
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 97, ТипУпаковки);
	//КоличествоВес
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 98, КоличествоВес);
	//ЕдиницаИзмерения
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 99, ЕдиницаИзмерения);
	//ОтличительныеСвойстваТовара
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 103, ОтличительныеСвойстваТовара);
	//ДополнительныеСвойстваТовара
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 262, ДополнительныеСвойстваТовара);
	//ОКП
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 349, ОКП);
	//ЕдиничнаяУпаковка
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 275, ЕдиничнаяУпаковка);
	
	Возврат УзелЗаписи;
	
КонецФункции

// Функция создает информацию о потребительской упаковке
Функция СоздатьИнформациюОТранспортнойУпаковке(Дерево, УникальныйНомерДляРегистрации, ПрефиксПредприятия, НомерТовараПредприятия, НомерТранспортнойУпаковки,
						ТипУпаковки, КоличествоВес, ЕдиницаИзмерения)
						
	// создаем группу
	БазовыйУзел = ДобавитьГруппуВДерево(Дерево.Строки, 18);

	// группа для конкретной потребительской упаковки
	УзелЗаписи = ДобавитьЗаписьВДерево(БазовыйУзел.Строки, УникальныйНомерДляРегистрации);
	
	Если НомерТовараПредприятия > 0 Тогда
		СтрокаНомераТовара = "";
		ШтрихКодТовара = УправлениеРозничнойТорговлей.ПолучитьШтрихКодПоПредприятияюИНомеруТовара(ПрефиксПредприятия, НомерТовараПредприятия, СтрокаНомераТовара);
		КонтрольноеЧисло13 = РаботаСТорговымОборудованием.КонтрольныйСимволEAN(ШтрихКодТовара, 13);
		ШтрихКодТовара = Строка(НомерТранспортнойУпаковки) + ШтрихКодТовара + Строка(КонтрольноеЧисло13);
	    КонтрольноеЧисло = РаботаСТорговымОборудованием.КонтрольныйСимволEAN(ШтрихКодТовара, 14);
	Иначе
		СтрокаНомераТовара = НомерТовараПредприятия;
	КонецЕсли;

	//НомерТовараПредприятия
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 132, СтрокаНомераТовара);
	
	//НомерТранспортнойУпаковки
	Если (НомерТранспортнойУпаковки > 0) Тогда
		ДобавитьПараметрВДерево(УзелЗаписи.Строки, 130, НомерТранспортнойУпаковки);
	КонецЕсли;

	// Параметры потребительской упаковки
	Если (НомерТовараПредприятия > 0) Тогда
		//ПрефиксПредприятия
		ДобавитьПараметрВДерево(УзелЗаписи.Строки, 131, ПрефиксПредприятия);
		
		//КонтрольноеЧисло
		ДобавитьПараметрВДерево(УзелЗаписи.Строки, 133, КонтрольноеЧисло);
	КонецЕсли;
	
	//ТипУпаковки
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 105, ТипУпаковки);
	//КоличествоВес
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 134, КоличествоВес);
	//ЕдиницаИзмерения
	ДобавитьПараметрВДерево(УзелЗаписи.Строки, 135, ЕдиницаИзмерения);

	Возврат УзелЗаписи;				
						
КонецФункции

// Процедура удаляет файлы для регистрации номенклатуры
Процедура УдалитьФайлыРегистрации()
	
	Перем ИмяФайлаДляЗаписиЗапроса, ИмяФайлаДляЗаписиОтвета;
	
	ВернутьИменаФайловДляРегистрации(ИмяФайлаДляЗаписиЗапроса, ИмяФайлаДляЗаписиОтвета);

	УдалитьФайлы(ИмяФайлаДляЗаписиЗапроса);
	УдалитьФайлы(ИмяФайлаДляЗаписиОтвета);
    	
КонецПроцедуры


// функция проводит регистрацию товаров в юнискане и на дерево для регистрации возвращает дерево с результатами регистрации
Функция ЗарегистрироватьДеревоТоваров(ДеревоТоваров)
	
	Перем ИмяФайлаДляЗаписиЗапроса, ИмяФайлаДляЗаписиОтвета;
	
	ВернутьИменаФайловДляРегистрации(ИмяФайлаДляЗаписиЗапроса, ИмяФайлаДляЗаписиОтвета);
	РезультирующееДерево = ОтправитьДеревоПоHTTP(ДеревоТоваров, ИмяФайлаДляЗаписиЗапроса, ИмяФайлаДляЗаписиОтвета, "gepir.ean.ru", "/gtinapp/gtinappinterface");
					
	Возврат РезультирующееДерево;
	
КонецФункции

// РАБОТА С ВИЗУАЛЬНЫМИ КОМПОНЕНТАМИ
///////////////////////////////////////////////////////////////////////////////

// процедура отображает неизменяемые данные для регистрации данной номенклатуры
Процедура ОтобразитьОсновноеОписаниеТовара()
	
	Если ЗначениеЗаполнено(НоменклатураДляРегистрации) Тогда
		
		ПолеВводаТорговаяМарка = ВернутьТорговуюМаркуПоНоменклатуре(НоменклатураДляРегистрации);
		
		Если ЗначениеЗаполнено(НоменклатураДляРегистрации.НаименованиеПолное) Тогда
			ПолеВводаОтличительныеСвойстваТовара = НоменклатураДляРегистрации.НаименованиеПолное;
		Иначе	
			ПолеВводаОтличительныеСвойстваТовара = НоменклатураДляРегистрации.Наименование;
		КонецЕсли;	
		
	Иначе
		
		ПолеВводаТорговаяМарка = "";
		ПолеВводаОтличительныеСвойстваТовара = "";
		
	КонецЕсли;
	
КонецПроцедуры

// процедура переноси данные талицы регистрации в визуальные контролы для отображения
Процедура ОтобразитьДанныеСтрокиРегистрации(СтрокаРегистрации)
	
	ТаблицаТранспортныхУпаковокРегистрации.Очистить();
	
	Если СтрокаРегистрации = Неопределено Тогда
		
		ПолеВводаУникальныйНомерТовара = 0;
		ПолеВводаТипУпаковки = "";
		ПолеВводаКоличествоВсе = 0;
		ПолеВводаЕдиницаИзмерения = "";
		ПолеВводаОтличительныеСвойства = "";
		ПолеВводаЕдиничнаяУпаковка = "";
		ПолеВводаКодЕАН13 = "";
		ПолеВводаРезультатРегистрации = "";
		
		ЭлементыФормы.ПолеВводаУникальныйНомерТовара.Доступность = Ложь;
	Иначе
		
		ПолеВводаУникальныйНомерТовара = СтрокаРегистрации.УникальныйНомерТовара;
		ПолеВводаТипУпаковки = СтрокаРегистрации.ТипУпаковки;
		ПолеВводаКоличествоВес = СтрокаРегистрации.КоличествоВес;
		ПолеВводаЕдиницаИзмерения = СтрокаРегистрации.МеждународнаяЕдиницаИзмерения;
		ПолеВводаОтличительныеСвойства = Строка(СтрокаРегистрации.Характеристика);
		ПолеВводаОКП = Строка(СтрокаРегистрации.ОКП);
		
		Если СтрокаРегистрации.ЕдиничнаяУпаковка = Неопределено Тогда
			ПолеВводаЕдиничнаяУпаковка = "";	
		Иначе
			// ищем строку по уникальному номеру
			СтрокаТаблицы = ТаблицаДляРегистрации.Строки.Найти(СтрокаРегистрации.ЕдиничнаяУпаковка, "УникальныйНомер");
			Если СтрокаТаблицы = Неопределено Тогда
				ПолеВводаЕдиничнаяУпаковка = "";
			Иначе
				ПолеВводаЕдиничнаяУпаковка = Строка(СтрокаРегистрации.ЕдиницаИзмерения);
			КонецЕсли;
		
		КонецЕсли;
	
		ПолеВводаКодЕАН13 = Строка(СтрокаРегистрации.ШтрихКод);
		ПолеВводаРезультатРегистрации = СтрокаРегистрации.РезультатРегистрации;
		
		Для Каждого СтрокаДанных Из СтрокаРегистрации.Строки Цикл 
			
			СтрокаДляПользователя = ТаблицаТранспортныхУпаковокРегистрации.Добавить();
			СтрокаДляПользователя.КодТранспортнойУпаковки = СтрокаДанных.КодТранспортнойУпаковки;
			СтрокаДляПользователя.НаименованиеТранспортнойУпаковки = СтрокаДанных.НаименованиеТранспортнойУпаковки;
			СтрокаДляПользователя.КоэффициентТранспортнойУпаковки = СтрокаДанных.КоэффициентТранспортнойУпаковки;
			СтрокаДляПользователя.РезультатРегистрации = СтрокаДанных.РезультатРегистрации;
			СтрокаДляПользователя.КодРегистрации = СтрокаДанных.КодРегистрации;
			СтрокаДляПользователя.ШтрихКод = СтрокаДанных.ШтрихКод;
			СтрокаДляПользователя.УникальныйНомер = СтрокаДанных.УникальныйНомер;
			
		КонецЦикла;
		
		ЭлементыФормы.ПолеВводаУникальныйНомерТовара.Доступность = ПустаяСтрока(СтрокаРегистрации.ШтрихКод);
	КонецЕсли;
			
КонецПроцедуры


// РАБОТА С НОМЕНКЛАТУРОЙ
///////////////////////////////////////////////////////////////////////////////

// функция возвращает характеристики номенклатуры
Функция ВернутьХарактеристикиНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|
	| ГДЕ ХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И ХарактеристикиНоменклатуры.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	
	СписокХарактеристик = Новый СписокЗначений;
	СписокХарактеристик.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокХарактеристик;
	
КонецФункции

// функция возвращает единицы измерения номенклатуры
Функция ВернутьЕдиницыИзмеренияНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|
	| ГДЕ ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	
	СписокЕдиницИзмерения = Новый СписокЗначений;
	СписокЕдиницИзмерения.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокЕдиницИзмерения;
	
КонецФункции

// функция возвращает таблицу транспортных упаковок по единице измерения
Функция ВернутьТаблицуТранспортныхУпаковокПоЕдиницеИзмерения(ЕдиницаИзмерения)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТранспортныеУпаковки.Код,
	|	ТранспортныеУпаковки.Наименование,
	|	ТранспортныеУпаковки.Коэффициент
    |ИЗ
	|	Справочник.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|
	| ГДЕ ТранспортныеУпаковки.Владелец = &Владелец
	|	И ТранспортныеУпаковки.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Владелец", ЕдиницаИзмерения);
	ТаблицаТранспортныхУпаковок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТранспортныхУпаковок;
	
КонецФункции

// функция проверяет существует ли в информационной базе штрих код с определенным номером
Функция ОпределитьСуществаованиеШтрихКода(ШтрихКодТовара)
	
	// ищем только внешние штрих коды, которые с 2 не начинаются
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ Первые 1
	|	ШтрихКоды.Штрихкод КАК Код
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|
	| ГДЕ 
	|	Штрихкоды.ТипШтрихкода = &ТипШтрихКода
	|   И ШтрихКоды.Штрихкод = &ШтрихКодТовара
	|	И НЕ (ШтрихКоды.Штрихкод Подобно ""2%"")";
	
	Запрос.УстановитьПараметр("ТипШтрихКода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	Запрос.УстановитьПараметр("ШтрихКодТовара", ШтрихКодТовара);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// функция возвращает штрих код по единице измерения и характеристике
Функция ВернутьШтрихКодПоЕдиницеИзмеренияИХарактеристике(ЕдиницаИзмерения, Характеристика)
	
	// ищем только внешние штрих коды, которые с 2 не начинаются
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихКоды.Штрихкод КАК Код
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|
	| ГДЕ 
	|	Штрихкоды.ТипШтрихкода = &ТипШтрихКода
	|   И Штрихкоды.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|   И Штрихкоды.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И НЕ (ШтрихКоды.Штрихкод Подобно ""2%"")";
	
	Запрос.УстановитьПараметр("ТипШтрихКода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	ОграничениеПоХарактеристике = ?(НЕ ЗначениеЗаполнено(Характеристика), Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Характеристика); 
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ОграничениеПоХарактеристике);
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТаблицаРезультатов[0].Код
	КонецЕсли;
	
КонецФункции

// Процедура инициализирует уникальный счетчик для регистрации
Процедура ИнициализироватьУникальныйСчетчикДляРегистрации()
	
	мУникальныйНомер = -1;	
	
КонецПроцедуры

// функция возвращает очередной уникальный номер для регистрации
Функция СгенерироватьУникальныйНомерДляРегистрации()
	
	мУникальныйНомер = мУникальныйНомер - 1;
	Если мЗарезервированныйНомерРегистрацииТранспортныхУпаковок = мУникальныйНомер Тогда
		мУникальныйНомер = мУникальныйНомер - 1;	
	КонецЕсли;
	
	Возврат мУникальныйНомер;
	
КонецФункции

// процедура добавляет строку в таблицу для регистрации
Процедура ДобавитьСтрокуВДеревоРегистрации(ТаблицаРегистрации, ЕдиницаИзмерения, Характеристика, ТаблицаТранспортныхУпаковок)
	
	СтрокаТаблицы = ТаблицаРегистрации.Строки.Добавить();
	СтрокаТаблицы.ЕдиницаИзмерения = ЕдиницаИзмерения; 
	СтрокаТаблицы.Характеристика = Характеристика;
	СтрокаТаблицы.ФлагВыбора = Истина;
	
	// по единице измерения и характеристике определяем штрих код
	СтрокаТаблицы.ШтрихКод = ВернутьШтрихКодПоЕдиницеИзмеренияИХарактеристике(ЕдиницаИзмерения, Характеристика);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ШтрихКод) Тогда
		СтрокаТаблицы.УникальныйНомер = СгенерироватьУникальныйНомерДляРегистрации();
	Иначе
		СтрокаТаблицы.УникальныйНомер = СтрокаТаблицы.ШтрихКод;
	КонецЕсли;
	
	// добавляем в дерево к данной строке все транспортные упаковки
	Для Каждого СтрокаТранспортнойУпаковки Из ТаблицаТранспортныхУпаковок Цикл
		
		СтрокаДерева = СтрокаТаблицы.Строки.Добавить();
		// нет признака регистрировать транспортную упаковку или нет
		// мы ее всегда пытаемся зарегистрировать...
		СтрокаДерева.УникальныйНомер = СгенерироватьУникальныйНомерДляРегистрации();
		СтрокаДерева.ЕдиницаИзмерения = ЕдиницаИзмерения;		
		СтрокаДерева.КодТранспортнойУпаковки = СтрокаТранспортнойУпаковки.Код;
		СтрокаДерева.НаименованиеТранспортнойУпаковки = СтрокаТранспортнойУпаковки.Наименование;
		СтрокаДерева.КоэффициентТранспортнойУпаковки = СтрокаТранспортнойУпаковки.Коэффициент;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает таблицу значений для регистрации в юнискан номенклатурных позиций
Процедура СоздатьТаблицуДляРегистрации(СписокХарактеристик, СписокЕдиницИзмерения, ТаблицаДляРегистрации)
	
	ТаблицаДляРегистрации.Строки.Очистить();
	
	СписокХарактеристикПуст = (СписокХарактеристик.Количество() = 0);

	ИнициализироватьУникальныйСчетчикДляРегистрации();
	
	Для Каждого ЕдиницаИзмерения Из СписокЕдиницИзмерения Цикл
		
		// у каждой единицы измерения могут быть еще и транспортные упаковки
		ТаблицаТранспортныхУпаковок = ВернутьТаблицуТранспортныхУпаковокПоЕдиницеИзмерения(ЕдиницаИзмерения.Значение);
		
		Если СписокХарактеристикПуст Тогда
			
			ДобавитьСтрокуВДеревоРегистрации(ТаблицаДляРегистрации, ЕдиницаИзмерения.Значение, Неопределено, ТаблицаТранспортныхУпаковок);
			
		Иначе
			Для Каждого Характеристика Из СписокХарактеристик Цикл
				
				ДобавитьСтрокуВДеревоРегистрации(ТаблицаДляРегистрации, ЕдиницаИзмерения.Значение, Характеристика.Значение, ТаблицаТранспортныхУпаковок);
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// функция создает базовое дерево для регистрации в Юнискан и возвращает узел для регистрации
Функция СоздатьБазовоеДеревоРегистрации(Номенклатура, Узел)
	
	Дерево = СоздатьБазовоеДеревоДляРегистрацииТовара(ПолучитьGLNПредприятия(), ПолучитьПарольПредприятия());
	КореньДерева = Дерево.Строки[0];
	
	ТорговаяМарка = ВернутьТорговуюМаркуПоНоменклатуре(Номенклатура);

	Если ЗначениеЗаполнено(Номенклатура.НаименованиеПолное) Тогда
		НазваниеНоменклатуры = Номенклатура.НаименованиеПолное;
	Иначе	
		НазваниеНоменклатуры = Номенклатура.Наименование;
	КонецЕсли;
	
	Узел = СоздатьИнформациюОТовареДляРегистрации(КореньДерева, Неопределено, Неопределено, ТорговаяМарка, НазваниеНоменклатуры);

	Возврат Дерево;
	
КонецФункции

// функция возвращает номер товара предприятия по префиксу предприятия и штрихкоду
Функция ПолучитьНомерТовараПоШтрихКоду(ШтрихКод, ПрефиксПредприятия)
	
	// позиция префикса должна быть 1
	ПозицияПрефикса = Найти(ШтрихКод, ПрефиксПредприятия);
	Если ПозицияПрефикса <> 1 Тогда
		Возврат -1;
	КонецЕсли;
		
	НомерТовара = Сред(ШтрихКод, СтрДлина(ПрефиксПредприятия) + 1);
	// последний символ номера грохаем - это контрольное число
	УникальныйНомер = Число(Сред(НомерТовара, 1, СтрДлина(НомерТовара) - 1));

	Возврат УникальныйНомер;
	
КонецФункции

// Функция возвращает уникальный номер товара предприятия
Функция ВернутьУникальныйНомерТовараПредприятия()
	
	// выбираем товар с максимальным штрихкодом для данного предприятия
	// если нет ни одного такого товра то возвращаем -1
	// иначе увеличиваем число на 1 и получаем результат
	
	ПрефиксПредприятия = ПолучитьПрефиксПредприятия();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Максимум(ШтрихКоды.Штрихкод) КАК Код
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|
	| ГДЕ 
	|	Штрихкоды.ТипШтрихкода = &ТипШтрихКода
    |   И (ШтрихКоды.Штрихкод Подобно &ПрефиксПредприятия)";
	
	Запрос.УстановитьПараметр("ТипШтрихКода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	Запрос.УстановитьПараметр("ПрефиксПредприятия", ПрефиксПредприятия + "%");
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультатов.Количество() <> 1 Тогда
		Возврат -1;
	КонецЕсли;
	
	МаксимальныйКод = ТаблицаРезультатов[0].Код;
	
	Если МаксимальныйКод = Null Тогда
		Возврат -1;
	КонецЕсли;
	
	УникальныйНомер = ПолучитьНомерТовараПоШтрихКоду(ТаблицаРезультатов[0].Код, ПрефиксПредприятия);
		
	Возврат УникальныйНомер + 1;
	
КонецФункции

// процедура заполняет таблицу регитсрации значениями
Процедура ЗаполинтьТаблицуРегистрацииПараметрами(Номенклатура, ТаблицаДляРегистрации)
	
	// определяем единицу хранения остатков - это будет для нас основная единица измерения
	ЕдиницаХраненияОстатков = Номенклатура.ЕдиницаХраненияОстатков; 

	УникальныйНомерТовара = ВернутьУникальныйНомерТовараПредприятия();
	ПрефиксПредприятия = ПолучитьПрефиксПредприятия();
	
	Для Каждого СтрокаТаблицыРегистрации Из ТаблицаДляРегистрации.Строки Цикл
		
		// для всех строк, независимо от того имеют номенклатурные позиции штрих код или нет
		// отображаем данные для регистрации
		
		// если штрих код уже заполнен то номер определяется по штрихкоду
		Если НЕ ПустаяСтрока(СтрокаТаблицыРегистрации.ШтрихКод) Тогда
			// надо префикс предприятия грохнуть и контрольный символ
			// получим номер товара
			НомерТовараПредприятия = ПолучитьНомерТовараПоШтрихКоду(СтрокаТаблицыРегистрации.ШтрихКод, ПрефиксПредприятия);
			// если номер равен -1 то значит товар был зарегистрирован другим предприятием
			Если НомерТовараПредприятия = -1 Тогда
				СтрокаТаблицыРегистрации.УникальныйНомерТовара = СтрокаТаблицыРегистрации.ШтрихКод;
			Иначе
				СтрокаТаблицыРегистрации.УникальныйНомерТовара = НомерТовараПредприятия;
			КонецЕсли;

		Иначе
			
			Если УникальныйНомерТовара > 0 Тогда
				СтрокаТаблицыРегистрации.УникальныйНомерТовара = УникальныйНомерТовара;
			Иначе
				// сам номер ничего не значит (если -1 то товар будет вновь регистрироваться)
				СтрокаТаблицыРегистрации.УникальныйНомерТовара = -1;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицыРегистрации.ТипУпаковки = СтрокаТаблицыРегистрации.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование;
		
		// количество - вес
		СтрокаТаблицыРегистрации.КоличествоВес = ВернутьКоличествоВесДляЕдиницыИзмерения(СтрокаТаблицыРегистрации.ЕдиницаИзмерения, 
			ЕдиницаХраненияОстатков);
		
		Если СтрокаТаблицыРегистрации.ЕдиницаИзмерения = ЕдиницаХраненияОстатков Тогда
			СтрокаТаблицыРегистрации.ЕдиничнаяУпаковка = Неопределено;
		Иначе
			// не базовая единица
			// пишем номер строки с единицей хранения остатков
			СтрокаСЕдиницейХраненияОстатков = ТаблицаДляРегистрации.Строки.Найти(ЕдиницаХраненияОстатков, "ЕдиницаИзмерения");
			Если СтрокаСЕдиницейХраненияОстатков = Неопределено Тогда
				СтрокаТаблицыРегистрации.ЕдиничнаяУпаковка = "";
			Иначе
				СтрокаТаблицыРегистрации.ЕдиничнаяУпаковка = СтрокаСЕдиницейХраненияОстатков.УникальныйНомер;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыРегистрации.МеждународнаяЕдиницаИзмерения = СтрокаТаблицыРегистрации.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.МеждународноеСокращение;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыРегистрации.Характеристика) Тогда
			СтрокаТаблицыРегистрации.ОтличительныеСвойстваТовара = "";
			// ОКП
			СтрокаТаблицыРегистрации.ОКП = Номенклатура.ОКП.КОД;
		Иначе
			СтрокаТаблицыРегистрации.ОтличительныеСвойстваТовара = СтрокаТаблицыРегистрации.Характеристика.Наименование;
			// ОКП
			СтрокаТаблицыРегистрации.ОКП = СтрокаТаблицыРегистрации.Характеристика.ОКП.КОД;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыРегистрации.ОКП) Тогда
				СтрокаТаблицыРегистрации.ОКП = Номенклатура.ОКП.КОД; 
			КонецЕсли;			
		КонецЕсли;
		
		СтрокаТаблицыРегистрации.ДополнительныеСвойстваТовара = "";
		
		Если УникальныйНомерТовара > 0 Тогда
			УникальныйНомерТовара = УникальныйНомерТовара + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура осуществляет заполнение таблицы для регистрации
Процедура ЗаполнитьТаблицуДляРегистрацииВЮнискан(Номенклатура)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// 1 смотрим есть ли характеристики у номенклатуры
	СписокХарактеристик = ВернутьХарактеристикиНоменклатуры(Номенклатура);
	ЕстьХарактеристики = (СписокХарактеристик.Количество() > 0);	
	
	Если ЕстьХарактеристики Тогда
		// вставляем пустую характеристику в самое начало
		СписокХарактеристик.Вставить(0, Неопределено);
	КонецЕсли;
	
	// смотрим какие есть единицы измерения
	СписокЕдиницИзмерения = ВернутьЕдиницыИзмеренияНоменклатуры(Номенклатура);
	
	// создаем исходную таблицу регистрации для номенклатурных позиций
	СоздатьТаблицуДляРегистрации(СписокХарактеристик, СписокЕдиницИзмерения, ТаблицаДляРегистрации);
	
	ЗаполинтьТаблицуРегистрацииПараметрами(Номенклатура, ТаблицаДляРегистрации);
	
КонецПроцедуры


// функция по коду ошибки возвращает ее описание
Функция ПолучитьОписаниеОшибкиРегистрации(КодОшибки)
	
	Если КодОшибки = 0 Тогда
		Возврат "Регистрация прошла успешно";
	ИначеЕсли КодОшибки = -10 Тогда
		Возврат "Ошибка WEB сервиса: Внутренняя ошибка сервера";
	ИначеЕсли КодОшибки = -20 Тогда
		Возврат "Ошибка WEB сервиса: Неверный формат регистрации номенклатурной позиции";	
	ИначеЕсли КодОшибки = -30 Тогда
		Возврат "Ошибка WEB сервиса: Доступ запрещен";	
	ИначеЕсли КодОшибки = -40 Тогда
		Возврат "Ошибка WEB сервиса: Отпревленный файл регистрации не содержит новых данных";
	ИначеЕсли КодОшибки = -500 Тогда
		Возврат "Ошибка WEB сервиса: внутреняя ошибка сервера регистрации";	
		
	ИначеЕсли КодОшибки = 1 Тогда
		Возврат "Ошибка базы данных регистрации";
	ИначеЕсли КодОшибки = 2 Тогда
		Возврат "Неверный GTIN";
	ИначеЕсли КодОшибки = 3 Тогда
		Возврат "GTIN уже используется";	
	ИначеЕсли КодОшибки = 4 Тогда
		Возврат "Диапазон GTIN для выбранного префикса израсходован";
	ИначеЕсли КодОшибки = 5 Тогда
		Возврат "Неверный код транспортной упаковки";
	ИначеЕсли КодОшибки = 6 Тогда
		Возврат "Такой код транспортной упаковки уже используется";
	ИначеЕсли КодОшибки = 7 Тогда
		Возврат "Диапазон кодов транспортной упаковок для выбранной потребительской упаковки израсходован";
		
	Иначе
		Возврат "Неизвестная ошибка";
	КонецЕсли
	
КонецФункции

// функция анализирует информацию о регистрации отдельной единицы измерения
Функция ПолучитьИнформациюОРегистрацииЕдиницы(ТаблицаДляРегистрации, ДеревоРегистрацииЕдиницы)
	
	Перем КодГруппы, КодЗаписи, КодЗаписиВЮнискан, КодОшибки, ОписаниеОшибки, ШтрихКод;
	
	РезультатРегистрации = Истина;
	КодГруппы = "";
	
	Для Каждого СтрокаДерева Из ДеревоРегистрацииЕдиницы.Строки Цикл
		
		Если СтрокаДерева.Имя = "id_group" Тогда
			КодГруппы = СтрокаДерева.Значение;	
		ИначеЕсли СтрокаДерева.Имя = "req_id_record" Тогда
        	КодЗаписи = СтрокаДерева.Значение;
		ИначеЕсли СтрокаДерева.Имя = "base460_id_record" Тогда
        	КодЗаписиВЮнискан = СтрокаДерева.Значение;
		ИначеЕсли СтрокаДерева.Имя = "errcode" Тогда
        	КодОшибки = ПолучитьЗначениеУзлаДерева(СтрокаДерева);
	    ИначеЕсли СтрокаДерева.Имя = "errdesc" Тогда
        	ОписаниеОшибки = ПолучитьЗначениеУзлаДерева(СтрокаДерева);
        ИначеЕсли СтрокаДерева.Имя = "new_gtin" Тогда
        	ШтрихКод = ПолучитьЗначениеУзлаДерева(СтрокаДерева);
		Иначе
			СообщитьОбОшибкеРегистрации("В файле ответа содержится неизвестный параметр: " + СтрокаДерева.Имя, РезультатРегистрации);
		КонецЕсли;
		
	КонецЦикла;
	
	// анализируем что за параметры регистрации мы получили
	Если КодГруппы = "15" Тогда
		
		// общая информация о регитсрации номенклатуры
		// результат регистрации не будем показывать - Юнискан его не правильно формирует
		//Сообщить("Результат регистрации: " + ОписаниеОшибки);
		
	ИначеЕсли КодГруппы = "17" ИЛИ КодГруппы = "18" Тогда
		
		// потребительская/транспортная упаковка
		// ищем в таблице для регитсрации нужную строку и все туда записываем
		ЧислоЗаписи = Число(КодЗаписи); 
		Если мЗарезервированныйНомерРегистрацииТранспортныхУпаковок <> ЧислоЗаписи Тогда
			
			СтрокаТаблицыРегистрации = ТаблицаДляРегистрации.Строки.Найти(ЧислоЗаписи, "УникальныйНомер", Истина);
			Если СтрокаТаблицыРегистрации = Неопределено Тогда
				СообщитьОбОшибкеРегистрации("В файле ответа содержится неизвестный код записи для регистрации: " + КодЗаписи, РезультатРегистрации);
			Иначе
				
				// Если штрих код уже есть, то мы его второй раз не читаем
				Если ПустаяСтрока(СтрокаТаблицыРегистрации.ШтрихКод) Тогда
					СтрокаТаблицыРегистрации.ШтрихКод = ШтрихКод;
				КонецЕсли;
				СтрокаТаблицыРегистрации.РезультатРегистрации = ОписаниеОшибки;
				СтрокаТаблицыРегистрации.КодРегистрации = КодОшибки;
		
			КонецЕсли;
		
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(КодГруппы) Тогда
		// по коду надо еще описание ошибки получить...
		ОписаниеОшибки = ПолучитьОписаниеОшибкиРегистрации(Число(КодОшибки));
		Сообщить("Ошибка: " + ОписаниеОшибки + ". Код ошибки: " + Строка(КодОшибки));	
	Иначе
		СообщитьОбОшибкеРегистрации("В файле ответа содержится неизвестный код группы регистрации: " + КодГруппы, РезультатРегистрации);	
	КонецЕсли;
	
	РезультатРегистрации = РезультатРегистрации И (КодОшибки = "0");
	Возврат РезультатРегистрации;
	
КонецФункции

// процедура регистрирует штрих код для конктерной строки таблицы регистрации
Процедура ЗарегистрироватьНовыйШтрихКод(СтрокаТаблицыРегистрации, Номенклатура)
	
	НаборСтрокРегистра = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	
	СтрокаДобавления = НаборСтрокРегистра.Добавить();
	
	СтрокаДобавления.Владелец = Номенклатура;
	СтрокаДобавления.ЕдиницаИзмерения = СтрокаТаблицыРегистрации.ЕдиницаИзмерения;
	СтрокаДобавления.ХарактеристикаНоменклатуры = СтрокаТаблицыРегистрации.Характеристика;
	СтрокаДобавления.ШтрихКод = СтрокаТаблицыРегистрации.ШтрихКод;
	СтрокаДобавления.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	СтрокаДобавления.Код = УправлениеРозничнойТорговлей.ПолучитьНовыйКодДляРегистраСведений("Штрихкоды");
	
	НаборСтрокРегистра.Записать(Ложь);
	
	СтрокаОРегистрацииХарактеристики = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицыРегистрации.Характеристика), "", " и характеристики: """ + СтрокаТаблицыРегистрации.Характеристика + """");
	Сообщить("Успешно зарегистрирован штрихкод потребительской упаковки: " + СтрокаТаблицыРегистрации.ШтрихКод + 
		" для единицы измерения: """ + СтрокаТаблицыРегистрации.ЕдиницаИзмерения + """" + СтрокаОРегистрацииХарактеристики);
	
КонецПроцедуры

// процедура выполняет действия по регистрации штрих кода транспортной упаковки
Процедура ЗарегистрироватьНовыйШтрихКодТранспортнойУпаковки(СтрокаТаблицыРегистрации)
	
	// в информационной базе никак не храним зарегистрирована транспортная упаковка или нет
	СтрокаОРегистрацииХарактеристики = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицыРегистрации.Характеристика), "", " и характеристики: """ + СтрокаТаблицыРегистрации.Характеристика + """");
	Сообщить("Успешно зарегистрирован штрихкод транспортной упаковки: " + СтрокаТаблицыРегистрации.ШтрихКод + 
		" для единицы измерения: """ + СтрокаТаблицыРегистрации.ЕдиницаИзмерения + """" + СтрокаОРегистрацииХарактеристики);
	
КонецПроцедуры


// функция определяет по строке таблицы зарегистрирована ли позиция или нет
Функция ОпределитьПоСтрокеТаблицыЗарегистрированаПозиция(СтрокаТаблицы)
	
	Если (СтрокаТаблицы.ФлагВыбора = Ложь) ИЛИ (СтрокаТаблицы.УникальныйНомер > 0) Тогда
		Возврат Ложь;
	КонецЕсли;                  
		
	// если регистрациия прошла без ошибок
	Если (СтрокаТаблицы.КодРегистрации <> "0") ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ШтрихКод) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// процедура вносит информацию о регитсрации номенклатуры в базу данных
Процедура ВнестиИнформациюОРегитсрацииВБазуДанных(ТаблицаДляРегистрации, Номенклатура)
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляРегистрации.Строки Цикл
		
		ПозицияЗарегистрирована = ОпределитьПоСтрокеТаблицыЗарегистрированаПозиция(СтрокаТаблицы);
		Если Не ПозицияЗарегистрирована Тогда
			Продолжить;
		КонецЕсли;
		ЗарегистрироватьНовыйШтрихКод(СтрокаТаблицы, Номенклатура);
		
		// для транспортных упаковок делаем то же самое
		Для Каждого СтрокаТранспортнойУпаковки Из СтрокаТаблицы.Строки Цикл
			
			ПозицияЗарегистрирована = ОпределитьПоСтрокеТаблицыЗарегистрированаПозиция(СтрокаТранспортнойУпаковки);
			Если Не ПозицияЗарегистрирована Тогда
				Продолжить;
			КонецЕсли;
	        ЗарегистрироватьНовыйШтрихКодТранспортнойУпаковки(СтрокаТранспортнойУпаковки);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// функция отражает результат регистрации в таблицу и в соотвествующий регистр сведений
Функция ПолучитьРезультатыРегистрации(ТаблицаДляРегистрации, ДеревоДляРегистрацииНоменклатуры, Номенклатура, РезультатРегистрации)
	
	КоличествоЗарегистрированныхПозиций = 0;
	РезультатРегистрации = Истина;
	
	Попытка
		
		// анализируем данные дерева регистрации
		// у дерева должна быть одна строка - корень
		Если ДеревоДляРегистрацииНоменклатуры.Строки.Количество() = 0 Тогда
			СообщитьОбОшибкеРегистрации("Файл с ответом о регистрации номенклатуры не содержит данных!", РезультатРегистрации);
			Возврат 0; 
		КонецЕсли;
		
		Если ДеревоДляРегистрацииНоменклатуры.Строки.Количество() > 1 Тогда
			СообщитьОбОшибкеРегистрации("Файл с ответом о регистрации номенклатуры содержит лишние данные!", РезультатРегистрации);
		КонецЕсли;
		
		СтрокаРегистрации = ДеревоДляРегистрацииНоменклатуры.Строки[0];
		
		// анализируем данные о регистрации нашей номенклатуры
		Если СтрокаРегистрации.Строки.Количество() = 0 Тогда
			СообщитьОбОшибкеРегистрации("Файл с ответом о регистрации номенклатуры не содержит данных!", РезультатРегистрации);
			Возврат 0; 
		КонецЕсли;
		
		// анализируем данные о регистрации нашей номенклатуры
		Если СтрокаРегистрации.Строки.Количество() = 1 Тогда
			СообщитьОбОшибкеРегистрации("Файл с ответом о регистрации номенклатуры не содержит данных о результатах регистрации номенклатуры!", РезультатРегистрации);
		КонецЕсли;

		// данные о регистрации есть, ищем общий ответ о регистрации	
		Для Каждого ИнформацияОРегистрации Из СтрокаРегистрации.Строки Цикл
			
			ТекущийРезультатРегистрации = ПолучитьИнформациюОРегистрацииЕдиницы(ТаблицаДляРегистрации, ИнформацияОРегистрации);
			
			Если ТекущийРезультатРегистрации Тогда
				КоличествоЗарегистрированныхПозиций = КоличествоЗарегистрированныхПозиций + 1;
			Иначе
				РезультатРегистрации = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		ВнестиИнформациюОрегитсрацииВБазуДанных(ТаблицаДляРегистрации, Номенклатура);
        		
	Исключение
		
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Ошибка при регистрации номенклатуры");
		РезультатРегистрации = Ложь;
				
	КонецПопытки;
	
	Если КоличествоЗарегистрированныхПозиций <> 0 Тогда
		КоличествоЗарегистрированныхПозиций = КоличествоЗарегистрированныхПозиций - 1;
	КонецЕсли;
	
	Возврат КоличествоЗарегистрированныхПозиций;
	
КонецФункции

// устанавливает описание ошибки у таблицы регистрации
Процедура УстановитьПризнакОшибкиПриРегистрации(ТаблицаДляРегистрации, ОписаниеОшибки)
	
	Для Каждого СтрокаТаблицыРегистрации Из ТаблицаДляРегистрации.Строки Цикл
		
		Если ОпределитьНужноОтсылатьВЮнисканСтрокуДляРегистрации(СтрокаТаблицыРегистрации) Тогда
			СтрокаТаблицыРегистрации.КодРегистрации = "-500";
			СтрокаТаблицыРегистрации.РезультатРегистрации = ОписаниеОшибки;
		КонецЕсли;
		
		УстановитьПризнакОшибкиПриРегистрации(СтрокаТаблицыРегистрации, ОписаниеОшибки);
	КонецЦикла;
		
КонецПроцедуры

// Функция осуществляет регистрацию номенклатур в таблице
Функция ЗарегистрироватьДанныеТаблицы(ТаблицаДляРегистрации, Номенклатура, РезультатРегистрации)
	
	// создаем дерево для регистрации номенклатуры
	РезультатРегистрации = Ложь;
	УзелРегистрации = Неопределено;
	ДеревоДляРегистрацииНоменклатуры = СоздатьБазовоеДеревоРегистрации(НоменклатураДляРегистрации, УзелРегистрации);
	
	Для Каждого СтрокаТаблицыРегистарции Из ТаблицаДляРегистрации.Строки Цикл
		
		Если НЕ ОпределитьНужноОтсылатьВЮнисканСтрокуДляРегистрации(СтрокаТаблицыРегистарции) Тогда
			Продолжить; 
		КонецЕсли;
		
		// предупредим о том, что нет междунарочднго сокращения у единицы измененрия
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыРегистарции.МеждународнаяЕдиницаИзмерения) Тогда
			
			ТекстВопроса = "Не указана единица измерения регистрируемой номенклатуры.
				|Для единицы измерения не задано международное сокращение в справочнике ""Классификатор единиц измерения"". 
				|Номенклатура может быть зарегистрирована с пустой единицей измерения. Продолжить регистрацию?";
			
			ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,  КодВозвратаДиалога.Нет);
			
			Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Регистрация отменена пользователем.");
				Возврат 0;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		УзелДляТранспортнойУпаковки = СоздатьИнформациюОПотребительскойУпаковке(УзелРегистрации, СтрокаТаблицыРегистарции.УникальныйНомер,
						ПолучитьПрефиксПредприятия(), СтрокаТаблицыРегистарции.УникальныйНомерТовара,
						СтрокаТаблицыРегистарции.ТипУпаковки, СтрокаТаблицыРегистарции.КоличествоВес, СтрокаТаблицыРегистарции.МеждународнаяЕдиницаИзмерения,
						СтрокаТаблицыРегистарции.ОтличительныеСвойстваТовара, СтрокаТаблицыРегистарции.ДополнительныеСвойстваТовара,
						СтрокаТаблицыРегистарции.ОКП, СтрокаТаблицыРегистарции.ЕдиничнаяУпаковка);
						
		// информацию о транспортной упаковке грузим всегда
		Для Каждого СтрокаТранспортныхУпаковок Из СтрокаТаблицыРегистарции.Строки Цикл  
			
			Если НЕ ОпределитьНужноОтсылатьВЮнисканСтрокуДляРегистрации(СтрокаТаблицыРегистарции) Тогда
				Продолжить; 
			КонецЕсли;
           			
			Узел = СоздатьИнформациюОТранспортнойУпаковке(УзелДляТранспортнойУпаковки, СтрокаТранспортныхУпаковок.УникальныйНомер, 
							ПолучитьПрефиксПредприятия(), СтрокаТаблицыРегистарции.УникальныйНомерТовара, 
							СтрокаТранспортныхУпаковок.КодТранспортнойУпаковки, СтрокаТранспортныхУпаковок.НаименованиеТранспортнойУпаковки, 
							СтрокаТранспортныхУпаковок.КоэффициентТранспортнойУпаковки,
							СтрокаТранспортныхУпаковок.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.МеждународноеСокращение);
		КонецЦикла;

	КонецЦикла;
	
	// регистрим в Юнискане
	РезультирующееДерево = ЗарегистрироватьДеревоТоваров(ДеревоДляРегистрацииНоменклатуры);
	Если РезультирующееДерево = Неопределено Тогда
		// надо у всех позиций которые хотели регистрировать поставить признак ошибки
		УстановитьПризнакОшибкиПриРегистрации(ТаблицаДляРегистрации, "Критическая ошибка при регистрации товаров!");
		Предупреждение("Произошла ошибка при регистрации товаров!");
		// ничего зарегистрировать не смогли...
		Возврат 0;
	КонецЕсли;
	
	КоличествоЗарегистрированныхПозиций = ПолучитьРезультатыРегистрации(ТаблицаДляРегистрации, РезультирующееДерево, Номенклатура, РезультатРегистрации);
	
	Возврат КоличествоЗарегистрированныхПозиций;
	
КонецФункции


// функция по конкретной строке таблицы определяет отсылать ее в юнискан или нет
Функция ОпределитьНужноОтсылатьВЮнисканСтрокуДляРегистрации(СтрокаТаблицы)
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// если галочки нет, то ничего не отправляем
	Если ТипЗнч(СтрокаТаблицы) = Тип("СтрокаДереваЗначений") Тогда
		
		Если СтрокаТаблицы.Родитель = Неопределено Тогда
			НужноРегистрировать = СтрокаТаблицы.ФлагВыбора; 	
		Иначе
			НужноРегистрировать = СтрокаТаблицы.Родитель.ФлагВыбора;	
		КонецЕсли;
			
	Иначе
		НужноРегистрировать = Истина;	
	КонецЕсли;
	
	Если Не НужноРегистрировать Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (СтрокаТаблицы.УникальныйНомер < 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// потребительскую упаковку нужно будет регистрировать если у нее есть транспортные упаковки
	Для Каждого СтрокаТранспортнойУпаковки Из СтрокаТаблицы.Строки Цикл
		
		// транспортные упаковки пытаемся зарегистрировать все и всегда (не храним признак того что она уже зарегистрирована)
		Если (СтрокаТранспортнойУпаковки.УникальныйНомер < 0) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Функция Возвращает есть ли что отсылать для регистрации в Юнискан
Функция ОпределитьЕстьДанныеДляОтправкиВЮнискан(ТаблицаДляРегистрации)
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляРегистрации.Строки Цикл
		
		НужноРегистрировать = ОпределитьНужноОтсылатьВЮнисканСтрокуДляРегистрации(СтрокаТаблицы);
		Если НужноРегистрировать Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Процедура производит при необходимости регистрацию номенклатуры
Процедура ВыполнитьРегистрацию(ТаблицаДляРегистрации)
	
	Перем ИмяФайлаДляЗаписиЗапроса, ИмяФайлаДляЗаписиОтвета, РезультатРегистрации;
	
	// проверяем то что предполагается зарегистрировать
	ЕстьДанныеДляОтправки = ОпределитьЕстьДанныеДляОтправкиВЮнискан(ТаблицаДляРегистрации);
	
	Если Не ЕстьДанныеДляОтправки Тогда
		Предупреждение("Нет данных для регистрации новой номенклатуры.",, "Регистрация номенклатуры");
		Возврат;
	КонецЕсли;
	
	// задаем вопрос на подтверждение регистрации номенклатуры
	ОтветПользователя = Вопрос("После отправки регистрационного пакета НЕВОЗМОЖНО будет изменить данные регистрации. 
		|Вы уверены что все данные для регистрации указаны верно?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "ВНИМАНИЕ!!!");
		
	Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда 
		// пользователь не уверен что вся информация указана корректно
		Возврат;
	КонецЕсли;
	
	// получаем результат того сколько зарегистрировано позиций
	КоличествоЗарегистрированныхПозиций = ЗарегистрироватьДанныеТаблицы(ТаблицаДляРегистрации, НоменклатураДляРегистрации, РезультатРегистрации);
	
	Если РезультатРегистрации Тогда
		УдалитьФайлыРегистрации();  
	Иначе
		ВернутьИменаФайловДляРегистрации(ИмяФайлаДляЗаписиЗапроса, ИмяФайлаДляЗаписиОтвета);

		Сообщить("При регистрации было зарегистрировано " + Строка(КоличествоЗарегистрированныхПозиций) + " номенклатурных позиций", СтатусСообщения.Важное);
		Сообщить("Исходный запрос на регистрацию расположен в файле: " + ИмяФайлаДляЗаписиЗапроса);
		Сообщить("Результирующий ответ на запрос о регистрации расположен в файле: " + ИмяФайлаДляЗаписиОтвета);
	КонецЕсли;
	
	// обновляем данные контролов
	ЭлементыФормы.ТаблицаДляРегистрации.ОбновитьСтроки();
	
	// если нет актовной стрки, но сами строки есть, то отображаем данные для первой из них
	Если (ЭлементыФормы.ТаблицаДляРегистрации.ТекущиеДанные = Неопределено)
		И (ТаблицаДляРегистрации.Строки.Количество() > 0) Тогда
		ОтобразитьДанныеСтрокиРегистрации(ТаблицаДляРегистрации.Строки[0]);		
	Иначе	
		ОтобразитьДанныеСтрокиРегистрации(ЭлементыФормы.ТаблицаДляРегистрации.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

// процедура выполняет все действия по отоборажению пользователю результатов регистрации
Процедура ОбработатьВыводСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ОпределитьНужноОтсылатьВЮнисканСтрокуДляРегистрации(ДанныеСтроки) Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
	
	Если ДанныеСтроки.КодРегистрации = "" Тогда
		ОформлениеСтроки.ЦветТекста =  WebЦвета.Черный;
	ИначеЕсли ДанныеСтроки.КодРегистрации = "0" Тогда
		// успешно зарегистрирован
		ОформлениеСтроки.ЦветТекста =  WebЦвета.Зеленый;
	Иначе
		// не прошел регистрацию
		ОформлениеСтроки.ЦветТекста =  ЦветаСтиля.ТекстПредупреждающейНадписи;
	КонецЕсли;
	
КонецПроцедуры
    
// процедура помечает для регистрации строки таблицы регистрации
Процедура ПометитьСтрокиДляРегистрации(ТаблицаРегистрации, Флаг)
	
	Для Каждого СтрокаДерева Из ТаблицаРегистрации.Строки Цикл
		
		СтрокаДерева.ФлагВыбора = Флаг;
		
	КонецЦикла;
	
КонецПроцедуры

// процедура заполняет таблицы для отображения данных регистрации текущей номенклатуры
Процедура ЗаполнитьТаблицыРегистрацииДанных()
	
	ЗаполнитьТаблицуДляРегистрацииВЮнискан(НоменклатураДляРегистрации);
	ОтобразитьОсновноеОписаниеТовара();
	
КонецПроцедуры

// СОБЫТИЯ
///////////////////////////////////////////////////////////////////////////////

Процедура НоменклатураДляРегистрацииПриИзменении(Элемент)
	
	ЗаполнитьТаблицыРегистрацииДанных();
	
КонецПроцедуры

// событие при нажатии на кнопку зарегистрировать
Процедура КнопкаЗарегистрироватьНажатие(Кнопка)
	
	ВыполнитьРегистрацию(ТаблицаДляРегистрации);
			
КонецПроцедуры

// при активизации строки таблицы регистрации номенклатурных позиций
Процедура ТаблицаДляРегистрацииПриАктивизацииСтроки(Элемент)
	
	ОтобразитьДанныеСтрокиРегистрации(Элемент.ТекущиеДанные);
	
КонецПроцедуры

// при выводе строки у таблицы регистрации
Процедура ТаблицаДляРегистрацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если (ДанныеСтроки = Неопределено) ИЛИ (ДанныеСтроки.ФлагВыбора = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыводСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// перед открытием формы
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭлементыФормы.ПолеВводаУникальныйНомерТовара.Доступность = Ложь;
	
КонецПроцедуры

// при изменении номера товара
Процедура ПолеВводаУникальныйНомерТовараПриИзменении(Элемент)
	
	Перем  СтрокаНомераТовара;
	
	// номер товара обратно в таблицу регистрации передаем
	Если Элемент.Значение < 0 Тогда
		// смысловую нагрузку несет только положительный номер товара
		Элемент.Значение = -1;
	Иначе
		ПрефиксПредприятия = ПолучитьПрефиксПредприятия();
		// проверка есть ли такой уже зарегистрированный штрихкод у нас в ИБ
		ШтрихКодТовара = УправлениеРозничнойТорговлей.ПолучитьШтрихКодПоПредприятияюИНомеруТовара(ПрефиксПредприятия, Элемент.Значение, СтрокаНомераТовара);
		Если Не ПустаяСтрока(ШтрихКодТовара) Тогда
			КонтрольноеЧисло = РаботаСТорговымОборудованием.КонтрольныйСимволEAN(ШтрихКодТовара, 13);
            ШтрихКодТовара = ШтрихКодТовара + Строка(КонтрольноеЧисло);
		КонецЕсли;
			
		СуществуетШтрихКод = ОпределитьСуществаованиеШтрихКода(ШтрихКодТовара);
		
		Если СуществуетШтрихКод Тогда
			Предупреждение("Товар с номером: " + Элемент.Значение + " уже зарегистрирован.");
			Элемент.Значение = -1;	
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСтроки = ЭлементыФормы.ТаблицаДляРегистрации.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		ДанныеСтроки.УникальныйНомерТовара = Элемент.Значение; 	
	КонецЕсли;
	
КонецПроцедуры

// при выводе строки у транспортных упаковок
Процедура ТаблицаТранспортныхУпаковокРегистрацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ТаблицаДляРегистрации.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// есть ли флаг для регистрации
	Если ЭлементыФормы.ТаблицаДляРегистрации.ТекущиеДанные.ФлагВыбора = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыводСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// обработчик нажатия на кнопку выделения всего для регистрации
Процедура КоманднаяПанельВыборРегистрацииОтметитьВсеДляРегистрации(Кнопка)
	
	ПометитьСтрокиДляРегистрации(ТаблицаДляРегистрации, Истина);
	
КонецПроцедуры

// обработчик нажатия на кнопку отмены выделения всего для регистрации
Процедура КоманднаяПанельВыборРегистрацииОтменитьВыделениеВсегоДляРегистрации(Кнопка)
	
	ПометитьСтрокиДляРегистрации(ТаблицаДляРегистрации, Ложь);
	
КонецПроцедуры

// при изменении флажка у ТаблицаДляРегистрации
Процедура ТаблицаДляРегистрацииПриИзмененииФлажка(Элемент, Колонка)
	
	ЭлементыФормы.ТаблицаДляРегистрации.ОбновитьСтроки(ЭлементыФормы.ТаблицаДляРегистрации.ТекущиеДанные);
	
КонецПроцедуры

// событие при нажатии на кнопку обновить
Процедура КоманднаяПанельВыборРегистрацииОбновитьДанные(Кнопка)
	
	ЗаполнитьТаблицуДляРегистрацииВЮнискан(НоменклатураДляРегистрации);
	ОтобразитьОсновноеОписаниеТовара();	
	
КонецПроцедуры

// при открытии формы
Процедура ПриОткрытии()
	
	ЗаполнитьТаблицыРегистрацииДанных();
	
КонецПроцедуры


// ИНИЦИАЛИЗАЦИЯ НАЧАЛЬНЫХ ЗНАЧЕНИЙ

мУникальныйНомер = -1;
мЗарезервированныйНомерРегистрацииТранспортныхУпаковок = -777;