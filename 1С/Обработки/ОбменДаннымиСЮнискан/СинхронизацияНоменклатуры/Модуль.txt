Перем мТекущаяСтрокаДанных;


// Функция создает базовое дерево для регистрации товара
Функция СоздатьБазовоеДеревоДляЗапросаПоНоменклатуре(GLNПредприятия, ПарольПредприятия)
	
	РезультирующееДерево = Новый ДеревоЗначений();
	РезультирующееДерево.Колонки.Добавить("Имя");
	РезультирующееДерево.Колонки.Добавить("Значение");

	// Узел создаем
	БазовыйУзел = ДобавитьУзелВДерево(РезультирующееДерево.Строки, "RequestBASE460");
	
	// версия
	ДобавитьСтрокуВДерево(БазовыйУзел.Строки, "version", "1.0");
	
	// авторизация
	УзелАвторизации = ДобавитьУзелВДерево(БазовыйУзел.Строки, "SenderIdentification");
	// логин
	ДобавитьУзелВДерево(УзелАвторизации.Строки, "GlobalLocationNumber", GLNПредприятия);
	// пароль
	ДобавитьУзелВДерево(УзелАвторизации.Строки, "Password", ПарольПредприятия);
	
	Возврат РезультирующееДерево;
	
КонецФункции

// функция запрашивает информацию о зарегистрированной в Юнискан номенклатуре
Функция ПолучитьИнформациюОЗарегистрированнойНоменклатуре(ТаблицаДанных)
	
	Дерево = СоздатьБазовоеДеревоДляЗапросаПоНоменклатуре("4601546999986", "474503122"); 
	
	ДобавитьУзелВДерево(Дерево.Строки[0].Строки, "Query", "SearchByGTIN");
	ДобавитьУзелВДерево(Дерево.Строки[0].Строки, "Query", "SearchByListOfGTIN");
	
	Для Каждого СтрокаСписка Из ТаблицаДанных Цикл
		
		Если ЗначениеЗаполнено(СтрокаСписка.ШтрихКод) Тогда
			ДобавитьУзелВДерево(Дерево.Строки[0].Строки, "Param", СтрокаСписка.ШтрихКод);
		КонецЕсли;
	
	КонецЦикла;
	
	РезультирующееДерево = ПолучитьИнформациюОТоварах(Дерево);
	
	Возврат РезультирующееДерево;
	
КонецФункции

// функция производит обращение к Юнискану для получения данных о товарах по дереву запроса
Функция ПолучитьИнформациюОТОварах(ДеревоЗапросаТоваров)
	
	Перем ИмяФайлаДляЗаписиЗапроса, ИмяФайлаДляЗаписиОтвета;
	
	ВернутьИменаФайловДляПолученияИнформацииПоНоменклатуре(ИмяФайлаДляЗаписиЗапроса, ИмяФайлаДляЗаписиОтвета);
	РезультирующееДерево = ОтправитьДеревоПоHTTP(ДеревоЗапросаТоваров, ИмяФайлаДляЗаписиЗапроса, ИмяФайлаДляЗаписиОтвета, "gepir.ean.ru", "/1c/1c.asp");
				
	Возврат РезультирующееДерево;
	
КонецФункции

// функция возвращает описание ошибки получения данных о номенклатуре
Функция ПолучитьОписаниеОшибкиПолученияНоменклатуры(Знач КодОшибки)
	
	Если КодОшибки = "0" Тогда
		Возврат "";
	ИначеЕсли КодОшибки = "1" Тогда
		Возврат "SuccessLogin";
	ИначеЕсли КодОшибки = "2" Тогда
		Возврат "ValidateError";
	ИначеЕсли КодОшибки = "5" Тогда
		Возврат "Неверный пароль";
	ИначеЕсли КодОшибки = "11" Тогда
		Возврат "Неверный GLN организации";	
	ИначеЕсли КодОшибки = "12" Тогда
		Возврат "Неверный штрихкод";	
	ИначеЕсли КодОшибки = "13" Тогда
		Возврат "Неверный префикс штрихкода";	
	ИначеЕсли КодОшибки = "14" Тогда
		Возврат "Штрихкод не найден";	
	ИначеЕсли КодОшибки = "17" Тогда
		Возврат "Фатальная ошибка при получении данных";	
	Иначе
		Возврат "Ошибка с кодом: " + КодОшибки;
	КонецЕсли;
	
КонецФункции

// процедура переносит информацию о не найденной номенклатуре
Процедура ПеренестиИнформациюОНеНайденнойНоменклатуре(ДеревоОшибок, ТаблицаДанных)
	
	// получаем строку кода
	СтрокаКода = ДеревоОшибок.Строки.Найти("Code", "Имя", Ложь);
	КодОшибки = ПолучитьЗначениеУзлаДерева(СтрокаКода);
	
	НоменклатураНайдена = (КодОшибки = "0");
	
	// анализируем параметр и эту строку таблицы помечаем как не найденную
	СтрокаПараметра = ДеревоОшибок.Строки.Найти("Param", "Имя", Ложь);
	ШтрихКод = ПолучитьЗначениеУзлаДерева(СтрокаПараметра);
	
	СтрокаТаблицыДанных = ТаблицаДанных.Найти(ШтрихКод, "ШтрихКод");
	Если СтрокаТаблицыДанных <> Неопределено Тогда
		
		СтрокаТаблицыДанных.Регистрация = ?(НоменклатураНайдена, 1, 0);
		
		Если НЕ НоменклатураНайдена Тогда
			СтрокаТаблицыДанных.ОписаниеОшибки = ПолучитьОписаниеОшибкиПолученияНоменклатуры(КодОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// процедура переносит информацию о найденной номенклатуре в таблицу
Процедура ПеренестиИнформациюОНоменклатуре(ДеревоДанных, ТаблицаДанных)
	
	Наименование = "";
	ЕдиницаИзмерения = "";
	КоличествоИзмерения = "";
	Производитель = "";
	НаименованиеЕдиницыИзмерения = "";
	
	Для Каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
		
		Если СтрокаДерева.Имя = "NAME" Тогда
			Производитель = ПолучитьЗначениеУзлаДерева(СтрокаДерева);
			Продолжить;
		ИначеЕсли СтрокаДерева.Имя <> "NumberOfItems" Тогда
			Продолжить;
		КонецЕсли;
			
		// это та строка, что мы искали, теперь получаем данные
		Для Каждого СтрокаИнформации Из СтрокаДерева.Строки Цикл 
			
			Если СтрокаИнформации.Имя <> "Item" Тогда
				Продолжить;
			КонецЕсли;
				
			CтрокаКода = СтрокаИнформации.Строки.Найти("ItemID", "Имя", Ложь);
			СтрокаПрефиксаКода = CтрокаКода.Строки.Найти("Prefix", "Имя", Ложь);
			СтрокаНомераКода = CтрокаКода.Строки.Найти("ArticleNo", "Имя", Ложь);
			СтрокаКонтрольногоСимволаКода = CтрокаКода.Строки.Найти("CheckD", "Имя", Ложь);
				
			ЗначениеШтрихКода = ПолучитьЗначениеУзлаДерева(СтрокаПрефиксаКода) + 
				ПолучитьЗначениеУзлаДерева(СтрокаНомераКода) + 
				ПолучитьЗначениеУзлаДерева(СтрокаКонтрольногоСимволаКода);
				
			СтрокаНаименования = СтрокаИнформации.Строки.Найти("ItemSpec", "Имя", Ложь); 
			Наименование = ПолучитьЗначениеУзлаДерева(СтрокаНаименования);
			
			СтрокаЕдиниц = СтрокаИнформации.Строки.Найти("ItemQuantity", "Имя", Ложь);
			КоличествоИзмерения = ПолучитьЗначениеУзлаДерева(СтрокаЕдиниц);
			
			//СтрокаНаименованияЕдиницыИзмерения = СтрокаИнформации.Строки.Найти("ItemPackage", "Имя", Ложь);
			//НаименованиеЕдиницыИзмерения = ПолучитьЗначениеУзлаДерева(СтрокаНаименованияЕдиницыИзмерения);
							
			СтрокаЕдиницыИзмерения = СтрокаЕдиниц.Строки.Найти("unitOfMeasure", "Имя", Ложь);
			ЕдиницаИзмерения = СтрокаЕдиницыИзмерения.Значение;			
				
			// переносим данные в таблицу
			СтрокаТаблицыДанных = ТаблицаДанных.Найти(ЗначениеШтрихКода, "ШтрихКод");
			Если СтрокаТаблицыДанных <> Неопределено Тогда
					
				СтрокаТаблицыДанных.НаименованиеЮнискан = Наименование;	
				СтрокаТаблицыДанных.ЕдиницаИзмеренияЮнискан = ЕдиницаИзмерения;
				СтрокаТаблицыДанных.КоэффициентЮнискан = КоличествоИзмерения;
				СтрокаТаблицыДанных.ПроизводительЮнискан = Производитель;
				
				КлассификаторЕдИзмерения = УправлениеРозничнойТорговлей.НайтиИлиСоздатьКлассификаторЕдиницИзмеренияПоМеждународномуСокращению(ЕдиницаИзмерения);
				Если НЕ ЗначениеЗаполнено(КлассификаторЕдИзмерения) Тогда
					НаименованиеЕдиницыИзмерения = "";
				Иначе
					НаименованиеЕдиницыИзмерения = КлассификаторЕдИзмерения.Наименование;
				КонецЕсли;
				
				СтрокаТаблицыДанных.НаименованиеЕдиницыИзмеренияЮнискан = НаименованиеЕдиницыИзмерения;
				
			КонецЕсли;
				
		КонецЦикла;	
		
	КонецЦикла;
			
КонецПроцедуры

// Функция анализирует данные таблицы регистрации
Функция ПеренестиДанныеОЗарегистрированнойНоменклатуре(ТаблицаДанных, РезультирующееДерево)
	
	Если РезультирующееДерево = Неопределено Тогда
		Предупреждение("Произошла критическая ошибка при обмене данными с БД ЮНИСКАН/GS1 Russia");
		Возврат Ложь;
	КонецЕсли;
	
	РезультатРегистрации = Истина;
	
	Попытка
		
		// анализируем данные дерева регистрации
		// у дерева должна быть одна строка - корень
		Если РезультирующееДерево.Строки.Количество() = 0 Тогда
			СообщитьОбОшибкеРегистрации("Файл с ответом о зарегистрированной номенклатуре не содержит данных!", РезультатРегистрации);
			Возврат РезультатРегистрации; 
		КонецЕсли;
		
		Если РезультирующееДерево.Строки.Количество() > 1 Тогда
			СообщитьОбОшибкеРегистрации("Файл с ответом о регистрации номенклатуры содержит лишние данные!", РезультатРегистрации);
		КонецЕсли;
		
		// заголовок ответа
		СтрокаРегистрации = РезультирующееДерево.Строки[0];
		
		// анализируем данные о регистрации нашей номенклатуры
		Если СтрокаРегистрации.Строки.Количество() = 0 Тогда
			СообщитьОбОшибкеРегистрации("Файл с ответом о зарегистрированной номенклатуре не содержит данных!", РезультатРегистрации);
			Возврат РезультатРегистрации; 
		КонецЕсли;
		
		// анализируем данные о регистрации нашей номенклатуры
		КоличествоСтрокРегистрации = СтрокаРегистрации.Строки.Количество(); 
		Если (КоличествоСтрокРегистрации < 2) Тогда
			СообщитьОбОшибкеРегистрации("Файл с ответом о регистрации номенклатуры не содержит данных о результатах регистрации номенклатуры!", РезультатРегистрации);
			Возврат РезультатРегистрации;
		КонецЕсли;
		
		// HEAD
		СтрокаЗаголовковПоиска = СтрокаРегистрации.Строки[1];
		
		// первоначально все нашли
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			СтрокаТаблицы.Регистрация = 1;	
		КонецЦикла;
		
		// HEAD тоже должен иметь строки
		Для Каждого СтрокаЗаголовка Из СтрокаЗаголовковПоиска.Строки Цикл  
			
			// строка ошибки
			Если СтрокаЗаголовка.Имя = "Error" Тогда
				// надо перенести всю информаци по не найденной номенклатуре
        		ПеренестиИнформациюОНеНайденнойНоменклатуре(СтрокаЗаголовка, ТаблицаДанных);
			КонецЕсли
		
		КонецЦикла;
		
		// MEMBER
		Если КоличествоСтрокРегистрации >= 3 Тогда
			
			Для НомерСтроки = 2 По КоличествоСтрокРегистрации - 1 Цикл
			
				СтрокаДанныхОРегистрации = СтрокаРегистрации.Строки[НомерСтроки];
				
				// переносим данные регистрации в таблицу
				ПеренестиИнформациюОНоменклатуре(СтрокаДанныхОРегистрации, ТаблицаДанных)
							
			КонецЦикла;
			
		КонецЕсли;
			
		Возврат РезультатРегистрации;
		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Ошибка при получении данных о зарегистрированной номенклатуре");
		Возврат Ложь;	
	КонецПопытки;
	
КонецФункции

// процедура заполняет данными из информационной базы одну строку таблицы
Процедура ЗаполнитьДаннымиСтрокуТаблицыИзИБ(СтрокаТаблицы)
	
	ЗначениеШтрихКода = СтрокаТаблицы.ШтрихКод; 
		
	Запрос = Новый Запрос();
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Штрихкоды.Штрихкод,
		|	Штрихкоды.ЕдиницаИзмерения,
		|	Штрихкоды.Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ (Штрихкоды.Штрихкод = &ЗначениеШтрихКода)";
			
	Запрос.УстановитьПараметр("ЗначениеШтрихКода", ЗначениеШтрихКода);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		СтрокаТаблицы.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаТаблицы.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		
		СтрокаТаблицы.НаименованиеИБ = "";
		СтрокаТаблицы.ПроизводительИБ = "";
		СтрокаТаблицы.ЕдиницаИзмеренияИБ = "";
		СтрокаТаблицы.НаименованеиЕдиницыИзмеренияИБ = "";
		СтрокаТаблицы.КоэффициентИБ = "";
		
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
			
		Если ЗначениеЗаполнено(Выборка.Владелец) Тогда
			
			Если ТипЗнч(Выборка.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				Если ЗначениеЗаполнено(Выборка.Владелец.НаименованиеПолное) Тогда
					
					СтрокаТаблицы.НаименованиеИБ = Выборка.Владелец.НаименованиеПолное;
					
				Иначе	
					
					СтрокаТаблицы.НаименованиеИБ = Выборка.Владелец.Наименование;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаТаблицы.НаименованиеИБ = Выборка.Владелец.Наименование;
				
			КонецЕсли;
			
			СтрокаТаблицы.Номенклатура = Выборка.Владелец;
				
			// надо еще данные по производителю заполнить
			СтрокаТаблицы.ПроизводительИБ = ВернутьТорговуюМаркуПоНоменклатуре(СтрокаТаблицы.Номенклатура);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
				
			СтрокаТаблицы.ЕдиницаИзмеренияИБ = Выборка.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.МеждународноеСокращение;
			СтрокаТаблицы.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				
			СтрокаТаблицы.НаименованеиЕдиницыИзмеренияИБ = Выборка.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование;
				
			ЕдиницаХраненияОстатков = Выборка.Владелец.ЕдиницаХраненияОстатков;
			// количество - вес
			СтрокаТаблицы.КоэффициентИБ = ВернутьКоличествоВесДляЕдиницыИзмерения(СтрокаТаблицы.ЕдиницаИзмерения, 
				ЕдиницаХраненияОстатков);
						
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

//процедура заполняет значениями таблицу информации о номенклатуре из ИБ
Процедура ПеренестиДанныеОНоменклатуреИзИБ(ДанныеДляЗаполнения)
	
	Если ТипЗнч(ДанныеДляЗаполнения) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы Из ДанныеДляЗаполнения Цикл
			// только для позиций которые есть в юнискан делаем сверку
			ЗаполнитьДаннымиСтрокуТаблицыИзИБ(СтрокаТаблицы);
		КонецЦикла;
	Иначе
		ЗаполнитьДаннымиСтрокуТаблицыИзИБ(ДанныеДляЗаполнения);	
    КонецЕсли;
	
КонецПроцедуры

// процедура устанавливает признак регистрации для строки таблицы значений
Процедура ПроверитьСоответсвиеДанныхСтрокиТаблицы(СтрокаТаблицы)
	
	// только для позиций которые есть в юнискан делаем сверку
	Если СтрокаТаблицы.Регистрация <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура ) Тогда
		
		СтрокаТаблицы.Регистрация = -1;
		СтрокаТаблицы.ОписаниеОшибки = "Номенклатура отсутствует в информационной базе";
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
		
		СтрокаТаблицы.Регистрация = -1;
		СтрокаТаблицы.ОписаниеОшибки = "Единица измерения отсутствует в информационной базе";
		
	ИначеЕсли СтрокаТаблицы.НаименованиеЮнискан <> СтрокаТаблицы.НаименованиеИБ
		ИЛИ СтрокаТаблицы.ЕдиницаИзмеренияЮнискан <> СтрокаТаблицы.ЕдиницаИзмеренияИБ
		ИЛИ СтрокаТаблицы.НаименованиеЕдиницыИзмеренияЮнискан <> СтрокаТаблицы.НаименованеиЕдиницыИзмеренияИБ
		ИЛИ СтрокаТаблицы.КоэффициентЮнискан <> СтрокаТаблицы.КоэффициентИБ Тогда
		
		СтрокаТаблицы.Регистрация = -1;
		СтрокаТаблицы.ОписаниеОшибки = "НЕ СОВПАДЕНИЕ с БД ЮНИСКАН";
		
	Иначе	
    	СтрокаТаблицы.ОписаниеОшибки = "";
	КонецЕсли;
	
КонецПроцедуры

// процедура проверяет соответветвсие позиций в информационной базе и в Юнискан
Процедура ПроверитьСоотвествиеЗарегистрированныхПозиций(ДанныеДляПроверки)
	
	Если ТипЗнч(ДанныеДляПроверки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы Из ДанныеДляПроверки Цикл
			// только для позиций которые есть в юнискан делаем сверку
			ПроверитьСоответсвиеДанныхСтрокиТаблицы(СтрокаТаблицы);
		КонецЦикла;
	Иначе
		// перепроверка по новой...
		ДанныеДляПроверки.Регистрация = 1;
		ПроверитьСоответсвиеДанныхСтрокиТаблицы(ДанныеДляПроверки);	
    КонецЕсли;
	
КонецПроцедуры

// процедура производит обновление данных о номенклатуре
Процедура ПроизвестиОбновлениеДанныхОНоменклатуре(ДанныеДляОбновления)
	
	ПеренестиДанныеОНоменклатуреИзИБ(ДанныеДляОбновления);
	
	ПроверитьСоотвествиеЗарегистрированныхПозиций(ДанныеДляОбновления);
	
	ТекущийЭлемент = ЭлементыФормы.ТаблицаШтрихкодов; 
	
	// если нет актовной стрки, но сами строки есть, то отображаем данные для первой из них
	Если (ЭлементыФормы.ТаблицаШтрихкодов.ТекущиеДанные = Неопределено)
		И (ТаблицаШтрихкодов.Количество() > 0) Тогда
		ОтобразитьДанныеСтроки(ТаблицаШтрихкодов[0]);		
	Иначе	
		ОтобразитьДанныеСтроки(ЭлементыФормы.ТаблицаШтрихкодов.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

// процедура проверяет что бы не было двух одинаковых штрихкодов в таблице
Функция ПроверитьОтсутствиеОдинаковыхШтрихКодов(ТаблицаДанных)
	
	СписокДублей = Новый СписокЗначений;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ЭлементСписка = СписокДублей.НайтиПоЗначению(СтрокаТаблицы.ШтрихКод);
		
		// если элемен и так в дублях ходит
		Если ЭлементСписка <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокСтрокПоШтрихКоду = ТаблицаДанных.НайтиСтроки(Новый Структура("ШтрихКод", СтрокаТаблицы.ШтрихКод));
		
		Если СписокСтрокПоШтрихКоду.Количество() > 1 Тогда
			СписокДублей.Добавить(СтрокаТаблицы.ШтрихКод);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокДублей.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		
		// показываем пользователю дубли
		СтрокаДублей = "";
		Для Каждого Элемент Из СписокДублей Цикл
			СтрокаДублей = СтрокаДублей + Символы.ПС + Элемент.Значение; 
		КонецЦикла;
		
		Предупреждение("Невозможно организовать сверку данных. В списке присутствуют одинаковые штрихкоды:" + СтрокаДублей, 30, "Сверка данных с БД ЮНИСКАН/GS1 Russia");
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если ТаблицаШтрихКодов.Количество() = 0 Тогда
		Предупреждение("Невозможно организовать сверку данных. В списке проверки отсутствуют штрихкоды.", 30, "Сверка данных с БД ЮНИСКАН/GS1 Russia");
		Возврат;
	КонецЕсли;
	
	// первоначально нужно проверить что бы не было двух одинаковых штрихкодов в таблице
	РезультатПроверкиТаблицы = ПроверитьОтсутствиеОдинаковыхШтрихКодов(ТаблицаШтрихКодов);
	Если НЕ РезультатПроверкиТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаШтрихКодов.ЗаполнитьЗначения(-100, "Регистрация");
			
	РезультирующееДерево = ПолучитьИнформациюОЗарегистрированнойНоменклатуре(ТаблицаШтрихКодов);
	
	РезультатПереноса = ПеренестиДанныеОЗарегистрированнойНоменклатуре(ТаблицаШтрихКодов, РезультирующееДерево);	
	
	ПроизвестиОбновлениеДанныхОНоменклатуре(ТаблицаШтрихКодов);
			
КонецПроцедуры

// при выводе строки
Процедура ТаблицаШтрихкодовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// статус определяем
	Если ДанныеСтроки.Регистрация = -100 Тогда
		ОформлениеСтроки.Ячейки.Регистрация.УстановитьТекст("Не проверен");
	ИначеЕсли ДанныеСтроки.Регистрация = 0 Тогда	
		ОформлениеСтроки.Ячейки.Регистрация.УстановитьТекст("Не найден в БД БД ЮНИСКАН");
	ИначеЕсли ДанныеСтроки.Регистрация = 1 Тогда	
		ОформлениеСтроки.Ячейки.Регистрация.УстановитьТекст("Совпадает");	
	Иначе
		ОформлениеСтроки.Ячейки.Регистрация.УстановитьТекст("Не совпадает");
	КонецЕсли;
	
КонецПроцедуры

// процедура инициализирует превоначальные заголовки надписейц формы
Процедура ИнициализироватьЗаголовкиНадписейФормы()
	
	НадписьПроизводитель = "Производитель: ";
	НадписьНаименованиеИБ = "Наименование (ИБ): ";
	НадписьНаименованиеЮнискан = "Наименование (ЮНИСКАН): ";
	НадписьЕдиницаИзмеренияИБ = "Единица измерения (ИБ): ";
	НадписьЕдиницаИзмеренияЮнискан = "Единица измерения (ЮНИСКАН): ";
	НадписьКоэффициентИБ = "Коэффициент (ИБ): ";
	НадписьКоэффициентЮнискан = "Коэффициент (ЮНИСКАН): ";
	
	НадписьПараметрыОбменаСЮнискан = "Параметры обмена с БД ЮНИСКАН/GS1 Russia ";
	
КонецПроцедуры

// функция возвращает строку идущую после символов двоеточия и закрывающейся скобки
Функция ПолучитьЗначениеСвойстваСопоставления(Знач СтрокаЗначения)
	
	ПозицияДвоеточия = Найти(СтрокаЗначения, "): ");
	Возврат Сред(СтрокаЗначения, ПозицияДвоеточия + 3);
	
КонецФункции

// процедура производит раскраску надписей сопоставления
Процедура ПроизвестиРаскараскуНадписейСопоставления()
	
	Если ПолучитьЗначениеСвойстваСопоставления(НадписьНаименованиеИБ) <> ПолучитьЗначениеСвойстваСопоставления(НадписьНаименованиеЮнискан) Тогда
		ЭлементыФормы.НадписьНаименованиеЮнискан.ЦветТекста = WebЦвета.Красный;	
	Иначе
		ЭлементыФормы.НадписьНаименованиеЮнискан.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	КонецЕсли;
	
	Если ПолучитьЗначениеСвойстваСопоставления(НадписьЕдиницаИзмеренияИБ) <> ПолучитьЗначениеСвойстваСопоставления(НадписьЕдиницаИзмеренияЮнискан) Тогда
		ЭлементыФормы.НадписьЕдиницаИзмеренияЮнискан.ЦветТекста = WebЦвета.Красный;	
	Иначе
		ЭлементыФормы.НадписьЕдиницаИзмеренияЮнискан.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	КонецЕсли;
	
	Если ПолучитьЗначениеСвойстваСопоставления(НадписьКоэффициентИБ) <> ПолучитьЗначениеСвойстваСопоставления(НадписьКоэффициентЮнискан) Тогда
		ЭлементыФормы.НадписьКоэффициентЮнискан.ЦветТекста = WebЦвета.Красный;	
	Иначе
		ЭлементыФормы.НадписьКоэффициентЮнискан.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	КонецЕсли;
	
КонецПроцедуры

// процедура отображает надписи для текущей строки сопоставления
Процедура ОтобразитьДанныеСтроки(СтрокаДанных)
	
	мТекущаяСтрокаДанных = СтрокаДанных; 
	
	ИнициализироватьЗаголовкиНадписейФормы();
		
	Если СтрокаДанных <> Неопределено Тогда
		НадписьПроизводитель = НадписьПроизводитель + СтрокаДанных.ПроизводительЮнискан;
		
		НадписьНаименованиеИБ = НадписьНаименованиеИБ + СтрокаДанных.НаименованиеИБ;
		НадписьНаименованиеЮнискан = НадписьНаименованиеЮнискан + СтрокаДанных.НаименованиеЮнискан;
		
		НадписьЕдиницаИзмеренияИБ = НадписьЕдиницаИзмеренияИБ + СтрокаДанных.НаименованеиЕдиницыИзмеренияИБ + 
			?(ПустаяСтрока(СтрокаДанных.ЕдиницаИзмеренияИБ), "", " (" + СтрокаДанных.ЕдиницаИзмеренияИБ + ")");
		НадписьЕдиницаИзмеренияЮнискан = НадписьЕдиницаИзмеренияЮнискан + СтрокаДанных.НаименованиеЕдиницыИзмеренияЮнискан + 
			?(ПустаяСтрока(СтрокаДанных.ЕдиницаИзмеренияЮнискан), "", " (" + СтрокаДанных.ЕдиницаИзмеренияЮнискан + ")");
			
		НадписьКоэффициентИБ = НадписьКоэффициентИБ + СтрокаДанных.КоэффициентИБ;
		НадписьКоэффициентЮнискан = НадписьКоэффициентЮнискан + СтрокаДанных.КоэффициентЮнискан;
		
		НадписьПараметрыОбменаСЮнискан = НадписьПараметрыОбменаСЮнискан + " для штрихкода " + СтрокаДанных.ШтрихКод;
	КонецЕсли;
	
	ПроизвестиРаскараскуНадписейСопоставления();
	
	ДоступностьКнопокРедактирования(СтрокаДанных);
		
КонецПроцедуры

// процедура делает доступными или нет кнопки сопоставления номенклатуры
Процедура ДоступностьКнопокРедактирования(СтрокаДанных)
	
	ОбщаяДоступность = (СтрокаДанных <> Неопределено)
						И ((СтрокаДанных.Регистрация = 1)
							ИЛИ (СтрокаДанных.Регистрация = -1));
							
	ЭлементыФормы.СоздатьНоменклатуру.Доступность = ОбщаяДоступность И НЕ ЗначениеЗаполнено(СтрокаДанных.Номенклатура);
	
	// доступность единицы измерения
	ОбщаяДоступностьЕдиницыИзмерения = ОбщаяДоступность И ЗначениеЗаполнено(СтрокаДанных.Номенклатура);
	
	// обновлять можно только уже существующую номенклатуру
	ЭлементыФормы.ОбновитьНоменклатуру.Доступность = ОбщаяДоступностьЕдиницыИзмерения;	
	
	ЭлементыФормы.СоздатьЕдиницуИзмерения.Доступность = ОбщаяДоступностьЕдиницыИзмерения И НЕ ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмерения);
	ЭлементыФормы.ОбновитьЕдиницуИзмерения.Доступность = ОбщаяДоступностьЕдиницыИзмерения И ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмерения);
	
	ЭлементыФормы.ПодборНоменклатуры.Доступность = ОбщаяДоступность И НЕ ЗначениеЗаполнено(СтрокаДанных.Номенклатура);
	ЭлементыФормы.ПодборЕдиницыИзмерения.Доступность = ОбщаяДоступностьЕдиницыИзмерения И НЕ ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмерения);
	
КонецПроцедуры
	
// при активизации строки
Процедура ТаблицаШтрихкодовПриАктивизацииСтроки(Элемент)
	
	ОтобразитьДанныеСтроки(Элемент.ТекущиеДанные);
		
КонецПроцедуры

// при начале редактирования строк штрих кодов
Процедура ТаблицаШтрихкодовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Регистрация = -100;	
	КонецЕсли;

КонецПроцедуры

// процедура записывает в регистр штрихкодов новую строку
Процедура ДобавитьСтрокуВРегистрШтрихКодов(ШтрихКод, Номенклатура, ЕдиницаИзмерения)

	МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.Владелец         = Номенклатура;
	МенеджерЗаписи.ЕдиницаИзмерения = ЕдиницаИзмерения;
	МенеджерЗаписи.ТипШтрихкода     = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	МенеджерЗаписи.Штрихкод         = ШтрихКод;
	МенеджерЗаписи.Записать();

КонецПроцедуры

// процедура обновляет единицу измерения
Процедура ОбновитьЕдиницуИзмерения(ЕдиницаИзмерения, Знач ВызватьОбновлениеДанных = Истина)
	
	ЭтоНоваяЕдиницаИзмерения = НЕ ЗначениеЗаполнено(ЕдиницаИзмерения.Ссылка);
	
	// наименование меняем если только оно не задано
	Если ПустаяСтрока(ЕдиницаИзмерения.Наименование)
		ИЛИ НЕ ВызватьОбновлениеДанных Тогда
		ЕдиницаИзмерения.Наименование = мТекущаяСтрокаДанных.НаименованиеЕдиницыИзмеренияЮнискан;
	КонецЕсли;
	
	// ищем классификатор единиц измерения
	ЕдиницаПоКлассификатору = УправлениеРозничнойТорговлей.НайтиИлиСоздатьКлассификаторЕдиницИзмеренияПоМеждународномуСокращению(мТекущаяСтрокаДанных.ЕдиницаИзмеренияЮнискан);
	
	ЕдиницаИзмерения.ЕдиницаПоКлассификатору = ЕдиницаПоКлассификатору;
	
	// устанавливаем коэффициент юнискан
	УстановитьКоэффициентЮнисканУЕдиницыИзмерения(ЕдиницаИзмерения, мТекущаяСтрокаДанных.Номенклатура.ЕдиницаХраненияОстатков, 
		мТекущаяСтрокаДанных.КоэффициентЮнискан);
	
	ФормаЕдиницыИзмерения = ЕдиницаИзмерения.ПолучитьФорму("ФормаЭлемента", ЭтаФорма);
	ФормаЕдиницыИзмерения.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНоваяЕдиницаИзмерения Тогда
		мТекущаяСтрокаДанных.ЕдиницаИзмерения = ЕдиницаИзмерения.Ссылка;	
		
		// надо обновить регистр сведений и записать в него эту номенклатуру и единицу измерения
		ДобавитьСтрокуВРегистрШтрихКодов(мТекущаяСтрокаДанных.ШтрихКод, мТекущаяСтрокаДанных.Номенклатура, ЕдиницаИзмерения.Ссылка);
	КонецЕсли;
	
	Если ВызватьОбновлениеДанных Тогда
		ПроизвестиОбновлениеДанныхОНоменклатуре(мТекущаяСтрокаДанных);
	КонецЕсли;
	
КонецПроцедуры

// процедура обновляет реквизиты номенклатуры в соответсвии с параметрами в Юнискан
Процедура ОбновитьНоменклатуру(Номенклатура)
	
	// наименование устанавливаем
	ЭтоНоваяНоменклатура = НЕ ЗначениеЗаполнено(Номенклатура.Ссылка);
	
	Номенклатура.Наименование = мТекущаяСтрокаДанных.НаименованиеЮнискан;
	Номенклатура.НаименованиеПолное = мТекущаяСтрокаДанных.НаименованиеЮнискан;
	
	ФормаНоменклатуры = Номенклатура.ПолучитьФорму("ФормаЭлемента", ЭтаФорма);
	ФормаНоменклатуры.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// если есть отличия по единице измерения то и ее тоже обновляем до кучи
	Если ЭтоНоваяНоменклатура Тогда
		
		// устанавливаем в списке новую ссылку на номенклатуру
	 	мТекущаяСтрокаДанных.Номенклатура = Номенклатура.Ссылка;
		мТекущаяСтрокаДанных.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		
		ЕдиницаХраненияОстатков = Номенклатура.ЕдиницаХраненияОстатков.ПолучитьОбъект(); 
		ОбновитьЕдиницуИзмерения(ЕдиницаХраненияОстатков, Ложь);
		
		// надо обновить регистр сведений и записать в него эту номенклатуру и единицу измерения
		ДобавитьСтрокуВРегистрШтрихКодов(мТекущаяСтрокаДанных.ШтрихКод, Номенклатура.Ссылка, ЕдиницаХраненияОстатков.Ссылка);
	КонецЕсли;
	
	ПроизвестиОбновлениеДанныхОНоменклатуре(мТекущаяСтрокаДанных);
			
КонецПроцедуры

// создать номенклатуру для строки полученной из Юнискан
Процедура СоздатьНоменклатуруНажатие(Элемент)
	
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	ОбновитьНоменклатуру(НоваяНоменклатура);
	
КонецПроцедуры

// создать единицу измерения
Процедура СоздатьЕдиницуИзмеренияНажатие(Элемент)
	
	НоваяЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент(); 
	НоваяЕдиницаИзмерения.Владелец = мТекущаяСтрокаДанных.Номенклатура; 
	ОбновитьЕдиницуИзмерения(НоваяЕдиницаИзмерения);
	
КонецПроцедуры

// обновить единицу измерения
Процедура ОбновитьЕдиницуИзмеренияНажатие(Элемент)
	
	ЕдиницаИзмерения =  мТекущаяСтрокаДанных.ЕдиницаИзмерения.ПолучитьОбъект(); 
	ОбновитьЕдиницуИзмерения(ЕдиницаИзмерения);
	
КонецПроцедуры

// обновить номенклатуру
Процедура ОбновитьНоменклатуруНажатие(Элемент)
	
	Номенклатура = мТекущаяСтрокаДанных.Номенклатура.ПолучитьОбъект(); 
	ОбновитьНоменклатуру(Номенклатура);
	
КонецПроцедуры

// подбор номенклатуры
Процедура ПодборНоменклатурыНажатие(Элемент)
	
	ФормаВыбораНоменклатуры = Справочники.Номенклатура.ПолучитьФормуВыбора("ФормаВыбора", ЭтаФорма);
	ВыбраннаяНоменклатура = ФормаВыбораНоменклатуры.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяНоменклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяНоменклатура.ЭтоГруппа Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя зарегистрированной в БД ЮНИСКАН номенклатуре сопоставить группу товаров!");
		Возврат;
	КонецЕсли;
	
	// подставляем в таблицу и спрашиваем подтверждение
	мТекущаяСтрокаДанных.Номенклатура = ВыбраннаяНоменклатура;
	
	ВыбраннаяЕдиницаИзмерения = ПолучитьВыбраннуюПользователемЕдиницуИзмерения(ВыбраннаяНоменклатура);
	Если НЕ ЗначениеЗаполнено(ВыбраннаяЕдиницаИзмерения) Тогда
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаДанных.ЕдиницаИзмерения = ВыбраннаяЕдиницаИзмерения;
	
	ОтветПользователя = Вопрос("Вы уверены что хотите сопоставит штрихкоду """ + мТекущаяСтрокаДанных.ШтрихКод + """ номенклатуру """ +
		Строка(ВыбраннаяНоменклатура) + """ и единицу измерения """ + Строка(ВыбраннаяЕдиницаИзмерения) + """", РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Да, "Сопоставление номенклатуры и штрихкода");
		
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		мТекущаяСтрокаДанных.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		мТекущаяСтрокаДанных.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	// надо обновить регистр сведений и записать в него эту номенклатуру и единицу измерения
	ДобавитьСтрокуВРегистрШтрихКодов(мТекущаяСтрокаДанных.ШтрихКод, мТекущаяСтрокаДанных.Номенклатура, мТекущаяСтрокаДанных.ЕдиницаИзмерения);
		
	ПроизвестиОбновлениеДанныхОНоменклатуре(мТекущаяСтрокаДанных);
	
КонецПроцедуры

//функция возвращает выбранную пользователем единицу измерения
Функция ПолучитьВыбраннуюПользователемЕдиницуИзмерения(Номенклатура)
	
	ФормаВыбораЕдиницы = Справочники.ЕдиницыИзмерения.ПолучитьФормуВыбора("ФормаВыбора", ЭтаФорма);
	
	ОтборВладельца = ФормаВыбораЕдиницы.Отбор.Владелец;
	ОтборВладельца.Использование = Истина;
	ОтборВладельца.Значение = Номенклатура;
	
	ВыбраннаяЕдиница = ФормаВыбораЕдиницы.ОткрытьМодально();
	
	Если ВыбраннаяЕдиница = Неопределено Тогда
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Иначе
		Возврат ВыбраннаяЕдиница;
	КонецЕсли;
	
КонецФункции

// подбор единицы измерения
Процедура ПодборЕдиницыИзмеренияНажатие(Элемент)
	
	ВыбраннаяЕдиница = ПолучитьВыбраннуюПользователемЕдиницуИзмерения(мТекущаяСтрокаДанных.Номенклатура);
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяЕдиница) Тогда
		Возврат;
	КонецЕсли;
	
	мТекущаяСтрокаДанных.ЕдиницаИзмерения = ВыбраннаяЕдиница;
	
	ОтветПользователя = Вопрос("Вы уверены что хотите сопоставит штрихкоду """ + мТекущаяСтрокаДанных.ШтрихКод + """ номенклатуру """ +
		Строка(мТекущаяСтрокаДанных.Номенклатура) + """ и единицу измерения """ + Строка(мТекущаяСтрокаДанных.ЕдиницаИзмерения) + """", РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Да, "Сопоставление номенклатуры и штрихкода");
		
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		мТекущаяСтрокаДанных.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	// надо обновить регистр сведений и записать в него эту номенклатуру и единицу измерения
	ДобавитьСтрокуВРегистрШтрихКодов(мТекущаяСтрокаДанных.ШтрихКод, мТекущаяСтрокаДанных.Номенклатура, мТекущаяСтрокаДанных.ЕдиницаИзмерения);
		
	ПроизвестиОбновлениеДанныхОНоменклатуре(мТекущаяСтрокаДанных);
	
КонецПроцедуры

//Процедура добавляет очередной штрих код в таблицу для проверки
Процедура ДобавитьШтрихКодДляПроверки(Знач ШтрихКод) Экспорт
	
	СтрокаДобавления = ТаблицаШтрихКодов.Добавить();
	СтрокаДобавления.ШтрихКод = ШтрихКод;
	СтрокаДобавления.Регистрация = -100;
	
КонецПроцедуры

// обновить данные о номенклатуре из информационной базы
Процедура КоманднаяПанельТаблицаШтрихКодовОбновить(Кнопка)
	// пробегаем все результаты регистрации и те что найдены в Юнискан по новому проверяем и сопоставляем
	Для Каждого СтрокаТаблицы Из ТаблицаШтрихКодов Цикл
		
		Если СтрокаТаблицы.Регистрация = -100 
			ИЛИ СтрокаТаблицы.Регистрация = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Регистрация = 1;
			
	КонецЦикла;
	// обновляем все данные
	ПроизвестиОбновлениеДанныхОНоменклатуре(ТаблицаШтрихКодов);
	
КонецПроцедуры

// раскрашиваем все
ИнициализироватьЗаголовкиНадписейФормы();
ПроизвестиРаскараскуНадписейСопоставления();

мТекущаяСтрокаДанных = Неопределено;