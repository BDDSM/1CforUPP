////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем НеВосстанавливатьНастройку;
Перем СтруктураСвязиЭлементовСДанными;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	СтруктураНастроек.Вставить("ИспользоватьСвойстваИКатегории", ИспользоватьСвойстваИКатегории);
	
	Возврат СтруктураНастроек;
	
КонецФункции // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт

	ПостроительОтчета.УстановитьНастройки(СтруктураСНастройками.НастройкиПостроителя);
	
	СтруктураСНастройками.Свойство("ИспользоватьСвойстваИКатегории", ИспользоватьСвойстваИКатегории);

КонецПроцедуры // ВосстановитьНастройкиИзСтруктуры()

// Процедура устанавливает значения экспортных переменных.
//
Процедура УстановитьЭкспортныеПеременные()
	
	мПланыПроизводства 	= ПланыПроизводства;
	мПланыПродаж 		= ПланыПродаж;
	мЗаказыПокупателей 	= ЗаказыПокупателей;
	мВнутренниеЗаказы 	= ВнутренниеЗаказы;
	мРасходСоСклада 	= РасходСоСклада;
	мРасходНаВыпуск 	= РасходНаВыпуск;
	                                            
	мПланыПроизводстваПроцент 	= ПланыПроизводстваПроцент;
	мПланыПродажПроцент 		= ПланыПродажПроцент;
	мЗаказыПокупателейПроцент 	= ЗаказыПокупателейПроцент;
	мВнутренниеЗаказыПроцент 	= ВнутренниеЗаказыПроцент;
	мРасходСоСкладаПроцент 		= РасходСоСкладаПроцент;
	мРасходНаВыпускПроцент 		= РасходНаВыпускПроцент;
	                                            
	мПланыПроизводстваДатаНач 	= ПланыПроизводстваДатаНач;
	мПланыПродажДатаНач 		= ПланыПродажДатаНач;
	мЗаказыПокупателейДатаНач 	= ЗаказыПокупателейДатаНач;
	мВнутренниеЗаказыДатаНач 	= ВнутренниеЗаказыДатаНач;
	мРасходСоСкладаДатаНач 		= РасходСоСкладаДатаНач;
	мРасходНаВыпускДатаНач 		= РасходНаВыпускДатаНач;
	                                            
	мПланыПроизводстваДатаКон 	= ПланыПроизводстваДатаКон;
	мПланыПродажДатаКон 		= ПланыПродажДатаКон;
	мЗаказыПокупателейДатаКон 	= ЗаказыПокупателейДатаКон;
	мВнутренниеЗаказыДатаКон 	= ВнутренниеЗаказыДатаКон;
	мРасходСоСкладаДатаКон 		= РасходСоСкладаДатаКон;
	мРасходНаВыпускДатаКон 		= РасходНаВыпускДатаКон;
	                                            
	мПланыПроизводстваИсключить = ПланыПроизводстваИсключить;
	мПланыПродажИсключить 		= ПланыПродажИсключить;
	мЗаказыПокупателейИсключить = ЗаказыПокупателейИсключить;
	мВнутренниеЗаказыИсключить 	= ВнутренниеЗаказыИсключить;
	мРасходСоСкладаИсключить 	= РасходСоСкладаИсключить;
	мРасходНаВыпускИсключить 	= РасходНаВыпускИсключить;
	
	мИзменитьРезультатРасчета 	= ИзменитьРезультатРасчета;
	мИзменитьРезультатРасчетаПроцент = ИзменитьРезультатРасчетаПроцент;
	мРезультатРасчетаОкруглитьДо = РезультатРасчетаОкруглитьДо;
	
	мРежимСложенияОбъединения = РежимСложенияОбъединения;
		
КонецПроцедуры // УстановитьЭкспортныеПеременные()

// Процедура рассчитывает плановую себестоимость номенклатуры.
//
Процедура РассчитатьЛимитыОтпускаОтпуска()
	
	УстановитьЭкспортныеПеременные();
	РассчитатьЛимитыОтпускаМатериалов();
	
	Для Каждого Строка Из ДеревоРезультат.Строки Цикл
		ЭлементыФормы.ДеревоРезультат.Развернуть(Строка);
	КонецЦикла;

КонецПроцедуры // РассчитатьПлановуюСебестоимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управления доступностью и видимостью реквизитов формы.
//
Процедура УправлениеДиалогом()
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтратегияРасчета Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Истина;
	КонецЕсли;
		
КонецПроцедуры // УправлениеДиалогом()

// Процедура управляет доступностью элементов управления на закладке "Стратегия расчета".
//
Процедура УправлениеДоступностьюЭлементовУправления(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	
	ДоступностьЭлементов = Элемент.Значение;
	
	Если ИмяЭлемента = "ФлажокПланыПроизводства" Тогда
		
		ЭлементыФормы.ПланыПроизводстваПроцент.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ПланыПроизводстваДатаНач.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ПланыПроизводстваДатаКон.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьПланыПроизводстваНаПериодС.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьПланыПроизводстваПо.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.КнопкаНастройкаПериодаПланыПроизводства.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ПланыПроизводстваИсключить.Доступность = ДоступностьЭлементов;
		
	ИначеЕсли ИмяЭлемента = "ФлажокПланыПродаж" Тогда
		
		ЭлементыФормы.ПланыПродажПроцент.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ПланыПродажДатаНач.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ПланыПродажДатаКон.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьПланыПродажНаПериодС.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьПланыПродажПо.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.КнопкаНастройкаПериодаПланыПродаж.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ПланыПродажИсключить.Доступность = ДоступностьЭлементов;
		
	ИначеЕсли ИмяЭлемента = "ФлажокЗаказыПокупателей" Тогда
		
		ЭлементыФормы.ЗаказыПокупателейПроцент.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ЗаказыПокупателейДатаНач.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ЗаказыПокупателейДатаКон.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьЗаказыПокупателейНаПериодС.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьЗаказыПокупателейПо.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.КнопкаНастройкаПериодаЗаказыПокупателей.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ЗаказыПокупателейИсключить.Доступность = ДоступностьЭлементов;
		
	ИначеЕсли ИмяЭлемента = "ФлажокВнутренниеЗаказы" Тогда
		
		ЭлементыФормы.ВнутренниеЗаказыПроцент.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ВнутренниеЗаказыДатаНач.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ВнутренниеЗаказыДатаКон.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьВнутренниеЗаказыНаПериодС.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьВнутренниеЗаказыПо.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.КнопкаНастройкаПериодаВнутренниеЗаказы.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.ВнутренниеЗаказыИсключить.Доступность = ДоступностьЭлементов;
		
	ИначеЕсли ИмяЭлемента = "ФлажокРасходСоСклада" Тогда
		
		ЭлементыФормы.РасходСоСкладаПроцент.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.РасходСоСкладаДатаНач.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.РасходСоСкладаДатаКон.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьРасходСоСкладаНаПериодС.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьРасходСоСкладаПо.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.КнопкаНастройкаПериодаРасходСоСклада.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.РасходСоСкладаИсключить.Доступность = ДоступностьЭлементов;
		
	ИначеЕсли ИмяЭлемента = "ФлажокРасходНаВыпуск" Тогда
		
		ЭлементыФормы.РасходНаВыпускПроцент.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.РасходНаВыпускДатаНач.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.РасходНаВыпускДатаКон.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьРасходНаВыпускНаПериодС.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.НадписьРасходНаВыпускПо.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.КнопкаНастройкаПериодаРасходНаВыпуск.Доступность = ДоступностьЭлементов;
		ЭлементыФормы.РасходНаВыпускИсключить.Доступность = ДоступностьЭлементов;
	
	ИначеЕсли ИмяЭлемента = "ФлажокИзменитьРезультатРасчета" Тогда
		
		ЭлементыФормы.ИзменитьРезультатРасчетаПроцент.Доступность = ДоступностьЭлементов;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностьюЭлементовУправления()

// Процедура управляет доступностью отборов.
//
Процедура УправлениеДоступностьюОтборов()
	
	Для каждого Поле из ПостроительОтчета.ДоступныеПоля Цикл
	
		Если Найти(Поле.Имя, "ПланыПроизводства") > 0 Тогда
			
			Поле.Отбор = ПланыПроизводства;
			
		ИначеЕсли Найти(Поле.Имя, "ПланыПродаж") > 0 Тогда
			
			Поле.Отбор = ПланыПродаж;
			
		ИначеЕсли Найти(Поле.Имя, "ЗаказыПокупателей") > 0 Тогда
			
			Поле.Отбор = ЗаказыПокупателей;
			
		ИначеЕсли Найти(Поле.Имя, "ВнутренниеЗаказы") > 0 Тогда
			
			Поле.Отбор = ВнутренниеЗаказы;
			
		ИначеЕсли Найти(Поле.Имя, "РасходНаВыпуск") > 0 Тогда
			
			Поле.Отбор = РасходНаВыпуск;
			
		ИначеЕсли Найти(Поле.Имя, "РасходСоСклада") > 0 Тогда
			
			Поле.Отбор = РасходСоСклада;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // УправлениеДоступностьюОтборов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ВладелецФормы = Неопределено Тогда
		Отказ = Истина;
		Предупреждение("Данная обработка вызывается из других процедур конфигурации.
		               |Вручную ее вызывать запрещено."); 
		Возврат;
	КонецЕсли;
	
	Если НЕ (НеВосстанавливатьНастройку = Истина) Тогда

		ЗаполнитьНачальныеНастройки();
		
	КонецЕсли;
	
	УправлениеОтчетами.УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными, "ОбработкаОбъект.ПостроительОтчета.Отбор");
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	УправлениеДиалогом();
	
	УправлениеДоступностьюЭлементовУправления(ЭлементыФормы.ФлажокПланыПроизводства);
	УправлениеДоступностьюЭлементовУправления(ЭлементыФормы.ФлажокПланыПродаж);
	УправлениеДоступностьюЭлементовУправления(ЭлементыФормы.ФлажокЗаказыПокупателей);
	УправлениеДоступностьюЭлементовУправления(ЭлементыФормы.ФлажокВнутренниеЗаказы);
	УправлениеДоступностьюЭлементовУправления(ЭлементыФормы.ФлажокРасходСоСклада);
	УправлениеДоступностьюЭлементовУправления(ЭлементыФормы.ФлажокРасходНаВыпуск);
	УправлениеДоступностьюЭлементовУправления(ЭлементыФормы.ИзменитьРезультатРасчета);
	
	УправлениеДоступностьюОтборов();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Ответ = Вопрос("Закрыть форму расчета лимитов отпуска материалов?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события перед сохранением значений формы
//
Процедура ПередСохранениемЗначений(Отказ)
	
	СохраненныеНастройки = СформироватьСтруктуруДляСохраненияНастроек();
	
КонецПроцедуры // ПередСохранениемЗначений()

// Процедура - обработчик события после восстановления значений формы
//
Процедура ПослеВосстановленияЗначений()
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВосстановленияЗначений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Далее" командной панели формы.
//
Процедура ОсновныеДействияФормыДалее(Кнопка)
	
	Страницы = ЭлементыФормы.ОсновнаяПанель.Страницы;
	
	ТекущаяСтраницаИндекс = Страницы.Индекс(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница);
	ИндексСтраницы = ТекущаяСтраницаИндекс;
	СледующаяСтраница = -1; 
	Пока СледующаяСтраница = -1 Цикл
		ИндексСтраницы = ИндексСтраницы + 1;
		Если ИндексСтраницы = Страницы.Количество() Тогда
			ИндексСтраницы = 0;
		КонецЕсли;
		Если Страницы.Получить(ИндексСтраницы).Видимость Тогда
			СледующаяСтраница = ИндексСтраницы;
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Страницы[СледующаяСтраница];
	
	// Рассчитаем лимиты отпуска материалов.
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Результат Тогда
		РассчитатьЛимитыОтпускаОтпуска();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыДалее()

// Процедура вызывается при нажатии кнопки "Назад" командной панели формы.
//
Процедура ОсновныеДействияФормыНазад(Кнопка)
	
	Страницы = ЭлементыФормы.ОсновнаяПанель.Страницы;
	
	ТекущаяСтраницаИндекс = Страницы.Индекс(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница);
	ИндексСтраницы = ТекущаяСтраницаИндекс;
	СледующаяСтраница = -1; 
	Пока СледующаяСтраница = -1 Цикл
		ИндексСтраницы = ИндексСтраницы - 1;
		Если ИндексСтраницы = Страницы.Количество() Тогда
			ИндексСтраницы = 0;
		КонецЕсли;
		Если Страницы.Получить(ИндексСтраницы).Видимость Тогда
			СледующаяСтраница = ИндексСтраницы;
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Страницы[СледующаяСтраница];
	
КонецПроцедуры // ОсновныеДействияФормыНазад()

// Процедура вызывается при нажатии кнопки "Рассчитать" командной панели "Лимиты".
//
Процедура КоманднаяПанельЛимитыРассчитать(Кнопка)
	
	РассчитатьЛимитыОтпускаОтпуска();
		
КонецПроцедуры // КоманднаяПанельЛимитыРассчитать()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели "Результат".
//
Процедура КоманднаяПанельРезультатИзменить(Кнопка)
	
	ФормаОбработкаРезультата = ПолучитьФорму("ФормаОбработкаРезультата", ЭтаФорма);
	ФормаОбработкаРезультата.Лимиты = Лимиты.Выгрузить();
	ФормаОбработкаРезультата.ОткрытьМодально();
	
	Лимиты.Загрузить(ФормаОбработкаРезультата.Лимиты);
	
КонецПроцедуры // КоманднаяПанельРезультатИзменить()

// Процедура вызывается при нажатии кнопки "ОК" командной панели формы.
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Для Каждого СтрокаТаблицы Из Лимиты Цикл
		 НоваяСтрока = ДокументОбъект.Лимиты.Добавить();
		 ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	Закрыть();
	
КонецПроцедуры // ОсновныеДействияФормыОК()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриСменеСтраницы" панели "ОсновнаяПанель".
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УправлениеДиалогом();
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик изменения флажка "Использовать свойства и категории".
//
Процедура ИспользоватьСвойстваИКатегорииПриИзменении(Элемент)

	// Запоминаем текущую настройку
	Настройки = ПостроительОтчета.ПолучитьНастройки(Истина, Истина, Истина, Истина);

	// Перезаполнение объекта (с новым текстом запроса)
	ЗаполнитьНачальныеНастройки();

	// Восстанавливаем запомненную настройку
	ПостроительОтчета.УстановитьНастройки(Настройки, Истина, Истина, Истина, Истина);
	
	Оповестить("ИзмененТекстЗапроса", , ЭтаФорма);
	
	УправлениеДоступностьюОтборов();
	
КонецПроцедуры // ИспользоватьСвойстваИКатегорииПриИзменении()

// Процедура - обработчик события "Нажатие" кнопки настройки периода.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	ИмяДатаНач = СтрЗаменить(Элемент.Имя, "КнопкаНастройкаПериода", "") + "ДатаНач";
	ИмяДатаКон = СтрЗаменить(Элемент.Имя, "КнопкаНастройкаПериода", "") + "ДатаКон";
	
	МассивВозврата = УправлениеОтчетами.ВвестиПериод(ЭтаФорма[ИмяДатаНач], ЭтаФорма[ИмяДатаКон]);
	
	Если ТипЗнч(МассивВозврата) = Тип("Массив") Тогда
		
		ЭтаФорма[ИмяДатаНач] = МассивВозврата[0];
		ЭтаФорма[ИмяДатаКон] = МассивВозврата[1];
		
	КонецЕсли; 

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Процедура - обработчик изменения флажка "ФлажокПланыПроизводства"
// на закладке "Стратегия расчета".
//
Процедура ФлажокПланыПроизводстваПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовУправления(Элемент);
	УправлениеДоступностьюОтборов();
	
КонецПроцедуры // ФлажокПланыПроизводстваПриИзменении()

// Процедура - обработчик изменения флажка "ФлажокПланыПродаж"
// на закладке "Стратегия расчета".
//
Процедура ФлажокПланыПродажПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовУправления(Элемент);
	УправлениеДоступностьюОтборов();
	
КонецПроцедуры // ФлажокПланыПродажПриИзменении()

// Процедура - обработчик изменения флажка "ФлажокЗаказыПокупателей"
// на закладке "Стратегия расчета".
//
Процедура ФлажокЗаказыПокупателейПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовУправления(Элемент);
	УправлениеДоступностьюОтборов();
	
КонецПроцедуры // ФлажокЗаказыПокупателейПриИзменении()

// Процедура - обработчик изменения флажка "ФлажокВнутренниеЗаказы"
// на закладке "Стратегия расчета".
//
Процедура ФлажокВнутренниеЗаказыПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовУправления(Элемент);
	УправлениеДоступностьюОтборов();
	
КонецПроцедуры // ФлажокВнутренниеЗаказыПриИзменении()

// Процедура - обработчик изменения флажка "ФлажокРасходСоСклада"
// на закладке "Стратегия расчета".
//
Процедура ФлажокРасходСоСкладаПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовУправления(Элемент);
	УправлениеДоступностьюОтборов();
	
КонецПроцедуры // ФлажокРасходСоСкладаПриИзменении()

// Процедура - обработчик изменения флажка "ФлажокРасходНаВыпуск"
// на закладке "Стратегия расчета".
//
Процедура ФлажокРасходНаВыпускПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовУправления(Элемент);
	УправлениеДоступностьюОтборов();
	
КонецПроцедуры // ФлажокРасходНаВыпускПриИзменении()

// Процедура - обработчик изменения флажка "ИзменитьРезультатРасчетаКоличества"
// на закладке "Стратегия расчета".
//
Процедура ИзменитьРезультатРасчетаКоличестваПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовУправления(Элемент);
	
КонецПроцедуры // ИзменитьРезультатРасчетаКоличестваПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "Лимиты"

// Процедура - обработчик события "ПриИзменении" поля "Номенклатура" табличного поля "Лимиты".
//
Процедура ЛимитыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Лимиты.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
КонецПроцедуры // ЛимитыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ЕдиницаИзмерения" табличного поля "Лимиты".
//
Процедура ЛимитыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Лимиты.ТекущиеДанные;
	
	СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
	НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					
	Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента Тогда
		СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;
		СтрокаТабличнойЧасти.ЛимитОтпуска  = СтрокаТабличнойЧасти.ЛимитОтпуска * СтароеЗначениеКоэффициента
											/ НовоеЗначениеКоэффициента;
	КонецЕсли;
	
КонецПроцедуры // ЛимитыЕдиницаИзмеренияПриИзменении()

Процедура ОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отборы по свойствам должны быть обработаны специальным образом
	// Они определяются по представлению 
	Если Найти(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление, "св-во") Тогда

		Для каждого Назначение из мСоответствиеНазначений Цикл
			
			Если Найти(ЭлементыФормы.Отбор.ТекущаяСтрока.Представление, Назначение.Ключ) > 0 Тогда
				
				Свойство = Назначение.Значение;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеОтчетами.ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);

	КонецЕсли;
	
КонецПроцедуры