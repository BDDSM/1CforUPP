///////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ

// Процедура осуществляет первоначальное заполнение табличного поля.
//
// Параметры
//  Документ - <*>
//           - Основание для заполнения.
//
Процедура ПервоначальноеЗаполнение(Документ) Экспорт

	Если ТипЗнч(Документ) = Тип("СправочникСсылка.Номенклатура") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|    ИСТИНА                                  КАК Обрабатывать,
		|    РегШтрихкоды.Владелец                   КАК Номенклатура,
		|    РегШтрихкоды.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
		|    РегШтрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|    РегШтрихкоды.СерияНоменклатуры          КАК СерияНоменклатуры,
		|    РегШтрихкоды.Качество                   КАК Качество,
		|    СпрУпаковки.Ссылка                      КАК Упаковка,
		|    1                                       КАК Количество
		|ИЗ
		|    РегистрСведений.Штрихкоды           КАК РегШтрихкоды
		|    ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|        Справочник.ТранспортныеУпаковки КАК СпрУпаковки
		|        ПО РегШтрихкоды.ЕдиницаИзмерения = СпрУпаковки.Владелец
		|ГДЕ
		|    РегШтрихкоды.Владелец В ИЕРАРХИИ(&Группа)
		|    И РегШтрихкоды.ТипШтрихкода = &EAN13");
		Запрос.УстановитьПараметр("Группа", Документ);
		Запрос.УстановитьПараметр("EAN13",  ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
		Номенклатура.Загрузить(Запрос.Выполнить().Выгрузить());
	Иначе
		Документы.Добавить(Документ);
		Заполнить(Истина);
	КонецЕсли;

КонецПроцедуры // ПервоначальноеЗаполнение()

///////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура представляет обработчик события "Нажатие" кнопки
// "ЗаполнитьВсемиПозициями".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие
//           (кнопка "ЗаполнитьВсемиПозициями").
//
Процедура КнопкаЗаполнитьВсемиПозициямиНажатие(Кнопка)

	Заполнить(Ложь);

КонецПроцедуры // КнопкаЗаполнитьВсемиПозициямиНажатие()

// Процедура представляет обработчик события "Нажатие" кнопки
// "ЗаполнитьПозициямиИмеющимиТранспортныеУпаковки".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие
//           (кнопка "ЗаполнитьПозициямиИмеющимиТранспортныеУпаковки").
//
Процедура КнопкаЗаполнитьПозициямиИмеющимиТранспортныеУпаковкиНажатие(Кнопка)

	Заполнить(Истина);

КонецПроцедуры // КнопкаЗаполнитьПозициямиИмеющимиТранспортныеУпаковкиНажатие()

// Процедура представляет обработчик события "Нажатие" кнопки
// "УстановитьФлажки".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка
//           "УстановитьФлажки").
//
Процедура КнопкаУстановитьФлажкиНажатие(Кнопка)

	Врем = Номенклатура.Выгрузить();
	Врем.ЗаполнитьЗначения(Истина, "Обрабатывать");
	Номенклатура.Загрузить(Врем);

КонецПроцедуры // КнопкаУстановитьФлажкиНажатие()

// Процедура представляет обработчик события "Нажатие" кнопки "СнятьФлажки".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "СнятьФлажки").
//
Процедура КнопкаСнятьФлажкиНажатие(Кнопка)

	Врем = Номенклатура.Выгрузить();
	Врем.ЗаполнитьЗначения(Ложь, "Обрабатывать");
	Номенклатура.Загрузить(Врем);

КонецПроцедуры // КнопкаСнятьФлажкиНажатие()

// Процедура представляет обработчик события "Нажатие" кнопки "Печать".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Печать").
//
Процедура КнопкаПечатьНажатие(Кнопка)

	Печать();

КонецПроцедуры // КнопкаПечатьНажатие()

// Процедура представляет обработчик события "Нажатие" кнопки "Печать".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Печать").
//
Процедура КнопкаДействияПечатьНажатие(Кнопка)

	Печать();

КонецПроцедуры // КнопкаДействияПечатьНажатие()

// Процедура - обработчик события "Перед открытием" формы.
//
// Параметры:
//  Отказ                - <Булево>
//                       - Признак отказа от открытия формы. Если в теле
//                         процедуры-обработчика установить данному параметру
//                         значение Истина, открытие формы выполнено не будет.
//                         Значение по умолчанию: Ложь 
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если в
//                         теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет. Отказ от стандартной
//                         обработки не отменяет открытие формы.
//                         Значение по умолчанию: Истина 
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Попытка
		ШтрихКод           = Новый COMОбъект("V8.Barcod");
		ШтрихКод.ТипКода   = 11;
		ШтрихКод.Сообщение = "21234567890128";
	Исключение
		Предупреждение("Элемент управления ""1С: Печать штрихкодов"" не установлен,
		               |либо установлен элемент управления старой версии.");
		Отказ = Истина;
	КонецПопытки;

	Если Не Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() Тогда
		ЭлементыФормы.Номенклатура.Колонки.ХарактеристикаНоменклатуры.Видимость         = Ложь;
		ЭлементыФормы.Номенклатура.Колонки.ХарактеристикаНоменклатуры.ИзменятьВидимость = Ложь;
	КонецЕсли;

	Если Не Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
		ЭлементыФормы.Номенклатура.Колонки.СерияНоменклатуры.Видимость         = Ложь;
		ЭлементыФормы.Номенклатура.Колонки.СерияНоменклатуры.ИзменятьВидимость = Ложь;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "При начале редактирования" табличного поля
// "Номенклатура".
//
// Параметры:
//  Элемент     - <ТабличноеПоле>
//              - Табличное поле, с которым связано данное событие
//                ("Номенклатура").
//
//  НоваяСтрока - <Булево>
//              - Признак редактирования новой строки. Имеет значение Истина,
//                если строка была добавлена или скопирована.
//
//  Копирование - <Булево>
//              - Если данный параметр имеет значение Истина, то выполняется
//                копирование строки.
//
Процедура НоменклатураПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И (Не Копирование) Тогда
		Элемент.ТекущиеДанные.Обрабатывать = Истина;
	КонецЕсли;

КонецПроцедуры // НоменклатураПриНачалеРедактирования()

///////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет формирование табличного документа в соответствии с
// данными таблицы.
//
// Параметры
//  Нет.
//
Процедура Печать()

	Если Номенклатура.Количество() = 0 Тогда
		Предупреждение("Не задан список номенклатуры, подлежащей печати.");
		Возврат;
	КонецЕсли;

	СтрокаТЧ      = Неопределено;
	Ошибки        = "";
	Макет         = ПолучитьМакет("Макет");
	ТабДок        = Новый ТабличныйДокумент();
	ОблСтрока     = Макет.ПолучитьОбласть("Строка");
	Правый        = Ложь;
	Запрос        = Новый Запрос(
	"ВЫБРАТЬ
	|    РегШК.Штрихкод            КАК Штрихкод
	|ИЗ
	|    РегистрСведений.Штрихкоды КАК РегШК
	|ГДЕ
	|    РегШК.Владелец                     = &Владелец
	|    И РегШК.ЕдиницаИзмерения           = &ЕдиницаИзмерения
	|    И РегШК.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|    И РегШК.СерияНоменклатуры          = &СерияНоменклатуры
	|    И РегШК.Качество                   = &Качество
	|    И РегШК.ТипШтрихкода               = &ТипШтрихкода");
	Запрос.УстановитьПараметр("ТипШтрихкода",
	                          ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	Для Каждого СтрокаТЧ Из Номенклатура Цикл
		Если СтрокаТЧ.Обрабатывать Тогда
			Корректность = Истина;
			Ошибка       = "Ошибки в строке №"
			             + Формат(СтрокаТЧ.НомерСтроки, "ЧН=0; ЧГ=0");
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Ошибка = Ошибка + "
				                  | - Не указана номенклатура.";
				Корректность = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
				Ошибка = Ошибка + "
				                  | - Не указана единица измерения.";
				Корректность = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Качество) Тогда
				Ошибка = Ошибка + "
				                  | - Не указано качество.";
				Корректность = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Количество) Тогда
				Ошибка = Ошибка + "
				                  | - Не указано количество.";
				Корректность = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
				Ошибка = Ошибка + "
				                  | - Не указана упаковка.";
				Корректность = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Упаковка.Коэффициент) Тогда
				Ошибка = Ошибка + "
				                  | - Не задан коэффициент упаковки.";
				Корректность = Ложь;
			КонецЕсли;
			Если Корректность Тогда
				Запрос.УстановитьПараметр("Владелец",
				                          СтрокаТЧ.Номенклатура);
				Запрос.УстановитьПараметр("ЕдиницаИзмерения",
				                          СтрокаТЧ.ЕдиницаИзмерения);
				Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",
				                          СтрокаТЧ.ХарактеристикаНоменклатуры);
				Запрос.УстановитьПараметр("СерияНоменклатуры",
				                          СтрокаТЧ.СерияНоменклатуры);
				Запрос.УстановитьПараметр("Качество",
				                          СтрокаТЧ.Качество);
				Результат = Запрос.Выполнить();
				Если Результат.Пустой() Тогда
					Ошибка = Ошибка + "
					                  | - Для данной позиции не заданы штрихкоды EAN13.";
					Ошибки = ?(ПустаяСтрока(Ошибки),
					           "",
					           "
					           |")
					         + Ошибка;
				Иначе
					Наименование       = СтрокаТЧ.Номенклатура.Наименование
					                     + ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.ХарактеристикаНоменклатуры),
					                         "",
					                         ", " + СтрокаТЧ.ХарактеристикаНоменклатуры.Наименование)
					                     + ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.СерияНоменклатуры),
					                         "",
					                         ", " + СтрокаТЧ.СерияНоменклатуры.Наименование)
					                     + ", " + СтрокаТЧ.Качество.Наименование
					                     + ", " + СтрокаТЧ.Упаковка.Наименование
					                     + " ("
					                     + Формат(СтрокаТЧ.Упаковка.Коэффициент, "ЧН=0; ЧГ=0")
					                     + " " + СтрокаТЧ.ЕдиницаИзмерения.Наименование
					                     + ")";
					Выборка            = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						Индекс = Неопределено;
						Для Индекс = 1 По СтрокаТЧ.Количество Цикл
							Если Правый Тогда
								ОблСтрока.Рисунки.ШтрихкодПравый.Объект.Сообщение = Формат(СтрокаТЧ.Упаковка.Код, "ЧЦ=1; ЧДЦ=0; ЧН=0; ЧГ=0")
								                                                    + Лев(Выборка.Штрихкод, 12);
								ОблСтрока.Параметры.НазваниеПравое                = Наименование;
								Правый                                            = Ложь;
								ТабДок.Вывести(ОблСтрока);
							Иначе
								ОблСтрока.Рисунки.ШтрихкодЛевый.Объект.Сообщение  = Формат(СтрокаТЧ.Упаковка.Код, "ЧЦ=1; ЧДЦ=0; ЧН=0; ЧГ=0")
								                                                    + Лев(Выборка.Штрихкод, 12);
								ОблСтрока.Параметры.НазваниеЛевое                 = Наименование;
								Правый                                            = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			Иначе
				Ошибки = Ошибки
				         + ?(ПустаяСтрока(Ошибки),
				           "",
				           "
				           |")
				         + Ошибка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ПустаяСтрока(Ошибки) Тогда
		Если Правый Тогда
			ТабДок.Вывести(ОблСтрока.ПолучитьОбласть("ЭтикеткаЛевая"));
		КонецЕсли;
		ТабДок.ИмяПараметровПечати   = "ПЕЧАТЬ_ШТРИХКОДОВ_ТРАНСПОРТНЫХ_УПАКОВОК";
		ТабДок.ОтображатьГруппировки = Ложь;
		ТабДок.ОтображатьЗаголовки   = Ложь;
		ТабДок.ОтображатьСетку       = Ложь;
		ТабДок.ТолькоПросмотр        = Истина;
		ТабДок.Показать();
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке(Ошибки);
		Предупреждение("При попытке печати были обнаружены ошибки.
		               |Необходимо исправить их и повторить попытку
		               |печати еще раз.");
	КонецЕсли;

КонецПроцедуры // Печать()

// Процедура осуществляет заполнение табличной части в соответствии с
// выбранными документами.
//
// Параметры
//  СУпаковками - <Булево>
//              - Заполнять только теми позициями, для которых заданы
//                транспортные упаковки.
//
Процедура Заполнить(СУпаковками)

	Если Документы.Количество() = 0 Тогда
		Предупреждение("Не указаны документы, в соответствии с которыми
		               |должно осуществляться заполнение.");
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    ИСТИНА                              КАК Обрабатывать,
	|    ПзТовары.Номенклатура               КАК Номенклатура,
	|    ПзТовары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|    ПзТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|    ПзТовары.СерияНоменклатуры          КАК СерияНоменклатуры,
	|    ПзТовары.Качество                   КАК Качество,
	|    ВЫБОР
	|        КОГДА СпрУпаковки.Ссылка ЕСТЬ NULL ТОГДА
	|            0
	|        КОГДА СпрУпаковки.Коэффициент = 0 ТОГДА
	|            0
	|        ИНАЧЕ
	|            ВЫРАЗИТЬ (Сумма(ПзТовары.Количество) / СпрУпаковки.Коэффициент КАК Число(10,0))
	|    КОНЕЦ                               КАК Количество,
	|    СпрУпаковки.Ссылка                  КАК Упаковка
	|ИЗ
	|    (ВЫБРАТЬ
	|         РеализацияТоваровУслугТовары.Номенклатура               КАК Номенклатура,
	|         РеализацияТоваровУслугТовары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|         РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|         РеализацияТоваровУслугТовары.СерияНоменклатуры          КАК СерияНоменклатуры,
	|         РеализацияТоваровУслугТовары.Качество                   КАК Качество,
	|         РеализацияТоваровУслугТовары.Количество                 КАК Количество
	|     ИЗ
	|         Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|     ГДЕ
	|         РеализацияТоваровУслугТовары.Ссылка В(&Список)
	|     ОБЪЕДИНИТЬ ВСЕ
	|     ВЫБРАТЬ
	|         РасходныйОрдерНаТоварыТовары.Номенклатура               КАК Номенклатура,
	|         РасходныйОрдерНаТоварыТовары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|         РасходныйОрдерНаТоварыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|         РасходныйОрдерНаТоварыТовары.СерияНоменклатуры          КАК СерияНоменклатуры,
	|         РасходныйОрдерНаТоварыТовары.Качество                   КАК Качество,
	|         РасходныйОрдерНаТоварыТовары.Количество                 КАК Количество
	|     ИЗ
	|         Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	|     ГДЕ
	|         РасходныйОрдерНаТоварыТовары.Ссылка В(&Список)
	|     ОБЪЕДИНИТЬ ВСЕ
	|     ВЫБРАТЬ
	|         ПеремещениеТоваровТовары.Номенклатура                КАК Номенклатура,
	|         ПеремещениеТоваровТовары.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|         ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|         ПеремещениеТоваровТовары.СерияНоменклатуры           КАК СерияНоменклатуры,
	|         ПеремещениеТоваровТовары.Качество                    КАК Качество,
	|         ПеремещениеТоваровТовары.Количество                  КАК Количество
	|     ИЗ
	|         Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|     ГДЕ
	|         ПеремещениеТоваровТовары.Ссылка В(&Список)
	|     ОБЪЕДИНИТЬ ВСЕ
	|     ВЫБРАТЬ
	|         ВозвратТоваровПоставщикуТовары.Номенклатура                КАК Номенклатура,
	|         ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|         ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|         ВозвратТоваровПоставщикуТовары.СерияНоменклатуры           КАК СерияНоменклатуры,
	|         ВозвратТоваровПоставщикуТовары.Качество                    КАК Качество,
	|         ВозвратТоваровПоставщикуТовары.Количество                  КАК Количество
	|     ИЗ
	|         Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|     ГДЕ
	|         ВозвратТоваровПоставщикуТовары.Ссылка В(&Список)
	|     ОБЪЕДИНИТЬ ВСЕ
	|     ВЫБРАТЬ
	|         ПередачаТоваровТовары.Номенклатура                КАК Номенклатура,
	|         ПередачаТоваровТовары.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|         ПередачаТоваровТовары.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|         ПередачаТоваровТовары.СерияНоменклатуры           КАК СерияНоменклатуры,
	|         &Новый                                            КАК Качество,
	|         ПередачаТоваровТовары.Количество                  КАК Количество
	|     ИЗ
	|         Документ.ПередачаТоваров.Товары КАК ПередачаТоваровТовары
	|     ГДЕ
	|         ПередачаТоваровТовары.Ссылка В(&Список)
	|    ) КАК ПзТовары
	|    " + ?(СУпаковками, "ВНУТРЕННЕЕ", "ЛЕВОЕ") + " СОЕДИНЕНИЕ
	|        Справочник.ТранспортныеУпаковки КАК СпрУпаковки
	|        ПО СпрУпаковки.Владелец = ПзТовары.ЕдиницаИзмерения
	|СГРУППИРОВАТЬ ПО
	|    ПзТовары.Номенклатура,
	|    ПзТовары.ЕдиницаИзмерения,
	|    ПзТовары.ХарактеристикаНоменклатуры,
	|    ПзТовары.СерияНоменклатуры,
	|    ПзТовары.Качество,
	|    СпрУпаковки.Ссылка");
	Запрос.УстановитьПараметр("Список", Документы);
	Запрос.УстановитьПараметр("Новый",  Справочники.Качество.Новый);
	Врем = Номенклатура.Выгрузить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), Врем);
	Номенклатура.Загрузить(Врем);

КонецПроцедуры // Заполнить()