// Текстовые строки модуля не интернационализированы


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСтруктураПредставленийСвойств;
Перем мСтруктураОписанийТиповЗначений;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	УстановитьДоступныеТипыОбъектов();
	ОчиститьОбрабатываемыеОбъекты();
	ЗаполнитьУстанавливаемыеСвойства();
	
	Если ОписаниеТипаОбъектов.Типы().Количество() = 1 Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ОбрабатываемыеОбъекты;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

Процедура ОписаниеТипаОбъектовПриИзменении(Элемент)
	
	ОчиститьОбрабатываемыеОбъекты();
	ЗаполнитьУстанавливаемыеСвойства();
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Элемент)
	
	ВыполнитьОбработку();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ОБРАБАТЫВАЕМЫЕ ОБЪЕКТЫ

Процедура КоманднаяПанельОбрабатываемыеОбъектыУстановитьВсеПометки(Кнопка)
	
	УстановитьПометки(ОбрабатываемыеОбъекты, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельОбрабатываемыеОбъектыСнятьВсеПометки(Кнопка)
	
	УстановитьПометки(ОбрабатываемыеОбъекты, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельОбрабатываемыеОбъектыИнвертироватьПометки(Кнопка)
	
	УстановитьПометки(ОбрабатываемыеОбъекты, Неопределено);
	
КонецПроцедуры

Процедура КоманднаяПанельОбрабатываемыеОбъектыПодборОбъектов(Кнопка)
	
	СписокТипов = Новый СписокЗначений();
	
	СписокТипов.ЗагрузитьЗначения(ОписаниеТипаОбъектов.Типы());
	
	Если СписокТипов.Количество() = 0 Тогда
		Возврат;
		
	ИначеЕсли СписокТипов.Количество() = 1 Тогда
		ЭлементСпискаТипов = СписокТипов[0];
		
	Иначе
		ЭлементСпискаТипов = ВыбратьИзМеню(СписокТипов);
		
		Если ЭлементСпискаТипов = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Тип = ЭлементСпискаТипов.Значение;
	
	ИмяТипа = Метаданные.НайтиПоТипу(Тип).Имя;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		ФормаПодбора = Справочники[ИмяТипа].ПолучитьФормуВыбора(, ЭлементыФормы.ОбрабатываемыеОбъекты);
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		ФормаПодбора = Документы[ИмяТипа].ПолучитьФормуВыбора(, ЭлементыФормы.ОбрабатываемыеОбъекты);
	Иначе
		Возврат;
	КонецЕсли;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

Процедура ОбрабатываемыеОбъектыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Пометка = Истина;
	КонецЕсли;
	
	ТекущиеДанные.Объект = ОписаниеТипаОбъектов.ПривестиЗначение(ТекущиеДанные.Объект);
	
КонецПроцедуры

Процедура ОбрабатываемыеОбъектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ОписаниеТипаОбъектов.СодержитТип(ТипЗнч(ВыбранноеЗначение)) Тогда
		Если ОбрабатываемыеОбъекты.Найти(ВыбранноеЗначение, "Объект") = Неопределено Тогда
			НоваяСтрока = ОбрабатываемыеОбъекты.Добавить();
			
			НоваяСтрока.Пометка = Истина;
			НоваяСтрока.Объект  = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ УСТАНАВЛИВАЕМЫЕ СВОЙСТВА

Процедура КоманднаяПанельУстанавливаемыеСвойстваУстановитьВсеПометки(Кнопка)
	
	УстановитьПометки(УстанавливаемыеСвойства, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельУстанавливаемыеСвойстваСнятьВсеПометки(Кнопка)
	
	УстановитьПометки(УстанавливаемыеСвойства, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельУстанавливаемыеСвойстваИнвертироватьПометки(Кнопка)
	
	УстановитьПометки(УстанавливаемыеСвойства, Неопределено);
	
КонецПроцедуры

Процедура УстанавливаемыеСвойстваПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Пометка = Истина;
	КонецЕсли;
	
	ТекущиеДанные.Значение = мСтруктураОписанийТиповЗначений[ТекущиеДанные.Свойство].ПривестиЗначение(ТекущиеДанные.Значение);
	
КонецПроцедуры

Процедура УстанавливаемыеСвойстваПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Свойство.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Свойство.Текст           = мСтруктураПредставленийСвойств[ДанныеСтроки.Свойство];
	
КонецПроцедуры

Процедура УстанавливаемыеСвойстваЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.УстанавливаемыеСвойства.ТекущиеДанные;
	
	Элемент.ОграничениеТипа = мСтруктураОписанийТиповЗначений[ТекущиеДанные.Свойство];
	
КонецПроцедуры

Процедура УстанавливаемыеСвойстваЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.УстанавливаемыеСвойства.ТекущиеДанные;
	
	ТекущиеДанные.Пометка = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

// Устанавливает типы объектов, доступные для обработки.
//
// Параметры:
//  Нет.
//
Процедура УстановитьДоступныеТипыОбъектов()
	
	Если ДоступныеТипыОбъектов = Неопределено Тогда
		
		СтрокаТипов = "";
		
		Для каждого Справочник Из Метаданные.Справочники Цикл
			СтрокаТипов = СтрокаТипов + ", СправочникСсылка." + Справочник.Имя;
		КонецЦикла;
		
		Для каждого Документ Из Метаданные.Документы Цикл
			СтрокаТипов = СтрокаТипов + ", ДокументСсылка." + Документ.Имя;
		КонецЦикла;
		
		СтрокаТипов = Сред(СтрокаТипов, 3);
		
		ЭлементыФормы.ОписаниеТипаОбъектов.ДоступныеТипы = Новый ОписаниеТипов(СтрокаТипов);
	Иначе
		ЭлементыФормы.ОписаниеТипаОбъектов.ДоступныеТипы = ДоступныеТипыОбъектов;
	КонецЕсли; 
	
	
КонецПроцедуры

// Проверяет табличную часть обрабатываемых объектов на соответствие 
// типу объектов и удаляет несоответствующие строки.
//
// Параметры:
//  Нет.
//
Процедура ОчиститьОбрабатываемыеОбъекты()
	
	Индекс = 0;
	Пока Индекс < ОбрабатываемыеОбъекты.Количество() Цикл
		Если НЕ ОписаниеТипаОбъектов.СодержитТип(ТипЗнч(ОбрабатываемыеОбъекты[Индекс].Объект)) Тогда
			ОбрабатываемыеОбъекты.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

// Проверяет табличную часть устанавливаемых свойств на соответствие 
// типу объектов, добавляет необходимые и удаляет несоответствующие строки.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьУстанавливаемыеСвойства()
	
	мСтруктураПредставленийСвойств  = Новый Структура;
	мСтруктураОписанийТиповЗначений = Новый Структура;
	
	Если ОписаниеТипаОбъектов.Типы().Количество() <> 1 Тогда
		УстанавливаемыеСвойства.Очистить();
		Возврат;
	КонецЕсли;
	
	ТипОбъектов        = ОписаниеТипаОбъектов.Типы()[0];
	ОписаниеМетаданных = Метаданные.НайтиПоТипу(ТипОбъектов);
	
	ДобавитьУстанавливаемоеСвойство("ПометкаУдаления", "Пометка удаления", Новый ОписаниеТипов("Булево"), 0);
	
	УстановитьИспользованиеРеквизита = Ложь;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипОбъектов) Тогда
		Если ОписаниеМетаданных.ДлинаКода > 0 Тогда
			ДобавитьУстанавливаемоеСвойство("Код", "Код", Новый ОписаниеТипов("Строка"), 0);
		КонецЕсли;
		
		Если ОписаниеМетаданных.ДлинаНаименования > 0 Тогда
			ДобавитьУстанавливаемоеСвойство("Наименование", "Наименование", Новый ОписаниеТипов("Строка"), 0);
		КонецЕсли;
		
		Если ОписаниеМетаданных.Владельцы.Количество() > 0 Тогда
			СтрокаТипов = "";
			Для каждого Владелец Из ОписаниеМетаданных.Владельцы Цикл
				СтрокаТипов = СтрокаТипов + ", СправочникСсылка." + Владелец.Имя;
			КонецЦикла;
			СтрокаТипов = Сред(СтрокаТипов, 3);
			
			ДобавитьУстанавливаемоеСвойство("Владелец", "Владелец", Новый ОписаниеТипов(СтрокаТипов), 0);
		КонецЕсли;
		
		Если ОписаниеМетаданных.Иерархический Тогда
			ДобавитьУстанавливаемоеСвойство("Родитель", "Родитель", Новый ОписаниеТипов("СправочникСсылка." + ОписаниеМетаданных.Имя), 0);
		КонецЕсли;
		
		УстановитьИспользованиеРеквизита = Истина;
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипОбъектов) Тогда
		ДобавитьУстанавливаемоеСвойство("Дата", "Дата", Новый ОписаниеТипов("Дата"), 0);
		
		Если ОписаниеМетаданных.ДлинаНомера > 0 Тогда
			ДобавитьУстанавливаемоеСвойство("Номер", "Номер", Новый ОписаниеТипов("Строка"), 0);
		КонецЕсли;
		
		Если ОписаниеМетаданных.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ДобавитьУстанавливаемоеСвойство("Проведен", "Проведен", Новый ОписаниеТипов("Булево"), 0);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Реквизит Из ОписаниеМетаданных.Реквизиты Цикл
		
		ИспользованиеРеквизита = 0;
		
		Если УстановитьИспользованиеРеквизита Тогда
			Если Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				ИспользованиеРеквизита = ИспользованиеРеквизитаДляЭлемента;
			ИначеЕсли Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
				ИспользованиеРеквизита = ИспользованиеРеквизитаДляГруппы;
			КонецЕсли; 
		КонецЕсли; 
		
		ДобавитьУстанавливаемоеСвойство(Реквизит.Имя, Реквизит.Представление(), Реквизит.Тип, ИспользованиеРеквизита);
	КонецЦикла;
	
	Индекс = 0;
	Пока Индекс < УстанавливаемыеСвойства.Количество() Цикл
		Если НЕ мСтруктураПредставленийСвойств.Свойство(УстанавливаемыеСвойства[Индекс].Свойство) Тогда
			УстанавливаемыеСвойства.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет свойство в таблицу устанавливаемых свойств, если такого свойства нет.
//
// Параметры:
//  Свойство              - Строка - имя свойства.
//  Представление         - Строка - представление свойства.
//  ОписаниеТиповЗначения - ОписаниеТипа - описание типов знанчения свойства.
//
Процедура ДобавитьУстанавливаемоеСвойство(Свойство, Представление, ОписаниеТиповЗначения, ИспользованиеРеквизита)
	
	Если ОграничитьДоступныеСвойства
		И СписокДоступныхСвойств.НайтиПоЗначению(Свойство) = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	мСтруктураПредставленийСвойств. Вставить(Свойство, Представление);
	мСтруктураОписанийТиповЗначений.Вставить(Свойство, ОписаниеТиповЗначения);
	
	Строка = УстанавливаемыеСвойства.Найти(Свойство, "Свойство");
	
	Если Строка = Неопределено Тогда
		Строка = УстанавливаемыеСвойства.Добавить();
		Строка.Свойство = Свойство;
	КонецЕсли;
	
	Строка.Значение = ОписаниеТиповЗначения.ПривестиЗначение(Строка.Значение);
	Строка.ИспользованиеРеквизита = ИспользованиеРеквизита;
	
КонецПроцедуры

// Устанавливает пометки в колонке Пометка табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, пометки в которой устанавливаются.
//  Пометка        - Истина или Ложь - устанавливаемая пометка.
//                   Неопределено - пометки будут инвертированы.
//
Процедура УстановитьПометки(ТабличнаяЧасть, Пометка)
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		Если Пометка = Неопределено Тогда
			Строка.Пометка = НЕ Строка.Пометка;
		Иначе
			Строка.Пометка = Пометка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОСНОВНОЙ ПРОГРАММЫ