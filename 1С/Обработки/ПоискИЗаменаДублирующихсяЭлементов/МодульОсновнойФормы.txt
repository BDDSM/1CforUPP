////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мРезультатыПоиска Экспорт;
Перем мВидОбрабатываемогоСправочника Экспорт;

Перем мФормаИндикатора, мЗависимыеМетаданные;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ТекущаяГруппа()
	
	ТекущаяГруппа = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Текст;
	Если ТекущаяГруппа = "Нет групп" Тогда
		Возврат 0;
	Иначе
		поз = Найти(ТекущаяГруппа, " из");
		Возврат Число(Сред(ТекущаяГруппа, 8, поз - 8));
	КонецЕсли;
	
		
КонецФункции // () 

Процедура ОбновитьТекущуюГруппуРезультатовПоиска()
	
	ЕСли мРезультатыПоиска = Неопределено Тогда
		мРезультатыПоиска = Новый ТаблицаЗначений;
		мРезультатыПоиска.Колонки.Добавить("Ссылка");
		мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
		мРезультатыПоиска.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
		мРезультатыПоиска.Колонки.Добавить("КоличествоСсылок");
	КонецЕсли;
	
	ТекущаяГруппа = ТекущаяГруппа();
	Если ТекущаяГруппа = 0 Тогда
		ТекущаяГруппа = 1;
		Кнопка = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы;
		Кнопка.Текст = "Группа 1 из 1";
		Кнопка.Кнопки.Добавить("Группа 1", 
								ТипКнопкиКоманднойПанели.Действие, 
								"Группа 1 ( " + Строка(НайденныеОбъекты.Количество()) + " эл-тов )",
								Новый Действие("КоманднаяПанельНайденныеОбъектыВыборГруппы"));

	Иначе
		Кнопка = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Кнопки[ТекущаяГруппа-1];
		Кнопка.Текст = "Группа "+ТекущаяГруппа+" ( " + Строка(НайденныеОбъекты.Количество()) + " эл-тов )";
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", ТекущаяГруппа);
	МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		мРезультатыПоиска.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаНайденныхОбъектов Из НайденныеОбъекты Цикл
		НоваяСтрока = мРезультатыПоиска.Добавить();
		НоваяСтрока.Ссылка            = СтрокаНайденныхОбъектов.Ссылка;
		НоваяСтрока.Правильный        = СтрокаНайденныхОбъектов.Правильный;
		НоваяСтрока.КоличествоСсылок  = СтрокаНайденныхОбъектов.КоличествоСсылок;
		НоваяСтрока.НомерГруппы       = ТекущаяГруппа;
	КонецЦикла;
	
КонецПроцедуры // () 

Функция ПолучитьТаблицуОтборов()	
	
	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("Ключ");
	ТаблицаОтборов.Колонки.Добавить("Сравнение");
	ТаблицаОтборов.Колонки.Добавить("Значение");
	
	МассивОтборов = НастройкиОтчета.НайтиСтроки(Новый Структура("Предопределенный", Ложь));
	Для Каждого Отбор ИЗ МассивОтборов Цикл
		Если Отбор.ИмяНастройки = "" Тогда
			Продолжить;
		КонецЕсли;
		 
		СтрокаОтбора = ТаблицаОтборов.Добавить();
		СтрокаОтбора.Ключ = Отбор.ЗначениеНастройки;
		Если Отбор.ТипСравнения = "Равно" Тогда
			СтрокаОтбора.Сравнение = " =";
		ИначеЕсли Отбор.ТипСравнения = "Не равно" Тогда
			СтрокаОтбора.Сравнение = " <>";
		ИначеЕсли Отбор.ТипСравнения = "В иерархии" Тогда
			СтрокаОтбора.Сравнение = " В ИЕРАРХИИ(";
		ИначеЕсли Отбор.ТипСравнения = "Не в иерархии" Тогда
			СтрокаОтбора.Сравнение = " НЕ В ИЕРАРХИИ(";
		ИначеЕсли Отбор.ТипСравнения = "В списке" Тогда
			СтрокаОтбора.Сравнение = " В (";
		ИначеЕсли Отбор.ТипСравнения = "Не в списке" Тогда
			СтрокаОтбора.Сравнение = " НЕ В (";
		КонецЕсли;
		СтрокаОтбора.Значение = Отбор.Представление;
	КонецЦикла;
	
	Возврат ТаблицаОтборов;
	
КонецФункции

Процедура ОбновитьКнопкуВыбораГруппы(КоличестваПоГруппам)
	
	КнопкаВыборГруппы = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы;
	КнопкаВыборГруппы.Кнопки.Очистить();
	
	Для Каждого СтрокаГруппы ИЗ КоличестваПоГруппам Цикл
				
		КнопкаВыборГруппы.Кнопки.Добавить("Группа"+СтрокаГруппы.НомерГруппы, 
									ТипКнопкиКоманднойПанели.Действие, 
									"Группа "+СтрокаГруппы.НомерГруппы+" ( " + СтрокаГруппы.Количество + " эл-тов )",
									Новый Действие("КоманднаяПанельНайденныеОбъектыВыборГруппы"));
	КонецЦикла;

	
КонецПроцедуры

Функция ПолучитьТаблицуРезультатовПоиска(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_Таблица.Ссылка";
	Для каждого Реквизит Из ПолучитьСписокРеквизитов(Метаданные.Справочники[мВидОбрабатываемогоСправочника]) Цикл
		Запрос.Текст = Запрос.Текст + ",
		|ПРЕДСТАВЛЕНИЕ(_Таблица." + Реквизит.Значение + ") КАК Р_" + Реквизит.Значение;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Справочник." + мВидОбрабатываемогоСправочника + " КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // () 

Процедура ВывестиГруппу(НомерГруппы)
	
	Структура = Новый Структура("НомерГруппы", НомерГруппы);
	
	МассивСтрок = мРезультатыПоиска.НайтиСтроки(Структура);
	
	НайденныеОбъекты.Очистить();
	КнопкаВыборГруппы = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы;
	
	КнопкаВыборГруппы.Текст = "Группа "+НомерГруппы+" из "+ КнопкаВыборГруппы.Кнопки.Количество();
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.СледующаяГруппа.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ПредыдущаяГруппа.Доступность = Истина;

	Для Каждого СТрока Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(НайденныеОбъекты.Добавить(), СТрока);
	КонецЦикла;
	
	ТаблицаРезультатов = ПолучитьТаблицуРезультатовПоиска(НайденныеОбъекты.ВыгрузитьКолонку("Ссылка"));
	
	Для каждого Строка Из НайденныеОбъекты Цикл
		СтрокаРезультатов = ТаблицаРезультатов.Найти(Строка.Ссылка,"Ссылка");
		Если Не СтрокаРезультатов = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Строка, СтрокаРезультатов, , "Ссылка");
		КонецЕсли;
		
	КонецЦикла; 
	
	СброситьДоступность();
	
КонецПроцедуры

Функция ПолучитьЗначениеНастройки(ИмяНастройки) 
	СтрокаНастройки = НастройкиОтчета.Найти(ИмяНастройки, "ИмяНастройки");
	Если СтрокаНастройки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтрокаНастройки.ЗначениеНастройки;
	КонецЕСли;
КонецФункции

Процедура ОткрытьФормуПоНастройке(ДанныеНастройки, Элемент)
	
	Форма = ПолучитьФорму("ФормаОтбора", Элемент);	
	
	ЕСли ДанныеНастройки.Предопределенный Тогда	
		Если ДанныеНастройки.ИмяНастройки = "Вид справочника" Тогда
			ЗначенияОтбора = Форма.ЗначенияОтбора;
			Для Каждого Справочник Из Метаданные.Справочники Цикл
				СтрокаОтбора = ЗначенияОтбора.Добавить();
				СтрокаОтбора.Представление = Справочник.Синоним;
				СтрокаОтбора.Значение = Справочник.Имя;
				СтрокаОтбора.ИндексКартинки = 2;
			КонецЦикла;
		ИначеЕсли ДанныеНастройки.ИмяНастройки = "Имя реквизита" Тогда
			ИмяСправочника = мВидОбрабатываемогоСправочника;
			Если ИмяСправочника = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
			
			ЗначенияОтбора = Форма.ЗначенияОтбора;
			
			Для Каждого Реквизит Из ПолучитьСписокРеквизитов(МетаданныеСправочника) Цикл
				СтрокаОтбора = ЗначенияОтбора.Добавить();
				СтрокаОтбора.Представление = Реквизит.Представление;
				СтрокаОтбора.Значение = Реквизит.Значение;
				СтрокаОтбора.ИндексКартинки = 1;
			КонецЦикла;
			
		ИначеЕсли ДанныеНастройки.ИмяНастройки = "Режим поиска" Тогда
			ЗначенияОтбора = Форма.ЗначенияОтбора;
			
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "По равному значению реквизита";
			СтрокаОтбора.Значение = 1;
			СтрокаОтбора.ИндексКартинки = -1;
			
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "По похожим словам";
			СтрокаОтбора.Значение = 2;
			СтрокаОтбора.ИндексКартинки = -1;
			
		КонецЕсли;			
		
	Иначе
		
		ИмяСправочника = мВидОбрабатываемогоСправочника;
		Если ИмяСправочника = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
		
		ЗначенияОтбора = Форма.ЗначенияОтбора;
		//СтрокаОтбора = ЗначенияОтбора.Добавить();
		//СтрокаОтбора.Представление = "Ссылка";
		//СтрокаОтбора.Значение = "Ссылка";
		//СтрокаОтбора.ИндексКартинки = 1;
		
		Если МетаданныеСправочника.Владельцы.Количество()<>0 Тогда
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "Владелец";
			СтрокаОтбора.Значение = "Владелец";
			СтрокаОтбора.ИндексКартинки = 1;
		КонецЕсли;
		
		Если МетаданныеСправочника.Иерархический Тогда
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "Родитель";
			СтрокаОтбора.Значение = "Родитель";
			СтрокаОтбора.ИндексКартинки = 1;
		КонецЕсли;
		
		Если МетаданныеСправочника.ДлинаНаименования > 0 Тогда
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "Наименование";
			СтрокаОтбора.Значение = "Наименование";
			СтрокаОтбора.ИндексКартинки = 1;
		КонецЕсли;
		
		
		Если МетаданныеСправочника.ДлинаКода > 0 Тогда
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = "Код";
			СтрокаОтбора.Значение = "Код";
			СтрокаОтбора.ИндексКартинки = 1;
		КонецЕсли;
		
		Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
			СтрокаОтбора = ЗначенияОтбора.Добавить();
			СтрокаОтбора.Представление = Реквизит.Синоним;
			СтрокаОтбора.Значение = Реквизит.Имя;
			СтрокаОтбора.ИндексКартинки = 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.НачальноеЗначение = ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ЗначениеНастройки;
	Форма.Открыть();
	
КонецПроцедуры

Процедура НайтиПоРавенствуРеквизитов(ТаблицаОтбора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ Спр1.Ссылка КАК Ссылка,
	|Спр1." + ПолучитьЗначениеНастройки("Имя реквизита") + " КАК ЗначениеРеквизита
	|Из Справочник." + мВидОбрабатываемогоСправочника  + " КАК Спр1, Справочник." + мВидОбрабатываемогоСправочника  + " КАК Спр2
	|ГДЕ Спр1." + ПолучитьЗначениеНастройки("Имя реквизита") +  " = Спр2." + ПолучитьЗначениеНастройки("Имя реквизита") +  " И Спр1.Ссылка <> Спр2.Ссылка";
	
	Для Каждого Отбор ИЗ ТаблицаОтбора Цикл
		Запрос.Текст = Запрос.Текст + "
		| И Спр2."+Отбор.Ключ + Отбор.Сравнение + "&" + Отбор.Ключ + ?(Найти(Отбор.Сравнение, "(") > 0, ")", "");
		Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|СГРУППИРОВАТЬ ПО Спр1.Ссылка
	|";
	мРезультатыПоиска = Запрос.Выполнить().Выгрузить();
	мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
	мРезультатыПоиска.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
	мРезультатыПоиска.Колонки.Добавить("КоличествоСсылок");
	мРезультатыПоиска.Сортировать("ЗначениеРеквизита");
	
	КоличестваПоГруппам = Новый ТаблицаЗначений;
	КоличестваПоГруппам.Колонки.Добавить("НомерГруппы");
	КоличестваПоГруппам.Колонки.Добавить("Количество");
	
	ЗначениеРеквизита = Неопределено;
	ТекущаяГруппа = 0;
	ЭлементовВГруппе = 0;
	КоличествоВГруппе = Новый Соответствие;
	Для Каждого СтрокаПоиска ИЗ мРезультатыПоиска Цикл
		ЕСли СтрокаПоиска.ЗначениеРеквизита <> ЗначениеРеквизита Тогда
			Если ТекущаяГруппа <> 0 Тогда
				КоличествоВГруппе[ТекущаяГруппа]  = ЭлементовВГруппе;
				СтрокаГрупп = КоличестваПоГруппам.Добавить();
				СтрокаГрупп.НомерГруппы = ТекущаяГруппа;
				СтрокаГрупп.Количество = ЭлементовВГруппе;
			КонецЕсли;
			ЗначениеРеквизита = СтрокаПоиска.ЗначениеРеквизита;
			ТекущаяГруппа = ТекущаяГруппа + 1;
			ЭлементовВГруппе = 0;
			
		КонецЕсли;
		СтрокаПоиска.НомерГруппы = - ТекущаяГруппа;
		ЭлементовВГруппе = ЭлементовВГруппе + 1;
	КонецЦикла;
	
	Если ТекущаяГруппа <> 0 Тогда
		КоличествоВГруппе[ТекущаяГруппа]  = ЭлементовВГруппе;
		СтрокаГрупп = КоличестваПоГруппам.Добавить();
		СтрокаГрупп.НомерГруппы = ТекущаяГруппа;
		СтрокаГрупп.Количество = ЭлементовВГруппе;
	КонецЕсли;
	
	КоличестваПоГруппам.Сортировать("Количество");
	
	ТекущаяГруппа = 1;
	КолвоЭлементовКоллекции = КоличестваПоГруппам.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = КоличестваПоГруппам[КолвоЭлементовКоллекции - ОбратныйИндекс];
		
		МассивСтрок = мРезультатыПоиска.НайтиСтроки(Новый Структура("НомерГруппы", -ЭлементКоллекции.НомерГруппы));
		
		Если ЭлементКоллекции.Количество = 1 Тогда
			Для каждого СтрокаГруппы ИЗ МассивСтрок Цикл
				мРезультатыПоиска.Удалить(СтрокаГруппы);
			КонецЦикла;			
			КоличестваПоГруппам.Удалить(ЭлементКоллекции);
		Иначе
			Для каждого СтрокаГруппы ИЗ МассивСтрок Цикл
				СтрокаГруппы.НомерГруппы = ТекущаяГруппа;
			КонецЦикла;
			ЭлементКоллекции.НомерГруппы = ТекущаяГруппа;
			ТекущаяГруппа = ТекущаяГруппа + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличестваПоГруппам.Сортировать("НомерГруппы");
	
	ОбновитьКнопкуВыбораГруппы(КоличестваПоГруппам);
	
	Если мРезультатыПоиска.Количество() > 0 Тогда
		ВывестиГруппу(1);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура НайтиПоСовпадающимСловам(ТаблицаОтбора)
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Поиск элементов";
		мФормаИндикатора.КомментарийЗначения = "Получение элементов справочника";
		мФормаИндикатора.ВладелецФормы = ЭтаФорма;
		мФормаИндикатора.Открыть();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ Ссылка,
	|" + ПолучитьЗначениеНастройки("Имя реквизита") + " КАК ЗначениеРеквизита 
	|Из Справочник." + мВидОбрабатываемогоСправочника + " КАК Спр
	|ГДЕ
	|УПОРЯДОЧИТЬ ПО Наименование
	|";
	
	Если ТаблицаОтбора.Количество()>0 Тогда
		УсловиеГДЕ = "";
		Для Каждого Отбор ИЗ ТаблицаОтбора Цикл
			УсловиеГДЕ = УсловиеГДЕ + ?(УсловиеГДЕ="", "", " И") +"
			| Спр."+Отбор.Ключ + Отбор.Сравнение + "&" + Отбор.Ключ + ?(Найти(Отбор.Сравнение, "(") > 0, ")", "");
			Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ "+УсловиеГДЕ);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "");
	КонецЕсли;
		
	ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСлов = Новый ТаблицаЗначений;
	ТаблицаСлов.Колонки.Добавить("Ссылка");
	ТаблицаСлов.Колонки.Добавить("ЗначениеРеквизита");
	ТаблицаСлов.Колонки.Добавить("СписокСлов");
	
	СписокСлов = Новый СписокЗначений;
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Разбивка значения на отдельные слова";
		мФормаИндикатора.МаксимальноеЗначение = ТаблицаСправочника.Количество();
	КонецЕсли;
	
	Для Каждого СтрокаСсылки ИЗ ТаблицаСправочника Цикл
		ЕСли мФормаИндикатора<>Неопределено Тогда
			мФормаИндикатора.Значение = ТаблицаСправочника.Индекс(СтрокаСсылки)+1;
		КонецЕсли;
		
		ЗначениеРеквизита = СтрокаСсылки.ЗначениеРеквизита;
		СписокСлов = ПолучитьСписокСлов(ЗначениеРеквизита);
		
		НовСтр = ТаблицаСлов.Добавить();
		НовСтр.Ссылка =  СтрокаСсылки.Ссылка;
		НовСтр.ЗначениеРеквизита = ЗначениеРеквизита;
		НовСтр.СписокСлов = СписокСлов.Скопировать();
	КонецЦикла;
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Выполняется анализ значений реквизита";
		мФормаИндикатора.Значение = 0;
		мФормаИндикатора.МаксимальноеЗначение = ТаблицаСлов.Количество();
	КонецЕсли;
	
	ТаблицаСправочника = 0;
	
	мРезультатыПоиска = Новый ТаблицаЗначений;
	мРезультатыПоиска.Колонки.Добавить("Ссылка");
	мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
	мРезультатыПоиска.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
	мРезультатыПоиска.Колонки.Добавить("КоличествоСсылок");
	мРезультатыПоиска.Колонки.Добавить("ЗначениеРеквизита");
	
	
	ТекущаяГруппа = 0;
		
	Пока ТаблицаСлов.Количество() > 0 Цикл
		ЕСли мФормаИндикатора<>Неопределено Тогда
			мФормаИндикатора.Значение = мФормаИндикатора.ЭлементыФормы.Индикатор.МаксимальноеЗначение - ТаблицаСлов.Количество();
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		ТекущаяГруппа = ТекущаяГруппа + 1;
		КоличествоСтрок = ТаблицаСлов.Количество();
		СписокСтрок = Новый СписокЗначений;
		
		ОбрабатываемаяСтрока = ТаблицаСлов[0];
		СписокСтрок.Добавить(ОбрабатываемаяСтрока);
		ТекущийСписокСлов = ОбрабатываемаяСтрока.СписокСлов.Скопировать();
		
		Для индекс = 1 по КоличествоСтрок-1 Цикл			
			СтрокаСравнения = ТаблицаСлов[индекс];
			СписокСловСравнения = СтрокаСравнения.СписокСлов.Скопировать();
			СписокНеНайденных = Новый СписокЗначений;
			
			ОдинаковыхСлов = 0;
			Для Каждого Слово Из ТекущийСписокСлов Цикл
				ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
				Если ЭлементСпискаСравнения = Неопределено Тогда
					СписокНеНайденных.Добавить(Слово.Значение);
				Иначе
					СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
					ОдинаковыхСлов = ОдинаковыхСлов + 1;
				КонецЕсли;
			КонецЦикла;
			
			
			Если СписокНеНайденных.Количество()=0 И СписокСловСравнения.Количество()=0 Тогда
				ЕстьОтличия = Ложь;
			Иначе
				ЕСли ОдинаковыхСлов>0 Тогда
					ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов, ДопустимоеРазличиеСлов);
				Иначе
					ЕстьОтличия = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЕстьОтличия Тогда
				СписокСтрок.Добавить(СтрокаСравнения);
			КонецЕсли;
			
		КонецЦикла;
		
		
		Для Каждого СтрокаИзСписка ИЗ СписокСтрок Цикл
			Если СписокСтрок.Количество() > 1 Тогда
				СтрокаРезультата = мРезультатыПоиска.Добавить();
				СтрокаРезультата.ЗначениеРеквизита = СтрокаИзСписка.Значение.ЗначениеРеквизита;
				СтрокаРезультата.Ссылка = СтрокаИзСписка.Значение.Ссылка;
				СтрокаРезультата.НомерГруппы =  - ТекущаяГруппа;
			Иначе
				ТекущаяГруппа = ТекущаяГруппа - 1;
			КонецЕсли;
			ТаблицаСлов.Удалить(СтрокаИзСписка.Значение);
		КонецЦикла;		
		
	КонецЦикла;
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Обработка результатов";
	КонецЕсли;
	
	
	
	Если мРезультатыПоиска.Количество() > 0 Тогда
		
		КоличестваПоГруппам = Новый ТаблицаЗначений;
		КоличестваПоГруппам.Колонки.Добавить("НомерГруппы");
		КоличестваПоГруппам.Колонки.Добавить("Количество");	
		мРезультатыПоиска.Сортировать("НомерГруппы УБЫВ");
		
		
		СтруктураПоиска = Новый Структура;
		ВсегоГрупп =  - мРезультатыПоиска[мРезультатыПоиска.Количество()-1].НомерГруппы;
		Для индекс = 1 по ВсегоГрупп Цикл
			СтруктураПоиска.Вставить("НомерГруппы",  - индекс);
			МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
			СтрокаГруппы = КоличестваПоГруппам.Добавить();
			СтрокаГруппы.НомерГруппы  = индекс;
			СтрокаГруппы.Количество = МассивСтрок.Количество();		
		КонецЦикла;
		
		ТекущаяГруппа = 1;
		КоличестваПоГруппам.Сортировать("Количество УБЫВ");
		Для Каждого СтрокаГруппы ИЗ КоличестваПоГруппам Цикл
			СтруктураПоиска.Вставить("НомерГруппы",  - СтрокаГруппы.НомерГруппы);
			МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаРезультата ИЗ МассивСтрок Цикл
				СтрокаРезультата.НомерГруппы = ТекущаяГруппа;
			КонецЦикла;
			СтрокаГруппы.НомерГруппы = ТекущаяГруппа;
			ТекущаяГруппа = ТекущаяГруппа + 1;
		КонецЦикла;
				
		
		ОбновитьКнопкуВыбораГруппы(КоличестваПоГруппам);
			
		Если мРезультатыПоиска.Количество() > 0 Тогда
			ВывестиГруппу(1);			
		КонецЕсли;
		
	КонецЕсли;
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.Закрыть();
	КонецЕсли;
	
			
КонецПроцедуры

Функция ВыполнитьПоискСсылок()
	
	ВремТаблица = НайденныеОбъекты.Скопировать();
	СтрокаПравильного = ВремТаблица.Найти(Истина, "Правильный");
	
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не определен правильный элемент");
		Возврат ложь;
		
	КонецЕсли;
	
	ВремТаблица.Удалить(СтрокаПравильного);	
	
	МассивСсылок    = ВремТаблица.ВыгрузитьКолонку("Ссылка");		
	НайденныеСсылки = НайтиПоСсылкам(МассивСсылок);
	
	ЭлементыФормы.НайденныеСсылки.СоздатьКолонки();
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.НайденныеСсылки;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьЗаменуЭлементов(ПравильныйЭлемент, ТаблицаСсылок, ЗаголовокИндикации = "")
	
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
		
	Параметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	Параметры.Вставить("Объект", Неопределено);	
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.МаксимальноеЗначение = ТаблицаСсылок.Количество();
		мФормаИндикатора.КомментарийЗначения = "Выполняется замена элементов." + ЗаголовокИндикации;
		мФормаИндикатора.Значение = 0;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		
		ЕСли мФормаИндикатора<>Неопределено Тогда
			мФормаИндикатора.Значение = мФормаИндикатора.Значение + 1;
		КонецЕсли;
		Ссылка = СтрокаТаблицы.Ссылка;
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено и Параметры.Объект <> Неопределено Тогда
				
				Если ОтключатьКонтрольЗаписи Тогда
					Параметры.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					Параметры.Объект.Записать();
				Исключение
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						Возврат ВыполнитьОткат();
					КонецЕсли;
				КонецПопытки;
				Параметры.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
			
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				
				ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и Параметры[Движение.Имя + "Корреспонденция"];
				
				НаборЗаписей  = Параметры.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				Для Каждого Измерение ИЗ Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Измерение.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
						КонецЦикла;
					КонецЕсли; 
				КонецЦикла;
				
				ЕСли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Ресурс.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					
					Для ИндексСубконто = 1 по Параметры[Движение.Имя + "Субконто"] Цикл
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							КонецЦикла;								
						Иначе							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							КонецЦикла;							
						КонецЕсли;						
					КонецЦикла;					
				КонецЕсли;
								
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					Если ОтключатьКонтрольЗаписи Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					Попытка
						НаборЗаписей.Записать();
					Исключение
						БылиИсключения = Истина;
						Если ВыполнятьВТранзакции Тогда
							Возврат ВыполнитьОткат();
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					
					Если НаборЗаписи.Количество() > 0 Тогда
						Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
							Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
								НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
							КонецЕсли;
						КонецЦикла;					
						Если НадоЗаписывать Тогда
							Если ОтключатьКонтрольЗаписи Тогда
								НаборЗаписи.ОбменДанными.Загрузка = Истина;
							КонецЕсли;
							Попытка
								НаборЗаписи.Записать();
							Исключение
								БылиИсключения = Истина;
								Если ВыполнятьВТранзакции Тогда
									Возврат ВыполнитьОткат();
								КонецЕсли;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
				Параметры.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если ОтключатьКонтрольЗаписи Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			
			Если Не ВыполнятьВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				Если Не ВыполнятьВТранзакции Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
			Исключение
				
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					Возврат ВыполнитьОткат();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
			Сообщить("Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	Если Параметры.Объект <> Неопределено Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			Параметры.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			Параметры.Объект.Записать();
		Исключение
			БылиИсключения = Истина;
			Если ВыполнятьВТранзакции Тогда
				Возврат ВыполнитьОткат();
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;
	Возврат Не БылиИсключения;
	
КонецФункции

Функция ВыполнитьОткат()
	
	ОтменитьТранзакцию();
	Возврат Ложь;
	
КонецФункции


Процедура СброситьДоступность()
	ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы.Доступность = Ложь;
	ЭлементыФормы.Панель.Страницы.НайденныеСсылки.Доступность = Ложь;
	ЗависимыеОбъекты.Строки.Очистить();
	ЭлементыФормы.КоманднаяПанельЗависимыеОбъекты.Кнопки.ВыполнитьЗамену.Доступность = Ложь;
КонецПроцедуры // () 

Процедура АвтозаменаЭлементов(НепосредственноУдалятьОбъекты) Экспорт
	
	Если мРезультатыПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Поиск и замена значений";
		мФормаИндикатора.ВладелецФормы = ЭтаФорма;
		мФормаИндикатора.Открыть();
	КонецЕсли;
	СтруктураПоискаПравильных = Новый Структура("Правильный",Истина);
	ПравильныеСтроки = мРезультатыПоиска.НайтиСтроки(СтруктураПоискаПравильных);
	
	НомерГруппы = 0;
	Для Каждого СтрокаПравильного Из ПравильныеСтроки Цикл
		НомерГруппы = НомерГруппы + 1;
		ЗаголовокИндикации = " Группа " + НомерГруппы + " из " + ПравильныеСтроки.Количество();
		СтруктураПоиска = Новый Структура("НомерГруппы, Правильный",СтрокаПравильного.НомерГруппы, Ложь);
		МассивСсылок = Новый Массив;
		МассивНеправильныхСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
			МассивСсылок.Добавить(СтрокаНеправильного.Ссылка);
		КонецЦикла;
		
		ЕСли мФормаИндикатора<>Неопределено Тогда
			мФормаИндикатора.КомментарийЗначения = "Выполняется поиск ссылок." + ЗаголовокИндикации;
			мФормаИндикатора.Значение = 0;
		КонецЕсли;
		
		ЗаменаВыполнена = ВыполнитьЗаменуЭлементов(СтрокаПравильного.Ссылка, НайтиПоСсылкам(МассивСсылок), ЗаголовокИндикации);
		
		Если НепосредственноУдалятьОбъекты и (ЗаменаВыполнена или Не ВыполнятьВТранзакции) Тогда
			ТаблицаОставшихсяСсылок = НайтиПоСсылкам(МассивСсылок);
			ТаблицаОставшихсяСсылок.Свернуть("Ссылка");
			Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
				Если ТаблицаОставшихсяСсылок.Найти(СтрокаНеправильного.Ссылка, "Ссылка") = Неопределено Тогда
					
					Объект = СтрокаНеправильного.Ссылка.ПолучитьОбъект();
					Если Не Объект = Неопределено Тогда
						Попытка
							Объект.Удалить();
							мРезультатыПоиска.Удалить(СтрокаНеправильного);
						Исключение
							ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискЗависимыхСсылок()
	МассивСсылок = Новый Массив;
	Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
		Для каждого Строка1 Из Строка0.Строки Цикл
			Для каждого Строка2 Из Строка1.Строки Цикл
				Если Строка2.ВключатьВПоиск Тогда
					МассивСсылок.Добавить(Строка2.НеПравильный);
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	НайденныеЗависимыеСсылки.Колонки.Очистить();
	НайденныеЗависимыеСсылки.Колонки.Добавить("Ссылка");
	НайденныеЗависимыеСсылки.Колонки.Добавить("Данные");
	НайденныеЗависимыеСсылки.Колонки.Добавить("Метаданные");
	
	ВсеНайденныеЗависимыеСсылки = НайтиПоСсылкам(МассивСсылок);
	Для каждого СтрокаВсеСсылки Из ВсеНайденныеЗависимыеСсылки Цикл
		Если СтрокаВсеСсылки.ссылка.Владелец <> СтрокаВсеСсылки.Данные Тогда
			СтрокаСсылки = НайденныеЗависимыеСсылки.Добавить();
			Для каждого Колонка Из НайденныеЗависимыеСсылки.Колонки Цикл
				СтрокаСсылки[Колонка.Имя]=СтрокаВсеСсылки[Колонка.Имя];
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	ЭлементыФормы.НайденныеЗависимыеСсылки.СоздатьКолонки();
КонецПроцедуры // ПоисЗависимыхссылок()

Процедура ОчиститьРезультатыПоиска()
	
	мРезультатыПоиска = Неопределено;
	ОбновитьКнопкуВыбораГруппы(Новый Массив);
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Текст = "Нет групп";
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.СледующаяГруппа.Доступность = ложь;
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ПредыдущаяГруппа.Доступность = ложь;
	
	НайденныеОбъекты.Очистить();
	НайденныеОбъекты.Колонки.Очистить();
	ЭлементыФормы.НайденныеОбъекты.Колонки.Очистить();
	НайденныеОбъекты.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка." + мВидОбрабатываемогоСправочника), "Объект");
	НайденныеОбъекты.Колонки.Добавить("КоличествоСсылок", , "Количество ссылок");
	ЭлементыФормы.НайденныеОбъекты.СоздатьКолонки();
	
	Колонка= ЭлементыФормы.НайденныеОбъекты.Колонки.Ссылка;
	Колонка.ЭлементУправления.АвтоВыборНезаполненного = Истина;
	Колонка.ЭлементУправления.КнопкаОткрытия  = Истина;
	
	Колонка = ЭлементыФормы.НайденныеОбъекты.Колонки.КоличествоСсылок;
	Колонка.ТолькоПросмотр = Истина;
	Колонка.Видимость = Ложь;
	Колонка.Ширина = 5;
	
	НайденныеОбъекты.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Реквизит Из ПолучитьСписокРеквизитов(Метаданные.Справочники[мВидОбрабатываемогоСправочника]) Цикл
		НайденныеОбъекты.Колонки.Добавить("Р_" + Реквизит.Значение, Новый ОписаниеТипов("Строка"), Реквизит.Представление);
		Колонка = ЭлементыФормы.НайденныеОбъекты.Колонки.Добавить("Р_" + Реквизит.Значение,Реквизит.Представление);
		Колонка.Данные = "Р_" + Реквизит.Значение;
		Колонка.ТолькоПросмотр = Истина;
		Колонка.Видимость = Ложь;
	КонецЦикла;
	УстановитьВидимостьКолонкиРеквизитаПоиска();
КонецПроцедуры

Функция ПолучитьСписокРеквизитов(МетаданныеСправочника)
	
	СписокРеквизитов = Новый СписокЗначений;
	Если МетаданныеСправочника.Владельцы.Количество() > 0 Тогда
		СписокРеквизитов.Добавить("Владелец", "Владелец");
	КонецЕсли;
			
	Если МетаданныеСправочника.ДлинаКода > 0 Тогда
		СписокРеквизитов.Добавить("Код", "Код");
	КонецЕсли;
			
	Если МетаданныеСправочника.ДлинаНаименования > 0 Тогда
		СписокРеквизитов.Добавить("Наименование", "Наименование");
	КонецЕсли;

	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Представление());
	КонецЦикла;
	
	Возврат СписокРеквизитов;
	
КонецФункции

Процедура УстановитьВидимостьКолонкиРеквизитаПоиска()
	
	ИмяКолонки = ПолучитьЗначениеНастройки("Имя реквизита");
	Если ИмяКолонки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Колонки = ЭлементыФормы.НайденныеОбъекты.Колонки;
	КолонкаРеквизита = Колонки.Найти("Р_" + ИмяКолонки);
	Если КолонкаРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Колонки.Сдвинуть(Колонки.КоличествоСсылок, - 1000);
	Колонки.Сдвинуть(Колонки.Ссылка, - 1000);
	КолонкаПрошлогоРеквизита = Колонки[2];
	Колонки.Сдвинуть(КолонкаРеквизита, 2 - Колонки.Индекс(КолонкаРеквизита));
	
	КолонкаПрошлогоРеквизита.Видимость = КолонкаРеквизита.Видимость;
	КолонкаРеквизита.Видимость = Истина;
	
КонецПроцедуры // () 

Процедура ОбновитьСтрокуРезультатовПоиска(СтрокаРезультатовПоиска)
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СтрокаРезультатовПоиска.Ссылка);
	РезультатПоиска = ПолучитьТаблицуРезультатовПоиска(МассивСсылок);
	Если РезультатПоиска.Количество() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРезультатовПоиска,РезультатПоиска[0],,"Ссылка");
	Иначе
		Для каждого Колонка Из НайденныеОбъекты.Колонки Цикл
			Если Не Колонка.Имя = "Ссылка" и Не Колонка.Имя = "Правильный" Тогда
				СтрокаРезультатовПоиска[Колонка.Имя] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ДопустимоеРазличиеСлов = 30;
	
	НастройкиОтчета.Колонки.Добавить("Предопределенный", Новый ОписаниеТипов("Булево"));
	НастройкиОтчета.Колонки.Добавить("ЗначениеНастройки");
	
	Попытка
		мФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	Исключение
		мФормаИндикатора = Неопределено;
	КонецПопытки;
	
	Настройка = НастройкиОтчета.Добавить();
	Настройка.ИмяНастройки = "Вид справочника";
	Настройка.ТипСравнения = "Равно";
	Настройка.Предопределенный = Истина;
	
	Настройка = НастройкиОтчета.Добавить();
	Настройка.ИмяНастройки = "Имя реквизита";
	Настройка.ТипСравнения = "Равно";
	Настройка.Предопределенный = Истина;
	
	Настройка = НастройкиОтчета.Добавить();
	Настройка.ИмяНастройки = "Режим поиска";
	Настройка.ТипСравнения = "Равно";
	Настройка.Предопределенный = Истина;
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	НовыйВидСправочника = ПолучитьЗначениеНастройки("Вид справочника");
	Если Не мВидОбрабатываемогоСправочника = НовыйВидСправочника Тогда
		мВидОбрабатываемогоСправочника = НовыйВидСправочника;
		ОчиститьРезультатыПоиска()
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельНастройкиОтчетаНастройка(Кнопка)
	
	ФормаНАстройки = ПолучитьФорму("ФормаНастройкиСовпадения");
	ФормаНАстройки.ДопустимоеРазличиеСлов  = ДопустимоеРазличиеСлов;
	ФормаНАстройки.ВыполнятьВТранзакции    = ВыполнятьВТранзакции;
	ФормаНАстройки.ОтключатьКонтрольЗаписи = ОтключатьКонтрольЗаписи;
	
	Если ФормаНАстройки.ОткрытьМодально() = Истина Тогда
		ДопустимоеРазличиеСлов  = ФормаНАстройки.ДопустимоеРазличиеСлов;
		ВыполнятьВТранзакции    = ФормаНАстройки.ВыполнятьВТранзакции;
		ОтключатьКонтрольЗаписи = ФормаНАстройки.ОтключатьКонтрольЗаписи;
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НастройкиОтчета"

Процедура КоманднаяПанельНастройкиОтчетаПоиск(Кнопка)
	
	Если ПустаяСтрока(ПолучитьЗначениеНастройки("Имя реквизита")) Тогда
		Предупреждение("Не указаны все необходимые параметры поиска");
		Возврат;
	КонецЕсли;
	
	НайденныеОбъекты.Очистить();
	КнопкаВыборГруппы = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы;
	КнопкаВыборГруппы.Текст = "Нет групп";
	КнопкаВыборГруппы.Кнопки.Очистить();;
	РежимПоиска = ПолучитьЗначениеНастройки("Режим поиска");
	
	ТаблицаОтбора = ПолучитьТаблицуОтборов();
	
	Если РежимПоиска = "1" Тогда
		НайтиПоРавенствуРеквизитов(ТаблицаОтбора);
	ИначеЕсли РежимПоиска = "2" Тогда
		НайтиПоСовпадающимСловам(ТаблицаОтбора);
	Иначе
		Предупреждение("Не указан режим поиска");
		Возврат;
	КонецЕсли;
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Результаты;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НастройкиОтчета"

Процедура НастройкиОтчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Предопределенный Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.ИмяНастройки.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ТипСравнения.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиОтчетаПередУдалением(Элемент, Отказ)
	ЕСли Элемент.ТекущиеДанные.Предопределенный Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура НастройкиОтчетаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЕСли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ТекущееИмяреквизита = ПолучитьЗначениеНастройки("Имя реквизита");
		Если ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ИмяНастройки = "Режим поиска"
			 И ВыбранноеЗначение.Представление = "По похожим словам" И ТекущееИмяреквизита<>"Наименование" Тогда
			 СбросТипа = Ложь;
			 ЕСли ТекущееИмяреквизита="Владелец" Тогда
				 СбросТипа = Истина;
			 ИначеЕСли ТекущееИмяреквизита="Родитель" Тогда
				 СбросТипа = Истина;				 
			 ИначеЕсли ТекущееИмяреквизита="Код" Тогда
				 Если Метаданные.Справочники[мВидОбрабатываемогоСправочника].ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
					 СбросТипа = Истина;
				 КонецЕсли;
			Иначе
				ТипРеквизита = Метаданные.Справочники[мВидОбрабатываемогоСправочника].Реквизиты[ТекущееИмяреквизита].Тип;
				Если Не ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
					СбросТипа = Истина;					
				КонецЕсли;			
			КонецЕсли;
			Если СбросТипа Тогда
				Предупреждение("Данный режим поиска имеет смысл выполнять только для реквизитов строкового типа");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ЗначениеНастройки = ВыбранноеЗначение.Значение;
		Элемент.Значение = ВыбранноеЗначение.Представление;
		ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Ложь;
		
		Если ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ИмяНастройки = "Вид справочника" Тогда
			МассивСтрок = НастройкиОтчета.НайтиСтроки(Новый Структура("Предопределенный", Ложь));
			Для Каждого СтрокаКУдалению ИЗ МассивСтрок Цикл
				НастройкиОтчета.Удалить(СтрокаКУдалению);
			КонецЦикла;
			СтрокаРеквизита = НастройкиОтчета.Найти("Имя реквизита","ИмяНастройки");
			СтрокаРеквизита.ЗначениеНастройки = Неопределено;
			СтрокаРеквизита.Представление = "";
			
			Если Не мВидОбрабатываемогоСправочника = ВыбранноеЗначение.Значение Тогда
				мВидОбрабатываемогоСправочника = ВыбранноеЗначение.Значение;
				ОчиститьРезультатыПоиска();
			КонецЕсли;
			
		ИначеЕсли ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ИмяНастройки = "Имя реквизита" Тогда
			СтрокаРеквизита = НастройкиОтчета.Найти("Режим поиска","ИмяНастройки");
			СтрокаРеквизита.ЗначениеНастройки = Неопределено;
			СтрокаРеквизита.Представление = "";
			УстановитьВидимостьКолонкиРеквизитаПоиска();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура НастройкиОтчетаПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.НастройкиОтчета.ТекущиеДанные;
	ЕСли ТекущиеДанные.Предопределенный Тогда		
		ОткрытьФормуПоНастройке(ТекущиеДанные, Элемент);
		СтандартнаяОбработка = Ложь;		
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиОтчетаИмяНастройкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	ОткрытьФормуПоНастройке(ЭлементыФормы.НастройкиОтчета.ТекущиеДанные, Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура НастройкиОтчетаИмяНастройкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ЗначениеНастройки = ВыбранноеЗначение.Значение;
	Элемент.Значение = "Отбор: "+ВыбранноеЗначение.Представление;
	ЕСли ВыбранноеЗначение.Значение = "Наименование" Тогда
		ТипРеквизита = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(Метаданные.Справочники[мВидОбрабатываемогоСправочника].ДлинаНаименования));				
	ИначеЕсли ВыбранноеЗначение.Значение = "Код" Тогда
		
		Если Метаданные.Справочники[мВидОбрабатываемогоСправочника].ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
			ТипРеквизита = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Метаданные.Справочники[мВидОбрабатываемогоСправочника].ДлинаКода));
		Иначе
			ТипРеквизита = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(Метаданные.Справочники[мВидОбрабатываемогоСправочника].ДлинаКода));
		КонецЕсли;			
		
	ИначеЕсли ВыбранноеЗначение.Значение = "Владелец" Тогда
		
		Владельцы = Метаданные.Справочники[мВидОбрабатываемогоСправочника].Владельцы;
		МассивТипов = Новый Массив;
		Для Каждого Владелец ИЗ Владельцы Цикл			
			МассивТипов.Добавить(Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка.")));
		КонецЦикла;
		
		ТипРеквизита = Новый ОписаниеТипов(МассивТипов);
		
	ИначеЕсли ВыбранноеЗначение.Значение = "Родитель" Тогда
		ТипСсылки = "СправочникСсылка."+мВидОбрабатываемогоСправочника;
		ТипРеквизита = Новый ОписаниеТипов(ТипСсылки);
		
	ИначеЕсли ВыбранноеЗначение.Значение = "Ссылка" Тогда
		ТипСсылки = "СправочникСсылка."+мВидОбрабатываемогоСправочника;
		ТипРеквизита = Новый ОписаниеТипов(ТипСсылки);
		
	Иначе		
		ТипРеквизита = Метаданные.Справочники[мВидОбрабатываемогоСправочника].Реквизиты[ВыбранноеЗначение.Значение].Тип;
	КонецЕсли;
	
	ЕСли ТипРеквизита.Типы().Количество()>1 Тогда
		ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.ОграничениеТипа = ТипРеквизита;
		ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.ВыбиратьТип = Истина;
	//Иначе
	//	ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.ВыбиратьТип = Ложь;
	КонецЕсли;

	ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.Представление = ТипРеквизита.ПривестиЗначение(ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.Представление);
	
	ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.ТипСравнения = "Равно";
		
	СтандартнаяОбработка = Ложь;
	
	

КонецПроцедуры

Процедура НастройкиОтчетаТипСравненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    ТекущиеДанные = ЭлементыФормы.НастройкиОтчета.ТекущиеДанные;
	
	Список = Новый СписокЗначений();
	Список.Добавить("Равно");
	Список.Добавить("Не равно");
	Если ТипЗнч(ТекущиеДанные.Представление) <> Тип ("Строка") Тогда
		Список.Добавить("В иерархии");
		Список.Добавить("Не в иерархии");	
		Список.Добавить("В списке");
		Список.Добавить("Не в списке");
	КонецЕсли;
	ЭлементСписка = Список.НайтиПоЗначению(Элемент.Значение);
	Выбор = ВыбратьИзСписка(Список, Элемент);
	Если Выбор<>Неопределено Тогда
		Элемент.Значение = Выбор.Значение;
	КонецЕслИ;
	
	
	
	
	//ТекущиеДанные.Представление = ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.Представление);
	
	Если (Элемент.Значение = "В списке" ИЛИ Элемент.Значение = "Не в списке")
		И ТипЗнч(ТекущиеДанные.Представление)<>Тип("СписокЗначений") Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.Представление));
		ОписаниеТиповРеквизита = Новый ОписаниеТипов(МассивТипов);
		
		ОписаниеТиповСписка = Новый ОписаниеТипов("СписокЗначений");
		ТекущиеДанные.Представление = ОписаниеТиповСписка.ПривестиЗначение(ТекущиеДанные.Представление);
		ТекущиеДанные.Представление.ТипЗначения = ОписаниеТиповРеквизита;
		
	ИначеЕсли Элемент.Значение <> "В списке" И Элемент.Значение <> "Не в списке"
		И ТипЗнч(ТекущиеДанные.Представление)=Тип("СписокЗначений") Тогда
		
		ОписаниеТиповРеквизита = ТекущиеДанные.Представление.ТипЗначения;
		ТекущиеДанные.Представление = ОписаниеТиповРеквизита.ПривестиЗначение(ТекущиеДанные.Представление);		
				
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиОтчетаТипСравненияПриИзменении(Элемент)
	ТекущиеДанные = ЭлементыФормы.НастройкиОтчета.ТекущиеДанные;
	
	Если (Элемент.Значение = "В списке" ИЛИ Элемент.Значение = "Не в списке")
		И ТипЗнч(ТекущиеДанные.Представление)<>Тип("СписокЗначения") Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.Представление));
		ОписаниеТиповРеквизита = Новый ОписаниеТипов(МассивТипов);
		
		ОписаниеТиповСписка = Новый ОписаниеТипов("СписокЗначений");
		ТекущиеДанные.Представление = ОписаниеТиповСписка.ПривестиЗначение(ТекущиеДанные.Представление);
		ТекущиеДанные.Представление.ТипЗначения = ОписаниеТиповРеквизита;
		
	ИначеЕсли Элемент.Значение <> "В списке" И Элемент.Значение <> "Не в списке"
		И ТипЗнч(ТекущиеДанные.Представление)=Тип("СписокЗначения") Тогда
		
		ОписаниеТиповРеквизита = ТекущиеДанные.Представление.ТипЗначения;
		ТекущиеДанные.Представление = ОписаниеТиповРеквизита.ПривестиЗначение(ТекущиеДанные.Представление);		
				
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура НастройкиОтчетаПередНачаломИзменения(Элемент, Отказ)
	Если ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.Предопределенный Тогда
		ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Ложь;
	Иначе
		ЭлементыФормы.НастройкиОтчета.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура НастройкиОтчетаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.НастройкиОтчета.ТекущиеДанные.Предопределенный Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	 
	
КонецПроцедуры

Процедура НастройкиОтчетаТипСравненияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НайденныеОбъекты"

Процедура КоманднаяПанельНайденныеОбъектыВыборГруппы(Кнопка)
	ОбновитьТекущуюГруппуРезультатовПоиска();
	НомерГруппы = Число(Сред(Кнопка.Имя, 7));
	ВывестиГруппу(НомерГруппы);
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыВыборПравильного(Кнопка)
	
	Если ЭлементыФормы.НайденныеОбъекты.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = НайденныеОбъекты.Найти(Истина, "Правильный");
	Если СтрокаТаблицы <> Неопределено Тогда
		СтрокаТаблицы.Правильный = Ложь;
	КонецЕсли;
	ЭлементыФормы.НайденныеОбъекты.ТекущаяСтрока.Правильный = Истина;
	СброситьДоступность();
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыПоискСсылок(Кнопка)
	
	РезультатПоиска = ВыполнитьПоискСсылок();
	ЭлементыФормы.Панель.Страницы.НайденныеСсылки.Доступность = РезультатПоиска;
	Если РезультатПоиска Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.НайденныеСсылки;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыПоискЗависимых(Кнопка)
	
	ВремТаблица = НайденныеОбъекты.Скопировать();
	СтрокаПравильного = ВремТаблица.Найти(Истина, "Правильный");
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не определен правильный элемент");
		Возврат;
	КонецЕсли;
	
	НайденныеЗависимыеСсылки.Очистить();
	мЗависимыеМетаданные = Новый массив;
	ИмяСправочника = мВидОбрабатываемогоСправочника;
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	Для каждого МетаданныеЗависимого Из Метаданные.Справочники Цикл
		СтрокаМетаданные = Неопределено;
		Если МетаданныеЗависимого.Владельцы.Содержит(МетаданныеСправочника) Тогда
			мЗависимыеМетаданные.Добавить(МетаданныеЗависимого);
		КонецЕсли; 
	КонецЦикла; 
	
	Правильный = СтрокаПравильного.Ссылка;
	ВремТаблица.Удалить(СтрокаПравильного);	
	ЗависимыеОбъекты.Строки.Очистить();
	
	Для каждого МетаданныеЗависимого Из мЗависимыеМетаданные Цикл
		СтрокаМетаданные = Неопределено;
		Для каждого СтрокаНеПравильного Из ВремТаблица Цикл
			СтрокаОбъекта = Неопределено;
			НеПравильный = СтрокаНеПравильного.ссылка;
			Выборка = Справочники[МетаданныеЗависимого.Имя].Выбрать(,НеПравильный);
			Пока Выборка.Следующий() Цикл
				Если СтрокаМетаданные = Неопределено Тогда
					СтрокаМетаданные = ЗависимыеОбъекты.Строки.Добавить();
					СтрокаМетаданные.НеПравильный = МетаданныеЗависимого.Имя;
					СтрокаМетаданные.Правильный = МетаданныеЗависимого.Имя;
				КонецЕсли; 
				
				Если СтрокаОбъекта = Неопределено Тогда
					СтрокаОбъекта = СтрокаМетаданные.Строки.Добавить();
					СтрокаОбъекта.НеПравильный = НеПравильный;
					СтрокаОбъекта.Правильный = Правильный;
				КонецЕсли; 
				СтрокаЗависимого = СтрокаОбъекта.Строки.Добавить();
				СтрокаЗависимого.НеПравильный = Выборка.Ссылка;
				Пустой = Справочники[МетаданныеЗависимого.Имя].ПустаяСсылка();
				Похожий = Справочники[МетаданныеЗависимого.Имя].НайтиПоНаименованию(Выборка.Ссылка.Наименование,Ложь,,Правильный);
				Если Похожий <> Пустой Тогда
					СтрокаЗависимого.ВключатьВПоиск = Истина;
				КонецЕсли; 
				СтрокаЗависимого.Правильный = Похожий;
				
//				ЭлементыФормы.ЗависимыеОбъекты.ст
			КонецЦикла;
		КонецЦикла; 
		Если СтрокаМетаданные <> Неопределено Тогда
			ЭлементыФормы.ЗависимыеОбъекты.Развернуть(СтрокаМетаданные,Истина);
		КонецЕсли; 
	КонецЦикла; 
	ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы.Доступность = Истина;
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы;
	
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыАвтозамена(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
	Если мРезультатыПоиска = Неопределено или Не мРезультатыПоиска.НайтиСтроки(Новый Структура("Правильный",Истина)).Количество() Тогда
		Предупреждение("Не определен правильный элемент ни в одной из групп.");
		Возврат;
	КонецЕсли;
	
	РезультатВопроса = Вопрос("При автоматической замене будет произведен поиск и замена
	|неправильных элементов, в группах, где определен правильный элемент.
	|
	|Выполнить непосредственное удаление объектов после замены элементов?", РежимДиалогаВопрос.ДаНетОтмена);
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	АвтозаменаЭлементов(РезультатВопроса = КодВозвратаДиалога.Да);
	ВывестиГруппу(ТекущаяГруппа());
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НайденныеОбъекты"

Процедура НайденныеОбъектыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	ЕСли мВидОбрабатываемогоСправочника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаВыбора = Справочники[мВидОбрабатываемогоСправочника].ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура НайденныеОбъектыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.КоличествоСсылок = Неопределено Тогда
		ОформлениеСтроки.Ячейки.КоличествоСсылок.Текст = "?";
	КонецЕсли;
	
	Если ДанныеСтроки.Правильный<>Неопределено И ДанныеСтроки.Правильный Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.Ссылка.Шрифт = Новый Шрифт(,,Истина);
		
		ИмяКолонки = ПолучитьЗначениеНастройки("Имя реквизита");
		Если Не ИмяКолонки = Неопределено Тогда
			ЯчейкаРеквизита = ОформлениеСтроки.Ячейки.Найти("Р_" + ИмяКолонки);
			Если Не ЯчейкаРеквизита = Неопределено Тогда
				ЯчейкаРеквизита.Шрифт = Новый Шрифт(,,Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НайденныеОбъектыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСсылка = Элемент.ТекущиеДанные.Ссылка;
	
	Если НайденныеОбъекты.НайтиСтроки(Новый Структура("Ссылка",ТекущаяСсылка)).Количество() > 1 Тогда
		Предупреждение("Элемент """ + ТекущаяСсылка + """ уже присутствует в списке!");
		НайденныеОбъекты.Удалить(Элемент.ТекущиеДанные);
		ОбновитьТекущуюГруппуРезультатовПоиска();
	Иначе
		ОбновитьСтрокуРезультатовПоиска(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры


Процедура НайденныеОбъектыПослеУдаления(Элемент)
	ОбновитьТекущуюГруппуРезультатовПоиска();
КонецПроцедуры

Процедура НайденныеОбъектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка."+ мВидОбрабатываемогоСправочника) Тогда
		
		НоваяСтрокаНайденных = НайденныеОбъекты.Найти(ВыбранноеЗначение, "Ссылка");
		Если НоваяСтрокаНайденных = Неопределено Тогда
			НоваяСтрокаНайденных = НайденныеОбъекты.Добавить();
			НоваяСтрокаНайденных.Ссылка = ВыбранноеЗначение;
			НоваяСтрокаНайденных.Правильный = Ложь;
			ОбновитьСтрокуРезультатовПоиска(НоваяСтрокаНайденных);
			ОбновитьТекущуюГруппуРезультатовПоиска();
		КонецЕсли; 
		ЭлементыФормы.НайденныеОбъекты.ТекущаяСтрока = НоваяСтрокаНайденных;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НайденныеСсылки"

Процедура КоманднаяПанельНайденныеСсылкиВыполнитьЗамену(Кнопка)
	
	СтрокаПравильного = НайденныеОбъекты.Найти(Истина, "Правильный");
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не определен правильный элемент");
		Возврат;
	КонецЕсли;

	ВыполнитьЗаменуЭлементов(СтрокаПравильного.Ссылка, НайденныеСсылки);
	ВыполнитьПоискСсылок();

КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиУдалитьЭлементы(Кнопка)
	
	Если НайденныеСсылки.Количество()>0 Тогда
		Предупреждение("На элементы есть ссылки");
		Возврат;
	КонецЕсли;
	
	ТекущаяГруппа = ТекущаяГруппа();
	
	СтруктураПоиска = Новый Структура("НомерГруппы", ТекущаяГруппа);
	
	СтрокиКУдалению = Новый ТаблицаЗначений;
	СтрокиКУдалению.Колонки.Добавить("СтрокаТаблицы");
	СтрокиКУдалению.Колонки.Добавить("ТаблицаЗначений");
	
	БылиИсключения = Ложь;
	ЕСли ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	МассивСтрок  = НайденныеОбъекты.НайтиСтроки(Новый Структура("Правильный", Ложь));
	Для Каждого Строка ИЗ МассивСтрок Цикл
		          		
		СтруктураПоиска.Вставить("Ссылка", Строка.Ссылка);
		МассивРезультатов = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		
		Объект = Строка.Ссылка.ПолучитьОбъект();		
		Попытка
			Объект.Удалить();
		Исключение
			Если ВыполнятьВТранзакции Тогда
				БылиИсключения = Истина;
				Прервать;
			КонецЕсли;
		КонецПопытки;
		
		
		Если МассивРезультатов.Количество()>0 Тогда
			НовСтр = СтрокиКУдалению.Добавить();
			НовСтр.СтрокаТаблицы = МассивРезультатов[0];
			НовСтр.ТаблицаЗначений = мРезультатыПоиска;				
		КонецЕсли;
		
		НовСтр = СтрокиКУдалению.Добавить();
		НовСтр.СтрокаТаблицы = Строка;
		НовСтр.ТаблицаЗначений = НайденныеОбъекты;			
		
	КонецЦикла;
	Если Не БылиИсключения Тогда
		Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
			Для каждого Строка1 Из Строка0.Строки Цикл
				Для каждого Строка2 Из Строка1.Строки Цикл
					Если Строка2.ВключатьВПоиск Тогда
						Объект = Строка2.НеПравильный.ПолучитьОбъект();		
						Попытка
							Объект.Удалить();
						Исключение
							Если ВыполнятьВТранзакции Тогда
								БылиИсключения = Истина;
								Прервать;
							КонецЕсли;
						КонецПопытки;
					КонецЕсли; 
				КонецЦикла; 
				Если БылиИсключения Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если БылиИсключения Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();			
		КонецЕсли;
	КонецЕсли;	
	Если НЕ БылиИсключения Тогда
		Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
			СтрокаКУдалению.ТаблицаЗначений.Удалить(СтрокаКУдалению.СтрокаТаблицы);
		КонецЦикла;			
		ЗависимыеОбъекты.Строки.Очистить();
	КонецЕсли;
	Кнопка = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Кнопки[ТекущаяГруппа-1];
	Кнопка.Текст = "Группа "+ТекущаяГруппа+" ( " + Строка(НайденныеОбъекты.Количество()) + " эл-тов )";
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НайденныеСсылки"

Процедура НайденныеСсылкиПередНачаломИзменения(Элемент, Отказ)
	Попытка
		Форма = Элемент.ТекущиеДанные.Данные.ПолучитьФорму();
		Форма.Открыть();
	Исключение
		
	КонецПопытки;
	Отказ = истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "ЗависимыеОбъекты"

Процедура КоманднаяПанельЗависимыеОбъектыПоискСсылок(Кнопка)
	ПоискЗависимыхСсылок();
	ЭлементыФормы.КоманднаяПанельЗависимыеОбъекты.Кнопки.ВыполнитьЗамену.Доступность = Истина;
КонецПроцедуры

Процедура КоманднаяПанельЗависимыеОбъектыВыполнитьЗамену(Кнопка)
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Замена значений";
		мФормаИндикатора.ВладелецФормы = ЭтаФорма;
		мФормаИндикатора.Открыть();
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	МассивСтрокВключенныхВПоиск = ЗависимыеОбъекты.Строки.НайтиСтроки(Новый Структура("ВключатьВПоиск", Истина), Истина);
	
	НомерСтроки = 0;
	Для каждого Строка Из МассивСтрокВключенныхВПоиск Цикл
		НомерСтроки = НомерСтроки + 1;
		
		СтруктураОтбора.Вставить("Ссылка",Строка.НеПравильный);
		МассивСтрок = НайденныеЗависимыеСсылки.НайтиСтроки(СтруктураОтбора);
		ВыполнитьЗаменуЭлементов(Строка.Правильный, МассивСтрок, " Элемент " + НомерСтроки + " из " + МассивСтрокВключенныхВПоиск.Количество());
	КонецЦикла;
	
	ПоискЗависимыхСсылок();
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.Закрыть();
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельЗависимыеОбъектыУдалитьЭлементы(Кнопка)
	Если НайденныеЗависимыеСсылки.Количество()>0 Тогда
		Предупреждение("На элементы есть ссылки");
		Возврат;
	КонецЕсли;
	
	БылиИсключения = Ложь;
	ЕСли ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	СтрокиКУдалению = Новый ТаблицаЗначений;
	СтрокиКУдалению.Колонки.Добавить("СтрокаКоллекции");
	СтрокиКУдалению.Колонки.Добавить("КоллекцияСтрок");
	
	Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
		Для каждого Строка1 Из Строка0.Строки Цикл
			Для каждого Строка2 Из Строка1.Строки Цикл
				Если Строка2.ВключатьВПоиск Тогда
					Объект = Строка2.НеПравильный.ПолучитьОбъект();		
					Попытка
						Объект.Удалить();
					Исключение
						Если ВыполнятьВТранзакции Тогда
							БылиИсключения = Истина;
							Прервать;
						КонецЕсли;
					КонецПопытки;
					НовСтр = СтрокиКУдалению.Добавить();
					НовСтр.СтрокаКоллекции = Строка2;
					НовСтр.КоллекцияСтрок = Строка1.Строки;			
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();			
		КонецЕсли;
	КонецЕсли;	
	Если НЕ БылиИсключения Тогда
		Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
			СтрокаКУдалению.КоллекцияСтрок.Удалить(СтрокаКУдалению.СтрокаКоллекции);
		КонецЦикла;			
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ЗависимыеОбъекты"

Процедура ЗависимыеОбъектыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьТекст = Ложь;
	Если ДанныеСтроки.Уровень() = 1  Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.Правильный.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Ложь;
	ИначеЕсли ДанныеСтроки.Уровень() = 0  Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.Правильный.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Ложь;
	Иначе
//		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Истина;
	КонецЕсли; 
КонецПроцедуры

Процедура ЗависимыеОбъектыПравильныйНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.ЗависимыеОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Уровень() = 2 Тогда
			Элемент.ВыборПоВладельцу = ТекущиеДанные.Родитель.Правильный;
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура ОпределитьПравильныеЭлементы() Экспорт
	
	Если мРезультатыПоиска.Колонки.Найти("КоличествоСсылок") = Неопределено Тогда
		мРезультатыПоиска.Колонки.Добавить("КоличествоСсылок");
	КонецЕсли;
	
	мРезультатыПоиска.ЗаполнитьЗначения(Ложь,"Правильный");
	
	ТаблицаСсылок = НайтиПоСсылкам(мРезультатыПоиска.ВыгрузитьКолонку("Ссылка"));
	ТаблицаСсылок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаСсылок.ЗаполнитьЗначения(1,"Количество");
	ТаблицаСсылок.Свернуть("Ссылка", "Количество");
	СоответствиеСсылок = Новый Соответствие;
	Для каждого Строка Из ТаблицаСсылок Цикл
		СоответствиеСсылок.Вставить(Строка.Ссылка, Строка.Количество);
	КонецЦикла;
	СтрокиПравильных = Новый Соответствие;
	Для каждого Строка Из мРезультатыПоиска Цикл
		КоличествоСсылок = СоответствиеСсылок[Строка.Ссылка];
		КоличествоСсылок = ?(КоличествоСсылок = Неопределено, 0, КоличествоСсылок);
		Строка.КоличествоСсылок = ?(КоличествоСсылок = Неопределено, 0, КоличествоСсылок);
		
		НомерГруппы = Строка.НомерГруппы;
		
		СтрокаПравильного = СтрокиПравильных[НомерГруппы];
		Если СтрокаПравильного = Неопределено или СтрокаПравильного.КоличествоСсылок < КоличествоСсылок Тогда
			СтрокиПравильных.Вставить(НомерГруппы, Строка);
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого СтрокаПравильного Из СтрокиПравильных Цикл
		СтрокаПравильного.Значение.Правильный = Истина;
	КонецЦикла;
	
КонецПроцедуры // () 

Процедура КоманднаяПанельНайденныеОбъектыАвтоопределениеПравильных(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	ОпределитьПравильныеЭлементы();
	
	ВывестиГруппу(ТекущаяГруппа());
	ЭлементыФормы.НайденныеОбъекты.Колонки.КоличествоСсылок.Видимость = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыПредыдущаяГруппа(Кнопка)
	
	ТекущаяГруппа = ТекущаяГруппа();
	Если ТекущаяГруппа = 0 Тогда
		Возврат;
	КонецЕсли;
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
	ВсегоГрупп = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Кнопки.Количество();
	ТекущаяГруппа = ?(ТекущаяГруппа = 1, ВсегоГрупп, ТекущаяГруппа - 1);
	ВывестиГруппу(ТекущаяГруппа);
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыСледующаяГруппа(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	ТекущаяГруппа = ТекущаяГруппа();
	Если ТекущаяГруппа = 0 Тогда
		Возврат;
	КонецЕсли;
	ВсегоГрупп = ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыборГруппы.Кнопки.Количество();
	ТекущаяГруппа = ?(ТекущаяГруппа = ВсегоГрупп, 1, ТекущаяГруппа + 1);
	ВывестиГруппу(ТекущаяГруппа);
	
КонецПроцедуры