Перем НеВосстанавливатьНастройку Экспорт;

// Определяет максимальное значение из
// периодичностей исходного и принимающего сценариев.
//
Процедура ОпределитьШагИнтервала()
	
	ШагИнтервалаКопирования=Перечисления.Периодичность.День;
	
	Если НЕ СценарийПриемник.Пустая() Тогда
		
		Если ОбщегоНазначения.ЧислоДнейВПериоде(СценарийПриемник.Периодичность)>=ОбщегоНазначения.ЧислоДнейВПериоде(СценарийИсточник.Периодичность) Тогда
			ШагИнтервалаКопирования=СценарийПриемник.Периодичность;
		ИначеЕсли ОбщегоНазначения.ЧислоДнейВПериоде(СценарийПриемник.Периодичность)<ОбщегоНазначения.ЧислоДнейВПериоде(СценарийИсточник.Периодичность) Тогда
			ШагИнтервалаКопирования=СценарийИсточник.Периодичность;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьШагИнтервала() 

// Проверяет даты начала и конца интервала источника и корректирует при необходимости
//
Процедура ПроверкаИнтервалаИсточника()
	
	
	Если (ДатаКонцаИсточник='00010101') И (ДатаНачалаИсточник<>'00010101') Тогда
		
		ДатаКонцаИсточник=ОбщегоНазначения.ДатаКонцаПериода(ДатаНачалаИсточник,ШагИнтервалаКопирования);
		
	ИначеЕсли (ДатаКонцаИсточник<>'00010101') И (ДатаНачалаИсточник='00010101') Тогда
		
		ДатаНачалаИсточник=ОбщегоНазначения.ДатаНачалаПериода(ДатаКонцаИсточник,ШагИнтервалаКопирования);
		
	ИначеЕсли ДатаКонцаИсточник<ДатаНачалаИсточник Тогда
		
		Если ЭтаФорма.ТекущийЭлемент.Имя="ДатаКонцаИсточник" Тогда
			
			ДатаНачалаИсточник=ОбщегоНазначения.ДатаНачалаПериода(ДатаКонцаИсточник,ШагИнтервалаКопирования);
			
		Иначе
			
			ДатаКонцаИсточник=ОбщегоНазначения.ДатаКонцаПериода(ДатаНачалаИсточник,ШагИнтервалаКопирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СинхронизацияИнтервалов();
			
КонецПроцедуры // ПроверкаИнтервалаИсточника()

// Проверяет даты начала и конца интервала источника и корректирует при необходимости
//
Процедура ПроверкаИнтервалаПриемника()
	
	Периодичность=?(СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал,
					ШагИнтервалаКопирования,СценарийПриемник.Периодичность);
	
	Если (ДатаКонцаПриемник='00010101') И (ДатаНачалаПриемник<>'00010101') Тогда
		
		ДатаКонцаПриемник=ОбщегоНазначения.ДатаКонцаПериода(ДатаНачалаПриемник,Периодичность);
		
	ИначеЕсли (ДатаКонцаПриемник<>'00010101') И (ДатаНачалаПриемник='00010101') Тогда
		
		ДатаНачалаПриемник=ОбщегоНазначения.ДатаНачалаПериода(ДатаКонцаПриемник,Периодичность);
		
	ИначеЕсли ДатаКонцаПриемник<ДатаНачалаПриемник Тогда
		
		Если ЭтаФорма.ТекущийЭлемент.Имя="ДатаКонцаПриемник" Тогда
			
			ДатаНачалаПриемник=ОбщегоНазначения.ДатаНачалаПериода(ДатаКонцаПриемник,Периодичность);
			
		Иначе
			
			ДатаКонцаПриемник=ОбщегоНазначения.ДатаКонцаПериода(ДатаНачалаПриемник,Периодичность);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СинхронизацияИнтервалов();
		
КонецПроцедуры // ПроверкаИнтервалаПриемника()

// Выставляет равными интервалы источника и приемника (в шагах интервала копирования)
// и сдвигает границы интервалов, чтобы не было пересечения.
//
Процедура СинхронизацияИнтервалов()
	
	ТекущийФокус=ЭтаФорма.ТекущийЭлемент.Имя;
	
	Если СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал Тогда
		
		Если Найти(ТекущийФокус,"Приемник")>0 Тогда
			КоличествоИнтервалов=Бюджетирование.РассчитатьКоличествоПериодов(ДатаНачалаПриемник,ДатаКонцаПриемник,ШагИнтервалаКопирования);
			
			Если ТекущийФокус="ДатаНачалаПриемник" Тогда
				
				ДатаНачалаИсточник=ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаКонцаИсточник,ШагИнтервалаКопирования,КоличествоИнтервалов*(-1)+1),ШагИнтервалаКопирования);
				
			Иначе
				
				ДатаКонцаИсточник=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаНачалаИсточник,ШагИнтервалаКопирования,КоличествоИнтервалов-1),ШагИнтервалаКопирования);
				
			КонецЕсли;
			
			//Если ДатаКонцаИсточник>=ДатаНачалаПриемник Тогда
			//	
			//	ДатаКонцаИсточник=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаНачалаПриемник,ШагИнтервалаКопирования,-1),ШагИнтервалаКопирования);
			//	ДатаНачалаИсточник=ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаКонцаИсточник,ШагИнтервалаКопирования,КоличествоИнтервалов*(-1)+1),ШагИнтервалаКопирования);
			//	
			//КонецЕсли;	
			
		ИначеЕсли Найти(ТекущийФокус,"Источник")>0 Тогда
			КоличествоИнтервалов=Бюджетирование.РассчитатьКоличествоПериодов(ДатаНачалаИсточник,ДатаКонцаИсточник,ШагИнтервалаКопирования);
			
			Если ТекущийФокус="ДатаНачалаИсточник" Тогда
				
				ДатаНачалаПриемник=ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаКонцаПриемник,ШагИнтервалаКопирования,КоличествоИнтервалов*(-1)+1),ШагИнтервалаКопирования);
				
			Иначе
				
				ДатаКонцаПриемник=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаНачалаПриемник,ШагИнтервалаКопирования,КоличествоИнтервалов-1),ШагИнтервалаКопирования);
				
			КонецЕсли;
			
			//Если ДатаКонцаИсточник>=ДатаНачалаПриемник Тогда
			//	
			//	ДатаНачалаПриемник=ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаКонцаИсточник,ШагИнтервалаКопирования,1),ШагИнтервалаКопирования);
			//	ДатаКонцаПриемник=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаНачалаПриемник,ШагИнтервалаКопирования,КоличествоИнтервалов-1),ШагИнтервалаКопирования);
			//	
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // СинхронизацияИнтервалов()
 

 

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

Процедура КнопкаВыполнитьНажатие(Элемент)
	
	Если СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.РаспределениеНормированныхЗначений Тогда
		
		Если ТипРаспределения.Пустая() Тогда
			Сообщить("Не указан тип заполнения.");
			Возврат;
		ИначеЕсли ТипРаспределения=Перечисления.ВидыРаспределенияЗначенийБюджетирования.ПоПериодамСИзменением
			И ТипИзменения.Пустая() Тогда
			Сообщить("Не указан тип расчета.");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	КопированиеДанных();
	
	Если КопироватьБюджетныеОперации Тогда
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница=ЭлементыФормы.ПанельОсновная.Страницы["Документы"];
	ИначеЕсли КопироватьРасчетПоМодели Тогда
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница=ЭлементыФормы.ПанельОсновная.Страницы["ДокументыРасчеты"];
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаИсточникаНажатие(Элемент)
	
	Если НПИсточник.Редактировать() Тогда
				
		ДатаНачалаИсточник=ОбщегоНазначения.ДатаНачалаПериода(НПИсточник.ПолучитьДатуНачала(),ШагИнтервалаКопирования);
		ДатаКонцаИсточник=ОбщегоНазначения.ДатаКонцаПериода(НПИсточник.ПолучитьДатуОкончания(),ШагИнтервалаКопирования);
			
	КонецЕсли;
	
	СинхронизацияИнтервалов();
		
КонецПроцедуры

Процедура СпособКопированияДанныхПриИзменении(Элемент)
	
	Если Элемент.Значение=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал Тогда
		
		ШагИнтервалаКопирования=Перечисления.Периодичность.День;
		ОпределитьШагИнтервала();
				
		ДатаНачалаИсточник=ОбщегоНазначения.ДатаНачалаПериода(ДатаНачалаИсточник,ШагИнтервалаКопирования);
		ДатаКонцаИсточник=ОбщегоНазначения.ДатаКонцаПериода(ДатаКонцаИсточник,ШагИнтервалаКопирования);
		
		ДатаНачалаПриемник=ОбщегоНазначения.ДатаНачалаПериода(ДатаНачалаПриемник,ШагИнтервалаКопирования);
		ДатаКонцаПриемник=ОбщегоНазначения.ДатаКонцаПериода(ДатаКонцаПриемник,ШагИнтервалаКопирования);
		
		СинхронизацияИнтервалов();
		
		ЭлементыФормы.ПанельПараметрыРасчета.ТекущаяСтраница=ЭлементыФормы.ПанельПараметрыРасчета.Страницы["ПоПериодам"];
		
	Иначе
		
		ЭлементыФормы.ПанельПараметрыРасчета.ТекущаяСтраница=ЭлементыФормы.ПанельПараметрыРасчета.Страницы["Нормировать"];
		
	КонецЕсли;
	
	Если Элемент.Значение=Перечисления.СпособыКопированияДанныхБюджетирования.РаспределениеНормированныхЗначений Тогда
		
		КопироватьРасчетПоМодели=Ложь;
		ЭлементыФормы.КопироватьРасчетПоМодели.Доступность=Ложь;
		
	Иначе
		
		ЭлементыФормы.КопироватьРасчетПоМодели.Доступность=Истина;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура КнопкаНастройкаПериодаПриемникНажатие(Элемент)
	
	Если НППриемник.Редактировать() Тогда
		
		Если СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.РаспределениеНормированныхЗначений Тогда
			
			Если НЕ СценарийПриемник.Пустая() Тогда
				
				ДатаНачалаПриемник=ОбщегоНазначения.ДатаНачалаПериода(НППриемник.ПолучитьДатуНачала(),СценарийПриемник.Периодичность);
				ДатаКонцаПриемник=ОбщегоНазначения.ДатаКонцаПериода(НППриемник.ПолучитьДатуОкончания(),СценарийПриемник.Периодичность);
			Иначе
				
				ДатаНачалаПриемник = НППриемник.ПолучитьДатуНачала();
				ДатаКонцаПриемник = НППриемник.ПолучитьДатуОкончания();
				
			КонецЕсли;
			
		Иначе
			
			ДатаНачалаПриемник=ОбщегоНазначения.ДатаНачалаПериода(НППриемник.ПолучитьДатуНачала(),ШагИнтервалаКопирования);
			ДатаКонцаПриемник=ОбщегоНазначения.ДатаКонцаПериода(НППриемник.ПолучитьДатуОкончания(),ШагИнтервалаКопирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СинхронизацияИнтервалов();
	
КонецПроцедуры

Процедура ДатаНачалаИсточникПриИзменении(Элемент)
						
	Элемент.Значение=ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение,ШагИнтервалаКопирования);
	ПроверкаИнтервалаИсточника();
		
КонецПроцедуры

Процедура ДатаКонцаИсточникПриИзменении(Элемент)
						
	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(Элемент.Значение,ШагИнтервалаКопирования);
	ПроверкаИнтервалаИсточника();
	
КонецПроцедуры

Процедура ДатаНачалаИсточникРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Элемент.Значение=ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,ШагИнтервалаКопирования,Направление);
	
	ПроверкаИнтервалаИсточника();	
	
КонецПроцедуры

Процедура ДатаКонцаИсточникРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,ШагИнтервалаКопирования,Направление),ШагИнтервалаКопирования);
	
	ПроверкаИнтервалаИсточника();
		
КонецПроцедуры

Процедура ДатаНачалаПриемникПриИзменении(Элемент)
	
	Периодичность=?(СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал,
					ШагИнтервалаКопирования,СценарийПриемник.Периодичность);
					
	Элемент.Значение=ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение,Периодичность);
	ПроверкаИнтервалаПриемника();
		
КонецПроцедуры

Процедура ДатаКонцаПриемникПриИзменении(Элемент)
	
	Периодичность=?(СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал,
					ШагИнтервалаКопирования,СценарийПриемник.Периодичность);
					
	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(Элемент.Значение,Периодичность);
	ПроверкаИнтервалаПриемника();
	
КонецПроцедуры

Процедура ДатаНачалаПриемникРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Периодичность=?(СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал,
					ШагИнтервалаКопирования,?(СценарийПриемник.Пустая(),Перечисления.Периодичность.День,СценарийПриемник.Периодичность));
	
	Элемент.Значение=ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Периодичность,Направление);
	
	ПроверкаИнтервалаПриемника();	
	
КонецПроцедуры

Процедура ДатаКонцаПриемникРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Периодичность=?(СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал,
					ШагИнтервалаКопирования,?(СценарийПриемник.Пустая(),Перечисления.Периодичность.День,СценарийПриемник.Периодичность));
	
	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Периодичность,Направление),Периодичность);
	
	ПроверкаИнтервалаПриемника();
	
КонецПроцедуры

Процедура СценарийИсточникПриИзменении(Элемент)
	
	ОпределитьШагИнтервала();
	
	ДатаНачалаИсточник=ОбщегоНазначения.ДатаНачалаПериода(ДатаНачалаИсточник,ШагИнтервалаКопирования);
	ДатаКонцаИсточник=ОбщегоНазначения.ДатаКонцаПериода(ДатаКонцаИсточник,ШагИнтервалаКопирования);
	
	Если СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал Тогда	
		
		ДатаНачалаПриемник=ОбщегоНазначения.ДатаНачалаПериода(ДатаНачалаПриемник,ШагИнтервалаКопирования);
		ДатаКонцаПриемник=ОбщегоНазначения.ДатаКонцаПериода(ДатаКонцаПриемник,ШагИнтервалаКопирования);
		
	КонецЕсли;
	
	СинхронизацияИнтервалов();
	
	Если СценарийИсточник.ДетализацияПланирования=Перечисления.ДетализацияПланирования.Номенклатура Тогда
		НоменклатураИсточник=Новый(Тип("СправочникСсылка.Номенклатура"));
	Иначе
		НоменклатураИсточник=Новый(Тип("СправочникСсылка.НоменклатурныеГруппы"));
	КонецЕсли;
	
	Если СценарийИсточник.Пустая() Тогда
		
		КопироватьРасчетПоМодели=Ложь;
		ЭлементыФормы.КопироватьРасчетПоМодели.Доступность=Ложь;
		
	ИначеЕсли СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал Тогда
		
		ЭлементыФормы.КопироватьРасчетПоМодели.Доступность=Истина;
		
	КонецЕсли;
				
КонецПроцедуры

Процедура СценарийПриемникПриИзменении(Элемент)
	
	ОпределитьШагИнтервала();
	
	ДатаНачалаИсточник=ОбщегоНазначения.ДатаНачалаПериода(ДатаНачалаИсточник,ШагИнтервалаКопирования);
	ДатаКонцаИсточник=ОбщегоНазначения.ДатаКонцаПериода(ДатаКонцаИсточник,ШагИнтервалаКопирования);
	
	Если СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал Тогда
							
		ДатаНачалаПриемник=ОбщегоНазначения.ДатаНачалаПериода(ДатаНачалаПриемник,ШагИнтервалаКопирования);
		ДатаКонцаПриемник=ОбщегоНазначения.ДатаКонцаПериода(ДатаКонцаПриемник,ШагИнтервалаКопирования);
		
	Иначе
		
		ДатаНачалаПриемник=ОбщегоНазначения.ДатаНачалаПериода(ДатаНачалаПриемник,СценарийПриемник.Периодичность);
		ДатаКонцаПриемник=ОбщегоНазначения.ДатаКонцаПериода(ДатаКонцаПриемник,СценарийПриемник.Периодичность);
			
	КонецЕсли;
	
	СинхронизацияИнтервалов();
	
КонецПроцедуры

Процедура ТипРаспределенияПриИзменении(Элемент)
	
	Если Элемент.Значение=Перечисления.ВидыРаспределенияЗначенийБюджетирования.ПоПериодамРавномерно Тогда
		ЭлементыФормы.ИзменениеЗаПериод.Доступность=Ложь;
		ЭлементыФормы.ТипИзменения.Доступность=Ложь;
		ЭлементыФормы.ТипИзменения.Значение=Перечисления.ВидыИзмененийПоПериодамБюджетирования.ПустаяСсылка();
	Иначе
		ЭлементыФормы.ИзменениеЗаПериод.Доступность=Истина;
		ЭлементыФормы.ТипИзменения.Доступность=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСписокОперацииУстановитьПометки(Кнопка)
	
	Для каждого Строка из СписокДокументовОперации Цикл
		Строка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСписокОперацииСнятьПометки(Кнопка)
	
	Для каждого Строка из СписокДокументовОперации Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры

Процедура КоманднаяПанельСписокОперацииПровести(Кнопка)
	
	НачатьТранзакцию();
	
	Для каждого Строка из СписокДокументовОперации Цикл
		Если Строка.Пометка Тогда
			Попытка
			Строка.ДокументОперация.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
			Строка.Пометка = Ложь;
		Исключение
			
			Сообщить(ОписаниеОшибки());
			
		КонецПопытки
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура КоманднаяПанельСписокРасчетыУстановитьПометки(Кнопка)
	
	Для каждого Строка из СписокДокументовРасчеты Цикл
		Строка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСписокРасчетыСнятьПометки(Кнопка)
	
	Для каждого Строка из СписокДокументовРасчеты Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры

Процедура СписокДокументовОперацииВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ОткрытьЗначение(ВыбраннаяСтрока.ДокументОперация);
КонецПроцедуры

Процедура КоманднаяПанельСписокРасчетыРассчитатьИПровести(Кнопка)
	
	НачатьТранзакцию();
	
	Для каждого Строка из СписокДокументовРасчеты Цикл
		
		Если Строка.Пометка Тогда
			
			ДокументРасчет=Строка.ДокументРасчет.ПолучитьОбъект();
			
			ДокументРасчет.ВыполнитьРасчет();
			ДокументРасчет.Записать(РежимЗаписиДокумента.Проведение);
			Строка.Пометка = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры

Процедура СписокДокументовРасчетыПередУдалением(Элемент, Отказ)
	
	ДокументКУдалению=Элемент.ТекущиеДанные.ДокументРасчет.ПолучитьОбъект();
	ДокументКУдалению.Удалить();
		
КонецПроцедуры

Процедура СписокДокументовРасчетыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ=Истина;
	
КонецПроцедуры

Процедура СписокДокументовОперацииПередУдалением(Элемент, Отказ)
	
	ДокументКУдалению=Элемент.ТекущиеДанные.ДокументОперация.ПолучитьОбъект();
	ДокументКУдалению.Удалить();
	
КонецПроцедуры

Процедура СписокДокументовОперацииПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ=Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельСписокОперацииОчистить(Кнопка)
	
	ТекстВопроса = "Сформированные документы будут удалены
					|из информационной базы. 
					|Продолжить?";
					
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 

	НачатьТранзакцию();
	
	Для каждого Строка из СписокДокументовОперации Цикл
		ДокументКУдалению=Строка.ДокументОперация.ПолучитьОбъект();
		ДокументКУдалению.Удалить();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	СписокДокументовОперации.Очистить();
		
КонецПроцедуры

Процедура КоманднаяПанельСписокРасчетыОчистить(Кнопка)
	
	ТекстВопроса = "Сформированные документы будут удалены
					|из информационной базы. 
					|Продолжить?";
					
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Для каждого Строка из СписокДокументовРасчеты Цикл
		ДокументКУдалению=Строка.ДокументРасчет.ПолучитьОбъект();
		ДокументКУдалению.Удалить();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	СписокДокументовРасчеты.Очистить();
		
КонецПроцедуры

Процедура СписокДокументовРасчетыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ОткрытьЗначение(ВыбраннаяСтрока.ДокументРасчет);
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если Состояние.Пустая() Тогда
		Состояние=Перечисления.СостоянияОбъектов.Подготовлен;
	КонецЕсли;
	
	Если Ответственный.Пустая() Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;
		
	Если (НЕ НеВосстанавливатьНастройку=Истина) Тогда 
		
		ЗаполнитьНачальныеНастройки();
		Если ТипЗнч(СохраненныеНастройки)=Тип("НастройкиПостроителяОтчета") Тогда
			ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки,Истина,Ложь,Ложь,Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	ОпределитьШагИнтервала();
	
	Если СпособКопированияДанных=Перечисления.СпособыКопированияДанныхБюджетирования.ИнтервалВИнтервал Тогда
		
		ЭлементыФормы.ПанельПараметрыРасчета.ТекущаяСтраница=ЭлементыФормы.ПанельПараметрыРасчета.Страницы["ПоПериодам"];
		
	Иначе
		
		ЭлементыФормы.ПанельПараметрыРасчета.ТекущаяСтраница=ЭлементыФормы.ПанельПараметрыРасчета.Страницы["Нормировать"];
		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)
	
	СохраненныеНастройки=ПостроительОтчета.ПолучитьНастройки(Истина,Ложь,Ложь,Ложь);
	
КонецПроцедуры



ШагИнтервалаКопирования=Перечисления.Периодичность.День;
ДатаНачалаИсточник=НачалоМесяца(ТекущаяДата());
ДатаКонцаИсточник=КонецМесяца(ТекущаяДата());
ДатаНачалаПриемник=НачалоМесяца(ТекущаяДата());
ДатаКонцаПриемник=НачалоМесяца(ТекущаяДата());

КоэффициентПериоды=1;