Перем мВестиУчетПоСкладам;
Перем мИсходноеЗначениеИспользоватьРасширеннуюАналитикуУчетаЗатрат;
Перем мВестиРеглУчетРасчетовСПерсоналомСводно;

Перем МодифицированностьПередЗаписью; // Устанавливается в событии ПередЗаписью

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция проверяет согласованность параметров учета и сообщает о найденных ошибках.
// Рассогласование может произойти, например, по причине программного заполнения параметров
// или при наличии ошибок в обработке интерактивных действий пользователя
//
Функция ПроверитьСогласованностьПараметров()
	
	Ошибки = "";
	
	Если ИспользоватьПотребностиЗаказовНаПроизводство 
		И НЕ ИспользоватьЗаказыНаПроизводство Тогда
		
		Ошибки = Ошибки + Символы.ПС + " - Установлен параметр ""Вести учет потребностей заказов на производство в материалах и полуфабрикатах"",
			 					|  но не установлен параметр ""Использовать заказы на производство"" (раздел ""Заказы на производство"")";
	КонецЕсли; 
	
	
	Если УказаниеПроектовВТабличнойЧастиДокументов 
		И НЕ ВедениеУчетаЗатратПоПроектам Тогда
		
		Ошибки = Ошибки + Символы.ПС + " - Установлен параметр ""Указывать проекты в табличной части документов"",
			 					|  но не установлен параметр ""Вести учет затрат по проектам"" (раздел ""Проекты"")";
	КонецЕсли; 
	
	Если ИспользоватьУказаниеСерийНоменклатурыПриРезервировании 
		И НЕ ИспользоватьСерииНоменклатуры Тогда
		
		Ошибки = Ошибки + Символы.ПС + " - Установлен параметр ""Указывать серии при резервировании"",
			 					|  но не установлен параметр ""Использовать серии номенклатуры"" (раздел ""Учет товаров"")";
	КонецЕсли; 
	
	ЕстьОшибки = (Ошибки <> "");
	Если ЕстьОшибки Тогда
		ОбщегоНазначения.Сообщение("Обнаружено рассогласование параметров:" + Ошибки); 
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;

КонецФункции // ПроверитьСогласованностьДанных

Функция ПроверитьЗаполнениеПараметров()

	Ошибки = "";
	
	Если НЕ ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат
	 И НЕ СписыватьПартииРасходнымОрдером 
	 И НЕ МожноОтключитьСписыватьПартииРасходнымОрдером() Тогда
		Ошибки = Ошибки + Символы.ПС
				+ " - Есть проведенные документы ""Расходный ордер на товары"", в которых серия указана 
					|   при отпуске со склада. Нельзя записать значение константы ""Списывать партии 
					|   расходным ордером"" = ""Ложь"" (раздел ""Учет товаров"")";
					
	КонецЕсли;
	
	ЕстьОшибки = (Ошибки <> "");
	Если ЕстьОшибки Тогда
		ОбщегоНазначения.Сообщение("Обнаружены ошибки:" + Ошибки); 
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;

КонецФункции // ПроверитьЗаполнениеПараметров()
 
Процедура СообщитьОбИзмененииПараметровУчета()
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы() ;
	Для Каждого ТекСоединение Из МассивСоединений Цикл
		Если (ТекСоединение.ИмяПриложения = "1CV8") 
		   И (НЕ ТекСоединение.НомерСоединения = НомерСоединенияИнформационнойБазы())
		   И (НЕ ТекСоединение.Пользователь = неопределено) Тогда
			  
				ОбщегоНазначения.Сообщение("Внимание! Вы изменили настройки параметров учета!
						 |В настоящий момент в базе работают пользователи. 
						 |Некоторые настройки могут не начать действовать для них.
						 |Им необходимо перезапустить программу. 
						 |Для Вас новые настройки уже вступили в силу, перезапускать программу не требуется.", СтатусСообщения.Важное);
				Прервать;		 
		КонецЕсли;
	КонецЦикла;	
	
	Оповестить("ИзменениеПараметровУчета");
	
КонецПроцедуры

// Определяет возможность установить значение константы СписыватьПартииРасходнымОрдером = Ложь
// От значения константы зависит каким образом будет осуществляться списание партий товаров по ордерной схеме
// 
Функция МожноОтключитьСписыватьПартииРасходнымОрдером()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерНаТоварыТовары.СерияУказываетсяПриОтпускеСоСклада,
	|	РасходныйОрдерНаТоварыТовары.Ссылка,
	|	РасходныйОрдерНаТоварыТовары.СерияНоменклатуры
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ПО РасходныйОрдерНаТоварыТовары.Ссылка = СписанныеТовары.Регистратор
	|			И (РасходныйОрдерНаТоварыТовары.СерияУказываетсяПриОтпускеСоСклада)
	|			И (РасходныйОрдерНаТоварыТовары.СерияНоменклатуры <> &ПустаяСерия)";
	
	Запрос.УстановитьПараметр("ПустаяСерия",Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции // МожноОтключитьСписыватьПартииРасходнымОрдером()

Процедура ЗаполнитьИсходныеЗначенияКонстант()

	мИсходноеЗначениеИспользоватьРасширеннуюАналитикуУчетаЗатрат		= ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат;
	мВестиУчетПоСкладам													= ВестиПартионныйУчетПоСкладамРегл;
	мВестиРеглУчетРасчетовСПерсоналомСводно                             = ВестиРеглУчетРасчетовСПерсоналомСводно;
	
КонецПроцедуры //

Функция ВызватьФормуИзмененияНастроекУчета(ИмяФормы)
	
	ФормаИзмененияНастройки = ОбработкаОбъект.ПолучитьФорму(ИмяФормы);
	ФормаИзмененияНастройки.Открыть();
	
КонецФункции

Процедура СброситьФлагиСписыватьПартииПриПроведенииДокументов()
	ТекстСообщения = "";
	Если СписыватьПартииПриПроведенииДокументов Тогда
		ТекстСообщения = ?(ТекстСообщения="","",ТекстСообщения+Символы.ПС)+Символы.Таб+"""Списывать партии при отражении документов в управленческом учете""";
		СписыватьПартииПриПроведенииДокументов = Ложь;
	КонецЕсли;
	Если СписыватьПартииПриПроведенииДокументовБух Тогда
		ТекстСообщения = ?(ТекстСообщения="","",ТекстСообщения+Символы.ПС)+Символы.Таб+"""Списывать партии при отражении документов в регламентированном учете""";
		СписыватьПартииПриПроведенииДокументовБух = Ложь;
	КонецЕсли;
	Если ТекстСообщения<>"" Тогда
		ТекстСообщения = "Следующие параметры учета не используются в режиме расширенной аналитики, "+Символы.ПС+"поэтому соответствующие флаги будут сброшены:"+Символы.ПС+ТекстСообщения;
		ОбщегоНазначения.Сообщение(ТекстСообщения,СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕЧАТИ

Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	Результат = Истина;

	Если ЭтаФорма.Модифицированность Тогда

		Ответ = Вопрос("Настройки изменены. Для печати необходимо записать настройки.
		               |Записать?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Печать");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Попытка
				
				Результат = ЗаписатьВФорме();				
				
			Исключение
				Результат = Ложь;
			КонецПопытки;	

		КонецЕсли;

	КонецЕсли;

	Если Результат Тогда
		ОбработкаОбъект.Печать(СписокРазделов, "Параметры учета");
	КонецЕсли; 
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПИСКА РАЗДЕЛОВ

Процедура СписокРазделовПриАктивизацииСтроки(Элемент)
	
	ТекущйийРаздел = ЭлементыФормы.СписокРазделов.ТекущаяСтрока;
	ЭлементыФормы.ПанельРазделов.ТекущаяСтраница = ЭлементыФормы.ПанельРазделов.Страницы[ТекущйийРаздел.ИмяРаздела];
	
КонецПроцедуры

Процедура ЗаполнитьСписокРазделов()
	
	СписокРазделов.Очистить();
	
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "Производство",				 "Производство", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "РежимУчетаЗатрат",	    	 "Режим учета затрат", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "Себестоимость",	        	 "Себестоимость", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "СпособыРаспределенияЗатрат", "Способы распределения затрат", 1);
	
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "УчетТоваров",				 "Учет товаров", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "Печать",					 	"Печать, единицы измерения", 2);
	
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "Взаиморасчеты",				 "Взаиморасчеты", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "РасчетыСПерсоналом",		 "Расчеты с персоналом", 1);
	
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "Заказы",					 "Заказы", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "ЗаказыНаПроизводство",		 	"Заказы на производство", 2);
	
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "РозничныеПродажи",			 "Розничные продажи", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "Планирование",				 "Планирование", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "Проекты",					 "Проекты", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "Валюты",					 "Валюты", 1);
	
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "НДС",				    	 "НДС", 1);
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "НДСВвалюте",				 "НДС в валюте", 2);
	
	ОбработкаОбъект.ДобавитьРаздел(СписокРазделов, "НалогНаПрибыль",	    	 "Налог на прибыль", 1);
	
КонецПроцедуры // ЗаполнитьСписокРазделов

Процедура УстановитьВидимостьРазделов()
	
	Если ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат Тогда
		ЭлементыФормы.ПанельРаспределениеЗатрат.ТекущаяСтраница = ЭлементыФормы.ПанельРаспределениеЗатрат.Страницы.РасширеннаяАналитика;
	Иначе
		ЭлементыФормы.ПанельРаспределениеЗатрат.ТекущаяСтраница = ЭлементыФормы.ПанельРаспределениеЗатрат.Страницы.ТрадиционныйРежим;
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВАЛЮТЫ

// Процедура проверяет возможность редактирования валюты
// регламентированного учета
//
Процедура ПроверкаДоступностиВалютыУчета();

	Если НЕ ПравоДоступа("Изменение", Метаданные.Константы.ВалютаРегламентированногоУчета)
		 ИЛИ НЕ ПравоДоступа("Изменение", Метаданные.Константы.ВалютаУправленческогоУчета)
		 ИЛИ НЕ ПравоДоступа("Изменение", Метаданные.Константы.ВалютаМеждународногоУчета)
		 Тогда
		// Если нет прав на изменение хотя бы одной константы - закрываем доступ на все
		ЭлементыФормы.ВалютаРегламентированногоУчета.ТолькоПросмотр = Истина;
		ЭлементыФормы.ВалютаУправленческогоУчета.ТолькоПросмотр     = Истина;
		ЭлементыФормы.ВалютаМеждународногоУчета.ТолькоПросмотр      = Истина;
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
    СчетчикДокументов = 0;
	Для каждого Док из Метаданные.Документы Цикл
		Если Док.Имя = "УстановкаСоответствияСчетовБУиНУ" или Док.Имя = "УстановкаСоответствияСчетовБУиМСФО" Тогда
			Продолжить;
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + 
			?(Запрос.Текст = "",
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1", 
				" 
				|
				|ОБЪЕДИНИТЬ ВСЕ 
				|
				|ВЫБРАТЬ ПЕРВЫЕ 1 ") + "
				|
				|	Документ" + Док.Имя + ".Ссылка
				|ИЗ
				|	Документ." + Док.Имя + " КАК " + "Документ" + Док.Имя + "
				|";
		
		СчетчикДокументов = СчетчикДокументов + 1;
		
		Если СчетчикДокументов > 3 Тогда
		    СчетчикДокументов = 0;
			Попытка
				РезультатЗапроса = Запрос.Выполнить();
				ЕстьДокументы = НЕ РезультатЗапроса.Пустой();
			Исключение
				ЕстьДокументы = Истина;
			КонецПопытки;
			
			Если ЕстьДокументы Тогда
				Прервать;
			КонецЕсли; 
			Запрос.Текст = "";
		КонецЕсли;
	КонецЦикла;
	
	Если СчетчикДокументов > 0 Тогда
		Попытка
			РезультатЗапроса = Запрос.Выполнить();
			ЕстьДокументы = НЕ РезультатЗапроса.Пустой();
		Исключение
			ЕстьДокументы = Истина;
		КонецПопытки;
	КонецЕсли; 

	ЭлементыФормы.ВалютаРегламентированногоУчета.ТолькоПросмотр = ЕстьДокументы;
	ЭлементыФормы.ВалютаУправленческогоУчета.ТолькоПросмотр     = ЕстьДокументы;
	ЭлементыФормы.ВалютаМеждународногоУчета.ТолькоПросмотр      = ЕстьДокументы;

	Если ЕстьДокументы Тогда
		ЭлементыФормы.ТекстВажнойНадписи.Заголовок = " После ввода документов валюты учета изменять нельзя.";
	Иначе
		ЭлементыФормы.ТекстВажнойНадписи.Заголовок = " Валюты учета можно изменять пока не введены документы.";
	КонецЕсли;

КонецПроцедуры // ПроверкаДоступностиВалютыУчета()


///////////////////////////////////////////////////////////////////////////////
// ПРОЕКТЫ

Процедура ВедениеУчетаЗатратПоПроектамПриИзменении(Элемент)
	
	Если ВедениеУчетаЗатратПоПроектам и не ВедениеУчетаПоПроектам Тогда
		Предупреждение("Чтобы вести учет затрат по проектам,
						|необходимо разрешить вести учет по проектам 
						|(флаг ""Вести учет по проектам"")");
		ВедениеУчетаЗатратПоПроектам = Ложь;
		Возврат;
    КонецЕсли;

	МассивОтключенныхНастроек = новый Массив();
	Если НЕ ВедениеУчетаЗатратПоПроектам И УказаниеПроектовВТабличнойЧастиДокументов Тогда
		УказаниеПроектовВТабличнойЧастиДокументов = ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УказаниеПроектовВТабличнойЧастиДокументовПриИзменении(Элемент)
	Если УказаниеПроектовВТабличнойЧастиДокументов и не ВедениеУчетаЗатратПоПроектам Тогда
		Предупреждение("Чтобы указывать проекты в табличной части документов,
		|необходимо разрешить вести учет затрат по проектам 
		|(флаг ""Вести учет затрат по проектам"")");
		УказаниеПроектовВТабличнойЧастиДокументов = Ложь;
    КонецЕсли;
КонецПроцедуры

Процедура ВедениеУчетаПоПроектамПриИзменении(Элемент)
	
	//Изменение зависимых настроек
	Если Не ВедениеУчетаПоПроектам Тогда
		ИспользоватьВидыРаспределенияПоПроектам = Ложь;
		ВедениеУчетаЗатратПоПроектам = Ложь;
		УказаниеПроектовВТабличнойЧастиДокументов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИспользоватьВидыРаспределенияПоПроектамПриИзменении(Элемент)
	Если ИспользоватьВидыРаспределенияПоПроектам и не ВедениеУчетаПоПроектам Тогда
		Предупреждение("Чтобы использовать виды распределения по проектам,
		|необходимо разрешить вести учет по проектам 
		|(флаг ""Вести учет по проектам"")");
		ИспользоватьВидыРаспределенияПоПроектам = Ложь;
		Возврат;
    КонецЕсли;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ЗАКАЗЫ

Процедура ЗаполнитьДанныеУказаниеЗаказовВТабличнойЧасти()
	Если УказаниеЗаказовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступления Тогда
		ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовПоступления = Истина;
		ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовРеализации = Ложь;
	ИначеЕсли УказаниеЗаказовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации Тогда	
		ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовПоступления = Ложь;
		ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовРеализации = Истина;
	ИначеЕсли УказаниеЗаказовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации Тогда	
		ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовПоступления = Истина;
		ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовРеализации = Истина;
	Иначе
		ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовПоступления = Ложь;
		ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовРеализации = Ложь;
	КонецЕсли;	
КонецПроцедуры

Процедура СформироватьЗначениеКонстантыУказаниеЗаказовВТабличнойЧастиДокументов()
	Если ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовПоступления И НЕ ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовРеализации Тогда
		УказаниеЗаказовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступления;
	ИначеЕсли НЕ ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовПоступления И ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовРеализации Тогда
		УказаниеЗаказовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации;
	ИначеЕсли ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовПоступления И ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовРеализации Тогда
		УказаниеЗаказовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации;
	Иначе
		УказаниеЗаказовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.НеИспользовать;
	КонецЕсли;	
КонецПроцедуры

Процедура ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовПоступленияПриИзменении(Элемент)
	СформироватьЗначениеКонстантыУказаниеЗаказовВТабличнойЧастиДокументов();
КонецПроцедуры

Процедура ФлажокУказыватьЗаказыВТабличнойЧастиДляДокументовРеализацииПриИзменении(Элемент)
	СформироватьЗначениеКонстантыУказаниеЗаказовВТабличнойЧастиДокументов();
КонецПроцедуры

Процедура ИспользоватьУказаниеСерийНоменклатурыПриРезервированииПриИзменении(Элемент)
	
	Если ИспользоватьУказаниеСерийНоменклатурыПриРезервировании И НЕ ИспользоватьСерииНоменклатуры Тогда
		
		Предупреждение("Чтобы указывать серии при резервировании,
			|необходимо использовать серии номенклатуры (раздел ""Учет товаров"")");
		
		ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЗАКАЗЫ НА ПРОИЗВОДСТВО

Процедура ИспользоватьЗаказыНаПроизводствоПриИзменении(Элемент)
	Если не ИспользоватьЗаказыНаПроизводство Тогда
		ИспользоватьПотребностиЗаказовНаПроизводство = ложь;
		СпособЗакрытияПотребностейЗаказовНаПроизводство = неопределено;
	КонецЕсли;
КонецПроцедуры

Процедура ВестиУчетПотребностейЗаказовНаПроизводствоПриИзменении(Элемент)
	Если ИспользоватьПотребностиЗаказовНаПроизводство Тогда
		Если не ИспользоватьЗаказыНаПроизводство Тогда
			ИспользоватьПотребностиЗаказовНаПроизводство = ложь;
			Предупреждение("Сначала необходимо установить параметр ""Использовать заказы на производство""");
		ИначеЕсли не ЗначениеЗаполнено(СпособЗакрытияПотребностейЗаказовНаПроизводство) Тогда
			СпособЗакрытияПотребностейЗаказовНаПроизводство = Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.АвтоматическиПриРаспределении;
		КонецЕсли;
	Иначе
		 СпособЗакрытияПотребностейЗаказовНаПроизводство = неопределено;
	КонецЕсли;
КонецПроцедуры

Процедура СпособЗакрытияПотребностейЗаказовНаПроизводствоЯвноПриИзменении(Элемент)
	Если не ИспользоватьПотребностиЗаказовНаПроизводство Тогда
		СпособЗакрытияПотребностейЗаказовНаПроизводство = неопределено;
		Если ИспользоватьЗаказыНаПроизводство Тогда
			Предупреждение("Сначала необходимо установить признак 'Вести учет потребностей заказов на производство'");
		Иначе
			Предупреждение("Сначала необходимо установить признаки 'Использовать заказы на производство' и 'Вести учет потребностей заказов на производство'");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// УЧЕТ ТОВАРОВ

Процедура ЗаполнитьДанныеУказаниеСкладовВТабличнойЧасти()
	Если УказаниеСкладовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления Тогда
		ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовПоступления = Истина;
		ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовРеализации = Ложь;
	ИначеЕсли УказаниеСкладовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации Тогда	
		ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовПоступления = Ложь;
		ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовРеализации = Истина;
	ИначеЕсли УказаниеСкладовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации Тогда	
		ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовПоступления = Истина;
		ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовРеализации = Истина;
	Иначе
		ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовПоступления = Ложь;
		ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовРеализации = Ложь;
	КонецЕсли;	
КонецПроцедуры

Процедура СформироватьЗначениеКонстантыУказаниеСкладовВТабличнойЧастиДокументов()
	Если ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовПоступления И НЕ ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовРеализации Тогда
		УказаниеСкладовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления;
	ИначеЕсли НЕ ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовПоступления И ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовРеализации Тогда
		УказаниеСкладовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации;
	ИначеЕсли ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовПоступления И ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовРеализации Тогда
		УказаниеСкладовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации;
	Иначе
		УказаниеСкладовВТабличнойЧастиДокументов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.НеИспользовать;
	КонецЕсли;	
КонецПроцедуры

Процедура ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовПоступленияПриИзменении(Элемент)
	СформироватьЗначениеКонстантыУказаниеСкладовВТабличнойЧастиДокументов();
КонецПроцедуры

Процедура ФлажокУказыватьСкладыВТабличнойЧастиДляДокументовРеализацииПриИзменении(Элемент)
	СформироватьЗначениеКонстантыУказаниеСкладовВТабличнойЧастиДокументов();
КонецПроцедуры

Процедура ИспользоватьСерииНоменклатурыПриИзменении(Элемент)
	
	Если НЕ ИспользоватьСерииНоменклатуры 
		И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании Тогда
		
		ТекстВопроса = "Будут также отключены следующие параметры:";
		Если ИспользоватьУказаниеСерийНоменклатурыПриРезервировании Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС + "- Указывать серии при резервировании";
		КонецЕсли;
		ТекстВопроса = ТекстВопроса + Символы.ПС + Символы.ПС + "Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			ИспользоватьСерииНоменклатуры = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Ложь;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ЗАТРАТЫ И СЕБЕСТОИМОСТЬ

Процедура УстановитьДоступностьКомандыДетализацииПУпоОрганизациям()

	ЭлементыФормы.КнопкаНастройкаВеденияУПУПоОрганизациям.Доступность = НЕ ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат;
	
КонецПроцедуры
 

Процедура ПредупредитьОбУхудшенииПроизводительностиПриСписанииПартийПриПроведенииДокументов()
	Предупреждение("Внимание! Формирование движений по партиям при проведении документов может
	|привести к снижению характеристик производительности работы системы.
	|Этот режим не может использоваться при интенсивном, объемном	
	|документообороте и большом количестве пользователей.");	
КонецПроцедуры	

Процедура ЗаполнитьДанныеРасширеннаяАналитика()
	Если ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат Тогда
        //ЭлементыФормы.НадписьРасширеннаяАналитикаДатаНачала.Заголовок = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат);
		ЭлементыФормы.ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат.Заголовок = "Использовать расширенную аналитику учета затрат с:";
		
		Если РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат = Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой
		  ИЛИ РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет Тогда	
			ЭлементыФормы.ДетализацияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Доступность = Истина;
		Иначе
			ЭлементыФормы.ДетализацияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Доступность = Ложь;
		КонецЕсли;	
		
		ЭлементыФормы.СписыватьПартииПриПроведенииДокументов.Доступность = Ложь;
		ЭлементыФормы.СписыватьПартииПриПроведенииДокументовБух.Доступность = Ложь;
		
		ЭлементыФормы.ПереключательСтратегияСписанияПартийПоСтатусам.Доступность = Ложь;
		ЭлементыФормы.ПереключательСтратегияСписанияПартийПоСтатусам2.Доступность = Ложь;
		
		ЭлементыФормы.СписыватьПартииРасходнымОрдером.Доступность = Ложь;
	Иначе
		//ЭлементыФормы.НадписьРасширеннаяАналитикаДатаНачала.Заголовок = "";
		ЭлементыФормы.ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат.Заголовок = "Использовать расширенную аналитику учета затрат";
		ЭлементыФормы.ДетализацияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Доступность = Ложь;
		
		ЭлементыФормы.СписыватьПартииПриПроведенииДокументов.Доступность = Истина;
		ЭлементыФормы.СписыватьПартииПриПроведенииДокументовБух.Доступность = Истина;
		
		ЭлементыФормы.ПереключательСтратегияСписанияПартийПоСтатусам.Доступность = Истина;
		ЭлементыФормы.ПереключательСтратегияСписанияПартийПоСтатусам2.Доступность = Истина;
		
		ЭлементыФормы.СписыватьПартииРасходнымОрдером.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатратПриИзменении(Элемент)
	
	// вернем значение как было
	ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат = мИсходноеЗначениеИспользоватьРасширеннуюАналитикуУчетаЗатрат;
	ЭтаФорма.Модифицированность = ложь;
	
	//откроем форму
	ВызватьФормуИзмененияНастроекУчета("ИспользованиеРасширеннойАналитикиУчетаЗатрат");
	ЭтаФорма.Модифицированность = истина;
	
КонецПроцедуры

Процедура СписыватьПартииПриПроведенииДокументовПриИзменении(Элемент)
	
	Если СписыватьПартииПриПроведенииДокументов Тогда
		ПредупредитьОбУхудшенииПроизводительностиПриСписанииПартийПриПроведенииДокументов();
	КонецЕсли;	
	
КонецПроцедуры

Процедура СписыватьПартииПриПроведенииДокументовБухПриИзменении(Элемент)
	Если СписыватьПартииПриПроведенииДокументовБух Тогда
		ПредупредитьОбУхудшенииПроизводительностиПриСписанииПартийПриПроведенииДокументов();
	КонецЕсли;	
КонецПроцедуры

Процедура ДетализацияРасширеннойАналитикиУчетаНоменклатурыИЗатратНажатие(Элемент)
	Форма = Справочники.НастройкиАналитикиУчета.ПолучитьФормуСписка();
	Форма.Открыть();
КонецПроцедуры

Процедура КнопкаНастройкаВеденияУПУПоОрганизациямНажатие(Элемент)
	
	ФормаРегистра = РегистрыСведений.НастройкаСпособовВеденияУправленческогоПартионногоУчета.ПолучитьФормуСписка();
	ФормаРегистра.Открыть();
	ФормаРегистра.Обновить()	
	
КонецПроцедуры

Процедура ВестиПартионныйУчетПоСкладамРеглПриИзменении(Элемент)
	// вернем значение как было
	ВестиПартионныйУчетПоСкладамРегл = мВестиУчетПоСкладам;
	ЭтаФорма.Модифицированность = ложь;
	//откроем форму
	ВызватьФормуИзмененияНастроекУчета("ИспользованиеПартионногоУчетаПоСкладамРегл");
    ЭтаФорма.Модифицированность = истина;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// НДС

Процедура ЗаполнитьДанныеНДС()
	УказыватьСокращенноеНаименование = ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре <> '00010101';
	ПересчитыватьНДСпоСтавке = ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС <> '00010101';
КонецПроцедуры	

Процедура УстановитьДоступностьПараметровНДС()
	
	ЭлементыФормы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Видимость = УказыватьСокращенноеНаименование;
	ЭлементыФормы.НадписьПрименяетсяС1.Видимость               								= ЭлементыФормы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Видимость;
	
	ЭлементыФормы.НачалоПримененияИсправленныхСчетовФактур.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур);
	ЭлементыФормы.ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС.Доступность = ПересчитыватьНДСпоСтавке;
		
КонецПроцедуры


Процедура ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуреПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре)
		И УказыватьСокращенноеНаименование Тогда
		ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре = '20090609';
	КонецЕсли;
	
КонецПроцедуры

Процедура УказыватьСокращенноеНаименование1ПриИзменении(Элемент)
	
	Если УказыватьСокращенноеНаименование
		И Не ЗначениеЗаполнено(ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре) Тогда
		ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре = '20090609';
	ИначеЕсли Не УказыватьСокращенноеНаименование Тогда
		ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре = '00010101';
	КонецЕсли;
	
	УстановитьДоступностьПараметровНДС();
	
КонецПроцедуры

Процедура НачалоПримененияИсправленныхСчетовФактурПриИзменении(Элемент)
	
	Если НачалоПримененияИсправленныхСчетовФактур < '20120101'
		ИЛИ НачалоПримененияИсправленныхСчетовФактур > '20120401' Тогда
		
		НачалоПримененияИсправленныхСчетовФактур = '20120401';
		
	КонецЕсли;
		
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Налог на прибыль

Процедура ЗаполнитьДанныеНалогаНаПрибыль()
	
	ОцениватьДоходыИРасходыВНУПоКурсуАвансов = ЗначениеЗаполнено(НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов);
    ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ = ЗначениеЗаполнено(ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕ);
    УстановитьДоступностьДатыПостоянныхРазниц();
	
КонецПроцедуры

Процедура УстановитьДоступностьДатыАвансов()

	ЭлементыФормы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Доступность        = ОцениватьДоходыИРасходыВНУПоКурсуАвансов;
	ЭлементыФормы.НадписьНачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Доступность = ОцениватьДоходыИРасходыВНУПоКурсуАвансов;

КонецПроцедуры

Процедура УстановитьДоступностьДатыПостоянныхРазниц()
    	
	ЭлементыФормы.ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕ.Доступность = ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ;

КонецПроцедуры

Процедура ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕПриИзменении(Элемент)
	
	Если ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ Тогда
		ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕ = '20100101';
	Иначе
		ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕ = '00010101';
	КонецЕсли;
	
	УстановитьДоступностьДатыПостоянныхРазниц();

КонецПроцедуры

Процедура ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ1ПриИзменении(Элемент)
		
	Если ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ Тогда
		ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕ = '20100101';
	Иначе
		ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕ = '00010101';
	КонецЕсли;
	
	УстановитьДоступностьДатыПостоянныхРазниц();
	
КонецПроцедуры

Процедура ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕПриИзменении(Элемент)
	
	ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕ = НачалоМесяца(ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕ);

КонецПроцедуры 

Процедура ПоКурсуНаДатуАвансаПриИзменении(Элемент)
	
	Если ОцениватьДоходыИРасходыВНУПоКурсуАвансов Тогда
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '20100101';
	Иначе
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '00010101';
	КонецЕсли;
	
	УстановитьДоступностьДатыАвансов();

КонецПроцедуры


Процедура ПоКурсуНаДатуАванса1ПриИзменении(Элемент)
		УстановитьДоступностьДатыАвансов();
	Если ОцениватьДоходыИРасходыВНУПоКурсуАвансов Тогда
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '20100101';
	Иначе
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '00010101';
	КонецЕсли;
КонецПроцедуры

Процедура НачалоОценкиДоходовИРасходовВНУПоКурсуАвансовПриИзменении(Элемент)
	
	Если НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов < '20100101' Тогда
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = '20100101';
	Иначе
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = НачалоМесяца(НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов);
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// РАСЧЕТЫ С ПЕРСОНАЛОМ

Процедура ПереключательВестиРеглУчетРасчетовСПерсоналомСводноПриИзменении(Элемент)
	// вернем значение как было
	ВестиРеглУчетРасчетовСПерсоналомСводно = мВестиРеглУчетРасчетовСПерсоналомСводно;
	ЭтаФорма.Модифицированность = ложь;
	//откроем форму
	ВызватьФормуИзмененияНастроекУчета("ВестиРеглУчетРасчетовСПерсоналомСводно");
    ЭтаФорма.Модифицированность = истина;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()

	ЗаполнитьСписокРазделов();
	
	ЗаполнитьДанныеРасширеннаяАналитика();
	ЗаполнитьДанныеУказаниеЗаказовВТабличнойЧасти();
	ЗаполнитьДанныеУказаниеСкладовВТабличнойЧасти();
	ЗаполнитьДанныеНДС();
	ЗаполнитьДанныеНалогаНаПрибыль();
	
	ПроверкаДоступностиВалютыУчета();
	
	УстановитьДоступностьПараметровНДС();
	УстановитьДоступностьДатыАвансов();
    
	Этаформа.Модифицированность = Ложь;

	ПроверитьСогласованностьПараметров();
	
	УстановитьВидимостьРазделов();
	
	ЗаполнитьИсходныеЗначенияКонстант();
	
	УстановитьДоступностьКомандыДетализацииПУпоОрганизациям();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	ПроверитьПодключениеОбработчикаОжидания();

	Если ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат Тогда
		СброситьФлагиСписыватьпартииПриПроведенииДокументов();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
		
	Если НЕ ПроверитьЗаполнениеПараметров()
		ИЛИ НЕ ПроверитьСогласованностьПараметров() Тогда
		
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	МодифицированностьПередЗаписью = Модифицированность;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	Если МодифицированностьПередЗаписью Тогда
		СообщитьОбИзмененииПараметровУчета();
		МодифицированностьПередЗаписью = Ложь;
	КонецЕсли;
	
	ЗаполнитьИсходныеЗначенияКонстант();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//обновление данных формы при изменении значений настроек в других формах
	Если ИмяСобытия = "ОбновитьДанныеИспользованиеРасширеннойАналитикиУчетаЗатрат" Тогда
		ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат = Константы.ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат.Получить();
		ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат = Константы.ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Получить();
		РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат = Константы.РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Получить();
		ЭтаФорма.Обновить();
		Если ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат Тогда
			СброситьФлагиСписыватьпартииПриПроведенииДокументов();
		КонецЕсли;	
		ЗаполнитьДанныеРасширеннаяАналитика();
		мИсходноеЗначениеИспользоватьРасширеннуюАналитикуУчетаЗатрат = ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат;
		УстановитьДоступностьКомандыДетализацииПУпоОрганизациям();
	ИначеЕсли ИмяСобытия = "ИспользованиеПартионногоУчетаПоСкладамРегл" Тогда
		ВестиПартионныйУчетПоСкладамРегл = Константы.ВестиПартионныйУчетПоСкладамРегл.Получить();
		ЭтаФорма.Обновить();
		мВестиУчетПоСкладам = ВестиПартионныйУчетПоСкладамРегл;
	ИначеЕсли ИмяСобытия = "ВестиРеглУчетРасчетовСПерсоналомСводно" Тогда
		ВестиРеглУчетРасчетовСПерсоналомСводно = Константы.ВестиРеглУчетРасчетовСПерсоналомСводно.Получить();
		ЭтаФорма.Обновить();
		мВестиРеглУчетРасчетовСПерсоналомСводно = ВестиРеглУчетРасчетовСПерсоналомСводно;
	КонецЕсли;
	
	УстановитьВидимостьРазделов();
	
КонецПроцедуры

Процедура ПересчитыватьНДСпоСтавкеПриИзменении(Элемент)
	
	Если ПересчитыватьНДСпоСтавке 
		И ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС = '00010101' Тогда
		
		ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС = '19800101';
		
	ИначеЕсли (НЕ ПересчитыватьНДСпоСтавке)
		И ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС <> '00010101' Тогда
		
		ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС = '00010101';
		
	КонецЕсли;
	
	УстановитьДоступностьПараметровНДС();
	
КонецПроцедуры