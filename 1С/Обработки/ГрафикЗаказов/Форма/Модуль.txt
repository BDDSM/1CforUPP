////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем мДействияРасшифровка;
Перем СтруктураНастроек;
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
// 

//Обработчик события формы ПриОткрытии
Процедура ПриОткрытии()
	
	ЗаполнитьПараметрыПостроителей();
	
	//чтение настройки
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
    Если УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Тогда
			
		мТекущаяНастройка = СтруктураНастройки;
		ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
	Иначе
		//по умолчанию выходные дни отображаем по производственному календарю
		ИсточникСведенийОВыходныхДнях = 1;
	КонецЕсли;
	УстановитьДоступность();
	СформироватьЗаголовокФормы();
	УстановитьВидимостьОтборов();
КонецПроцедуры

//Обработчик события формы ПриЗакрытии
Процедура ПриЗакрытии()
	Перем СохраненнаяНастройка;
	
	Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.НаименованиеНастройки <> Неопределено И мТекущаяНастройка.Свойство("СохранятьАвтоматически") И мТекущаяНастройка.СохранятьАвтоматически Тогда
	
		СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
		СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
		СтруктураНастройки.Вставить("НаименованиеНастройки", мТекущаяНастройка.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", мТекущаяНастройка.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", мТекущаяНастройка.СохранятьАвтоматически);
		
		УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки);

	КонецЕсли;

КонецПроцедуры

//Обработчик события формы ПередЗакрытием
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если флРежимРедактирования и мТаблицаИзменений.Количество()>0 Тогда
		ТекстИнформации = "Внимание! Вы изменяли даты запуска и даты исполнения заказов и не сохранили изменения.
		|При закрытии формы обработки не сохраненные данные будут потеряны.";
		Результат = ОткрытьФормуОтображенияИзменений(истина, ТекстИнформации);
		Если Результат = неопределено Тогда
			//отмена
			Отказ = истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Обработчик нажатия кнопки НастройкаПериода
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	мНастройкаПериода.УстановитьПериод(ДатаНачала, ?(ДатаОкончания = Дата('00010101000000'), ДатаОкончания, КонецДня(ДатаОкончания)));

	Если мНастройкаПериода.Редактировать() Тогда
		ДатаНачала = мНастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончания = мНастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
Конецпроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ГрафикЗаказов_ЗакрытаФормаНастройки" Тогда
		Если Параметр<>истина Тогда
			//восстановим настройки обратно
			ВосстановитьРеквизитыОтчетаИзСтруктуры(СтруктураНастроек);
		КонецЕсли;

		УстановитьДоступность();
		СформироватьЗаголовокФормы();
		Если флРежимРедактирования и мТаблицаИзменений.Количество()>0 тогда
			ЭтаФорма.Модифицированность = истина;
		Иначе
			ЭтаФорма.Модифицированность = ложь;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ГрафикЗаказов_ЗакрытаФормаЗаказа" Тогда
		Если не флОбновлятьДинамически Тогда
			Возврат;
		 КонецЕсли;

		Если не ЗначениеЗаполнено(Параметр) Тогда
			Возврат;
		КонецЕсли;
		Если масОтображенныеЗаказы.Найти(Параметр)=неопределено Тогда
			Возврат;
		КонецЕсли;
			 
		 //после закрытия формы перечитаем данные по документу - возможно, документ был изменен
		 Если не Параметр.Проведен Тогда
			 ОбщегоНазначения.Сообщение("Изменен статус проведения документа. Для отражения изменений необходимо заново сформировать график");
			 Возврат;
		 КонецЕсли;
		 Диаграмма = ЭлементыФормы.ДиаграммаГанта;
         Серия = Диаграмма.Серии[0];
		 Точка = Диаграмма.УстановитьТочку(Параметр);
		 ПерерисоватьИнтервал(Параметр, Диаграмма, Точка);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
// 

// Обработчик нажатия кнопки Сформировать.
//
Процедура КнопкаСформироватьНажатие(Кнопка)
	Если ДатаНачала = Дата('00010101000000') или ДатаОкончания = Дата('00010101000000') Тогда
		Предупреждение("Не выбран период формирования графика");
		Если ДатаНачала = Дата('00010101000000') Тогда
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДатаНачала;
		Иначе
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДатаОкончания;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если ИсточникСведенийОВыходныхДнях = 2 И НЕ ЗначениеЗаполнено(График) Тогда
		Предупреждение("Не выбран график для отображения рабочих дней");
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.График;
		Возврат;
	КонецЕсли;
	
	Если флРежимРедактирования и мТаблицаИзменений.Количество()>0 Тогда
		ТекстИнформации = "Внимание! Вы изменяли даты запуска и даты исполнения заказов и не сохранили изменения.
		|При формировании графика не сохраненные данные будут потеряны.";
		Результат = ОткрытьФормуОтображенияИзменений(истина, ТекстИнформации);
		Если Результат = неопределено Тогда
			//отмена
			Возврат;
		Иначе
			//отказ от изменений либо запись изменений
			мТаблицаИзменений.Очистить();
			УбратьЖирныйШрифтТочекДиаграммы(ЭлементыФормы.ДиаграммаГанта);
			ЭтаФорма.Модифицированность = ложь;
			УстановитьДоступность();
		КонецЕсли;
	КонецЕсли;
	СформироватьДиаграмму(ЭлементыФормы.ДиаграммаГанта);
	
КонецПроцедуры // КнопкаСформироватьНажатие(Кнопка)

// Обработчик нажатия кнопки Печать.
Процедура КоманднаяПанельФормыПечать(Кнопка)
	Если флРежимРедактирования и мТаблицаИзменений.Количество()>0 Тогда
		ТекстИнформации = "Внимание! Вы изменяли даты запуска и даты исполнения заказов и не сохранили изменения.
		|При печати не сохраненные данные будут потеряны.";
		Результат = ОткрытьФормуОтображенияИзменений(истина, ТекстИнформации);
		Если Результат = неопределено Тогда
			//отмена
			Возврат;
		Иначе
			//отказ от изменений либо запись изменений
			мТаблицаИзменений.Очистить();
			УбратьЖирныйШрифтТочекДиаграммы(ЭлементыФормы.ДиаграммаГанта);
			ЭтаФорма.Модифицированность = ложь;
			УстановитьДоступность();
			Если Результат.СохранениеВыполнено = ложь Тогда
				//отмена изменений - надо переформировать диаграмму
				СформироватьДиаграмму(ЭлементыФормы.ДиаграммаГанта);
			Иначе
				//перерисуем отрезки которые не были сохранены
				Если Результат.масНесохраненныеЗаказы.Количество()>0 Тогда
					ПерерисоватьГраницыНесохраненныхЗаказов(Результат.масНесохраненныеЗаказы);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	ТабДокумент = Печать(ЭлементыФормы.ДиаграммаГанта);
	ТабДокумент.Показать("График заказов");
КонецПроцедуры


// Обработчик события ПриОкончанииРедактированияИнтервала диаграммы Ганта.
// Вызывается при манипуляциях с элементами диаграммы - перетаскиванием периодов
Процедура ДиаграммаГантаПриОкончанииРедактированияИнтервала(Элемент, Интервал, Отмена)
	Если не флРежимРедактирования Тогда
		ТекстВопроса = "Изменять даты запуска и исполнения заказов можно если разрешены изменения."+
			Символы.ПС+"Разрешить изменения?";
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			флРежимРедактирования = истина;
			СформироватьЗаголовокФормы();
		Иначе
			Отмена = истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьИзменениеИнтервала(Интервал);
	ЭтаФорма.Модифицированность = истина;
	УстановитьДоступность();
КонецПроцедуры // ДиаграммаГантаПриОкончанииРедактированияИнтервала(Элемент, Интервал, Отмена)

// Обработчик события выбор диаграммы Ганта.
// 
Процедура ДиаграммаГантаВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
	СтандартнаяОбработка = ложь;
	// Определяем тип объекта, для которого произошло событие выбора.
	Точка = Неопределено;
	флРасшифровка = ложь;

	Если ТипЗнч(Значения) = Тип("ЗначениеДиаграммыГанта") Тогда		
		Точка = Значения.Точка;
		Действие = "ОткрытьФорму";
	ИначеЕсли ТипЗнч(Значения) = Тип("ТочкаДиаграммыГанта") Тогда				
		Точка = Значения;
		флРасшифровка = истина;
	ИначеЕсли ТипЗнч(Значения) = Тип("Массив") Тогда //возможно это щелчок на отрезке диаграммы
		Если Значения.Количество()>0 Тогда
			Если ТипЗнч(Значения[0])= Тип("ЗначениеДиаграммыГанта") Тогда
				Точка = Значения[0].Точка;
				Действие = "ОткрытьФорму";
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;		
	
	Если Точка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если флРасшифровка Тогда
		ВыбЗначение = мДействияРасшифровка.ВыбратьЭлемент(""+ПолучитьПредставлениеЗаказа(Точка.Значение,ТипЗнч(Точка.Значение)));
		Если ВыбЗначение=неопределено Тогда
			Возврат;
		КонецЕсли;
		Действие = ВыбЗначение.Значение;
	КонецЕсли;
	
	Если Действие = "ОткрытьФорму" Тогда
		ОткрытьФормуЗаказа(Точка);
	ИначеЕсли Действие = "СтруктураПодчиненности" Тогда
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Точка.Значение);
	ИначеЕсли Действие = "АнализЗаказа" Тогда
		ДокСсылка = Точка.Значение;
		Если ТипЗнч(ДокССылка)=Тип("ДокументССылка.ЗаказНаПроизводство") Тогда
			АнализЗаказа = Отчеты.АнализЗаказаНаПроизводство.Создать();
			АнализЗаказа.ЗапретВыбораЗаказа = Истина;
			АнализЗаказа.Заказ = ДокСсылка;
			АнализЗаказаФорма = АнализЗаказа.ПолучитьФорму();
			
			АнализЗаказа.ОбновитьОтчет(АнализЗаказаФорма.ЭлементыФормы.ТабДокумент);
			АнализЗаказаФорма.Открыть();
		Иначе
			УправлениеЗаказами.СформироватьОтчетАнализЗаказа(ДокСсылка,ложь, истина);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры // ДиаграммаГантаВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)

Процедура ПерерисоватьГраницыНесохраненныхЗаказов(масЗаказы)
	Диаграмма = ЭлементыФормы.ДиаграммаГанта;
	Диаграмма.Обновление = ложь;
	Серия = Диаграмма.Серии[0];

	Для каждого Объект из масЗаказы Цикл
		//находим точку диаграммы
		Точка = Диаграмма.УстановитьТочку(Объект);
		
		Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
		Если Значение.Количество()>0 Тогда
			ДанныеИнтервала = ЗначенияРеквизитовДляГраницИнтервалов(Объект);
			Для каждого Интервал из Значение цикл
				ЗаполнитьПараметрыИнтервала(Интервал,Значение,ДанныеИнтервала.ДатаНачала,ДанныеИнтервала.ДатаОкончания,Объект,ДанныеИнтервала.флЗаказВыполнен,ДанныеИнтервала.ДатаВыполнения);
				//обновляем цвета связей
				Для каждого Связь из Интервал цикл
					Если Связь.Начало.Конец <= Связь.Конец.Начало И НЕ Связь.Начало.Значение.Цвет=ЦветПросроченного 
						Тогда
						Связь.Цвет = WebЦвета.Синий;
					Иначе			
						Связь.Цвет = WebЦвета.Красный;
					КонецЕсли;	

				КонецЦикла;
				
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Диаграмма.Обновление = истина;

КонецПроцедуры


//Обработчик события нажатия на кнопку СохранитьИзменения
Процедура КоманднаяПанельФормыСохранитьИзменения(Кнопка)
	Если НЕ (флРежимРедактирования и мТаблицаИзменений.Количество()>0) Тогда
		Предупреждение("Изменения не выполнялись");
		Возврат;
	КонецЕсли;
	ТекстИнформации = "Сохранение изменений дат запуска и дат исполнения заказов";
	Результат = ОткрытьФормуОтображенияИзменений(ложь, ТекстИнформации);
	Если Результат<>Неопределено Тогда
		Если Результат.СохранениеВыполнено Тогда
			//очищаем таблицу
			мТаблицаИзменений.Очистить();
			ЭтаФорма.Модифицированность = ложь;
			УбратьЖирныйШрифтТочекДиаграммы(ЭлементыФормы.ДиаграммаГанта);
			//перерисуем отрезки которые не были сохранены
			Если Результат.масНесохраненныеЗаказы.Количество()>0 Тогда
				ПерерисоватьГраницыНесохраненныхЗаказов(Результат.масНесохраненныеЗаказы);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры

//Обработчик события нажатия на кнопку СохранитьЗначения
Процедура КоманднаяПанельФормыСохранитьЗначения(Кнопка)
	СохранитьНастройки();
КонецПроцедуры

//Обработчик события нажатия на кнопку ВосстановитьЗначения
Процедура КоманднаяПанельФормыВосстановитьЗначения(Кнопка)
	ВосстановитьНастройки();
	УстановитьДоступность();
	УстановитьВидимостьОтборов();
КонецПроцедуры

// Обработчик нажатия кнопки ОтменитьИзменения.
Процедура КоманднаяПанельФормыОтменитьИзменения(Кнопка)
	мТаблицаИзменений.Очистить();
	ЭтаФорма.Модифицированность = ложь;
	УбратьЖирныйШрифтТочекДиаграммы(ЭлементыФормы.ДиаграммаГанта);
	УстановитьДоступность();
	СформироватьДиаграмму(ЭлементыФормы.ДиаграммаГанта);
КонецПроцедуры

// Обработчик нажатия кнопки ВидимостьОтборы
Процедура КоманднаяПанельФормыВидимостьОтборы(Кнопка)
	флОтборыВидимы = не флОтборыВидимы;
	УстановитьВидимостьОтборов();
КонецПроцедуры

// Обработчик нажатия кнопки Настройка
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	СтруктураНастроек = СохранитьРеквизитыОтчетаВСтруктуру();
	ФормаНастройка = ПолучитьФорму("ФормаНастройки",ЭтаФорма);
	ФормаНастройка.Открыть();	
КонецПроцедуры

Функция СохранитьРеквизитыОтчетаВСтруктуру()
	струНастройки = новый Структура();
	Для каждого Реквизит из Метаданные().Реквизиты цикл
		Если лев(нрег(Реквизит.Имя),11)="построитель" Тогда
			Продолжить;
		КонецЕсли;
		
		струНастройки.Вставить(Реквизит.Имя,ЭтотОбъект[Реквизит.Имя]);
	КонецЦикла;
	струНастройки.Вставить("НастройкиПостроителя_ПостроительОтчета",ПостроительОтчета.ПолучитьНастройки(истина,ложь,ложь,ложь,ложь));
    струНастройки.Вставить("НастройкиПостроителя_ПоляЗаказовНаПроизводство",ПостроительОтчета_ПоляЗаказовНаПроизводство.ПолучитьНастройки(ложь,ложь,ложь,истина,ложь));
    струНастройки.Вставить("НастройкиПостроителя_ПоляЗаказовПокупателей",ПостроительОтчета_ПоляЗаказовПокупателей.ПолучитьНастройки(ложь,ложь,ложь,истина,ложь));
    струНастройки.Вставить("НастройкиПостроителя_ПоляЗаказовПоставщикам",ПостроительОтчета_ПоляЗаказовПоставщикам.ПолучитьНастройки(ложь,ложь,ложь,истина,ложь));
    струНастройки.Вставить("НастройкиПостроителя_ПоляВнутреннихЗаказов",ПостроительОтчета_ПоляВнутреннихЗаказов.ПолучитьНастройки(ложь,ложь,ложь,истина,ложь));

	Возврат струНастройки;
КонецФункции

Процедура ВосстановитьРеквизитыОтчетаИзСтруктуры(струНастройки)
	Для каждого Реквизит из Метаданные().Реквизиты цикл
		Если лев(нрег(Реквизит.Имя),11)="построитель" Тогда
			Продолжить;
		КонецЕсли;

		ЭтотОбъект[Реквизит.Имя] = струНастройки[Реквизит.Имя];
	КонецЦикла;
	
	ПостроительОтчета.УстановитьНастройки(струНастройки.НастройкиПостроителя_ПостроительОтчета,истина,ложь,ложь,ложь,ложь);
	ПостроительОтчета_ПоляЗаказовНаПроизводство.УстановитьНастройки(струНастройки.НастройкиПостроителя_ПоляЗаказовНаПроизводство,ложь,ложь,ложь,истина,ложь);
	ПостроительОтчета_ПоляЗаказовПокупателей.УстановитьНастройки(струНастройки.НастройкиПостроителя_ПоляЗаказовПокупателей,ложь,ложь,ложь,истина,ложь);
	ПостроительОтчета_ПоляЗаказовПоставщикам.УстановитьНастройки(струНастройки.НастройкиПостроителя_ПоляЗаказовПоставщикам,ложь,ложь,ложь,истина,ложь);
    ПостроительОтчета_ПоляВнутреннихЗаказов.УстановитьНастройки(струНастройки.НастройкиПостроителя_ПоляВнутреннихЗаказов,ложь,ложь,ложь,истина,ложь);

КонецПроцедуры

Процедура КоманднаяПанельФормыДиагностика(Кнопка)
	Если масОтображенныеЗаказы = неопределено Тогда
		Предупреждение("Сначала необходимо сформировать график");
		Возврат;
	КонецЕсли;
	
	Если флРежимРедактирования и мТаблицаИзменений.Количество()>0 Тогда
		ТекстВопроса = "На графике имеются несохраненные изменения. Они не будут учтены при диагностике. Продолжить?";
		Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ТабРезультат = ПолучитьРезультатДиагностики();
	Если ТабРезультат.Количество()=0 Тогда
		ОбщегоНазначения.Сообщение("Ошибок не обнаружено");
		Возврат;
	КонецЕсли;
	
	ВывестиРезультатДиагностикиВТабличныйДокумент(ТабРезультат);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВНУТРЕННИЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

//Функция открывает вспомогательную форму, в которой отображаются внесенные изменения
//Возвращаемые значения:
//	Истина 	- изменения сохранены
//	Ложь 	- указание пользователя "не сохранять изменения"
//	Неопределено - отмена выполнения текущего действия 
Функция ОткрытьФормуОтображенияИзменений(флРежимОтказаОтСохранения, ТекстИнформации)
	ФормаОтображенияИзменений = ПолучитьФорму("ФормаОтображениеИзменений");
	ФормаОтображенияИзменений.мТаблицаИзменений = мТаблицаИзменений;
	ФормаОтображенияИзменений.ДопПараметры = новый Структура("флРежимОтказаОтСохранения,ТекстИнформации",флРежимОтказаОтСохранения,ТекстИнформации);

	Возврат ФормаОтображенияИзменений.ОткрытьМодально(600);

КонецФункции

//Процедура открывает форму заказа, соответствующего точке диаграммы
Процедура ОткрытьФормуЗаказа(Точка)
	Диаграмма = ЭлементыФормы.ДиаграммаГанта;

	Объект = Точка.Значение;
	мСтатусПроведения = Объект.Проведен;
	Форма = Объект.ПолучитьФорму("ФормаДокумента");
	
	//если документ уже изменен, надо пометить модифицированность формы
	СтрокаИзменения = неопределено;
	ТипДокумента = ТипЗнч(Объект);
	Если флРежимРедактирования Тогда
		СтрокаИзменения = мТаблицаИзменений.Найти(Объект,"Заказ");
		Если СтрокаИзменения<>неопределено Тогда
			Если ТипДокумента = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
				Форма.ДатаЗапуска = СтрокаИзменения.ДатаЗапуска;
				Форма.ДатаИсполнения = СтрокаИзменения.ДатаИсполнения;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипДокумента = Тип("ДокументСсылка.ВнутреннийЗаказ")  Тогда
				Форма.ДатаОтгрузки = СтрокаИзменения.ДатаИсполнения;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Форма.ДатаПоступления = СтрокаИзменения.ДатаИсполнения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    Если СтрокаИзменения <> неопределено Тогда
		Форма.Модифицированность = истина;
	КонецЕсли;
	Если Форма.ЭлементыФормы.Найти("РамкаЭпицентр")<>неопределено Тогда
		Форма.ЭлементыФормы.РамкаЭпицентр.Видимость = истина;
	КонецЕсли;

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
	Иначе	
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

//Процедура формирует заголовок формы отчета
Процедура СформироватьЗаголовокФормы()
	Если флРежимРедактирования Тогда
		ЭтаФорма.Заголовок = "График заказов. Разрешены изменения";
	Иначе
		ЭтаФорма.Заголовок = "График заказов. Только просмотр";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступность()
	флДоступностьСохранить = ложь;
	Если флРежимРедактирования И мТаблицаИзменений.Количество()>0 Тогда
		флДоступностьСохранить = истина;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.СохранитьИзменения.Доступность = флДоступностьСохранить;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтменитьИзменения.Доступность = флДоступностьСохранить;
КонецПроцедуры

Процедура УстановитьВидимостьОтборов()
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ВидимостьОтборы.Пометка = флОтборыВидимы;

	Если флОтборыВидимы Тогда
   		ЭлементыФормы.ПанельОтборы.Свертка       = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельОтборы.Свертка       = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
КонецПроцедуры


мДействияРасшифровка = новый СписокЗначений;
мДействияРасшифровка.Добавить("ОткрытьФорму", "Открыть форму заказа...");
мДействияРасшифровка.Добавить("СтруктураПодчиненности", "Структура подчиненности...");
мДействияРасшифровка.Добавить("АнализЗаказа", "Анализ заказа...");

мТаблицаИзменений = новый ТаблицаЗначений;
мТаблицаИзменений.Колонки.Добавить("Заказ");
мТаблицаИзменений.Колонки.Добавить("ПредставлениеЗаказа");
мТаблицаИзменений.Колонки.Добавить("ДатаЗапуска");
мТаблицаИзменений.Колонки.Добавить("ДатаИсполнения");
мТаблицаИзменений.Индексы.Добавить("Заказ");