////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА ОСТАТКИ ОТПУСКОВ
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ОстатокОтпускаСотрудникаНаДату(Знач Сотрудник, Знач ДатаОстатков = '00010101', Знач ЭтоРасчетПриУвольнении = Ложь, ПорядокРасчетаОсновногоОтпуска = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Строка = ТаблицаДанных.Добавить();
	Строка.Сотрудник							= Сотрудник;
	Строка.ДатаОстатков							= НачалоДня(ДатаОстатков);
	Строка.ЭтоРасчетПриУвольнении				= ЭтоРасчетПриУвольнении;
	Если ЭтоРасчетПриУвольнении Тогда
		Строка.ПорядокРасчетаОсновногоОтпуска	= ПорядокРасчетаОсновногоОтпуска;
	КонецЕсли;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных)[0];
	
	ОстаткиВРазрезеРабочихЛетИВидовОтпусков = Новый Массив;
	Для Каждого РабочийГод Из Результат.ДанныеРасчета Цикл
		Если РабочийГод.ОсталосьДнейОтпускаСУчетомВсехОтпусков = 0 Тогда
			Продолжить;
		КонецЕсли;
		ОстаткиВРазрезеРабочихЛетИВидовОтпусков.Добавить(Новый Структура("ВидЕжегодногоОтпуска, ОсталосьДней, РабочийГодС, РабочийГодПо, ПоследнийРабочийГод",
			РабочийГод.ВидЕжегодногоОтпуска, РабочийГод.ОсталосьДнейОтпускаСУчетомВсехОтпусков, РабочийГод.ДатаНачала, РабочийГод.ДатаОкончания, РабочийГод.ПоследнийРабочийГод));
	КонецЦикла;
	
	Возврат Новый Структура("ОстатокНаДату, РабочийГодС, РабочийГодПо, Примечание, ОстаткиВРазрезеВидовОтпусков, ОстаткиВРазрезеРабочихЛетИВидовОтпусков",
		Результат.ОстатокНаДату, Результат.РабочийГодС, Результат.РабочийГодПо, Результат.Примечание, Результат.ОстатокНаДатуПоВидамЕжегодныхОтпусков, ОстаткиВРазрезеРабочихЛетИВидовОтпусков);
	
КонецФункции

Функция ОстатокОтпускаСпискаСотрудниковНаДату(Знач МассивСотрудников, Знач ДатаОстатков = '00010101') Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник				= Сотрудник;
		Строка.ДатаОстатков				= НачалоДня(ДатаОстатков);
	КонецЦикла;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных);
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Сотрудник");
	ТаблицаСведений.Колонки.Добавить("ОстатокНаДату");
	ТаблицаСведений.Колонки.Добавить("РабочийГодС");
	ТаблицаСведений.Колонки.Добавить("РабочийГодПо");
	ТаблицаСведений.Колонки.Добавить("Примечание");
	ТаблицаСведений.Колонки.Добавить("ОстаткиВРазрезеВидовОтпусков");
	ТаблицаСведений.Колонки.Добавить("ОстаткиВРазрезеРабочихЛетИВидовОтпусков");
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		ОстаткиВРазрезеРабочихЛетИВидовОтпусков = Новый Массив;
		Для Каждого РабочийГод Из СтрокаРезультата.ДанныеРасчета Цикл
			Если РабочийГод.ОсталосьДнейОтпускаСУчетомВсехОтпусков = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОстаткиВРазрезеРабочихЛетИВидовОтпусков.Добавить(Новый Структура("ВидЕжегодногоОтпуска, ОсталосьДней, РабочийГодС, РабочийГодПо, ПоследнийРабочийГод",
				РабочийГод.ВидЕжегодногоОтпуска, РабочийГод.ОсталосьДнейОтпускаСУчетомВсехОтпусков, РабочийГод.ДатаНачала, РабочийГод.ДатаОкончания, РабочийГод.ПоследнийРабочийГод));
		КонецЦикла;
		
		Строка = ТаблицаСведений.Добавить();
		Строка.Сотрудник								= СтрокаРезультата.Сотрудник;
		Строка.ОстатокНаДату							= СтрокаРезультата.ОстатокНаДату;
		Строка.РабочийГодС								= СтрокаРезультата.РабочийГодС;
		Строка.РабочийГодПо								= СтрокаРезультата.РабочийГодПо;
		Строка.Примечание								= СтрокаРезультата.Примечание;
		Строка.ОстаткиВРазрезеВидовОтпусков				= СтрокаРезультата.ОстатокНаДатуПоВидамЕжегодныхОтпусков;
		Строка.ОстаткиВРазрезеРабочихЛетИВидовОтпусков	= ОстаткиВРазрезеРабочихЛетИВидовОтпусков;
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция СведенияОбОтпускахСпискаСотрудников(Знач ТаблицаОтпусков, Знач ТекущийРегистратор = Неопределено, Знач ЭтоЗапланированныйОтпуск = Ложь, Знач ДатаДокумента = '00010101') Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Для Каждого Отпуск Из ТаблицаОтпусков Цикл
		Если Отпуск.Сотрудник.Пустая() Или Не ЗначениеЗаполнено(Отпуск.ДатаНачала) Или Не ЗначениеЗаполнено(Отпуск.ДатаОкончания) Или Отпуск.ДатаНачала > Отпуск.ДатаОкончания Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник					= Отпуск.Сотрудник;
		Строка.ДатаОстатков					= НачалоДня(Отпуск.ДатаОкончания);
		
		Строка.ДатаНачала					= Отпуск.ДатаНачала;
		Строка.ДатаОкончания				= Отпуск.ДатаОкончания;
		Строка.ТекущийРегистратор			= ТекущийРегистратор;
		
		Строка.ЭтоЗапланированныйОтпуск		= ЭтоЗапланированныйОтпуск;
		Строка.ДатаДокумента				= НачалоДня(ДатаДокумента);
		
		Если ТипЗнч(ТаблицаОтпусков) = Тип("ТаблицаЗначений") И ТаблицаОтпусков.Колонки.Найти("ВидЕжегодногоОтпуска") <> Неопределено
			Или Метаданные.НайтиПоТипу(Тип(ТаблицаОтпусков)) <> Неопределено И Метаданные.НайтиПоТипу(Тип(ТаблицаОтпусков)).Реквизиты.Найти("ВидЕжегодногоОтпуска") <> Неопределено Тогда
			Строка.ВидЕжегодногоОтпуска		= Отпуск.ВидЕжегодногоОтпуска;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Сотрудник");
	ТаблицаСведений.Колонки.Добавить("ДатаНачала");
	ТаблицаСведений.Колонки.Добавить("ДатаОкончания");
	ТаблицаСведений.Колонки.Добавить("РабочийГодС");
	ТаблицаСведений.Колонки.Добавить("РабочийГодПо");
	ТаблицаСведений.Колонки.Добавить("Примечание");
	ТаблицаСведений.Колонки.Добавить("ВидЕжегодногоОтпуска");
	ТаблицаСведений.Колонки.Добавить("КоличествоДнейВсего");
	ТаблицаСведений.Колонки.Добавить("КоличествоДнейПрошлыхЛет");
	ТаблицаСведений.Колонки.Добавить("КоличествоДнейАвансом");
	ТаблицаСведений.Колонки.Добавить("ОстаткиВРазрезеВидовОтпусков");
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат ТаблицаСведений;
	КонецЕсли;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных);
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Строка = ТаблицаСведений.Добавить();
		Строка.Сотрудник					= СтрокаРезультата.Сотрудник;
		Строка.ДатаНачала					= СтрокаРезультата.ДатаНачалаПериода;
		Строка.ДатаОкончания				= СтрокаРезультата.ДатаОкончанияПериода;
		Строка.РабочийГодС					= СтрокаРезультата.РабочийГодПериодаС;
		Строка.РабочийГодПо					= СтрокаРезультата.РабочийГодПериодаПо;
		Строка.Примечание					= СтрокаРезультата.ПримечаниеПериода;
		Строка.ВидЕжегодногоОтпуска			= СтрокаРезультата.ВидЕжегодногоОтпускаПериода;
		Строка.КоличествоДнейВсего			= СтрокаРезультата.КоличествоКалендарныхДнейВПериоде;
		Строка.КоличествоДнейПрошлыхЛет		= СтрокаРезультата.ПериодомИспользованоДнейПрошлыхЛет;
		Строка.КоличествоДнейАвансом		= СтрокаРезультата.ПериодомИспользованоДнейАвансом;
		Строка.ОстаткиВРазрезеВидовОтпусков	= СтрокаРезультата.ОстатокНаДатуПоВидамЕжегодныхОтпусков;
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция РабочийГодПериодаОтпуска(Знач Сотрудник, Знач ДатаНачала, Знач ДатаОкончания, Знач ТекущийРегистратор, Знач ПорядокРасчетаОсновногоОтпуска, Знач ИсключитьОсновнойОтпуск, Знач ДополнительныйОтпуск) Экспорт
	
	Если ПорядокРасчетаОсновногоОтпуска = Неопределено Тогда
		ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПустаяСсылка();
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Строка = ТаблицаДанных.Добавить();
	Строка.Сотрудник						= Сотрудник;
	Строка.ДатаОстатков						= НачалоДня(ДатаОкончания);
	
	Строка.ДатаНачала						= ДатаНачала;
	Строка.ДатаОкончания					= ДатаОкончания;
	Строка.ТекущийРегистратор				= ТекущийРегистратор;
	Строка.ПорядокРасчетаОсновногоОтпуска	= ПорядокРасчетаОсновногоОтпуска;
	Строка.ИсключитьОсновнойОтпуск			= ИсключитьОсновнойОтпуск;
	Строка.ДополнительныйОтпуск				= ДополнительныйОтпуск;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных)[0];
	
	Возврат Новый Структура("Сотрудник, РабочийГодС, РабочийГодПо", Результат.Сотрудник, Результат.РабочийГодПериодаС, Результат.РабочийГодПериодаПо);
	
КонецФункции

Функция СправкаПоОтпускамСотрудника(Знач Сотрудник, Знач ДатаОстатков = '00010101', Знач ЭтоРасчетПриУвольнении = Ложь, ПорядокРасчетаОсновногоОтпуска = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Строка = ТаблицаДанных.Добавить();
	Строка.Сотрудник							= Сотрудник;
	Строка.ДатаОстатков							= НачалоДня(ДатаОстатков);
	Строка.ЭтоРасчетПриУвольнении				= ЭтоРасчетПриУвольнении;
	Если ЭтоРасчетПриУвольнении Тогда
		Строка.ПорядокРасчетаОсновногоОтпуска	= ПорядокРасчетаОсновногоОтпуска;
	КонецЕсли;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных)[0];
	
	ФорматДаты = "ДФ='d MMM yyyy ""г.""'";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоОтпускамСотрудника";
	
	Макет = ПолучитьОбщийМакет("СправкаПоОтпускамСотрудника");
	
	Если Не ЗначениеЗаполнено(Результат.ДатаПриемаНаРаботу) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеДанные");
		ОбластьМакета.Параметры.Сотрудник						= Результат.Сотрудник;
		Если Результат.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			ОбластьМакета.Параметры.ОбособленноеПодразделение	= "Сотрудница не принята на работу";
		Иначе
			ОбластьМакета.Параметры.ОбособленноеПодразделение	= "Сотрудник не принят на работу";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
	КонецЕсли;
	
	// Шапка отчета: место работы сотрудника и дата приема
	ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеДанные");
	ОбластьМакета.Параметры.Заполнить(Результат);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Период		= Формат(Результат.ДатаПриемаНаРаботу, ФорматДаты);
	Если Результат.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
		ОбластьМакета.Параметры.Комментарий	= "Принята на работу";
	Иначе
		ОбластьМакета.Параметры.Комментарий	= "Принят на работу";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если Результат.ПоложенныеПриПриемеНаРаботуВидыЕжегодныхОтпусков.Количество() > 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Текст			= "Ежегодно предоставляемые отпуска";
		ТабДокумент.Вывести(ОбластьМакета);
		Для Каждого ПоложенныйВидЕжегодногоОтпуска Из Результат.ПоложенныеПриПриемеНаРаботуВидыЕжегодныхОтпусков Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Текст			= "     " + ПоложенныйВидЕжегодногоОтпуска.ВидЕжегодногоОтпуска;
			ОбластьМакета.Параметры.КоличествоДней	= "" + ПоложенныйВидЕжегодногоОтпуска.КоличествоДнейОтпускаВГод + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ПоложенныйВидЕжегодногоОтпуска.КоличествоДнейОтпускаВГод) + " " + ПоложенныйВидЕжегодногоОтпуска.ТипЕжегодногоОтпуска;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЕсли;
	
	// Данные отчета в следующем порядке:
	//  1 - Изменения дней отпуска в год
	//  2 - Продления рабочего года
	//  3 - Фактические отпуска
	//  4 - Окончание рабочего года / Изменение остатка
	ТаблицаМакетовЗаПериод = Новый ТаблицаЗначений;
	ТаблицаМакетовЗаПериод.Колонки.Добавить("Период");
	ТаблицаМакетовЗаПериод.Колонки.Добавить("ДополнительныйПериод");
	ТаблицаМакетовЗаПериод.Колонки.Добавить("Порядок");
	ТаблицаМакетовЗаПериод.Колонки.Добавить("МассивОбластей");
	
	Для Каждого РабочийГод Из Результат.ДанныеРасчета Цикл
		// Изменения количества дней отпуска в год
		Для Каждого ИзменениеДней Из РабочийГод.ИзмененияКоличестваДнейОтпускаВГод Цикл
			МакетИзменения = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", ИзменениеДней.ДатаДействия, 1));
			Если МакетИзменения.Количество() = 0 Тогда
				МассивОбластей = Новый Массив;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				ОбластьМакета.Параметры.Период			= Формат(ИзменениеДней.ДатаДействия, ФорматДаты);
				ОбластьМакета.Параметры.Комментарий		= "Изменено количество дней отпуска в год";
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + ИзменениеДней.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней		= "" + ИзменениеДней.КоличествоДнейОтпускаВГод + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ИзменениеДней.КоличествоДнейОтпускаВГод) + " " + ИзменениеДней.ТипЕжегодногоОтпуска;
				МассивОбластей.Добавить(ОбластьМакета);
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.Период				= ИзменениеДней.ДатаДействия;
				Строка.Порядок				= 1;
				Строка.МассивОбластей		= МассивОбластей;
				
			Иначе
				Строка = МакетИзменения[0];
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + ИзменениеДней.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней		= "" + ИзменениеДней.КоличествоДнейОтпускаВГод + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ИзменениеДней.КоличествоДнейОтпускаВГод) + " " + ИзменениеДней.ТипЕжегодногоОтпуска;
				Строка.МассивОбластей.Добавить(ОбластьМакета);
				
			КонецЕсли;
		КонецЦикла;
		
		// Продления рабочего года
		Для Каждого Отклонение Из РабочийГод.Отклонения Цикл
			МакетОтклонения = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", Отклонение.ДатаНачалаОтсутствия, 2));
			Если МакетОтклонения.Количество() = 0 Тогда
				МассивОбластей = Новый Массив;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				ОбластьМакета.Параметры.Период				= Формат(Отклонение.ДатаНачалаОтсутствия, ФорматДаты) + " - " + Формат(Отклонение.ДатаОкончанияОтсутствия, ФорматДаты);
				ОбластьМакета.Параметры.Комментарий			= Отклонение.ПричинаОтсутствия;
				ОбластьМакета.Параметры.КоличествоДней		= "" + Отклонение.КоличествоДнейОтсутствия + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отклонение.КоличествоДнейОтсутствия);
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСРасшифровкой");
				ОбластьМакета.Параметры.Текст				= Отклонение.Документ;
				ОбластьМакета.Параметры.ТекстРасшифровка	= Отклонение.ДокументРасшифровка;
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "Рабочий год продлен на";
				ОбластьМакета.Параметры.КоличествоДней		= "" + Отклонение.КоличествоДнейПродления + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отклонение.КоличествоДнейПродления);
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + Отклонение.ВидЕжегодногоОтпуска;
				МассивОбластей.Добавить(ОбластьМакета);
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.Период			= Отклонение.ДатаНачалаОтсутствия;
				Строка.Порядок			= 2;
				Строка.МассивОбластей	= МассивОбластей;
				
			Иначе
				Строка = МакетОтклонения[0];
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + Отклонение.ВидЕжегодногоОтпуска;
				Строка.МассивОбластей.Добавить(ОбластьМакета);
				
			КонецЕсли;
		КонецЦикла;
		
		// Фактические отпуска, включая сторно-отпуска и компенсацию отпуска
		Для Каждого Отпуск Из РабочийГод.ФактическиеОтпуска Цикл
			МассивОбластей = Новый Массив;
			
			Если Отпуск.Компенсация Тогда
				ОбластьМакета = Макет.ПолучитьОбласть(?(Отпуск.КоличествоДнейОтпуска >= 0, "Шапка", "СторноШапка"));
				ОбластьМакета.Параметры.Период			= Формат(Отпуск.ДатаНачалаОтпуска, ФорматДаты);
				ОбластьМакета.Параметры.Комментарий		= "Компенсировано отпуска";
				ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.КоличествоДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСРасшифровкой");
				ОбластьМакета.Параметры.Текст				= Отпуск.Документ;
				ОбластьМакета.Параметры.ТекстРасшифровка	= Отпуск.ДокументРасшифровка;
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст			= Отпуск.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.КоличествоДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
				МассивОбластей.Добавить(ОбластьМакета);
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.Период				= Отпуск.ДатаНачалаОтпуска;
				Строка.ДополнительныйПериод	= Отпуск.ДатаРегистрации;
				Строка.Порядок				= 3;
				Строка.МассивОбластей		= МассивОбластей;
				
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть(?(Отпуск.КоличествоДнейОтпуска >= 0, "Шапка", "СторноШапка"));
				ОбластьМакета.Параметры.Период			= Формат(Отпуск.ДатаНачалаОтпуска, ФорматДаты) + " - " + Формат(Отпуск.ДатаОкончанияОтпуска, ФорматДаты);
				ОбластьМакета.Параметры.Комментарий		= Отпуск.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.КоличествоДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСРасшифровкой");
				ОбластьМакета.Параметры.Текст				= Отпуск.Документ;
				ОбластьМакета.Параметры.ТекстРасшифровка	= Отпуск.ДокументРасшифровка;
				МассивОбластей.Добавить(ОбластьМакета);
				
				Если Отпуск.КоличествоДнейОтпуска >= 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= "Рабочий год: " + Формат(Отпуск.РабочийГодС, ФорматДаты) + " - " + Формат(Отпуск.РабочийГодПо, ФорматДаты);
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= "Использовано отпуска";
					ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.КоличествоДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
					МассивОбластей.Добавить(ОбластьМакета);
					
					КоличествоСтрок = ?(Отпуск.ИспользованоДнейПрошлыхЛет > 0, 1, 0) + ?(Отпуск.ИспользованоДнейАвансом > 0, 1, 0);
					Если КоличествоСтрок > 1 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("Строка");
						ОбластьМакета.Параметры.Текст		= "  из них";
						МассивОбластей.Добавить(ОбластьМакета);
						
						ОбщийТекст = "     ";
					Иначе
						ОбщийТекст = "  из них ";
					КонецЕсли;
					Если Отпуск.ИспользованоДнейПрошлыхЛет > 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("Строка");
						ОбластьМакета.Параметры.Текст			= ОбщийТекст + "за счет отпусков прошлых лет";
						ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.ИспользованоДнейПрошлыхЛет + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.ИспользованоДнейПрошлыхЛет);
						МассивОбластей.Добавить(ОбластьМакета);
					КонецЕсли;
					Если Отпуск.ИспользованоДнейАвансом > 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
						ОбластьМакета.Параметры.Текст			= ОбщийТекст + "за счет отпусков будущего периода";
						ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.ИспользованоДнейАвансом + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.ИспользованоДнейАвансом);
						МассивОбластей.Добавить(ОбластьМакета);
					КонецЕсли;
					
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
					ОбластьМакета.Параметры.Текст			= "Возвращено отпуска";
					ОбластьМакета.Параметры.КоличествоДней	= "" + (-Отпуск.КоличествоДнейОтпуска) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
					МассивОбластей.Добавить(ОбластьМакета);
					
				КонецЕсли;
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.Период				= Отпуск.ДатаОкончанияОтпуска;
				Строка.ДополнительныйПериод	= Отпуск.ДатаРегистрации;
				Строка.Порядок				= 3;
				Строка.МассивОбластей		= МассивОбластей;
				
			КонецЕсли;
		КонецЦикла;
		
		// Введенны остатки
		Если РабочийГод.ВведенныеОстатки <> Неопределено Тогда
			Остаток					= РабочийГод.ВведенныеОстатки;
			ДатаВведенныхОстатков	= КонецДня(Остаток.ДатаОкончанияРабочегоГода);
			
			Если Не Остаток.ПоследнийГодОстатков Тогда
				Продолжить;
			КонецЕсли;
			
			МакетОтклонения = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", ДатаВведенныхОстатков, 4));
			Если МакетОтклонения.Количество() = 0 Тогда
				МассивОбластей = Новый Массив;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				ОбластьМакета.Параметры.Период				= Формат(ДатаВведенныхОстатков, ФорматДаты);
				ОбластьМакета.Параметры.Комментарий			= "Введены остатки";
				ОбластьМакета.Параметры.КоличествоДней		= "" + Остаток.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Остаток.Количество);
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + РабочийГод.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней		= "" + Остаток.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Остаток.Количество);
				МассивОбластей.Добавить(ОбластьМакета);
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.Период				= ДатаВведенныхОстатков;
				Строка.ДополнительныйПериод	= Остаток.ДатаАктуальности;
				Строка.Порядок				= 4;
				Строка.МассивОбластей		= МассивОбластей;
				
			Иначе
				Строка = МакетОтклонения[0];
				
				ОбластьШапка = Строка.МассивОбластей[0];
				КоличествоДней = Сред(ОбластьШапка.Параметры.КоличествоДней, 1, Найти(ОбластьШапка.Параметры.КоличествоДней, " ") - 1);
				Если ОбщегоНазначения.ТолькоЦифрыВСтроке(КоличествоДней) Тогда
					КоличествоДней = Число(КоличествоДней) + Остаток.Количество;
					ОбластьШапка.Параметры.КоличествоДней		= "" + КоличествоДней + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",КоличествоДней);
				КонецЕсли;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + РабочийГод.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней		= "" + Остаток.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Остаток.Количество);
				Строка.МассивОбластей.Добавить(ОбластьМакета);
				
			КонецЕсли;
			
		Иначе // Окончание рабочего года для всех лет, кроме последнего
			Если Не РабочийГод.ПоследнийРабочийГод Тогда
				МакетРабочегоГода = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", РабочийГод.ДатаОкончания, 4));
				Если МакетРабочегоГода.Количество() = 0 Тогда
					МассивОбластей = Новый Массив;
					
					ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
					ОбластьМакета.Параметры.Комментарий		= ?(РабочийГод.ДатаОкончания < ОбщегоНазначения.ПолучитьРабочуюДату(), "Закончился рабочий год", "Рассчитан рабочий год");
					ОбластьМакета.Параметры.Период			= Формат(РабочийГод.ДатаНачала, ФорматДаты) + " - " + Формат(РабочийГод.ДатаОкончания, ФорматДаты);
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= "Остаток отпуска";
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть(?(РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом >= 0, "Строка", "ВажнаяСтрока"));
					ОбластьМакета.Параметры.Текст			= "     " + РабочийГод.ВидЕжегодногоОтпуска;
					ОбластьМакета.Параметры.КоличествоДней	= "" + РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом);
					МассивОбластей.Добавить(ОбластьМакета);
					
					Строка = ТаблицаМакетовЗаПериод.Добавить();
					Строка.Период			= РабочийГод.ДатаОкончания;
					Строка.Порядок			= 4;
					Строка.МассивОбластей	= МассивОбластей;
					
				Иначе
					Строка = МакетРабочегоГода[0];
					
					ОбластьМакета = Макет.ПолучитьОбласть(?(РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом >= 0, "Строка", "ВажнаяСтрока"));
					ОбластьМакета.Параметры.Текст			= "     " + РабочийГод.ВидЕжегодногоОтпуска;
					ОбластьМакета.Параметры.КоличествоДней	= "" + РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом);
					Строка.МассивОбластей.Добавить(ОбластьМакета);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаМакетовЗаПериод.Сортировать("Период, ДополнительныйПериод, Порядок");
	
	Для Каждого СтрокаТаблицы Из ТаблицаМакетовЗаПериод Цикл
		Для Каждого ОбластьМакета Из СтрокаТаблицы.МассивОбластей Цикл
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЦикла;
	
	// Подвал отчета: текущий остаток отпуска
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	Если ЭтоРасчетПриУвольнении Тогда
		ОбластьМакета.Параметры.Период		= "На дату увольнения, " + Формат(ДатаОстатков, ФорматДаты);
		
	ИначеЕсли Результат.СотрудникУволен Тогда
		ОбластьМакета.Параметры.Период		= "На дату увольнения, " + Формат(Результат.ДатаУвольнения, ФорматДаты);
		
	Иначе
		Если НачалоДня(ДатаОстатков) = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
			ОбластьМакета.Параметры.Период		= "На сегодня, " + Формат(НачалоДня(ДатаОстатков), ФорматДаты);
		ИначеЕсли НачалоДня(ДатаОстатков) = НачалоДня(КонецГода(ДатаОстатков)) Тогда
			ОбластьМакета.Параметры.Период		= "На конец года, " + Формат(НачалоДня(ДатаОстатков), ФорматДаты);
		ИначеЕсли НачалоДня(ДатаОстатков) = НачалоДня(КонецМесяца(ДатаОстатков)) Тогда
			ОбластьМакета.Параметры.Период		= "На конец месяца, " + Формат(НачалоДня(ДатаОстатков), ФорматДаты);
		Иначе
			ОбластьМакета.Параметры.Период		= "На " + Формат(НачалоДня(ДатаОстатков), ФорматДаты);
		КонецЕсли;
		
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если Результат.ОстатокНаДату >= 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Текст			= ?(ЭтоРасчетПриУвольнении Или Результат.СотрудникУволен, "Подлежит компенсации", "Неиспользованный отпуск");
		ОбластьМакета.Параметры.КоличествоДней	= "" + Результат.ОстатокНаДату + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Результат.ОстатокНаДату);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
		ОбластьМакета.Параметры.Текст			= ?(ЭтоРасчетПриУвольнении Или Результат.СотрудникУволен, "Подлежит удержанию", "Использовано за счет отпусков будущего периода");
		ОбластьМакета.Параметры.КоличествоДней	= "" + (-Результат.ОстатокНаДату) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Результат.ОстатокНаДату);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Для Каждого ОстатокПоВидуОтпуска Из Результат.ОстатокНаДатуПоВидамЕжегодныхОтпусков Цикл
		Если ОстатокПоВидуОтпуска.КоличествоДней >= 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Текст			= "     " + ОстатокПоВидуОтпуска.ВидЕжегодногоОтпуска;
			ОбластьМакета.Параметры.КоличествоДней	= "" + ОстатокПоВидуОтпуска.КоличествоДней + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОстатокПоВидуОтпуска.КоличествоДней);
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
			ОбластьМакета.Параметры.Текст			= "     " + ОстатокПоВидуОтпуска.ВидЕжегодногоОтпуска;
			ОбластьМакета.Параметры.КоличествоДней	= "" + (-ОстатокПоВидуОтпуска.КоличествоДней) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОстатокПоВидуОтпуска.КоличествоДней);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функции, непосредственно используемые при расчете остатков отпусков

// Функция формирует описание таблицы данных для функции расчета остатка отпуска.
//
Функция ОписаниеТаблицыДанных()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	// Сотрудник и дата, на которую определяется остаток отпуска. Это ключ, который должен быть уникальным для каждой строки.
	ТаблицаДанных.Колонки.Добавить("Сотрудник",					Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаДанных.Колонки.Добавить("ДатаОстатков",				Новый ОписаниеТипов("Дата"));
	
	// Остатки отпуска на указанную дату.
	// Если ЭтоРасчетПриУвольнении = Истина, тогда алгоритм будет игнорировать движения, сделанные расчетом при увольнении.
	ТаблицаДанных.Колонки.Добавить("ЭтоРасчетПриУвольнении",	Новый ОписаниеТипов("Булево"));
	
	// График отпусков на год.
	// Фактические отпуска учитываются до даты документа, после даты документа только запланированные, если ЭтоЗапланированныйОтпуск = Истина.
	ТаблицаДанных.Колонки.Добавить("ЭтоЗапланированныйОтпуск",	Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ДатаДокумента",				Новый ОписаниеТипов("Дата"));
	
	// График отпусков и Отпуска организаций.
	// Если указан период отпуска, то для него по производственному календарю будет посчитано количество календарных дней отпуска и рабочие года,
	//  за которые эти остатки были и будут заработаны.
	// Для каждого периода в поле Примечание будет добавлена информация о том, как остатки отпуска будут израсходованы на указанный период.
	// ДатаОкончания = ДатаОстатков всегда.
	ТаблицаДанных.Колонки.Добавить("ДатаНачала",						Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДатаОкончания",						Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ТекущийРегистратор",				Документы.ТипВсеСсылки());
	
	// Этот отбор писпользуется только в случае, если задан порядок расчета основного отпуска
	ТаблицаДанных.Колонки.Добавить("ПорядокРасчетаОсновногоОтпуска",	Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаОтпуска"));
	ТаблицаДанных.Колонки.Добавить("ИсключитьОсновнойОтпуск",			Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ДополнительныйОтпуск",				Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
	// Этот отбор используется, если не пустой
	ТаблицаДанных.Колонки.Добавить("ВидЕжегодногоОтпуска",				Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Функция формирует текстовое описание периода отпуска на основе переданных в качестве параметров данных
//
Функция ОписаниеПериодаОтпуска(КоличествоДнейВсего, КоличествоДнейПрошлыхЛет, КоличествоДнейАвансом, ДатаПриемаНаРаботу, ДатаОстатков)
	
	Комментарий	= Строка(КоличествоДнейВсего) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",КоличествоДнейВсего);
	
	РасшифровкаКомментария = "";
	
	Если КоличествоДнейВсего > 0 Тогда
		Если КоличествоДнейПрошлыхЛет > 0 Тогда
			РасшифровкаКомментария = ", " + КоличествоДнейПрошлыхЛет + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",КоличествоДнейПрошлыхЛет) + " за счет отпусков прошлых лет";
		КонецЕсли;
		
		Если КоличествоДнейАвансом > 0 Тогда
			Если ПустаяСтрока(РасшифровкаКомментария) Тогда
				РасшифровкаКомментария = ", ";
			Иначе
				РасшифровкаКомментария = РасшифровкаКомментария + " и ";
			КонецЕсли;
			РасшифровкаКомментария = РасшифровкаКомментария + Строка(КоличествоДнейАвансом) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",КоличествоДнейАвансом) + " в счет будущего периода";
		КонецЕсли;
	КонецЕсли;
	
	Комментарий = Комментарий + РасшифровкаКомментария;
	
	Если ДатаПриемаНаРаботу > ДобавитьМесяц(ДатаОстатков, -6) Тогда
		Если Не ПустаяСтрока(Комментарий) Тогда
			Комментарий = Комментарий + ". ";
		КонецЕсли;
		Комментарий = Комментарий + "Дата приема на работу: " + Формат(ДатаПриемаНаРаботу, "ДФ='д ММММ гггг ""года""'");
		
	ИначеЕсли Не ЗначениеЗаполнено(ДатаПриемаНаРаботу) Тогда
		Если Не ПустаяСтрока(Комментарий) Тогда
			Комментарий = Комментарий + ". ";
		КонецЕсли;
		Комментарий = Комментарий + "Не принят на работу";
		
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

Функция ДнейОтпускаВПериоде(ДатаНачала, ДатаОкончания, КоличествоДнейОтпускаВГод)
	
	КоличествоМесяцевПериода		= Месяц(ДатаОкончания) - Месяц(ДатаНачала) + (Год(ДатаОкончания) - Год(ДатаНачала)) * 12;
	КоличествоДнейПериода			= День(ДатаОкончания) - День(ДатаНачала) + 1;
	Если КоличествоДнейПериода < 0 Тогда
		КоличествоДнейПериода		= КоличествоДнейПериода + День(НачалоМесяца(ДатаОкончания) - 1) - 1;
		КоличествоМесяцевПериода	= КоличествоМесяцевПериода - 1;
	КонецЕсли;
	Если КоличествоДнейПериода >= ?(День(ДатаОкончания) - День(ДатаНачала) + 1 >= 0, День(КонецМесяца(ДатаОкончания)), День(НачалоМесяца(ДатаОкончания) - 1)) / 2 Тогда
		КоличествоМесяцевПериода	= КоличествоМесяцевПериода + 1;
	КонецЕсли;
	
	Возврат КоличествоДнейОтпускаВГод * КоличествоМесяцевПериода / 12;
	
КонецФункции

// Функция, отвечающая за расчет отпусков, положенных сотруднику.
// Используется всеми остальными функциями.
//
// В качестве таблицы данных нужно передать заполненную таблицу значений, по описанию из процедуры ОписаниеТаблицыДанных().
//
Функция ОстаткиОтпусков(ТаблицаДанных)
	
	// Для расчета остатков отпусков необходимо:
	//	1. Определить дату приема на работу и увольнения;
	//	2. Получить таблицу последних введенных остатков;
	//	3. Получить таблицу всех отсутствий, влияющих на продление рабочего года;
	//	4. Получить таблицу всех изменений количества дней отпуска в год;
	//	5. Получить список фактических отпусков.
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаДанных",	ТаблицаДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ЭтоЗапланированныйОтпуск КАК ЭтоЗапланированныйОтпуск,
	|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаДанных.ДатаНачала КАК ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончания КАК ДатаОкончанияПериода,
	|	ТаблицаДанных.ТекущийРегистратор КАК ТекущийРегистратор,
	|	ТаблицаДанных.ПорядокРасчетаОсновногоОтпуска КАК ПорядокРасчетаОсновногоОтпуска,
	|	ТаблицаДанных.ИсключитьОсновнойОтпуск КАК ИсключитьОсновнойОтпуск,
	|	ТаблицаДанных.ДополнительныйОтпуск КАК ДополнительныйОтпуск,
	|	ТаблицаДанных.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска
	|ПОМЕСТИТЬ ВТТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков,
	|	ЭтоРасчетПриУвольнении
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ЭтоЗапланированныйОтпуск,
	|	ТаблицаДанных.ДатаДокумента,
	|	ТаблицаДанных.ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончанияПериода,
	|	ТаблицаДанных.ВидЕжегодногоОтпуска,
	|	ТаблицаДанных.КоличествоКалендарныхДнейВПериоде,
	|	ТаблицаДанных.ТекущийРегистратор,
	|	ЕСТЬNULL(НачисленияОсновногоОтпуска.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)) КАК ВидОсновногоОтпуска,
	|	ЕСТЬNULL(НачисленияДополнительногоОтпуска.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)) КАК ВидДополнительногоОтпуска,
	|	ТаблицаДанных.ПорядокРасчетаОсновногоОтпуска,
	|	ТаблицаДанных.ИсключитьОсновнойОтпуск,
	|	СотрудникиОрганизаций.ДатаПриемаНаРаботу,
	|	ЕСТЬNULL(РаботникиОрганизацийПриемНаРаботу.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка)) КАК Должность,
	|	СотрудникиОрганизаций.ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СотрудникиОрганизаций.ДатаУвольнения > ТаблицаДанных.ДатаОстатков
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникУволен,
	|	ВЫБОР
	|		КОГДА НЕ УвольнениеИзОрганизацийРаботникиОрганизации.ПорядокРасчетаОтпуска ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА УвольнениеИзОрганизацийРаботникиОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоШестидневке)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоКалендарнымДням)
	|				КОНЕЦ
	|		КОГДА ВЫБОР
	|					КОГДА СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ЛОЖЬ
	|					КОГДА СотрудникиОрганизаций.ДатаУвольнения > ТаблицаДанных.ДатаОстатков
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И РАЗНОСТЬДАТ(СотрудникиОрганизаций.ДатаПриемаНаРаботу, СотрудникиОрганизаций.ДатаУвольнения, ДЕНЬ) <= 61
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоКалендарнымДням)
	|	КОНЕЦ КАК СпособРасчетаОтпусков
	|ПОМЕСТИТЬ ВТТаблицаСотрудников
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаДанных.Сотрудник КАК Сотрудник,
	|			ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|			ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении,
	|			ТаблицаДанных.ЭтоЗапланированныйОтпуск КАК ЭтоЗапланированныйОтпуск,
	|			ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
	|			ТаблицаДанных.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|			ТаблицаДанных.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|			ТаблицаДанных.ТекущийРегистратор КАК ТекущийРегистратор,
	|			ТаблицаДанных.ПорядокРасчетаОсновногоОтпуска КАК ПорядокРасчетаОсновногоОтпуска,
	|			ТаблицаДанных.ИсключитьОсновнойОтпуск КАК ИсключитьОсновнойОтпуск,
	|			ТаблицаДанных.ДополнительныйОтпуск КАК ДополнительныйОтпуск,
	|			ТаблицаДанных.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|			СУММА(ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.КалендарныеДни, 0)) КАК КоличествоКалендарныхДнейВПериоде
	|		ИЗ
	|			ВТТаблицаДанных КАК ТаблицаДанных
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|				ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ТаблицаДанных.ДатаНачалаПериода И ТаблицаДанных.ДатаОкончанияПериода)
	|					И (ТаблицаДанных.ДатаНачалаПериода <> ДАТАВРЕМЯ(1, 1, 1))
	|					И (ТаблицаДанных.ДатаОкончанияПериода <> ДАТАВРЕМЯ(1, 1, 1))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаДанных.Сотрудник,
	|			ТаблицаДанных.ДатаОстатков,
	|			ТаблицаДанных.ЭтоРасчетПриУвольнении,
	|			ТаблицаДанных.ЭтоЗапланированныйОтпуск,
	|			ТаблицаДанных.ДатаДокумента,
	|			ТаблицаДанных.ДатаНачалаПериода,
	|			ТаблицаДанных.ДатаОкончанияПериода,
	|			ТаблицаДанных.ТекущийРегистратор,
	|			ТаблицаДанных.ИсключитьОсновнойОтпуск,
	|			ТаблицаДанных.ПорядокРасчетаОсновногоОтпуска,
	|			ТаблицаДанных.ДополнительныйОтпуск,
	|			ТаблицаДанных.ВидЕжегодногоОтпуска) КАК ТаблицаДанных
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК НачисленияДополнительногоОтпуска
	|			ПО ТаблицаДанных.ДополнительныйОтпуск = НачисленияДополнительногоОтпуска.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК НачисленияОсновногоОтпуска
	|			ПО (ВЫБОР
	|					КОГДА ТаблицаДанных.ПорядокРасчетаОсновногоОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|						ТОГДА НачисленияОсновногоОтпуска.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)
	|					КОГДА ТаблицаДанных.ПорядокРасчетаОсновногоОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоШестидневке)
	|						ТОГДА НачисленияОсновногоОтпуска.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ)
	|		ПО СотрудникиОрганизаций.Ссылка = ТаблицаДанных.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийПриемНаРаботу
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизацийПриемНаРаботу.Сотрудник
	|			И СотрудникиОрганизаций.ДатаПриемаНаРаботу = РаботникиОрганизацийПриемНаРаботу.Период
	|			И (РаботникиОрганизацийПриемНаРаботу.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийУвольнение
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|			ПО РаботникиОрганизацийУвольнение.Сотрудник = УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник
	|				И (ДОБАВИТЬКДАТЕ(РаботникиОрганизацийУвольнение.Период, ДЕНЬ, -1) = УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения)
	|				И РаботникиОрганизацийУвольнение.Регистратор = УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизацийУвольнение.Сотрудник
	|			И (РаботникиОрганизацийУвольнение.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|			И (СотрудникиОрганизаций.ДатаУвольнения = ДОБАВИТЬКДАТЕ(РаботникиОрганизацийУвольнение.Период, ДЕНЬ, -1))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.ДатаОстатков КАК ДатаОстатков,
	|	ТаблицаСотрудников.ЭтоРасчетПриУвольнении,
	|	ТаблицаСотрудников.ДатаНачалаПериода,
	|	ТаблицаСотрудников.ДатаОкончанияПериода,
	|	ТаблицаСотрудников.ВидЕжегодногоОтпуска,
	|	ТаблицаСотрудников.КоличествоКалендарныхДнейВПериоде,
	|	ТаблицаСотрудников.ДатаПриемаНаРаботу,
	|	ТаблицаСотрудников.ДатаУвольнения,
	|	ТаблицаСотрудников.СотрудникУволен,
	|	ТаблицаСотрудников.Сотрудник.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ТаблицаСотрудников.Сотрудник.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаСотрудников.Сотрудник.Должность КАК Должность,
	|	ТаблицаСотрудников.Сотрудник.Физлицо.Пол КАК Пол,
	|	Константы.ОкруглятьДниОтпускаПриКомпенсации
	|ИЗ
	|	ВТТаблицаСотрудников КАК ТаблицаСотрудников,
	|	Константы КАК Константы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник,
	|	ТаблицаСотрудников.ДатаОстатков,
	|	ВидыЕжегодныхОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВидыЕжегодныхОтпусков.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ВЫБОР
	|		КОГДА ВидыЕжегодныхОтпусков.Ссылка = НачисленияОсновногоОтпуска.ВидЕжегодногоОтпуска
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсновнойОтпуск
	|ПОМЕСТИТЬ ВТВидыЕжегодныхОтпусков
	|ИЗ
	|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|		ПО (НЕ ВидыЕжегодныхОтпусков.ПометкаУдаления)
	|			И (ВЫБОР
	|				КОГДА ТаблицаСотрудников.ВидОсновногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|						И ТаблицаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|					ТОГДА ВЫБОР
	|							КОГДА ТаблицаСотрудников.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|								ТОГДА ТаблицаСотрудников.СпособРасчетаОтпусков = ВидыЕжегодныхОтпусков.СпособРасчетаОстаткаОтпуска
	|							ИНАЧЕ ТаблицаСотрудников.ВидЕжегодногоОтпуска = ВидыЕжегодныхОтпусков.Ссылка
	|						КОНЕЦ
	|				ИНАЧЕ ТаблицаСотрудников.ВидОсновногоОтпуска = ВидыЕжегодныхОтпусков.Ссылка
	|							И НЕ ТаблицаСотрудников.ИсключитьОсновнойОтпуск
	|						ИЛИ ТаблицаСотрудников.ВидДополнительногоОтпуска = ВидыЕжегодныхОтпусков.Ссылка
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК НачисленияОсновногоОтпуска
	|		ПО (ВЫБОР
	|				КОГДА ТаблицаСотрудников.ПорядокРасчетаОсновногоОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоШестидневке)
	|					ТОГДА НачисленияОсновногоОтпуска.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка)
	|				ИНАЧЕ НачисленияОсновногоОтпуска.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)
	|			КОНЕЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЕжегодногоОтпуска,
	|	ОсновнойОтпуск
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЕжегодныхОтпусков.Сотрудник,
	|	ВидыЕжегодныхОтпусков.ДатаОстатков,
	|	ВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|	ВидыЕжегодныхОтпусков.КоличествоДнейОтпускаВГод
	|ИЗ
	|	ВТВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЕжегодныхОтпусков.ОсновнойОтпуск УБЫВ,
	|	ВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.ДатаОстатков,
	|	ОстаткиОтпусков.Ссылка.ДатаАктуальности КАК ДатаАктуальности,
	|	ОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ОстаткиОтпусков.Количество,
	|	ОстаткиОтпусков.ДатаНачалаРабочегоГода,
	|	ОстаткиОтпусков.ДатаОкончанияРабочегоГода КАК ДатаОкончанияРабочегоГода,
	|	ОстаткиОтпусков.Ссылка
	|ИЗ
	|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ОстаткиМаксимум.Сотрудник КАК Сотрудник,
	|				ОстаткиМаксимум.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|				ОстаткиМаксимум.ДатаОкончанияРабочегоГода КАК ДатаОкончанияРабочегоГода,
	|				МАКСИМУМ(ОстаткиОтпусковОрганизацийОстатки.Ссылка) КАК Ссылка
	|			ИЗ
	|				Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОрганизацийОстатки
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						ОстаткиОтпусковОрганизацийОстатки.Ссылка.Сотрудник КАК Сотрудник,
	|						ОстаткиОтпусковОрганизацийОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|						МАКСИМУМ(ОстаткиОтпусковОрганизацийОстатки.ДатаОкончанияРабочегоГода) КАК ДатаОкончанияРабочегоГода
	|					ИЗ
	|						ВТТаблицаСотрудников КАК ВТТаблицаСотрудников
	|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОрганизацийОстатки
	|							ПО ВТТаблицаСотрудников.Сотрудник = ОстаткиОтпусковОрганизацийОстатки.Ссылка.Сотрудник
	|					
	|					СГРУППИРОВАТЬ ПО
	|						ОстаткиОтпусковОрганизацийОстатки.Ссылка.Сотрудник,
	|						ОстаткиОтпусковОрганизацийОстатки.ВидЕжегодногоОтпуска) КАК ОстаткиМаксимум
	|					ПО ОстаткиОтпусковОрганизацийОстатки.Ссылка.Сотрудник = ОстаткиМаксимум.Сотрудник
	|						И ОстаткиОтпусковОрганизацийОстатки.ВидЕжегодногоОтпуска = ОстаткиМаксимум.ВидЕжегодногоОтпуска
	|						И ОстаткиОтпусковОрганизацийОстатки.ДатаОкончанияРабочегоГода = ОстаткиМаксимум.ДатаОкончанияРабочегоГода
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ОстаткиМаксимум.Сотрудник,
	|				ОстаткиМаксимум.ВидЕжегодногоОтпуска,
	|				ОстаткиМаксимум.ДатаОкончанияРабочегоГода) КАК ОстаткиОтпусковСрез
	|			ПО ОстаткиОтпусков.Ссылка.Сотрудник = ОстаткиОтпусковСрез.Сотрудник
	|				И ОстаткиОтпусков.ВидЕжегодногоОтпуска = ОстаткиОтпусковСрез.ВидЕжегодногоОтпуска
	|				И ОстаткиОтпусков.Ссылка = ОстаткиОтпусковСрез.Ссылка
	|		ПО ТаблицаСотрудников.Сотрудник = ОстаткиОтпусков.Ссылка.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ТаблицаСотрудников.ВидОсновногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|						И ТаблицаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|					ТОГДА ВЫБОР
	|							КОГДА ТаблицаСотрудников.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|								ТОГДА ТаблицаСотрудников.СпособРасчетаОтпусков = ОстаткиОтпусков.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска
	|							ИНАЧЕ ТаблицаСотрудников.ВидЕжегодногоОтпуска = ОстаткиОтпусков.ВидЕжегодногоОтпуска.Ссылка
	|						КОНЕЦ
	|				ИНАЧЕ ТаблицаСотрудников.ВидОсновногоОтпуска = ОстаткиОтпусков.ВидЕжегодногоОтпуска
	|							И НЕ ТаблицаСотрудников.ИсключитьОсновнойОтпуск
	|						ИЛИ ТаблицаСотрудников.ВидДополнительногоОтпуска = ОстаткиОтпусков.ВидЕжегодногоОтпуска
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаАктуальности,
	|	ВидЕжегодногоОтпуска,
	|	ДатаОкончанияРабочегоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.ДатаОстатков КАК ДатаОстатков,
	|	СостояниеРаботниковОрганизаций.Период КАК Период,
	|	СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	|	СостояниеРаботниковОрганизаций.ПериодЗавершения КАК ПериодЗавершения,
	|	СостояниеРаботниковОрганизаций.СостояниеЗавершения,
	|	СостояниеРаботниковОрганизаций.Регистратор
	|ПОМЕСТИТЬ ВТЗаписиОтклонений
	|ИЗ
	|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|		ПО ТаблицаСотрудников.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ТаблицаСотрудников.ЭтоЗапланированныйОтпуск
	|					ТОГДА ТаблицаСотрудников.ДатаДокумента
	|				ИНАЧЕ ТаблицаСотрудников.ДатаОстатков
	|			КОНЕЦ >= СостояниеРаботниковОрганизаций.Период)
	|			И (СостояниеРаботниковОрганизаций.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков,
	|	Период,
	|	ПериодЗавершения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.ДатаОстатков КАК ДатаОстатков,
	|	СостояниеРаботниковОрганизаций.Период КАК ПериодНачала,
	|	МИНИМУМ(СостояниеРаботниковОрганизацийЗавершения.Период) КАК ДатаСреза
	|ПОМЕСТИТЬ ВТСрезОтклоненийЗавершения
	|ИЗ
	|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийЗавершения
	|			ПО СостояниеРаботниковОрганизаций.Сотрудник = СостояниеРаботниковОрганизацийЗавершения.Сотрудник
	|				И СостояниеРаботниковОрганизаций.Период < СостояниеРаботниковОрганизацийЗавершения.Период
	|		ПО ТаблицаСотрудников.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ТаблицаСотрудников.ЭтоЗапланированныйОтпуск
	|					ТОГДА ТаблицаСотрудников.ДатаДокумента
	|				ИНАЧЕ ТаблицаСотрудников.ДатаОстатков
	|			КОНЕЦ >= СостояниеРаботниковОрганизаций.Период)
	|			И (СостояниеРаботниковОрганизаций.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСотрудников.Сотрудник,
	|	ТаблицаСотрудников.ДатаОстатков,
	|	СостояниеРаботниковОрганизаций.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков,
	|	ПериодНачала,
	|	ДатаСреза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиОтклонений.Сотрудник КАК Сотрудник,
	|	ЗаписиОтклонений.ДатаОстатков КАК ДатаОстатков,
	|	ЗаписиОтклонений.ПериодНачала КАК ПериодНачала,
	|	СостояниеРаботниковОрганизацийЗавершения.Период КАК Период,
	|	СостояниеРаботниковОрганизацийЗавершения.Состояние
	|ПОМЕСТИТЬ ВТЗаписиОтклоненийЗавершения
	|ИЗ
	|	ВТСрезОтклоненийЗавершения КАК ЗаписиОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийЗавершения
	|		ПО ЗаписиОтклонений.Сотрудник = СостояниеРаботниковОрганизацийЗавершения.Сотрудник
	|			И ЗаписиОтклонений.ДатаСреза = СостояниеРаботниковОрганизацийЗавершения.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков,
	|	ПериодНачала,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОтклонений.Сотрудник,
	|	СписокОтклонений.ДатаОстатков,
	|	РАЗНОСТЬДАТ(СписокОтклонений.ДатаНачалаОтпуска, СписокОтклонений.ДатаОкончанияОтпуска, ДЕНЬ) КАК КоличествоДнейОтпуска,
	|	РАЗНОСТЬДАТ(СписокОтклонений.ДатаНачалаОтпуска, СписокОтклонений.ДатаОкончанияОтпуска, ДЕНЬ) КАК КоличествоДнейПродления,
	|	СписокОтклонений.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ДОБАВИТЬКДАТЕ(СписокОтклонений.ДатаОкончанияОтпуска, ДЕНЬ, -1) КАК ДатаОкончанияОтпуска,
	|	СписокОтклонений.Состояние,
	|	СписокОтклонений.СостояниеЗавершения,
	|	СписокОтклонений.Регистратор КАК Документ,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СписокОтклонений.Регистратор) КАК ПредставлениеДокумента
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаписиОтклонений.Сотрудник КАК Сотрудник,
	|		ЗаписиОтклонений.ДатаОстатков КАК ДатаОстатков,
	|		ЗаписиОтклонений.Период КАК ДатаНачалаОтпуска,
	|		ВЫБОР
	|			КОГДА ЗаписиОтклонений.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И (ЗаписиОтклоненийЗавершения.Период ЕСТЬ NULL 
	|						ИЛИ ЗаписиОтклоненийЗавершения.Период > ЗаписиОтклонений.ПериодЗавершения)
	|				ТОГДА ЗаписиОтклонений.ПериодЗавершения
	|			КОГДА ЕСТЬNULL(ЗаписиОтклоненийЗавершения.Период, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЗаписиОтклоненийЗавершения.Период
	|			ИНАЧЕ ЗаписиОтклонений.ДатаОстатков
	|		КОНЕЦ КАК ДатаОкончанияОтпуска,
	|		ЗаписиОтклонений.Состояние КАК Состояние,
	|		ВЫБОР
	|			КОГДА НЕ ЗаписиОтклоненийЗавершения.Период ЕСТЬ NULL 
	|					И ЗаписиОтклоненийЗавершения.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЗаписиОтклоненийЗавершения.Состояние
	|			КОГДА ЗаписиОтклонений.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ЗаписиОтклоненийЗавершения.Период > ЗаписиОтклонений.ПериодЗавершения
	|				ТОГДА ЗаписиОтклонений.СостояниеЗавершения
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
	|		КОНЕЦ КАК СостояниеЗавершения,
	|		ЗаписиОтклонений.Регистратор КАК Регистратор
	|	ИЗ
	|		ВТЗаписиОтклонений КАК ЗаписиОтклонений
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиОтклоненийЗавершения КАК ЗаписиОтклоненийЗавершения
	|			ПО ЗаписиОтклонений.Сотрудник = ЗаписиОтклоненийЗавершения.Сотрудник
	|				И ЗаписиОтклонений.ДатаОстатков = ЗаписиОтклоненийЗавершения.ДатаОстатков
	|				И ЗаписиОтклонений.Период < ЗаписиОтклоненийЗавершения.Период
	|				И ЗаписиОтклонений.Период = ЗаписиОтклоненийЗавершения.ПериодНачала) КАК СписокОтклонений
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокОтклонений.Сотрудник,
	|	СписокОтклонений.ДатаОстатков,
	|	ДатаНачалаОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиСВидамиОтпусков.Сотрудник КАК Сотрудник,
	|	СотрудникиСВидамиОтпусков.ДатаОстатков,
	|	СотрудникиСВидамиОтпусков.ДатаДействия КАК ДатаДействия,
	|	СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ЕСТЬNULL(СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ВЫБОР
	|				КОГДА СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам
	|					ТОГДА СотрудникиСВидамиОтпусков.КоличествоДнейОтпускаВГод
	|				ИНАЧЕ 0
	|			КОНЕЦ)) КАК КоличествоДнейОтпускаВГод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ВЫБОР
	|						КОГДА СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам
	|							ТОГДА СотрудникиСВидамиОтпусков.КоличествоДнейОтпускаВГод
	|						ИНАЧЕ 0
	|					КОНЕЦ)) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Предоставляется,
	|	ВЫБОР
	|		КОГДА НЕ СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод ЕСТЬ NULL 
	|			ТОГДА ""(персональный)""
	|		КОГДА НЕ ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод ЕСТЬ NULL 
	|			ТОГДА ""(по должности)""
	|		КОГДА СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам
	|			ТОГДА ""(общефирменный)""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипЕжегодногоОтпуска
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|		ТаблицаСотрудников.ДатаОстатков КАК ДатаОстатков,
	|		ТаблицаСотрудников.ДатаПриемаНаРаботу КАК ДатаДействия,
	|		ТаблицаСотрудников.Должность КАК Должность,
	|		ВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		ВидыЕжегодныхОтпусков.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|		ВидыЕжегодныхОтпусков.ОсновнойОтпуск КАК ОсновнойОтпуск
	|	ИЗ
	|		ВТТаблицаСотрудников КАК ТаблицаСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|			ПО ТаблицаСотрудников.Сотрудник = ВидыЕжегодныхОтпусков.Сотрудник
	|				И ТаблицаСотрудников.ДатаОстатков = ВидыЕжегодныхОтпусков.ДатаОстатков
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСотрудников.Сотрудник,
	|		ТаблицаСотрудников.ДатаОстатков,
	|		РаботникиОрганизаций.Период,
	|		РаботникиОрганизаций.Должность,
	|		ВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|		ВидыЕжегодныхОтпусков.КоличествоДнейОтпускаВГод,
	|		ВидыЕжегодныхОтпусков.ОсновнойОтпуск
	|	ИЗ
	|		ВТТаблицаСотрудников КАК ТаблицаСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ТаблицаСотрудников.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И (ВЫБОР
	|					КОГДА ТаблицаСотрудников.ЭтоЗапланированныйОтпуск
	|						ТОГДА ТаблицаСотрудников.ДатаДокумента
	|					ИНАЧЕ ТаблицаСотрудников.ДатаОстатков
	|				КОНЕЦ >= РаботникиОрганизаций.Период)
	|				И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение))
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|			ПО ТаблицаСотрудников.Сотрудник = ВидыЕжегодныхОтпусков.Сотрудник
	|				И ТаблицаСотрудников.ДатаОстатков = ВидыЕжегодныхОтпусков.ДатаОстатков
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСотрудников.Сотрудник,
	|		ТаблицаСотрудников.ДатаОстатков,
	|		ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.ПериодЗавершения, ДЕНЬ, 1),
	|		РаботникиОрганизаций.ДолжностьЗавершения,
	|		ВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|		ВидыЕжегодныхОтпусков.КоличествоДнейОтпускаВГод,
	|		ВидыЕжегодныхОтпусков.ОсновнойОтпуск
	|	ИЗ
	|		ВТТаблицаСотрудников КАК ТаблицаСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ТаблицаСотрудников.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И (ВЫБОР
	|					КОГДА ТаблицаСотрудников.ЭтоЗапланированныйОтпуск
	|						ТОГДА ТаблицаСотрудников.ДатаДокумента
	|					ИНАЧЕ ТаблицаСотрудников.ДатаОстатков
	|				КОНЕЦ >= РаботникиОрганизаций.Период)
	|				И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение))
	|				И (РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1))
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|			ПО ТаблицаСотрудников.Сотрудник = ВидыЕжегодныхОтпусков.Сотрудник
	|				И ТаблицаСотрудников.ДатаОстатков = ВидыЕжегодныхОтпусков.ДатаОстатков) КАК СотрудникиСВидамиОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций.ЕжегодныеОтпуска КАК ДолжностиОрганизацийЕжегодныеОтпуска
	|		ПО СотрудникиСВидамиОтпусков.Должность = ДолжностиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска = ДолжностиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций.ЕжегодныеОтпуска КАК СотрудникиОрганизацийЕжегодныеОтпуска
	|		ПО СотрудникиСВидамиОтпусков.Сотрудник = СотрудникиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска = СотрудникиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	СотрудникиСВидамиОтпусков.ОсновнойОтпуск УБЫВ,
	|	ВидЕжегодногоОтпуска,
	|	ДатаДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.ДатаОстатков КАК ДатаОстатков,
	|	ФактическиеОтпускаОрганизаций.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ФактическиеОтпускаОрганизаций.Количество КАК КоличествоДнейОтпуска,
	|	ФактическиеОтпускаОрганизаций.Период КАК ДатаНачалаОтпуска,
	|	ФактическиеОтпускаОрганизаций.ДатаОкончания КАК ДатаОкончанияОтпуска,
	|	ФактическиеОтпускаОрганизаций.Компенсация,
	|	ФактическиеОтпускаОрганизаций.Регистратор КАК Документ,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ФактическиеОтпускаОрганизаций.Регистратор) КАК ПредставлениеДокумента,
	|	ФактическиеОтпускаОрганизаций.ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпускаОрганизаций.Компенсация
	|			ТОГДА ФактическиеОтпускаОрганизаций.Период
	|		ИНАЧЕ ФактическиеОтпускаОрганизаций.ДатаОкончания
	|	КОНЕЦ КАК ДатаДляСортировки
	|ИЗ
	|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпускаОрганизаций КАК ФактическиеОтпускаОрганизаций
	|		ПО ТаблицаСотрудников.Сотрудник = ФактическиеОтпускаОрганизаций.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ТаблицаСотрудников.ЭтоЗапланированныйОтпуск
	|					ТОГДА ТаблицаСотрудников.ДатаДокумента
	|				ИНАЧЕ ТаблицаСотрудников.ДатаОстатков
	|			КОНЕЦ >= ФактическиеОтпускаОрганизаций.Период)
	|			И (НЕ(ТаблицаСотрудников.ЭтоРасчетПриУвольнении
	|					И ФактическиеОтпускаОрганизаций.Регистратор ССЫЛКА Документ.РасчетПриУвольненииРаботникаОрганизаций))
	|			И ТаблицаСотрудников.ТекущийРегистратор <> ФактическиеОтпускаОрганизаций.Регистратор,
	|	Константы КАК Константы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков,
	|	ВидЕжегодногоОтпуска,
	|	ДатаДляСортировки";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДополненнаяТаблицаДанных			= МассивРезультатов[2].Выгрузить();
	
	ТаблицаВидовОтпуска					= МассивРезультатов[4].Выгрузить();
	
	ТаблицаОстатков						= МассивРезультатов[5].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Сотрудник");
	ТаблицаОстатков.Индексы.Добавить("ДатаОстатков");
	
	ТаблицаОтклонений					= МассивРезультатов[9].Выгрузить();
	ТаблицаОтклонений.Индексы.Добавить("Сотрудник");
	ТаблицаОтклонений.Индексы.Добавить("ДатаОстатков");
	
	ТаблицаКоличестваДнейОтпускаВГод	= МассивРезультатов[10].Выгрузить();
	ТаблицаКоличестваДнейОтпускаВГод.Индексы.Добавить("Сотрудник");
	ТаблицаКоличестваДнейОтпускаВГод.Индексы.Добавить("ДатаОстатков");
	ТаблицаКоличестваДнейОтпускаВГод.Индексы.Добавить("ВидЕжегодногоОтпуска");
	
	ТаблицаФактическихОтпусков			= МассивРезультатов[11].Выгрузить();
	ТаблицаФактическихОтпусков.Колонки.Добавить("ОстаткиПоРабочимГодам");
	ТаблицаФактическихОтпусков.Индексы.Добавить("Сотрудник");
	ТаблицаФактическихОтпусков.Индексы.Добавить("ДатаОстатков");
	ТаблицаФактическихОтпусков.Индексы.Добавить("ВидЕжегодногоОтпуска");
	
	РассчитанныеОстатки = Новый ТаблицаЗначений;
	РассчитанныеОстатки.Колонки.Добавить("Сотрудник");
	РассчитанныеОстатки.Колонки.Добавить("ДатаОстатков");
	РассчитанныеОстатки.Колонки.Добавить("ОстатокНаДату");
	РассчитанныеОстатки.Колонки.Добавить("ОстатокНаДатуПоВидамЕжегодныхОтпусков",	Новый ОписаниеТипов("Массив"));
	РассчитанныеОстатки.Колонки.Добавить("ПоложенныеПриПриемеНаРаботуВидыЕжегодныхОтпусков");
	РассчитанныеОстатки.Колонки.Добавить("ДанныеРасчета",							Новый ОписаниеТипов("Массив"));
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодС");
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодПо");
	РассчитанныеОстатки.Колонки.Добавить("Примечание");
	
	РассчитанныеОстатки.Колонки.Добавить("ОбособленноеПодразделение");
	РассчитанныеОстатки.Колонки.Добавить("Подразделение");
	РассчитанныеОстатки.Колонки.Добавить("Должность");
	РассчитанныеОстатки.Колонки.Добавить("ДатаПриемаНаРаботу");
	РассчитанныеОстатки.Колонки.Добавить("ДатаУвольнения");
	РассчитанныеОстатки.Колонки.Добавить("СотрудникУволен");
	РассчитанныеОстатки.Колонки.Добавить("Пол");
	
	РассчитанныеОстатки.Колонки.Добавить("ДатаНачалаПериода",						Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("ДатаОкончанияПериода",					Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("ВидЕжегодногоОтпускаПериода",				Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	РассчитанныеОстатки.Колонки.Добавить("КоличествоКалендарныхДнейВПериоде",		Новый ОписаниеТипов("Число"));
	РассчитанныеОстатки.Колонки.Добавить("ПериодомИспользованоДнейПрошлыхЛет",		Новый ОписаниеТипов("Число"));
	РассчитанныеОстатки.Колонки.Добавить("ПериодомИспользованоДнейАвансом",			Новый ОписаниеТипов("Число"));
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодПериодаС",						Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодПериодаПо",						Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("ПримечаниеПериода",						Новый ОписаниеТипов("Строка"));
	
	ДлинаСуток = 86400;
	
	Для Каждого СтрокаДанных Из ДополненнаяТаблицаДанных Цикл
		РассчитанныйОстаток = РассчитанныеОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(РассчитанныйОстаток, СтрокаДанных);
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ДатаПриемаНаРаботу) Тогда
			Продолжить;
		КонецЕсли;
		
		// По полученным данным необходимо посчитать периоды рабочих лет.
		РабочиеГодаТекущихДанных = Новый ТаблицаЗначений();
		РабочиеГодаТекущихДанных.Колонки.Добавить("ВидЕжегодногоОтпуска");
		РабочиеГодаТекущихДанных.Колонки.Добавить("Предоставляется");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ДатаНачала");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ДатаОкончания");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ДнейСтажа");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ДнейСтажаЗаПолныйГод");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ДнейОтпуска");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ДнейОтпускаЗаПолныйГод");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ОсталосьДнейОтпускаНарастающимИтогом");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ОсталосьДнейОтпускаСУчетомВсехОтпусков");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ВведенныеОстатки");
		РабочиеГодаТекущихДанных.Колонки.Добавить("Отклонения");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ИзмененияКоличестваДнейОтпускаВГод");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ФактическиеОтпуска");
		РабочиеГодаТекущихДанных.Колонки.Добавить("ПоследнийРабочийГод");
		
		РабочиеГодаТекущихДанных.Индексы.Добавить("ВидЕжегодногоОтпуска");
		РабочиеГодаТекущихДанных.Индексы.Добавить("Предоставляется");
		
		ТаблицаВидовОтпускаПоСотруднику = ТаблицаВидовОтпуска.НайтиСтроки(Новый Структура("Сотрудник, ДатаОстатков", СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОстатков));
		
		// Остаток отпуска на запрашиваемую дату.
		ОстатокНаДатуПоВидамЕжегодныхОтпусков = Новый ТаблицаЗначений;
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("ВидЕжегодногоОтпуска");
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("КоличествоДней");
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("ЕстьОстаток");
		Для Каждого СтрокаВидаОтпуска Из ТаблицаВидовОтпускаПоСотруднику Цикл
			ОстатокНаДатуПоВидуОтпуска = ОстатокНаДатуПоВидамЕжегодныхОтпусков.Добавить();
			ОстатокНаДатуПоВидуОтпуска.ВидЕжегодногоОтпуска	= СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
			ОстатокНаДатуПоВидуОтпуска.КоличествоДней		= 0;
			ОстатокНаДатуПоВидуОтпуска.ЕстьОстаток			= Ложь;
		
			// Если для сотрудника введены остатки, то вычислять рабочие года начнем с записи по остаткам.
			ОстаткиТекущихДанных = ТаблицаОстатков.НайтиСтроки(Новый Структура("Сотрудник, ДатаОстатков, ВидЕжегодногоОтпуска", СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОстатков, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска));
			Если ОстаткиТекущихДанных.Количество() > 0 Тогда
				ОсталосьДнейОтпускаНарастающимИтогом = 0;
				Для Каждого СтрокаОстатков Из ОстаткиТекущихДанных Цикл
					ОсталосьДнейОтпускаНарастающимИтогом = ОсталосьДнейОтпускаНарастающимИтогом + СтрокаОстатков.Количество;
					ВвдеденныеОстатки = Новый Структура("ДатаОкончанияРабочегоГода, ДатаАктуальности, Количество, ПоследнийГодОстатков",
						СтрокаОстатков.ДатаОкончанияРабочегоГода, СтрокаОстатков.ДатаАктуальности, ОсталосьДнейОтпускаНарастающимИтогом,
						ОстаткиТекущихДанных.Найти(СтрокаОстатков) = ОстаткиТекущихДанных.Количество() - 1);
					
					РабочийГод = РабочиеГодаТекущихДанных.Добавить();
					РабочийГод.ВидЕжегодногоОтпуска						= СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
					РабочийГод.Предоставляется							= Истина;
					РабочийГод.ДатаНачала								= СтрокаОстатков.ДатаНачалаРабочегоГода;
					РабочийГод.ДатаОкончания							= КонецДня(СтрокаОстатков.ДатаОкончанияРабочегоГода);
					РабочийГод.ДнейСтажаЗаПолныйГод						= 0; // В остатках количество дней стажа неизвестно.
					РабочийГод.ДнейСтажа								= 0; // В остатках количество дней стажа неизвестно.
					РабочийГод.ДнейОтпуска								= СтрокаОстатков.Количество;
					РабочийГод.ДнейОтпускаЗаПолныйГод					= СтрокаОстатков.Количество;
					РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом		= СтрокаОстатков.Количество;
					РабочийГод.ОсталосьДнейОтпускаСУчетомВсехОтпусков	= СтрокаОстатков.Количество;
					РабочийГод.ПоследнийРабочийГод						= Ложь;
					РабочийГод.ВведенныеОстатки							= ВвдеденныеОстатки;
					РабочийГод.Отклонения								= Новый Массив;
					РабочийГод.ИзмененияКоличестваДнейОтпускаВГод		= Новый Массив;
					РабочийГод.ФактическиеОтпуска						= Новый Массив;
					
					ДатаНачалаРабочегоГода = РабочийГод.ДатаОкончания + 1;
				КонецЦикла;
				
			// Иначе вычислять рабочие года начнем с даты приема на работу.
			Иначе
				ДатаНачалаРабочегоГода	= СтрокаДанных.ДатаПриемаНаРаботу;
				
			КонецЕсли;
		
			// Сформируем рабочие года по умолчанию.
			МаксимальнаяДатаОкончания = СтрокаДанных.ДатаОстатков;
			Пока ДатаНачалаРабочегоГода <= СтрокаДанных.ДатаОстатков Цикл
				ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
				
				// Если сотрудник уволен и это не расчет при увольнении, то необходимо ограничить дату окончания последнего рабочего года датой увольнения.
				Если СтрокаДанных.СотрудникУволен И Не СтрокаДанных.ЭтоРасчетПриУвольнении Тогда
					МаксимальнаяДатаОкончания	= Мин(СтрокаДанных.ДатаОстатков, ДатаОкончанияРабочегоГода, КонецДня(СтрокаДанных.ДатаУвольнения));
				Иначе
					МаксимальнаяДатаОкончания	= Мин(СтрокаДанных.ДатаОстатков, ДатаОкончанияРабочегоГода);
				КонецЕсли;
				
				Если МаксимальнаяДатаОкончания <= ДатаНачалаРабочегоГода Тогда
					Прервать;
				КонецЕсли;
				
				РабочийГод = РабочиеГодаТекущихДанных.Добавить();
				РабочийГод.ВидЕжегодногоОтпуска					= СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
				РабочийГод.Предоставляется						= Истина;
				РабочийГод.ДатаНачала							= ДатаНачалаРабочегоГода;
				РабочийГод.ДатаОкончания						= ДатаОкончанияРабочегоГода;
				РабочийГод.ДнейСтажа							= (МаксимальнаяДатаОкончания - РабочийГод.ДатаНачала + 1) / ДлинаСуток;
				РабочийГод.ДнейСтажаЗаПолныйГод					= (ДобавитьМесяц(РабочийГод.ДатаНачала, 12) - 1 - РабочийГод.ДатаНачала + 1) / ДлинаСуток;
				РабочийГод.ПоследнийРабочийГод					= Ложь;
				РабочийГод.Отклонения							= Новый Массив;
				РабочийГод.ИзмененияКоличестваДнейОтпускаВГод	= Новый Массив;
				РабочийГод.ФактическиеОтпуска					= Новый Массив;
				
				ДатаНачалаРабочегоГода = КонецДня(МаксимальнаяДатаОкончания) + 1;
			КонецЦикла;
		КонецЦикла;
		
		ОтборПоСотруднику = Новый Структура("Сотрудник, ДатаОстатков", СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОстатков);
		
		Для Каждого СтрокаВидаОтпуска Из ТаблицаВидовОтпускаПоСотруднику Цикл
			ОтборПоСотрудникуИВидуОтпуска = Новый Структура("Сотрудник, ДатаОстатков, ВидЕжегодногоОтпуска", СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОстатков, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска);
			
			РабочиеГодаПоВидуОтпуска = РабочиеГодаТекущихДанных.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", СтрокаВидаОтпуска.ВидЕжегодногоОтпуска));
			
			// Продлим рабочие года.
			СмещениеРабочихЛет = 0;
			ОтклоненияТекущихДанных = ТаблицаОтклонений.НайтиСтроки(ОтборПоСотруднику);
			Если ОтклоненияТекущихДанных.Количество() > 0 Тогда
				Для Каждого РабочийГод Из РабочиеГодаПоВидуОтпуска Цикл
					РабочийГод.ДатаНачала		= РабочийГод.ДатаНачала + СмещениеРабочихЛет;
					РабочийГод.ДатаОкончания	= РабочийГод.ДатаОкончания + СмещениеРабочихЛет;
					
					Если РабочийГод.ДатаОкончания < Дата(2006, 10, 6) Тогда
						КоличествоДнейВключаемых = 7;
					Иначе
						КоличествоДнейВключаемых = 14;
					КонецЕсли;
					
					Для Каждого СтрокаОтклонения Из ОтклоненияТекущихДанных Цикл
						Если РабочийГод.ДатаНачала > СтрокаОтклонения.ДатаНачалаОтпуска
							Или РабочийГод.ДатаОкончания < СтрокаОтклонения.ДатаНачалаОтпуска Тогда
							Продолжить;
						КонецЕсли;
						
						// Если для сотрудника введены остатки в период продления рабочего года, период продления рабочего года нужно сократить
						Если РабочийГод.ВведенныеОстатки <> Неопределено И СтрокаОтклонения.ДатаОкончанияОтпуска > РабочийГод.ДатаОкончания Тогда
							СтрокаОтклонения.ДатаНачалаОтпуска			= КонецДня(РабочийГод.ДатаОкончания) + 1;
							СтрокаОтклонения.КоличествоДнейОтпуска		= (СтрокаОтклонения.ДатаОкончанияОтпуска - СтрокаОтклонения.ДатаНачалаОтпуска) / ДлинаСуток + 1;
							СтрокаОтклонения.КоличествоДнейПродления	= СтрокаОтклонения.КоличествоДнейОтпуска;
							Продолжить;
						КонецЕсли;
						
						// Если отпуск захватывает будущие даты, необходимо уменьшить количество дней продления
						Если СтрокаОтклонения.ДатаОкончанияОтпуска > МаксимальнаяДатаОкончания Тогда
							СтрокаОтклонения.КоличествоДнейПродления	= (МаксимальнаяДатаОкончания - СтрокаОтклонения.ДатаНачалаОтпуска) / ДлинаСуток + 1;
						КонецЕсли;
						
						// Отпуска без сохранения первые 7/14 дней в рабочем году не увеличивают рабочий год.
						Если СтрокаОтклонения.Состояние = Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты Тогда
							СтрокаОтклонения.КоличествоДнейПродления	= Макс(СтрокаОтклонения.КоличествоДнейОтпуска - КоличествоДнейВключаемых, 0);
							
							КоличествоДнейВключаемых					= Макс(КоличествоДнейВключаемых - СтрокаОтклонения.КоличествоДнейОтпуска, 0);
						КонецЕсли;
						
						Если СтрокаОтклонения.КоличествоДнейОтпуска > 0 Тогда
							РабочийГод.ДатаОкончания	= РабочийГод.ДатаОкончания + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
							СмещениеРабочихЛет			= СмещениеРабочихЛет + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
						КонецЕсли;
						
						Отклонение = Новый Структура("ВидЕжегодногоОтпуска,ДатаНачалаОтсутствия,ДатаОкончанияОтсутствия,ПричинаОтсутствия,КоличествоДнейОтсутствия,КоличествоДнейПродления,Документ,ДокументРасшифровка",
							РабочийГод.ВидЕжегодногоОтпуска, СтрокаОтклонения.ДатаНачалаОтпуска, СтрокаОтклонения.ДатаОкончанияОтпуска,
							СтрокаОтклонения.Состояние, СтрокаОтклонения.КоличествоДнейОтпуска, СтрокаОтклонения.КоличествоДнейПродления,
							СтрокаОтклонения.ПредставлениеДокумента, СтрокаОтклонения.Документ);
						
						РабочийГод.Отклонения.Добавить(Отклонение);
					КонецЦикла;
				КонецЦикла;
				
				// В рабочем году, на который попадает дата получения остатков необходимо уменьшить количество дней стажа.
				// Все рабочие года после даты получения остатков необходимо удалить.
				РабочиеГодаДляУдаления = Новый Массив;
				
				Для Каждого РабочийГод Из РабочиеГодаПоВидуОтпуска Цикл
					Если РабочийГод.ДатаНачала > МаксимальнаяДатаОкончания Тогда
						РабочиеГодаДляУдаления.Добавить(РабочийГод);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого РабочийГод Из РабочиеГодаДляУдаления Цикл
					РабочиеГодаТекущихДанных.Удалить(РабочийГод);
				КонецЦикла;
			КонецЕсли;
			
			РабочиеГодаПоВидуОтпуска = РабочиеГодаТекущихДанных.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", СтрокаВидаОтпуска.ВидЕжегодногоОтпуска));
			
			// Установим признак для последнего рабочего года.
			Если РабочиеГодаПоВидуОтпуска.Количество() >= 1 Тогда
				ПоследнийРабочийГод = РабочиеГодаПоВидуОтпуска[РабочиеГодаПоВидуОтпуска.Количество() - 1];
				ПоследнийРабочийГод.ПоследнийРабочийГод		= Истина;
			КонецЕсли;
			
			// Для каждого рабочего года определим положенное количество дней отпуска в год с учетом изменений дней отпусков по должности и сотруднику.
			ИзмененияКоличестваДнейВГодТекущихДанных = ТаблицаКоличестваДнейОтпускаВГод.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			Если ИзмененияКоличестваДнейВГодТекущихДанных.Количество() > 0 Тогда
				ИзмененияДляУдаления = Новый Массив;
				
				КоличествоДней			= 0;
				ТипЕжегодногоОтпуска	= "";
				Для Каждого Изменение Из ИзмененияКоличестваДнейВГодТекущихДанных Цикл
					Если Изменение.КоличествоДнейОтпускаВГод = КоличествоДней И Изменение.ТипЕжегодногоОтпуска = ТипЕжегодногоОтпуска Тогда
						ИзмененияДляУдаления.Добавить(Изменение);
						Продолжить;
					КонецЕсли;
					
					КоличествоДней			= Изменение.КоличествоДнейОтпускаВГод;
					ТипЕжегодногоОтпуска	= Изменение.ТипЕжегодногоОтпуска;
				КонецЦикла;
				
				Для Каждого Изменение Из ИзмененияДляУдаления Цикл
					ИзмененияКоличестваДнейВГодТекущихДанных.Удалить(ИзмененияКоличестваДнейВГодТекущихДанных.Найти(Изменение));
				КонецЦикла;
				
				Для Каждого РабочийГод Из РабочиеГодаПоВидуОтпуска Цикл
					// Если введены остатки, на подпериоды не разбиваем.
					Если РабочийГод.ВведенныеОстатки <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ДатаОкончанияРабочегоГода = РабочийГод.ДатаОкончания;
					Если СтрокаДанных.СотрудникУволен И Не СтрокаДанных.ЭтоРасчетПриУвольнении Тогда
						ДатаОкончанияРабочегоГода	= Мин(ДатаОкончанияРабочегоГода, КонецДня(СтрокаДанных.ДатаУвольнения));
					КонецЕсли;
					МаксимальнаяДатаОкончания = Мин(СтрокаДанных.ДатаОстатков, ДатаОкончанияРабочегоГода);
					
					// Каждый рабочий год разобьем на подпериоды, для каждого подпериода посчитаем количество дней стажа, дающего право на отпуск.
					ПодпериодыРабочегоГода = Новый ТаблицаЗначений;
					ПодпериодыРабочегоГода.Колонки.Добавить("ДатаНачала");
					ПодпериодыРабочегоГода.Колонки.Добавить("ДатаОкончания");
					ПодпериодыРабочегоГода.Колонки.Добавить("КоличествоДнейОтпускаВГод");
					ПодпериодыРабочегоГода.Колонки.Добавить("ДнейСтажа");
					
					ПервыйПодпериод		= Неопределено;
					ПредыдущийПодпериод	= Неопределено;
					Для Каждого ИзменениеКоличестваДней Из ИзмененияКоличестваДнейВГодТекущихДанных Цикл
						// Сначала заполним первый подпериод, который действует на дату начала рабочего года.
						Если ИзменениеКоличестваДней.ДатаДействия <= РабочийГод.ДатаНачала Тогда
							Если ПервыйПодпериод = Неопределено Тогда
								ПервыйПодпериод = ПодпериодыРабочегоГода.Добавить();
								ПервыйПодпериод.ДатаНачала					= РабочийГод.ДатаНачала;
							КонецЕсли;
							ПервыйПодпериод.КоличествоДнейОтпускаВГод		= ИзменениеКоличестваДней.КоличествоДнейОтпускаВГод;
							
						// Потом добавим все периоды, действующие в рабочем году.
						ИначеЕсли ИзменениеКоличестваДней.ДатаДействия > РабочийГод.ДатаНачала И ИзменениеКоличестваДней.ДатаДействия <= МаксимальнаяДатаОкончания Тогда
							Если ПервыйПодпериод <> Неопределено И Не ЗначениеЗаполнено(ПервыйПодпериод.ДатаОкончания) Тогда
								ПервыйПодпериод.ДатаОкончания				= ИзменениеКоличестваДней.ДатаДействия - 1;
							КонецЕсли;
							Если ПредыдущийПодпериод <> Неопределено И Не ЗначениеЗаполнено(ПредыдущийПодпериод.ДатаОкончания) Тогда
								ПредыдущийПодпериод.ДатаОкончания			= ИзменениеКоличестваДней.ДатаДействия - 1;
							КонецЕсли;
							
							ПредыдущийПодпериод = ПодпериодыРабочегоГода.Добавить();
							ПредыдущийПодпериод.ДатаНачала					= ИзменениеКоличестваДней.ДатаДействия;
							ПредыдущийПодпериод.КоличествоДнейОтпускаВГод	= ИзменениеКоличестваДней.КоличествоДнейОтпускаВГод;
							
							РабочийГод.ИзмененияКоличестваДнейОтпускаВГод.Добавить(ИзменениеКоличестваДней);
							
						КонецЕсли;
					КонецЦикла;
					
					// У последнего подпериода в качестве даты окончания укажем дату окончания рабочего года.
					Если ПервыйПодпериод <> Неопределено И Не ЗначениеЗаполнено(ПервыйПодпериод.ДатаОкончания) Тогда
						ПервыйПодпериод.ДатаОкончания		= МаксимальнаяДатаОкончания;
					КонецЕсли;
					Если ПредыдущийПодпериод <> Неопределено И Не ЗначениеЗаполнено(ПредыдущийПодпериод.ДатаОкончания) Тогда
						ПредыдущийПодпериод.ДатаОкончания	= МаксимальнаяДатаОкончания;
					КонецЕсли;
					
					// Для сформированных подпериодов посчитаем количество дней стажа в каждом подпериоде.
					Для Каждого Подпериод Из ПодпериодыРабочегоГода Цикл
						Подпериод.ДнейСтажа = ?(Подпериод.КоличествоДнейОтпускаВГод <> 0, (Подпериод.ДатаОкончания - Подпериод.ДатаНачала + 1) / ДлинаСуток, 0);
					КонецЦикла;
					
					// Из сформированных подпериодов необходимо исключить продления рабочего года, уменьшив количество дней стажа.
					Для Каждого СтрокаОтклонения Из ОтклоненияТекущихДанных Цикл
						КоличествоДнейПродленияОсталось = СтрокаОтклонения.КоличествоДнейПродления;
						Если КоличествоДнейПродленияОсталось = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого Подпериод Из ПодпериодыРабочегоГода Цикл
							Если КоличествоДнейПродленияОсталось = 0 Тогда
								Прервать;
							КонецЕсли;
							Если Подпериод.КоличествоДнейОтпускаВГод = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если Подпериод.ДатаНачала > СтрокаОтклонения.ДатаОкончанияОтпуска
								Или Подпериод.ДатаОкончания < СтрокаОтклонения.ДатаНачалаОтпуска Тогда
								Продолжить;
							КонецЕсли;
							
							Подпериод.ДнейСтажа = Подпериод.ДнейСтажа - КоличествоДнейПродленияОсталось;
						КонецЦикла;
					КонецЦикла;
					
					// Расчет количества дней отпуска в год, которые заработал сотрудник по каждому количеству дней отпуска в год.
					РабочийГод.ДнейОтпуска = 0;
					ПодпериодыСгруппированные = Новый ТаблицаЗначений;
					ПодпериодыСгруппированные.Колонки.Добавить("ДатаОтсчета");
					ПодпериодыСгруппированные.Колонки.Добавить("КоличествоДнейОтпускаВГод");
					ПодпериодыСгруппированные.Колонки.Добавить("ДнейСтажа");
					
					Для Каждого Подпериод Из ПодпериодыРабочегоГода Цикл
						ПодпериодНовый = ПодпериодыСгруппированные.Найти(Подпериод.КоличествоДнейОтпускаВГод, "КоличествоДнейОтпускаВГод");
						Если ПодпериодНовый = Неопределено Тогда
							ПодпериодНовый = ПодпериодыСгруппированные.Добавить();
							ПодпериодНовый.ДатаОтсчета					= Подпериод.ДатаНачала;
							ПодпериодНовый.КоличествоДнейОтпускаВГод	= Подпериод.КоличествоДнейОтпускаВГод;
							ПодпериодНовый.ДнейСтажа					= 0;
						КонецЕсли;
						Если ПодпериодНовый.ДатаОтсчета > Подпериод.ДатаНачала Тогда
							ПодпериодНовый.ДатаОтсчета					= Подпериод.ДатаНачала;
						КонецЕсли;
						ПодпериодНовый.ДнейСтажа						= ПодпериодНовый.ДнейСтажа + Подпериод.ДнейСтажа;
					КонецЦикла;
					
					Для Каждого Подпериод Из ПодпериодыСгруппированные Цикл
						Если Подпериод.КоличествоДнейОтпускаВГод = 0 Тогда
							Продолжить;
						КонецЕсли;
						Если Подпериод.ДнейСтажа = РабочийГод.ДнейСтажаЗаПолныйГод Тогда
							РабочийГод.ДнейОтпуска = Подпериод.КоличествоДнейОтпускаВГод;
							Продолжить;
						КонецЕсли;
						
						ДатаОкончанияПоСтажу			= Подпериод.ДатаОтсчета + (Подпериод.ДнейСтажа * ДлинаСуток) - ДлинаСуток;
						РабочийГод.ДнейОтпуска			= РабочийГод.ДнейОтпуска + ДнейОтпускаВПериоде(Подпериод.ДатаОтсчета, ДатаОкончанияПоСтажу, Подпериод.КоличествоДнейОтпускаВГод);
					КонецЦикла;
					
					РабочийГод.Предоставляется			= ПодпериодыРабочегоГода.Итог("КоличествоДнейОтпускаВГод") > 0;
					РабочийГод.ДнейОтпуска				= Окр(РабочийГод.ДнейОтпуска, 2);
					РабочийГод.ДнейОтпускаЗаПолныйГод	= ПодпериодыРабочегоГода.Итог("КоличествоДнейОтпускаВГод");
					
					РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом		= РабочийГод.ДнейОтпуска;
					РабочийГод.ОсталосьДнейОтпускаСУчетомВсехОтпусков	= РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом;
				КонецЦикла;
			КонецЕсли;
			
			// Если стаж уволенного сотрудника меньше года, необходимо скорректировать количество дней отпуска в год.
			Если (СтрокаДанных.СотрудникУволен Или СтрокаДанных.ЭтоРасчетПриУвольнении) И РабочиеГодаПоВидуОтпуска.Количество() = 1 И ОстаткиТекущихДанных.Количество() = 0 Тогда
				РабочийГод = РабочиеГодаПоВидуОтпуска[0];
				Если РабочийГод.ДнейСтажаЗаПолныйГод - РабочийГод.ДнейСтажа <= 31 Тогда
					РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом		= РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом + (РабочийГод.ДнейОтпускаЗаПолныйГод - РабочийГод.ДнейОтпуска);
					РабочийГод.ОсталосьДнейОтпускаСУчетомВсехОтпусков	= РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом;
					РабочийГод.ДнейОтпуска								= РабочийГод.ДнейОтпускаЗаПолныйГод;
				КонецЕсли;
			КонецЕсли;
			
			// Расчет остатка отпуска по виду отпуска на переданную в функцию дату.
			ОстатокНаДатуПоВидуОтпуска		= ОстатокНаДатуПоВидамЕжегодныхОтпусков.Найти(СтрокаВидаОтпуска.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска");
			
			// Расчет остатка отпуска для каждого рабочего года нарастающим итогом с учетом фактических отпусков.
			// Расчет рабочего года для каждого фактического отпуска.
			ФактическиеОтпускаТекущихДанных = ТаблицаФактическихОтпусков.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			Для Каждого РабочийГод Из РабочиеГодаПоВидуОтпуска Цикл
				ОстатокТекущегоГода								= РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом;
				РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом	= РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом + ОстатокНаДатуПоВидуОтпуска.КоличествоДней;
				ОстатокНаДатуПоВидуОтпуска.КоличествоДней		= ОстатокНаДатуПоВидуОтпуска.КоличествоДней + ОстатокТекущегоГода;
				
				Если РабочийГод.ВведенныеОстатки <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Если сотруднику перестали предоставлять отпуск, а остаток отпуска по этомку виду отпуска не равен нулю,
				//  будем сообщать об этом в справке по отпуску.
				Если ОстатокНаДатуПоВидуОтпуска.КоличествоДней <> 0 Тогда
					РабочийГод.Предоставляется = Истина;
				КонецЕсли;
				
				// Необходимо распределить количество фактических дней отпуска между рабочими годами, ориентируясь на дату окончания отпуска.
				Для Каждого СтрокаФактическогоОтпуска Из ФактическиеОтпускаТекущихДанных Цикл
					// Пропуск всех отпусков, не входящих в текущий рабочий год.
					// Отпуска по дате окончания, компенсация по дате начала.
					Если СтрокаФактическогоОтпуска.Компенсация Тогда
						ДатаОтпуска = СтрокаФактическогоОтпуска.ДатаНачалаОтпуска;
					Иначе
						ДатаОтпуска = СтрокаФактическогоОтпуска.ДатаОкончанияОтпуска;
					КонецЕсли;
					
					Если ДатаОтпуска < РабочийГод.ДатаНачала Или ДатаОтпуска > РабочийГод.ДатаОкончания И Не РабочийГод.ПоследнийРабочийГод Тогда
						Продолжить;
					КонецЕсли;
					
					РабочийГод.Предоставляется = Истина;
					
					// Обход в цикле всех рабочих лет и уменьшение остатка отпуска каждого года для вычисления рабочего года отпуска
					ОсталосьСписать		= СтрокаФактическогоОтпуска.КоличествоДнейОтпуска;
					РабочийГодС			= РабочийГод.ДатаНачала;
					РабочийГодПо		= РабочийГод.ДатаОкончания;
					ПервыйГодСОстатками	= Истина;
					Для Каждого РабочийГодФактическогоОтпуска Из РабочиеГодаПоВидуОтпуска Цикл
						Если РабочийГодФактическогоОтпуска.ОсталосьДнейОтпускаСУчетомВсехОтпусков = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Если ПервыйГодСОстатками Тогда
							РабочийГодС			= РабочийГодФактическогоОтпуска.ДатаНачала;
							ПервыйГодСОстатками	= Ложь;
						КонецЕсли;
						РабочийГодПо			= РабочийГодФактическогоОтпуска.ДатаОкончания;
						
						КоличествоДляСписыванияВЭтомГоду = Мин(РабочийГодФактическогоОтпуска.ОсталосьДнейОтпускаСУчетомВсехОтпусков, ОсталосьСписать);
						РабочийГодФактическогоОтпуска.ОсталосьДнейОтпускаСУчетомВсехОтпусков = РабочийГодФактическогоОтпуска.ОсталосьДнейОтпускаСУчетомВсехОтпусков - КоличествоДляСписыванияВЭтомГоду;
						ОсталосьСписать = ОсталосьСписать - КоличествоДляСписыванияВЭтомГоду;
						Если ОсталосьСписать = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если РабочиеГодаПоВидуОтпуска.Количество() > 0 Тогда
						БудетЗаработаноДоКонцаРабочегоГода	= РабочийГодФактическогоОтпуска.ДнейОтпускаЗаПолныйГод - РабочийГодФактическогоОтпуска.ДнейОтпуска;
						ОстатокНаКонецГода					= БудетЗаработаноДоКонцаРабочегоГода + РабочийГодФактическогоОтпуска.ОсталосьДнейОтпускаНарастающимИтогом;
						
						Если ОсталосьСписать > ОстатокНаКонецГода Тогда
							РабочийГодПо	= ДобавитьМесяц(РабочийГодПо, 12);
						КонецЕсли;
					КонецЕсли;
					
					// Посчитаем дни отпуска, оставшиеся с прошлых лет
					Если СтрокаФактическогоОтпуска.КоличествоДнейОтпуска > 0 Тогда
						ИспользованоДнейПрошлыхЛет		= Макс(0, Мин(ОстатокНаДатуПоВидуОтпуска.КоличествоДней - ОстатокТекущегоГода, СтрокаФактическогоОтпуска.КоличествоДнейОтпуска));
					Иначе
						ИспользованоДнейПрошлыхЛет		= 0;
					КонецЕсли;
					
					// Уменьшение доступного остатка: отпуска на переданную в функцию дату и остатка рабочего года.
					ОстатокНаДатуПоВидуОтпуска.КоличествоДней		= ОстатокНаДатуПоВидуОтпуска.КоличествоДней - СтрокаФактическогоОтпуска.КоличествоДнейОтпуска;
					РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом	= РабочийГод.ОсталосьДнейОтпускаНарастающимИтогом - СтрокаФактическогоОтпуска.КоличествоДнейОтпуска;
					
					// Посчитаем дни отпуска, использованные авансом
					Если СтрокаФактическогоОтпуска.КоличествоДнейОтпуска > 0 Тогда
						ДатаНачалаПослеПродления = РабочийГод.ДатаНачала;
						Для Каждого Отклонение Из РабочийГод.Отклонения Цикл
							Если ДатаОтпуска < Отклонение.ДатаНачалаОтсутствия Тогда
								Продолжить;
							КонецЕсли;
							ДатаНачалаПослеПродления = ДатаНачалаПослеПродления + Отклонение.КоличествоДнейПродления * ДлинаСуток;
						КонецЦикла;
						ЗаработаноСНачалаРабочегоГода	= Окр(ДнейОтпускаВПериоде(ДатаНачалаПослеПродления, ДатаОтпуска, РабочийГод.ДнейОтпускаЗаПолныйГод), 2);
						ИспользованоДнейАвансом			= Макс(Мин(ОстатокНаДатуПоВидуОтпуска.КоличествоДней - ОстатокТекущегоГода + ЗаработаноСНачалаРабочегоГода, 0), -СтрокаФактическогоОтпуска.КоличествоДнейОтпуска) * -1;
					Иначе
						ИспользованоДнейАвансом			= 0;
					КонецЕсли;
					
					// Добавление отпуска в список отпусков текущего рабочего года.
					ФактическийОтпуск = Новый Структура("ВидЕжегодногоОтпуска,ДатаНачалаОтпуска,ДатаОкончанияОтпуска,КоличествоДнейОтпуска,ИспользованоДнейПрошлыхЛет,ИспользованоДнейАвансом,РабочийГодС,РабочийГодПо,Компенсация,ДатаРегистрации,Документ,ДокументРасшифровка",
						СтрокаФактическогоОтпуска.ВидЕжегодногоОтпуска, СтрокаФактическогоОтпуска.ДатаНачалаОтпуска, СтрокаФактическогоОтпуска.ДатаОкончанияОтпуска, СтрокаФактическогоОтпуска.КоличествоДнейОтпуска,
						ИспользованоДнейПрошлыхЛет, ИспользованоДнейАвансом,
						РабочийГодС, РабочийГодПо,
						СтрокаФактическогоОтпуска.Компенсация, СтрокаФактическогоОтпуска.ДатаРегистрации,
						СтрокаФактическогоОтпуска.ПредставлениеДокумента, СтрокаФактическогоОтпуска.Документ);
						
					Если НачалоДня(СтрокаДанных.ДатаНачалаПериода) = НачалоДня(СтрокаФактическогоОтпуска.ДатаНачалаОтпуска)
						И НачалоДня(СтрокаДанных.ДатаОкончанияПериода) = НачалоДня(СтрокаФактическогоОтпуска.ДатаОкончанияОтпуска)
						И СтрокаДанных.ВидЕжегодногоОтпуска.Пустая() Или СтрокаДанных.ВидЕжегодногоОтпуска = СтрокаФактическогоОтпуска.ВидЕжегодногоОтпуска Тогда
						РассчитанныйОстаток.КоличествоКалендарныхДнейВПериоде	= ФактическийОтпуск.КоличествоДнейОтпуска;
						РассчитанныйОстаток.РабочийГодПериодаС					= ФактическийОтпуск.РабочийГодС;
						РассчитанныйОстаток.РабочийГодПериодаПо					= ФактическийОтпуск.РабочийГодПо;
						РассчитанныйОстаток.ВидЕжегодногоОтпускаПериода			= ФактическийОтпуск.ВидЕжегодногоОтпуска;
						РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет	= ФактическийОтпуск.ИспользованоДнейПрошлыхЛет;
						РассчитанныйОстаток.ПериодомИспользованоДнейАвансом		= ФактическийОтпуск.ИспользованоДнейАвансом;
						РассчитанныйОстаток.ПримечаниеПериода					= ОписаниеПериодаОтпуска(РассчитанныйОстаток.КоличествоКалендарныхДнейВПериоде, РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет, РассчитанныйОстаток.ПериодомИспользованоДнейАвансом, РассчитанныйОстаток.ДатаПриемаНаРаботу, РассчитанныйОстаток.ДатаОстатков);
					КонецЕсли;
					
					РабочийГод.ФактическиеОтпуска.Добавить(ФактическийОтпуск);
				КонецЦикла;
			КонецЦикла;
			
			ОстатокНаДатуПоВидуОтпуска.ЕстьОстаток	= ОстатокНаДатуПоВидуОтпуска.КоличествоДней <> 0;
		КонецЦикла;
		
		РассчитанныйОстаток.ДатаОстатков										= НачалоДня(РассчитанныйОстаток.ДатаОстатков);
		РассчитанныйОстаток.ОстатокНаДату										= ОстатокНаДатуПоВидамЕжегодныхОтпусков.Итог("КоличествоДней");
		РассчитанныйОстаток.ОстатокНаДатуПоВидамЕжегодныхОтпусков				= ОстатокНаДатуПоВидамЕжегодныхОтпусков.НайтиСтроки(Новый Структура("ЕстьОстаток", Истина));
		РассчитанныйОстаток.ДанныеРасчета										= РабочиеГодаТекущихДанных.НайтиСтроки(Новый Структура("Предоставляется", Истина));
		РассчитанныйОстаток.ПоложенныеПриПриемеНаРаботуВидыЕжегодныхОтпусков	= ТаблицаКоличестваДнейОтпускаВГод.НайтиСтроки(Новый Структура("Сотрудник, ДатаОстатков, ДатаДействия, Предоставляется", СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОстатков, СтрокаДанных.ДатаПриемаНаРаботу, Истина));
		
		// Округление остатка отпуска если это не расчет при увольнении или если включена необходимость округления при компенсации.
		Если Не СтрокаДанных.ЭтоРасчетПриУвольнении И Не СтрокаДанных.СотрудникУволен Или СтрокаДанных.ОкруглятьДниОтпускаПриКомпенсации Тогда
			Если РассчитанныйОстаток.ОстатокНаДату >= 0 Тогда
				РассчитанныйОстаток.ОстатокНаДату	= Цел(РассчитанныйОстаток.ОстатокНаДату) + ?(Цел(РассчитанныйОстаток.ОстатокНаДату) = РассчитанныйОстаток.ОстатокНаДату, 0, 1);
			Иначе
				РассчитанныйОстаток.ОстатокНаДату	= Цел(РассчитанныйОстаток.ОстатокНаДату);
			КонецЕсли;
		КонецЕсли;
		
		// Рабочий год текущих остатков
		ОсталосьСписать						= РассчитанныйОстаток.ОстатокНаДату;
		РассчитанныйОстаток.РабочийГодС		= СтрокаДанных.ДатаПриемаНаРаботу;
		РассчитанныйОстаток.РабочийГодПо	= ДобавитьМесяц(РассчитанныйОстаток.РабочийГодС, 12) - 1;
		РассчитанныйОстаток.Примечание		= Строка(РассчитанныйОстаток.ОстатокНаДату) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней", РассчитанныйОстаток.ОстатокНаДату);
		ПервыйГодСОстатками	= Истина;
		Для Каждого РабочийГодДатыОстатков Из РабочиеГодаТекущихДанных Цикл
			Если РабочийГодДатыОстатков.ОсталосьДнейОтпускаСУчетомВсехОтпусков = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПервыйГодСОстатками Тогда
				РассчитанныйОстаток.РабочийГодС	= РабочийГодДатыОстатков.ДатаНачала;
				ПервыйГодСОстатками	= Ложь;
			КонецЕсли;
			РассчитанныйОстаток.РабочийГодПо	= РабочийГодДатыОстатков.ДатаОкончания;
			
			КоличествоДляСписыванияВЭтомГоду = Мин(РабочийГодДатыОстатков.ОсталосьДнейОтпускаСУчетомВсехОтпусков, ОсталосьСписать);
			ОсталосьСписать = ОсталосьСписать - КоличествоДляСписыванияВЭтомГоду;
			Если ОсталосьСписать = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаДанных.ЭтоРасчетПриУвольнении И РассчитанныйОстаток.РабочийГодПо > СтрокаДанных.ДатаОстатков Тогда
			РассчитанныйОстаток.РабочийГодПо	= КонецДня(СтрокаДанных.ДатаОстатков);
		КонецЕсли;
		
		// Если в процедуру передан период отпуска, необходимо посчитать как этот отпуск будет списан
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаНачалаПериода) И ЗначениеЗаполнено(СтрокаДанных.ДатаОкончанияПериода) И Не ЗначениеЗаполнено(РассчитанныйОстаток.РабочийГодПериодаС) Тогда
			Если СтрокаДанных.ВидЕжегодногоОтпуска.Пустая() Тогда
				РабочиеГодаПоВидуОтпуска = РабочиеГодаТекущихДанных;
			Иначе
				РабочиеГодаПоВидуОтпуска = РабочиеГодаТекущихДанных.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", СтрокаДанных.ВидЕжегодногоОтпуска));
			КонецЕсли;
			
			ОсталосьСписать										= РассчитанныйОстаток.КоличествоКалендарныхДнейВПериоде;
			РассчитанныйОстаток.РабочийГодПериодаС				= СтрокаДанных.ДатаПриемаНаРаботу;
			РассчитанныйОстаток.РабочийГодПериодаПо				= ДобавитьМесяц(РассчитанныйОстаток.РабочийГодПериодаС, 12) - 1;
			РассчитанныйОстаток.ВидЕжегодногоОтпускаПериода		= СтрокаДанных.ВидЕжегодногоОтпуска;
			ПервыйГодСОстатками	= Истина;
			
			Для Каждого РабочийГодПереданногоПериода Из РабочиеГодаПоВидуОтпуска Цикл
				Если ПервыйГодСОстатками Тогда
					РассчитанныйОстаток.РабочийГодПериодаС							= РабочийГодПереданногоПериода.ДатаНачала;
					Если РабочийГодПереданногоПериода.ОсталосьДнейОтпускаСУчетомВсехОтпусков <> 0 Тогда
						ПервыйГодСОстатками	= Ложь;
					КонецЕсли;
				КонецЕсли;
				РассчитанныйОстаток.РабочийГодПериодаПо								= РабочийГодПереданногоПериода.ДатаОкончания;
				
				Если РабочийГодПереданногоПериода.ОсталосьДнейОтпускаСУчетомВсехОтпусков = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если РабочийГодПереданногоПериода.ПоследнийРабочийГод Тогда
					РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет			= РассчитанныйОстаток.КоличествоКалендарныхДнейВПериоде - ОсталосьСписать;
				Иначе
					РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет			= РассчитанныйОстаток.КоличествоКалендарныхДнейВПериоде;
				КонецЕсли;
				
				КоличествоДляСписыванияВЭтомГоду = Мин(РабочийГодПереданногоПериода.ОсталосьДнейОтпускаСУчетомВсехОтпусков, ОсталосьСписать);
				РабочийГодПереданногоПериода.ОсталосьДнейОтпускаНарастающимИтогом	= РабочийГодПереданногоПериода.ОсталосьДнейОтпускаНарастающимИтогом - КоличествоДляСписыванияВЭтомГоду;
				РабочийГодПереданногоПериода.ОсталосьДнейОтпускаСУчетомВсехОтпусков	= РабочийГодПереданногоПериода.ОсталосьДнейОтпускаСУчетомВсехОтпусков - КоличествоДляСписыванияВЭтомГоду;
				ОсталосьСписать = ОсталосьСписать - КоличествоДляСписыванияВЭтомГоду;
				Если ОсталосьСписать = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если РабочиеГодаПоВидуОтпуска.Количество() > 0 Тогда
				БудетЗаработаноДоКонцаРабочегоГода	= РабочийГодПереданногоПериода.ДнейОтпускаЗаПолныйГод - РабочийГодПереданногоПериода.ДнейОтпуска;
				ОстатокНаКонецГода					= БудетЗаработаноДоКонцаРабочегоГода + РабочийГодПереданногоПериода.ОсталосьДнейОтпускаНарастающимИтогом;
				
				Если ОсталосьСписать > ОстатокНаКонецГода Тогда
					РассчитанныйОстаток.РабочийГодПериодаПо		= ДобавитьМесяц(РабочийГодПереданногоПериода.ДатаОкончания, 12);
				КонецЕсли;
			КонецЕсли;
			Если СтрокаДанных.ЭтоРасчетПриУвольнении И РассчитанныйОстаток.РабочийГодПериодаПо > СтрокаДанных.ДатаОстатков Тогда
				РассчитанныйОстаток.РабочийГодПериодаПо			= КонецДня(СтрокаДанных.ДатаОстатков);
			КонецЕсли;
			РассчитанныйОстаток.ПериодомИспользованоДнейАвансом	= ОсталосьСписать;
			
			РассчитанныйОстаток.ПримечаниеПериода				= ОписаниеПериодаОтпуска(РассчитанныйОстаток.КоличествоКалендарныхДнейВПериоде, РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет, РассчитанныйОстаток.ПериодомИспользованоДнейАвансом, РассчитанныйОстаток.ДатаПриемаНаРаботу, РассчитанныйОстаток.ДатаОстатков);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РассчитанныеОстатки;
	
КонецФункции

// Процедуры для списания фактических отпусков

Процедура СписатьФактическиеОтпускаКадровымиПриказами(Знач Регистратор, Знач Организация) Экспорт
	
	ПорядокСписанияФактическихОтпусков = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПорядокСписанияФактическихОтпусков");
	Если ПорядокСписанияФактическихОтпусков <> Перечисления.ПорядокСписанияФактическихОтпусков.КадровымиПриказами Тогда
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.Записать();
		Возврат;
	КонецЕсли;
	
	// Если состояние = ЕжегодныйОтпуск и заполнен ПериодЗавершения, отпуск списывается регистратором;
	// Для всех других состояний или пустого ПериодЗавершения отпуск списывается тем регистратором,
	//  который прекращает отпуск;
	// Если пользователь вводит "Возврат на работу", тем самым досрочно прекращая отпуск, документ
	//  делает корректирующее движение. Остальные документы корректирующие движения не делают.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕжегодныеОтпуска.Сотрудник КАК Сотрудник,
	|	ЕжегодныеОтпуска.Период КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(ЕжегодныеОтпуска.ПериодЗавершения, СЕКУНДА, -1) КАК ДатаОкончания,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни) КАК ВидОсновногоОтпуска,
	|	ЕжегодныеОтпуска.ДатаНачалаДоп,
	|	ЕжегодныеОтпуска.ВидДополнительногоОтпуска,
	|	ЛОЖЬ КАК КорректироватьОтпуск,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК НоваяДатаОкончания,
	|	ЕжегодныеОтпуска.Регистратор КАК РегистраторНачалаОтпуска
	|ПОМЕСТИТЬ ВТ_ОтпускаСотрудников
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК ЕжегодныеОтпуска
	|ГДЕ
	|	ЕжегодныеОтпуска.Регистратор = &Регистратор
	|	И (НЕ ЕжегодныеОтпуска.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|	И ЕжегодныеОтпуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕжегодныеОтпускаНачало.Сотрудник,
	|	ЕжегодныеОтпускаНачало.Период,
	|	ВЫБОР
	|		КОГДА ЕжегодныеОтпускаНачало.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕжегодныеОтпускаОкончание.Период, СЕКУНДА, -1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ЕжегодныеОтпускаНачало.ПериодЗавершения, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни),
	|	ЕжегодныеОтпускаНачало.ДатаНачалаДоп,
	|	ЕжегодныеОтпускаНачало.ВидДополнительногоОтпуска,
	|	ВЫБОР
	|		КОГДА ЕжегодныеОтпускаОкончание.Регистратор ССЫЛКА Документ.ВозвратНаРаботуОрганизаций
	|				И ЕжегодныеОтпускаНачало.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕжегодныеОтпускаОкончание.Регистратор ССЫЛКА Документ.ВозвратНаРаботуОрганизаций
	|				И ЕжегодныеОтпускаНачало.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕжегодныеОтпускаОкончание.Период, СЕКУНДА, -1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ЕжегодныеОтпускаНачало.Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕжегодныеОтпускаОкончание.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(ЕжегодныеОтпускаНачало.Период) КАК ДатаНачала,
	|		ЕжегодныеОтпускаОкончание.Период КАК ДатаОкончания
	|	ИЗ
	|		РегистрСведений.СостояниеРаботниковОрганизаций КАК ЕжегодныеОтпускаНачало
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ЕжегодныеОтпускаОкончание
	|			ПО ЕжегодныеОтпускаНачало.Сотрудник = ЕжегодныеОтпускаОкончание.Сотрудник
	|				И ЕжегодныеОтпускаНачало.Период < ЕжегодныеОтпускаОкончание.Период
	|				И (ЕжегодныеОтпускаОкончание.Регистратор = &Регистратор)
	|				И (ЕжегодныеОтпускаОкончание.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЕжегодныеОтпускаОкончание.Сотрудник,
	|		ЕжегодныеОтпускаОкончание.Период) КАК ЕжегодныеОтпускаНачалоСрез
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ЕжегодныеОтпускаНачало
	|		ПО ЕжегодныеОтпускаНачалоСрез.Сотрудник = ЕжегодныеОтпускаНачало.Сотрудник
	|			И ЕжегодныеОтпускаНачалоСрез.ДатаНачала = ЕжегодныеОтпускаНачало.Период
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ЕжегодныеОтпускаОкончание
	|		ПО ЕжегодныеОтпускаНачалоСрез.Сотрудник = ЕжегодныеОтпускаОкончание.Сотрудник
	|			И ЕжегодныеОтпускаНачалоСрез.ДатаОкончания = ЕжегодныеОтпускаОкончание.Период
	|ГДЕ
	|	ЕжегодныеОтпускаНачало.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|	И ВЫБОР
	|			КОГДА ЕжегодныеОтпускаНачало.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕжегодныеОтпускаОкончание.Регистратор ССЫЛКА Документ.ВозвратНаРаботуОрганизаций
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЕжегодныеОтпускаОкончание.Регистратор ССЫЛКА Документ.ВозвратНаРаботуОрганизаций
	|					И ЕжегодныеОтпускаНачало.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЕжегодныеОтпускаНачало.ПериодЗавершения > ЕжегодныеОтпускаОкончание.Период
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускаСотрудников.Сотрудник,
	|	ОтпускаСотрудников.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|				ИЛИ ОтпускаСотрудников.ДатаОкончания < ОтпускаСотрудников.ДатаНачалаДоп
	|			ТОГДА ОтпускаСотрудников.ДатаОкончания
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	ОтпускаСотрудников.ВидОсновногоОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.КорректироватьОтпуск
	|				И ОтпускаСотрудников.НоваяДатаОкончания < ВЫБОР
	|					КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|						ТОГДА ОтпускаСотрудников.ДатаОкончания
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|				КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорректироватьОтпуск,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.НоваяДатаОкончания < ВЫБОР
	|				КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|					ТОГДА ОтпускаСотрудников.ДатаОкончания
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|			КОНЕЦ
	|			ТОГДА ОтпускаСотрудников.НоваяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК НоваяДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА ОтпускаСотрудников.ВидОсновногоОтпуска.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|				ТОГДА ЕСТЬNULL(ПроизводственныйКалендарь.Шестидневка, 0)
	|			ИНАЧЕ ЕСТЬNULL(ПроизводственныйКалендарь.КалендарныеДни, 0)
	|		КОНЕЦ) КАК ДнейОтпуска,
	|	ОтпускаСотрудников.РегистраторНачалаОтпуска
	|ПОМЕСТИТЬ ВТ_КадровыеОтпуска
	|ИЗ
	|	ВТ_ОтпускаСотрудников КАК ОтпускаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаСотрудников.ДатаНачала И ВЫБОР
	|				КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|						ИЛИ ОтпускаСотрудников.ДатаОкончания < ОтпускаСотрудников.ДатаНачалаДоп
	|					ТОГДА ОтпускаСотрудников.ДатаОкончания
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|			КОНЕЦ)
	|ГДЕ
	|	(НЕ ОтпускаСотрудников.ВидОсновногоОтпуска.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускаСотрудников.Сотрудник,
	|	ОтпускаСотрудников.ДатаНачала,
	|	ОтпускаСотрудников.ВидОсновногоОтпуска.ВидЕжегодногоОтпуска,
	|	ОтпускаСотрудников.РегистраторНачалаОтпуска,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|				ИЛИ ОтпускаСотрудников.ДатаОкончания < ОтпускаСотрудников.ДатаНачалаДоп
	|			ТОГДА ОтпускаСотрудников.ДатаОкончания
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.КорректироватьОтпуск
	|				И ОтпускаСотрудников.НоваяДатаОкончания < ВЫБОР
	|					КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|						ТОГДА ОтпускаСотрудников.ДатаОкончания
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|				КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.НоваяДатаОкончания < ВЫБОР
	|				КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|					ТОГДА ОтпускаСотрудников.ДатаОкончания
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|			КОНЕЦ
	|			ТОГДА ОтпускаСотрудников.НоваяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускаСотрудников.Сотрудник,
	|	ОтпускаСотрудников.ДатаНачалаДоп,
	|	ОтпускаСотрудников.ДатаОкончания,
	|	ОтпускаСотрудников.ВидДополнительногоОтпуска.ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.КорректироватьОтпуск
	|				И ОтпускаСотрудников.НоваяДатаОкончания < ОтпускаСотрудников.ДатаОкончания
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.НоваяДатаОкончания < ОтпускаСотрудников.ДатаОкончания
	|			ТОГДА ОтпускаСотрудников.НоваяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	СУММА(ВЫБОР
	|			КОГДА ОтпускаСотрудников.ВидДополнительногоОтпуска.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|				ТОГДА ЕСТЬNULL(ПроизводственныйКалендарь.Шестидневка, 0)
	|			ИНАЧЕ ЕСТЬNULL(ПроизводственныйКалендарь.КалендарныеДни, 0)
	|		КОНЕЦ),
	|	ОтпускаСотрудников.РегистраторНачалаОтпуска
	|ИЗ
	|	ВТ_ОтпускаСотрудников КАК ОтпускаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаСотрудников.ДатаНачалаДоп И ОтпускаСотрудников.ДатаОкончания)
	|ГДЕ
	|	(НЕ ОтпускаСотрудников.ВидДополнительногоОтпуска.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка))
	|	И (НЕ ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускаСотрудников.Сотрудник,
	|	ОтпускаСотрудников.ДатаНачалаДоп,
	|	ОтпускаСотрудников.ДатаОкончания,
	|	ОтпускаСотрудников.ВидДополнительногоОтпуска.ВидЕжегодногоОтпуска,
	|	ОтпускаСотрудников.РегистраторНачалаОтпуска,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.КорректироватьОтпуск
	|				И ОтпускаСотрудников.НоваяДатаОкончания < ОтпускаСотрудников.ДатаОкончания
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.НоваяДатаОкончания < ОтпускаСотрудников.ДатаОкончания
	|			ТОГДА ОтпускаСотрудников.НоваяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостояниеРаботниковОрганизаций.Регистратор.Дата КАК ДатаРегистрации
	|ПОМЕСТИТЬ ВТ_ДатаРегистрации
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|ГДЕ
	|	СостояниеРаботниковОрганизаций.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отпуска.Сотрудник КАК Сотрудник,
	|	Отпуска.ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА Отпуска.КорректироватьОтпуск
	|			ТОГДА Отпуска.ДатаНачала
	|		ИНАЧЕ Отпуска.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	Отпуска.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА Отпуска.КорректироватьОтпуск
	|			ТОГДА Отпуска.НовоеКоличествоКадровыхДнейОтпуска - Отпуска.КадровыхДнейОтпуска
	|		ИНАЧЕ Отпуска.КадровыхДнейОтпуска - Отпуска.РасчетныхДнейОтпуска
	|	КОНЕЦ КАК ДнейОтпуска,
	|	ВТ_ДатаРегистрации.ДатаРегистрации
	|ИЗ
	|	(ВЫБРАТЬ
	|		КадровыеОтпуска.Сотрудник КАК Сотрудник,
	|		КадровыеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		КадровыеОтпуска.ДатаНачала КАК ДатаНачала,
	|		КадровыеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|		СУММА(ЕСТЬNULL(ФактическиеОтпускаОрганизаций.Количество, 0)) КАК РасчетныхДнейОтпуска,
	|		КадровыеОтпуска.ДнейОтпуска КАК КадровыхДнейОтпуска,
	|		КадровыеОтпуска.НовоеКоличествоДнейОтпуска КАК НовоеКоличествоКадровыхДнейОтпуска,
	|		КадровыеОтпуска.КорректироватьОтпуск КАК КорректироватьОтпуск
	|	ИЗ
	|		(ВЫБРАТЬ
	|			КадровыеОтпуска.Сотрудник КАК Сотрудник,
	|			КадровыеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|			ВЫБОР
	|				КОГДА КадровыеОтпуска.КорректироватьОтпуск
	|					ТОГДА ДОБАВИТЬКДАТЕ(КадровыеОтпуска.НоваяДатаОкончания, СЕКУНДА, 1)
	|				ИНАЧЕ КадровыеОтпуска.ДатаНачала
	|			КОНЕЦ КАК ДатаНачала,
	|			КадровыеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|			КадровыеОтпуска.ДнейОтпуска КАК ДнейОтпуска,
	|			КадровыеОтпуска.КорректироватьОтпуск КАК КорректироватьОтпуск,
	|			СУММА(ВЫБОР
	|					КОГДА КадровыеОтпуска.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|						ТОГДА ЕСТЬNULL(ПроизводственныйКалендарьКорректировка.Шестидневка, 0)
	|					ИНАЧЕ ЕСТЬNULL(ПроизводственныйКалендарьКорректировка.КалендарныеДни, 0)
	|				КОНЕЦ) КАК НовоеКоличествоДнейОтпуска,
	|			КадровыеОтпуска.РегистраторНачалаОтпуска КАК РегистраторНачалаОтпуска
	|		ИЗ
	|			ВТ_КадровыеОтпуска КАК КадровыеОтпуска
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарьКорректировка
	|				ПО (ПроизводственныйКалендарьКорректировка.ДатаКалендаря МЕЖДУ КадровыеОтпуска.ДатаНачала И КадровыеОтпуска.НоваяДатаОкончания)
	|					И (КадровыеОтпуска.КорректироватьОтпуск)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КадровыеОтпуска.Сотрудник,
	|			КадровыеОтпуска.ВидЕжегодногоОтпуска,
	|			КадровыеОтпуска.ДатаОкончания,
	|			КадровыеОтпуска.КорректироватьОтпуск,
	|			КадровыеОтпуска.ДнейОтпуска,
	|			КадровыеОтпуска.РегистраторНачалаОтпуска,
	|			ВЫБОР
	|				КОГДА КадровыеОтпуска.КорректироватьОтпуск
	|					ТОГДА ДОБАВИТЬКДАТЕ(КадровыеОтпуска.НоваяДатаОкончания, СЕКУНДА, 1)
	|				ИНАЧЕ КадровыеОтпуска.ДатаНачала
	|			КОНЕЦ) КАК КадровыеОтпуска
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпускаОрганизаций КАК ФактическиеОтпускаОрганизаций
	|			ПО КадровыеОтпуска.Сотрудник = ФактическиеОтпускаОрганизаций.Сотрудник
	|				И КадровыеОтпуска.ВидЕжегодногоОтпуска = ФактическиеОтпускаОрганизаций.ВидЕжегодногоОтпуска
	|				И (ФактическиеОтпускаОрганизаций.Период МЕЖДУ КадровыеОтпуска.ДатаНачала И КадровыеОтпуска.ДатаОкончания
	|					ИЛИ ФактическиеОтпускаОрганизаций.ДатаОкончания МЕЖДУ КадровыеОтпуска.ДатаНачала И КадровыеОтпуска.ДатаОкончания
	|					ИЛИ КадровыеОтпуска.ДатаНачала МЕЖДУ ФактическиеОтпускаОрганизаций.Период И ФактическиеОтпускаОрганизаций.ДатаОкончания
	|					ИЛИ КадровыеОтпуска.ДатаОкончания МЕЖДУ ФактическиеОтпускаОрганизаций.Период И ФактическиеОтпускаОрганизаций.ДатаОкончания)
	|				И (ФактическиеОтпускаОрганизаций.Регистратор <> &Регистратор)
	|				И КадровыеОтпуска.РегистраторНачалаОтпуска <> ФактическиеОтпускаОрганизаций.Регистратор
	|				И КадровыеОтпуска.РегистраторНачалаОтпуска.Дата > ФактическиеОтпускаОрганизаций.ДатаРегистрации
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КадровыеОтпуска.Сотрудник,
	|		КадровыеОтпуска.ВидЕжегодногоОтпуска,
	|		КадровыеОтпуска.ДатаНачала,
	|		КадровыеОтпуска.ДатаОкончания,
	|		КадровыеОтпуска.ДнейОтпуска,
	|		КадровыеОтпуска.НовоеКоличествоДнейОтпуска,
	|		КадровыеОтпуска.КорректироватьОтпуск) КАК Отпуска,
	|	ВТ_ДатаРегистрации КАК ВТ_ДатаРегистрации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Отпуска.КорректироватьОтпуск
	|				ТОГДА Отпуска.НовоеКоличествоКадровыхДнейОтпуска - Отпуска.КадровыхДнейОтпуска <> 0
	|			ИНАЧЕ Отпуска.КадровыхДнейОтпуска - Отпуска.РасчетныхДнейОтпуска <> 0
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаНачала";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период							= Выборка.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник						= Выборка.Сотрудник;
		Движение.ВидЕжегодногоОтпуска			= Выборка.ВидЕжегодногоОтпуска;
		
		// Ресурсы
		Движение.Количество						= Выборка.ДнейОтпуска;
		
		// Реквизиты
		Движение.ДатаОкончания					= Выборка.ДатаОкончания;
		Движение.ДатаРегистрации				= Выборка.ДатаРегистрации;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СписатьФактическиеОтпускаОсновнымиНачислениями(Знач Регистратор, Знач Организация) Экспорт
	
	ПорядокСписанияФактическихОтпусков = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПорядокСписанияФактическихОтпусков");
	Если ПорядокСписанияФактическихОтпусков <> Перечисления.ПорядокСписанияФактическихОтпусков.РасчетнымиДокументами Тогда
		Возврат;
	КонецЕсли;
	
	// Необходимо получить фактическое количество дней отпуска, используя таблицу ФПД
	// Необходимо собрать данные по кадровым отпускам за те же периоды и по тем сотрудникам
	// После чего сделать движения на положительную разницу количества дней отпуска между кадровыми и расчетными данными
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.Регистратор
	|ПОМЕСТИТЬ ВТ_СотрудникиПериодыДействия
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И (НЕ Начисления.ВидРасчета.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия,
	|	ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияФПД.Сотрудник КАК Сотрудник,
	|	НачисленияФПД.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияФПД.ПериодДействияКонец КАК ПериодДействияКонец,
	|	НачисленияФПД.ВидРасчета.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	СУММА(ПроизводственныйКалендарь.КалендарныеДни * ВЫБОР
	|			КОГДА НачисленияФПД.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДнейОтпуска,
	|	НачисленияФПД.Сторно КАК Сторно,
	|	НачисленияФПД.Регистратор.Дата КАК ДатаРегистрации,
	|	НачисленияФПД.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			(Сотрудник, ПериодДействия, ВидРасчета, Регистратор) В
	|				(ВЫБРАТЬ
	|					ОсновныеНачисления.Сотрудник,
	|					ОсновныеНачисления.ПериодДействия,
	|					ОсновныеНачисления.ВидРасчета,
	|					ОсновныеНачисления.Регистратор
	|				ИЗ
	|					ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК НачисленияФПД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НачисленияФПД.ПериодДействияНачало И НачисленияФПД.ПериодДействияКонец)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияФПД.Сотрудник,
	|	НачисленияФПД.ПериодДействияНачало,
	|	НачисленияФПД.ПериодДействияКонец,
	|	НачисленияФПД.Сторно,
	|	НачисленияФПД.ВидРасчета.ВидЕжегодногоОтпуска,
	|	НачисленияФПД.Регистратор.Дата,
	|	НачисленияФПД.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период					= Выборка.ПериодДействияНачало;
		
		// Измерения
		Движение.Сотрудник				= Выборка.Сотрудник;
		Движение.ВидЕжегодногоОтпуска	= Выборка.ВидЕжегодногоОтпуска;
		
		// Ресурсы
		Движение.Количество				= Выборка.ДнейОтпуска;
		
		// Реквизиты
		Движение.ДатаОкончания			= Выборка.ПериодДействияКонец;
		Движение.ДатаРегистрации		= Выборка.ДатаРегистрации;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СписатьФактическиеОтпускаДополнительнымиНачислениями(Знач Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ДатаНачалаСобытия КАК ПериодДействия,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидРасчета.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	Начисления.ОплаченоДнейЧасов КАК ДнейОтпуска,
	|	Начисления.Регистратор.Дата КАК ДатаРегистрации
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И (НЕ Начисления.ВидРасчета.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Сторно УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период					= Выборка.ПериодДействия;
		
		// Измерения
		Движение.Сотрудник				= Выборка.Сотрудник;
		Движение.ВидЕжегодногоОтпуска	= Выборка.ВидЕжегодногоОтпуска;
		
		// Ресурсы
		Движение.Количество				= Выборка.ДнейОтпуска;
		
		// Реквизиты
		Движение.Компенсация			= Истина;
		Движение.ДатаРегистрации		= Выборка.ДатаРегистрации;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СписатьФактическиеОтпускаУдержаниями(Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.ДатаНачалаСобытия КАК ПериодДействия,
	|	Удержания.Сторно КАК Сторно,
	|	Начисления.ВидЕжегодногоОтпуска,
	|	Удержания.Показатель1 КАК ДнейОтпуска,
	|	Удержания.Регистратор.Дата КАК ДатаРегистрации
	|ИЗ
	|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК Начисления
	|		ПО (Начисления.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни))
	|			И ((НЕ Начисления.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ПустаяСсылка)))
	|ГДЕ
	|	Удержания.Регистратор = &Регистратор
	|	И Удержания.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Сторно УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период					= Выборка.ПериодДействия;
		
		// Измерения
		Движение.Сотрудник				= Выборка.Сотрудник;
		Движение.ВидЕжегодногоОтпуска	= Выборка.ВидЕжегодногоОтпуска;
		
		// Ресурсы
		Движение.Количество				= -Выборка.ДнейОтпуска * ?(Выборка.Сторно, -1, 1);
		
		// Реквизиты
		Движение.Компенсация			= Истина;
		Движение.ДатаРегистрации		= Выборка.ДатаРегистрации;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Процедура записи расчитанных остатков в справочник остатков

Функция ОстатокОтпускаСпискаСотрудниковНаПоследнийРабочийГод(Знач МассивСотрудников, Знач ДатаОстатков = '00010101')
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник				= Сотрудник;
		Строка.ДатаОстатков				= НачалоДня(ДатаОстатков);
	КонецЦикла;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных);
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Сотрудник");
	ТаблицаСведений.Колонки.Добавить("ОстаткиВРазрезеВидовОтпусков");
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		ОстаткиВРазрезеРабочихЛетИВидовОтпусков	= Новый Массив;
		МожноВводитьОстатки						= Истина;
		
		Для Каждого ОстатокПоВидуОтпуска Из СтрокаРезультата.ОстатокНаДатуПоВидамЕжегодныхОтпусков Цикл
			ПредпоследнийРабочийГод			= Неопределено;
			ДатаПредпоследнегоРабочегоГода	= Дата(1, 1, 1);
			Для Каждого РабочийГод Из СтрокаРезультата.ДанныеРасчета Цикл
				Если РабочийГод.ПоследнийРабочийгод Или ОстатокПоВидуОтпуска.ВидЕжегодногоОтпуска <> РабочийГод.ВидЕжегодногоОтпуска Тогда
					Продолжить;
				КонецЕсли;
				Если ДатаПредпоследнегоРабочегоГода < РабочийГод.ДатаОкончания Тогда
					ДатаПредпоследнегоРабочегоГода	= РабочийГод.ДатаОкончания;
					ПредпоследнийРабочийГод			= РабочийГод;
				КонецЕсли;
			КонецЦикла;
			Если ПредпоследнийРабочийГод <> Неопределено Тогда
				ОстаткиВРазрезеРабочихЛетИВидовОтпусков.Добавить(Новый Структура("ВидЕжегодногоОтпуска, ОсталосьДней, РабочийГодС, РабочийГодПо",
					ПредпоследнийРабочийГод.ВидЕжегодногоОтпуска, ПредпоследнийРабочийГод.ОсталосьДнейОтпускаНарастающимИтогом, ПредпоследнийРабочийГод.ДатаНачала, ПредпоследнийРабочийГод.ДатаОкончания));
				Если ПредпоследнийРабочийГод.ВведенныеОстатки <> Неопределено Тогда
					МожноВводитьОстатки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ОстаткиВРазрезеРабочихЛетИВидовОтпусков.Количество() = 0 Тогда
			МожноВводитьОстатки = Ложь;
		КонецЕсли;
		
		Если Не МожноВводитьОстатки Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = ТаблицаСведений.Добавить();
		Строка.Сотрудник								= СтрокаРезультата.Сотрудник;
		Строка.ОстаткиВРазрезеВидовОтпусков				= ОстаткиВРазрезеРабочихЛетИВидовОтпусков;
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Процедура РассчитатьОстаткиИЗаписатьИхВСправочник() Экспорт
	
	РабДата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("РабДата",	РабДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиСрезПоследних.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&РабДата, ) КАК РаботникиСрезПоследних
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
	
	СписокСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Результат = ОстатокОтпускаСпискаСотрудниковНаПоследнийРабочийГод(СписокСотрудников, РабДата);
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		ОстаткиОтпусковОбъект = Справочники.ОстаткиОтпусковОрганизаций.СоздатьЭлемент();
		ОстаткиОтпусковОбъект.Сотрудник			= СтрокаРезультата.Сотрудник;
		ОстаткиОтпусковОбъект.ДатаАктуальности	= РабДата;
		ОстаткиОтпусковОбъект.Наименование		= Строка(ОстаткиОтпусковОбъект.Сотрудник) + ", " + Формат(ОстаткиОтпусковОбъект.ДатаАктуальности, "ДФ=dd.MM.yyyy");
		
		Для Каждого Остаток Из СтрокаРезультата.ОстаткиВРазрезеВидовОтпусков Цикл
			Строка = ОстаткиОтпусковОбъект.Остатки.Добавить();
			Строка.ВидЕжегодногоОтпуска			= Остаток.ВидЕжегодногоОтпуска;
			Строка.Количество					= Остаток.ОсталосьДней;
			Строка.ДатаНачалаРабочегоГода		= Остаток.РабочийГодС;
			Строка.ДатаОкончанияРабочегоГода	= Остаток.РабочийГодПо;
		КонецЦикла;
		
		Если ОстаткиОтпусковОбъект.Остатки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОстаткиОтпусковОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры