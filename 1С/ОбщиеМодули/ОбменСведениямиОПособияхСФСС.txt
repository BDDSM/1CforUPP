////////////////////////////////////////////////////////////////////////////////
//  Вспомогательные процедуры/функции формирования файла реестра

Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей)
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
		Запись = ЭлементНабора.Значение;
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ЧИСЛО" Тогда
			
			Если Запись.ЭлементНеОбязателен И Не ЗначениеЗаполнено(Запись.Значение) Тогда
				ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "")
			Иначе
				ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"))
			КонецЕсли;
			
		ИначеЕсли ТипДанных = "СТРОКА" Тогда
			
			Если ЗначениеЗаполнено(Запись.Размер) Тогда
				ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Лев(СокрЛП(Запись.Значение), Запись.Размер))
			Иначе
				ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, СокрЛП(Запись.Значение))
			КонецЕсли;
			
		ИначеЕсли ТипДанных = "ДАТА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Не ЗначениеЗаполнено(Запись.Значение),"", Формат(Запись.Значение,"ДФ=yyyy-MM-dd")))
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" Тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен;
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				ВеткаСтрокиТЗ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "");
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						// для проверок
						//Поле.Размер, Поле.РазрядностьДробнойЧасти
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
						// для проверок
						//Поле.Размер
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=yyyy-MM-dd");
						КонецЕсли;
					КонецЕсли;
					
					ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ВеткаСтрокиТЗ, Поле.ИмяПоля, Данные)
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" Тогда	
			
			ВеткаСтруктуры = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "");
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					// для проверок
					//Поле.Размер, Поле.РазрядностьДробнойЧасти
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
					// для проверок
					//Поле.Размер
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=yyyy-MM-dd");
					КонецЕсли;
				КонецЕсли;
				
				ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ВеткаСтруктуры, Поле.ИмяПоля, Данные)
				
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ""), Запись.Значение)
			
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьСтрокуВРеестр(Узел, ФорматСтроки, СтруктураДанных)

	НаборЗаписей = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСтроки);
	
	НаборЗаписей.BATCH_NO.Значение = СтруктураДанных.НомерСтроки;
	
	НаборЗаписей.TYPE_INFO.Значение = Формат(СтруктураДанных.Перерасчет,"БЛ=0; БИ=1");
	Если СтруктураДанных.Перерасчет Тогда
		НаборЗаписей.RECALC_REASON_CODE.Значение = Число(СтруктураДанных.КодПричиныПерерасчета);
	Иначе
		НаборЗаписей.Удалить("RECALC_REASON_CODE");
	КонецЕсли;
	НаборЗаписей.DOC_TYPE.Значение = СтруктураДанных.ВидВыплаты;
	НаборЗаписей.DOC_DT1.Значение = СтруктураДанных.ДатаПредставленияПакетаДокументов;
	
	НаборЗаписей.SNILS.Значение = СтрЗаменить(СтрЗаменить(СтруктураДанных.СтраховойНомерПФР, "-","")," ","");
	НаборЗаписей.INN_PERSON.Значение = СтруктураДанных.ИНН;
	НаборЗаписей.SURNAME.Значение = СтруктураДанных.Фамилия;
	НаборЗаписей.NAME.Значение = СтруктураДанных.Имя;
	НаборЗаписей.PATRONIMIC.Значение = СтруктураДанных.Отчество;
	НаборЗаписей.RESIDENT_FLAG.Значение = СтруктураДанных.СтатусНалогоплательщика;
	НаборЗаписей.BIRTHDAY.Значение = СтруктураДанных.ДатаРождения;
	НаборЗаписей.GENDER.Значение = Формат(СтруктураДанных.Пол = Перечисления.ПолФизическихЛиц.Женский,"БЛ=0; БИ=1");
	НаборЗаписей.ID_TYPE.Значение = СтруктураДанных.ВидУдостоверенияЛичности;
	НаборЗаписей.ID_NO.Значение = СтруктураДанных.СерияДокумента + " " + СтруктураДанных.НомерДокумента;
	НаборЗаписей.ID_DT.Значение = СтруктураДанных.ДатаВыдачиДокумента;
	НаборЗаписей.ID_DEPT.Значение = СтруктураДанных.КемВыданДокумент;
	НаборЗаписей.OWNER_FLAG.Значение = 1;
	
	НаборЗаписей.PAYMENT_TYPE.Значение = Формат(СтруктураДанных.ПеречислятьПособиеПочтовымПереводом,"БЛ=1; БИ=0");
	Если СтруктураДанных.ПеречислятьПособиеПочтовымПереводом Тогда
		Если Не ПустаяСтрока(СтруктураДанных.АдресПочтовый)  Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтруктураДанных.АдресПочтовый);	
			НаборЗаписей.ADDR_KLADR.Значение = "#" + СтруктураДанных.АдресПочтовыйКодПоКЛАДР;
		Иначе 	
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтруктураДанных.АдресРегистрации);	
			НаборЗаписей.ADDR_KLADR.Значение = "#" + СтруктураДанных.АдресРегистрацииКодПоКЛАДР;
		КонецЕсли;
		Если СтруктураАдреса.Свойство("Индекс") Тогда
			НаборЗаписей.POST_INDEX.Значение = СтруктураАдреса.Индекс;
			НаборЗаписей.ADDR_A1.Значение = СтруктураАдреса.Регион;
			НаборЗаписей.ADDR_A2.Значение = СтруктураАдреса.Район;
			НаборЗаписей.ADDR_A3.Значение = СтруктураАдреса.Город;
			НаборЗаписей.ADDR_A4.Значение = СтруктураАдреса.НаселенныйПункт;
			НаборЗаписей.ADDR_A5.Значение = СтруктураАдреса.Улица;
			НаборЗаписей.ADDR_HOUSE.Значение = СтруктураАдреса.Дом;
			НаборЗаписей.ADDR_BUILDING.Значение = СтруктураАдреса.Корпус;
			НаборЗаписей.ADDR_FLAT.Значение = СтруктураАдреса.Квартира;
		Иначе	
			НаборЗаписей.Удалить("ADDR_A1");
			НаборЗаписей.Удалить("ADDR_A2");
			НаборЗаписей.Удалить("ADDR_A3");
			НаборЗаписей.Удалить("ADDR_A4");
			НаборЗаписей.Удалить("ADDR_A5");
		КонецЕсли;
		НаборЗаписей.Удалить("ACCOUNT_BIC");
		НаборЗаписей.Удалить("ACCOUNT_NAME");
		НаборЗаписей.Удалить("ACCOUNT");
	Иначе
		НаборЗаписей.ACCOUNT_BIC.Значение = СтруктураДанных.БИКБанка;
		НаборЗаписей.ACCOUNT_NAME.Значение = СтруктураДанных.НаименованиеБанка;
		НаборЗаписей.ACCOUNT.Значение = СтруктураДанных.НомерЛицевогоСчета;
		НаборЗаписей.Удалить("ADDR_KLADR");
		НаборЗаписей.Удалить("ADDR_A1");
		НаборЗаписей.Удалить("ADDR_A2");
		НаборЗаписей.Удалить("ADDR_A3");
		НаборЗаписей.Удалить("ADDR_A4");
		НаборЗаписей.Удалить("ADDR_A5");
		НаборЗаписей.Удалить("ADDR_KLADR");
		НаборЗаписей.Удалить("ADDR_HOUSE");
		НаборЗаписей.Удалить("ADDR_BUILDING");
		НаборЗаписей.Удалить("ADDR_FLAT");
		НаборЗаписей.Удалить("POST_INDEX");
	КонецЕсли;
	
	НаборЗаписей.EMPLOYER.Значение = СтруктураДанных.ОрганизацияСокращенно;
	НаборЗаписей.EMPL_FLAG.Значение = Формат(СтруктураДанных.Совместительство,"БЛ=1; БИ=0");
	НаборЗаписей.EMPL_OGRN.Значение = СтруктураДанных.ОГРНОрганизации;
	НаборЗаписей.EMPL_REG_NO.Значение = СтруктураДанных.РегистрационныйНомерФСС;
	НаборЗаписей.EMPL_PARENT_NO.Значение = СтруктураДанных.КодПодчиненностиФСС;
	НаборЗаписей.EMPL_KPP.Значение = СтруктураДанных.КППОрганизации;
	НаборЗаписей.EMPL_INN.Значение = СтруктураДанных.ИННОрганизации;
	НаборЗаписей.APPROVE1.Значение = СтруктураДанных.ФИОРуководителя;
	НаборЗаписей.APPROVE1_ROLE.Значение = СтруктураДанных.ДолжностьРуководителя;
	Если ЗначениеЗаполнено(СтруктураДанных.ФИОГлБуха) Тогда
		НаборЗаписей.APPROVE2.Значение = СтруктураДанных.ФИОГлБуха;
	Иначе
		НаборЗаписей.Удалить("APPROVE2");
	КонецЕсли;
	
	Если СтруктураДанных.ПрименятьЛьготыПриНачисленииПособия Тогда
		НаборЗаписей.LIVE_COND_FLAG.Значение = Формат(СтруктураДанных.ПроживаниеРаботаВЛьготнойЗоне,"БЛ=2; БИ=1");
		НаборЗаписей.LIVE_COND.Значение = ?(СтруктураДанных.СтатусЛьготнойЗоны = Перечисления.ВидыЗонРадиационногоПоражения.ЗонаОтселения, 2, ?(СтруктураДанных.СтатусЛьготнойЗоны = Перечисления.ВидыЗонРадиационногоПоражения.ЗонаСЛьготнымСоциальноЭкономическимСтатусом,3,1));
		Если СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Чернобыль Тогда
			НаборЗаписей.CODE_NUCLEAR.Значение = 1;
		ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Семипалатинск Тогда
			НаборЗаписей.CODE_NUCLEAR.Значение = 2;
		ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Маяк Тогда
			НаборЗаписей.CODE_NUCLEAR.Значение = 3;
		ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.ПодразделенияОсобогоРиска Тогда
			НаборЗаписей.CODE_NUCLEAR.Значение = 4;
		КонецЕсли;
	Иначе
		НаборЗаписей.Удалить("LIVE_COND_FLAG");
		НаборЗаписей.Удалить("LIVE_COND");
	КонецЕсли;
	
	НаборЗаписей.CALC_METHOD.Значение = 1;
	Если СтруктураДанных.РайонныйКоэффициент >= 1.15 И СтруктураДанных.РайонныйКоэффициент <= 2 Тогда
		НаборЗаписей.KF_REG.Значение = СтруктураДанных.РайонныйКоэффициент * 100;
	Иначе
		НаборЗаписей.KF_REG.Значение = 100;
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "1" Тогда
		СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтруктураДанных.АдресРегистрации);	
		НаборЗаписей.ADDR2_KLADR.Значение = "#" + СтруктураДанных.АдресРегистрацииКодПоКЛАДР;
		НаборЗаписей.POST_INDEX2.Значение = СтруктураАдреса.Индекс;
		НаборЗаписей.ADDR2_A1.Значение = СтруктураАдреса.Регион;
		НаборЗаписей.ADDR2_A2.Значение = СтруктураАдреса.Район;
		НаборЗаписей.ADDR2_A3.Значение = СтруктураАдреса.Город;
		НаборЗаписей.ADDR2_A4.Значение = СтруктураАдреса.НаселенныйПункт;
		НаборЗаписей.ADDR2_A5.Значение = СтруктураАдреса.Улица;
		НаборЗаписей.ADDR2_HOUSE.Значение = СтруктураАдреса.Дом;
		НаборЗаписей.ADDR2_BUILDING.Значение = СтруктураАдреса.Корпус;
		НаборЗаписей.ADDR2_FLAT.Значение = СтруктураАдреса.Квартира;
	Иначе
		НаборЗаписей.Удалить("ADDR2_KLADR");
		НаборЗаписей.Удалить("POST_INDEX2");
		НаборЗаписей.Удалить("ADDR2_A1");
		НаборЗаписей.Удалить("ADDR2_A2");
		НаборЗаписей.Удалить("ADDR2_A3");
		НаборЗаписей.Удалить("ADDR2_A4");
		НаборЗаписей.Удалить("ADDR2_A5");
		НаборЗаписей.Удалить("ADDR2_HOUSE");
		НаборЗаписей.Удалить("ADDR2_BUILDING");
		НаборЗаписей.Удалить("ADDR2_FLAT");
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "1" Или СтруктураДанных.ВидВыплаты = "2" Тогда
		Если ЗначениеЗаполнено(СтруктураДанных.ПериодПростояС) и ЗначениеЗаполнено(СтруктураДанных.ПериодПростояПо) Тогда
			СтрокаПериодов = НаборЗаписей.PERIODS.Значение.PERIOD.Значение.Добавить();
			СтрокаПериодов.START_DATE = СтруктураДанных.ПериодПростояС;
			СтрокаПериодов.END_DATE = СтруктураДанных.ПериодПростояПо;
			СтрокаПериодов.IDLE_AVERAGE = СтруктураДанных.СреднийЗаработокНаПериодПростоя;
		Иначе
			НаборЗаписей.Удалить("PERIODS");
		КонецЕсли;
		НаборЗаписей.INSUR_YY.Значение = СтруктураДанных.СтажЛет;
		НаборЗаписей.INSUR_MM.Значение = СтруктураДанных.СтажМесяцев;
		ЛетСтажа = 0;
		МесяцевСтажа = 0;
		ПодсчитатьРазностьСтажейВГодахИМесяцах(СтруктураДанных.СтажЛет, СтруктураДанных.СтажМесяцев, СтруктураДанных.СтажБезНестраховыхПериодовЛет,СтруктураДанных.СтажБезНестраховыхПериодовСтажМесяцев, ЛетСтажа, МесяцевСтажа);
		Если ЛетСтажа = 0 И МесяцевСтажа = 0 Тогда
			НаборЗаписей.Удалить("NOT_INSUR_YY");
			НаборЗаписей.Удалить("NOT_INSUR_MM");
		Иначе 
			НаборЗаписей.NOT_INSUR_YY.Значение = ЛетСтажа;
			НаборЗаписей.NOT_INSUR_MM.Значение = МесяцевСтажа;
		КонецЕсли;
		НаборЗаписей.LN_CODE.Значение = СтруктураДанных.НомерВходящегоДокумента;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерПервичногоБольничного) Тогда
			НаборЗаписей.PREV_LN_CODE.Значение = СтруктураДанных.НомерПервичногоБольничного;
		Иначе
			НаборЗаписей.PRIMARY_FLAG.Значение = 1;
			НаборЗаписей.Удалить("PREV_LN_CODE");
		КонецЕсли;
		НаборЗаписей.DUPLICATE_FLAG.Значение = Формат(СтруктураДанных.ЯвляетсяДубликатом, "БЛ=0; БИ=1");
		НаборЗаписей.LN_DATE.Значение = СтруктураДанных.ДатаВыдачиБольничного;
		НаборЗаписей.LPU_NAME.Значение = СтруктураДанных.НаименованиеЛПУ;
		НаборЗаписей.LPU_ADDRESS_KLADR.Значение = "#" + СтруктураДанных.АдресЛПУКодПоКЛАДР;
		СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтруктураДанных.АдресЛПУ);	
		Если ЗначениеЗаполнено(СтруктураАдреса) И СтруктураАдреса.Свойство("Индекс") Тогда
			НаборЗаписей.LPU_ADDR_POST_INDEX.Значение = СтруктураАдреса.Индекс;
			НаборЗаписей.LPU_ADDR_A1.Значение = СтруктураАдреса.Регион;
			НаборЗаписей.LPU_ADDR_A2.Значение = СтруктураАдреса.Район;
			НаборЗаписей.LPU_ADDR_A3.Значение = СтруктураАдреса.Город;
			НаборЗаписей.LPU_ADDR_A4.Значение = СтруктураАдреса.НаселенныйПункт;
			НаборЗаписей.LPU_ADDR_A5.Значение = СтруктураАдреса.Улица;
			НаборЗаписей.LPU_ADDR_HOUSE.Значение = СтруктураАдреса.Дом;
			НаборЗаписей.LPU_ADDR_BUILDING.Значение = СтруктураАдреса.Корпус;
			НаборЗаписей.LPU_ADDR_FLAT.Значение = СтруктураАдреса.Квартира;
		Иначе	
			НаборЗаписей.Удалить("LPU_ADDR_A1");
			НаборЗаписей.Удалить("LPU_ADDR_A2");
			НаборЗаписей.Удалить("LPU_ADDR_A3");
			НаборЗаписей.Удалить("LPU_ADDR_A4");
			НаборЗаписей.Удалить("LPU_ADDR_A5");
			НаборЗаписей.Удалить("LPU_ADDR_BUILDING");
			НаборЗаписей.Удалить("LPU_ADDR_FLAT");
		КонецЕсли;
		НаборЗаписей.LPU_OGRN.Значение = СтруктураДанных.ОГРН_ЛПУ;
		НаборЗаписей.REASON1.Значение = СтруктураДанных.КодПричиныНетрудоспособности;
		НаборЗаписей.REASON2.Значение = СтруктураДанных.ДополнительныйКодПричиныНетрудоспособности;
		НаборЗаписей.REASON3.Значение = СтруктураДанных.ВторойКодПричиныНетрудоспособности;
		Если СтруктураДанных.Совместительство Тогда
			НаборЗаписей.PARENT_CODE.Значение = СтруктураДанных.НомерЛисткаПоОсновномуМестуРаботы;
		Иначе
			НаборЗаписей.Удалить("PARENT_CODE");
		КонецЕсли;
		НаборЗаписей.DATE1.Значение = СтруктураДанных.ДатаИзмененияКодаПричиныНетрудоспособности;    
		НаборЗаписей.DATE2.Значение = СтруктураДанных.ДатаОкончанияПутевки;
		НаборЗаписей.VOUCHER_NO.Значение = СтруктураДанных.НомерПутевки;
		НаборЗаписей.VOUCHER_OGRN.Значение = СтруктураДанных.ОГРН_Санатория;
		Если ЗначениеЗаполнено(СтруктураДанных.УходЗаРодственникомФИО1) Тогда
			НаборЗаписей.SERV1_AGE.Значение = СтруктураДанных.УходЗаРодственникомЛет1;
			НаборЗаписей.SERV1_MM.Значение = СтруктураДанных.УходЗаРодственникомМесяцев1;
			НаборЗаписей.SERV1_RELATION_CODE.Значение = СтруктураДанных.УходЗаРодственникомРодственнаяСвязь1;
			НаборЗаписей.SERV1_FIO.Значение = СтруктураДанных.УходЗаРодственникомФИО1;
			НаборЗаписей.SERV1_DAYS.Значение = СтруктураДанных.УходЗаРодственникомИспользованоДней1;
		Иначе
			НаборЗаписей.Удалить("SERV1_AGE");
			НаборЗаписей.Удалить("SERV1_MM");
			НаборЗаписей.Удалить("SERV1_RELATION_CODE");
			НаборЗаписей.Удалить("SERV1_FIO");
			НаборЗаписей.Удалить("SERV1_DAYS");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.УходЗаРодственникомФИО2) Тогда
			НаборЗаписей.SERV2_AGE.Значение = СтруктураДанных.УходЗаРодственникомЛет2;
			НаборЗаписей.SERV2_MM.Значение = СтруктураДанных.УходЗаРодственникомМесяцев2;
			НаборЗаписей.SERV2_RELATION_CODE.Значение = СтруктураДанных.УходЗаРодственникомРодственнаяСвязь2;
			НаборЗаписей.SERV2_FIO.Значение = СтруктураДанных.УходЗаРодственникомФИО2;
			НаборЗаписей.SERV2_DAYS.Значение = СтруктураДанных.УходЗаРодственникомИспользованоДней2;
		Иначе
			НаборЗаписей.Удалить("SERV2_AGE");
			НаборЗаписей.Удалить("SERV2_MM");
			НаборЗаписей.Удалить("SERV2_RELATION_CODE");
			НаборЗаписей.Удалить("SERV2_FIO");
			НаборЗаписей.Удалить("SERV2_DAYS");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ПериодНахожденияВСтационареСРебенкомС) И ЗначениеЗаполнено(СтруктураДанных.ПериодНахожденияВСтационареСРебенкомПо) Тогда
			НаборЗаписей.HOSPITAL_DT1.Значение = СтруктураДанных.ПериодНахожденияВСтационареСРебенкомС;
			НаборЗаписей.HOSPITAL_DT2.Значение = СтруктураДанных.ПериодНахожденияВСтационареСРебенкомПо;
		Иначе
			НаборЗаписей.Удалить("HOSPITAL_DT1");
			НаборЗаписей.Удалить("HOSPITAL_DT2");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.КодНарушенияРежима) И ЗначениеЗаполнено(СтруктураДанных.ДатаНарушенияРежима) Тогда
			НаборЗаписей.HOSPITAL_BREACH_CODE.Значение = СтруктураДанных.КодНарушенияРежима;
			НаборЗаписей.HOSPITAL_BREACH_DT.Значение = СтруктураДанных.ДатаНарушенияРежима;
		Иначе
			НаборЗаписей.Удалить("HOSPITAL_BREACH_CODE");
			НаборЗаписей.Удалить("HOSPITAL_BREACH_DT");
		КонецЕсли;
		НаборЗаписей.MSE_DT1.Значение = СтруктураДанных.ДатаНаправленияВБюроМСЭ;
		НаборЗаписей.MSE_DT2.Значение = СтруктураДанных.ДатаРегистрацииДокументовМСЭ;
		НаборЗаписей.MSE_DT3.Значение = СтруктураДанных.ДатаОсвидетельствованияМСЭ;
		Если СтруктураДанных.УстановленаИзмененаГруппаИнвалидности И ЗначениеЗаполнено(СтруктураДанных.ГруппаИнвалидности) Тогда
			НаборЗаписей.MSE_INVALID_GROUP.Значение = СтруктураДанных.ГруппаИнвалидности;
		Иначе
			НаборЗаписей.Удалить("MSE_INVALID_GROUP");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ДнейБолезниИнвалида) Тогда
			НаборЗаписей.MSE_INVALID_DAYS.Значение = СтруктураДанных.ДнейБолезниИнвалида;
		Иначе
			НаборЗаписей.Удалить("MSE_INVALID_DAYS");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НовыйСтатусНетрудопособного) Тогда
			НаборЗаписей.MSE_RESULT.Значение = СтруктураДанных.НовыйСтатусНетрудопособного;
		Иначе
			НаборЗаписей.Удалить("MSE_RESULT");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеС1) И ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеПо1) Тогда
			НаборЗаписей.TREAT1_DT1.Значение = СтруктураДанных.ОсвобождениеС1;
			НаборЗаписей.TREAT1_DT2.Значение = СтруктураДанных.ОсвобождениеПо1;
			НаборЗаписей.TREAT1_DOCTOR_ROLE.Значение = СтруктураДанных.ДолжностьВрача1;
			НаборЗаписей.TREAT1_DOCTOR.Значение = СтруктураДанных.ФИОВрача1;
			НаборЗаписей.TREAT1_DOC_ID.Значение = СтруктураДанных.ИдентификационныйНомерВрача1;
			НаборЗаписей.TREAT1_DOCTOR2_ROLE.Значение = СтруктураДанных.ДолжностьВрачаПредседателяВК1;
			НаборЗаписей.TREAT1_CHAIRMAN_VK.Значение = СтруктураДанных.ФИОВрачаПредседателяВК1;
			НаборЗаписей.TREAT1_DOC2_ID.Значение = СтруктураДанных.ИдентификационныйНомерВрачаПредседателяВК1;
		Иначе
			НаборЗаписей.Удалить("TREAT1_DT1");
			НаборЗаписей.Удалить("TREAT1_DT2");
			НаборЗаписей.Удалить("TREAT1_DOCTOR_ROLE");
			НаборЗаписей.Удалить("TREAT1_DOCTOR");
			НаборЗаписей.Удалить("TREAT1_DOC_ID");
			НаборЗаписей.Удалить("TREAT1_DOCTOR2_ROLE");
			НаборЗаписей.Удалить("TREAT1_CHAIRMAN_VK");
			НаборЗаписей.Удалить("TREAT1_DOC2_ID");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеС2) И ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеПо2) Тогда
			НаборЗаписей.TREAT2_DT1.Значение = СтруктураДанных.ОсвобождениеС2;
			НаборЗаписей.TREAT2_DT2.Значение = СтруктураДанных.ОсвобождениеПо2;
			НаборЗаписей.TREAT2_DOCTOR_ROLE.Значение = СтруктураДанных.ДолжностьВрача2;
			НаборЗаписей.TREAT2_DOCTOR.Значение = СтруктураДанных.ФИОВрача2;
			НаборЗаписей.TREAT2_DOC_ID.Значение = СтруктураДанных.ИдентификационныйНомерВрача2;
			НаборЗаписей.TREAT2_DOCTOR2_ROLE.Значение = СтруктураДанных.ДолжностьВрачаПредседателяВК2;
			НаборЗаписей.TREAT2_CHAIRMAN_VK.Значение = СтруктураДанных.ФИОВрачаПредседателяВК2;
			НаборЗаписей.TREAT2_DOC2_ID.Значение = СтруктураДанных.ИдентификационныйНомерВрачаПредседателяВК2;
		Иначе
			НаборЗаписей.Удалить("TREAT2_DT1");
			НаборЗаписей.Удалить("TREAT2_DT2");
			НаборЗаписей.Удалить("TREAT2_DOCTOR_ROLE");
			НаборЗаписей.Удалить("TREAT2_DOCTOR");
			НаборЗаписей.Удалить("TREAT2_DOC_ID");
			НаборЗаписей.Удалить("TREAT2_DOCTOR2_ROLE");
			НаборЗаписей.Удалить("TREAT2_CHAIRMAN_VK");
			НаборЗаписей.Удалить("TREAT2_DOC2_ID");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеС3) И ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеПо3) Тогда
			НаборЗаписей.TREAT3_DT1.Значение = СтруктураДанных.ОсвобождениеС3;
			НаборЗаписей.TREAT3_DT2.Значение = СтруктураДанных.ОсвобождениеПо3;
			НаборЗаписей.TREAT3_DOCTOR_ROLE.Значение = СтруктураДанных.ДолжностьВрача3;
			НаборЗаписей.TREAT3_DOCTOR.Значение = СтруктураДанных.ФИОВрача3;
			НаборЗаписей.TREAT3_DOC_ID.Значение = СтруктураДанных.ИдентификационныйНомерВрача3;
			НаборЗаписей.TREAT3_DOCTOR2_ROLE.Значение = СтруктураДанных.ДолжностьВрачаПредседателяВК3;
			НаборЗаписей.TREAT3_CHAIRMAN_VK.Значение = СтруктураДанных.ФИОВрачаПредседателяВК3;
			НаборЗаписей.TREAT3_DOC2_ID.Значение = СтруктураДанных.ИдентификационныйНомерВрачаПредседателяВК3;
		Иначе
			НаборЗаписей.Удалить("TREAT3_DT1");
			НаборЗаписей.Удалить("TREAT3_DT2");
			НаборЗаписей.Удалить("TREAT3_DOCTOR_ROLE");
			НаборЗаписей.Удалить("TREAT3_DOCTOR");
			НаборЗаписей.Удалить("TREAT3_DOC_ID");
			НаборЗаписей.Удалить("TREAT3_DOCTOR2_ROLE");
			НаборЗаписей.Удалить("TREAT3_CHAIRMAN_VK");
			НаборЗаписей.Удалить("TREAT3_DOC2_ID");
		КонецЕсли;
		НаборЗаписей.OTHER_STATE_DT.Значение = СтруктураДанных.ДатаНовыйСтатусНетрудопособного;
		НаборЗаписей.RETURN_DATE_LPU.Значение = СтруктураДанных.ДатаВыходаНаРаботу;
		НаборЗаписей.NEXT_LN_CODE.Значение = СтруктураДанных.НомерЛисткаПродолжения;
		НаборЗаписей.CALC_CONDITION1.Значение = СтруктураДанных.УсловияИсчисленияКод1;
		НаборЗаписей.CALC_CONDITION2.Значение = СтруктураДанных.УсловияИсчисленияКод2;
		НаборЗаписей.CALC_CONDITION3.Значение = СтруктураДанных.УсловияИсчисленияКод3;
		Если СтруктураДанных.УсловияИсчисленияКод1 = "43" Или СтруктураДанных.УсловияИсчисленияКод2 = "43" Или СтруктураДанных.УсловияИсчисленияКод3 = "43" Тогда
			Если СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Чернобыль Тогда
				НаборЗаписей.CODE_NUCLEAR.Значение = 1;
			ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Семипалатинск Тогда
				НаборЗаписей.CODE_NUCLEAR.Значение = 2;
			ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Маяк Тогда
				НаборЗаписей.CODE_NUCLEAR.Значение = 3;
			ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.ПодразделенияОсобогоРиска Тогда
				НаборЗаписей.CODE_NUCLEAR.Значение = 4;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ДатаАктаФормыН1) Тогда
			НаборЗаписей.FORM1_DT.Значение = СтруктураДанных.ДатаАктаФормыН1;
		Иначе
			НаборЗаписей.Удалить("FORM1_DT");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ДатаНачалаРаботы) Тогда
			НаборЗаписей.RETURN_DATE_EMPL.Значение = СтруктураДанных.ДатаНачалаРаботы;
		Иначе
			НаборЗаписей.Удалить("RETURN_DATE_EMPL");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.СрочныйДоговорС) И ЗначениеЗаполнено(СтруктураДанных.СрочныйДоговорПо) Тогда
			НаборЗаписей.WORK_CONTRACT_START_DT.Значение = СтруктураДанных.СрочныйДоговорС;
			НаборЗаписей.WORK_CONTRACT_FINISH_DT.Значение = СтруктураДанных.СрочныйДоговорПо;
		Иначе
			НаборЗаписей.Удалить("WORK_CONTRACT_START_DT");
			НаборЗаписей.Удалить("WORK_CONTRACT_FINISH_DT");
		КонецЕсли;
		НаборЗаписей.DT1.Значение = СтруктураДанных.ДатаНачалаОплаты;
		НаборЗаписей.DT2.Значение = СтруктураДанных.ДатаОкончанияОплаты;
		ДатаС = СтруктураДанных.ОсвобождениеС1;
		ДатаПо = Макс(СтруктураДанных.ОсвобождениеПо1,СтруктураДанных.ОсвобождениеПо2,СтруктураДанных.ОсвобождениеПо3);
		Если ЗначениеЗаполнено(ДатаС) И ЗначениеЗаполнено(ДатаПо) Тогда
			НаборЗаписей.CALC_DAYS.Значение = (ДатаПо - ДатаС) / 86400 + 1;
		Иначе
			НаборЗаписей.Удалить("CALC_DAYS"); 
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.СуммаПособияРаботодателя) Тогда
			НаборЗаписей.EMPL_PAYMENT.Значение = СтруктураДанных.СуммаПособияРаботодателя;
		Иначе
			НаборЗаписей.Удалить("EMPL_PAYMENT");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.СуммаПособияФСС) Тогда
			НаборЗаписей.FSS_PAYMENT.Значение = СтруктураДанных.СуммаПособияФСС;
		Иначе
			НаборЗаписей.Удалить("FSS_PAYMENT");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.СуммаПособияВсего) Тогда
			НаборЗаписей.PAYMENT.Значение = СтруктураДанных.СуммаПособияВсего;
		Иначе
			НаборЗаписей.Удалить("PAYMENT");
		КонецЕсли;
	Иначе 	
		НаборЗаписей.Удалить("WORK_CONTRACT_START_DT");
		НаборЗаписей.Удалить("WORK_CONTRACT_FINISH_DT");
		НаборЗаписей.Удалить("PERIODS");
		НаборЗаписей.Удалить("INSUR_YY");
		НаборЗаписей.Удалить("INSUR_MM");
		НаборЗаписей.Удалить("NOT_INSUR_YY");
		НаборЗаписей.Удалить("NOT_INSUR_MM");
		НаборЗаписей.Удалить("LN_CODE");
		НаборЗаписей.Удалить("PRIMARY_FLAG");
		НаборЗаписей.Удалить("PREV_LN_CODE");
		НаборЗаписей.Удалить("DUPLICATE_FLAG");
		НаборЗаписей.Удалить("LN_DATE");
		НаборЗаписей.Удалить("LPU_NAME");
		НаборЗаписей.Удалить("LPU_ADDRESS_KLADR");
		НаборЗаписей.Удалить("LPU_ADDR_A1");
		НаборЗаписей.Удалить("LPU_ADDR_A2");
		НаборЗаписей.Удалить("LPU_ADDR_A3");
		НаборЗаписей.Удалить("LPU_ADDR_A4");
		НаборЗаписей.Удалить("LPU_ADDR_A5");
		НаборЗаписей.Удалить("LPU_ADDR_HOUSE");
		НаборЗаписей.Удалить("LPU_ADDR_BUILDING");
		НаборЗаписей.Удалить("LPU_ADDR_FLAT");
		НаборЗаписей.Удалить("LPU_ADDR_POST_INDEX");
		НаборЗаписей.Удалить("LPU_OGRN");
		НаборЗаписей.Удалить("REASON1");
		НаборЗаписей.Удалить("REASON2");
		НаборЗаписей.Удалить("REASON3");
		НаборЗаписей.Удалить("PARENT_CODE");
		НаборЗаписей.Удалить("DATE1");
		НаборЗаписей.Удалить("DATE2");
		НаборЗаписей.Удалить("VOUCHER_NO");
		НаборЗаписей.Удалить("VOUCHER_OGRN");
		НаборЗаписей.Удалить("SERV1_AGE");
		НаборЗаписей.Удалить("SERV1_MM");
		НаборЗаписей.Удалить("SERV1_RELATION_CODE");
		НаборЗаписей.Удалить("SERV1_FIO");
		НаборЗаписей.Удалить("SERV1_DAYS");
		НаборЗаписей.Удалить("SERV2_AGE");
		НаборЗаписей.Удалить("SERV2_MM");
		НаборЗаписей.Удалить("SERV2_RELATION_CODE");
		НаборЗаписей.Удалить("SERV2_FIO");
		НаборЗаписей.Удалить("SERV2_DAYS");
		НаборЗаписей.Удалить("HOSPITAL_DT1");
		НаборЗаписей.Удалить("HOSPITAL_DT2");
		НаборЗаписей.Удалить("HOSPITAL_BREACH_CODE");
		НаборЗаписей.Удалить("HOSPITAL_BREACH_DT");
		НаборЗаписей.Удалить("MSE_DT1");
		НаборЗаписей.Удалить("MSE_DT2");
		НаборЗаписей.Удалить("MSE_DT3");
		НаборЗаписей.Удалить("MSE_INVALID_GROUP");
		НаборЗаписей.Удалить("MSE_INVALID_DAYS");
		НаборЗаписей.Удалить("MSE_RESULT");
		НаборЗаписей.Удалить("TREAT1_DT1");
		НаборЗаписей.Удалить("TREAT1_DT2");
		НаборЗаписей.Удалить("TREAT1_DOC_ID");
		НаборЗаписей.Удалить("TREAT1_DOCTOR2_ROLE");
		НаборЗаписей.Удалить("TREAT1_CHAIRMAN_VK");
		НаборЗаписей.Удалить("TREAT1_DOC2_ID");
		НаборЗаписей.Удалить("TREAT1_DOCTOR_ROLE");
		НаборЗаписей.Удалить("TREAT1_DOCTOR");
		НаборЗаписей.Удалить("TREAT2_DT1");
		НаборЗаписей.Удалить("TREAT2_DT2");
		НаборЗаписей.Удалить("TREAT2_DOCTOR_ROLE");
		НаборЗаписей.Удалить("TREAT2_DOCTOR");
		НаборЗаписей.Удалить("TREAT2_DOC_ID");
		НаборЗаписей.Удалить("TREAT2_DOCTOR2_ROLE");
		НаборЗаписей.Удалить("TREAT2_CHAIRMAN_VK");
		НаборЗаписей.Удалить("TREAT2_DOC2_ID");
		НаборЗаписей.Удалить("TREAT3_DT1");
		НаборЗаписей.Удалить("TREAT3_DT2");
		НаборЗаписей.Удалить("TREAT3_DOCTOR_ROLE");
		НаборЗаписей.Удалить("TREAT3_DOCTOR");
		НаборЗаписей.Удалить("TREAT3_DOC_ID");
		НаборЗаписей.Удалить("TREAT3_DOCTOR2_ROLE");
		НаборЗаписей.Удалить("TREAT3_CHAIRMAN_VK");
		НаборЗаписей.Удалить("TREAT3_DOC2_ID");
		НаборЗаписей.Удалить("OTHER_STATE_DT");
		НаборЗаписей.Удалить("RETURN_DATE_LPU");
		НаборЗаписей.Удалить("NEXT_LN_CODE");
		НаборЗаписей.Удалить("CALC_CONDITION1");
		НаборЗаписей.Удалить("CALC_CONDITION2");
		НаборЗаписей.Удалить("CALC_CONDITION3");
		НаборЗаписей.Удалить("FORM1_DT");
		НаборЗаписей.Удалить("RETURN_DATE_EMPL");
		НаборЗаписей.Удалить("DT1");
		НаборЗаписей.Удалить("DT2"); 
		НаборЗаписей.Удалить("CALC_DAYS"); 
		НаборЗаписей.Удалить("EMPL_PAYMENT");
		НаборЗаписей.Удалить("FSS_PAYMENT");
		НаборЗаписей.Удалить("PAYMENT");
	КонецЕсли;

	Если СтруктураДанных.ВидВыплаты = "2" Или СтруктураДанных.ВидВыплаты = "3" Тогда
		НаборЗаписей.PREGN12W_FLAG.Значение = Формат(СтруктураДанных.ПоставленаНаУчетВРанниеСрокиБеременности,"БЛ=0; БИ=1");
	Иначе 	
		НаборЗаписей.Удалить("PREGN12W_FLAG");
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "1" Или СтруктураДанных.ВидВыплаты = "2" Или СтруктураДанных.ВидВыплаты = "5" Тогда
		НаборЗаписей.BASE_AVG_DAILY_SAL.Значение = СтруктураДанных.СреднийДневнойЗаработок;
		Если СтруктураДанных.ПорядокРасчетаСреднегоЗаработка = 0 Тогда
			Если ЗначениеЗаполнено(СтруктураДанных.ЗамененныйПервыйГодРасчета) И СтруктураДанных.ПервыйГодРасчета <> СтруктураДанных.ЗамененныйПервыйГодРасчета
				Или ЗначениеЗаполнено(СтруктураДанных.ЗамененныйВторойГодРасчета) И СтруктураДанных.ВторойГодРасчета <> СтруктураДанных.ЗамененныйВторойГодРасчета Тогда
				НаборЗаписей.YEAR_CHANGE_FLAG.Значение = 1;
				НаборЗаписей.YEAR1_OLD.Значение = СтруктураДанных.ЗамененныйПервыйГодРасчета;
				НаборЗаписей.YEAR2_OLD.Значение = СтруктураДанных.ЗамененныйВторойГодРасчета;
			Иначе
				НаборЗаписей.YEAR_CHANGE_FLAG.Значение = 0;
			КонецЕсли;	
			НаборЗаписей.YEAR1.Значение = СтруктураДанных.ПервыйГодРасчета;
			НаборЗаписей.YEAR2.Значение = СтруктураДанных.ВторойГодРасчета;
			НаборЗаписей.BASE_SUM1.Значение = СтруктураДанных.ЗаработокПервыйГодРасчета;
			НаборЗаписей.BASE_SUM2.Значение = СтруктураДанных.ЗаработокВторойГодРасчета;
			НаборЗаписей.BASE_AVG_SAL.Значение = СтруктураДанных.ЗаработокПервыйГодРасчета + СтруктураДанных.ЗаработокВторойГодРасчета;
			НаборЗаписей.Удалить("ROLE_WAGE");
			НаборЗаписей.Удалить("BASE_CALC_DAYS");
			НаборЗаписей.Удалить("CALC_MH_PERIOD_START");
			НаборЗаписей.Удалить("CALC_MH_PERIOD_FINISH");
		Иначе
			НаборЗаписей.Удалить("YEAR_CHANGE_FLAG");
			НаборЗаписей.Удалить("YEAR1_OLD");
			НаборЗаписей.Удалить("YEAR2_OLD");
			НаборЗаписей.Удалить("YEAR1");
			НаборЗаписей.Удалить("YEAR2");
			НаборЗаписей.Удалить("BASE_SUM1");
			НаборЗаписей.Удалить("BASE_SUM2");
			НаборЗаписей.CALC_METHOD.Значение = 0;
			НаборЗаписей.BASE_CALC_DAYS.Значение = СтруктураДанных.КалендарныхДнейРасчетногоПериода;
			НаборЗаписей.CALC_MH_PERIOD_START.Значение = СтруктураДанных.ПериодРасчетаСреднегоЗаработкаНачало;
			НаборЗаписей.CALC_MH_PERIOD_FINISH.Значение = СтруктураДанных.ПериодРасчетаСреднегоЗаработкаОкончание;
			Если СтруктураДанных.ПорядокРасчетаСреднегоЗаработка = 1 Тогда
				НаборЗаписей.BASE_AVG_SAL.Значение = СтруктураДанных.ЗаработокЗаПериодРасчета;
				НаборЗаписей.Удалить("ROLE_WAGE");
			Иначе
				Если СтруктураДанных.ПорядокРасчетаСреднегоЗаработка = 2 Тогда
					НаборЗаписей.ROLE_WAGE.Значение = СтруктураДанных.ТарифнаяСтавкаОклад;
					НаборЗаписей.Удалить("BASE_AVG_SAL");
				ИначеЕсли СтруктураДанных.ПорядокРасчетаСреднегоЗаработка = 3 Тогда
					НаборЗаписей.ROLE_WAGE.Значение = СтруктураДанных.МРОТ;
					НаборЗаписей.Удалить("BASE_AVG_SAL");
				Иначе
					НаборЗаписей.Удалить("ROLE_WAGE");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СтруктураДанных.ДоляВремени > 0 И СтруктураДанных.ДоляВремени < 1 Тогда
			НаборЗаписей.KF_SHORT_DAY.Значение = СтруктураДанных.ДоляВремени;
		Иначе
			НаборЗаписей.KF_SHORT_DAY.Значение = 1;
		КонецЕсли;
	Иначе 	
		НаборЗаписей.Удалить("BASE_AVG_DAILY_SAL");
		НаборЗаписей.Удалить("YEAR1_OLD");
		НаборЗаписей.Удалить("YEAR2_OLD");
		НаборЗаписей.Удалить("YEAR1");
		НаборЗаписей.Удалить("YEAR2");
		НаборЗаписей.Удалить("BASE_SUM1");
		НаборЗаписей.Удалить("BASE_SUM2");
		НаборЗаписей.Удалить("ROLE_WAGE");
		НаборЗаписей.Удалить("BASE_AVG_SAL");
		НаборЗаписей.Удалить("BASE_CALC_DAYS");
		НаборЗаписей.Удалить("CALC_MH_PERIOD_START");
		НаборЗаписей.Удалить("CALC_MH_PERIOD_FINISH");
		НаборЗаписей.Удалить("KF_SHORT_DAY");
	КонецЕсли;

	Если СтруктураДанных.ВидВыплаты = "3" Тогда
		НаборЗаписей.REF_12WEEK_NO.Значение = СтруктураДанных.НомерСправкиБеременной;
		НаборЗаписей.REF_12WEEK_DT.Значение = СтруктураДанных.ДатаСправкиБеременной;
	Иначе 	
		НаборЗаписей.Удалить("REF_12WEEK_NO");
		НаборЗаписей.Удалить("REF_12WEEK_DT");
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "4" Или СтруктураДанных.ВидВыплаты = "5" Тогда
		НаборЗаписей.CERT_BR.Значение = СтруктураДанных.ДатаРожденияРебенка;
		НаборЗаписей.CERT_SURNAME.Значение = СтруктураДанных.ФамилияРебенка;
		НаборЗаписей.CERT_NAME.Значение = СтруктураДанных.ИмяРебенка;
		НаборЗаписей.CERT_PATRONIMIC.Значение = СтруктураДанных.ОтчествоРебенка;
		Если ЗначениеЗаполнено(СтруктураДанных.УсыновлениеОпека) Тогда
			НаборЗаписей.WARD_FLAG.Значение = СтруктураДанных.УсыновлениеОпека;
			НаборЗаписей.WARD_REF_NO.Значение = СтруктураДанных.УсыновлениеОпекаСерияНомер;
			НаборЗаписей.WARD_REF_DT.Значение = СтруктураДанных.УсыновлениеОпекаДатаВыдачи;
		Иначе
			НаборЗаписей.Удалить("WARD_FLAG");
			НаборЗаписей.Удалить("WARD_REF_NO");
			НаборЗаписей.Удалить("WARD_REF_DT");
		КонецЕсли;
	Иначе 	
		НаборЗаписей.Удалить("CERT_BR");
		НаборЗаписей.Удалить("CERT_SURNAME");
		НаборЗаписей.Удалить("CERT_NAME");
		НаборЗаписей.Удалить("CERT_PATRONIMIC");
		НаборЗаписей.Удалить("WARD_FLAG");
		НаборЗаписей.Удалить("WARD_REF_NO");
		НаборЗаписей.Удалить("WARD_REF_DT");
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "4" Тогда
		НаборЗаписей.CERT_TYPE.Значение = СтруктураДанных.ДокументОРожденииВид;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерСправкиОРождении) И ЗначениеЗаполнено(СтруктураДанных.ДатаСправкиОРождении) Тогда
			НаборЗаписей.REF_24_NO.Значение = СтруктураДанных.НомерСправкиОРождении;
			НаборЗаписей.REF_24_DT.Значение = СтруктураДанных.ДатаСправкиОРождении;
		Иначе
			НаборЗаписей.Удалить("REF_24_NO");
			НаборЗаписей.Удалить("REF_24_DT");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерДоговораОПередачеНаВоспитание) И ЗначениеЗаполнено(СтруктураДанных.ДатаДоговораОПередачеНаВоспитание) Тогда
			НаборЗаписей.REF_FAMILY_NO.Значение = СтруктураДанных.НомерДоговораОПередачеНаВоспитание;
			НаборЗаписей.REF_FAMILY_DT.Значение = СтруктураДанных.ДатаДоговораОПередачеНаВоспитание;
		Иначе
			НаборЗаписей.Удалить("REF_FAMILY_NO");
			НаборЗаписей.Удалить("REF_FAMILY_DT");
		КонецЕсли;
		НаборЗаписей.REF_NPAY_OTHER_NO.Значение = СтруктураДанных.НомерСправкиОтДругогоРодителя;
		НаборЗаписей.REF_NPAY_OTHER_DT.Значение = СтруктураДанных.ДатаСправкиОтДругогоРодителя; 
	Иначе 	
		НаборЗаписей.Удалить("CERT_TYPE");
		НаборЗаписей.Удалить("REF_24_NO");
		НаборЗаписей.Удалить("REF_24_DT");
		НаборЗаписей.Удалить("REF_FAMILY_NO");
		НаборЗаписей.Удалить("REF_FAMILY_DT");
		НаборЗаписей.Удалить("REF_NPAY_OTHER_NO");
		НаборЗаписей.Удалить("REF_NPAY_OTHER_DT");
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "5" Тогда
		НаборЗаписей.CERT_NO.Значение = СтруктураДанных.ДокументОРожденииСерияНомер;
		НаборЗаписей.CERT_DT.Значение = СтруктураДанных.ДокументОРожденииДатаВыдачи;
		НаборЗаписей.HOLID_DT_ST.Значение = СтруктураДанных.ДатаНачала;
		НаборЗаписей.HOLID_DT_FN.Значение = СтруктураДанных.ДатаОкончания;
		НаборЗаписей.MULTPATR.Значение = Формат(СтруктураДанных.ОдновременныйУходЗаНесколькимиДетьми,"БЛ=0; БИ=1");
		Если СтруктураДанных.ОдновременныйУходЗаНесколькимиДетьми Тогда
			НаборЗаписей.AVG_SAL.Значение = СтруктураДанных.СреднийДневнойЗаработок * 30.4;
		Иначе
			НаборЗаписей.Удалить("AVG_SAL");
		КонецЕсли;
		НаборЗаписей.CHILD_SER.Значение = СтруктураДанных.Очередность;
		НаборЗаписей.MH_OUT.Значение = Формат(СтруктураДанных.НаличиеРешенияСудаОЛишенииПрав,"БЛ=0; БИ=1");
		Если ЗначениеЗаполнено(СтруктураДанных.НомерПриказаНаОтпускПоУходуЗаРебенком) И ЗначениеЗаполнено(СтруктураДанных.ДатаПриказаНаОтпускПоУходуЗаРебенком) Тогда
			НаборЗаписей.HOLID_ORD_NO.Значение = СтруктураДанных.НомерПриказаНаОтпускПоУходуЗаРебенком;
			НаборЗаписей.HOLID_ORD_DT.Значение = СтруктураДанных.ДатаПриказаНаОтпускПоУходуЗаРебенком;
		Иначе
			НаборЗаписей.Удалить("HOLID_ORD_NO");
			НаборЗаписей.Удалить("HOLID_ORD_DT");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерПриказаОЗаменеПослеродовогоОтпуска) И ЗначениеЗаполнено(СтруктураДанных.ДатаПриказаОЗаменеПослеродовогоОтпуска) Тогда
			НаборЗаписей.HOLID_CH_ORD_NO.Значение = СтруктураДанных.НомерПриказаОЗаменеПослеродовогоОтпуска;
			НаборЗаписей.HOLID_CH_ORD_DT.Значение = СтруктураДанных.ДатаПриказаОЗаменеПослеродовогоОтпуска;
		Иначе
			НаборЗаписей.Удалить("HOLID_CH_ORD_NO");
			НаборЗаписей.Удалить("HOLID_CH_ORD_DT");
		КонецЕсли;
		НаборЗаписей.OTHER_CHILD_FLAG_DT.Значение = Формат(СтруктураДанных.НаличиеДокументаОСмерти,"БЛ=0; БИ=1");
		НаборЗаписей.OTHER_CHILD_FLAG_BR.Значение = Формат(СтруктураДанных.НаличиеДокументаОРождении,"БЛ=0; БИ=1");
		Если ЗначениеЗаполнено(СтруктураДанных.НомерСправкиОНеполученииПособияОтОтца) И ЗначениеЗаполнено(СтруктураДанных.ДатаСправкиОНеполученииПособияОтОтца) Тогда
			НаборЗаписей.REF_NPAY_FATHER_NO.Значение = СтруктураДанных.НомерСправкиОНеполученииПособияОтОтца;
			НаборЗаписей.REF_NPAY_FATHER_DT.Значение = СтруктураДанных.ДатаСправкиОНеполученииПособияОтОтца;
		Иначе
			НаборЗаписей.Удалить("REF_NPAY_FATHER_NO");
			НаборЗаписей.Удалить("REF_NPAY_FATHER_DT");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерСправкиОНеполученииПособияОтМатери) И ЗначениеЗаполнено(СтруктураДанных.ДатаСправкиОНеполученииПособияОтМатери) Тогда
			НаборЗаписей.REF_NPAY_MOTHER_NO.Значение = СтруктураДанных.НомерСправкиОНеполученииПособияОтМатери;
			НаборЗаписей.REF_NPAY_MOTHER_DT.Значение = СтруктураДанных.ДатаСправкиОНеполученииПособияОтМатери;
		Иначе
			НаборЗаписей.Удалить("REF_NPAY_MOTHER_NO");
			НаборЗаписей.Удалить("REF_NPAY_MOTHER_DT");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ДатаСмертиРебенка) Тогда
			НаборЗаписей.CERT_DT_DATE.Значение = СтруктураДанных.ДатаСмертиРебенка;
		Иначе
			НаборЗаписей.Удалить("CERT_DT_DATE");
		КонецЕсли;
	Иначе 	
		НаборЗаписей.Удалить("CERT_NO");
		НаборЗаписей.Удалить("CERT_DT");
		НаборЗаписей.Удалить("CERT_DT_DATE");
		НаборЗаписей.Удалить("MULTPATR");
		НаборЗаписей.Удалить("AVG_SAL");
		НаборЗаписей.Удалить("CHILD_SER");
		НаборЗаписей.Удалить("MH_OUT");
		НаборЗаписей.Удалить("HOLID_ORD_NO");
		НаборЗаписей.Удалить("HOLID_ORD_DT");
		НаборЗаписей.Удалить("HOLID_DT_ST");
		НаборЗаписей.Удалить("HOLID_DT_FN");
		НаборЗаписей.Удалить("HOLID_CH_ORD_NO");
		НаборЗаписей.Удалить("HOLID_CH_ORD_DT");
		НаборЗаписей.Удалить("OTHER_CHILD_FLAG_DT");
		НаборЗаписей.Удалить("OTHER_CHILD_FLAG_BR");
		НаборЗаписей.Удалить("REF_NPAY_FATHER_NO");
		НаборЗаписей.Удалить("REF_NPAY_FATHER_DT");
		НаборЗаписей.Удалить("REF_NPAY_MOTHER_NO");
		НаборЗаписей.Удалить("REF_NPAY_MOTHER_DT");
	КонецЕсли;
	
	ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел, "ROW",""), НаборЗаписей);
	
КонецПроцедуры

Функция СтруктураДанныхДляФайлаРеестра()
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("НомерСтроки","");
	СтруктураДанных.Вставить("ВидВыплаты","");
	СтруктураДанных.Вставить("Перерасчет", Ложь);
	СтруктураДанных.Вставить("КодПричиныПерерасчета","");
	СтруктураДанных.Вставить("ДатаПредставленияПакетаДокументов","");
	СтруктураДанных.Вставить("СтраховойНомерПФР","");
	СтруктураДанных.Вставить("ИНН","");
	СтруктураДанных.Вставить("Фамилия","");
	СтруктураДанных.Вставить("Имя","");
	СтруктураДанных.Вставить("Отчество","");
	СтруктураДанных.Вставить("СтатусНалогоплательщика",0);
	СтруктураДанных.Вставить("ВидУдостоверенияЛичности","");
	СтруктураДанных.Вставить("СерияДокумента","");
	СтруктураДанных.Вставить("НомерДокумента","");
	СтруктураДанных.Вставить("ДатаВыдачиДокумента","");
	СтруктураДанных.Вставить("КемВыданДокумент","");
	СтруктураДанных.Вставить("АдресПочтовый","");
	СтруктураДанных.Вставить("АдресРегистрации","");
	СтруктураДанных.Вставить("АдресПочтовыйКодПоКЛАДР","");
	СтруктураДанных.Вставить("АдресРегистрацииКодПоКЛАДР","");
	СтруктураДанных.Вставить("ПеречислятьПособиеПочтовымПереводом", Ложь);
	СтруктураДанных.Вставить("БИКБанка","");
	СтруктураДанных.Вставить("НаименованиеБанка","");
	СтруктураДанных.Вставить("НомерЛицевогоСчета","");
	СтруктураДанных.Вставить("ОрганизацияСокращенно","");
	СтруктураДанных.Вставить("Совместительство", Ложь);
	СтруктураДанных.Вставить("ОГРНОрганизации","");
	СтруктураДанных.Вставить("РегистрационныйНомерФСС","");
	СтруктураДанных.Вставить("КодПодчиненностиФСС","");
	СтруктураДанных.Вставить("КППОрганизации","");
	СтруктураДанных.Вставить("ИННОрганизации","");
	СтруктураДанных.Вставить("ФИОРуководителя","");
	СтруктураДанных.Вставить("ДолжностьРуководителя","");
	СтруктураДанных.Вставить("ФИОГлБуха","");
	СтруктураДанных.Вставить("ДатаРождения","");
	СтруктураДанных.Вставить("Пол","");
	
	СтруктураДанных.Вставить("СреднийДневнойЗаработок",""); 
	СтруктураДанных.Вставить("ЗамененныйПервыйГодРасчета","");
	СтруктураДанных.Вставить("ЗамененныйВторойГодРасчета","");
	СтруктураДанных.Вставить("ПервыйГодРасчета","");
	СтруктураДанных.Вставить("ВторойГодРасчета","");
	СтруктураДанных.Вставить("ЗаработокПервыйГодРасчета",0);
	СтруктураДанных.Вставить("ЗаработокВторойГодРасчета",0);
	СтруктураДанных.Вставить("ЗаработокЗаПериодРасчета","");
	СтруктураДанных.Вставить("КалендарныхДнейРасчетногоПериода","");
	СтруктураДанных.Вставить("ПорядокРасчетаСреднегоЗаработка","");
	СтруктураДанных.Вставить("ПериодРасчетаСреднегоЗаработкаНачало","");
	СтруктураДанных.Вставить("ПериодРасчетаСреднегоЗаработкаОкончание","");
	СтруктураДанных.Вставить("ТарифнаяСтавкаОклад", 0);
	СтруктураДанных.Вставить("МРОТ", 0);
	СтруктураДанных.Вставить("РайонныйКоэффициент", 0);
	СтруктураДанных.Вставить("ДоляВремени", 0);
	
	СтруктураДанных.Вставить("ПрименятьЛьготыПриНачисленииПособия", Ложь);
	СтруктураДанных.Вставить("ВыплатаЗаСчетФедеральногоБюджета", "");
	СтруктураДанных.Вставить("ПроживаниеРаботаВЛьготнойЗоне","");
	СтруктураДанных.Вставить("СтатусЛьготнойЗоны","");
	
	СтруктураДанных.Вставить("ПериодПростояС","");
	СтруктураДанных.Вставить("ПериодПростояПо","");
	СтруктураДанных.Вставить("СреднийЗаработокНаПериодПростоя",0);
	СтруктураДанных.Вставить("СтажЛет", 0);
	СтруктураДанных.Вставить("СтажМесяцев", 0);
	СтруктураДанных.Вставить("СтажБезНестраховыхПериодовЛет", 0);
	СтруктураДанных.Вставить("СтажБезНестраховыхПериодовСтажМесяцев", 0);
	СтруктураДанных.Вставить("НомерВходящегоДокумента","");
	СтруктураДанных.Вставить("НомерПервичногоБольничного","");
	СтруктураДанных.Вставить("ЯвляетсяДубликатом","");
	СтруктураДанных.Вставить("ДатаВыдачиБольничного","");
	СтруктураДанных.Вставить("НаименованиеЛПУ","");
	СтруктураДанных.Вставить("АдресЛПУ","");
	СтруктураДанных.Вставить("АдресЛПУКодПоКЛАДР","");
	СтруктураДанных.Вставить("ОГРН_ЛПУ","");
	СтруктураДанных.Вставить("КодПричиныНетрудоспособности","");
	СтруктураДанных.Вставить("ДополнительныйКодПричиныНетрудоспособности","");
	СтруктураДанных.Вставить("ВторойКодПричиныНетрудоспособности","");
	СтруктураДанных.Вставить("НомерЛисткаПоОсновномуМестуРаботы","");
	СтруктураДанных.Вставить("ДатаИзмененияКодаПричиныНетрудоспособности","");    
	СтруктураДанных.Вставить("ДатаОкончанияПутевки","");
	СтруктураДанных.Вставить("НомерПутевки","");
	СтруктураДанных.Вставить("ОГРН_Санатория","");
	СтруктураДанных.Вставить("УходЗаРодственникомЛет1","");
	СтруктураДанных.Вставить("УходЗаРодственникомМесяцев1","");
	СтруктураДанных.Вставить("УходЗаРодственникомРодственнаяСвязь1","");
	СтруктураДанных.Вставить("УходЗаРодственникомФИО1","");
	СтруктураДанных.Вставить("УходЗаРодственникомИспользованоДней1","");
	СтруктураДанных.Вставить("УходЗаРодственникомЛет2","");
	СтруктураДанных.Вставить("УходЗаРодственникомМесяцев2","");
	СтруктураДанных.Вставить("УходЗаРодственникомРодственнаяСвязь2","");
	СтруктураДанных.Вставить("УходЗаРодственникомФИО2","");
	СтруктураДанных.Вставить("УходЗаРодственникомИспользованоДней2","");
	СтруктураДанных.Вставить("ВидПособия","");
	СтруктураДанных.Вставить("ПоставленаНаУчетВРанниеСрокиБеременности","");
	СтруктураДанных.Вставить("ДатаСправкиБеременной","");
	СтруктураДанных.Вставить("НомерСправкиБеременной","");
	СтруктураДанных.Вставить("ПериодНахожденияВСтационареСРебенкомС","");
	СтруктураДанных.Вставить("ПериодНахожденияВСтационареСРебенкомПо","");
	СтруктураДанных.Вставить("КодНарушенияРежима","");
	СтруктураДанных.Вставить("ДатаНарушенияРежима","");
	СтруктураДанных.Вставить("ДатаНаправленияВБюроМСЭ","");
	СтруктураДанных.Вставить("ДатаРегистрацииДокументовМСЭ","");
	СтруктураДанных.Вставить("ДатаОсвидетельствованияМСЭ","");
	СтруктураДанных.Вставить("УстановленаИзмененаГруппаИнвалидности", Ложь);
	СтруктураДанных.Вставить("ГруппаИнвалидности","");
	СтруктураДанных.Вставить("ДнейБолезниИнвалида",0);
	СтруктураДанных.Вставить("НовыйСтатусНетрудопособного","");
	СтруктураДанных.Вставить("ОсвобождениеС1","");
	СтруктураДанных.Вставить("ОсвобождениеПо1","");
	СтруктураДанных.Вставить("ДолжностьВрача1","");
	СтруктураДанных.Вставить("ФИОВрача1","");
	СтруктураДанных.Вставить("ИдентификационныйНомерВрача1","");
	СтруктураДанных.Вставить("ФИОВрачаПредседателяВК1","");
	СтруктураДанных.Вставить("ДолжностьВрачаПредседателяВК1","");
	СтруктураДанных.Вставить("ИдентификационныйНомерВрачаПредседателяВК1","");
	СтруктураДанных.Вставить("ОсвобождениеС2","");
	СтруктураДанных.Вставить("ОсвобождениеПо2","");
	СтруктураДанных.Вставить("ДолжностьВрача2","");
	СтруктураДанных.Вставить("ФИОВрача2","");
	СтруктураДанных.Вставить("ИдентификационныйНомерВрача2","");
	СтруктураДанных.Вставить("ФИОВрачаПредседателяВК2","");
	СтруктураДанных.Вставить("ДолжностьВрачаПредседателяВК2","");
	СтруктураДанных.Вставить("ИдентификационныйНомерВрачаПредседателяВК2","");
	СтруктураДанных.Вставить("ОсвобождениеС3","");
	СтруктураДанных.Вставить("ОсвобождениеПо3","");
	СтруктураДанных.Вставить("ДолжностьВрача3","");
	СтруктураДанных.Вставить("ФИОВрача3","");
	СтруктураДанных.Вставить("ИдентификационныйНомерВрача3","");
	СтруктураДанных.Вставить("ФИОВрачаПредседателяВК3","");
	СтруктураДанных.Вставить("ДолжностьВрачаПредседателяВК3","");
	СтруктураДанных.Вставить("ИдентификационныйНомерВрачаПредседателяВК3","");
	СтруктураДанных.Вставить("ДатаНовыйСтатусНетрудопособного","");
	СтруктураДанных.Вставить("ДатаВыходаНаРаботу","");
	СтруктураДанных.Вставить("НомерЛисткаПродолжения","");
	СтруктураДанных.Вставить("УсловияИсчисленияКод1","");
	СтруктураДанных.Вставить("УсловияИсчисленияКод2","");
	СтруктураДанных.Вставить("УсловияИсчисленияКод3","");
	СтруктураДанных.Вставить("ДатаАктаФормыН1",""); 
	СтруктураДанных.Вставить("ДатаНачалаРаботы","");
	СтруктураДанных.Вставить("СрочныйДоговорС","");
	СтруктураДанных.Вставить("СрочныйДоговорПо","");
	СтруктураДанных.Вставить("ДатаНачалаОплаты","");
	СтруктураДанных.Вставить("ДатаОкончанияОплаты","");
	СтруктураДанных.Вставить("СуммаПособияРаботодателя",0);
	СтруктураДанных.Вставить("СуммаПособияФСС",0);
	СтруктураДанных.Вставить("СуммаПособияВсего",0);
	
	СтруктураДанных.Вставить("ДокументОРожденииВид","");
	СтруктураДанных.Вставить("ДокументОРожденииСерияНомер","");
	СтруктураДанных.Вставить("ДокументОРожденииДатаВыдачи","");
	СтруктураДанных.Вставить("ФамилияРебенка","");
	СтруктураДанных.Вставить("ИмяРебенка","");
	СтруктураДанных.Вставить("ОтчествоРебенка","");
	СтруктураДанных.Вставить("ДатаРожденияРебенка","");
	СтруктураДанных.Вставить("ДатаСмертиРебенка","");
	СтруктураДанных.Вставить("УсыновлениеОпека","");
	СтруктураДанных.Вставить("УсыновлениеОпекаСерияНомер","");
	СтруктураДанных.Вставить("УсыновлениеОпекаДатаВыдачи","");
	
	СтруктураДанных.Вставить("ДатаСправкиОРождении","");
	СтруктураДанных.Вставить("НомерСправкиОРождении","");
	СтруктураДанных.Вставить("ДатаДоговораОПередачеНаВоспитание","");
	СтруктураДанных.Вставить("НомерДоговораОПередачеНаВоспитание","");
	СтруктураДанных.Вставить("ДатаСправкиОтДругогоРодителя","");
	СтруктураДанных.Вставить("НомерСправкиОтДругогоРодителя","");
	
	СтруктураДанных.Вставить("ОдновременныйУходЗаНесколькимиДетьми",Ложь);
	СтруктураДанных.Вставить("ДатаПриказаНаОтпускПоУходуЗаРебенком","");
	СтруктураДанных.Вставить("НомерПриказаНаОтпускПоУходуЗаРебенком","");
	СтруктураДанных.Вставить("Очередность",0);
	СтруктураДанных.Вставить("НаличиеРешенияСудаОЛишенииПрав",Ложь);
	СтруктураДанных.Вставить("ДатаНачала","");
	СтруктураДанных.Вставить("ДатаОкончания","");
	СтруктураДанных.Вставить("ДатаСправкиОНеполученииПособияОтОтца","");
	СтруктураДанных.Вставить("НомерСправкиОНеполученииПособияОтОтца","");
	СтруктураДанных.Вставить("ДатаСправкиОНеполученииПособияОтМатери","");
	СтруктураДанных.Вставить("НомерСправкиОНеполученииПособияОтМатери","");
	СтруктураДанных.Вставить("НаличиеДокументаОРождении",Ложь);
	СтруктураДанных.Вставить("НаличиеДокументаОСмерти",Ложь);
	СтруктураДанных.Вставить("ДатаПриказаОЗаменеПослеродовогоОтпуска","");
	СтруктураДанных.Вставить("НомерПриказаОЗаменеПослеродовогоОтпуска","");

	Возврат СтруктураДанных
	
КонецФункции // СтруктураДанныхДляФайлаРеестра()

////////////////////////////////////////////////////////////////////////////////

Процедура ЗаписатьФИОРебенкаВПоляДокумента(СтрокаФИО, СтрокаДокумента, ПолеФамилия = "ФамилияРебенка", ПолеИмя = "ИмяРебенка",ПолеОтчество = "ОтчествоРебенка") Экспорт
	
	ФИО = ОбщегоНазначения.ПолучитьМассивФИО(СтрокаФИО);
	
	СтрокаДокумента[ПолеФамилия] = ФИО[0];
	СтрокаДокумента[ПолеИмя] = ФИО[1];
	СтрокаДокумента[ПолеОтчество] = ФИО[2];
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗастрахованныхВРеестреПособий(ДатаАктуальности, ТабличнаяЧастьРеестра = Неопределено, СтрокаТабличнойЧастиРеестра = Неопределено, СтрокаИсключений = "") Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.Физлицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	СотрудникиОрганизаций.Ссылка,
	|	СотрудникиОрганизаций.Физлицо.ИНН КАК ИНН,
	|	СотрудникиОрганизаций.Физлицо.ДатаРождения КАК ДатаРождения,
	|	СотрудникиОрганизаций.Физлицо.Пол КАК Пол
	|ПОМЕСТИТЬ ВТСотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&Ссылки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних.ФизЛицо,
	|	СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних.Статус
	|ПОМЕСТИТЬ ВТСтатусыНалогоплательщика
	|ИЗ
	|	РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(
	|			&ДатаАктуальности,
	|			ФизЛицо В
	|				(ВЫБРАТЬ
	|					СотрудникиОрганизаций.Физлицо
	|				ИЗ
	|					ВТСотрудник КАК СотрудникиОрганизаций)) КАК СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудник.Ссылка,
	|	Сотрудник.Физлицо,
	|	Сотрудник.СтраховойНомерПФР,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ЕСТЬNULL(СтатусыНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК СтатусНалогоплательщика,
	|	Сотрудник.ИНН,
	|	Сотрудник.ДатаРождения,
	|	Сотрудник.Пол
	|ИЗ
	|	ВТСотрудник КАК Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусыНалогоплательщика КАК СтатусыНалогоплательщика
	|		ПО Сотрудник.Физлицо = СтатусыНалогоплательщика.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаАктуальности,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						Сотрудник.Физлицо
	|					ИЗ
	|						ВТСотрудник КАК Сотрудник)) КАК ФИОФизЛицСрезПоследних
	|		ПО Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо";
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Если СтрокаТабличнойЧастиРеестра = Неопределено Тогда
		Запрос.УстановитьПараметр("Ссылки", ТабличнаяЧастьРеестра.ВыгрузитьКолонку("Сотрудник"));
		Выборка = Запрос.Выполнить().Выбрать();
		СтруктураПоиска = Новый Структура("Сотрудник");
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска.Сотрудник = Выборка.Ссылка;
			СтрокиТЧ = ТабличнаяЧастьРеестра.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка, , СтрокаИсключений);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Запрос.УстановитьПараметр("Ссылки", СтрокаТабличнойЧастиРеестра.Сотрудник);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиРеестра, Выборка, , СтрокаИсключений);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеОрганизации(ЭтотОбъект, ЗаполнятьГлавБуха = Истина) Экспорт

	ДанныеСтрахователя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЭтотОбъект.Организация,"РегистрационныйНомерФСС, ДополнительныйКодФСС, КодПодчиненностиФСС, НаименованиеТерриториальногоОрганаФСС, ИНН, КПП, ОГРН, ИндивидуальныйПредприниматель");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеСтрахователя);
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(ЭтотОбъект.Организация) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо,
		|	ФизическиеЛица.Комментарий
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&Дата,
		|			ОтветственноеЛицо в (ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель), ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер))
		|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка";
		
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
		Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		    Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				ЭтотОбъект.Руководитель = Выборка.ФизическоеЛицо;
				ЭтотОбъект.ДолжностьРуководителя = Выборка.ДолжностьРуководителя;
			ИначеЕсли ЗаполнятьГлавБуха И Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер  Тогда
				ЭтотОбъект.ГлавныйБухгалтер = Выборка.ФизическоеЛицо;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ЭтотОбъект.Руководитель = ДанныеСтрахователя.ИндивидуальныйПредприниматель;
		Если ЗаполнятьГлавБуха Тогда
			ЭтотОбъект.ГлавныйБухгалтер = ЭтотОбъект.Руководитель;
		КонецЕсли;
		ЭтотОбъект.ДолжностьРуководителя = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОрганизацииВЗаявленияхНаВозмещениеПособий(ЭтотОбъект) Экспорт

	ЭтотОбъект.Руководитель = Неопределено;
	ЭтотОбъект.ДолжностьРуководителя = Неопределено;
	ЭтотОбъект.АдресОрганизации = Неопределено;
		
	Если ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(ЭтотОбъект.Организация) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо,
		|	ФизическиеЛица.Комментарий
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&Дата,
		|			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
		|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка";
		
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
		Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		
			ЭтотОбъект.Руководитель = Выборка.ФизическоеЛицо;
			ЭтотОбъект.ДолжностьРуководителя = Выборка.ДолжностьРуководителя;
		
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтоЮрЛицо", ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(ЭтотОбъект.Организация));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА &ЭтоЮрЛицо
	|			ТОГДА "","" + АдресЮрЛица.Поле1 + "","" + АдресЮрЛица.Поле2 + "","" + АдресЮрЛица.Поле3 + "","" + АдресЮрЛица.Поле4 + "","" + АдресЮрЛица.Поле5 + "","" + АдресЮрЛица.Поле6 + "","" + АдресЮрЛица.Поле7 + "","" + АдресЮрЛица.Поле8 + "","" + АдресЮрЛица.Поле9 + "","" + ВЫБОР
	|					КОГДА АдресЮрЛица.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|						ТОГДА ""дом""
	|					ИНАЧЕ ""владение""
	|				КОНЕЦ + "","" + ВЫБОР
	|					КОГДА АдресЮрЛица.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|						ТОГДА ""корпус""
	|					ИНАЧЕ ""строение""
	|				КОНЕЦ + "","" + ВЫБОР
	|					КОГДА АдресЮрЛица.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|						ТОГДА ""кв.""
	|					ИНАЧЕ ""оф.""
	|				КОНЕЦ
	|		КОГДА АдресаФактические.Поле1 ЕСТЬ NULL 
	|			ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
	|					КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|						ТОГДА ""дом""
	|					ИНАЧЕ ""владение""
	|				КОНЕЦ + "","" + ВЫБОР
	|					КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|						ТОГДА ""корпус""
	|					ИНАЧЕ ""строение""
	|				КОНЕЦ + "","" + ВЫБОР
	|					КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|						ТОГДА ""кв.""
	|					ИНАЧЕ ""оф.""
	|				КОНЕЦ
	|		ИНАЧЕ "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9 + "","" + ВЫБОР
	|				КОГДА АдресаФактические.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|					ТОГДА ""дом""
	|				ИНАЧЕ ""владение""
	|			КОНЕЦ + "","" + ВЫБОР
	|				КОГДА АдресаФактические.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|					ТОГДА ""корпус""
	|				ИНАЧЕ ""строение""
	|			КОНЕЦ + "","" + ВЫБОР
	|				КОГДА АдресаФактические.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|					ТОГДА ""кв.""
	|				ИНАЧЕ ""оф.""
	|			КОНЕЦ
	|	КОНЕЦ КАК АдресОрганизации,
	|	Организация.ДополнительныйКодФСС,
	|	Организация.КодПодчиненностиФСС,
	|	Организация.НаименованиеТерриториальногоОрганаФСС,
	|	Организация.РегистрационныйНомерФСС,
	|	Организация.ИндивидуальныйПредприниматель,
	|	Организация.ОсновнойБанковскийСчет.Банк КАК Банк,
	|	Организация.ОсновнойБанковскийСчет.НомерСчета КАК НомерСчета,
	|	Организация.ОсновнойБанковскийСчет.Банк.КоррСчет КАК КоррСчетБанка,
	|	Организация.ОсновнойБанковскийСчет.Банк.Наименование КАК НаименованиеБанка,
	|	Организация.ОсновнойБанковскийСчет.Банк.Код КАК БИКБанка
	|ИЗ
	|	Справочник.Организации КАК Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
	|		ПО Организация.ИндивидуальныйПредприниматель = АдресаФактические.Объект
	|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО Организация.ИндивидуальныйПредприниматель = АдресаРегистрации.Объект
	|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресЮрЛица
	|		ПО Организация.Ссылка = АдресЮрЛица.Объект
	|			И (АдресЮрЛица.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|			И (АдресЮрЛица.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|ГДЕ
	|	Организация.Ссылка = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		Если Не ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(ЭтотОбъект.Организация) Тогда
			ЭтотОбъект.Руководитель = Выборка.ИндивидуальныйПредприниматель;
			ЭтотОбъект.ДолжностьРуководителя = "";
		КонецЕсли;
		ЭтотОбъект.АдресОрганизации = СокрЛП(ЭтотОбъект.АдресОрганизации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодсчитатьРазностьСтажейВГодахИМесяцах(БольшийСтажЛет, БольшийСтажМесяцев, МеньшийСтажЛет, МеньшийСтажМесяцев, РазностьЛет, РазностьМесяцев) Экспорт

	РазностьМесяцев = БольшийСтажЛет * 12 + БольшийСтажМесяцев - МеньшийСтажЛет * 12 - МеньшийСтажМесяцев;
	Если РазностьМесяцев > 0 Тогда
		РазностьЛет = Цел(РазностьМесяцев / 12);
		РазностьМесяцев = РазностьМесяцев - РазностьЛет * 12;
	Иначе
		РазностьЛет = 0;
		РазностьМесяцев = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеЗастрахованного(ДанныеЗастрахованного, Отказ, Заголовок, НачалоСообщения = "") Экспорт

	Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.ФИОСотрудника) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указано ФИО сотрудника!", Отказ, Заголовок);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.ДатаРождения) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указана дата рождения получателя пособия!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.Пол) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан пол получателя пособия!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрЗаменить(ДанныеЗастрахованного.СтраховойНомерПФР,"-","")) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан номер страхового свидетельства!", Отказ, Заголовок);
	ИначеЕсли Не РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(ДанныеЗастрахованного.СтраховойНомерПФР) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Задан неверный номер страхового свидетельства!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.СтатусНалогоплательщикаДляПроверки) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан статус налогоплательщика!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеЗастрахованного.ИНН) И Не РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ДанныеЗастрахованного.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Указан неверный ИНН!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.ВидУдостоверенияЛичности) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан вид документа, удостоверяющего личность!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.СерияДокумента + ДанныеЗастрахованного.НомерДокумента) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указаны серия и номер документа, удостоверяющего личность!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.ДатаВыдачиДокумента) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указана дата выдачи документа, удостоверяющего личность!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.КемВыданДокумент) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указано, кем выдан документ!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ДанныеЗастрахованного.ВидВыплаты = "1" Тогда
		Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.АдресРегистрации) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан адрес регистрации!", Отказ, Заголовок);
		Иначе	
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ДанныеЗастрахованного.АдресРегистрации);	
			Если СтруктураАдреса.Свойство("ЗаПределамиРФ") Тогда
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не удалось разобрать адрес регистрации, возможно указан адрес за пределами РФ!", Отказ, Заголовок);
			ИначеЕсли Не ЗначениеЗаполнено(СтруктураАдреса.Индекс) Тогда
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "В адресе регистрации не указан почтовый индекс!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.АдресРегистрацииКодПоКЛАДР) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан код по КЛАДР адреса регистрации!", Отказ, Заголовок);
		ИначеЕсли Не ОбщегоНазначения.ТолькоЦифрыВСтроке(ДанныеЗастрахованного.АдресРегистрацииКодПоКЛАДР) Или СтрДлина(ДанныеЗастрахованного.АдресРегистрацииКодПоКЛАДР) < 17 Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Код по КЛАДР адреса регистрации должен состоять из 17 цифр", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Банковские реквизиты проверяем только если планируется банковский перевод
	Если ДанныеЗастрахованного.ПеречислятьПособиеПочтовымПереводом Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.АдресПочтовый) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан почтовый адрес для пересылки пособия!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.АдресПочтовыйКодПоКЛАДР) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан код по КЛАДР почтового адреса!", Отказ, Заголовок);
		ИначеЕсли Не ОбщегоНазначения.ТолькоЦифрыВСтроке(ДанныеЗастрахованного.АдресПочтовыйКодПоКЛАДР) Или СтрДлина(ДанныеЗастрахованного.АдресПочтовыйКодПоКЛАДР) < 17 Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Код по КЛАДР почтового адреса должен состоять из 17 цифр", Отказ, Заголовок);
		КонецЕсли;
		
	Иначе 
		
		Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.НаименованиеБанка) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан Банк!", Отказ, Заголовок);
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.БИКБанка) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан БИК банка!", Отказ, Заголовок);
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.НомерЛицевогоСчета) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан номер счета!", Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.ДатаПредставленияПакетаДокументов) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указана дата представления пакета документов!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗастрахованного.НаименованиеДокументаНаПроживание) Тогда
		Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.ДатаВыдачиДокументаНаПроживание) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указана дата выдачи (продления) документа на проживание в РФ!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеЗастрахованного.НомерДокументаНаПроживание) Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(НачалоСообщения + "Не указан номер документа на проживание в РФ!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДанныеЗастрахованного()

Процедура ПроверитьДанныеСтрахователя(ДанныеСтрахователя, Отказ, Заголовок) Экспорт

	Если Не ЗначениеЗаполнено(ДанныеСтрахователя.Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеСтрахователя.ИННОрганизации) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан ИНН страхователя!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(ДанныеСтрахователя.Организация) И Не ЗначениеЗаполнено(ДанныеСтрахователя.КППОрганизации) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан КПП страхователя!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтрахователя.ОГРНОрганизации) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан ОГРН (ОГРНИП) страхователя!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтрахователя.НаименованиеТерриториальногоОрганаФСС) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указано наименование территориального органа ФСС!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтрахователя.РегистрационныйНомерФСС) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан регистрационный номер в ФСС!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтрахователя.КодПодчиненностиФСС) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан код подчиненности ФСС!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтрахователя.РеестрСоставил) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан составитель реестра!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтрахователя.ФИОРуководителя) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан руководитель страхователя!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтрахователя.ТелефонСоставителя) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан телефон составителя реестра!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДанныеСтрахователя()

Функция ДанныеОрганизацииДляЗаявленияНаВыплатуПособия(Организация, Дата) Экспорт

	ДанныеОрганизации = Новый Структура("Уполномоченный, ДолжностьУполномоченного, ТелефонСоставителя");
	
	Запрос = Новый Запрос;
	Если ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаСрезПоследних.Должность КАК ДолжностьУполномоченного,
		|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК Уполномоченный,
		|	Телефон.Представление КАК ТелефонСоставителя,
		|	ФизическиеЛица.Комментарий
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&Дата,
		|			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
		|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК Телефон
		|		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = Телефон.Объект
		|			И (Телефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
		|			И (Телефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Дата", Дата);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Телефон.Представление КАК ТелефонСоставителя
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК Телефон
		|ГДЕ
		|	Телефон.Объект = &ИндивидуальныйПредприниматель
		|	И Телефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный)
		|	И Телефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)";
		
		ДанныеОрганизации.Уполномоченный = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация,"ИндивидуальныйПредприниматель");
		Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", ДанныеОрганизации.Уполномоченный);
		ДанныеОрганизации.ДолжностьУполномоченного = "";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Выборка);
	КонецЕсли;
	
	Возврат ДанныеОрганизации
	
КонецФункции

Функция ДанныеСоставителяРеестра(Ответственный) Экспорт
	
	ДанныеСоставителя = Новый Структура("РеестрСоставил, ТелефонСоставителя, АдресЭлектроннойПочтыСоставителя");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.ФизЛицо КАК РеестрСоставил,
	|	АдресЭП.Представление КАК АдресЭлектроннойПочтыСоставителя,
	|	Телефон.Представление КАК ТелефонСоставителя
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресЭП
	|		ПО Пользователи.Ссылка = АдресЭП.Объект
	|			И (АдресЭП.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя))
	|			И (АдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК Телефон
	|		ПО Пользователи.ФизЛицо = Телефон.Объект
	|			И (Телефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	|			И (Телефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ответственный);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСоставителя,Выборка);
	КонецЕсли;
	
	Возврат ДанныеСоставителя
	
КонецФункции // ДанныеСоставителяРеестра()

Функция ДанныеСотрудникаДляЗаявленияНаВыплатуПособия(Организация, Сотрудник, Дата, Режим = "ДляДокумента") Экспорт

	Возврат ОбменСведениямиОПособияхСФССПолныеПрава.ДанныеСотрудникаДляЗаявленияНаВыплатуПособия(Организация, Сотрудник, Дата, Режим)
	
КонецФункции

Функция ИмяФайла(ДокументОбъект) Экспорт

	Возврат "E_" + ДокументОбъект.РегистрационныйНомерФСС + "_" + Формат(ДокументОбъект.Дата,"ДФ=yyyy_MM_dd") + "_" + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументОбъект);

КонецФункции // ИмяФайла()

Функция КодАдресаПоКЛАДРдляФСС(Адрес) Экспорт
	СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(Адрес);	
	Если ЗначениеЗаполнено(СтруктураАдреса) И СтруктураАдреса.Свойство("Индекс") Тогда
		СтрокаКладр = УправлениеКонтактнойИнформацией.ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(СтруктураАдреса.Регион, СтруктураАдреса.Район, СтруктураАдреса.Город, СтруктураАдреса.НаселенныйПункт, СтруктураАдреса.Улица);
		Возврат Формат(Цел(СтрокаКладр.Код / 100000000), "ЧЦ=17; ЧВН=; ЧГ=");
	Иначе
		Возврат "00000000000000000"		
	КонецЕсли;
КонецФункции

Функция СформироватьЗапросПоШапкеДокумента(ДокументОбъект) Экспорт 

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК ДатаПодачиЗаявления,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.НаименованиеПолное КАК НаименованиеОрганизации,
	|	ДанныеДокумента.НаименованиеТерриториальногоОрганаФСС,
	|	ДанныеДокумента.РегистрационныйНомерФСС,
	|	ДанныеДокумента.ДополнительныйКодФСС,
	|	ДанныеДокумента.КодПодчиненностиФСС,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ДанныеДокумента.Руководитель.Наименование) КАК ФИОРуководителя,
	|	ЕСТЬNULL(ФИОГлавБуха.Фамилия + "" "" + ФИОГлавБуха.Имя + "" "" + ФИОГлавБуха.Отчество, ДанныеДокумента.ГлавныйБухгалтер.Наименование) КАК ФИОГлавБуха,
	|	ЕСТЬNULL(ФИОСоставителя.Фамилия + "" "" + ФИОСоставителя.Имя + "" "" + ФИОСоставителя.Отчество, ДанныеДокумента.РеестрСоставил.Наименование) КАК ФИОСоставителя,
	|	ДанныеДокумента.ТелефонСоставителя,
	|	ДанныеДокумента.АдресЭлектроннойПочтыСоставителя,
	|	ДанныеДокумента.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
	|	ДанныеДокумента.КраткийСоставДокумента,
	|	ДанныеДокумента.ОГРН КАК ОГРНОрганизации,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ИНН КАК ИННОрганизации,
	|	ДанныеДокумента.КПП КАК КППОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Организация.НаименованиеСокращенное = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеПолное
	|		ИНАЧЕ ДанныеДокумента.Организация.НаименованиеСокращенное
	|	КОНЕЦ КАК ОрганизацияСокращенно,
	|	ДанныеДокумента.РеестрСоставил,
	|	ДанныеДокумента.ГлавныйБухгалтер,
	|	ДанныеДокумента.ВыводитьПодписиВРеестрПособий
	|ИЗ
	|	Документ.РеестрСведенийВФССОПособияхПриРожденииРебенка КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &Руководитель) КАК ФИОФизЛицСрезПоследних
	|		ПО ДанныеДокумента.Руководитель = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ГлавныйБухгалтер) КАК ФИОГлавБуха
	|		ПО ДанныеДокумента.ГлавныйБухгалтер = ФИОГлавБуха.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &Составитель) КАК ФИОСоставителя
	|		ПО ДанныеДокумента.РеестрСоставил = ФИОСоставителя.ФизЛицо
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка";
    Запрос.Текст = СтрЗаменить(Запрос.Текст,"РеестрСведенийВФССОПособияхПриРожденииРебенка",ДокументОбъект.Метаданные().Имя);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Составитель", ДокументОбъект.РеестрСоставил);
	Запрос.УстановитьПараметр("Руководитель", ДокументОбъект.Руководитель);
	Запрос.УстановитьПараметр("ГлавныйБухгалтер", ДокументОбъект.ГлавныйБухгалтер);
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	
	Возврат Запрос.Выполнить();	

КонецФункции // СформироватьЗапросПоШапкеДокумента()

Функция СформироватьФайлРеестра(ДокументОбъект, Отказ, ПроверятьДанные = Истина, ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоРаботникиОрганизации = Неопределено) Экспорт

	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапкеДокумента(ДокументОбъект).Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	Если ВыборкаПоРаботникиОрганизации = Неопределено Тогда
		ВыборкаПоРаботникиОрганизации = ДокументОбъект.СформироватьЗапросПоТЧРаботникиОрганизации().Выбрать();
	КонецЕсли;
	
	//Проверка корректности заполнения документа
	Если ПроверятьДанные Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		ДокументОбъект.ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь, ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
		ВыборкаПоРаботникиОрганизации.Сбросить();
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если Отказ тогда
		Возврат "";
	КонецЕсли;	 
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматФСС");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("author", ВыборкаПоШапкеДокумента.ФИОСоставителя);
	Атрибуты.Вставить("version", "1.6");
	Атрибуты.Вставить("software", Лев("1С:" + Метаданные.Синоним, 80));
	Атрибуты.Вставить("version_software", Лев(Метаданные.Версия, 15));
	Атрибуты.Вставить("phone", ВыборкаПоШапкеДокумента.ТелефонСоставителя);
	Атрибуты.Вставить("email", ВыборкаПоШапкеДокумента.АдресЭлектроннойПочтыСоставителя);
	Атрибуты.Вставить("xsi:noNamespaceSchemaLocation", "Страхователь.xsd");
	Узел = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ROWSET", "", Атрибуты);
	ФорматСтроки = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "Строка");
	
	СтруктураДанных = СтруктураДанныхДляФайлаРеестра();
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаПоШапкеДокумента);
	
	НачалоНомераСтроки = ИмяФайла(ДокументОбъект) + ":";
	
	НомерДокументаВПачке = 0;
	Пока ВыборкаПоРаботникиОрганизации.Следующий()	Цикл
		
		НомерДокументаВПачке = 	НомерДокументаВПачке + 1;
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаПоРаботникиОрганизации);
		СтруктураДанных.НомерСтроки = НачалоНомераСтроки + Формат(НомерДокументаВПачке,"ЧЦ=10; ЧГ=0");
		ДобавитьСтрокуВРеестр(Узел, ФорматСтроки, СтруктураДанных)
		
	КонецЦикла;
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML();
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрокаXML;
	
КонецФункции // СформироватьФайлРеестра()

////////////////////////////////////////////////////////////////////////////////

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура ВывестиСуммуВРубляхКопейкахВЯчейки(Данные, ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек)
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Прав("                  " + Формат(Данные, "ЧЦ=" + (КоличествоЯчеек + 1) + "; ЧДЦ=0; ЧС=-2; ЧГ="), КоличествоЯчеек), ТабличныйДокумент, ПрефиксЯчеек, КоличествоЯчеек);
КонецПроцедуры
	
// Разбивает строку (не разрывая слов) на подстроки указанной длинны, 
//							строки дополняются пробелами, переводы строк удаляются
// Параметры
//  ТекстСтроки  - Строка, которую необходимо разбить на подстроки
//                 
//  МассивДлинСтрок  - Массив длин строк, если в результирующей строке оказалось подстрок больше
//                     Чем кодичество указанных длин, то все "лишние" строки выравниваются по последнему
//                     значению длинны строки.
// Возвращаемое значение:
//   Строка   - разбитая на подстроки указанной длинны
//
Функция РазбитьСтрокуНаПодСтроки(Знач ТекстСтроки, МассивДлинСтрок) Экспорт

	ВозвращаемаяСтрока = "";
	
	РазделителиСлов = " .,:;?!%\<>+-*/=_" + Символы.ПС;
	
	ТекстСтроки = СокрЛП(ТекстСтроки);
	
	// обыграем случай, когда у нас многострочная строка
	Если СтрЧислоСтрок(ТекстСтроки) > 1 Тогда
	
		Для НомерПодстроки = 1 По СтрЧислоСтрок(ТекстСтроки) Цикл
			
			НовыйМассивДлинСтроки = Новый Массив;
			
			Если НомерПодстроки = 1 Тогда
			
				НачальнаяГраница = 0;
			
			Иначе
				
				Если СтрЧислоСтрок(ВозвращаемаяСтрока) > МассивДлинСтрок.ВГраница() Тогда
				
					НачальнаяГраница = МассивДлинСтрок.ВГраница();
					
				Иначе
					
					НачальнаяГраница = СтрЧислоСтрок(ВозвращаемаяСтрока);
				
				КонецЕсли; 
			
			КонецЕсли; 
			
			Для ИндексСтроки = НачальнаяГраница По МассивДлинСтрок.ВГраница() Цикл
			
				НовыйМассивДлинСтроки.Добавить(МассивДлинСтрок[ИндексСтроки]);
			
			КонецЦикла; 
		
			ВозвращаемаяСтрока = ВозвращаемаяСтрока + ?(ПустаяСтрока(ВозвращаемаяСтрока), "", Символы.ПС) + РазбитьСтрокуНаПодСтроки(СтрПолучитьСтроку(ТекстСтроки, НомерПодстроки), НовыйМассивДлинСтроки);
		
		КонецЦикла; 
		
	Иначе
		
		ДлинаСтроки = МассивДлинСтрок[0];
		
		// Если длина строки меньше или равна нужной длинне - просто вернем ее
		Если СтрДлина(ТекстСтроки) <= ДлинаСтроки Тогда
		
			ВозвращаемаяСтрока = ТекстСтроки; 
			
		Иначе
			
			// Заменим все разделители символом _, для удобства анализа
			ТестируемаяСтрока = ТекстСтроки;
			
			Для НомерРазделителя = 1 По СтрДлина(РазделителиСлов)  Цикл
				
				РазделительСлов = Сред(РазделителиСлов, НомерРазделителя, 1);
				
				ТестируемаяСтрока = СтрЗаменить(ТестируемаяСтрока, РазделительСлов, "_");
			
			КонецЦикла; 
			
			// Найдем первый разделитель
			Разрыв = Найти(ТестируемаяСтрока, "_");
			
			ИндексМассиваДлинСтрок = 0;
			
			// Обрабатывем строку пока она не закончится
			Пока СтрДлина(ТекстСтроки) > 0 Цикл
				
				Если ИндексМассиваДлинСтрок <= МассивДлинСтрок.ВГраница() Тогда
				
					ДлинаСтроки = МассивДлинСтрок[ИндексМассиваДлинСтрок];
				
				Иначе
				
					ДлинаСтроки = МассивДлинСтрок[МассивДлинСтрок.ВГраница()];
				
				КонецЕсли; 
				
				// если разрыв больше чем нужная длина
				// если разрывов больше нет
				// и частны случай, когда есть разрыв- пробел в самом конце строки нужной длины
				// или длина оставшейся строки меньше или равна нужной длинне
				Если Разрыв >= ДлинаСтроки ИЛИ Разрыв = 0 ИЛИ Сред(ТекстСтроки, ДлинаСтроки + 1, 1) = " " ИЛИ СтрДлина(ТекстСтроки) <= ДлинаСтроки Тогда
				
					ВозвращаемаяСтрока = ВозвращаемаяСтрока + ?(ПустаяСтрока(ВозвращаемаяСтрока), "", Символы.ПС) + СокрЛП(Лев(ТекстСтроки, ДлинаСтроки));
					
					ТекстСтроки = СокрЛП(Сред(ТекстСтроки, ДлинаСтроки + 1));
					
					ТестируемаяСтрока = Сред(ТестируемаяСтрока, ДлинаСтроки + 1);
					
					Если Лев(ТестируемаяСтрока,1) = "_" Тогда
					
						ТестируемаяСтрока = Сред(ТестируемаяСтрока, 2);
					
					КонецЕсли; 
					
					ИндексМассиваДлинСтрок = ИндексМассиваДлинСтрок + 1;
					
					Разрыв = Найти(ТестируемаяСтрока, "_");
				
				Иначе 
					
					НовыйРазрыв = Найти(Сред(ТестируемаяСтрока, Разрыв + 1), "_");
					
					// Есть еще один разрыв и он вместе с предыдущим меньше или равен длине строки
					Если НовыйРазрыв > 0 И Разрыв + НовыйРазрыв <= ДлинаСтроки Тогда
						
						Разрыв = Разрыв + НовыйРазрыв;
						
					Иначе
						
						// больше разрывов нет
						// или он вместе с предыдущим больше нужной длины
						ВозвращаемаяСтрока = ВозвращаемаяСтрока + ?(ПустаяСтрока(ВозвращаемаяСтрока), "", Символы.ПС) + СокрЛП(Лев(ТекстСтроки, Разрыв));
						
						ТекстСтроки = СокрЛП(Сред(ТекстСтроки, Разрыв + 1));
						
						ТестируемаяСтрока = Сред(ТестируемаяСтрока, Разрыв + 1);
						
						Если Лев(ТестируемаяСтрока,1) = "_" Тогда
					
							ТестируемаяСтрока = Сред(ТестируемаяСтрока, 2);
					
						КонецЕсли; 
					
						ИндексМассиваДлинСтрок = ИндексМассиваДлинСтрок + 1;
					
						Разрыв = Найти(ТестируемаяСтрока, "_");
						
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЦикла; 
				
		КонецЕсли; 
	
	КонецЕсли;
	
	Если СтрЧислоСтрок(ВозвращаемаяСтрока) > 1 Тогда
		
		ВыравненнаяСтрока = "";
		
		Для НомерПодстроки = 1 По СтрЧислоСтрок(ВозвращаемаяСтрока) - 1 Цикл
			
			ВыравниваемаяСтрока = СтрПолучитьСтроку(ВозвращаемаяСтрока, НомерПодстроки);
			
			Если НомерПодстроки - 1 <= МассивДлинСтрок.ВГраница() Тогда
				
				ДлинаСтроки = МассивДлинСтрок[НомерПодстроки - 1];
				
			Иначе
				
				ДлинаСтроки = МассивДлинСтрок[МассивДлинСтрок.ВГраница()];
				
			КонецЕсли; 
				
			Для НомерПозицииВСтроке = СтрДлина(ВыравниваемаяСтрока) + 1 По ДлинаСтроки Цикл
			
				ВыравниваемаяСтрока = ВыравниваемаяСтрока + " ";
			
			КонецЦикла; 
			
			ВыравненнаяСтрока = ВыравненнаяСтрока + ?(ПустаяСтрока(ВыравненнаяСтрока), "", Символы.ПС) + ВыравниваемаяСтрока;
		
		КонецЦикла;
		
		ВозвращаемаяСтрока = ВыравненнаяСтрока + Символы.ПС + СтрПолучитьСтроку(ВозвращаемаяСтрока, СтрЧислоСтрок(ВозвращаемаяСтрока));
		
	КонецЕсли; 
	
	ВозвращаемаяСтрока = СтрЗаменить(ВозвращаемаяСтрока, Символы.ПС, "");
	
	Возврат ВозвращаемаяСтрока;

КонецФункции // РазбитьСтрокуПоСтрочно()

Функция ОписаниеПериодаВПечатнойФорме(ДатаС, ДатаПо) Экспорт

	Возврат "с " + Формат(ДатаС,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаПо,"ДФ=dd.MM.yyyy");

КонецФункции // ОписаниеПериодаВПечатнойФорме()

////////////////////////////////////////////////////////////////////////////////
//  Формирование общих печатных форм
	
// Формирует табличный документ с печатной формой заявление
//
// Параметры
//  СтруктураДанных 		- Структура полученная с помощью функции СтруктураДанныхДляПечатиЗаявленийВФССОВыплатеПособия()
//								и в последствии заполненная в процедуре вывода на печать, если передать не заполненную структуру
//								вернется бланк заявления
//
// Возвращаемое значение:
//   ТабличныйДокумент   	- печатная форма заявление в ФСС о выплате пособия
//
Функция ПечатьЗаявлениеВФССОВыплатеПособия(СтруктураДанных, ИмяМакета = "ЗаявлениеВФССОВыплатеПособия_2011") Экспорт

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеВФССОВыплатеПособия";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет = ПолучитьОбщийМакет(ИмяМакета);
	ЭтоБланк2012года = Макет.Области.Найти("НаименованиеБанка_35") <> Неопределено;
	
	СписокВидовПособий = Новый СписокЗначений();
	СписокВидовПособий.Добавить(СтруктураДанных.ВидПособия);
	СписокВидовПособий.Добавить(СтруктураДанных.ВидПособия2);
	
	// Шапка формы
	
	// Наименование  ФСС
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(27);
	
	НаименованиеТерриториальногоОрганаФСС = РазбитьСтрокуНаПодСтроки(СтруктураДанных.НаименованиеТерриториальногоОрганаФСС, ДлиныСтрок);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НаименованиеТерриториальногоОрганаФСС, Макет, "Наименование_ФСС_", 135);
	
	// ФИО заявителя в родительном падеже
	
	ФИО = СтруктураДанных.ФИОСотрудника;
	УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИО, 2, СтруктураДанных.ПолСотрудника, ФИО);
	
	Фамилия = Лев(ФИО, Найти(ФИО, " ") - 1);
	ФИО = СокрЛП(Сред(ФИО, Найти(ФИО, " ") + 1));
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Фамилия, 	Макет, "ФИО_Заявителя_", 27);
	
	Имя = Лев(ФИО, Найти(ФИО, " ") - 1);
	Отчество = СокрЛП(Сред(ФИО, Найти(ФИО, " ") + 1));
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Имя, 		Макет, "ФИО_Заявителя_", 27, 28);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Отчество, 	Макет, "ФИО_Заявителя_", 27, 55);
	
	// Отмечаем вид пособия
	
	Если СписокВидовПособий.НайтиПоЗначению(Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность) <> Неопределено Тогда
	
		Макет.Области["Нетрудоспособность"].Текст = "V";
	
	КонецЕсли;
	
	Если СписокВидовПособий.НайтиПоЗначению(Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды) <> Неопределено Тогда
	
		Макет.Области["БеременностьРоды"].Текст = "V";
	
	КонецЕсли;
	
	Если СписокВидовПособий.НайтиПоЗначению(Перечисления.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности) <> Неопределено Тогда
	
		Макет.Области["ПриПостановкеНаУчетВРанниеСрокиБеременности"].Текст = "V";
	
	КонецЕсли;
	
	Если СписокВидовПособий.НайтиПоЗначению(Перечисления.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка) <> Неопределено Тогда
	
		Макет.Области["ПриРожденииРебенка"].Текст = "V";
	
	КонецЕсли;
	
	Если СписокВидовПособий.НайтиПоЗначению(Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет) <> Неопределено Тогда
	
		Макет.Области["ПоУходуЗаРебенкомДоПолутораЛет"].Текст = "V";
	
	КонецЕсли;
	
	Если СписокВидовПособий.НайтиПоЗначению(Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай) <> Неопределено Тогда
	
		Макет.Области["НетрудоспособностьНесчастныйСлучай"].Текст = "V";
	
	КонецЕсли;
	
	Если СписокВидовПособий.НайтиПоЗначению(Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев) <> Неопределено Тогда
	
		Макет.Области["ДополнительныйОтпускПослеНесчастныхСлучаев"].Текст = "V";
	
	КонецЕсли; 
	
	// Отмечаем желательный способ получения пособия
	
	Если СтруктураДанных.ПеречислятьПособиеПочтовымПереводом <> Неопределено И СтруктураДанных.ПеречислятьПособиеПочтовымПереводом Тогда
		
		Макет.Области["ВыплатаПочтой"].Текст = "V";
		
	ИначеЕсли СтруктураДанных.ПеречислятьПособиеПочтовымПереводом <> Неопределено Тогда
		
		Макет.Области["ВыплатаЧерезБанк"].Текст = "V";
		
	КонецЕсли; 
	
	// Выводим реквизиты банка
	Если Макет.Области["ВыплатаЧерезБанк"].Текст = "V" Тогда
		Если ЭтоБланк2012года Тогда
			ДлиныСтрок = Новый Массив();
			ДлиныСтрок.Добавить(34);
			ДлиныСтрок.Добавить(43); 
			ДлиныСтрок.Добавить(43);
			НаименованиеБанка = РазбитьСтрокуНаПодСтроки(СтруктураДанных.НаименованиеБанка, ДлиныСтрок);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НаименованиеБанка, Макет, "НаименованиеБанка_", 120);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.КоррСчетБанка, Макет, "КорСчет_", 20);
		Иначе
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НаименованиеБанка, Макет, "НаименованиеБанка_", 34);
		КонецЕсли;
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерЛицевогоСчета, Макет, "НомерСчета_", 20);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.БИКБанка, Макет, "БИК_", 9);
	КонецЕсли;
	
	// Выводим ФИО получателя
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.ФИОСотрудника, Макет, "ФИО_Получателя_", 42);
	
	Если ЭтоБланк2012года Тогда
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаРождения, "ДФ=dd.MM.yyyy"),".",""), Макет, "ДатаРождения_", 8);
	КонецЕсли;
	
	// Выводим данные удостоверения личности
	
	// из серии нужно удалить лишние пробелы
	ДокументСерия = СтруктураДанных.УдостоверениеЛичностиСерия;
	ДокументСерия = СтрЗаменить(ДокументСерия, " ", "");
		
	Если СтруктураДанных.УдостоверениеЛичностиВид = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
			
		Макет.Области["Паспорт"].Текст = "V";
			
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДокументСерия, Макет, "ПаспортСерия_", 4);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.УдостоверениеЛичностиНомер, Макет, "ПаспортНомер_", 6);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.УдостоверениеЛичностиДата, "ДФ=dd.MM.yyyy"),".",""), Макет, "ПаспортДата_", 8);
		Если ЭтоБланк2012года Тогда
			ДлиныСтрок = Новый Массив();
			ДлиныСтрок.Добавить(38);
			ДлиныСтрок.Добавить(43); 
			УдостоверениеЛичностиКемВыдан = РазбитьСтрокуНаПодСтроки(СтруктураДанных.УдостоверениеЛичностиКемВыдан, ДлиныСтрок);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(УдостоверениеЛичностиКемВыдан, Макет, "ПаспортКемВыдан_", 81);
		КонецЕсли;	
		
	ИначеЕсли СтруктураДанных.УдостоверениеЛичностиВид = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС14 Тогда
			
		Макет.Области["ВременноеУдостоверение"].Текст = "V";
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.УдостоверениеЛичностиНомер, Макет, "ВременноеУдостоверениеНомер_", 6);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.УдостоверениеЛичностиСрокДействия, "ДФ=dd.MM.yyyy"),".",""), Макет, "ВременноеУдостоверениеДата_", 8);
			
	ИначеЕсли СтруктураДанных.УдостоверениеЛичностиВид <> Неопределено Тогда
		
		Макет.Области["ИнойДокумент"].Текст = "V";
			
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДокументСерия, Макет, "ИнойДокументСерия_", 2);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.УдостоверениеЛичностиНомер, Макет, "ИнойДокументНомер_", 7);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.УдостоверениеЛичностиСрокДействия, "ДФ=dd.MM.yyyy"),".",""), Макет, "ИнойДокументДата_", 8);
			
	КонецЕсли; 
	
	Если ЭтоБланк2012года Тогда
		ДокументСерия = СтруктураДанных.СерияДокументаНаПроживание;
		ДокументСерия = СтрЗаменить(ДокументСерия, " ", "");
		Если Найти(НРег(СтруктураДанных.НаименованиеДокументаНаПроживание),"разрешение") > 0 Тогда
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДокументСерия, Макет, "РазрешениеСерия_", 2);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерДокументаНаПроживание, Макет, "РазрешениеНомер_", 8);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаВыдачиДокументаНаПроживание, "ДФ=dd.MM.yyyy"),".",""), Макет, "РазрешениеДата_", 8);
		ИначеЕсли Найти(НРег(СтруктураДанных.НаименованиеДокументаНаПроживание),"вид ") > 0 Тогда
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДокументСерия, Макет, "ВидНаЖительствоСерия_", 2);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерДокументаНаПроживание, Макет, "ВидНаЖительствоНомер_", 8);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаВыдачиДокументаНаПроживание, "ДФ=dd.MM.yyyy"),".",""), Макет, "ВидНаЖительствоДата_", 8);
		КонецЕсли;
	КонецЕсли;
	
	// Выводим адреса
	
	Если ЭтоБланк2012года Тогда
		ДлиныСтрок = Новый Массив();
		ДлиныСтрок.Добавить(23);
		ДлиныСтрок.Добавить(43); 
		ДлиныСтрок.Добавить(43); 
		ДлиныСтрок.Добавить(43); 

		Адрес = РазбитьСтрокуНаПодСтроки(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураДанных.АдресРегистрации), ДлиныСтрок);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Адрес, Макет, "АдресРегистрации_", 152);
		Если Макет.Области["ВыплатаПочтой"].Текст = "V" Тогда
			Адрес = РазбитьСтрокуНаПодСтроки(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураДанных.АдресПроживания), ДлиныСтрок);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Адрес, Макет, "Адрес_", 152);
		КонецЕсли;
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.Телефон, Макет, "Тел_", 15);
	Иначе
		ДлиныСтрок = Новый Массив();
		ДлиныСтрок.Добавить(23);
		ДлиныСтрок.Добавить(63); // нужно 43, просим больше, что бы хоть что то влезло

		Адрес = РазбитьСтрокуНаПодСтроки(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураДанных.АдресПроживания), ДлиныСтрок);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Адрес, Макет, "Адрес_", 66);
	КонецЕсли;
	
	// Пособия по временной нетрудоспособности
	
	Если ЭтоБланк2012года Тогда
		ПрефиксОбласти = "";
		Если Макет.Области["Нетрудоспособность"].Текст = "V" Или Макет.Области["НетрудоспособностьНесчастныйСлучай"].Текст = "V" Тогда
			ПрефиксОбласти = "Нетрудоспособность";
		ИначеЕсли Макет.Области["БеременностьРоды"].Текст = "V" Тогда
			ПрефиксОбласти = "БеременностьРоды";
			Если Макет.Области["ПриПостановкеНаУчетВРанниеСрокиБеременности"].Текст = "V" Тогда
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаСправкиБеременной, "ДФ=dd.MM.yyyy"),".",""),  Макет, "СправкаПоБеременностиДата_", 8);
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерСправкиБеременной, Макет, "СправкаПоБеременностиНомер_", 8);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрефиксОбласти) Тогда
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаВыдачиБольничного, "ДФ=dd.MM.yyyy"),".",""),  Макет, ПрефиксОбласти + "ЛН_Дата_", 8);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерБольничного, Макет, ПрефиксОбласти + "ЛН_Номер_", 12);
		КонецЕсли;
	КонецЕсли;
	
	ДлинаНомераСправок = ?(ЭтоБланк2012года, 10, 5);
	
	// Единовременное пособие при рождении ребенка:
	
	Если ЭтоБланк2012года И ЗначениеЗаполнено(СтруктураДанных.ВидСправкиОРожденииРебенка) Тогда
		Если СтруктураДанных.ВидСправкиОРожденииРебенка = Перечисления.ВидыСправокОРожденииРебенка.ФормаНомер24 Тогда
			Макет.Области["Форма24"].Текст = "V"
		ИначеЕсли СтруктураДанных.ВидСправкиОРожденииРебенка = Перечисления.ВидыСправокОРожденииРебенка.ФормаНомер25 Тогда
			Макет.Области["Форма25"].Текст = "V"
		ИначеЕсли СтруктураДанных.ВидСправкиОРожденииРебенка = Перечисления.ВидыСправокОРожденииРебенка.ФормаНомер26 Тогда
			Макет.Области["Форма26"].Текст = "V"
		КонецЕсли;
	КонецЕсли;
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаСправкиОРождении, "ДФ=dd.MM.yyyy"),".",""),  Макет, "СправкаДата_", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерСправкиОРождении, Макет, "СправкаНомер_", ДлинаНомераСправок);
		
	// Выводим дату и номер справки от другого родителя
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаСправкиОтДругогоРодителя, "ДФ=dd.MM.yyyy"),".",""),  Макет, "СправкаОтДругогоРодителяДата_", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерСправкиОтДругогоРодителя, Макет, "СправкаОтДругогоРодителяНомер_", ДлинаНомераСправок);
	
	// Выводим Дату и номер решения об усыновлении
		
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаРешенияОбУсыновлении, "ДФ=dd.MM.yyyy"),".",""),  Макет, "РешениеОбУсыновленииДата_", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерРешенияОбУсыновлении, Макет, "РешениеОбУсыновленииНомер_", ДлинаНомераСправок);
		
	// Выводим Дату и номер договора о передаче на воспитание
		
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаДоговораОПередачеНаВоспитание, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ДоговорОВоспитанииДата_", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерДоговораОПередачеНаВоспитание, Макет, "ДоговорОВоспитанииНомер_", 5);
	
	// Выводим дату подачи заявления
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаПодачиЗаявления, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ДатаПодачи_", 8);
	
	// Ежемесячное пособие по уходу за ребенком:
	
	// Выводим данные о предыдущих детях
	
	Если СтруктураДанных.НаличиеДокументаОРожденииПредыдущегоРебенка <> Неопределено И СтруктураДанных.НаличиеДокументаОРожденииПредыдущегоРебенка Тогда
	
		Макет.Области["НаличиеДокументаОРожденииПредыдущегоРебенка"].Текст = "V";
	
	КонецЕсли;
	
	Если СтруктураДанных.НаличиеДокументаОСмертиПредыдущегоРебенка <> Неопределено И СтруктураДанных.НаличиеДокументаОСмертиПредыдущегоРебенка Тогда
	
		Макет.Области["НаличиеДокументаОСмертиПредыдущегоРебенка"].Текст = "V";
	
	КонецЕсли;
	
	// Выводим информацию о справках о не получении пособия
	
	Если СтруктураДанных.СправкаОтОбоихРодителейОНеполученииПособия <> Неопределено И СтруктураДанных.СправкаОтОбоихРодителейОНеполученииПособия Тогда
	
		Макет.Области["СправкаОтОбоихРодителейОНеполученииПособия"].Текст = "V";
	
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаСправкиОтОтца, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ДатаСправкиОтОтца_", 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерСправкиОтОтца,  Макет, "НомерСправкиОтОтца_", ДлинаНомераСправок);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаСправкиОтМатери, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ДатаСправкиОтМатери_", 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерСправкиОтМатери,  Макет, "НомерСправкиОтМатери_", ДлинаНомераСправок);
		
	ИначеЕсли СтруктураДанных.СправкаОтОтцаОНеполученииПособия <> Неопределено И СтруктураДанных.СправкаОтОтцаОНеполученииПособия Тогда
	
		Макет.Области["СправкаОтОтцаОНеполученииПособия"].Текст = "V";
	
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаСправкиОтОтца, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ДатаСправкиОтОтца_", 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерСправкиОтОтца,  Макет, "НомерСправкиОтОтца_", ДлинаНомераСправок);
		
	ИначеЕсли СтруктураДанных.СправкаОтМатериОНеполученииПособия <> Неопределено И СтруктураДанных.СправкаОтМатериОНеполученииПособия Тогда
	
		Макет.Области["СправкаОтМатериОНеполученииПособия"].Текст = "V";
	
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаСправкиОтМатери, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ДатаСправкиОтОтца_", 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерСправкиОтМатери,  Макет, "НомерСправкиОтОтца_", ДлинаНомераСправок);
		
	КонецЕсли;
	
	// И по другим местам работы
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаСправкиПоДругимМестамРаботы, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ДатаСправкиПоДругимМестамРаботы_", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерСправкиПоДругимМестамРаботы,  Макет, "НомерСправкиПоДругимМестамРаботы_", ?(ЭтоБланк2012года, 8, 5));
	
	// Выводим сведения о проживании работе в зоне
	
	// в зависимости от типа пособия
	
	Если Макет.Области["ПриРожденииРебенка"].Текст = "V" Тогда
		
		// Выводим дату и номер свидетельства о рождении
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаСвидетельстваОРождении, "ДФ=dd.MM.yyyy"),".",""),  Макет, "СвидетельствоОРожденииДата_", 8);
		Если ЭтоБланк2012года Тогда
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.СерияСвидетельстваОРождении, Макет, "СвидетельствоОРожденииСерия_", ДлинаНомераСправок);
		КонецЕсли;
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерСвидетельстваОРождении, Макет, "СвидетельствоОРожденииНомер_", ДлинаНомераСправок);
		
		
		// Выводим Дату и номер решения об опеке
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаРешенияОбОпеке, "ДФ=dd.MM.yyyy"),".",""),  Макет, "РешениеОбОпекеДата_", 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерРешенияОбОпеке, Макет, "РешениеОбОпекеНомер_", ДлинаНомераСправок);
		
		// Выводим дату и номер иного подтверждения о рождении
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаИногоПодтвержденияРождения, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ИноеПодтверждениеРожденияДата_", 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерИногоПодтвержденияРождения, Макет, "ИноеПодтверждениеРожденияНомер_", ДлинаНомераСправок);
	
	КонецЕсли;
		
	Если Макет.Области["ПоУходуЗаРебенкомДоПолутораЛет"].Текст = "V" Тогда
		
		// Выводим дату и номер свидетельства о рождении
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаСвидетельстваОРождении, "ДФ=dd.MM.yyyy"),".",""),  Макет, "СвидетельствоОРожденииIIДата_", 8);
		Если ЭтоБланк2012года Тогда
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.СерияСвидетельстваОРождении, Макет, "СвидетельствоОРожденииIIСерия_", ДлинаНомераСправок);
		КонецЕсли;
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерСвидетельстваОРождении, Макет, "СвидетельствоОРожденииIIНомер_", ДлинаНомераСправок);
		
		// Выводим Дату и номер решения об опеке
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаРешенияОбОпеке, "ДФ=dd.MM.yyyy"),".",""),  Макет, "РешениеОбОпекеIIДата_", 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерРешенияОбОпеке, Макет, "РешениеОбОпекеIIНомер_", ДлинаНомераСправок);
		
		// Выводим дату и номер иного подтверждения о рождении
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаИногоПодтвержденияРождения, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ИноеПодтверждениеРожденияIIДата_", 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НомерИногоПодтвержденияРождения, Макет, "ИноеПодтверждениеРожденияIIНомер_", ДлинаНомераСправок);
		
		Если ЭтоБланк2012года Тогда
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ДатаПриказаНаОтпускПоУходуЗаРебенком, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ДатаПриказаНаОтпускПоУходуЗаРебенком_", 8);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ОтпускПоУходуЗаРебенкомДатаНачало, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ОтпускПоУходуЗаРебенкомДатаНачало_", 8);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ОтпускПоУходуЗаРебенкомДатаОкончание, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ОтпускПоУходуЗаРебенкомДатаОкончание_", 8);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Прав(СтруктураДанных.НомерПриказаНаОтпускПоУходуЗаРебенком,9), Макет, "НомерПриказаНаОтпускПоУходуЗаРебенком_", 9);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если СтруктураДанных.ПроживаниеВЗоне <> Неопределено И СтруктураДанных.ПроживаниеВЗоне Тогда
		
		Макет.Области["ПроживаниеВЗоне"].Текст = "V";
		
	КонецЕсли;
	
	Если СтруктураДанных.РаботаВЗоне <> Неопределено И СтруктураДанных.РаботаВЗоне Тогда
		
		Макет.Области["РаботаВЗоне"].Текст = "V";
		
	КонецЕсли;
	
	Если СтруктураДанных.ВЗонеСПравомНаОтселение <> Неопределено И СтруктураДанных.ВЗонеСПравомНаОтселение Тогда
		
		Макет.Области["ВЗонеСПравомНаОтселение"].Текст = "V";
		
	КонецЕсли;
	
	Если СтруктураДанных.ВЗонеОтселения <> Неопределено И СтруктураДанных.ВЗонеОтселения Тогда
		
		Макет.Области["ВЗонеОтселения"].Текст = "V";
		
	КонецЕсли;
	
	Если СтруктураДанных.ВЗонеСЛьготнымСтатусом <> Неопределено И СтруктураДанных.ВЗонеСЛьготнымСтатусом Тогда
		
		Макет.Области["ВЗонеСЛьготнымСтатусом"].Текст = "V";
		
	КонецЕсли;
	
	// Выводим ннаименование работодателя и тип занятости получателя пособия
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(42);
	
	НаименованиеРаботодателяИВидЗанятости = "" + СтруктураДанных.НаименованиеОрганизации;
	НаименованиеРаботодателяИВидЗанятости = НаименованиеРаботодателяИВидЗанятости + ?(ПустаяСтрока(НаименованиеРаботодателяИВидЗанятости), "", ", ") + СтруктураДанных.ВидЗанятостиСотрудника;
	
	НаименованиеРаботодателяИВидЗанятости = РазбитьСтрокуНаПодСтроки(НаименованиеРаботодателяИВидЗанятости, ДлиныСтрок);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НаименованиеРаботодателяИВидЗанятости, Макет, "РаботодательИВидЗанятости_", ?(ЭтоБланк2012года,168,84));
	
	// Выводим СНИЛС и ИНН получателя
	
	// из СНИЛСа удаляем - и пробелы
	СНИЛС = СтруктураДанных.СНИЛССотрудника;
	СНИЛС = СтрЗаменить(СНИЛС,"-","");
	СНИЛС = СтрЗаменить(СНИЛС," ","");
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СНИЛС, Макет, "СНИЛС_", 11);
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.ИННСотрудника, Макет, "ИНННетрудоспособного_", 12);
	
	// Выводим данные Заявление работника о замене календарных годов
	
	Если СтруктураДанных.ЗаявлениеРаботникаОЗаменеКалендарныхГодов <> Неопределено И СтруктураДанных.ЗаявлениеРаботникаОЗаменеКалендарныхГодов Тогда
	
		Макет.Области["ЗаявлениеРаботникаОЗаменеКалендарныхГодов"].Текст = "V";
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(СтруктураДанных.ПервыйГод,"ЧЦ=2; ЧВН="), Макет, "ПервыйГод_", 2);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(СтруктураДанных.ВторойГод,"ЧЦ=2; ЧВН="), Макет, "ВторойГод_", 2);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(СтруктураДанных.ТретийГод,"ЧЦ=2; ЧВН="), Макет, "ТретийГод_", 2);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(СтруктураДанных.ЧетвертыйГод,"ЧЦ=2; ЧВН="), Макет, "ЧетвертыйГод_", 2);
	
	КонецЕсли;
	
	
	// Выводим данные Заявление работника об исчислении пособий по материнству
	
	Если СтруктураДанных.ЗаявлениеПоМатеринству2010 <> Неопределено И СтруктураДанных.ЗаявлениеПоМатеринству2010 Тогда
	
		Макет.Области["ЗаявлениеПоМатеринству2010"].Текст = "V";
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ЗаявлениеПоМатеринству2010ДатаНачало, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ЗаявлениеПоМатеринству2010ДатаНачало_", 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ЗаявлениеПоМатеринству2010ДатаОкончание, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ЗаявлениеПоМатеринству2010ДатаОкончание_", 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.ЧислоКалендарныхДней, Макет, "ЧислоКалендарныхДней_", 3);
	
	КонецЕсли;
	
	// Выводим данные по расчету среднего заработка
	
	Если ЭтоБланк2012года Тогда
		
		Если СтруктураДанных.НеполноеРабочееВремя <> Неопределено И СтруктураДанных.НеполноеРабочееВремя Тогда
		
			Макет.Области["НеполноеРабочееВремя"].Текст = "V";
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(СтруктураДанных.ДоляВремени, "ЧЦ=4; ЧДЦ=2; ЧРД=,; ЧН=' '"), Макет, "Ставка_", 4);
			
		КонецЕсли;
		
		ВывестиСуммуВРубляхКопейкахВЯчейки(СтруктураДанных.ТарифнаяСтавкаОклад, Макет, "ТарифнаяСтавкаОклад_", 9);
		ВывестиСуммуВРубляхКопейкахВЯчейки(СтруктураДанных.СреднийЗаработок, Макет, "СреднийЗаработок_", 10);
		
	Иначе 	
		ВывестиСуммуВРубляхКопейкахВЯчейки(СтруктураДанных.СреднийЗаработок, Макет, "СреднийЗаработок_", 9);
	КонецЕсли;
	
	// Выводим период простоя
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ПериодПростояДатаНачало, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ПериодПростояДатаНачало_", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ПериодПростояДатаОкончание, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ПериодПростояДатаОкончание_", 8);
	
	Если ЭтоБланк2012года Тогда
		ВывестиСуммуВРубляхКопейкахВЯчейки(СтруктураДанных.СреднедневнойЗаработокНаПериодПростоя, Макет, "СреднедневнойЗаработокНаПериодПростоя_", 7);
	КонецЕсли;
	
	// Выводим Период, за который пособие по временной нетрудоспособности не назначается
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ПособияНеНазначаютсяДатаНачало, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ПособияНеНазначаютсяДатаНачало_", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(СтруктураДанных.ПособияНеНазначаютсяДатаОкончание, "ДФ=dd.MM.yyyy"),".",""),  Макет, "ПособияНеНазначаютсяДатаОкончание_", 8);
	
	// Выводим должность и ФИО руководителя, а также ставим галочку о том, что он подтверждает сведения
	
	Если ЗначениеЗаполнено(СтруктураДанных.ФИОРуководителя) Тогда
	
		Макет.Области["Подтверждаю"].Текст = "V";
	
	КонецЕсли; 
	
	Макет.Области["ДолжностьФИОРуководителя"].Текст = "" + СтруктураДанных.ДолжностьРуководителя + ", " + СтруктураДанных.ФИОРуководителя;
	
	Если ЭтоБланк2012года Тогда
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.ТелефонСоставителя, Макет, "ТелефонСоставителя_", 20);
	КонецЕсли; 
	ТабДокумент.Вывести(Макет);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьЗаявлениеВФССОВыплатеПособия()

// Формирует опись заявлений и документов для передачи в ФСС
//
// Параметры
//  СтруктураДанных  		- Строка выборки по шапке документа, который выводится на печать
//  ВыборкаПоТЧРаботникиОрганизации - Выборка по табличной части РаботникиОрганизации
//                 
// Возвращаемое значение:
//   Табличный документ   - <описание возвращаемого значения>
//
Функция ПечатьОписьЗаявленийИДокументовВФСС(СтруктураДанных, ВыборкаПоТЧРаботникиОрганизации, ИмяМакета = "ОписьЗаявленийИДокументовВФСС_2011") Экспорт

	ТабДокумент = Новый ТабличныйДокумент;
		
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОписьЗаявленийИДокументовВФСС";
		
	Макет = ПолучитьОбщийМакет(ИмяМакета);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.РегистрационныйНомерФСС, ОбластьШапка, "РегистрационныйНомер_", 10);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.ДополнительныйКодФСС, ОбластьШапка, "ДополнительныйКод_", 10);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.КодПодчиненностиФСС, ОбластьШапка, "КодПодчиненности_", 5);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.ИННОрганизации, ОбластьШапка, "ИНН_", 12);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.КППОрганизации, ОбластьШапка, "КПП_", 9);
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.ОрганизацияСокращенно, ОбластьШапка, "Страхователь_", 29);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.НаименованиеТерриториальногоОрганаФСС, ОбластьШапка, "Фонд_", 38);
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	Пока ВыборкаПоТЧРаботникиОрганизации.Следующий() Цикл
		
		Если ВыборкаПоТЧРаботникиОрганизации.НомерСтроки > 1 Тогда
		
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
			ТабДокумент.Вывести(ОбластьСтрока);
		
		
		КонецЕсли; 
		
		НомерСтроки = Формат(ВыборкаПоТЧРаботникиОрганизации.НомерСтроки, "ЧЦ=2; ЧГ=");
		
		НомерСтроки = Лев("  ", 2 - СтрДлина(НомерСтроки)) + НомерСтроки;
		
		ДлиныСтрок = Новый Массив();
		ДлиныСтрок.Добавить(17);
		
		ФИО = РазбитьСтрокуНаПодСтроки(ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоТЧРаботникиОрганизации.ФИОСотрудника), ДлиныСтрок);
		
		ДокументыОснования = РазбитьСтрокуНаПодСтроки(ВыборкаПоТЧРаботникиОрганизации.ДокументыОснования, ДлиныСтрок);
		
		КоличествоСтраниц = Формат(ВыборкаПоТЧРаботникиОрганизации.КоличествоСтраниц, "ЧЦ=4; ЧГ=");
		
		КоличествоСтраниц = Лев("    ", 4 - СтрДлина(КоличествоСтраниц)) + КоличествоСтраниц;
		
		ПерваяСтрокаВыводилась = Ложь;
		
		Пока СтрДлина(ФИО) > 0 ИЛИ СтрДлина(ДокументыОснования) > 0 ИЛИ НЕ ПерваяСтрокаВыводилась Цикл
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			
			Если НЕ ПерваяСтрокаВыводилась Тогда
				
				ПерваяСтрокаВыводилась = Истина;
				
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НомерСтроки, ОбластьСтрока, "НПП_", 2);
				
				ОбластьСтрока.Области["ВидВыплаты"].Текст = ВыборкаПоТЧРаботникиОрганизации.ВидВыплаты;
				
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(КоличествоСтраниц, ОбластьСтрока, "КоличествоСраниц_", 4);
				
			КонецЕсли; 
			
			Если СтрДлина(ФИО) <= 17 Тогда
				
				СтрокаФИОНаПечать = ФИО;
				
				ФИО = "";
				
			Иначе
				
				СтрокаФИОНаПечать = Лев(ФИО, 17);
				
				ФИО = Сред(ФИО, 18);
				
			КонецЕсли;
			
			Если СтрДлина(ДокументыОснования) <= 17 Тогда
				
				СтрокаДокументыНаПечать = ДокументыОснования;
				
				ДокументыОснования = "";
				
			Иначе
				
				СтрокаДокументыНаПечать = Лев(ДокументыОснования, 17);
				
				ДокументыОснования = Сред(ДокументыОснования, 18);
				
			КонецЕсли; 
			
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрокаФИОНаПечать, ОбластьСтрока, "ФИО_", 17);
			
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрокаДокументыНаПечать, ОбластьСтрока, "Документы_", 17);
			
			ТабДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	     
	Если ОбластьПодвал.Области.Найти("Тел_1") <> Неопределено Тогда
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтруктураДанных.ТелефонСоставителя, ОбластьПодвал, "Тел_", 20);
	КонецЕсли;
	
	ОбластьПодвал.Области["ДолжностьФИОРуководителя"].Текст = "" + СтруктураДанных.ДолжностьРуководителя + ", " + СтруктураДанных.ФИОРуководителя;
	
	ТабДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабДокумент;
	

КонецФункции // ПечатьОписьЗаявленийИДокументовВФСС()

// Формирует набор полей необходимый для печати Заявления в ФСС о выплате пособия
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Пустую структуру полей, необходимых для печати Заявления в ФСС о выплате пособия
//
Функция СтруктураДанныхДляПечатиЗаявленийВФССОВыплатеПособия() Экспорт

	Возврат Новый Структура(
		  "ВидПособия, "									// ПеречислениеСсылка.ВидыПособийСоциальногоСтрахования - необходим для определения какую
		  													// галочку поставить в шапке и какой раздел заполнять сведениями о документах подтверждения рождения
		  "ВидПособия2, "									// ПеречислениеСсылка.ВидыПособийСоциальногоСтрахования - если заявление оформляется по двум пособиям
		  
		+ "ДатаПодачиЗаявления, "							// Дата
		
		+ "НаименованиеОрганизации, " 						// Строка
		+ "ТелефонСоставителя, "							// Строка
		+ "ФИОРуководителя, "								// Строка
		+ "ДолжностьРуководителя, "							// Строка
		+ "НаименованиеТерриториальногоОрганаФСС, "			// Строка
		
		+ "ДатаРождения, "									// Дата
		+ "ФИОСотрудника, "									// Строка
		+ "ПолСотрудника, "                                 // ПеречислениеСсылка.ПолФизическихЛиц - необходим для склонения ФИО заявителя в родительный падеж
		+ "ИННСотрудника, "									// Строка
		+ "СНИЛССотрудника, "								// Строка
		+ "ВидЗанятостиСотрудника, "						// строка
		+ "УдостоверениеЛичностиВид, "						// СправочникСсылка.ДокументыУдостоверяющиеЛичность - необходим для определения в какой документ писать
		+ "УдостоверениеЛичностиСерия, "					// Строка
		+ "УдостоверениеЛичностиНомер, "					// Строка
		+ "УдостоверениеЛичностиКемВыдан, "					// Строка
		+ "УдостоверениеЛичностиДата, "						// Дата
		+ "УдостоверениеЛичностиСрокДействия, "				// Дата
		+ "АдресРегистрации, "								// Строка
		+ "Телефон, "										// Строка
		+ "ПеречислятьПособиеПочтовымПереводом, "			// Булево
		+ "НаименованиеБанка, "								// Строка
		+ "БИКБанка, "										// Строка
		+ "КоррСчетБанка, "									// Строка
		+ "НомерЛицевогоСчета, "							// Строка
		+ "АдресПроживания, "								// Строка
		+ "НаименованиеДокументаНаПроживание, "				// Строка
		+ "СерияДокументаНаПроживание, "					// Строка
		+ "НомерДокументаНаПроживание, "					// Строка
		+ "ДатаВыдачиДокументаНаПроживание, "				// Дата
		
		+ "ДатаВыдачиБольничного, "							// Дата
		+ "НомерБольничного, "								// Строка
		
		+ "ДатаСправкиБеременной, "							// Дата
		+ "НомерСправкиБеременной, "						// Строка
		
		+ "ВидСправкиОРожденииРебенка, "					// ПеречислениеСсылка.ВидыСправокОРожденииРебенка
		+ "ДатаСправкиОРождении, "							// Дата
		+ "НомерСправкиОРождении, "							// Строка
		
		+ "ДатаСвидетельстваОРождении, "					// Дата
		+ "СерияСвидетельстваОРождении, "					// Строка
		+ "НомерСвидетельстваОРождении, "					// Строка
		
		+ "ДатаИногоПодтвержденияРождения, "				// Дата
		+ "НомерИногоПодтвержденияРождения, "				// Строка
		
		+ "ДатаСправкиОтДругогоРодителя, "					// Дата
		+ "НомерСправкиОтДругогоРодителя, "					// Строка
		
		+ "ДатаРешенияОбОпеке, "							// Дата
		+ "НомерРешенияОбОпеке, "							// Строка
		
		+ "ДатаРешенияОбУсыновлении, "						// Дата
		+ "НомерРешенияОбУсыновлении, "						// Строка
		
		+ "ДатаДоговораОПередачеНаВоспитание, "				// Дата
		+ "НомерДоговораОПередачеНаВоспитание, "			// Строка
		
		+ "НаличиеДокументаОРожденииПредыдущегоРебенка, "	// Булево
		+ "НаличиеДокументаОСмертиПредыдущегоРебенка, "		// Булево
		+ "СправкаОтОтцаОНеполученииПособия, "				// Булево
		+ "СправкаОтМатериОНеполученииПособия, "			// Булево
		+ "СправкаОтОбоихРодителейОНеполученииПособия, "	// Булево
		+ "ДатаСправкиОтОтца, "								// Дата
		+ "НомерСправкиОтОтца, "							// Строка
		+ "ДатаСправкиОтМатери, "							// Дата
		+ "НомерСправкиОтМатери, "							// Строка
		+ "ДатаСправкиПоДругимМестамРаботы, "				// Дата
		+ "НомерСправкиПоДругимМестамРаботы, "				// Строка
		+ "ПроживаниеВЗоне, "								// Булево
		+ "РаботаВЗоне, "									// Булево
		+ "ВЗонеСПравомНаОтселение, "						// Булево
		+ "ВЗонеОтселения, "								// Булево
		+ "ВЗонеСЛьготнымСтатусом, "						// Булево
		
		+ "ЗаявлениеРаботникаОЗаменеКалендарныхГодов, "		// Булево
		+ "ПервыйГод, "										// Число(2)
		+ "ВторойГод, "										// Число(2)
		+ "ТретийГод, "										// Число(2)
		+ "ЧетвертыйГод, "									// Число(2)
		+ "ЗаявлениеПоМатеринству2010, "					// Булево
		+ "ЗаявлениеПоМатеринству2010ДатаНачало, "			// Дата
		+ "ЗаявлениеПоМатеринству2010ДатаОкончание, "		// Дата
		+ "ЧислоКалендарныхДней, "							// Число(3)
		+ "НеполноеРабочееВремя, "							// Булево
		+ "ДоляВремени, "									// Число(4.2)
		+ "ТарифнаяСтавкаОклад, "							// Число(10.2)
		+ "СреднийЗаработок, "								// Число(10.2)
		+ "ПериодПростояДатаНачало, "						// Дата
		+ "ПериодПростояДатаОкончание, "					// Дата
		+ "СреднедневнойЗаработокНаПериодПростоя, "			// Число(10.2)
		+ "ПособияНеНазначаютсяДатаНачало, "				// Дата
		+ "ПособияНеНазначаютсяДатаОкончание,"				// Дата
		
		+ "ДатаПриказаНаОтпускПоУходуЗаРебенком,"			// Дата
		+ "НомерПриказаНаОтпускПоУходуЗаРебенком, "			// Строка
		+ "ОтпускПоУходуЗаРебенкомДатаНачало, "				// Дата
		+ "ОтпускПоУходуЗаРебенкомДатаОкончание"			// Дата
		);

КонецФункции // СтруктураДанныхДляПечатиЗаявленийВФССОВыплатеПособия()

////////////////////////////////////////////////////////////////////////////////
	
Функция ПроверкаУчастияВПилотномПроектеИОтказОтДействия(Организация, ПериодРегистрации, ЗаголовокОкна, ТекстОписанияДействия) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		РезультатПроверки = УчастникиПилотногоПроектаБезДатыВступленияВПроект(Организация);
		Если Не РезультатПроверки.ПроверкаПрошлаУспешно Тогда
			Форма = ПолучитьОбщуюФорму("ФормаОповещенияПилотногоПроекта");
			Форма.ЭлементыФормы.КнопкаДействие1.Заголовок = "Перейти к настройке параметров учета";
			Форма.ЭлементыФормы.КнопкаДействие2.Заголовок = "Перейти к редактированию ИНН и КПП";
			ТекстВопросаДействия = СтрЗаменить(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация % зарегистрирована"), "%", """" + Строка(Организация) + """") + " в одном из регионов, "; 
			Если ПериодРегистрации < РезультатПроверки.Организации[Организация] Тогда
				
				ТекстВопросаДействия = ТекстВопросаДействия + "где в 2011-2012 годах проводится Пилотный проект ФСС по непосредственной выплате пособий."
					+ Символы.ПС + "В параметрах учета необходимо указать дату вступления в Пилотный проект, либо уточнить ИНН и КПП " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + ".";
				Форма.ЭлементыФормы.НадписьДействияПользователя.Заголовок = ТекстВопросаДействия;
				Ответ = Форма.ОткрытьМодально();		
				Если Ответ = "ПараметрыУчета" Тогда
					ПроцедурыУправленияПерсоналом.ОткрытьФормуНастройкаПараметровУчета("РазмерыПособий", Новый Структура("Организация, ОбособленноеПодразделение", ОбщегоНазначения.ГоловнаяОрганизация(Организация), Организация));
					Возврат Ложь
				ИначеЕсли Ответ = "Организация" Тогда
					Организация.ПолучитьФорму().Открыть();
					Возврат Ложь
				КонецЕсли;
				
			Иначе
				
				ТекстВопросаДействия = ТекстВопросаДействия + "где в настоящее время проводится Пилотный проект ФСС по непосредственной выплате пособий."
					+ Символы.ПС + "В параметрах учета необходимо указать дату вступления в Пилотный проект, либо уточнить ИНН и КПП " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + ".";
				Форма.ЭлементыФормы.НадписьДействияПользователя.Заголовок = ТекстВопросаДействия;
				Ответ = Форма.ОткрытьМодально();		
				Если Ответ = "ПараметрыУчета" Тогда
					ПроцедурыУправленияПерсоналом.ОткрытьФормуНастройкаПараметровУчета("РазмерыПособий", Новый Структура("Организация, ОбособленноеПодразделение", ОбщегоНазначения.ГоловнаяОрганизация(Организация), Организация));
				ИначеЕсли Ответ = "Организация" Тогда
					Организация.ПолучитьФорму().Открыть();
				КонецЕсли;
				Возврат Ложь
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции 
	
Функция УчастникиПилотногоПроектаБезДатыВступленияВПроект(Организация = Неопределено) Экспорт

	СоответствиеПилотногоПроекта = Новый Соответствие;
    СоответствиеПилотногоПроекта.Вставить("09",'20110701'); // Карачаево-Черкесская респ.
    СоответствиеПилотногоПроекта.Вставить("52",'20110701'); // Нижегородская обл.
	СоответствиеПилотногоПроекта.Вставить("30",'20120701'); // Астраханская обл.
	СоответствиеПилотногоПроекта.Вставить("45",'20120701'); // Курганская обл.
	СоответствиеПилотногоПроекта.Вставить("53",'20120701'); // Новгородская обл.
	СоответствиеПилотногоПроекта.Вставить("54",'20120701'); // Новосибирская обл.
	СоответствиеПилотногоПроекта.Вставить("68",'20120701'); // Тамбовская обл.
	СоответствиеПилотногоПроекта.Вставить("27",'20120701'); // Хабаровский край
	
	Запрос = Новый Запрос;
	
	Организации = Новый Массив;
	Если ЗначениеЗаполнено(Организация) Тогда
		Если СоответствиеПилотногоПроекта[Лев(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "КПП"),2)] <> Неопределено Тогда
			Организации.Добавить(Организация)
		КонецЕсли;
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.КПП,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если СоответствиеПилотногоПроекта[Лев(Выборка.КПП,2)] <> Неопределено Тогда
				Организации.Добавить(Выборка.Ссылка)
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаПоРасчетуЗарплатыОрганизацийИхПодразделений.ДатаПередачиФССВыплатыПособий,
	|	Организации.Ссылка,
	|	Организации.КПП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизацийИхПодразделений КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизацийИхПодразделений
	|		ПО (УчетнаяПолитикаПоРасчетуЗарплатыОрганизацийИхПодразделений.Организация = Организации.Ссылка)
	|ГДЕ
	|	Организации.Ссылка В(&Организации)";
	Запрос.УстановитьПараметр("Организации", Организации);
	Организации = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ДатаПередачиФССВыплатыПособий) Тогда
			Организации.Вставить(Выборка.Ссылка, СоответствиеПилотногоПроекта[Лев(Выборка.КПП,2)])
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ПроверкаПрошлаУспешно, Организации", Не ЗначениеЗаполнено(Организации), Организации)
	
КонецФункции 

Процедура ПриНачалеРаботыСистемы() Экспорт

	Если Не НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл() Тогда
		Возврат
	КонецЕсли;
	
	РезультатПроверки = УчастникиПилотногоПроектаБезДатыВступленияВПроект();
	Если Не РезультатПроверки.ПроверкаПрошлаУспешно Тогда
		ОписаниеОрг = "";
		Для каждого КлючИЗначение Из РезультатПроверки.Организации Цикл
			Если ПустаяСтрока(ОписаниеОрг) Тогда
				Организация = КлючИЗначение.Ключ;
				ОписаниеОрг = """" + Строка(КлючИЗначение.Ключ) + """"	
			Иначе
				ОписаниеОрг = ОписаниеОрг + " и др.";	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Форма = ПолучитьОбщуюФорму("ФормаОповещенияПилотногоПроекта");
		Форма.ЭлементыФормы.НадписьДействияПользователя.Заголовок = 
			"В данной ИБ присутствуют " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + " (" + ОписаниеОрг + "), зарегистрированные в одном из регионов, " 
			+"где в 2011-2012 годах проводится Пилотный проект ФСС по непосредственной выплате пособий."
			+ Символы.ПС + "В параметрах учета необходимо для них указать дату вступления в Пилотный проект.";
		Форма.Организация = Организация;
		Форма.ЭлементыФормы.КнопкаДействие1.Заголовок = "Перейти к настройке параметров учета";
		Форма.ЭлементыФормы.КнопкаДействие2.Заголовок = "Укажу дату вступления в проект позже";
		Форма.Открыть();		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Функция ОписаниеДокументаНаПроживание(Данные) Экспорт

	Если Данные = Неопределено Тогда
		Возврат	""
	ИначеЕсли ПустаяСтрока(Данные.НаименованиеДокументаНаПроживание + Данные.СерияДокументаНаПроживание + Данные.НомерДокументаНаПроживание) И Не ЗначениеЗаполнено(Данные.ДатаВыдачиДокументаНаПроживание) Тогда
		Возврат	"Ввести реквизиты документа, подтверждающего постоянное или временное проживание в РФ"
	Иначе
		Возврат ?(ПустаяСтрока(Данные.НаименованиеДокументаНаПроживание), "<наименование документа не указано>, ", Данные.НаименованиеДокументаНаПроживание + ": ")
				+ "серия " + Данные.СерияДокументаНаПроживание + ", № " + Данные.НомерДокументаНаПроживание + " от " + Формат(Данные.ДатаВыдачиДокументаНаПроживание, "ДЛФ=DD; ДП='<не указано>'")
	КонецЕсли;
	
КонецФункции 

Процедура ОткрытьФормуРедактированияДокументаНаПроживание(ФормаДокумента, ТекущаяСтрока) Экспорт

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ФормаРедактированияСтроки = ПолучитьОбщуюФорму("РедактированиеДокументаНаПроживание", ФормаДокумента, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(ФормаРедактированияСтроки, ТекущаяСтрока);
	ФормаРедактированияСтроки.Открыть();

КонецПроцедуры

Процедура ЗаполнитьДанныеБанка(Банк, ТекущаяСтрока) Экспорт 

	ДанныеОБанке = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Банк,"Наименование, Код, КоррСчет");
	ТекущаяСтрока.НаименованиеБанка = ДанныеОБанке.Наименование;
	ТекущаяСтрока.БИКБанка = ДанныеОБанке.Код;
	ТекущаяСтрока.КоррСчетБанка = ДанныеОБанке.КоррСчет;

КонецПроцедуры

Процедура ЗаполнитьДанныеЛПУ(ЛПУ, ТекущаяСтрока, АдресЛПУВФорме) Экспорт 

	Если ЗначениеЗаполнено(ЛПУ) И ТекущаяСтрока <> Неопределено Тогда
		РеквизитыЛПУ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ТекущаяСтрока.ЛПУ,"Наименование, Адрес, ОГРН, АдресКодПоКЛАДР");
		ТекущаяСтрока.НаименованиеЛПУ = РеквизитыЛПУ.Наименование;
		ТекущаяСтрока.АдресЛПУ = РеквизитыЛПУ.Адрес;
		ТекущаяСтрока.АдресЛПУКодПоКЛАДР = РеквизитыЛПУ.АдресКодПоКЛАДР;
		ТекущаяСтрока.ОГРН_ЛПУ = РеквизитыЛПУ.ОГРН;
		АдресЛПУВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(РеквизитыЛПУ.Адрес);
	КонецЕсли;

КонецПроцедуры

#КонецЕсли