////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//
Функция ПолучитьТекстСостоянияЭД(СсылкаНаВладельца, Форма = Неопределено) Экспорт
	
	Гиперссылка = Ложь;
	ТекстСостоянияЭД = ЭлектронныеДокументыСлужебный.ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка);
	
	Если НЕ Форма = Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ТекстСостоянияЭД", ТекстСостоянияЭД);
		СтруктураПараметров.Вставить("ВидОперации", "УстановкаГиперссылки");
		СтруктураПараметров.Вставить("ЗначениеПараметра", Гиперссылка);
		ЭлектронныеДокументыПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров);
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СсылкаНаЭД        - ссылка на электронный документ, открываемый для просмотра
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра
//  ВладелецФормы     - управляемая форма
//
Процедура ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура("СсылкаНаОбъект", СсылкаНаЭД);
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы, ВладелецФормы);
	Иначе
		ОткрытьЗначение(СсылкаНаЭД);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму со списком электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть.
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра списка электронных документов.
//
Процедура ОткрытьСписокЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоЧтенияЭД() Тогда
		ЭлектронныеДокументыКлиентСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
	Если ПараметрыОткрытия = Неопределено Тогда
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.СписокЭД", ПараметрыФормы);
	Иначе
		Окно = Неопределено;
		Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
			Окно = ПараметрыОткрытия.Окно;
		КонецЕсли;
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.СписокЭД", ПараметрыФормы,
			ПараметрыОткрытия.Источник, ПараметрыОткрытия.Уникальность, Окно);
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет документ ИБ на основании актуального ЭД
//
// Параметры:
//  ПараметрКоманды - ссылка на объект
//  Источник - управляемая форма
//
Процедура ПерезаполнитьДокумент(ПараметрКоманды, Источник=Неопределено) Экспорт
	
	Если НЕ (ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД()) Тогда
		ЭлектронныеДокументыКлиентСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭлектронныеДокументыКлиентСлужебный.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебный.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
	
	СопоставлятьНоменклатуруПередЗаполнениемДокумента = ЭлектронныеДокументыПереопределяемый.СопоставлятьНоменклатуруПередЗаполнениемДокумента();
	
	Если СопоставлятьНоменклатуруПередЗаполнениемДокумента Тогда
		Для Каждого ТекСтрока Из СоответствиеВладельцевИЭД Цикл
			СсылкаНаЭД = ТекСтрока.Значение;
			СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД);
			Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
				ОткрытьФормуМодально(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КолОбработанных = 0;
	ЭлектронныеДокументыСлужебный.ПерезаполнитьДокументыИБПоЭД(СоответствиеВладельцевИЭД, КолОбработанных);
	
	Если КолОбработанных > 0 Тогда
		Оповестить("ОбновитьСостояниеЭД");
		Оповестить("ОбновитьДокументИБПослеЗаполнения");
	КонецЕсли;
	
	Если НЕ СопоставлятьНоменклатуруПередЗаполнениемДокумента Тогда
		Для Каждого ТекСтрока Из СоответствиеВладельцевИЭД Цикл
			СсылкаНаЭД = ТекСтрока.Значение;
			СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД);
			Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
				ЗначениеВозврата = ОткрытьФормуМодально(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы);
				Если НЕ Источник=Неопределено И ЗначениеЗаполнено(ЗначениеВозврата) Тогда
					ЭлектронныеДокументыКлиентПереопределяемый.ЗаполнитьИсточник(Источник, ЗначениеВозврата);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстСостоянияВывод = НСтр("ru = 'Заполнено: (%1)'");
	ТекстСостоянияВывод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостоянияВывод, КолОбработанных);
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,ТекстСостоянияВывод);
	
КонецПроцедуры

// Открывает актуальный ЭД по документу ИБ
//
// Параметры:
//  ПараметрКоманды - ссылка на документ ИБ
//  Источник - управляемая форма
//
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, Источник = Неопределено) Экспорт
	
	ОчиститьСообщения();
	Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоЧтенияЭД() Тогда
		ЭлектронныеДокументыКлиентСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭлектронныеДокументыКлиентСлужебный.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебный.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
	Для Каждого ТекЭл Из МассивСсылок Цикл
		
		СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
		Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			ОткрытьЭДДляПросмотра(СсылкаНаЭД, , Источник);
		Иначе
			ТекстШаблона = НСтр("ru = '%1. Актуальный электронный документ не найден!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ТекЭл);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму с деревом электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть,
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра дерева электронных документов.
//
Процедура ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если НЕ (ЭлектронныеДокументыПереопределяемый.ЕстьПравоЧтенияЭД()) Тогда
		ЭлектронныеДокументыКлиентСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
	Если ПараметрыОткрытия = Неопределено Тогда
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ДеревоЭД", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
	Иначе
		Окно = Неопределено;
		Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
			ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
			И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
			
			Окно = ПараметрыОткрытия.Окно;
		КонецЕсли;
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ДеревоЭД", ПараметрыФормы,
			ПараметрыОткрытия.Источник, ПараметрыОткрытия.Уникальность, Окно);
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает, подписывает и отправляет электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - электронный документ, который надо подписать, отправить.
//
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыКлиентСлужебный.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыКлиентСлужебный.ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить", , ЭД);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//
Процедура СформироватьНовыйЭД(ПараметрКоманды) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыКлиентСлужебный.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыКлиентСлужебный.ОбработатьЭД(МассивСсылок, "Сформировать");
	
КонецПроцедуры

// Процедура отправляет повторно электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - электронный документ, который надо подписать, отправить.
//
Процедура ОтправитьПовторноЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыКлиентСлужебный.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыКлиентСлужебный.ОбработатьЭД(МассивСсылок, "Отправить", , ЭД);
	
КонецПроцедуры

// Проверяет на модифицированность объект.
//
// Параметры:
//  Объект - объекта, модифицированность которого надо проверить;
//  Форма - форма объекта, модифицированность которого надо проверить.
//
// Возвращаемое значение:
//  Результат - Булево - результат проверки модифицированности формы объекта.
//
Функция ОбъектМодифицирован(Объект, Форма) Экспорт
	
	Результат = Ложь;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатПроверки = Неопределено;
		ЭлектронныеДокументыКлиентПереопределяемый.ОбъектМодифицирован(Объект, Форма, РезультатПроверки);
		Если РезультатПроверки = Неопределено Тогда
			Результат = Истина;
			Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
				СтрПроведен = ?(Проведен, "записать и провести.
				|Записать и провести?", "записать.
				|Записать?");
				
				ШаблонСообщения = НСтр("ru = 'Документ изменен. Для формирования электронного документа его необходимо %1'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрПроведен);
				
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена, "Документ изменен.");
				Если Ответ = КодВозвратаДиалога.ОК Тогда
					Если Проведен Тогда
						Попытка
							Отказ = Не Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
						Исключение
							Предупреждение("Операция не выполнена!");
							Отказ = Истина;
						КонецПопытки;
					Иначе
						Отказ = Не Форма.ЗаписатьВФорме();
					КонецЕсли;
					
					Если Не Отказ Тогда
						Результат = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Результат = Ложь;
			КонецЕсли;
		Иначе
			Результат = РезультатПроверки;
		КонецЕсли;
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

// Отправка и получение электронных документов одной командой.
//
//
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт
	
	ЭлектронныеДокументыКлиентСлужебный.ОтправитьПолучитьЭлектронныеДокументы();
	
КонецПроцедуры