////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыВызовСервераСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - объект - владелец присоединенного файла,
//  Отказ           - булево - признак отказа от записи,
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа,
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ЭлектронныеДокументыВладелецПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// Пометим на удаление (снимем пометку) электронные документы, связанные с владельцем
	Если НЕ Источник.ЭтоНовый() Тогда
		ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ПометкаУдаления");
		Если Источник.ПометкаУдаления <> ИсточникСсылкаПометкаУдаления Тогда
			ЭлектронныеДокументыСлужебный.ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Источник.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Константы.ИспользоватьОбменЭД.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	// ЭД делаем только когда есть действующее соглашение об обмене
	Если (НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение") ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение)
		И НЕ ТипИсточника = Тип("ДокументОбъект.ПакетЭД") Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		
		Если НЕ ЭлектронныеДокументыСлужебный.ЕстьДействующееСоглашение(ПараметрыЭД) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьМодификациюОбъектаДляОбменаЭД(Источник);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - объект - владелец присоединенного файла,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ЭлектронныеДокументыВладелецПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение Тогда
		
		ЭлектронныеДокументыСлужебный.ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОбъект")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЗарегистрироватьОбъект Тогда
		
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебный.УстановитьНовуюВерсиюЭД(Источник.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение электронных документов

// Обработчик события "ПередЗаписью" электронных документов.
// 
// Параметры:
//  Источник - объект - электронный документ,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ПередЗаписьюЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		ЭлектронныеДокументыСлужебный.ОбработатьУдалениеЭлектронногоДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.НаправлениеЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВидЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВладелецФайла)
		ИЛИ ТипЗнч(Источник.ВладелецФайла) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка) ИЛИ Источник.Ссылка.СтатусЭД = Источник.СтатусЭД Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
	Источник.ДополнительныеСвойства.Вставить("СостояниеВерсииЭД", ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(
		Источник.Ссылка));
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" электронных документов.
// 
// Параметры:
//  Источник - объект - электронный документ,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписатьСобытиеЖР")
		И Источник.ДополнительныеСвойства.ЗаписатьСобытиеЖР Тогда
		
		ЭлектронныеДокументыСлужебный.ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(Источник.Ссылка);
	КонецЕсли;
	
	Если Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеВерсииЭД = Неопределено;
	
	Если Источник.ДополнительныеСвойства.Свойство("СоглашениеЭД") Тогда
		СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка);
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("СостояниеВерсииЭД") Тогда
		
		СледСостояниеВерсииЭД = Источник.ДополнительныеСвойства.СостояниеВерсииЭД;
		СтруктураТекВерсииЭД  = ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруВерсииЭД(Источник.ВладелецФайла);
		Если СледСостояниеВерсииЭД <> СтруктураТекВерсииЭД.СостояниеВерсииЭД Тогда
			ЭлектронныеДокументыСлужебный.ОбновитьВерсиюЭД(Источник.Ссылка)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//
// Возвращаемое значение:
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//  	настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//  	Контрагент, СоглашениеЭД или Организация.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник) Экспорт
	
	ПараметрыЭД = ЭлектронныеДокументыСлужебный.СтруктураПараметровЭД();
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.ПроизвольныйЭД")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПроизвольныйЭД") Тогда
		
		ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПараметрыЭД.НаправлениеЭД = Источник.Направление;
		ПараметрыЭД.Контрагент    = Источник.Контрагент;
		ПараметрыЭД.Организация   = Источник.Организация;
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.СоглашенияОбИспользованииЭД") Тогда
		
		ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.КаталогТоваров;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Вставить("СоглашениеЭД", Источник.Ссылка);
		Если НЕ Источник.ЭтоИнтеркампани
			И (Источник.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
			ИЛИ Источник.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту) Тогда
				ПараметрыЭД.Вставить("Контрагент", Источник.Контрагент);
		КонецЕсли;
	Иначе
		ЭлектронныеДокументыПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

Процедура ПроверитьМодификациюОбъектаДляОбменаЭД(Источник, ПризнакИзменения = Ложь)
	
	Если ПризнакИзменения ИЛИ Источник.ЭтоНовый() Тогда
		ЗарегистрироватьОбъект = Истина;
	Иначе
		ЗарегистрироватьОбъект = НадоЗарегистрироватьОбъект(Источник, Источник.Метаданные());
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗарегистрироватьОбъект", ЗарегистрироватьОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение модифицированности объекта, аналогичные подсистеме обмена данными

Функция НадоЗарегистрироватьОбъект(Источник, ОбъектМетаданных)
	
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();	
	ТаблицаРеквизитовРегистрации = ЭлектронныеДокументыСлужебный.ПолучитьТаблицуКлючевыхРеквизитовОбъекта(ИмяОбъекта);
	
	Если ТаблицаРеквизитовРегистрации.Количество() = 0 Тогда
		
		// Если перечень реквизитов не задан, то считаем, что объект модифицирован всегда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыРеквизитовРегистрации ИЗ ТаблицаРеквизитовРегистрации Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Источник, СтрокаТаблицыРеквизитовРегистрации);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если дошли до конца, то объект не изменился по реквизитам регистрации;
	// Регистрация не нужна
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект,
			СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	Иначе
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	КонецЕсли;
	
	Возврат НЕ ЭлектронныеДокументыСлужебный.ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения,
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения, СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Возврат ЭлектронныеДокументыСлужебный.ПолучитьТаблицуРеквизитовШапки(Объект.Ссылка,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта, СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта);
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Возврат ЭлектронныеДокументыСлужебный.ПолучитьТаблицуРеквизитовТабличнойЧасти(Объект.Ссылка,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта,
		СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта,
		СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти);
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
		
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции