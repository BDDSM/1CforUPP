////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыФорматОбмена: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД из документов БД

// Формирует электронный документ расходной накладной по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьНакладнуюПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога
		+ ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьНакладнуюCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ расходной накладной по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьТорг12ФНСПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Продавец);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_OTORG12");
	СтруктураЭД.Вставить("КНД", "1175004");
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров = Торг12СтруктураПараметров();
	ТекстОшибки = "";
	Если ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров)
		И ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		СтруктураПараметров.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
		Если СформироватьТорг12CML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СформироватьЭДТорг12Покупатель(СсылкаНаЭД) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	СтруктураЭД = СформироватьФайлТорг12Покупатель(СсылкаНаЭД);
	Если ТипЗнч(СтруктураЭД) = Тип("Структура") И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаЭД.ВладелецФайла, СтруктураЭД.ИдФайла, "xml", ДатаСозданияФайла,
			УниверсальноеВремя(ТекущаяДата()), АдресВоВременномХранилище, Неопределено, , "ЭДПрисоединенныеФайлы");
		
		СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Утвержден);
		СтруктураЭД.Вставить("УникальныйИД", СсылкаНаЭД.УникальныйИД);
		СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
		СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаСозданияФайла);
		
		ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Формирует электронный документ расходной накладной (титул покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаЭД    - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьФайлТорг12Покупатель(СсылкаНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	НастройкиОбменаЭД = СсылкаНаЭД.СоглашениеЭД;
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Покупатель);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД", Новый УникальныйИдентификатор());
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Если ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(НастройкиОбменаЭД.СпособОбменаЭД) Тогда
		СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	Иначе // через ОператораЭДО
		СтруктураУчастника = ЭлектронныеДокументыСлужебный.ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(НастройкиОбменаЭД,
			СсылкаНаЭД.Контрагент);
		СтруктураЭД.Вставить("Получатель", СтруктураУчастника.ИдентификаторКонтрагента);
	КонецЕсли;
	
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", СсылкаНаЭД.Наименование);
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", СсылкаНаЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("Организация", СсылкаНаЭД.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаЭД.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_PTORG12");
	СтруктураЭД.Вставить("КНД", "1175005");
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
	ТекстОшибки = "";
	
	СтруктураПараметров = Торг12ПокупательСтруктураПараметров();
	Если ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаЭД, СтруктураЭД, СтруктураПараметров)
		И ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаЭД.ВладелецФайла, СтруктураПараметров, ТекстОшибки) Тогда
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		СтруктураПараметров.Вставить("ВремДокТН", Прав(СтрЗаменить("0"
			+ Формат(СсылкаНаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=T"), ":", "."), 8));
		СтруктураПараметров.Вставить("ДатаДокТН", Формат(СсылкаНаЭД.ДатаФормированияЭДОтправителем, "ДФ=dd.MM.yyyy"));
		СтруктураПараметров.Вставить("НомерТоварнойНакладной", СсылкаНаЭД.НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаТоварнойНакладной", СсылкаНаЭД.ДатаДокументаОтправителя);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		
		ТЗ_ЭЦП = Новый ТаблицаЗначений;
		ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");
		СтруктураПараметров.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);
		// ЭЦП полученного файла
		ЗаполнитьЭЦППолученногоФайла(СсылкаНаЭД, СтруктураПараметров.ПолученныеЭЦП);
		
		ИдФайлТН = СсылкаНаЭД.Наименование;
		СтруктураПараметров.Вставить("ИдФайлТН", ИдФайлТН);
		СтруктураПараметров.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
		
		Если СформироватьТорг12ПокупательCML(СтруктураПараметров) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", СтруктураПараметров.ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ счета на оплату покупателю по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьСчетНаОплатуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетНаОплату);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьСчетНаОплатуCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ заказа поставщику по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьЗаказПоставщикуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗаказТовара);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьЗаказCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ заказа клиента по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьЗаказКлиентаПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтветНаЗаказ);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьЗаказCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ каталога товаров по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ТоварыКаталога - таблица значений, содержащая перечень номенклатуры,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьКаталогНоменклатуры(СсылкаНаОбъект, ТоварыКаталога, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.КаталогТоваров);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", СсылкаНаОбъект.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", СсылкаНаОбъект.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект,
		ТоварыКаталога, СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьКаталогCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ прайс-листа по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьПрайсПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПрайсЛист);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", НастройкиОбменаЭД.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьПрайсЛистCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ выполнения работ по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьАктВыполненныхРаботПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктВыполненныхРабот);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект,
		СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьАктCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ Акт выполненных работ формата 5.01 по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьАкт501ФНСПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктИсполнитель);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(
		СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_IAKTPRM");
	СтруктураЭД.Вставить("КНД", "1175006");
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	ТекстОшибки = "";
	СтруктураПараметров = Акт501СтруктураПараметров();
	Если ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров)
		И ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		СтруктураПараметров.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
		Если СформироватьАкт501CML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СформироватьЭДАкт501Заказчик(СсылкаНаЭД) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	СтруктураЭД = СформироватьФайлАкт501Заказчик(СсылкаНаЭД);
	Если ТипЗнч(СтруктураЭД) = Тип("Структура")
		И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаЭД.ВладелецФайла,
			СтруктураЭД.ИдФайла, "xml", ДатаСозданияФайла, УниверсальноеВремя(ТекущаяДата()), АдресВоВременномХранилище,
			Неопределено, , "ЭДПрисоединенныеФайлы");
		
		СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Утвержден);
		СтруктураЭД.Вставить("УникальныйИД", СсылкаНаЭД.УникальныйИД);
		СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
		СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
		
		ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Формирует электронный документ расходной накладной (титул покупателя) по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаЭД    - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  НастройкиОбменаЭД - структура, содержащая настройки обмена 
//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьФайлАкт501Заказчик(СсылкаНаЭД) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	НастройкиОбменаЭД = СсылкаНаЭД.СоглашениеЭД;
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктЗаказчик);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД", Новый УникальныйИдентификатор());
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Если ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(НастройкиОбменаЭД.СпособОбменаЭД) Тогда
		СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	Иначе // через ОператораЭДО
		СтруктураУчастника = ЭлектронныеДокументыСлужебный.ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(НастройкиОбменаЭД,
			СсылкаНаЭД.Контрагент);
		СтруктураЭД.Вставить("Получатель", СтруктураУчастника.ИдентификаторКонтрагента);
	КонецЕсли;
	
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", СсылкаНаЭД.Наименование);
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", СсылкаНаЭД.НомерДокументаОтправителя);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаЭД.ДатаДокументаОтправителя);
	СтруктураЭД.Вставить("Организация", СсылкаНаЭД.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаЭД.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_ZAKTPRM");
	СтруктураЭД.Вставить("КНД", "1175007");
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
	ТекстОшибки = "";
	
	СтруктураПараметров = Акт501ЗаказчикСтруктураПараметров();
	Если ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаЭД, СтруктураЭД, СтруктураПараметров)
		И ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаЭД.ВладелецФайла, СтруктураПараметров, ТекстОшибки) Тогда
		
		СтруктураСлужебныхПолейФНС(СтруктураПараметров);
		ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);
		
		СтруктураПараметров.Вставить("ВремДокАкт", Прав(СтрЗаменить("0"
			+ Формат(СсылкаНаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=T"), ":", "."), 8));
		СтруктураПараметров.Вставить("ДатаДокАкт", Формат(СсылкаНаЭД.ДатаФормированияЭДОтправителем, "ДФ=dd.MM.yyyy"));
		СтруктураПараметров.Вставить("НомерАкта", СсылкаНаЭД.НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаАкта", СсылкаНаЭД.ДатаДокументаОтправителя);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");
		
		ТЗ_ЭЦП = Новый ТаблицаЗначений;
		ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");
		СтруктураПараметров.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);
		
		// ЭЦП полученного файла
		ЗаполнитьЭЦППолученногоФайла(СсылкаНаЭД, СтруктураПараметров.ПолученныеЭЦП);
		
		ИдФайлАкт = СсылкаНаЭД.Наименование;
		СтруктураПараметров.Вставить("ИдФайлАкт", ИдФайлАкт);
		СтруктураПараметров.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
		
		Если СформироватьАкт501ЗаказчикCML(СтруктураПараметров) Тогда
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
			СтруктураЭД.Вставить("ИдФайла", СтруктураПараметров.ИдФайл);
			СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			ВозвращаемоеЗначение = СтруктураЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ отчета комитента по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(
		СсылкаНаОбъект, СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьОтчетОПродажахКомиссионногоТовараCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ отчета комитента о списании по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(
		СсылкаНаОбъект, СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьОтчетОСписанииКомиссионногоТовараCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ передача товаров между организациями по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьПередачуТоваровМеждуОрганизациями(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Интеркампани);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.ОрганизацияПолучатель);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(
		СсылкаНаОбъект, СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
		
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ возврат товаров между организациями по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьВозвратТоваровМеждуОрганизациями(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Интеркампани);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.ОрганизацияПолучатель);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(
		СсылкаНаОбъект, СтруктураЭД);
	ТекстОшибки = "";
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));
	
	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		Если СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует электронный документ счет фактура по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьСчетФактуру(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	// Сформируем и заполним струкутру электронного документа.
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетФактура);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(
		СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", НастройкиОбменаЭД.Организация);
	СтруктураЭД.Вставить("Контрагент", НастройкиОбменаЭД.Контрагент);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	// Сформируем структуру параметров для счет-фактуры и заполним ее.
	СтруктураПараметров = СтруктураЭСФ(СсылкаНаОбъект);
	ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);
	
	ЗаполнитьРеквизитыОператораЭДО(СтруктураПараметров);
	
	СтруктураПараметров.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	ГГГГММДД = СтрЗаменить(Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd"), "-", "");
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
	
	ТекстОшибки = "";
	РезультатФормирования = Ложь;
	Если ЭлектронныеДокументыПереопределяемый.ЭтоКорректировочныйСчетФактура(СсылкаНаОбъект) Тогда
		СтруктураПараметров.КНД = "1115108";
		
		ИдФайл = ЭлектронныеДокументыОператорыЭДО.ФНСИмяФайла(
			Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор",
			"ON_KORSFAKT", СтруктураПараметров.ИдПок, СтруктураПараметров.ИдОтпр, ГГГГММДД,
			СтруктураПараметров.УникальныйИдентификатор));
		
		СтруктураПараметров.Вставить("ИдФайл", ИдФайл);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		
		Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
			РезультатФормирования = СформироватьКорректировочныйСчетФактуруCML(СтруктураПараметров);
		КонецЕсли;
	Иначе
		СтруктураПараметров.КНД = "1115101";
		
		ИдФайл = ЭлектронныеДокументыОператорыЭДО.ФНСИмяФайла(
			Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор",
			"ON_SFAKT", СтруктураПараметров.ИдПок, СтруктураПараметров.ИдОтпр, ГГГГММДД,
			СтруктураПараметров.УникальныйИдентификатор));
		
		СтруктураПараметров.Вставить("ИдФайл", ИдФайл);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");
		
		Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
			РезультатФормирования = СформироватьСчетФактуруCML(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатФормирования И ПризнакЭД Тогда
		СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
		ВозвращаемоеЗначение = СтруктураПараметров;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение файлов

// Заполняет свойство объекта XDTO.
//
// Параметры
//  ОбъектXDTO   – объект заполнения,
//  ИмяСвойства  - свойство объекта,
//  Значение     - устанавливаемое значение,
//  Обязательное - булево - признак обязательности заполнения свойства,
//  ТекстОшибки  - строка - текст ошибки в случае неудачного заполнения
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "") Экспорт
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение) Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ВыгрузитьЭДвФайл(ЭД, ИмяФайла, УказаниеТипа = Истина, ТипКодировки = "UTF-8") Экспорт
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, ТипКодировки);
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));
	НоваяЗаписьXML.Закрыть();
	
КонецПроцедуры

// Возвращает идентификационный номер электронного документа.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на электронный документ, идентификационный номер которого необходимо получить,
//  ИДОтправителя - строка, идентификационный номер отправителя электронного документа, 
//  НомерВерсии - число, номер версии электронного документа.
//
// Возвращаемое значение:
//  строка формата "ИдОтправителя#ИДСсылкиОбъектаИБ##НомерВерсии"
//
Функция ВернутьИдЭД(СсылкаНаОбъект, ИдОтправителя, НомерВерсии) Экспорт
	
	ИдЭД = ИдОтправителя + "#" + СсылкаНаОбъект.УникальныйИдентификатор() + "##" + НомерВерсии;
	
	Возврат ИдЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// CML

// Только для внутреннего использования
Процедура ОшибкаФормированияЭлектронногоДокумента(ОписаниеОшибки, СтруктураПараметров, ТекстОшибки) Экспорт
	
	ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ОписаниеОшибки, ОписаниеОшибки);
	Сообщить(НСтр("ru='Ошибка формирования электронного документа!'"), СтатусСообщения.ОченьВажное);
	
	ТекстОшибки = СтрЗаменить(ТекстОшибки, """", """""");
	Сообщить(НСтр("ru=""" + ТекстОшибки + """"), СтатусСообщения.Важное);
	
	СтруктураПараметров.Вставить("ТекстОшибки", ТекстОшибки);
	
КонецПроцедуры

// Функция получает тип значения CML
//
// Параметры
//  Тип - Тип   - исходный тип
//  ВерсияСхемы - версия схемы CML
//
// Возвращаемое значение:
//  ТипЗначения - Тип значения
//
Функция ПолучитьТипЗначенияCML(Тип, ВерсияСхемы = "4.02") Экспорт
	
	Попытка
		Если ВерсияСхемы <> "4.02" Тогда
			ТипЗначения = ФабрикаXDTO.Тип(ВерсияСхемы, Тип);
		Иначе
			ТипЗначения = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", Тип);
		КонецЕсли
	Исключение
		
		ТипЗначения = Неопределено;
	КонецПопытки;
	
	Возврат ТипЗначения;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьСвойствоПоляXDTOсхемы(ПространствоИменСхемы, ИмяОбъекта, ИмяСвойства, ВидФасета) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ОбъектCML = ПолучитьОбъектТипаCML(ИмяОбъекта, ПространствоИменСхемы);
	
	Если ОбъектCML <> Неопределено И ТипЗнч(ВидФасета) = Тип("ВидФасетаXDTO") Тогда
		СвойстваОбъекта = ОбъектCML.Свойства();
		ИскомоеСвойство = СвойстваОбъекта.Получить(ИмяСвойства);
		Если ИскомоеСвойство <> Неопределено Тогда
			Фасет = ИскомоеСвойство.Тип.Фасеты.Получить(ВидФасета);
			ВозвращаемоеЗначение = Фасет.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// Разбор файлов

// Осуществляет разбор файла с реквизитами контрагента
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, ОшибкаРазбора) Экспорт
	
	ОшибкаРазбора = Ложь;
	СтруктураВозврата.Вставить("ТелефонПартнера");
	СтруктураВозврата.Вставить("ТелефонКЛ");
	СтруктураВозврата.Вставить("АдресЭППартнера");
	СтруктураВозврата.Вставить("УказыватьЮридическиеРеквизиты");
	СтруктураВозврата.Вставить("НомерСчета");
	СтруктураВозврата.Вставить("БИКБанка");
	СтруктураВозврата.Вставить("КоррСчетБанка");
	СтруктураВозврата.Вставить("ПредставлениеБанка");
	СтруктураВозврата.Вставить("УказатьБанковскийСчетКонтрагента");
	СтруктураВозврата.Вставить("ИспользуетсяБанкДляРасчетов");
	СтруктураВозврата.Вставить("БИКБанкаДляРасчетов");
	СтруктураВозврата.Вставить("КоррСчетБанкаДляРасчетов");
	СтруктураВозврата.Вставить("ПредставлениеБанкаДляРасчетов");
	СтруктураВозврата.Вставить("ВидКомпании");
	СтруктураВозврата.Вставить("ИНН");
	СтруктураВозврата.Вставить("КПП");
	СтруктураВозврата.Вставить("КодПоОКПО");
	СтруктураВозврата.Вставить("НаименованиеКонтрагента");
	СтруктураВозврата.Вставить("ЮридическийАдрес");
	СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей");
	СтруктураВозврата.Вставить("УказатьДанныеКонтактногоЛица");
	СтруктураВозврата.Вставить("ФамилияКЛ");
	СтруктураВозврата.Вставить("ИмяКЛ");
	СтруктураВозврата.Вставить("ОтчествоКЛ");
	СтруктураВозврата.Вставить("ФамилияКонтрагента");
	СтруктураВозврата.Вставить("ИмяКонтрагента");
	СтруктураВозврата.Вставить("ОтчествоКонтрагента");
	СтруктураВозврата.Вставить("Название");
	СтруктураВозврата.Вставить("ФактическийАдрес");
	СтруктураВозврата.Вставить("ФактическийАдресЗначенияПолей");

	РезультатРазбора = ЭлектронныеДокументыПереопределяемый.РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, ОшибкаРазбора);
	
	Если ТипЗнч(РезультатРазбора) <> Тип("Булево") ИЛИ РезультатРазбора = Ложь Тогда
		ОбъектXML = Новый ЧтениеXML;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
		ВремФайл = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ВремФайл);
		
		Попытка
			ОбъектXML.ОткрытьФайл(ВремФайл);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		Исключение
			ОбъектXML.Закрыть();
			ОшибкаРазбора = Истина;
			Возврат;
		КонецПопытки;
		
		Если НЕ ЭД.Тип() = ПолучитьТипЗначенияCML("Контрагент", "4.02") Тогда
			ОшибкаРазбора = Истина;
			Возврат;
		КонецЕсли;
		
		Попытка
			СвойствоЭД = ЭД.Свойства().Получить("Контакты");
			Если НЕ СвойствоЭД = Неопределено И НЕ ЭД.Контакты = Неопределено Тогда
				Для Каждого ТекКонтакт Из ЭД.Контакты.Контакт Цикл
					Если ТекКонтакт.Тип = "Телефон рабочий" Тогда
						СтруктураВозврата.ТелефонПартнера = ТекКонтакт.Значение;
						СтруктураВозврата.ТелефонКЛ = ТекКонтакт.Значение;
					ИначеЕсли ТекКонтакт.Тип = "Почта" Тогда
						СтруктураВозврата.АдресЭППартнера = ТекКонтакт.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("РасчетныеСчета");
			Если СвойствоЭД <> Неопределено Тогда
				
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					Для Каждого ТекСв Из ЗнДанных.РасчетныйСчет Цикл
						
						СтруктураВозврата.НомерСчета = ТекСв.НомерСчета;
						СтруктураВозврата.БИКБанка = ТекСв.Банк.БИК;
						СтруктураВозврата.КоррСчетБанка = ТекСв.Банк.СчетКорреспондентский;
						СтруктураВозврата.ПредставлениеБанка = ТекСв.Банк.Наименование;
						СтруктураВозврата.УказатьБанковскийСчетКонтрагента = Истина;
						
						Если НЕ ТекСв.БанкКорреспондент = Неопределено Тогда
							СтруктураВозврата.ИспользуетсяБанкДляРасчетов = Истина;
							СтруктураВозврата.БИКБанкаДляРасчетов = ТекСв.БанкКорреспондент.БИК;
							СтруктураВозврата.КоррСчетБанкаДляРасчетов = ТекСв.БанкКорреспондент.СчетКорреспондентский;
							СтруктураВозврата.ПредставлениеБанкаДляРасчетов = ТекСв.БанкКорреспондент.Наименование;
						КонецЕсли;
						Прервать;
					КонецЦикла
				КонецЕсли;
			КонецЕсли;
			
			СтруктураВозврата.УказыватьЮридическиеРеквизиты = Истина;
			ДопустимыеТипы = "Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
			
			СвойствоЭД = ЭД.Свойства().Получить("ЮрЛицо");
			Если СвойствоЭД <> Неопределено Тогда
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					СтруктураВозврата.ВидКомпании = 0;
					СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");
					Если СвойствоИНН <> Неопределено Тогда
						СтруктураВозврата.ИНН = ЗнДанных.Получить(СвойствоИНН);
					КонецЕсли;
					СвойствоКПП = ЗнДанных.Свойства().Получить("КПП");
					Если СвойствоКПП <> Неопределено Тогда
						СтруктураВозврата.КПП = ЗнДанных.Получить(СвойствоКПП);
					КонецЕсли;
					СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");
					Если СвойствоОКПО <> Неопределено Тогда
						СтруктураВозврата.КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
					КонецЕсли;
					СвойствоОФНаим = ЗнДанных.Свойства().Получить("ОфициальноеНаименование");
					Если СвойствоОФНаим <> Неопределено Тогда
						СтруктураВозврата.НаименованиеКонтрагента = ЗнДанных.Получить(СвойствоОфНаим);
					КонецЕсли;
					
					СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");
					Если СвойствоЮрАдрес <> Неопределено Тогда
						ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);
						Если ЗнЮрАдрес <> Неопределено Тогда
							
							СтруктураВозврата.ЮридическийАдрес = ЗнЮрАдрес.Представление;
							ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
							Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
								Если ТекСв.Тип = "Почтовый индекс" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление =  "Индекс";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = "НаселенныйПункт";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 ТОгда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = ТекСв.Тип;
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								КонецЕсли;
							КонецЦикла;
							
							СтруктураВозврата.ЮридическийАдресЗначенияПолей = ЮридическийАдресЗначенияПолей;
						КонецЕсли
					КонецЕсли;
					
					СвойствоРуководитель = ЗнДанных.Свойства().Получить("Руководитель");
					Если СвойствоРуководитель <> Неопределено Тогда
						ЗнРуководитель = ЗнДанных.Получить(СвойствоРуководитель);
						Если ЗнРуководитель <> Неопределено Тогда
							СвойствоФизЛицо = ЗнРуководитель.Свойства().Получить("ФизЛицо");
							Если СвойствоФизЛицо<> Неопределено Тогда
								ФизЛицо = ЗнРуководитель.Получить(СвойствоФизЛицо);
								Если ФизЛицо <> Неопределено Тогда
									СтруктураВозврата.УказатьДанныеКонтактногоЛица = Истина;
									ФамилияКЛ = ""; ИмяКЛ = ""; ОтчествоКЛ = "";
									ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(ФизЛицо.ПолноеНаименование, ФамилияКЛ, ИмяКЛ,ОтчествоКЛ);
									СтруктураВозврата.ФамилияКЛ =  ФамилияКЛ;
									СтруктураВозврата.ИмяКЛ =      ИмяКЛ;
									СтруктураВозврата.ОтчествоКЛ = ОтчествоКЛ;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("ФизЛицо");
			Если СвойствоЭД <> Неопределено Тогда
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					
					СтруктураВозврата.ВидКомпании = 2;
					СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");
					Если СвойствоИНН <> Неопределено Тогда
						СтруктураВозврата.ИНН = ЗнДанных.Получить(СвойствоИНН);
					КонецЕсли;
					
					СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");
					Если СвойствоОКПО <> Неопределено Тогда
						КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
						СтруктураВозврата.КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
					КонецЕсли;
					
					СвойствоОФНаим = ЗнДанных.Свойства().Получить("ПолноеНаименование");
					Если СвойствоОФНаим <> Неопределено Тогда
						СтруктураВозврата.НаименованиеКонтрагента = ЗнДанных.Получить(СвойствоОфНаим);
						ФамилияКонтрагента = ""; ИмяКонтрагента = ""; ОтчествоКонтрагента = "";
						
						ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(СтруктураВозврата.НаименованиеКонтрагента, ФамилияКонтрагента,
							ИмяКонтрагента, ОтчествоКонтрагента);
						СтруктураВозврата.ФамилияКонтрагента =  ФамилияКонтрагента;
						СтруктураВозврата.ИмяКонтрагента =      ИмяКонтрагента;
						СтруктураВозврата.ОтчествоКонтрагента = ОтчествоКонтрагента;
					КонецЕсли;
					
					СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");
					Если СвойствоЮрАдрес <> Неопределено Тогда
						
						ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);
						Если ЗнЮрАдрес <> Неопределено Тогда
							
							СтруктураВозврата.ЮридическийАдрес = ЗнЮрАдрес.Представление;
							ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
							Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
								Если ТекСв.Тип = "Почтовый индекс" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = "Индекс";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = "НаселенныйПункт";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 ТОгда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = ТекСв.Тип;
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								КонецЕсли;
							КонецЦикла;
							
							СтруктураВозврата.ЮридическийАдресЗначенияПолей = ЮридическийАдресЗначенияПолей;
						КонецЕсли
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("Наименование");
			Если СвойствоЭД <> Неопределено Тогда
				СтруктураВозврата.Название = ЭД.Получить(СвойствоЭД);
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("Адрес");
			Если СвойствоЭД <> Неопределено Тогда
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					
					СтруктураВозврата.ФактическийАдрес = ЗнДанных.Представление;
					ФактическийАдресЗначенияПолей = Новый СписокЗначений;
					Для Каждого ТекСв Из ЗнДанных.АдресноеПоле Цикл
						Если ТекСв.Тип = "Почтовый индекс" Тогда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Представление = "Индекс";
							ФактАдресЗначения.Значение = ТекСв.Значение;
						ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Представление = "НаселенныйПункт";
							ФактАдресЗначения.Значение = ТекСв.Значение;
						ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 ТОгда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Значение = ТекСв.Значение;
							ФактАдресЗначения.Представление = ТекСв.Тип;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураВозврата.ФактическийАдресЗначенияПолей = ФактическийАдресЗначенияПолей;
				КонецЕсли;
			КонецЕсли;
		Исключение
			
			ОшибкаРазбора = Истина;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Разбирает файл данных электронного документа, создает/изменяет объекты ИБ по данным ЭД.
//
// Параметры:
//  СтруктураПараметров - структура параметров для разбора электронного документа, 
//  ДеревоРазбора - дерево значений, структура данных ранее разобранных ЭД.
//
// Возвращаемое значение:
//  Структура параметров с реквизитами созданных/измененных объектов ИБ
//
Функция РазобратьФайлДанных(СтруктураПараметров, ДеревоРазбора = Неопределено) Экспорт
	
	Если ДеревоРазбора = Неопределено Тогда
		ДеревоРазбора = ИнициализироватьДеревоРазбора();
	КонецЕсли;
	
	Возврат ПолучитьДанныеИзФайла(СтруктураПараметров, ДеревоРазбора);
	
КонецФункции

// Получает ключевые данные файла из заголовка электронного документа с помощью XDTO-пакета.
//
// Параметры:
//  ИмяФайла - строка, путь к файлу, данные которого надо получить.
//
// Возвращаемое значение:
//  Структура параметров с реквизитами электронного документа
//
Функция ПрочитатьШапкуФайлаCMLпоXDTO(ИмяФайла) Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	СтруктураПараметров = Новый Структура;
	СтруктураУчастников = Новый Структура;
	
	ВидЭД = Неопределено;
	Отправитель = Неопределено;
	
	НомерДокументаОтправителя = Неопределено;
	ДатаДокументаОтправителя = Неопределено;
	ДатаФормированияЭДОтправителем = Неопределено;
	ИдЭДВладельца = Неопределено;
	НеизвестныйЭД = Ложь;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если НЕ ЭД.Свойства().Получить("ИД") = Неопределено Тогда
			ИдЭД = ЭД.Ид;
		Иначе
			УИД = Новый УникальныйИдентификатор();
			ИдЭД = Строка(УИД) + "##1";
		КонецЕсли;
		
		ЕстьСвойствоИдФайл = ЭД.Свойства().Получить("ИдФайл") <> Неопределено;
		
		Если ЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02") Тогда
			
			ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Ошибка = ложь;
			
			ПрочитатьДанныеКонтрагента(ЭД.Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ПрочитатьДанныеКонтрагента(ЭД.Заказчик,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			СтруктураУчастников = Новый Структура;
			
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02") Тогда
			
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Ошибка = ложь;
			
			ПрочитатьДанныеКонтрагента(ЭД.Поставщик,  ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ПрочитатьДанныеКонтрагента(ЭД.Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			СтруктураУчастников = Новый Структура;
			
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02") Тогда
			
			ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Ошибка = ложь;
			
			ПрочитатьДанныеКонтрагента(ЭД.Поставщик,  ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ПрочитатьДанныеКонтрагента(ЭД.Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02") Тогда
			
			ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
			Отправитель = "Покупатель";
			ПризнакПродавца = Ложь;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Ошибка = ложь;
			
			ПрочитатьДанныеКонтрагента(ЭД.Комитент,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			ПрочитатьДанныеКонтрагента(ЭД.Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02") Тогда
			
			ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
			Отправитель = "Покупатель";
			ПризнакПродавца = Ложь;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Ошибка = ложь;
			
			ПрочитатьДанныеКонтрагента(ЭД.Комитент,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			ПрочитатьДанныеКонтрагента(ЭД.Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
			ДеревоРазбора = ИнициализироватьДеревоРазбора();
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
			НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
			Если ЭД.Роль = "Продавец" Тогда
				ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
				Отправитель = "Продавец";
				ПризнакПродавца = Истина;
				
				ПрочитатьДанныеКонтрагента(ЭД.Заказчик,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
				ПрочитатьДанныеКонтрагента(ЭД.Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
			ИначеЕсли ЭД.Роль = "Покупатель" Тогда	
				ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
				Отправитель = "Покупатель";
				ПризнакПродавца = Ложь;
				
				ПрочитатьДанныеКонтрагента(ЭД.Заказчик,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
				ПрочитатьДанныеКонтрагента(ЭД.Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
			КонецЕсли;
			НомерДокументаОтправителя = ЭД.Номер;
			ДатаДокументаОтправителя  = ЭД.Дата;
			Ошибка = ложь;
			
			СтруктураУчастников = Новый Структура;
			СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
			СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
			ДатаДокументаОтправителя  = ЭД.ДатаФормирования;
			ПризнакПродавца = Истина;
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
			ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
			ПризнакПродавца = Истина;
			ДатаДокументаОтправителя  = ЭД.ДействительноС;
		ИначеЕсли ЕстьСвойствоИдФайл Тогда
			// Обрабатываем случай когда к нам пришел сторонний XML файл.
			Если НЕ ЗначениеЗаполнено(ОбъектXML.URIПространстваИмен) Тогда
				
				// Вставляем во временный файл ЭД пространство имен 1С.
				ДобавитьПространствоИмен1СВоВнешнийФайлЭД(ОбъектXML, ЭД, ИмяФайла);
			КонецЕсли;
			
			Если Найти(ЭД.ИдФайл, "ON_SFAKT") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "SFAKT"));
				ВидЭД = Перечисления.ВидыЭД.СчетФактура;
				ПризнакПродавца = Истина;
			ИначеЕсли Найти(ЭД.ИдФайл, "ON_KORSFAKT") > 0 Тогда // корректировочный счет-фактура
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "KORSFAKT"));
				ВидЭД = Перечисления.ВидыЭД.СчетФактура;
				ПризнакПродавца = Истина;
			ИначеЕсли Найти(ЭД.ИдФайл, "OTORG12") > 0 Тогда // торг-12 титул продавца
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "OTORG12"));
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
				ПризнакПродавца = Истина;
				НомерДокументаОтправителя = ЭД.Документ.СвТНО.ТН.НомТН;
				ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;
				ДатаДокументаОтправителя  = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
				ДатаДок = ЭД.Документ.ДатаДок;
				ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
					+ СтрЗаменить(ЭД.Документ.ВремДок, ".", ""));
				
				ДеревоРазбора = ИнициализироватьДеревоРазбора();
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
				
				НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
				Поставщик = Неопределено;
				Если ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
					Поставщик = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;
				ИначеЕсли ЭД.Документ.СвТНО.Поставщик <> Неопределено Тогда
					Поставщик = ЭД.Документ.СвТНО.Поставщик;
				КонецЕсли;
				Плательщик = ЭД.Документ.СвТНО.Плательщик;
				Ошибка = Ложь;
				
				Если Поставщик <> Неопределено Тогда
					ПрочитатьДанныеКонтрагента(Поставщик,  ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
				КонецЕсли;
				Если Плательщик <> Неопределено Тогда
					ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
				КонецЕсли;
				
				СтруктураУчастников = Новый Структура;
				СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
				СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
				
			ИначеЕсли Найти(ЭД.ИдФайл, "PTORG12") > 0 Тогда // торг-12 титул покупателя
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "PTORG12"));
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
				ПризнакПродавца = Ложь;
				ИдЭДВладельца = Прав(СокрП(ЭД.Документ.ИдТНО.ИдФайлТН), 36);
				НомерДокументаОтправителя = ЭД.Документ.СвТНП.НомТН;
				ДатаДок = ЭД.Документ.СвТНП.ДатаТН;
				ДатаДокументаОтправителя  = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
				ДатаДок = ЭД.Документ.ДатаДок;
				ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
					+ СтрЗаменить(ЭД.Документ.ВремДок, ".", ""));
			ИначеЕсли Найти(ЭД.ИдФайл, "IAKTPRM") > 0 Тогда // Акт титул исполнителя
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "IAKTPRM"));
				ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
				ПризнакПродавца = Истина;
				НомерДокументаОтправителя = ЭД.Документ.СвАктИ.НомАкт;
				ДатаАкта = ЭД.Документ.СвАктИ.ДатаАкт;
				ДатаДокументаОтправителя  = Дата(Сред(ДатаАкта, 7, 4) + Сред(ДатаАкта, 4, 2) + Сред(ДатаАкта, 1, 2));
				ДатаДок = ЭД.Документ.ДатаДок;
				ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
					+ СтрЗаменить(ЭД.Документ.ВремДок, ".", ""));
				
				ДеревоРазбора = ИнициализироватьДеревоРазбора();
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
				
				НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
				Ошибка = Ложь;
				
				Исполнитель = ЭД.Документ.СвАктИ.Исполнитель;
				Если Исполнитель <> Неопределено Тогда
					ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Исполнитель");
				КонецЕсли;
				
				Заказчик = ЭД.Документ.СвАктИ.Заказчик;
				Если Заказчик <> Неопределено Тогда
					ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Заказчик");
				КонецЕсли;
				
				СтруктураУчастников = Новый Структура;
				
				СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));
				СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));
			ИначеЕсли Найти(ЭД.ИдФайл, "ZAKTPRM") > 0 Тогда // Акт титул заказчика
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "ZAKTPRM"));
				ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
				ПризнакПродавца = Ложь;
				ИдЭДВладельца = Прав(СокрП(ЭД.Документ.СвАктИ.ИдАктИ.ИдФайлАктИ), 36);
				НомерДокументаОтправителя = ЭД.Документ.СвАктИ.СвАктИ.НомАкт;
				ДатаАкт = ЭД.Документ.СвАктИ.СвАктИ.ДатаАкт;
				ДатаДокументаОтправителя = Дата(Сред(ДатаАкт, 7, 4) + Сред(ДатаАкт, 4, 2) + Сред(ДатаАкт, 1, 2));
				ДатаДок = ЭД.Документ.ДатаДок;
				ДатаФормированияЭДОтправителем = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)
					+ СтрЗаменить(ЭД.Документ.ВремДок, ".", ""));
			Иначе
				НеизвестныйЭД = Истина;
			КонецЕсли
		Иначе
			НеизвестныйЭД = Истина;
		КонецЕсли;
		Если НеизвестныйЭД Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1!'"), ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("НомерЭД", ИдЭД);
		СтруктураПараметров.Вставить("ВидЭд",   ВидЭД);
		НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(ИдЭД);
		Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);
		Исключение
		КонецПопытки;
		
		СтруктураПараметров.Вставить("НомерВерсииЭД",   НомерВерсииЭД);
		СтруктураПараметров.Вставить("ПризнакПродавца", ПризнакПродавца);
		СтруктураПараметров.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя",  ДатаДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		СтруктураПараметров.Вставить("ИдЭДВладельца", ИдЭДВладельца);
		Если СтруктураУчастников.Свойство("Организация") Тогда
			СтруктураПараметров.Вставить("Организация", СтруктураУчастников.Организация);
		КонецЕсли;
		Если СтруктураУчастников.Свойство("Контрагент") Тогда
			СтруктураПараметров.Вставить("Контрагент", СтруктураУчастников.Контрагент);
		КонецЕсли;
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИмяФайла, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Только для внутреннего использования
Процедура ДобавитьПространствоИмен1СВоВнешнийФайлЭД(ОбъектXML, ЭлектронныйДокумент, ИмяФайла) Экспорт
	
	ОбъектXML.Закрыть();
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	
	// Определим наше пространство имен
	URIПространстваИмен = "";
	Если Найти(ЭлектронныйДокумент.ИдФайл, "ON_SFAKT") > 0 Тогда
		URIПространстваИмен = "SFAKT";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "ON_KORSFAKT") > 0 Тогда // корректировочный счет-фактура
		URIПространстваИмен = "KORSFAK";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "OTORG12") > 0 Тогда // торг-12 титул продавца
		URIПространстваИмен = "OTORG12";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "PTORG12") > 0 Тогда // торг-12 титул покупателя
		URIПространстваИмен = "PTORG12";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "IAKTPRM") > 0 Тогда // Акт титул исполнителя
		URIПространстваИмен = "IAKTPRM";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "ZAKTPRM") > 0 Тогда // Акт титул заказчика
		URIПространстваИмен = "ZAKTPRM";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "DP_IZVPOL") > 0 Тогда
		URIПространстваИмен = "DP_IZVPOL";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "DP_UVUTOCH") > 0 Тогда
		URIПространстваИмен = "DP_UVUTOCH";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "POD_DPIZVPOL") > 0 Тогда
		URIПространстваИмен = "DP_IZVPOL";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "DP_PDOTPR") > 0 Тогда
		URIПространстваИмен = "DP_PDOTPR";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "DP_PDPOL") > 0 Тогда
		URIПространстваИмен = "DP_PDPOL";
	ИначеЕсли Найти(ЭлектронныйДокумент.ИдФайл, "POD") > 0 Тогда
		URIПространстваИмен = "PDO";
	КонецЕсли;
	
	// Установим пространство имен 1С
	Если НЕ ЗначениеЗаполнено(ДокументDOM.ЭлементДокумента.URIПространстваИмен) Тогда
		ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", URIПространстваИмен);
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дерева объектов разбора и дерева соответствий объектам

// Получает информацию о товаре в массиве ЭД
//
// Параметры:
//  МассивЭД - массив ссылок на элементы справочника ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Таблица значений, содержащая информацию о товаре.
//
Функция ПолучитьИнформациюОТоваре(МассивЭД) Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	НеизвестныйЭД = Ложь;
	ТаблицаВозврата = Неопределено;
	ИменаДопКолонок = "";
	
	Для каждого ТекЭД из МассивЭД Цикл
		Если ТекЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ТекЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			
			ЭД = ТекЭД.ЭлектронныйДокументВладелец;
		Иначе
			ЭД = ТекЭД;
		КонецЕсли;
		ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭД, , Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			Если ИмяФайла = Неопределено Тогда
				ШаблонОшибки = НСтр("ru = 'Чтение электронного документа: %1.
				|Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			ДеревоДопДанных = Неопределено;
			ВыборкаЭДДопДанных = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(ЭД);
			Если ВыборкаЭДДопДанных.Следующий() Тогда
				ДопДанныеЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаЭДДопДанных.Ссылка,
					ВыборкаЭДДопДанных.Ссылка.УникальныйИдентификатор(), Истина);
				СсылкаНаДДДопДанныхЭД = "";
				Если ДопДанныеЭД.Свойство("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДДДопДанныхЭД)
					И ЗначениеЗаполнено(СсылкаНаДДДопДанныхЭД) Тогда
					ДанныеДопФайла = ПолучитьИзВременногоХранилища(СсылкаНаДДДопДанныхЭД);
				
					Если ЗначениеЗаполнено(ДопДанныеЭД.Расширение) Тогда
						ИмяФайлаДопДанных = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопДанныеЭД.Расширение);
					Иначе
						ИмяФайлаДопДанных = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
					КонецЕсли;
				
					Если ИмяФайлаДопДанных = Неопределено Тогда
						ШаблонОшибки = НСтр("ru = 'Чтение электронного документа доп. данных: %1.
						|Не удалось прочитать электронный документ доп. данных. Проверьте настройку рабочего каталога.'");
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ВыборкаЭДДопДанных.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						Продолжить;
					КонецЕсли;
					ДанныеДопФайла.Записать(ИмяФайлаДопДанных);
					ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ИмяФайлаДопДанных);
				КонецЕсли;
			КонецЕсли;
		
			ДанныеЭД.Записать(ИмяФайла);
			
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 ИЛИ Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог(, ЭД.УникальныйИдентификатор());
				Если ПапкаДляРаспаковки = Неопределено Тогда
					ШаблонОшибки = НСтр("ru = 'Чтение электронного документа: %1.
					|Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭД);
					Продолжить;
				КонецЕсли;
				УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
				Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
					ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
					ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				Иначе
					ФайлПриемник = ПапкаДляРаспаковки + "\" + Новый УникальныйИдентификатор + ".xml";
					ЭлектронныеДокументыСлужебный.УдалитьЛишнийСлэшВПути(ФайлПриемник);
					КопироватьФайл(ИмяФайла, ФайлПриемник);
				КонецЕсли;
				ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
					ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
					Если Найти(РаспакованныйФайл.Имя, "packageDescription") Тогда
						Продолжить;
					КонецЕсли;
					
					Попытка
						ОбъектXML.ОткрытьФайл(РаспакованныйФайл.ПолноеИмя);
						ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
						НаборДанных = Неопределено;
						ЕстьСвойствоИдФайл = ЭД_XML.Свойства().Получить("ИдФайл") <> Неопределено;
						
						Если ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
							НаборДанных = ЭД_XML["Предложения"].Предложение;
							СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML);
						ИначеЕсли ЭД_XML.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02")
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02")
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02")
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02")
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02")
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02")
							ИЛИ ЭД_XML.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
							НаборДанных = ЭД_XML["Товары"].Товар;
							СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML);
						ИначеЕсли ЕстьСвойствоИдФайл Тогда
							// Обрабатываем случай когда к нам пришел сторонний XML файл.
							Если НЕ ЗначениеЗаполнено(ОбъектXML.URIПространстваИмен) Тогда
						
								// Вставляем во временный файл ЭД пространство имен 1С.
								ДобавитьПространствоИмен1СВоВнешнийФайлЭД(ОбъектXML, ЭД_XML, РаспакованныйФайл.ПолноеИмя);
							КонецЕсли;
							
							Если Найти(ЭД_XML.ИдФайл, "OTORG12") > 0 Тогда
								ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "OTORG12"));
								НаборДанных = ЭД_XML.Документ.СвТНО.ТН.Таблица.СвТов;
								СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных,
									Истина, "Товары");
							ИначеЕсли Найти(ЭД_XML.ИдФайл, "IAKTPRM") > 0 Тогда
								ЭД_XML = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "IAKTPRM"));
								НаборДанныхОписанияРабот = ЭД_XML.Документ.СвАктИ.ОписРабот;
								НаборДанных = Неопределено;
								// Переберм номенклатуру из всех табличных частей акта.
								Для Сч = 0 По НаборДанныхОписанияРабот.Количество() - 1 Цикл
									ЭлементОписания = НаборДанныхОписанияРабот.ПолучитьXDTO(Сч);
									НаборДанных = ЭлементОписания.ПолучитьСписок("Работа");
									СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных,
										Истина, "Услуги", Сч + 1);
								КонецЦикла;
							Иначе
								НеизвестныйЭД = Истина;
							КонецЕсли;
						Иначе
							НеизвестныйЭД = Истина;
						КонецЕсли;
						
						Если НеизвестныйЭД Тогда
							Если ПользователиСервер.ЭтоПолноправныйПользовательИБ() Тогда
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Неизвестный тип при чтении данных из ЭД %1!'"), ЭД);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							КонецЕсли;
							ОбъектXML.Закрыть();
							Продолжить;
						КонецЕсли;
						
						
					Исключение
						Если ПользователиСервер.ЭтоПолноправныйПользовательИБ() Тогда
							ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из ЭД %1: %2'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения, ЭД, ОписаниеОшибки());
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбъектXML.Закрыть();
	
	ТаблицаВозврата.Свернуть("ИД, Артикул, Наименование, БазоваяЕдиницаКод, БазоваяЕдиницаНаименование,
	|БазоваяЕдиницаНаименованиеПолное, БазоваяЕдиницаМеждународноеСокращение, Описание, ЭД" + ИменаДопКолонок);
	
	Возврат ТаблицаВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры:
//  ПолноеИмяФайла - строка, путь к файлу, по которому необходимо сформировать печатную форму.
//  НаправлениеЭД - перечисление НаправлениеЭД
//  ИД - уникальный идентификатор объекта ЭД
//
// Возвращаемое значение:
//  Табличный документ с данными электронного документа.
//
Функция СформироватьПечатнуюФормуЭД(ПолноеИмяФайла, НаправлениеЭД, ИД = Неопределено,
		ИмяФайлаПодчиненногоЭД = Неопределено, НаименованиеЭД = Неопределено, ИмяФайлаДопДанных = Неопределено) Экспорт
	
	Результат = СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД, ИмяФайлаДопДанных);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	
	ОбщийТабДок = Новый ТабличныйДокумент;
	ОбщийТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если ЗначениеЗаполнено(НаименованиеЭД) Тогда
		МакетИдентификатораДокумента = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ИдентификаторДокумента");
		ОбластьИдентификаторДокумента = МакетИдентификатораДокумента.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = НаименованиеЭД;
		ОбластьЯчеек = ОбластьИдентификаторДокумента.Область();
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		
		Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
			ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			ДанныеПокупателя = Новый Структура;
			Если ЗначениеЗаполнено(ИмяФайлаПодчиненногоЭД) Тогда
				НаправлениеЭДПокупателя = ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, Перечисления.НаправленияЭД.Исходящий,
					Перечисления.НаправленияЭД.Входящий);
				ЗаполнитьДанныеПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеПокупателя);
			КонецЕсли;
			
			ДанныеЭДДляПечати = ПолучитьДанныеНакладнойДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументТОРГ12_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, ДанныеПокупателя);
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик ТОгда
			
			ДанныеЭДДляПечати = ПолучитьДанныеАкта501ДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументАкт501(ТабличныйДокумент, ДанныеЭДДляПечати);
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, "Заказ");
			ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, "Заказ");
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеЗаказаПоставщикуДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			
			Если СтрокаОбъекта.ОписаниеОбъекта= "Корректировочный" Тогда
				ДанныеЭДДляПечати = ПолучитьДанныеКорректировочногоСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора);
				ЗаполнитьТабличныйДокументКорректировочныйСчетФактура_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			Иначе
				ДанныеЭДДляПечати = ПолучитьДанныеСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора);
				ЗаполнитьТабличныйДокументСчетФактура_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
				ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			КонецЕсли;
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеПрайсЛистаДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументПрайсЛист_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеКаталогаТоваровДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументКаталогаТоваров_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот ТОгда
			
			ДанныеЭДДляПечати = ПолучитьДанныеАктовВыполненныхРаботДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументАктВыполненныхРабот_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеОтчетаОПродажахКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументОтчетаОПродажахКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеОтчетаОСписанииКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументОтчетОСписанииКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеПодтвержденияДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументПодтверждение(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеИзвещенияДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументИзвещение(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеУточненияДляПечати(СтрокаОбъекта, ДеревоРазбора, ИД);
			ЗаполнитьТабличныйДокументУточнение(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		КонецЕсли;
		
		ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, 1);
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ТабличныйДокумент);
		
		ОбщийТабДок.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;
		ОбщийТабДок.АвтоМасштаб = Истина;
		ОбщийТабДок.ОтображатьЗаголовки = Ложь;
		ОбщийТабДок.ОтображатьСетку = Ложь;
		ОбщийТабДок.ТолькоПросмотр = Истина;
		
		Возврат ОбщийТабДок;
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка формирования табличного документа:
		|%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'формирования табличного документа'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сравнение электронных документов

// Готовит файлы табличных документов MXL по данным электронных документов.
//
// Параметры:
//  МассивЭД - массив ссылок на электронные документы, которые необходимо обработать.
//
// Возвращаемое значение:
//  Массив структур - структура содержит имя файла данных и имя файла табличного документа MXL
//
Функция ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереченьВременныхФайлов = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭД, Новый УникальныйИдентификатор, Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			ДанныеЭД.Записать(ИмяФайла);
			
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
				
				ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
				ПапкаДляРаспаковки =  ЭлектронныеДокументыСлужебный.РабочийКаталог("ОбработкаЭД", ЭД.УникальныйИдентификатор());
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				
				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ФайлДанных = Новый Файл(ИмяФайла);
				
				ФайлыАрхива = Новый Массив;
				ФайлыАрхива.Добавить(ФайлДанных);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
			Для Каждого РаспакованныйФайл Из ФайлыАрхива Цикл
				ТабличныйДокумент = СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя, ЭД.НаправлениеЭД,
					ЭД.УникальныйИдентификатор());
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					АдресФайлаДанных = ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭД.УникальныйИдентификатор());
					НазваниеЭД = ЭлектронныеДокументыСлужебный.ПолучитьПредставлениеЭД(ЭД.Ссылка);
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				
				СтруктураИменФайлов = Новый Структура("НазваниеЭД, АдресФайлаДанных", НазваниеЭД, АдресФайлаДанных);
				ПереченьВременныхФайлов.Добавить(СтруктураИменФайлов);
				Прервать; // должен быть только один файл данных
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПереченьВременныхФайлов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование извещений

// Только для внутреннего использования
Функция СформироватьЭДИзвещениеОПолучении(СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТипЭлементаВерсииЭД = СсылкаНаЭД.ТипЭлементаВерсииЭД;
	Если НЕ (ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для типа ЭД %1 не предусмотрено формирование Извещения о получении.'"), ТипЭлементаВерсииЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат "";
	КонецЕсли;
	
	АдресВоВременномХранилище = "";
	СтруктураЭД = СформироватьФайлИзвещенияПоЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(СтруктураЭД) ИЛИ НЕ СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		Возврат "";
	КонецЕсли;
	ДатаСозданияФайла = ТекущаяДатаСеанса();
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаЭД.ВладелецФайла, 
	                                                   СтруктураЭД.ИдФайла,
													   "xml",
													   ДатаСозданияФайла,
													   УниверсальноеВремя(ТекущаяДата()),
													   АдресВоВременномХранилище,
													   Неопределено,
													   ,
													   "ЭДПрисоединенныеФайлы");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Утвержден);
	СтруктураПараметров.Вставить("Получатель", СтруктураЭД.ИдПолучателя);
	СтруктураПараметров.Вставить("Отправитель", СтруктураЭД.ИдОтправителя);
	СтруктураПараметров.Вставить("НомерЭД", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Получатель);
	СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);
	СтруктураПараметров.Вставить("УникальныйИД", СсылкаНаЭД.УникальныйИД);
	СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД));
	СтруктураПараметров.Вставить("ДатаДокументаОтправителя", ДатаСозданияФайла);
	СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
	
	ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
	
	Если СтруктураПараметров.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
		СтруктураПараметров.Вставить("ВидЭД", СсылкаНаЭД.ВидЭД);
		СтруктураПараметров.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);
		СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Получатель);
		СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);
		СтруктураПараметров.Вставить("СтатусЭД", СсылкаНаЭД.СтатусЭД);
		
		ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(СсылкаНаЭД, СтруктураПараметров);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр уведомлений об уточнении

// Только для внутреннего использования
Функция СформироватьЭДУведомлениеОбУточнении(СсылкаНаЭД, ТекстУточнения) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	СтруктураЭД = СформироватьФайлУведомлениеОбУточненииПоЭД(СсылкаНаЭД, ТекстУточнения);
	Если ЗначениеЗаполнено(СтруктураЭД) И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаЭД.ВладелецФайла, СтруктураЭД.ИдФайла, "xml",
			ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВоВременномХранилище, Неопределено, , "ЭДПрисоединенныеФайлы",
			СтруктураЭД.НомерЭД);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
		СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
		СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Утвержден);
		СтруктураПараметров.Вставить("Получатель", СтруктураЭД.ИдПолучателя);
		СтруктураПараметров.Вставить("Отправитель", СтруктураЭД.ИдОтправителя);
		СтруктураПараметров.Вставить("НомерЭД", СтруктураЭД.НомерЭД);
		СтруктураПараметров.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);
		СтруктураПараметров.Вставить("Организация", СтруктураЭД.Отправитель);
		СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Получатель);
		СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);
		СтруктураПараметров.Вставить("УникальныйИД", СсылкаНаЭД.УникальныйИД);
		СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД",
			Перечисления.ТипыЭлементовВерсииЭД[?(СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура, "УУЭСФ", "УОУ")]);
		СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
		
		ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
		
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Получает значение реквизита шапки электронного документа по его имени из строки разобранных данных.
//
// Параметры:
//  СтрокаДерева - строка дерева значений, параметры разбора электронного документа,
//  ИмяРеквизита - строка, имя реквизита, значение которого надо получить,
//  ДеревоРазбора - дерево значений - полная структура с данными разбора электронного документа.
//
// Возвращаемое значение:
//  Значение реквизита шапки электронного документа.
//
Функция ПолучитьРеквизитШапкиЭД(СтрокаДерева, ИмяРеквизита, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит");
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // вернем ссылку
			Результат = НайденнаяСтрока.СсылкаНаОбъект;
		Иначе
			Результат = НайденнаяСтрока.ЗначениеРеквизита;
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
			// тогда нашли всего лишь индекс строки.
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД из документов БД

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьКорректировочныйСчетФактуруCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	ПространствоИменСхемы = "KORSFAKT";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС  = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока46 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр",ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураПараметров.ИдПок), Истина,
			ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг,Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		
		СвКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "НомерКСчФ", СтруктураПараметров.НомерКСчФ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "ДатаКСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаКСчФ), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "НомерСчФ", СтруктураПараметров.НомерСчФ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "ДатаСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаСчФ), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "КодОКВ", СтруктураПараметров.КодОКВ, Истина, ТекстОшибки);
		
		НомИспрКСчФ = Неопределено;
		ДатаИспрКСчФ = Неопределено;
		Если СтруктураПараметров.Свойство("НомИспрКСчФ", НомИспрКСчФ)
			И СтруктураПараметров.Свойство("ДатаИспрКСчФ", ДатаИспрКСчФ)
			И ЗначениеЗаполнено(НомИспрКСчФ)
			И ЗначениеЗаполнено(ДатаИспрКСчФ) Тогда
			
			ИспрКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрКСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИспрКСчФ, "НомИспрКСчФ", НомИспрКСчФ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрКСчФ, "ДатаИспрКСчФ", ДатаДД_ММ_ГГГГ(ДатаИспрКСчФ), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвКСчФ, "ИспрКСчФ", ИспрКСчФ, , ТекстОшибки);
		КонецЕсли;
		
		НомИспрСчФ = Неопределено;
		ДатаИспрСчФ = Неопределено;
		Если СтруктураПараметров.Свойство("НомИспрСчФ", НомИспрСчФ)
			И СтруктураПараметров.Свойство("ДатаИспрСчФ", ДатаИспрСчФ)
			И ЗначениеЗаполнено(НомИспрСчФ)
			И ЗначениеЗаполнено(ДатаИспрСчФ) Тогда
			
			ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрСчФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", НомИспрСчФ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрСчФ,"ДатаИспрСчФ", ДатаДД_ММ_ГГГГ(ДатаИспрСчФ), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвКСчФ, "ИспрСчФ", ИспрСчФ, , ТекстОшибки);
		КонецЕсли;
		
		СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип",  ПространствоИменСхемы);
		СформироватьДанныеПоКонтрагентуЭСФ(СвПрод, СтруктураПараметров, "Организация", ТекстОшибки, ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "СвПрод", СвПрод, Истина, ТекстОшибки);
		
		СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		СформироватьДанныеПоКонтрагентуЭСФ(СвПокуп, СтруктураПараметров, "Контрагент", ТекстОшибки, ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвКСчФ, "СвПокуп", СвПокуп, Истина, ТекстОшибки);
		
		ИдФайлИнфПол = Неопределено;
		ТекстИнф = Неопределено;
		Если СтруктураПараметров.Свойство("ТекстИнф", ТекстИнф)
			ИЛИ СтруктураПараметров.Свойство("ИдФайлИнфПол", ИдФайлИнфПол) Тогда
			
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(ТекстИнф) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", ТекстИнф, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ИдФайлИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", ИдФайлИнфПол, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвКСчФ, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвКСчФ", СвКСчФ, Истина, ТекстОшибки);
		
		ТаблКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ", ПространствоИменСхемы);
		
		Для Каждого Товар из СтруктураПараметров.ТаблицаТоваров Цикл
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СведТов, "НомСтр", Товар.НомСтр, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаимТов, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_ТовДо", Товар.ОКЕИ_ТовДо, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_ТовПосле", Товар.ОКЕИ_ТовПосле, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "КолТовДо", Товар.КолТовДо, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "КолТовПосле",Товар.КолТовПосле, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТовДо", Окр(Товар.ЦенаТовДо, 2), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТовПосле",Окр(Товар.ЦенаТовПосле, 2), , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", Товар.ИнфПолСтр, , ТекстОшибки);
			
			Если ЗначениеЗаполнено(Товар.СтТовБезНДСДоИзм) И ЗначениеЗаполнено(Товар.СтТовБезНДСПослеИзм) Тогда
				СтоимТип = ПолучитьОбъектТипаCML("СтоимТип", ПространствоИменСхемы);
				
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", Товар.СтТовБезНДСДоИзм, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм", Товар.СтТовБезНДСПослеИзм, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУвел", Товар.СтТовБезНДСУвел, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", Товар.СтТовБезНДСУм, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СведТов, "СтТовБезНДС", СтоимТип, , ТекстОшибки);
			КонецЕсли;
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Товар.АкцизДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "АкцизДо", СумАкцизТип, Истина, ТекстОшибки);
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Товар.АкцизПосле, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "АкцизПосле", СумАкцизТип, Истина, ТекстОшибки);
			
			РазнСумНалТип = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИменСхемы);
			АкцизДо = ?(Товар.АкцизДо = "без акциза", 0, Товар.АкцизДо);
			АкцизПосле = ?(Товар.АкцизПосле = "без акциза", 0, Товар.АкцизПосле);
			Если АкцизДо < АкцизПосле Тогда
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", АкцизПосле - АкцизДо, , ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУм", АкцизДо - АкцизПосле, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "АкцизРазн", РазнСумНалТип, Истина, ТекстОшибки);
			
			НалСтДо = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НалСтДо", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(НалСтДо, "НалСтВел", Товар.НалСтВелДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НалСтДо, "НалСтТип", Товар.НалСтТипДо, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НалСтДо", НалСтДо, Истина, ТекстОшибки);
			
			НалСтПосле = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НалСтПосле", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(НалСтПосле, "НалСтВел", Товар.НалСтВелПосле, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НалСтПосле, "НалСтТип", Товар.НалСтТипПосле, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НалСтПосле", НалСтПосле, Истина, ТекстОшибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если Товар.НалСтВелДо = "без НДС" Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "без НДС", Истина, ТекстОшибки);
			ИначеЕсли Товар.СумНалДо = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Товар.СумНалДо, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СведТов, "СумНалДо", СумНДСТип, Истина, ТекстОшибки);
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если Товар.НалСтВелПосле = "без НДС" Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "без НДС", Истина, ТекстОшибки);
			ИначеЕсли Товар.СумНалПосле = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Товар.СумНалПосле, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Товар.СумНалПосле, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "СумНалПосле", СумНДСТип, Истина, ТекстОшибки);
			
			РазнСумНалТип = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(Товар.СумНалУм) Тогда
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", Товар.СумНалУм, , ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУм", Товар.СумНалУвел, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СумНалРазн", РазнСумНалТип, Истина, ТекстОшибки);
			
			СтоимТип = ПолучитьОбъектТипаCML("СтоимТип",ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", Товар.СтТовУчНалДоИзм, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм",Товар.СтТовУчНалПослеИзм, Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(Товар.СтТовУчНалУвел) Тогда
				ЗаполнитьСвойствоXDTO(СтоимТип,"СтоимУвел", Товар.СтТовУчНалУвел, , ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", Товар.СтТовУчНалУм, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СтТовУчНал", СтоимТип, , ТекстОшибки);
			
			ТаблКСчФ.СведТов.Добавить(СведТов);
		КонецЦикла;
		
		Если СтруктураПараметров.ВсегоСтТовУчНалУвел > 0 И СтруктураПараметров.ВсегоСтТовБезНДСУвел > 0 Тогда
			ВсегоУвел = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУвел", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовБезНДСВсего", СтруктураПараметров.ВсегоСтТовБезНДСУвел, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовУчНалВсего", СтруктураПараметров.ВсегоСтТовУчНалУвел, Истина, ТекстОшибки);
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если СтруктураПараметров.ВсегоСумНалУвел = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(СтруктураПараметров.ВсегоСумНалУвел, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина,
					ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ВсегоУвел, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТаблКСчФ, "ВсегоУвел", ВсегоУвел, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.ВсегоСтТовУчНалУм > 0 И СтруктураПараметров.ВсегоСтТовБезНДСУм > 0 Тогда
			ВсегоУм = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУм", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовБезНДСВсего", СтруктураПараметров.ВсегоСтТовБезНДСУм, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовУчНалВсего", СтруктураПараметров.ВсегоСтТовУчНалУм, Истина, ТекстОшибки);
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если СтруктураПараметров.ВсегоСумНалУм = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);
			Иначе	
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(СтруктураПараметров.ВсегоСумНалУм,"ЧДЦ=2; ЧРД=.; ЧГ="), Истина,
					ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ВсегоУм, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТаблКСчФ, "ВсегоУм", ВсегоУм, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "ТаблКСчФ", ТаблКСчФ, Истина, ТекстОшибки);
		
		ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(СтруктураПараметров.Организация);
		ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураПараметров.Организация);
		
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если ЭтоФизЛицо Тогда
			ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			ЗаполнитьФИОЭСФ(ФИОТип, ДанныеЮрФизЛица.ПолноеНаименование, ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИОТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			
			СвГосРегИП = ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(СтруктураПараметров.Организация);
			
			ЗаполнитьСвойствоXDTO(ИП,"СвГосРегИП",СвГосРегИП,Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Подписант,"ИП",ИП,Истина, ТекстОшибки);
		Иначе
			ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			ЗаполнитьФИОЭСФ(ФИОТип, СтруктураПараметров.ФИОРуководителя, ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИОТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ",ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		
		ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьСчетФактуруCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	ПространствоИменСхемы = "SFAKT";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   СтруктураПараметров.ИдФайл,  Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок),  Истина, ТекстОшибки);
		
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		
		СвСчФакт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "НомерСчФ", СтруктураПараметров.НомерСчФ, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "ДатаСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаСчФ),Истина,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "КодОКВ", СтруктураПараметров.КодОКВ, Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.НомИспрСчФ) И ЗначениеЗаполнено(СтруктураПараметров.ДатаИспрСчФ) Тогда
			ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИспрСчФ", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", СтруктураПараметров.НомИспрСчФ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаИспрСчФ), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвСчФакт,"ИспрСчФ", ИспрСчФ,,ТекстОшибки);
		КонецЕсли;
		
		СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		СформироватьДанныеПоКонтрагентуЭСФ(СвПрод, СтруктураПараметров, "Организация", ТекстОшибки, ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПрод", СвПрод, Истина, ТекстОшибки);
		
		Грузоотправитель = Неопределено;
		Если НЕ СтруктураПараметров.ТолькоУслуги Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ГрузОт", ПространствоИменСхемы);
			Если СтруктураПараметров.Свойство("Грузоотправитель", Грузоотправитель) Тогда
				Если Грузоотправитель = СтруктураПараметров.Организация Тогда
					ЗаполнитьСвойствоXDTO(ГрузОт, "ОнЖе", "он же", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
				ИначеЕсли ЗначениеЗаполнено(Грузоотправитель) Тогда
					СвГрузОтпрПол = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);
					СформироватьДанныеПоГрузоотправителюЭСФ(СвГрузОтпрПол, СтруктураПараметров, "Грузоотправитель", ТекстОшибки, 
						ПространствоИменСхемы);
					ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", СвГрузОтпрПол, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузОт", ГрузОт, Истина, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Грузополучатель = Неопределено;
		Если НЕ СтруктураПараметров.ТолькоУслуги И СтруктураПараметров.Свойство("Грузополучатель", Грузополучатель) 
				И ЗначениеЗаполнено(Грузополучатель) Тогда
			СвГрузПолуч = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);
			СформироватьДанныеПоГрузоотправителюЭСФ(СвГрузПолуч, СтруктураПараметров, "Грузополучатель", ТекстОшибки, ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузПолуч", СвГрузПолуч, Истина, ТекстОшибки);
		КонецЕсли;
		
		ПлатежныеДокументы = Неопределено;
		Если СтруктураПараметров.Свойство("СвПРД", ПлатежныеДокументы) И ПлатежныеДокументы.Количество() > 0 Тогда
			Для Каждого СтрокаПлатежки из ПлатежныеДокументы Цикл
				СвПРД = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.СвПРД", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(СвПРД, "НомерПРД", СтрокаПлатежки.НомерПРД, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвПРД, "ДатаПРД", ДатаДД_ММ_ГГГГ(СтрокаПлатежки.ДатаПРД), Истина, ТекстОшибки);
				СвСчФакт.СвПРД.Добавить(СвПРД);
			КонецЦикла
		КонецЕсли;
		
		СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);
		СформироватьДанныеПоКонтрагентуЭСФ(СвПокуп, СтруктураПараметров, "Контрагент", ТекстОшибки,  ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПокуп", СвПокуп, Истина, ТекстОшибки);
		
		ИдФайлДопСв = неопределено;
		ТекстДопСв  = Неопределено;
		Если СтруктураПараметров.Свойство("ТекстДопСв", ТекстДопСв) И ЗначениеЗаполнено(ТекстДопСв)
			ИЛИ СтруктураПараметров.Свойство("ИдФайлДопСв", ИдФайлДопСв) И ЗначениеЗаполнено(ИдФайлДопСв) Тогда
			
			ДопСв = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(ТекстДопСв) Тогда
				ЗаполнитьСвойствоXDTO(ДопСв, "ТекстИнф", ТекстДопСв, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ИдФайлДопСв) Тогда
				ЗаполнитьСвойствоXDTO(ДопСв, "ИдФайлИнфПол", ИдФайлДопСв, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвСчФакт, "ИнфПол", ДопСв, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвСчФакт", СвСчФакт, Истина, ТекстОшибки);
		ТаблСчФакт = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт", ПространствоИменСхемы);
		
		Для Каждого Товар из СтруктураПараметров.ТаблицаТоваров Цикл
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомСтр", Товар.НомСтр, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаимТов, Истина, ТекстОшибки);
			
			Если (НЕ СтруктураПараметров.ТаблицаТоваров.Колонки.Найти("ОКЕИ_Тов") = Неопределено) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.ОКЕИ_Тов, , ТекстОшибки);
			КонецЕсли;
			Если (НЕ СтруктураПараметров.ТаблицаТоваров.Колонки.Найти("КолТов") = Неопределено) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "КолТов", Товар.КолТов, , ТекстОшибки);
			КонецЕсли;
			Если (НЕ СтруктураПараметров.ТаблицаТоваров.Колонки.Найти("ЦенаТов") = Неопределено) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ЦенаТов", Товар.ЦенаТов, , ТекстОшибки);
			КонецЕсли;
			Если (НЕ СтруктураПараметров.ТаблицаТоваров.Колонки.Найти("СтТовБезНДС") = Неопределено) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СтТовБезНДС", Товар.СтТовБезНДС, , ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СведТов, "СтТовУчНал", Товар.СтТовУчНал, Истина, ТекстОшибки);
			Если (НЕ СтруктураПараметров.ТаблицаТоваров.Колонки.Найти("КодПроисх") = Неопределено)
				И ЗначениеЗаполнено(Товар.КодПроисх) Тогда
				
				СведТов.КодПроисх.Добавить(Товар.КодПроисх);
			КонецЕсли;
			Если (НЕ СтруктураПараметров.ТаблицаТоваров.Колонки.Найти("ТекстДопСв") = Неопределено) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", Товар.ТекстДопСв, , ТекстОшибки);
			КонецЕсли;
			
			Акциз = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.Акциз", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Акциз, "СумАкциз", Товар.СумАкциз, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "Акциз", Акциз, Истина, ТекстОшибки);
			
			НалСт = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.НалСт", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(НалСт, "НалСтВел", Товар.НалСтВел, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(НалСт, "НалСтТип", Товар.НалСтТип, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НалСт", НалСт, Истина, ТекстОшибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);
			Если Товар.НалСтВел = "без НДС" Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "без НДС", Истина, ТекстОшибки);
			ИначеЕсли Товар.СумНДС = 0 Тогда
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС","-", Истина, ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Формат(Товар.СумНДС, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведТов, "СумНал", СумНДСТип, Истина, ТекстОшибки);
			
			Если НЕ СтруктураПараметров.ТаблицаТоваров.Колонки.Найти("НомерТД") = Неопределено Тогда
				Если ТипЗнч(Товар.НомерТД) = Тип("Массив") И Товар.НомерТД.Количество() > 0 Тогда
					Для Каждого ТД ИЗ Товар.НомерТД Цикл
						СведТов.НомерТД.Добавить(ТД);
					КонецЦикла;
				ИначеЕсли ТипЗнч(Товар.НомерТД) = Тип("Строка") И ЗначениеЗаполнено(Товар.НомерТД) Тогда
					СведТов.НомерТД.Добавить(Товар.НомерТД);
				КонецЕсли;
			КонецЕсли;
			
			ТаблСчФакт.СведТов.Добавить(СведТов);
		КонецЦикла;
		
		ВсегоОпл = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл", ПространствоИменСхемы);
		СтТовБезНДС = Неопределено;
		Если СтруктураПараметров.Свойство("СтТовБезНДСВсего", СтТовБезНДС) Тогда
			ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовБезНДСВсего", СтТовБезНДС, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовУчНалВсего", СтруктураПараметров.СтТовУчНалВсего, Истина, ТекстОшибки);
		
		СумНалВсего = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего", ПространствоИменСхемы);
		
		Если СтруктураПараметров.СумНДС = 0 Тогда
			ЗаполнитьСвойствоXDTO(СумНалВсего,"СумНДС", "без НДС", Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(СумНалВсего,"СумНДС", Формат(СтруктураПараметров.СумНДС, "ЧДЦ=2; ЧРД=.; ЧГ="), Истина,
				ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ВсегоОпл, "СумНалВсего", СумНалВсего, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ТаблСчФакт, "ВсегоОпл", ВсегоОпл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ТаблСчФакт", ТаблСчФакт, Истина, ТекстОшибки);
		
		ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(СтруктураПараметров.Организация);
		ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураПараметров.Организация);
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		Если ЭтоФизЛицо Тогда
			ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЗаполнитьФИОЭСФ(ФИО, ДанныеЮрФизЛица.ПолноеНаименование, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			СвГосРегИП = ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(СтруктураПараметров.Организация);
			ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СвГосРегИП, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		Иначе
			ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЗаполнитьФИОЭСФ(ФИО, СтруктураПараметров.ФИОРуководителя, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			
			Должн = Неопределено;
			Если СтруктураПараметров.Свойство("Должн", Должн) Тогда
				ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", Должн, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Подписант,"ЮЛ", ЮЛ, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьТорг12CML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	ПространствоИменСхемы = "OTORG12";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
			
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		
		СвТНО = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвТНО, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ОКУДПервДок", СтруктураПараметров.ОКУДПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", СтруктураПараметров.НомФорм, Истина, ТекстОшибки);
		
		Поставщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Поставщик, СтруктураПараметров.Поставщик, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик", Поставщик, , ТекстОшибки);
		КонецЕсли;
		
		Плательщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Плательщик, СтруктураПараметров.Плательщик, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик", Плательщик, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Грузоотправитель, СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, 
				ТекстОшибки, ПространствоИменСхемы) Тогда
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ГрузОт", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", Грузоотправитель, , ТекстОшибки);
			Если ЗначениеЗаполнено(СтруктураПараметров.СведенияОГрузоотправителе.КодОКДП) Тогда
				ЗаполнитьСвойствоXDTO(ГрузОт, "ОКДП", СтруктураПараметров.СведенияОГрузоотправителе.КодОКДП, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение) Тогда
				ЗаполнитьСвойствоXDTO(ГрузОт, "СтруктПодр", СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение,,
					ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузОт", ГрузОт, , ТекстОшибки);
		КонецЕсли;
		
		Грузополучатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Грузополучатель, СтруктураПараметров.Грузополучатель, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч", Грузополучатель, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНаименование) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНомер)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДата) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДопСведения) Тогда
			Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Основание", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНаименование) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", СтруктураПараметров.ДокОснованиеНаименование, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНомер) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "НомОсн", СтруктураПараметров.ДокОснованиеНомер, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДата) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "ДатаОсн", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДокОснованиеДата), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДопСведения) Тогда
				ЗаполнитьСвойствоXDTO(Основание, "ДопСвОсн", СтруктураПараметров.ДокОснованиеДопСведения, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "Основание", Основание, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяНомер)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяДата) Тогда
			ТранНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Основание", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяНомер) Тогда
				ЗаполнитьСвойствоXDTO(ТранНакл, "НомТранНакл", СтруктураПараметров.ТранспортнаяНакладнаяНомер, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяДата) Тогда
				ЗаполнитьСвойствоXDTO(ТранНакл, "ДатаТранНакл", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ТранспортнаяНакладнаяДата), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ТранНакл", ТранНакл, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.КодВидаОперации) Тогда
			ЗаполнитьСвойствоXDTO(СвТНО, "ВидОперации", СтруктураПараметров.КодВидаОперации, , ТекстОшибки);
		КонецЕсли;
		
		ТН = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ТН, "НомТН", СтруктураПараметров.НомерТоварнойНакладной, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаТоварнойНакладной), Истина, ТекстОшибки);
		
		Таблица = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);
		
		ТЗТовары = СтруктураПараметров.ТаблицаТоваров;
		
		Для Каждого Товар Из ТЗТовары Цикл
			СведТов = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);
			
			ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.НомерСтроки, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", Строка(Товар.ЕдиницаИзмерения), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СведТов, "Нетто", ?(ЗначениеЗаполнено(Товар.МассаНетто), Товар.МассаНетто, 0), Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(Товар.НаименованиеНоменклатуры) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаименованиеНоменклатуры, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.БазоваяЕдиницаКод) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.БазоваяЕдиницаКод, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.НаименованиеХарактеристики) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ХарактерТов", Товар.НаименованиеХарактеристики, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Сорт) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СортТов", Товар.Сорт, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Артикул) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "АртикулТов", Товар.Артикул, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КодТовара) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "КодТов", Товар.КодТовара, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.ВидУпаковки) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "ВидУпак", Товар.ВидУпаковки, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КоличествоВОдномМесте) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "Место", Товар.КоличествоВОдномМесте, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КоличествоМест) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "КолМест", Товар.КоличествоМест, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.МассаБрутто) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "Брутто", Товар.МассаБрутто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Цена) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "Цена", Товар.Цена, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СуммаБезНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДС", Товар.СуммаБезНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СтавкаНДС) Тогда
				СтавкаНДС = Число(СтрЗаменить(Товар.СтавкаНДС, "%", ""));
				ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", СтавкаНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.СуммаНДС) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", Товар.СуммаНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.Сумма) Тогда
				ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДС", Товар.Сумма, , ТекстОшибки);
			КонецЕсли;
			
			Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
				Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Товары", Строка(Товар.НомерСтроки)) Тогда
					СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
					ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Таблица.СвТов.Добавить(СведТов);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.КоличествоМест)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаБрутто)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаНетто)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаНДС)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС) Тогда
			ВсегоНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.КоличествоМест) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "КолМестВс", СтруктураПараметров.ВсегоПоНакладной.КоличествоМест, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаБрутто) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "БруттоВс", СтруктураПараметров.ВсегоПоНакладной.МассаБрутто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаНетто) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "НеттоВс", СтруктураПараметров.ВсегоПоНакладной.МассаНетто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаНДС) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаНДС, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС) Тогда
				ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);
		КонецЕсли;
		
		СтОбщСвед = СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной;
		Если ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписей)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.ВсегоМест)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.ВсегоМестПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНеттоПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБруттоПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБрутто) Тогда
			ТНОбщ = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.ТНОбщ", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписей) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗап", СтОбщСвед.КоличествоПорядковыхНомеровЗаписей, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗапПр", СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.ВсегоМест) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМест", СтОбщСвед.ВсегоМест, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.ВсегоМестПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМестПр", СтОбщСвед.ВсегоМестПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНетто) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "Нетто", СтОбщСвед.МассаГрузаНетто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНеттоПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "НеттоПр", СтОбщСвед.МассаГрузаНеттоПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБрутто) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "Брутто", СтОбщСвед.МассаГрузаБрутто, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБруттоПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ТНОбщ, "БруттоПр", СтОбщСвед.МассаГрузаБруттоПрописью, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ТН, "ТНОбщ", ТНОбщ, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);
		
		СтСведОтпуск = СтруктураПараметров.СведенияПоОтпускуГруза;
		Если ЗначениеЗаполнено(СтСведОтпуск.ОтпущеноНаСумму) Тогда
			ОтпускГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпуск", СтСведОтпуск.ОтпущеноНаСумму, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтСведОтпуск.ОтпущеноНаСуммуПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпускПр", СтСведОтпуск.ОтпущеноНаСуммуПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтСведОтпуск.ПриложениеКоличествоЛистов) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрил", СтСведОтпуск.ПриложениеКоличествоЛистов, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтСведОтпуск.ПриложениеКоличествоЛистовПрописью) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрилПр", СтСведОтпуск.ПриложениеКоличествоЛистовПрописью, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтСведОтпуск.ДатаОтпуска) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ДатаОтпуск", ДатаДД_ММ_ГГГГ(СтСведОтпуск.ДатаОтпуска), , ТекстОшибки);
			КонецЕсли;
			ОтпускРазреш = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			Если ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазреш, СтСведОтпуск.ОтпускРазрешил,
					ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ОтпускРазреш", ОтпускРазреш, , ТекстОшибки);
			КонецЕсли;
			ОтпускРазреш = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			Если ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазреш, СтСведОтпуск.Бухгалтер,
					ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "Бухгалтер", ОтпускРазреш, , ТекстОшибки);
			КонецЕсли;
			ОтпускРазреш = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
			Если ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазреш, СтСведОтпуск.ОтпускПроизвел,
					ТекстОшибки, ПространствоИменСхемы) Тогда
				ЗаполнитьСвойствоXDTO(ОтпускГруз, "ОтпускПроизв", ОтпускРазреш, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ОтпускГруз", ОтпускГруз, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНО, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
		СтПодписант = СтруктураПараметров.Подписант;
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		Если ТипЗнч(СтПодписант.ЭтоФизЛицо) = Тип("Булево") И СтПодписант.ЭтоФизЛицо Тогда
			ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтПодписант.ИНН, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.СвидетельствоОРегистрацииИП) Тогда
				ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтПодписант.СвидетельствоОРегистрацииИП, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		Иначе
			ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", СтПодписант.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", СтПодписант.Должность, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Подписант,"ЮЛ", ЮЛ, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьТорг12ПокупательCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = "PTORG12";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр),
			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок),
			Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		
		ИдТНО = ПолучитьОбъектТипаCML("Файл.Документ.ИдТНО", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ИдФайлТН", СтруктураПараметров.ИдФайлТН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ДатаДокТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДокТН), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдТНО, "ВремДокТН", СтруктураПараметров.ВремДокТН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ИдТНО", ИдТНО, Истина, ТекстОшибки);
		
		СвТНП = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвТНП, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "ОКУДПервДок", СтруктураПараметров.ОКУДПервДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "НомФорм", СтруктураПараметров.НомФорм, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "НомТН", СтруктураПараметров.НомерТоварнойНакладной, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвТНП, "ДатаТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаТоварнойНакладной), Истина,
			ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ДатаПолученияГруза) Тогда
			ПолучилГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ПолучилГруз, "ДатаПолуч", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаПолученияГруза), Истина,
				ТекстОшибки);
			
			Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.НомерДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДатаДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице) Тогда
				Доверенность = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.Доверенность", ПространствоИменСхемы);
				
				Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.НомерДоверенности) Тогда
					ЗаполнитьСвойствоXDTO(Доверенность, "НомДоверен",
						СтруктураПараметров.Доверенность.НомерДоверенности, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДатаДоверенности) Тогда
					ЗаполнитьСвойствоXDTO(Доверенность, "ДатаДоверен",
						ДатаДД_ММ_ГГГГ(СтруктураПараметров.Доверенность.ДатаДоверенности), , ТекстОшибки);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия) Тогда
					ВыданаКем = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем", ПространствоИменСхемы);
					
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКем, "НаимОргКем",
							СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКем, "ДопСведКем",
							СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКем, "ДолжнКем",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия) Тогда
						ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ФИОТип, "Имя",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Имя, Истина, ТекстОшибки);
						Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Отчество) Тогда
							ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество",
								СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Отчество, , ТекстОшибки);
						КонецЕсли;
						ЗаполнитьСвойствоXDTO(ВыданаКем, "ФИО", ФИОТип, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Доверенность, "ВыданаКем", ВыданаКем, , ТекстОшибки);
				КонецЕсли;
			
				Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия) Тогда
					ВыданаКому = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому", ПространствоИменСхемы);
					
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКому, "ДопСведКому",
							СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКому, "Должн", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия) Тогда
						ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Имя, Истина, ТекстОшибки);
						Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Отчество) Тогда
							ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Отчество, , ТекстОшибки);
						КонецЕсли;
						ЗаполнитьСвойствоXDTO(ВыданаКому, "ФИО", ФИОТип, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Доверенность, "ВыданаКому", ВыданаКому, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ПолучилГруз, "Доверенность", Доверенность, , ТекстОшибки);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(СтруктураПараметров.ГрузПринял.Должность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ГрузПринял.Фамилия) Тогда
				ГрузПринял = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
				Если ЗаполнитьДолжностноеЛицоФНСCML(ГрузПринял, СтруктураПараметров.ГрузПринял, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(ПолучилГруз, "ГрузПринял", ГрузПринял, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ГрузПолучил.Должность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ГрузПолучил.Фамилия) Тогда
				ГрузПолучил = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
				Если ЗаполнитьДолжностноеЛицоФНСCML(ГрузПолучил, СтруктураПараметров.ГрузПолучил, ТекстОшибки, ПространствоИменСхемы) Тогда
					ЗаполнитьСвойствоXDTO(ПолучилГруз, "ГрузПолучил", ГрузПолучил, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(СвТНП, "ПолучилГруз", ПолучилГруз, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвТНП, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвТНП", СвТНП, Истина, ТекстОшибки);
		СтПодписант = СтруктураПараметров.Подписант;
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		Если ТипЗнч(СтПодписант.ЭтоФизЛицо) = Тип("Булево") И СтПодписант.ЭтоФизЛицо Тогда
			ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтПодписант.ИНН, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.СвидетельствоОРегистрацииИП) Тогда
				ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтПодписант.СвидетельствоОРегистрацииИП, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		Иначе
			ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", СтПодписант.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", СтПодписант.Должность, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Подписант,"ЮЛ", ЮЛ, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Торг-12.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьНакладнуюCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ТОРГ12",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер",СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОКУД", "0330212", Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") Тогда
			Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ",СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, СтруктураПараметров, СтруктураПараметров.ТипГрузоотправителя,
			ТекстОшибки, СтруктураПараметров.ВерсияСхемы, "Грузоотправитель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузоотправитель", Грузоотправитель, , ТекстОшибки);
		
		Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузополучатель, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы,"Грузополучатель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузополучатель", Грузополучатель, , ТекстОшибки);
		
		Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Организация, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Организация, , ТекстОшибки);
		
		Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Плательщик", Контрагент, , ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента") И СтруктураПараметров.Свойство("ДатаПоДаннымКлиента") Тогда
			
			Основание = ПолучитьОбъектТипаCML("ТОРГ12.Основание", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(Основание,"НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Основание,"ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Основание,"НаименованиеДокументаОснования", "Заказ поставщику", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Основание", Основание, , ТекстОшибки);
		КонецЕсли;
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоЗаписей", ТаблицаТоваров.Количество(), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоМест", ТаблицаТоваров.Количество(), , ТекстОшибки);
		Если СтруктураПараметров.ЦенаВключаетНДС Тогда
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", ТаблицаТоваров.Итог("Сумма") - ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", ТаблицаТоваров.Итог("Сумма"), , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаСУчетомНДС", ТаблицаТоваров.Итог("СуммаСНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);
		
		ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью", ЧислоПрописью(ТаблицаТоваров.Количество(), , ",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью", ЧислоПрописью(ТаблицаТоваров.Количество(), , ",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью",
			ЭлектронныеДокументыПереопределяемый.СуммаПрописью(ТаблицаТоваров.Итог("СуммаСНДС"), КодВалюты), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", ИтогиПрописью,, ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			ПП = 0;
			
			Товары= ПолучитьОбъектТипаCML("ТОРГ12.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				ПП = ПП + 1;
				
				Товар = ПолучитьОбъектТипаCML("ТОРГ12.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "НомерПП", ПП, , ТекстОшибки);
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, , ТекстОшибки);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе	
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;
				
				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(СуммаБезНДС/ТекТовар.Количество,2), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаБезНДС", СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаСУчетомНДС", ТекТовар.СуммаСНДС, , ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
					НалогПоСтроке = ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога","НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, Истина, ТекстОшибки);
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Налог",НалогПоСтроке, , ТекстОшибки);
				КонецЕсли;
				
				Если НЕ (ТаблицаТоваров.Колонки.Найти("НомерПоДаннымКлиента") = Неопределено
					ИЛИ ТаблицаТоваров.Колонки.Найти("ДатаПоДаннымКлиента") = Неопределено)
					И ЗначениеЗаполнено(ТекТовар.НомерПоДаннымКлиента) И ЗначениеЗаполнено(ТекТовар.ДатаПоДаннымКлиента) Тогда
					
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.НомерПоДаннымКлиента);
					
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "НомерПоДаннымКлиента", НовыйОбъект);
					ТипОбъектаДата = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
					
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.ДатаПоДаннымКлиента);
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "ДатаПоДаннымКлиента", НовыйОбъект);
				КонецЕсли;
				
				Если НЕ (ТаблицаТоваров.Колонки.Найти("СрокГодности") = Неопределено)
					И ЗначениеЗаполнено(ТекТовар.СрокГодности) Тогда
					
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.СрокГодности);
					Товар.Добавить (ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "СрокГодности", НовыйОбъект);
				КонецЕсли;
				Если (НЕ (ТаблицаТоваров.Колонки.Найти("НомерГТД") = Неопределено)) И ЗначениеЗаполнено(ТекТовар.НомерГТД) Тогда
					ТипОбъектаСтрока = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
					НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаСтрока, ТекТовар.НомерГТД);
					Товар.Добавить(ФормаXML.Элемент,"http://www.w3.org/2001/XMLSchema", "НомерГТД", НовыйОбъект);
				КонецЕсли;
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары",Товары, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		
		ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет на оплату.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьСчетНаОплатуCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("СчетНаОплату",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		РеквизитыПолучателя = ПолучитьОбъектТипаCML("СчетНаОплату.РеквизитыПолучателя", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "НомерСчета", СтруктураПараметров.РасчетныйСчет.НомерСчета, Истина, ТекстОшибки);
		
		// Банк
		Банк =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", СтруктураПараметров.РасчетныйСчет.КоррСчет, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "Наименование", СтруктураПараметров.РасчетныйСчет.Банк, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "БИК", СтруктураПараметров.РасчетныйСчет.БИК, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Банк", Банк, Истина, ТекстОшибки);
		
		// БанкКорреспондент
		Если СтруктураПараметров.Свойство("БанкКорреспондент") Тогда
			БанкКорреспондент =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, "СчетКорреспондентский", СтруктураПараметров.БанкКорреспондент.КоррСчет, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, "Наименование", СтруктураПараметров.БанкКорреспондент.Банк, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорреспондент, "БИК", СтруктураПараметров.БанкКорреспондент.БИК, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "БанкКорреспондент", БанкКорреспондент, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "РеквизитыПолучателя", РеквизитыПолучателя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "НазначениеПлатежа", СтруктураПараметров.НазначениеПлатежа, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОкончанияДействияСчета", СтруктураПараметров.СрокПлатежа, Истина, ТекстОшибки);
		
		Поставщик = ПолучитьОбъектТипаCML("СчетНаОплату.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Поставщик, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Поставщик, , ТекстОшибки);
		
		Покупатель = ПолучитьОбъектТипаCML("СчетНаОплату.Покупатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Покупатель, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Покупатель", Покупатель, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("СчетНаОплату.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаИтог", СтруктураПараметров.Сумма, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалогаИтог", СтруктураПараметров.СуммаНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);
		
		Руководитель = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Руководитель, "ПолноеНаименование", 
			ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(СтруктураПараметров.Руководитель), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Руководитель", Руководитель, Истина, ТекстОшибки);
		
		Бухгалтер = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Бухгалтер, "ПолноеНаименование",
			ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(СтруктураПараметров.Бухгалтер), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Бухгалтер", Бухгалтер, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента")
			И СтруктураПараметров.Свойство("ДатаПоДаннымКлиента")
			И ЗначениеЗаполнено(СтруктураПараметров.НомерПоДаннымКлиента)
			И ЗначениеЗаполнено(СтруктураПараметров.ДатаПоДаннымКлиента) Тогда
			
			ДокументОснования = ПолучитьОбъектТипаCML("ДокументОснования", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументОснования, "НаименованиеДокументаОснования", СтруктураПараметров.ДокументОснование, Истина, ТекстОшибки);
			ДокументЭО.ДокументОснования.Добавить(ДокументОснования);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЧастичнаяОплата") Тогда
			ЧастичнаяОплата = СтруктураПараметров.ЧастичнаяОплата;
		Иначе
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		
		Если СтруктураПараметров.Свойство("ТаблицаТоваров") Тогда
			ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
		КонецЕсли;
		
		Если НЕ ЧастичнаяОплата Тогда
			Если ТаблицаТоваров.Количество() > 0 Тогда
				
				Товары = ПолучитьОбъектТипаCML("СчетНаОплату.Товары", СтруктураПараметров.ВерсияСхемы);
				Для Каждого ТекТовар Из ТаблицаТоваров Цикл
					
					Товар = ПолучитьОбъектТипаCML("СчетНаОплату.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
					
					ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
					
					ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
					
					СтруктураЕдИзм = Новый Структура();
					СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
					СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
					СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
					СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
					
					Если СтруктураПараметров.ЦенаВключаетНДС Тогда
						СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
					Иначе
						СуммаБезНДС = ТекТовар.Сумма;
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена, , ТекстОшибки);
					
					Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаБезНалога", СуммаБезНДС, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаНалога", ТекТовар.СуммаНДС, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаОбщая", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
					
					Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
						НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
						
						ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки);
						
						СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
						ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки);
						Стоимость.Налог.Добавить(НалогПоСтроке);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, Истина, ТекстОшибки);
					
					Если НЕ ТаблицаТоваров.Колонки.Найти("СуммаСкидки") = Неопределено И ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
						СкидкиПоСтроке =  ПолучитьОбъектТипаCML("СчетНаОплату.Товары.Товар.Скидки", СтруктураПараметров.ВерсияСхемы);
						СкидкаПоСтроке =  ПолучитьОбъектТипаCML("Скидка", СтруктураПараметров.ВерсияСхемы);
						
						ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", "ОбщаяСкидка", Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма", ТекТовар.СуммаСкидки, Истина, ТекстОшибки);
						
						СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
						
						ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", ТекТовар.СуммаСкидки, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки, , ТекстОшибки);
						ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
					КонецЕсли;
					
					Товары.Товар.Добавить(Товар);
				КонецЦикла;
				
				ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") ТОгда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;
			Если ТаблицаЭтаповГрафикаОплаты.Количество() > 0 Тогда
				
				МассивКолонок = Новый Массив();
				Для каждого Колонка из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		ДокументЭО.Проверить();
		ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о списании комиссионного товара.
//
// Параметры:
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьОтчетОСписанииКомиссионногоТовараCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Комитент = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Комитент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комитент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комитент", Комитент, , ТекстОшибки);
		
		Комиссионер = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Комиссионер", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комиссионер, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комиссионер", Комиссионер, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(ТекТовар.СуммаСНДС / ТекТовар.Количество, 2), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "Сумма", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", СтруктураПараметров.Сумма, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтоговаяСтрока, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, ,  ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		
		ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Заказ поставщику.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьЗаказCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ЗаказКлиента",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Роль", СтруктураПараметров.Роль, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Исполнитель = ПолучитьОбъектТипаCML("ЗаказКлиента.Исполнитель", СтруктураПараметров.ВерсияСхемы);
		Если СтруктураПараметров.Роль = "Покупатель" Тогда
			СформироватьДанныеПоКонтрагентуCML(Исполнитель, СтруктураПараметров, "Контрагент", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		ИначеЕсли СтруктураПараметров.Роль = "Продавец" Тогда
			СформироватьДанныеПоКонтрагентуCML(Исполнитель, СтруктураПараметров, "Организация", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Исполнитель", Исполнитель, , ТекстОшибки);
		
		Заказчик = ПолучитьОбъектТипаCML("ЗаказКлиента.Заказчик", СтруктураПараметров.ВерсияСхемы);
		Если СтруктураПараметров.Роль = "Покупатель" Тогда
			СформироватьДанныеПоКонтрагентуCML(Заказчик, СтруктураПараметров, "Организация", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		ИначеЕсли СтруктураПараметров.Роль = "Продавец" Тогда
			СформироватьДанныеПоКонтрагентуCML(Заказчик, СтруктураПараметров, "Контрагент", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Заказчик", Заказчик, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена,, ТекстОшибки);
				
				Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Стоимость,"СуммаБезНалога", СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Стоимость,"СуммаНалога", ТекТовар.СуммаНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Стоимость,"СуммаОбщая", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
					НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки);
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки);
					Стоимость.Налог.Добавить(НалогПоСтроке);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, Истина, ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
					СкидкиПоСтроке = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары.Товар.Скидки", СтруктураПараметров.ВерсияСхемы);
					СкидкаПоСтроке = ПолучитьОбъектТипаCML("Скидка", СтруктураПараметров.ВерсияСхемы);
					
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", "ОбщаяСкидка", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма", ТекТовар.СуммаСкидки, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Процент", ТекТовар.ПроцентСкидки, Истина, ТекстОшибки);
					СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
					
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
				КонецЕсли;
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ЗаказКлиента.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаИтог", СтруктураПараметров.Сумма, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалогаИтог", СтруктураПараметров.СуммаНДС, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезСкидкиИтог", ТаблицаТоваров.Итог("Сумма")
			- ТаблицаТоваров.Итог("СуммаСкидки"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаСкидкиИтог", ТаблицаТоваров.Итог("СуммаСкидки"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента")
			И ЗначениеЗаполнено (СтруктураПараметров.НомерПоДаннымКлиента) Тогда
			
			ДокументОснование = ПолучитьОбъектТипаCML("ДокументОснования", СтруктураПараметров.ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НаименованиеДокументаОснования", "По данным клиента");
			ДокументЭО.ДокументОснования.Добавить(ДокументОснование);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымПоставщика")
			И ЗначениеЗаполнено (СтруктураПараметров.НомерПоДаннымПоставщика) Тогда
			
			ДокументОснование = ПолучитьОбъектТипаCML("ДокументОснования",СтруктураПараметров.ВерсияСхемы);
			
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымПоставщика);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымПоставщика);
			ЗаполнитьСвойствоXDTO(ДокументОснование, "НаименованиеДокументаОснования", "По данным поставщика");
			ДокументЭО.ДокументОснования.Добавить(ДокументОснование);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта", СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		// Этапы графика оплаты.
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") ТОгда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;
			Если ТаблицаЭтаповГрафикаОплаты.Количество()>0 Тогда
				МассивКолонок = Новый Массив();
				Для каждого Колонка из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Комментарий") И ЗначениеЗаполнено(СтруктураПараметров.Комментарий) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"Комментарий", СтруктураПараметров.Комментарий, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьОтчетОПродажахКомиссионногоТовараCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Комитент = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Комитент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комитент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комитент", Комитент, , ТекстОшибки);
		
		Комиссионер = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Комиссионер", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Комиссионер, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Комиссионер", Комиссионер, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество()>0 Тогда 
			Товары = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(ТекТовар.СуммаПродажи / ТекТовар.Количество, 2), Истина, ТекстОшибки);
				СуммыПоТовару = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары.Товар.СуммыПоТовару",
					СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаОбщая", ТекТовар.СуммаПродажи, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаНалога", ТекТовар.СуммаНДС, , ТекстОшибки);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(СуммыПоТовару, "СуммаБезНалога",СуммаБезНДС,,ТекстОшибки);
				Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
					
					НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки);
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки);
					СуммыПоТовару.Налог.Добавить(НалогПоСтроке);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", СуммыПоТовару, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЦенаКомитента", Окр(ТекТовар.СуммаСНДС/ТекТовар.Количество, 2), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаКомитента", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаВознаграждения", ТекТовар.СуммаВознаграждения, , ТекстОшибки);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.ИтогоПоДокументу",
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаКомитентаИтог", ТаблицаТоваров.Итог("СуммаСНДС"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаПродажиИтог", ТаблицаТоваров.Итог("СуммаПродажи"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаВознагражденияИтог", ТаблицаТоваров.Итог("СуммаВознаграждения"), , ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Процент") И ЗначениеЗаполнено (СтруктураПараметров.Процент) Тогда
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "Процент", СтруктураПараметров.Процент, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтоговаяСтрока, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Услуга") И ЗначениеЗаполнено (СтруктураПараметров.Услуга) Тогда
			Услуга = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Услуга", СтруктураПараметров.ВерсияСхемы);
			СформироватьДанныеПоТоваруCML(Услуга, СтруктураПараметров.Услуга, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
			Если СтруктураПараметров.Свойство("СуммаНДСВознаграждения")
				И СтруктураПараметров.Свойство("СтавкаНДСВознаграждения") Тогда
				
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога","НДС", Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", СтруктураПараметров.СуммаНДСВознаграждения, , ТекстОшибки);
				
				СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(СтруктураПараметров.СтавкаНДСВознаграждения);
				ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Услуга, "Налог", НалогПоСтроке, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Услуга", Услуга, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"ДатаНачала", СтруктураПараметров.НачалоПериода, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КонецПериода") Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО,"ДатаКонца", СтруктураПараметров.КонецПериода, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ФормаОплаты") И ЗначениеЗаполнено (СтруктураПараметров.ФормаОплаты) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО, "ФормаОплаты", СтруктураПараметров.ФормаОплаты,,ТекстОшибки);
		КонецЕсли;
		
		// Этапы графика оплаты.
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") Тогда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;
			Если ТаблицаЭтаповГрафикаОплаты.Количество() > 0 Тогда
				МассивКолонок = Новый Массив();
				Для каждого Колонка из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("СпособРасчета") И ЗначениеЗаполнено (СтруктураПараметров.СпособРасчета) Тогда
			Если СтруктураПараметров.СпособРасчета = "Процент от разности суммы продажи и суммы комитента" Тогда
				ЗаполнитьСвойствоXDTO(ДокументЭО, "СпособРасчета", "От разницы",,ТекстОшибки);
			ИначеЕсли СтруктураПараметров.СпособРасчета = "Процент от суммы продажи" Тогда
				ЗаполнитьСвойствоXDTO(ДокументЭО, "СпособРасчета", "От суммы",,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ДатаОплаты") И ЗначениеЗаполнено (СтруктураПараметров.ДатаОплаты) Тогда
			ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОплаты", СтруктураПараметров.ДатаОплаты, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Акта выполненных работ.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьАктCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("АктОПриемке",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") Тогда
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		Валюта =  ПолучитьОбъектТипаCML("Валюта", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		
		// Организация
		Контрагент =  ПолучитьОбъектТипаCML("АктОПриемке.Исполнитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Исполнитель", Контрагент, , ТекстОшибки);
		
		// Контрагент
		Контрагент =  ПолучитьОбъектТипаCML("АктОПриемке.Заказчик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Заказчик", Контрагент, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("АктОПриемке.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаОбщая", СтруктураПараметров.Сумма, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалога", СтруктураПараметров.СуммаНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНалога", СтруктураПараметров.Сумма - СтруктураПараметров.СуммаНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("АктОПриемке.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("АктОПриемке.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, , ТекстОшибки);
				Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаБезНалога", ТекТовар.Сумма - ТекТовар.СуммаНДС, , ТекстОшибки);
				Иначе	
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаБезНалога", ТекТовар.Сумма, , ТекстОшибки);
				КонецЕсли;	
				ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена,,ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения",СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
					НалогПоСтроке = ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, Истина, ТекстОшибки);
					
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки);
					Стоимость.Налог.Добавить(НалогПоСтроке);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСНДС) Тогда
					ЗаполнитьСвойствоXDTO(Стоимость,"СуммаОбщая", ТекТовар.СуммаСНДС, , ТекстОшибки);
				КонецЕсли;
				
				ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, , ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
					СкидкиПоСтроке = ПолучитьОбъектТипаCML("АктОПриемке.Товары.Товар.Скидки", СтруктураПараметров.ВерсияСхемы);
					
					СкидкаПоСтроке = ПолучитьОбъектТипаCML("Скидка",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", "ОбщаяСкидка", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма", ТекТовар.СуммаСкидки, Истина, ТекстОшибки);
					
					СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
				КонецЕсли;
				
				Если НЕ (ТаблицаТоваров.Колонки.Найти("Содержание") = Неопределено)
					И ЗначениеЗаполнено(ТекТовар.Содержание) ТОгда
					
					ЗаполнитьСвойствоXDTO(Товар,"Описание", ТекТовар.Содержание, , ТекстОшибки);
				КонецЕсли;
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ТекстДокумента = ПолучитьОбъектТипаCML("АктОПриемке.ТекстДокумента", СтруктураПараметров.ВерсияСхемы);
		
		Заголовок = СтруктураПараметров.ДополнительнаяИнформацияШапки + Символы.ПС +
		"Мы, нижеподписавшиеся,  представитель ИСПОЛНИТЕЛЯ, с одной стороны и  представитель ЗАКАЗЧИКА с другой стороны,
		|составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги):";
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "Заголовок", XMLСтрока(Заголовок), , ТекстОшибки);
		
		Описание =  СтруктураПараметров.ДополнительнаяИнформация;
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "ОписаниеВыполненныхРабот", Описание, , ТекстОшибки);
		
		Претензии = "Вышеперечисленные работы(услуги) выполнены полностью и в срок. Заказчик претензий по объему,
		|качеству и срокам работ (услуг) не имеет.";
		ЗаполнитьСвойствоXDTO(ТекстДокумента, "Претензии", Претензии, ,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ТекстДокумента", ТекстДокумента, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);
		
		ДокументЭО.Проверить();
		
		ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьАкт501CML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = "IAKTPRM";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(СтруктураПараметров.ВерсПрог) Тогда
			ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок), Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		
		СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвАктИ, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(СтруктураПараметров.НомерАкта) Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", СтруктураПараметров.НомерАкта, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаАкта), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СвАктИ, "Заголовок", СтруктураПараметров.Заголовок, Истина, ТекстОшибки);
		
		Исполнитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Исполнитель, СтруктураПараметров.Исполнитель, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "Исполнитель", Исполнитель, Истина, ТекстОшибки);
		КонецЕсли;
		
		Заказчик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		Если ЗаполнитьДанныеУчастникаФНСCML(Заказчик, СтруктураПараметров.Заказчик, ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "Заказчик", Заказчик, Истина, ТекстОшибки);
		КонецЕсли;
		
		ТЗОписанийУслуг = СтруктураПараметров.ТаблицаОписанийУслуг;
		Для Каждого ОписаниеУслуги Из ТЗОписанийУслуг Цикл
			
			ОписРабот = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ОписРабот", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(ОписаниеУслуги.НачалоРабот) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "НачРабот",    ДатаДД_ММ_ГГГГ(ОписаниеУслуги.НачалоРабот), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеУслуги.КонецРабот) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "КонРабот",    ДатаДД_ММ_ГГГГ(ОписаниеУслуги.КонецРабот), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеУслуги.СуммаБезНДСИтого) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "СумБезНДСИт", ОписаниеУслуги.СуммаБезНДСИтого, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеУслуги.СуммаНДСИтого) Тогда
				ЗаполнитьСвойствоXDTO(ОписРабот, "СумНДСИт",    ОписаниеУслуги.СуммаНДСИтого, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ОписРабот, "СумУчНДСИт",  ОписаниеУслуги.СуммаСНДСИтого, Истина, ТекстОшибки);
			
			ТЗУслуг = ОписаниеУслуги.Услуги;
			
			ЕстьСтруктураДопДанных = Ложь;
			Если ТЗУслуг.Колонки.Найти("ИД") <> Неопределено Тогда
				ЕстьСтруктураДопДанных = Истина;
			КонецЕсли;
			
			Для Каждого Услуга Из ТЗУслуг Цикл
				Работа = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ОписРабот.Работа", ПространствоИменСхемы);
				
				ЗаполнитьСвойствоXDTO(Работа, "Номер", Услуга.НомерСтроки, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Работа, "НаимЕдИзм", Строка(Услуга.ЕдиницаИзмерения), Истина, ТекстОшибки);
				
				Если ЗначениеЗаполнено(Услуга.Наименование) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "НаимРабот", Услуга.Наименование, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.БазоваяЕдиницаКод) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "ОКЕИ", Услуга.БазоваяЕдиницаКод, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.Количество) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "Количество", Услуга.Количество, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.Цена) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "Цена", Услуга.Цена, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.СуммаБезНДС) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "СумБезНДС", Услуга.СуммаБезНДС, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.СуммаНДС) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "СумНДС", Услуга.СуммаНДС, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(Услуга.Сумма) Тогда
					ЗаполнитьСвойствоXDTO(Работа, "СумУчНДС", Услуга.Сумма, , ТекстОшибки);
				КонецЕсли;
				
				Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
					Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Услуги",
						Строка(ТЗОписанийУслуг.Индекс(ОписаниеУслуги) + 1) + "." + Услуга.НомерСтроки) Тогда
						СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
						ЗаполнитьСвойствоXDTO(Работа, "ИнфПолСтр", СтрокаИнфПол, , ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Работа, "Описание", Услуга.Описание, , ТекстОшибки);
				
				ОписРабот.Работа.Добавить(Работа);
			КонецЦикла;
			
			СвАктИ.ОписРабот.Добавить(ОписРабот);
		КонецЦикла;
		
		СдалЗаполнено = Ложь;
		ДоверенностьЗаполнена = Ложь;
		СведПоУслугам = СтруктураПараметров.СведенияПоВыполнениюУслуг;
		Сдал = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(СведПоУслугам.ДатаИсполнения) Тогда
			ЗаполнитьСвойствоXDTO(Сдал, "ДатаИсполн", ДатаДД_ММ_ГГГГ(СтруктураПараметров.СведенияПоВыполнениюУслуг.ДатаИсполнения), , ТекстОшибки);
			СдалЗаполнено = Истина;
		КонецЕсли;
		ПодписьИсполн = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
		Если ЗаполнитьДолжностноеЛицоФНСCML(ПодписьИсполн, СтруктураПараметров.СведенияПоВыполнениюУслуг.ПодписьИсполнителя,
			ТекстОшибки, ПространствоИменСхемы) Тогда
			ЗаполнитьСвойствоXDTO(Сдал, "ПодписьИсполн", ПодписьИсполн, , ТекстОшибки);
			СдалЗаполнено = Истина;
		КонецЕсли;
		
		НомДоверен = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.НомерДоверенности;
		ДатаДоверен = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.ДатаДоверенности;
		НаимОргКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.НаименованиеОрганизации;
		ДопСведКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.ДопСведенияОВыдачеДоверенности;
		ДолжнКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.Должность;
		ФамилияКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.Фамилия;
		ИмяКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.Имя;
		ОтчествоКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.Отчество;
		ДоверенИсполн = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ДоверенИсполн", ПространствоИменСхемы);
		
		Если ЗначениеЗаполнено(НаимОргКем) ИЛИ ЗначениеЗаполнено(ДопСведКем) ИЛИ ЗначениеЗаполнено(ФамилияКем)
			ИЛИ ЗначениеЗаполнено(НомДоверен) ИЛИ ЗначениеЗаполнено(ДатаДоверен) Тогда
			
			Если ЗначениеЗаполнено(НомДоверен) Тогда
				ЗаполнитьСвойствоXDTO(ДоверенИсполн, "НомДоверен", НомДоверен, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаДоверен) Тогда
				ЗаполнитьСвойствоXDTO(ДоверенИсполн, "ДатаДоверен", ДатаДД_ММ_ГГГГ(ДатаДоверен), , ТекстОшибки);
			КонецЕсли;
			
			ВыданаКем = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКем", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(НаимОргКем) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКем, "НаимОргКем", НаимОргКем, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДопСведКем) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКем, "ДопСведКем", ДопСведКем, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДолжнКем) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКем, "ДолжнКем", ДолжнКем, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ФамилияКем) Тогда
				ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", ФамилияКем, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", ИмяКем, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоКем) Тогда
					ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", ОтчествоКем, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ВыданаКем, "ФИО", ФИОТип, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДоверенИсполн, "ВыданаКем", ВыданаКем, , ТекстОшибки);
			ДоверенностьЗаполнена = Истина;
		КонецЕсли;
		
		ДопСведКому = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КомуДоверенностьВыдана.ДопСведенияОДоверенномЛице;
		ДолжнКому = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КомуДоверенностьВыдана.Должность;
		ФамилияКому = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КомуДоверенностьВыдана.Фамилия;
		ИмяКому = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КомуДоверенностьВыдана.Имя;
		ОтчествоКому = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КомуДоверенностьВыдана.Отчество;
		
		Если ЗначениеЗаполнено(ДопСведКому) ИЛИ ЗначениеЗаполнено(ДолжнКому) ИЛИ ЗначениеЗаполнено(ФамилияКому) Тогда
			ВыданаКому = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(ДопСведКому) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКому, "ДопСведКому", ДопСведКому, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДолжнКому) Тогда
				ЗаполнитьСвойствоXDTO(ВыданаКому, "Должн", ДолжнКому, , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ФамилияКому) Тогда
				ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", ФамилияКому, Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", ИмяКому, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоКому) Тогда
					ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", ОтчествоКому, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ВыданаКому, "ФИО", ФИОТип, Истина, ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ДоверенИсполн, "ВыданаКому", ВыданаКому, , ТекстОшибки);
			ДоверенностьЗаполнена = Истина;
		КонецЕсли;
		Если ДоверенностьЗаполнена Тогда
			ЗаполнитьСвойствоXDTO(Сдал, "ДоверенИсполн", ДоверенИсполн, , ТекстОшибки);
			СдалЗаполнено = Истина;
		КонецЕсли;
		Если СдалЗаполнено Тогда
			ЗаполнитьСвойствоXDTO(СвАктИ, "Сдал", Сдал, , ТекстОшибки);
		КонецЕсли;
		
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвАктИ, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СвАктИ, Истина, ТекстОшибки);
		
		// Заполним часть схемы Подписант.
		СтПодписант = СтруктураПараметров.Подписант;
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если ТипЗнч(СтПодписант.ЭтоФизЛицо) = Тип("Булево") И СтПодписант.ЭтоФизЛицо Тогда
			ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтПодписант.ИНН, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.СвидетельствоОРегистрацииИП) Тогда
				ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтПодписант.СвидетельствоОРегистрацииИП, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		Иначе
			ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", СтПодписант.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", СтПодписант.Должность, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Подписант,"ЮЛ", ЮЛ, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет-фактура.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьАкт501ЗаказчикCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = "ZAKTPRM";
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);
		
		СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);
		
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр),
			Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок),
			Истина, ТекстОшибки);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО) Тогда
			СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);
		
		СведенияАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);
		
		ИдАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИдАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ИдФайлАктИ", СтруктураПараметров.ИдФайлАкт, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ДатаДокАктИ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДокАкт), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдАктИ, "ВремДокАктИ", СтруктураПараметров.ВремДокАкт, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "ИдАктИ", ИдАктИ, Истина, ТекстОшибки);
		
		СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.СвАктИ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", СтруктураПараметров.НомерАкта, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаАкта), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СведенияАктИ, "СвАктИ", СвАктИ, Истина, ТекстОшибки);
		
		// Заполним свойства принимающей стороны Принял
		Если ЗначениеЗаполнено(СтруктураПараметров.ДатаЗаказа) Тогда
			Принял = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтруктураПараметров.ДатаЗаказа) Тогда
				ЗаполнитьСвойствоXDTO(Принял, "ДатаЗаказ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаЗаказа), , ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураПараметров.Претензия) Тогда
				ЗаполнитьСвойствоXDTO(Принял, "Претенз", СтруктураПараметров.Претензия, , ТекстОшибки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.НомерДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДатаДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице) Тогда
				ДоверенЗаказ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ДоверенЗаказ", ПространствоИменСхемы);
				
				Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.НомерДоверенности) Тогда
					ЗаполнитьСвойствоXDTO(ДоверенЗаказ, "НомДоверен",
						СтруктураПараметров.Доверенность.НомерДоверенности, , ТекстОшибки);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДатаДоверенности) Тогда
					ЗаполнитьСвойствоXDTO(ДоверенЗаказ, "ДатаДоверен",
						ДатаДД_ММ_ГГГГ(СтруктураПараметров.Доверенность.ДатаДоверенности), , ТекстОшибки);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия) Тогда
					ВыданаКем = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем", ПространствоИменСхемы);
					
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКем, "НаимОргКем",
							СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКем, "ДопСведКем",
							СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКем, "ДолжнКем",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия) Тогда
						ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ФИОТип, "Имя",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Имя, Истина, ТекстОшибки);
						Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Отчество) Тогда
							ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество",
								СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Отчество, , ТекстОшибки);
						КонецЕсли;
						ЗаполнитьСвойствоXDTO(ВыданаКем, "ФИО", ФИОТип, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(ДоверенЗаказ, "ВыданаКем", ВыданаКем, , ТекстОшибки);
				КонецЕсли;
			
				Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия) Тогда
					ВыданаКому = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому", ПространствоИменСхемы);
					
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКому, "ДопСведКому",
							СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность) Тогда
						ЗаполнитьСвойствоXDTO(ВыданаКому, "Должн", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность, , ТекстОшибки);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия) Тогда
						ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия, Истина, ТекстОшибки);
						ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Имя, Истина, ТекстОшибки);
						Если ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Отчество) Тогда
							ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Отчество, , ТекстОшибки);
						КонецЕсли;
						ЗаполнитьСвойствоXDTO(ВыданаКому, "ФИО", ФИОТип, , ТекстОшибки);
					КонецЕсли;
					ЗаполнитьСвойствоXDTO(ДоверенЗаказ, "ВыданаКому", ВыданаКому, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(Принял, "ДоверенЗаказ", ДоверенЗаказ, , ТекстОшибки);
				
				Если ЗначениеЗаполнено(СтруктураПараметров.ПодписьЗаказ.Должность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ПодписьЗаказ.Фамилия) Тогда
					ПодписьЗаказ = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);
					Если ЗаполнитьДолжностноеЛицоФНСCML(ПодписьЗаказ, СтруктураПараметров.ПодписьЗаказ, ТекстОшибки, ПространствоИменСхемы) Тогда
						ЗаполнитьСвойствоXDTO(Принял, "ПодписьЗаказ", ПодписьЗаказ, , ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СведенияАктИ, "Принял", Принял, , ТекстОшибки);
		КонецЕсли;
		
		// Заполним текстовые дополнительные свойства ИнфПол
		СтрокаИнфПол = "";
		ДопФайлСформирован = Ложь;
		Если ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			// Сформируем xml-строку (ИнфПол):
			Если СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка") Тогда
				СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			КонецЕсли;
			
			// Сформируем доп. файл:
			ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован Тогда
			ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИнфПол", ПространствоИменСхемы);
			Если ЗначениеЗаполнено(СтрокаИнфПол) Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
			КонецЕсли;
			Если ДопФайлСформирован Тогда
				ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СвАктИ, "ИнфПол", ИнфПол, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СведенияАктИ, Истина, ТекстОшибки);
		
		СтПодписант = СтруктураПараметров.Подписант;
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		Если ТипЗнч(СтПодписант.ЭтоФизЛицо) = Тип("Булево") И СтПодписант.ЭтоФизЛицо Тогда
			ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтПодписант.ИНН, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.СвидетельствоОРегистрацииИП) Тогда
				ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтПодписант.СвидетельствоОРегистрацииИП, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		Иначе
			ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтПодписант.Отчество) Тогда
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", СтПодписант.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", СтПодписант.Должность, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Подписант,"ЮЛ", ЮЛ, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		
		ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД с каталогом товаров
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьКаталогCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	Попытка
		КаталогЭО = ПолучитьОбъектТипаCML("Каталог", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		
		// Владелец.
		Владелец = ПолучитьОбъектТипаCML("Контрагент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Владелец, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(КаталогЭО, "Владелец", Владелец, Истина, ТекстОшибки);
		
		// Товары.
		ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
		Если ТаблицаТоваров.Количество()>0 Тогда 
			Товары = ПолучитьОбъектТипаCML("Каталог.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Товар = ПолучитьОбъектТипаCML("Каталог.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(КаталогЭО, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Запись файла электронного документа.
		КаталогЭО.Проверить();
		
		ВыгрузитьЭДвФайл(КаталогЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
			
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД с прайс-листом
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьПрайсЛистCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		
		ПрайсЭО = ПолучитьОбъектТипаCML("ПрайсЛист", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация.
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		
		// Владелец.
		Контрагент = ПолучитьОбъектТипаCML("Контрагент", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "Владелец", Контрагент, Истина, ТекстОшибки);
		
		ИдТипаЦен = Строка(Новый УникальныйИдентификатор);
		
		// Предложения.
		Если ТаблицаТоваров.Количество()>0 Тогда
			Предложения = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения", СтруктураПараметров.ВерсияСхемы);
			
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				Предложение = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Предложение, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				
				Цены = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение.Цены", СтруктураПараметров.ВерсияСхемы);
				Цена = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения.Предложение.Цены.Цена", СтруктураПараметров.ВерсияСхемы);
				
				ЗаполнитьСвойствоXDTO(Цена, "ИдТипаЦены", ИдТипаЦен, Истина,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Цена, "Цена", ТекТовар.Цена, Истина,ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Цена, "МинКоличество", ТекТовар.Количество, , ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
				
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Цена, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				Цены.Цена.Добавить(Цена);
				ЗаполнитьСвойствоXDTO(Предложение, "Цены", Цены, Истина, ТекстОшибки);
				
				Предложения.Предложение.Добавить(Предложение);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ПрайсЭО, 	"Предложения",	Предложения, Истина, ТекстОшибки);
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ДействительноС",XMLДата(СтруктураПараметров.Дата), , ТекстОшибки);
		
		// ТипыЦен
		ТипыЦен = ПолучитьОбъектТипаCML("ПрайсЛист.ТипыЦен", СтруктураПараметров.ВерсияСхемы);
		ТипЦены = ПолучитьОбъектТипаCML("ТипЦены", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ТипЦены, "Ид", ИдТипаЦен, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Описание") Тогда
			ЗаполнитьСвойствоXDTO(ТипЦены, "Описание", СтруктураПараметров.Описание, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ТипЦены, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		ТипыЦен.ТипЦены.Добавить(ТипЦены);
		ЗаполнитьСвойствоXDTO(ПрайсЭО, "ТипыЦен", ТипыЦен, , ТекстОшибки);
		
		ПрайсЭО.Проверить();
		
		ВыгрузитьЭДвФайл(ПрайсЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ТОРГ12", СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОКУД", "0330212", Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("Валюта") Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, СтруктураПараметров, СтруктураПараметров.ТипГрузоотправителя,
			ТекстОшибки, СтруктураПараметров.ВерсияСхемы, "Грузоотправитель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузоотправитель", Грузоотправитель, , ТекстОшибки);
		
		Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Грузополучатель, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы,"Грузополучатель");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузополучатель", Грузополучатель, , ТекстОшибки);
		
		Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Организация, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Организация, , ТекстОшибки);
		
		Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Плательщик", Контрагент, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоЗаписей", ТаблицаТоваров.Количество(), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоМест", ТаблицаТоваров.Количество(), , ТекстОшибки);
		Если СтруктураПараметров.ЦенаВключаетНДС Тогда
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", ТаблицаТоваров.Итог("Сумма")
				- ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		Иначе	
			ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,	"СуммаБезНДС", ТаблицаТоваров.Итог("Сумма") , , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаСУчетомНДС", ТаблицаТоваров.Итог("СуммаСНДС"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);
		
		ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", СтруктураПараметров.ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью",
			ЧислоПрописью(ТаблицаТоваров.Количество(), ,",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью",
			ЧислоПрописью(ТаблицаТоваров.Количество(), ,",,,,,,,,0"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью",
			ЭлектронныеДокументыПереопределяемый.СуммаПрописью(ТаблицаТоваров.Итог("СуммаСНДС"), КодВалюты), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", ИтогиПрописью,, ТекстОшибки);
		
		Если ТаблицаТоваров.Количество()>0 Тогда 
			ПП = 0;
			Товары	= ПолучитьОбъектТипаCML("ТОРГ12.Товары", СтруктураПараметров.ВерсияСхемы);
			Для Каждого ТекТовар Из ТаблицаТоваров Цикл
				ПП = ПП + 1;
				Товар = ПолучитьОбъектТипаCML("ТОРГ12.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
				СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
				ЗаполнитьСвойствоXDTO(Товар, "НомерПП", ПП, , ТекстОшибки);
				
				ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения",СтруктураПараметров.ВерсияСхемы);
				СтруктураЕдИзм = Новый Структура();
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
				СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
				СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
				СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, , ТекстОшибки);
				Если СтруктураПараметров.ЦенаВключаетНДС Тогда
					СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
				Иначе	
					СуммаБезНДС = ТекТовар.Сумма;
				КонецЕсли;	
				ЗаполнитьСвойствоXDTO(Товар, "Цена", Окр(СуммаБезНДС/ТекТовар.Количество,2), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаБезНДС", СуммаБезНДС, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Товар, "СуммаСУчетомНДС", ТекТовар.СуммаСНДС, , ТекстОшибки);
				Если ЗначениеЗаполнено(ТекТовар.СуммаНДС) Тогда
					
					НалогПоСтроке = ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, Истина, ТекстОшибки);
					
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Товар, "Налог", НалогПоСтроке, , ТекстОшибки);
				КонецЕсли;
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
		КонецЕсли;
		
		ДокументЭО.Проверить();
		
		ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров)
	
	СтруктураПараметров.ВерсПрог = "1С:Предприятие 8";
	СтруктураПараметров.ВерсФорм = "5.01";
	СтруктураПараметров.ИдОтпр = СтруктураЭД.Отправитель;
	СтруктураПараметров.ИдПок = СтруктураЭД.Получатель;
	Если СтруктураЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		ЗаполнитьРеквизитыОператораЭДО(СтруктураПараметров);
	КонецЕсли;
	ТекДатаВремя = ТекущаяДатаСеанса();
	СтруктураПараметров.ДатаДок = Формат(ТекДатаВремя, "ДФ=dd.MM.yyyy");
	СтруктураПараметров.ВремДок = Прав(СтрЗаменить("0" + Формат(ТекДатаВремя, "ДЛФ=T"), ":", "."), 8);
	СтруктураПараметров.КНД = СтруктураЭД.КНД;
	СтруктураПараметров.ВидЭД = СтруктураЭД.ВидЭД;
	
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		СтруктураПараметров.НаимПервДок = "Товарная накладная";
		СтруктураПараметров.ОКУДПервДок = "0330212";
		СтруктураПараметров.НомФорм = "ТОРГ-12";
	ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		СтруктураПараметров.НаимПервДок = "Акт о выполнении работ (оказании услуг)";
	КонецЕсли;
	
	ГГГГММДД = СтрЗаменить(Формат(ТекДатаВремя, "ДФ=yyyy-MM-dd"), "-", "");
	
	СтруктураПараметров.ИдФайл = ЭлектронныеДокументы1СТакскомСлужебный.ФНСИмяФайла(
		Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор",
		СтруктураЭД.ПрефиксИдФайла, СтруктураЭД.Получатель, СтруктураЭД.Отправитель, ГГГГММДД, СтруктураЭД.УникальныйИдентификатор));
	
КонецПроцедуры

Процедура СтруктураСлужебныхПолейФНС(СтруктураСлужебныеПоля = Неопределено)
	
	Если ТипЗнч(СтруктураСлужебныеПоля) <> Тип("Структура") Тогда
		СтруктураСлужебныеПоля = Новый Структура;
	КонецЕсли;
	
	СтруктураСлужебныеПоля.Вставить("ВерсПрог");
	СтруктураСлужебныеПоля.Вставить("ВерсФорм");
	СтруктураСлужебныеПоля.Вставить("ИдФайл");
	СтруктураСлужебныеПоля.Вставить("ИдОтпр");
	СтруктураСлужебныеПоля.Вставить("ИдПок");
	СтруктураСлужебныеПоля.Вставить("НаимОрг");
	СтруктураСлужебныеПоля.Вставить("ИННЮЛ");
	СтруктураСлужебныеПоля.Вставить("ИдЭДО");
	СтруктураСлужебныеПоля.Вставить("КНД");
	СтруктураСлужебныеПоля.Вставить("ДатаДок");
	СтруктураСлужебныеПоля.Вставить("ВремДок");
	СтруктураСлужебныеПоля.Вставить("НаимПервДок");
	СтруктураСлужебныеПоля.Вставить("ОКУДПервДок"); // Используется только для ТОРГ-12
	СтруктураСлужебныеПоля.Вставить("НомФорм");     // Используется только для ТОРГ-12
	СтруктураСлужебныеПоля.Вставить("ВидЭД");
	
КонецПроцедуры

Функция СтруктураРеквизитовДоверенностиФНС()
	
	СтруктураСведений = Новый Структура;
	
	СтруктураСведений.Вставить("НомерДоверенности");
	СтруктураСведений.Вставить("ДатаДоверенности");
	СтруктураСведений.Вставить("ОрганизацияВыдавшаяДоверенность");
	СтруктураСведений.Вставить("ДопСведенияОВыдачеДоверенности");
	СтруктураСведений.Вставить("ДопСведенияОДоверенномЛице");
	СтруктураСведений.Вставить("ЛицоВыдавшееДоверенность", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураСведений.Вставить("ДоверенноеЛицо", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	
	Возврат СтруктураСведений;
	
КонецФункции

Функция СтруктураРеквизитовУчастникаОбменаФНС()
	
	СтруктураУчастника = Новый Структура;
	
	СтруктураУчастника.Вставить("ЭтоФизЛицо");
	СтруктураУчастника.Вставить("КодОКПО");
	СтруктураУчастника.Вставить("НаименованиеОрганизации");
	СтруктураУчастника.Вставить("ИНН");
	СтруктураУчастника.Вставить("КПП");
	СтруктураУчастника.Вставить("КодОКОПФ");
	СтруктураУчастника.Вставить("Фамилия");
	СтруктураУчастника.Вставить("Имя");
	СтруктураУчастника.Вставить("Отчество");
	СтруктураУчастника.Вставить("Адрес", СтруктураАдресаФНС());
	СтруктураУчастника.Вставить("Телефон");
	СтруктураУчастника.Вставить("Факс");
	СтруктураУчастника.Вставить("БанковскийСчет", Новый Структура("НомерСчета, НаимБанк, БИК"));
	
	Возврат СтруктураУчастника;
	
КонецФункции

Функция СтруктураРеквизитовПодписантаФНС()
	
	СтруктураУчастника = Новый Структура;
	
	СтруктураУчастника.Вставить("ЭтоФизЛицо");
	СтруктураУчастника.Вставить("ИНН");
	СтруктураУчастника.Вставить("Фамилия");
	СтруктураУчастника.Вставить("Имя");
	СтруктураУчастника.Вставить("Отчество");
	СтруктураУчастника.Вставить("Должность");
	СтруктураУчастника.Вставить("СвидетельствоОРегистрацииИП");
	СтруктураУчастника.Вставить("ОбязательныеПоля", "ИНН, Фамилия, Имя, ЭтоФизЛицо, Должность");
	
	Возврат СтруктураУчастника;
	
КонецФункции

Функция Торг12СтруктураСведенийПоОтпускуГруза()
	
	СтруктураОтпуска = Новый Структура;
	
	СтруктураОтпуска.Вставить("ПриложениеКоличествоЛистов");
	СтруктураОтпуска.Вставить("ПриложениеКоличествоЛистовПрописью");
	СтруктураОтпуска.Вставить("ОтпущеноНаСумму");
	СтруктураОтпуска.Вставить("ОтпущеноНаСуммуПрописью");
	СтруктураОтпуска.Вставить("ДатаОтпуска");
	СтруктураОтпуска.Вставить("ОтпускРазрешил", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураОтпуска.Вставить("Бухгалтер", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураОтпуска.Вставить("ОтпускПроизвел", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	
	Возврат СтруктураОтпуска;
	
КонецФункции

Функция Торг12СтруктураОбщихСведений()
	
	СтруктураСведений = Новый Структура;
	
	СтруктураСведений.Вставить("КоличествоПорядковыхНомеровЗаписей");
	СтруктураСведений.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью");
	СтруктураСведений.Вставить("ВсегоМест");
	СтруктураСведений.Вставить("ВсегоМестПрописью");
	СтруктураСведений.Вставить("МассаГрузаНетто");
	СтруктураСведений.Вставить("МассаГрузаНеттоПрописью");
	СтруктураСведений.Вставить("МассаГрузаБрутто");
	СтруктураСведений.Вставить("МассаГрузаБруттоПрописью");
	
	Возврат СтруктураСведений;
	
КонецФункции

Функция Торг12СтруктураВсегоПоНакладной()
	
	СтруктураВсего = Новый Структура;
	
	СтруктураВсего.Вставить("КоличествоМест");
	СтруктураВсего.Вставить("МассаБрутто");
	СтруктураВсего.Вставить("МассаНетто");
	СтруктураВсего.Вставить("СуммаБезНДС");
	СтруктураВсего.Вставить("СуммаНДС");
	СтруктураВсего.Вставить("СуммаСНДС");
	
	Возврат СтруктураВсего;
	
КонецФункции

Функция Торг12ТаблицаСведенийОТоваре()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

// Для того, чтобы передать дополнительные данные в печатную форму, надо:
// 1. в функции подготовки данных (в переопределяемом модуле) создать структуру, где ключ - имя передаваемого
//  дополнительного параметра, а значение - соответственно, значение доп.параметра и передать в интерфейсную функцию
//  "ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных" (описание параметров в комментарии к ней).
// 2. в функции подготовки данных к печати "ПолучитьДанные...ДляПечати", прописать чтение передаваемых
//  доп.данных по имени (с которым доп параметр помещался в структуру на шаге 1) и присвоение требуемому реквизиту макета.
//
Функция ДеревоДопДанных()
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("Строка"));
	ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);
	ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоДанных;
	
КонецФункции

Функция Торг12СтруктураПараметров()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерТоварнойНакладной");
	СтруктураПараметров.Вставить("ДатаТоварнойНакладной");
	СтруктураПараметров.Вставить("ТаблицаТоваров", Торг12ТаблицаСведенийОТоваре());
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС());
	СтруктураПараметров.Вставить("ОбщиеСведенияОТоварнойНакладной", Торг12СтруктураОбщихСведений());
	СтруктураПараметров.Вставить("ВсегоПоНакладной", Торг12СтруктураВсегоПоНакладной());
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("Грузоотправитель", СтруктураРеквизитовУчастникаОбменаФНС());
	СведенияОГрузоотправителе.Вставить("СтруктурноеПодразделение");
	СведенияОГрузоотправителе.Вставить("КодОКДП");
	
	СтруктураПараметров.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	СтруктураПараметров.Вставить("Грузополучатель", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("Поставщик", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("Плательщик", СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("ДокОснованиеНаименование");
	СтруктураПараметров.Вставить("ДокОснованиеНомер");
	СтруктураПараметров.Вставить("ДокОснованиеДата");
	СтруктураПараметров.Вставить("ДокОснованиеДопСведения");
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяНомер");
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяДата");
	СтруктураПараметров.Вставить("КодВидаОперации");
	СтруктураПараметров.Вставить("СведенияПоОтпускуГруза", Торг12СтруктураСведенийПоОтпускуГруза());
	
	МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ТН.Таблица.СвТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "НомерТоварнойНакладной, ДатаТоварнойНакладной, ТаблицаТоваров, Подписант");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "НомерСтроки, ЕдиницаИзмерения, Сумма");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция Торг12ПокупательСтруктураПараметров()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС());
	СтруктураПараметров.Вставить("ДатаПолученияГруза");
	СтруктураПараметров.Вставить("Доверенность", СтруктураРеквизитовДоверенностиФНС());
	СтруктураПараметров.Вставить("ГрузПринял", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураПараметров.Вставить("ГрузПолучил", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	
	МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ТН.Таблица.СвТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Подписант");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция СтруктураЭСФ(СсылкаНаОбъект)
	
	ЭтоКорректировочныйСФ = ЭлектронныеДокументыПереопределяемый.ЭтоКорректировочныйСчетФактура(СсылкаНаОбъект);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВерсПрог"); // (optional) Версия передающей программы
	СтруктураПараметров.Вставить("ВерсФорм"); // Версия формата
	СтруктураПараметров.Вставить("ИдФайл"); // Идентификатор файла
	СтруктураПараметров.Вставить("ИдОтпр"); // Идентификатор участника документооборота, выставившего счет-фактуру (отправитель)
	СтруктураПараметров.Вставить("ИдПок");  // Идентификатор участника документооборота счетов-фактур - покупателя
	СтруктураПараметров.Вставить("НаимОрг"); // Наименование
	СтруктураПараметров.Вставить("ИННЮЛ"); // ИНН
	СтруктураПараметров.Вставить("ИдЭДО"); // Уникальный идентификатор оператора ЭДО
	СтруктураПараметров.Вставить("КНД"); // Код формы по КНД
	
	Если ЭтоКорректировочныйСФ Тогда
		СтруктураПараметров.Вставить("НомерКСчФ"); // Порядковый номер корректировочного счета-фактуры (Строка 1)
		СтруктураПараметров.Вставить("ДатаКСчФ"); // Дата составления корректировочного счета-фактуры (Строка 1)
		СтруктураПараметров.Вставить("НомИспрКСчФ"); //(optional) Исправление: № (Строка 1а)
		СтруктураПараметров.Вставить("ДатаИспрКСчФ"); //(optional) Исправление: Дата (Строка 1а)
		СтруктураПараметров.Вставить("ТекстИнф"); //(optional) Текстовая информация
		СтруктураПараметров.Вставить("ИдФайлИнфПол"); //(optional) Идентификатор файла информационного поля
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("НомСтр"); // Номер строки таблицы
		ТаблицаТоваров.Колонки.Добавить("НаимТов"); // Наименование товара (описание выполненных работ, оказанных услуг), имущественного права (Графа 1)
		ТаблицаТоваров.Колонки.Добавить("ОКЕИ_ТовДо"); // (optional) Код единицы измерения, до изменения (Графа 2, строка А)
		ТаблицаТоваров.Колонки.Добавить("ОКЕИ_ТовПосле"); // (optional) Код единицы измерения, после изменения (Графа 2, строка Б)
		ТаблицаТоваров.Колонки.Добавить("КолТовДо"); //(optional) Количество (объем), до изменения (Графа 3, строка А)
		ТаблицаТоваров.Колонки.Добавить("КолТовПосле"); // (optional) Количество (объем), после изменения (Графа 3, строка Б)
		ТаблицаТоваров.Колонки.Добавить("ЦенаТовДо"); // (optional) Цена (тариф) за единицу измерения, до изменения (Графа 4, строка А)
		ТаблицаТоваров.Колонки.Добавить("ЦенаТовПосле"); // (optional) Цена (тариф) за единицу измерения, после изменения (Графа 4, строка Б)
		ТаблицаТоваров.Колонки.Добавить("ИнфПолСтр"); // (optional) Информационное поле строки
		
		//(optional) Стоимость товаров (работ, услуг), имущественных прав без налога - всего (Графа 5)
		ТаблицаТоваров.Колонки.Добавить("СтТовБезНДСДоИзм"); //  Стоимость до изменения (Строка А)
		ТаблицаТоваров.Колонки.Добавить("СтТовБезНДСПослеИзм"); // Стоимость после изменения (Строка Б)
		ТаблицаТоваров.Колонки.Добавить("СтТовБезНДСУм"); //(optional) Стоимость -  увеличение (Строка В)
		ТаблицаТоваров.Колонки.Добавить("СтТовБезНДСУвел"); //(optional) Стоимость - уменьшение (Строка Г)
		
		// В том числе сумма акциза, до изменения (Графа 6, строка А)
		ТаблицаТоваров.Колонки.Добавить("АкцизДо");
		ТаблицаТоваров.Колонки.Добавить("АкцизПосле");
		
		// Налоговая ставка, до изменения (Графа 7, строка А)
		ТаблицаТоваров.Колонки.Добавить("НалСтВелДо"); // Налоговая ставка - величина (строка: 0, 10, 18, 20, 10/110, 18/118, без НДС)
		ТаблицаТоваров.Колонки.Добавить("НалСтТипДо"); // Тип налоговой ставки (процент, дробь, текст)
		
		// Налоговая ставка, после  изменения (Графа 7, строка Б)
		ТаблицаТоваров.Колонки.Добавить("НалСтВелПосле"); // Налоговая ставка - величина (строка: 0, 10, 18, 20, 10/110, 18/118, без НДС)
		ТаблицаТоваров.Колонки.Добавить("НалСтТипПосле"); // Тип налоговой ставки (процент, дробь, текст)
		
		
		ТаблицаТоваров.Колонки.Добавить("СумНалДо"); // Сумма НДС, предъявляемая покупателю, до изменения (Графа 8)
		ТаблицаТоваров.Колонки.Добавить("СумНалПосле"); // Сумма НДС, предъявляемая покупателю, до изменения (Графа 8)
		
		// Сумма налога, увеличение (уменьшение) (Графа 8, строки В, Г)
		ТаблицаТоваров.Колонки.Добавить("СумНалУм");
		ТаблицаТоваров.Колонки.Добавить("СумНалУвел");
		
		//Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (Графа 9)
		ТаблицаТоваров.Колонки.Добавить("СтТовУчНалДоИзм");
		ТаблицаТоваров.Колонки.Добавить("СтТовУчНалПослеИзм");
		ТаблицаТоваров.Колонки.Добавить("СтТовУчНалУм");
		ТаблицаТоваров.Колонки.Добавить("СтТовУчНалУвел");
		
		// Сведения таблицы корректировочного счета-фактуры
		СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		
		// Реквизиты строки Всего увеличение (сумма строк (В) по графам 5, 8 и 9)
		СтруктураПараметров.Вставить("ВсегоСтТовБезНДСУвел"); // Всего увеличение, Стоимость товаров (работ, услуг), имущественных прав без налога - всего (строка Всего увеличение/Графа 5)
		СтруктураПараметров.Вставить("ВсегоСтТовУчНалУвел"); // Всего увеличение, Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (строка Всего увеличение/Графа 9)
		СтруктураПараметров.Вставить("ВсегоСумНалУвел"); // Всего увеличение, Сумма налога (строка Всего увеличение/Графа 8)
		
		// Реквизиты строки Всего уменьшение (сумма строк (Г) по графам 5, 8 и 9)
		СтруктураПараметров.Вставить("ВсегоСтТовБезНДСУм"); // всего уменьшение, Стоимость товаров (работ, услуг), имущественных прав без налога - всего (строка Всего уменьшение/Графа 5)
		СтруктураПараметров.Вставить("ВсегоСтТовУчНалУм"); // всего уменьшение, Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (строка Всего уменьшение/Графа 9)
		СтруктураПараметров.Вставить("ВсегоСумНалУм"); // всего уменьшение, Сумма налога (строка Всего уменьшение/Графа 8)
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НомерСчФ"); // Порядковый номер счета-фактуры к которому составлен корректировочный счета-фактура (Строка 1б)
	СтруктураПараметров.Вставить("ДатаСчФ"); // Дата составления счета-фактуры счета-фактуры к которому составлен корректировочный счета-фактура (Строка 1б)
	СтруктураПараметров.Вставить("КодОКВ"); // Валюта: Код (Строка 4) 
	СтруктураПараметров.Вставить("НомИспрСчФ"); // (optional) Исправление: № (Строка 1а)
	СтруктураПараметров.Вставить("ДатаИспрСчФ"); // (optional) Исправление: Дата  (Строка 1а)
	
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Грузоотправитель");
	СтруктураПараметров.Вставить("Грузополучатель");
	
	Если НЕ ЭтоКорректировочныйСФ Тогда
		// Сведения о платежно-расчетном документе (строка 5)
		ПлатежныеДокументы = Новый ТаблицаЗначений();
		ПлатежныеДокументы.Колонки.Добавить("НомерПРД"); // Номер платежно-расчетного документа
		ПлатежныеДокументы.Колонки.Добавить("ДатаПРД"); // Дата составления платежно-расчетного документа
		СтруктураПараметров.Вставить("СвПРД", ПлатежныеДокументы);
		СтруктураПараметров.Вставить("ТекстИнф");
		СтруктураПараметров.Вставить("ИдФайлИнфПол");
		
		// Сведения о товаре (работе, услуге)
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("НомСтр"); // Номер строки таблицы
		ТаблицаТоваров.Колонки.Добавить("НаимТов"); // Наименование товара (описание выполненных работ, оказанных услуг), имущественного права (Графа 1)
		ТаблицаТоваров.Колонки.Добавить("ОКЕИ_Тов"); // (optional) Код единицы измерения (Графа 2)
		ТаблицаТоваров.Колонки.Добавить("КолТов"); // (optional) Количество (объем) (Графа 3)
		ТаблицаТоваров.Колонки.Добавить("ЦенаТов"); // (optional) Цена (тариф) за единицу измерения (Графа 4)
		ТаблицаТоваров.Колонки.Добавить("СтТовБезНДС"); // (optional) Стоимость товаров (работ, услуг), имущественных прав без налога - всего (Графа 5)
		ТаблицаТоваров.Колонки.Добавить("СтТовУчНал"); // Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (Графа 9)
		ТаблицаТоваров.Колонки.Добавить("ИнфПолСтр"); // Информационное поле строки
		ТаблицаТоваров.Колонки.Добавить("СумАкциз"); // В том числе сумма акциза (Графа 6)
		ТаблицаТоваров.Колонки.Добавить("НалСтВел"); // Налоговая ставка - величина
		ТаблицаТоваров.Колонки.Добавить("НалСтТип"); // Тип налоговой ставки
		ТаблицаТоваров.Колонки.Добавить("СумНДС"); // Сумма НДС, предъявляемая покупателю (Графа 8)
		ТаблицаТоваров.Колонки.Добавить("КодПроисх"); // (optional) Цифровой код страны происхождения товара (Графа 10)
		ТаблицаТоваров.Колонки.Добавить("НомерТД"); // (optional) Номер таможенной декларации (Графа11)
		
		СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		СтруктураПараметров.Вставить("СтТовБезНДСВсего"); // Стоимость товаров (работ, услуг), имущественных прав без налога - всего
		СтруктураПараметров.Вставить("СтТовУчНалВсего"); // Стоимость товаров (работ, услуг), имущественных прав с налогом - всего
		СтруктураПараметров.Вставить("СумНДС"); // Сумма НДС, предъявляемая покупателю
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("ФИОРуководителя");
	СтруктураПараметров.Вставить("СчетФактураОснование");
	СтруктураПараметров.Вставить("ПолноеИмяФайла");
	СтруктураПараметров.Вставить("СтруктураЭД");
	СтруктураПараметров.Вставить("УникальныйИдентификатор");
	СтруктураПараметров.Вставить("ТолькоУслуги", Ложь);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "ВерсФорм, ИдОтпр, ИдПок, НаимОрг, ИдЭДО, КНД, НомерСчФ, ДатаСчФ,
	|КодОКВ, Организация, Контрагент, ТаблицаТоваров, ПолноеИмяФайла" + ?(ЭтоКорректировочныйСФ, "", ", СтТовУчНалВсего"));
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "НаимТов");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция Акт501СтруктураСведенийПоВыполнениюУслуг()
	
	СтруктураВыполнения = Новый Структура;
	СтруктураВыполнения.Вставить("ДатаИсполнения");
	СтруктураВыполнения.Вставить("ПодписьИсполнителя", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	
	ДоверенностьИсполнителя = Новый Структура;
	ДоверенностьИсполнителя.Вставить("НомерДоверенности");
	ДоверенностьИсполнителя.Вставить("ДатаДоверенности");
	ДоверенностьИсполнителя.Вставить("КемДоверенностьВыдана",
		Новый Структура("НаименованиеОрганизации, Должность, Фамилия, Имя, Отчество, ДопСведенияОВыдачеДоверенности"));
	ДоверенностьИсполнителя.Вставить("КомуДоверенностьВыдана",
		Новый Структура("Должность, Фамилия, Имя, Отчество, ДопСведенияОДоверенномЛице"));
		
	СтруктураВыполнения.Вставить("ДоверенностьИсполнителя", ДоверенностьИсполнителя);
	
	Возврат СтруктураВыполнения;
	
КонецФункции

Функция Акт501ТаблицаСведенийОбУслугах()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("НомерСтроки");
	ТаблицаУслуг.Колонки.Добавить("Наименование");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаУслуг.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("Сумма");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("ИД");
	
	Возврат ТаблицаУслуг;
	
КонецФункции

Функция Акт501ТаблицаСведенийОбОписанииУслуг()
	
	ТаблицаОписанийУслуг = Новый ТаблицаЗначений;
	ТаблицаОписанийУслуг.Колонки.Добавить("НомерСтроки");
	ТаблицаОписанийУслуг.Колонки.Добавить("НачалоРабот");
	ТаблицаОписанийУслуг.Колонки.Добавить("КонецРабот");
	ТаблицаОписанийУслуг.Колонки.Добавить("СуммаБезНДСИтого");
	ТаблицаОписанийУслуг.Колонки.Добавить("СуммаНДСИтого");
	ТаблицаОписанийУслуг.Колонки.Добавить("СуммаСНДСИтого");
	ТаблицаОписанийУслуг.Колонки.Добавить("Услуги");
	
	Возврат ТаблицаОписанийУслуг;
	
КонецФункции

Функция Акт501СтруктураПараметров()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерАкта");
	СтруктураПараметров.Вставить("ДатаАкта");
	
	СтруктураПараметров.Вставить("Заголовок", "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель
	|ЗАКАЗЧИКА с другой стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).");
	
	СтруктураПараметров.Вставить("Исполнитель",  СтруктураРеквизитовУчастникаОбменаФНС());
	СтруктураПараметров.Вставить("Заказчик",     СтруктураРеквизитовУчастникаОбменаФНС());
	
	СтруктураПараметров.Вставить("ТаблицаОписанийУслуг", Акт501ТаблицаСведенийОбОписанииУслуг());
	СтруктураПараметров.Вставить("ТаблицаУслуг", Акт501ТаблицаСведенийОбУслугах());
	
	СтруктураПараметров.Вставить("СведенияПоВыполнениюУслуг", Акт501СтруктураСведенийПоВыполнениюУслуг());
	
	СтруктураПараметров.Вставить("Подписант",    СтруктураРеквизитовПодписантаФНС());
	
	МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ТН.Таблица.СвТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "ДатаАкта, ТаблицаУслуг, Подписант");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "НомерСтроки, ЕдиницаИзмерения");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция Акт501ЗаказчикСтруктураПараметров()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС());
	СтруктураПараметров.Вставить("НомерАкта");
	СтруктураПараметров.Вставить("ДатаАкта");
	СтруктураПараметров.Вставить("Доверенность", СтруктураРеквизитовДоверенностиФНС());
	СтруктураПараметров.Вставить("ПодписьЗаказ", Новый Структура("Должность, Фамилия, Имя, Отчество"));
	СтруктураПараметров.Вставить("ДатаЗаказа");
	СтруктураПараметров.Вставить("Претензия");
	
	МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20); // 20 - служебные символы.
	МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ТН.Таблица.СвТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);
	СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20); // 20 - служебные символы.
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Подписант");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Структура адреса содержит все возможные варианты заполнения адреса:
// Структурированный адрес (по КЛАДР), произвольный российский/иностранный.
// Тип адреса выбирается из списка значений ТипыАдресов и заполняется
// соответствующая структура, описанная в значении элемента списка.
// Пометка в списке типов должна быть одна, иначе быдет браться первый тип адреса
// с пометкой и по этому типу будут заполняться данные адреса в ЭД.
//
Функция СтруктураАдресаФНС()
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	
	ТипыАдресов = Новый СписокЗначений;
	ТипыАдресов.Добавить(СтруктураАдреса, "Структурированный", Истина);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Произвольный", Ложь);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Иностранный", Ложь);
	
	Возврат ТипыАдресов;
	
КонецФункции

Функция ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, ТЗ, Знач ПоляТЗ, ИмяТЗ, ТекстОшибки)
	
	Если ТЗ.Количество() > 0 Тогда
		СтруктураОбязательныхКолонок = Новый Структура(ПоляТЗ);
		Для Каждого Элемент Из СтруктураОбязательныхКолонок Цикл
			Если ТЗ.Колонки.Найти(Элемент.Ключ) = Неопределено Тогда
				ШаблонОшибки = НСтр("ru = 'В таблице %1 отсутствует обязательная к заполнению колонка: %2.'");
				
				ПользовательскоеПредставление = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
					Элемент.Ключ);
				ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ИмяТЗ, ПользовательскоеПредставление) + Символы.ПС;
				СтруктураОбязательныхКолонок.Удалить(Элемент.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из ТЗ Цикл
			Для Каждого Элемент Из СтруктураОбязательныхКолонок Цикл
				ЗначениеПараметра = Строка[Элемент.Ключ];
				Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
					ПроверитьЗаполнениеОбязательныхПолей(ЗначениеПараметра, ТекстОшибки);
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					ШаблонОшибки = НСтр("ru = 'В строке №%1 таблицы %2 не заполнено значение %3.'");
					
					ПользовательскоеПредставление = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
						Элемент.Ключ);
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ТЗ.Индекс(Строка) + 1, ИмяТЗ, ПользовательскоеПредставление) + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ШаблонОшибки = НСтр("ru = 'Не заполнена обязательная таблица: %1.'");
		ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяТЗ) + Символы.ПС;
	КонецЕсли;
	ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат ПараметрыЗаполнены;
	
КонецФункции

// Проверяет заполнение обязательных полей в СтруктуреПараметров, если значением
// обязательного поля является вложеная структура, то она рекурсивно проверяется
// в этой же функции, если значением обязательного поля является вложеная таблица
// значений, то она передаётся на проверку в функцию ПроверитьЗаполнениеОбязательныхПолейТЗ.
// Список обязательных полей проверяемой структуры, берется из значения элемента
// структуры с ключем "ОбязательныеПоля"
// Список обязательных колонок таблицы значений, берется из значения элемента структуры
// с ключом "ОбязательныеПоляТаблицыЗначений".
//
// Параметры:
//  Источник             - ссылка - сыылка на объект информационной базы.
//  СтруктураПараметров  - структура - проверяемая структура с данными.
//  ТекстОшибки - Строка - строка содержащая описание незаполненных полей
//    проверяемой структуры, может быть показана пользователю в вызывающей процедуре.
//
// Возвращаемое значение:
//  ПараметрыЗаполнены - Булево - Истина - если обязательные поля заполнены, иначе - Ложь.
//
Функция ПроверитьЗаполнениеОбязательныхПолей(Источник, СтруктураПараметров, ТекстОшибки = "")
	
	ОбязательныеПоля = ""; ЗначениеПараметра = "";
	
	СтруктураОбязательныхПолей = СтруктураПараметров;
	Если СтруктураПараметров.Свойство("ОбязательныеПоля", ОбязательныеПоля) Тогда
		СтруктураОбязательныхПолей = Новый Структура(ОбязательныеПоля);
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураОбязательныхПолей Цикл
		Если СтруктураПараметров.Свойство(Элемент.Ключ, ЗначениеПараметра) Тогда
			Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
				ПроверитьЗаполнениеОбязательныхПолей(Источник, ЗначениеПараметра, ТекстОшибки);
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
				ПоляТЗ = "";
				ПользовательскоеПредставлениеТЗ = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
					Элемент.Ключ);
				Если СтруктураПараметров.Свойство("ОбязательныеПоляТаблицыЗначений", ПоляТЗ) Тогда
					ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник,ЗначениеПараметра, ПоляТЗ, ПользовательскоеПредставлениеТЗ,
						ТекстОшибки);
				Иначе
					ШаблонОшибки = НСтр("ru = 'Не заполнен перечень обязательных полей таблицы: %1.'");
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ПользовательскоеПредставлениеТЗ) + Символы.ПС;
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					ШаблонОшибки = НСтр("ru = 'Не заполнено обязательное поле структуры параметров: %1.'");
					
					ПользовательскоеПредставление = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
						Элемент.Ключ);
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ПользовательскоеПредставление) + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ШаблонОшибки = НСтр("ru = Отсутствует обязательное поле в структуре параметров: %1.'");
			ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				Элемент.Ключ) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат ПараметрыЗаполнены;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение файлов

Процедура ЗаполнитьДанныеПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеПокупателя)
	
	Результат = СформироватьДеревоРазбора(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя);
	
	Если Результат <> Неопределено Тогда
	
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		ДанныеПокупателя.Вставить("ДоверенностьНомер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДоверенностьНомер"));
		ДанныеПокупателя.Вставить("ДоверенностьДата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДоверенностьДата"));
		ДанныеПокупателя.Вставить("ДоверенностьВыдана", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДоверенностьВыдана"));
		ДанныеПокупателя.Вставить("ГрузПринялДолжность", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПринялДолжность"));
		ДанныеПокупателя.Вставить("ГрузПринялФИО", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПринялФИО"));
		ДанныеПокупателя.Вставить("ГрузПолучилДолжность", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилДолжность"));
		ДанныеПокупателя.Вставить("ГрузПолучилФИО", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилФИО"));
		ДанныеПокупателя.Вставить("ДатаПолучения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПолучения"));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазрешилXDTO, ДолжностноеЛицо, ТекстОшибки, ПространствоИменСхемы)
	
	ОбъектЗаполнен = Ложь;
	Если ТипЗнч(ДолжностноеЛицо) = Тип("Структура") И ЗначениеЗаполнено(ДолжностноеЛицо.Фамилия) Тогда
		ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", ДолжностноеЛицо.Фамилия, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", ДолжностноеЛицо.Имя, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ДолжностноеЛицо.Отчество) Тогда
			ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", ДолжностноеЛицо.Отчество, , ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДолжностноеЛицо.Должность) Тогда
			ЗаполнитьСвойствоXDTO(ОтпускРазрешилXDTO, "Должность", ДолжностноеЛицо.Должность, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ОтпускРазрешилXDTO, "ФИО", ФИОТип, Истина, ТекстОшибки);
		ОбъектЗаполнен = Истина
	КонецЕсли;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

Функция ЗаполнитьДанныеУчастникаФНСCML(УчастникXDTO, СтруктураПараметровУчастника, ТекстОшибки, ПространствоИменСхемы)
	
	ДанныеЗаполнены = Ложь;
	
	Если ТипЗнч(СтруктураПараметровУчастника.ЭтоФизЛицо) = Тип("Булево") Тогда
		ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		
		Если СтруктураПараметровУчастника.ЭтоФизЛицо Тогда
			СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", СтруктураПараметровУчастника.ИНН, ,ТекстОшибки);
			
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураПараметровУчастника.Фамилия,Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураПараметровУчастника.Имя, Истина ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураПараметровУчастника.Отчество, , ТекстОшибки);
			
			ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);
		Иначе
			СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", СтруктураПараметровУчастника.НаименованиеОрганизации,  ,ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", СтруктураПараметровУчастника.ИНН, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", СтруктураПараметровУчастника.КПП, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ", СвЮЛ, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметровУчастника.КодОКПО) Тогда
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО", СтруктураПараметровУчастника.КодОКПО, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Адрес = "";
	Если СтруктураПараметровУчастника.Свойство("Адрес", Адрес) Тогда
		ЗаполнитьАдресФНС(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы);
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь;
	Контакт = ПолучитьОбъектТипаCML("УчастникТип.Контакт", ПространствоИменСхемы);
	Если ЗначениеЗаполнено(СтруктураПараметровУчастника.Телефон) Тогда
		ЗаполнитьСвойствоXDTO(Контакт, "Тлф", СтруктураПараметровУчастника.Телефон, , ТекстОшибки);
		ЕстьДанныеКЗаполнению = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметровУчастника.Факс) Тогда
		ЗаполнитьСвойствоXDTO(Контакт, "Факс", СтруктураПараметровУчастника.Факс, , ТекстОшибки);
		ЕстьДанныеКЗаполнению = Истина;
	КонецЕсли;
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", Контакт, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь; 
	РеквизитыБанка = "НомерСчета, НаимБанк, БИК";
	БанковскиеРеквизиты = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИменСхемы);
	СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИменСхемы);
	Для Каждого ЭлементСтруктуры Из СтруктураПараметровУчастника.БанковскийСчет Цикл
		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) И Найти(РеквизитыБанка, ЭлементСтруктуры.Ключ) > 0 Тогда
			Если ЭлементСтруктуры.Ключ = "НомерСчета" Тогда
				ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение, ,ТекстОшибки);
			Иначе
				ЗаполнитьСвойствоXDTO(СвБанк, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение, ,ТекстОшибки);
			КонецЕсли;
			ЕстьДанныеКЗаполнению = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "СвБанк", СвБанк, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанковскиеРеквизиты, , ТекстОшибки);
		ДанныеЗаполнены = Истина;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

Процедура СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, ВидКонтрагента, ТекстОшибки, ВерсияСхемы = "4.01", ИмяСвойства = Неопределено)
	
	Если Не ЗначениеЗаполнено(ИмяСвойства) Тогда
		ИмяСвойства = ВидКонтрагента;
	КонецЕсли;
	
	ДанныеКонтрагента = Неопределено;
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства, ДанныеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента);
	ИдКонтрагента = ЭлектронныеДокументыПереопределяемый.ПолучитьИДКонтрагента(ДанныеКонтрагента, ВидКонтрагента);
	ЗаполнитьСвойствоXDTO(Контрагент, "Ид", ИдКонтрагента, Истина, ТекстОшибки);
	
	// Заполнение реквизитов юридического или физического лица.
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента);
	
	ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
	ПолноеНаименование = "";
	ДанныеЮрФизЛица.Свойство("ОфициальноеНаименование", ПолноеНаименование);
	
	Если НЕ ЗначениеЗаполнено(ПолноеНаименование) Тогда
		ПолноеНаименование = ?(ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование), ДанныеЮрФизЛица.ПолноеНаименование,
			ДанныеЮрФизЛица.Представление);
	КонецЕсли;
	
	РеквизитыКонтрагентаИмя  = ?(ЭтоФизЛицо, "ФизЛицо", "ЮрЛицо");
	РеквизитыКонтрагентаXDTO = ПолучитьОбъектТипаCML("Контрагент."+РеквизитыКонтрагентаИмя, ВерсияСхемы);
	
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ПолноеНаименованиеИмя, ПолноеНаименование, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ИНН", ДанныеЮрФизЛица.ИНН, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "КПП", ДанныеЮрФизЛица.КПП, , ТекстОшибки);
	
	Если НЕ ЭтоФизЛицо Тогда
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ОКПО", ДанныеЮрФизЛица.КодПоОКПО, , ТекстОшибки);
	КонецЕсли;
	
	// Юр.адрес или адрес регистрации.
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ЮридическийАдрес) Тогда
		
		ЮридическийАдресИмя  = ?(ЭтоФизЛицо, "АдресРегистрации", "ЮридическийАдрес");
		ЮридическийАдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		
		ЗаполнитьСвойствоXDTO(ЮридическийАдресXDTO, "Представление", ДанныеЮрФизЛица.ЮридическийАдрес, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ЮридическийАдресИмя, ЮридическийАдресXDTO, , ТекстОшибки);
		
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Контрагент, РеквизитыКонтрагентаИмя, РеквизитыКонтрагентаXDTO, , ТекстОшибки);
	
	// РасчетныеСчета.
	РасчСчет = Неопределено;
	Если ((ВидКонтрагента = "Организация" И СтруктураПараметров.Свойство("РасчетныйСчетОрганизации", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетКонтрагента", РасчСчет))
		ИЛИ (ВидКонтрагента = "Организация" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузополучателя", РасчСчет)))
		И ЗначениеЗаполнено(РасчСчет) Тогда
		
		РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ВерсияСхемы);
		РасчетныйСчет = ПолучитьОбъектТипаCML("РасчетныйСчет", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(РасчетныйСчет, "НомерСчета", РасчСчет.НомерСчета, Истина, ТекстОшибки);
		
		// Банк
		Банк = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", РасчСчет.Банк.КоррСчет, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "Наименование", РасчСчет.Банк.Наименование, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Банк, "БИК", РасчСчет.Банк.Код, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РасчетныйСчет, "Банк", Банк, Истина, ТекстОшибки);
		
		// Банк корреспондент
		Если ЗначениеЗаполнено(РасчСчет.БанкДляРасчетов) Тогда
			БанкКорр = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(БанкКорр, "СчетКорреспондентский", РасчСчет.БанкДляРасчетов.КоррСчет, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорр, "Наименование", РасчСчет.БанкДляРасчетов.Наименование, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкКорр, "БИК", РасчСчет.БанкДляРасчетов.Код, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РасчетныйСчет, "БанкКорреспондент", БанкКорр, , ТекстОшибки);
		КонецЕсли;
		
		РасчетныеСчета.РасчетныйСчет.Добавить(РасчетныйСчет);
		ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныеСчета", РасчетныеСчета, , ТекстОшибки);
	КонецЕсли;
	
	// Адрес
	Если ТипЗнч(ДанныеЮрФизЛица) = Тип("Структура") И ДанныеЮрФизЛица.Свойство("ФактическийАдрес")
		И ЗначениеЗаполнено(ДанныеЮрФизЛица.ФактическийАдрес) Тогда
		
		АдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", ДанныеЮрФизЛица.ФактическийАдрес, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресXDTO, , ТекстОшибки);
	КонецЕсли;
	
	// Контакты организации
	Если (ВидКонтрагента = "Организация") Тогда
		ТаблицаКонтактов = ЭлектронныеДокументыПереопределяемый.ПолучитьКонтактнуюИнформацию(ДанныеКонтрагента);
		Если ТаблицаКонтактов.Количество()>0 Тогда
			Контакты = ПолучитьОбъектТипаCML("Контрагент.Контакты", ВерсияСхемы);
			ЕстьКонтакты = Ложь;
			Для Каждого СтрокаКонтакта из ТаблицаКонтактов Цикл
				Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемы);
				ТекстОшибки = "";
				Если СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"EmailОрганизации") Тогда
						
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Почта");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип", Тип, Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				ИначеЕсли СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"ТелефонОрганизации") Тогда
					
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Телефон рабочий");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип",Тип,Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				ИначеЕсли СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"ФаксОрганизации") Тогда
					
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Факс");
					ЗаполнитьСвойствоXDTO(Контакт, "Тип",Тип,Истина, ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
					
				КонецЕсли;
				Если ТекстОшибки="" Тогда
					Контакты.Контакт.Добавить(Контакт);
					ЕстьКонтакты = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьКонтакты Тогда
				ЗаполнитьСвойствоXDTO(Контрагент, "Контакты",	Контакты, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

Процедура СформироватьДанныеПоКонтрагентуЭСФ(Контрагент, СтруктураПараметров, ВидКонтрагента, ТекстОшибки, ПространствоИменСхемы)
	
	ДанныеКонтрагента = Неопределено;
	Если НЕ СтруктураПараметров.Свойство(ВидКонтрагента, ДанныеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента);
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента);
	
	ИдСв = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв", ПространствоИменСхемы);
	
	Если ЭтоФизЛицо Тогда
		СвФЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвФЛ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ДанныеЮрФизЛица.ИНН, ,ТекстОшибки);
		
		ФИОИП = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвФЛ.ФИОИП", ПространствоИменСхемы);
		ЗаполнитьФИОЭСФ(ФИОИП, ДанныеЮрФизЛица.ОфициальноеНаименование, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИОИП, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, Истина, ТекстОшибки);
	Иначе
		СвЮЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", ДанныеЮрФизЛица.ОфициальноеНаименование, Истина ,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", ДанныеЮрФизЛица.КПП, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ", СвЮЛ, Истина, ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Контрагент, "ИдСв", ИдСв, Истина, ТекстОшибки);
	
	ЮрАдрес = ЭлектронныеДокументыСлужебный.ПолучитьАдресСтруктурой(СтруктураПараметров, ВидКонтрагента, "Юр", ТекстОшибки);
	
	Если ЗначениеЗаполнено(ЮрАдрес) Тогда
		ЗаполнитьАдресФНСУстаревший(Контрагент, ЮрАдрес, ТекстОшибки, ПространствоИменСхемы);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоГрузоотправителюЭСФ(Контрагент, СтруктураПараметров, ВидКонтрагента, ТекстОшибки, ПространствоИменСхемы)
	
	ДанныеКонтрагента = Неопределено;
	Если НЕ СтруктураПараметров.Свойство(ВидКонтрагента, ДанныеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента);
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента);
	
	НаимГОП = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП", ПространствоИменСхемы);
	
	Если ЭтоФизЛицо Тогда
		ФИОИП = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП.ФИОИП",  ПространствоИменСхемы);
		ЗаполнитьФИОЭСФ(ФИОИП, ДанныеЮрФизЛица.ПолноеНаименование, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(НаимГОП, "ФИОИП", ФИОИП, Истина, ТекстОшибки);
	Иначе
		ЗаполнитьСвойствоXDTO(НаимГОП, "НаимОрг", ДанныеЮрФизЛица.ПолноеНаименование, Истина ,ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Контрагент, "НаимГОП", НаимГОП, Истина, ТекстОшибки);
	
	АдресМестонахождения = ЭлектронныеДокументыСлужебный.ПолучитьАдресСтруктурой(СтруктураПараметров, ВидКонтрагента,
		"Факт", ТекстОшибки);
	
	Если ЗначениеЗаполнено(АдресМестонахождения) Тогда
		ЗаполнитьАдресФНСУстаревший(Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФИОЭСФ(Получатель, Источник, ТекстОшибки)
	
	Фамилия = ""; Имя = ""; Отчество = "";
	ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(Источник, Фамилия, Имя, Отчество);
	ЗаполнитьСвойствоXDTO(Получатель, "Фамилия", Фамилия,Истина ,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Получатель, "Имя", Имя, Истина ,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Получатель, "Отчество", Отчество, , ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаполнитьАдресФНС(Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы)
	
	Если ТипЗнч(АдресМестонахождения) = Тип("СписокЗначений") Тогда
		ЗаполненныйТип = Неопределено;
		Для Каждого Элемент Из АдресМестонахождения Цикл
			Если Элемент.Пометка Тогда
				ЗаполненныйТип = Элемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
			АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
			СхемаСчетаФактуры = (Найти(ПространствоИменСхемы, "SFAKT") <> 0);
			Адрес = ЗаполненныйТип.Значение;
			Если ЗаполненныйТип.Представление = "Структурированный" Тогда
				АдрРФ = ПолучитьОбъектТипаCML("АдресТип.АдрРФ", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", Адрес.КодРегион, СхемаСчетаФактуры, ТекстОшибки);
				РеквизитыАдреса = "Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
				Для Каждого Элемент Из Адрес Цикл
					Если Найти(РеквизитыАдреса, Элемент.Ключ) > 0 И ЗначениеЗаполнено(Элемент.Значение) Тогда
						ЗаполнитьСвойствоXDTO(АдрРФ, Элемент.Ключ, Элемент.Значение, ,ТекстОшибки);
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, СхемаСчетаФактуры, ТекстОшибки);
			ИначеЕсли НЕ СхемаСчетаФактуры И ЗаполненныйТип.Представление = "Произвольный" Тогда
				// в схеме ТОРГ-12 и Акт, адрес в виде строки передается в элементе схемы "АдрТекст"
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрТекст", Адрес.АдресСтрокой, , ТекстОшибки);
			Иначе
				// В схеме счета-фактуры, адрес в виде строки передается в элементе схемы "АдрИНО",
				АдресXDTO = ПолучитьОбъектТипаCML("АдресТип.АдрИНО", ПространствоИменСхемы);
				РеквизитыАдреса = "АдресСтрокой, КодСтраны";
				Для Каждого Элемент Из Адрес Цикл
					Если Найти(РеквизитыАдреса, Элемент.Ключ) > 0 И ЗначениеЗаполнено(Элемент.Значение) Тогда
						ЗаполнитьСвойствоXDTO(АдресXDTO, Элемент.Ключ, Элемент.Значение, СхемаСчетаФактуры,ТекстОшибки);
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрИНО", АдресXDTO, СхемаСчетаФактуры, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, СхемаСчетаФактуры, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресФНСУстаревший(Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы)
	
	Если ТипЗнч(АдресМестонахождения) = Тип("Структура") Тогда
		АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);
		СхемаСчетаФактуры = (Найти(ПространствоИменСхемы, "SFAKT") <> 0);
		ЭтоАдресПоКлассификатору = Ложь;
		Если АдресМестонахождения.Свойство("АдресРФ", ЭтоАдресПоКлассификатору) И ЭтоАдресПоКлассификатору = Истина Тогда
			АдрРФ = ПолучитьОбъектТипаCML("АдресТип.АдрРФ", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", АдресМестонахождения.КодРегион, СхемаСчетаФактуры, ТекстОшибки);
			РеквизитыАдреса = "Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
			Для Каждого Элемент Из АдресМестонахождения Цикл
				Если Найти(РеквизитыАдреса, Элемент.Ключ) > 0 И ЗначениеЗаполнено(Элемент.Значение) Тогда
					ЗаполнитьСвойствоXDTO(АдрРФ, Элемент.Ключ, Элемент.Значение, ,ТекстОшибки);
				КонецЕсли;
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, СхемаСчетаФактуры, ТекстОшибки);
		Иначе
			// В схеме счета-фактуры, адрес в виде строки передается в элементе схемы "АдрИНО",
			// в схеме ТОРГ-12 и Акт - в элементе схемы "АдрТекст"
			КодСтраны = "";
			Адрес = "";
			Если НЕ(АдресМестонахождения.Свойство("КодСтр", КодСтраны) И ЗначениеЗаполнено(КодСтраны))
				И НЕ СхемаСчетаФактуры Тогда
				// Заполняется адрес РФ произвольной строкой в торг-12 или акте.
				Если АдресМестонахождения.Свойство("АдресСтрокой", Адрес) И ЗначениеЗаполнено(Адрес) Тогда
					ЗаполнитьСвойствоXDTO(АдресТип, "АдрТекст", Адрес, , ТекстОшибки);
				КонецЕсли;
			Иначе
				// Заполняется адрес РФ произвольной строкой в счете-фактуре или иностранный адрес.
				АдресXDTO = ПолучитьОбъектТипаCML("АдресТип.АдрИНО", ПространствоИменСхемы);
				Если ЗначениеЗаполнено(КодСтраны) Тогда
					ЗаполнитьСвойствоXDTO(АдресXDTO, "КодСтр", КодСтраны, СхемаСчетаФактуры, ТекстОшибки);
				КонецЕсли;
				Если АдресМестонахождения.Свойство("АдрТекст", Адрес) И ЗначениеЗаполнено(Адрес) Тогда
					ЗаполнитьСвойствоXDTO(АдресXDTO, "АдрТекст", Адрес, СхемаСчетаФактуры, ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(АдресТип, "АдрИНО", АдресXDTO, СхемаСчетаФактуры, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, СхемаСчетаФактуры, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруCML(Товар, СтруктураПараметров, ТекстОшибки, ВерсияСхемы = "4.01")
	
	ЗаполнитьСвойствоXDTO(Товар, "Ид", СтруктураПараметров.Ид,Истина,ТекстОшибки);
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ШтрихКод") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод", СтруктураПараметров.ШтрихКод,,ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("Артикул") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "Артикул", СтруктураПараметров.Артикул,,ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ИДТовара") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ИДТовара", СтруктураПараметров.ИДТовара,,ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Товар, "Наименование", СтруктураПараметров.Наименование, Истина,ТекстОшибки);
	
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ВерсияСхемы);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", СтруктураПараметров.БазоваяЕдиницаКод, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Наименование", СтруктураПараметров.БазоваяЕдиницаНаименование, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное", СтруктураПараметров.БазоваяЕдиницаНаименованиеПолное, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", СтруктураПараметров.БазоваяЕдиницаМеждународноеСокращение, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("Описание") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "Описание", СтруктураПараметров.Описание, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
		ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ВерсияСхемы);
		Для Каждого Элемент Из СтруктураПараметров.ДополнительныеРеквизиты Цикл
			ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Элемент.Ключ, Истина, ТекстОшибки);
			Для Каждого ЭлементМассива ИЗ Элемент.Значение Цикл
				ЗначениеРеквизита.Значение.Добавить(ЭлементМассива)
			КонецЦикла;
			Товар.ДополнительныеРеквизиты.Добавить(ЗначениеРеквизита);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, СтруктураПараметров, ТекстОшибки, МассивКолонок)
	
	Для каждого Колонка из МассивКолонок Цикл
		Если Колонка = "ВидОплаты" ТОгда
			
			Если СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Аванс (до обеспечения)")
				ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Аванс (до подтверждения)") Тогда
				ВариантОплаты = "Аванс";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Кредит (после отгрузки)")
				ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Кредит (после поступления)") Тогда
				ВариантОплаты = "Кредит";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Предоплата (до отгрузки)")
				ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Предоплата (до поступления)") Тогда
				ВариантОплаты = "Предоплата";
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ВидОплаты", ВариантОплаты, Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ДатаПлатежа" ТОгда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ДатаПлатежа", XMLДата(СтруктураПараметров.ДатаПлатежа), Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ПроцентПлатежа" ТОгда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ПроцентПлатежа", СтруктураПараметров.ПроцентПлатежа, Истина, ТекстОшибки);
		ИначеЕсли Колонка = "СуммаПлатежа" ТОгда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"СуммаПлатежа", СтруктураПараметров.СуммаПлатежа, Истина, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураПараметров, ТекстОшибки)
	
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Код", СтруктураПараметров.ЕдиницаИзмеренияКод, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Наименование", СтруктураПараметров.ЕдиницаИзмеренияНаименование, ,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Коэффициент", СтруктураПараметров.Коэффициент, , ТекстОшибки);
	
КонецПроцедуры

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка установки значения свойства ""%1""!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		ЭлектронныеДокументыСлужебный.ЗаписатьОшибкуПоЭД("Заполнение XDTO", ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки
	
КонецПроцедуры

Функция XMLЧисло(Значение)
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции

Функция XMLДатаВремя(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс");
	КонецЕсли;
	
	Возврат "0001-01-01T00:00:00";
	
КонецФункции

Функция XMLДата(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат "0001-01-01";
	
КонецФункции

Функция ДатаДД_ММ_ГГГГ(ДатаВремя)
	
	Если ТипЗнч(ДатаВремя) = Тип("Дата") Тогда
		ВозврЗначение = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");
	Иначе
		ВозврЗначение = Лев(ДатаВремя, 10);
	КонецЕсли;
	
	Возврат ВозврЗначение;
	
КонецФункции

Функция ВернутьНомерВерсииИзИдЭД(ИдОтправителя)
	
	НомерВерсии = 0;
	НачПозиция = Найти(ИдОтправителя, "##");
	Если НачПозиция > 0 Тогда
		НомерВерсии = Сред(ИдОтправителя, НачПозиция + 2, СтрДлина(ИдОтправителя) - (НачПозиция + 1));
	КонецЕсли;
	
	Возврат НомерВерсии;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// CML

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = СтрРазделить(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция ПолучитьЗначениеТипаCML(Тип, Значение)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипЗначения = ПолучитьТипЗначенияCML(Тип);
	Иначе
		ТипЗначения = Тип;
	КонецЕсли;
	
	Если ТипЗначения = Неопределено Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	НовоеЗначение = ФабрикаXDTO.Создать(ТипЗначения, Значение);
	
	Возврат НовоеЗначение;
	
КонецФункции

Функция СтрРазделить(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = Найти(Строка, "{");
	КонПозицияПервогоЭлемента = Найти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = Найти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Разбор файлов

Процедура ПрочитатьАктОПриемкеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
		Если СвойствоКодОКВ<>Неопределено Тогда 
			КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
		Если СвойствоКурс<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоСуммаОбщая = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаОбщая");
		Если СвойствоСуммаОбщая <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ИтогоПоДокументуXDTO.Получить(СвойствоСуммаОбщая));
		КонецЕсли;
		СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
		Если СвойствоЦенаВключаетНДС <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Исполнитель");
	Если СвойствоЭД <> Неопределено Тогда
		Исполнитель = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Заказчик");
	Если СвойствоЭД <> Неопределено Тогда
		Заказчик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ТекстДокумента");
	Если СвойствоЭД <> Неопределено Тогда
		ТекстДокумента = ЭД.Получить(СвойствоЭД);
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("Заголовок");
		Если СвойствоЗаголовок <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Заголовок", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("ОписаниеВыполненныхРабот");
		Если СвойствоЗаголовок <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОписаниеВыполненныхРабот", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
		СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("Претензии");
		Если СвойствоЗаголовок <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Претензии", ТекстДокумента.Получить(СвойствоЗаголовок));
		КонецЕсли;
	Конецесли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогиПрописью");
	Если СвойствоЭД <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧАктаОПриемке(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьАкт501XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: "+КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвАктИ.НомАкт);
	ДатаДок = ЭД.Документ.СвАктИ.ДатаАкт;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Заголовок", ЭД.Документ.СвАктИ.Заголовок);
	
	Исполнитель = ЭД.Документ.СвАктИ.Исполнитель;
	Если Исполнитель <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Исполнитель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Заказчик");
		КонецЕсли;
	КонецЕсли;
	
	Заказчик = ЭД.Документ.СвАктИ.Заказчик;
	Если Заказчик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Заказчик");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Исполнитель");
		КонецЕсли;
	КонецЕсли;
	
	НаборДанныхОписанияРабот = ЭД.Документ.СвАктИ.ОписРабот;
	Если ТипЗнч(НаборДанныхОписанияРабот) = Тип("СписокXDTO") Тогда
		Сч = 1;
		Для Каждого ЭлементОписания Из НаборДанныхОписанияРабот Цикл
			
			СписокОписаний = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "СписокОписаний");
			
			ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "НачРабот",  ЭлементОписания.НачРабот);
			ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "КонРабот",  ЭлементОписания.КонРабот);
			ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "СуммаСНДС", ЭлементОписания.СумУчНДСИт);
			ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "Сумма",     ЭлементОписания.СумБезНДСИт);
			ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "СуммаНДС",  ЭлементОписания.СумНДСИт);
			
			// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
			АвторЭДПокупатель = Ложь;
			ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
			
			НаборДанных = ЭлементОписания.Работа;
			Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
				Для Каждого Элемент Из НаборДанных Цикл
					НаимТовара = ""; ИдТовара = "";
					ЕстьДопРеквизиты = Ложь;
					
					СписокТЧ = Новый СписокЗначений;
					СписокТЧ.Добавить(Элемент.Номер,      "Номер");
					СписокТЧ.Добавить(Элемент.Количество, "Количество");
					СписокТЧ.Добавить(Элемент.СумУчНДС,   "СуммаСНДС");
					СписокТЧ.Добавить(Элемент.Цена,       "Цена");
					СписокТЧ.Добавить(Элемент.СумБезНДС,  "Сумма");
					СписокТЧ.Добавить(Элемент.СумНДС,     "СуммаНДС");
					СписокТЧ.Добавить(Элемент.Описание,   "Описание");
					СписокТЧ.Добавить(Элемент.НаимЕдИзм,  "ЕдиницаИзмеренияНаименование");
					СписокТЧ.Добавить(Элемент.ОКЕИ,       "ЕдиницаИзмеренияКод");
					
					// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
					Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) И Найти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
						// В инф.поле xml-строка неактуального формата.
						ОбъектXML = Новый ЧтениеXML;
						Попытка
							ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
							ТоварXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
							РазобратьСтрокуТЧНакладной(ТоварXDTO, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
						Исключение
						КонецПопытки;
					Иначе
						Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
							// В инф.поле xml-строка Актуального формата.
							ИнфПол = Элемент.ИнфПолСтр;
							ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Услуги", Строка(Сч) + "." + Элемент.Номер);
						КонецЕсли;
						ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Строка(Сч) + "." + Элемент.Номер, "Услуги", Ошибка);
						
						РеквизитыНоменклатуры = Новый Структура;
						РеквизитыЕдиницыИзмерения = Новый Структура;
						РеквизитыБазовойЕдиницыИзмерения = Новый Структура;
						ИдТовара = "";
						
						Для Каждого ЭлементСЗ Из СписокТЧ Цикл
							
							// Номенклатура.
							Если ЭлементСЗ.Представление = "Наименование" Тогда
								РеквизитыНоменклатуры.Вставить("Наименование", ЭлементСЗ.Значение);
							ИначеЕсли ЭлементСЗ.Представление = "Характеристика" Тогда
								РеквизитыНоменклатуры.Вставить("Характеристика", ЭлементСЗ.Значение);
							ИначеЕсли ЭлементСЗ.Представление = "Артикул" Тогда
								РеквизитыНоменклатуры.Вставить("Артикул", ЭлементСЗ.Значение);
							ИначеЕсли ЭлементСЗ.Представление = "БазоваяЕдиницаКод" Тогда
								РеквизитыБазовойЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
							ИначеЕсли ЭлементСЗ.Представление = "БазоваяЕдиницаНаименование" Тогда
								РеквизитыБазовойЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
							ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
								РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
							ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
								РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
							ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
								ИдТовара = ЭлементСЗ.Значение;
							ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
								СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(ЭлементСЗ.Значение);
								ЭлементСЗ.Значение = СтавкаНалога;
							КонецЕсли;
							
						КонецЦикла;
						
						НаимРабот = "";
						РеквизитыНоменклатуры.Свойство("Наименование", НаимРабот);
						КодЕдИзм = "";
						Если РеквизитыБазовойЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
							НаименованиеЕдИзм = "";
							РеквизитыБазовойЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
							ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
								РеквизитыБазовойЕдиницыИзмерения);
							НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
							НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм), НаименованиеЕдИзм,
								ЕдИзм, РеквизитыБазовойЕдиницыИзмерения, ДеревоРазбора, Ошибка);
							Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
								РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
							КонецЕсли;
						КонецЕсли;
						
						КодЕдИзм = "";
						Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
							НаименованиеЕдИзм = "";
							РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
							ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
								РеквизитыЕдиницыИзмерения);
							НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
							НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(КодЕдИзм),
								НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДеревоРазбора, Ошибка);
							Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
								РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
							КонецЕсли;
						КонецЕсли;
				
						
						// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
						Если ИдентификацияПоНоменклатуреКомпании Тогда
							СтруктураИд = РазобратьИДТовара(ИдТовара);
							Номенклатура = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
						Иначе
							// Номенклатура поставщиков.
							РеквизитыНоменклатурыПоставщика = Новый Структура;
							ИмяРеквизитаВладельца = ЭлектронныеДокументыСлужебный.ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
							ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
							
							РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
							РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
							
							Если ЗначениеЗаполнено(НаимРабот) Тогда
								РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимРабот);
							КонецЕсли;
							
							Если ЕстьДопРеквизиты Тогда
								//РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
							КонецЕсли;
							
							НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
							РеквизитыНоменклатурыПоставщика);
							
							НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
							НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимРабот, НоменклатураПоставщика,
								РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
							СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
							
							Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
								РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
								РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
							КонецЕсли;
							СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
							ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара);
							
							Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
						КонецЕсли;
						
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимРабот, Номенклатура,
						РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
						
						СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
						
						ДобавитьРеквизитыТЧОбъекта(СписокОписаний, "Работа", СписокТЧ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Сч = Сч + 1;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СписокОписаний", СписокОписаний);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьАкт501ЗаказчикXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	
	Если ЭД.Документ.СвАктИ.Принял <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвАктИ.Принял.ДатаЗаказ;
		ДатаПолучения = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.НомДоверен);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем <> Неопределено Тогда
				ВспомСтруктура = Новый Структура;
				ВспомСтруктура.Вставить("Организация", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.НаимОргКем);
				ВспомСтруктура.Вставить("Должность", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ДолжнКем);
				ВспомСтруктура.Вставить("ДопСведения", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО <> Неопределено Тогда
					ВспомСтруктура.Вставить("ФИО", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО.Фамилия + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО.Имя + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО.Отчество);
				КонецЕсли;
				Для Каждого Элемент Из ВспомСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому <> Неопределено Тогда
				ВспомСтруктура = Новый Структура;
				ВспомСтруктура.Вставить("Должность", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.Должн);
				ВспомСтруктура.Вставить("ДопСведения", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО <> Неопределено Тогда
					ВспомСтруктура.Вставить("ФИО", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО.Фамилия + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО.Имя + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО.Отчество);
				КонецЕсли;
				Для Каждого Элемент Из ВспомСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
			Если ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялДолжность", ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.Должность);
				Если ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО <> Неопределено Тогда
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялФИО", ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО.Фамилия + " "
						+ ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО.Имя + " " + ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО.Отчество);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТОРГ12XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНО.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, КодВалюты, "Код валюты: "+КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвТНО.ТН.НомТН);
	ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));
	
	СуммаДокумента = ?(ЗначениеЗаполнено(ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс), ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс,
		ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	
	Грузоотправитель = Неопределено;
	ДопПараметрыГрузоотправителя = Новый Структура;
	Поставщик = ЭД.Документ.СвТНО.Поставщик;
	Если ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
		ДопПараметрыГрузоотправителя.Вставить("СтруктурноеПодразделение", ЭД.Документ.СвТНО.ГрузОт.СтруктПодр);
		ДопПараметрыГрузоотправителя.Вставить("ОКДП", ЭД.Документ.СвТНО.ГрузОт.ОКДП);
		Грузоотправитель = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;
		Если Не ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт = Неопределено Тогда
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Телефоны", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф);
			КонецЕсли;
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Факс", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поставщик <> Неопределено Тогда
		Грузоотправитель = Поставщик;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьРуководителя", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО;
			ДопПараметрыГрузоотправителя.Вставить("ФИОРуководителя",
				ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьГлавБухгалтера", ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.ФИО;
			ДопПараметрыГрузоотправителя.Вставить("ФИОГлавБухгалтера",
				ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьКладовщика", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.ФИО;
			ДопПараметрыГрузоотправителя.Вставить("ФИОКладовщика",
				ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));
		КонецЕсли;
	КонецЕсли;
	
	Если Грузоотправитель <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
		Если ДопПараметрыГрузоотправителя.Количество() > 0 Тогда
			ИндексУзла = ДеревоРазбора.Строки.Найти("Грузоотправитель", "Реквизит", Истина);
			Если ИндексУзла <> Неопределено И ЗначениеЗаполнено(ИндексУзла.ЗначениеРеквизита) Тогда
				СтрокаГрузоотправителя = ДеревоРазбора.Строки.Найти(ИндексУзла.ЗначениеРеквизита, "ИндексСтроки", Истина);
				Если СтрокаГрузоотправителя <> Неопределено Тогда
					Для Каждого ДопПараметр Из ДопПараметрыГрузоотправителя Цикл
						ДобавитьРеквизитШапкиОбъекта(СтрокаГрузоотправителя, ДопПараметр.Ключ, ДопПараметр.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ГрузПолуч <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(ЭД.Документ.СвТНО.ГрузПолуч, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;
	
	// Грузоотправитель и Поставщик - необязательные элементы xsd-схемы,
	// но один из этих элементов обязательно должен быть заполнен
	// (Согласно подп. "в" п.2 ст. 9 Федерального закона от 21.11.1996 №129-ФЗ).
	Если Поставщик = Неопределено Тогда
		Поставщик = Грузоотправитель;
	КонецЕсли;
	
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	Плательщик = ЭД.Документ.СвТНО.Плательщик;
	Если Плательщик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.Основание <> Неопределено Тогда
		ДатаПоДаннымКлиента = ЭД.Документ.СвТНО.Основание.ДатаОсн;
		Если ЗначениеЗаполнено(ДатаПоДаннымКлиента) Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Дата(Сред(ДатаПоДаннымКлиента, 7, 4)
				+ Сред(ДатаПоДаннымКлиента, 4, 2) + Сред(ДатаПоДаннымКлиента, 1, 2)));
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ЭД.Документ.СвТНО.Основание.НомОсн);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеОснования", ЭД.Документ.СвТНО.Основание.НаимОсн);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКУД", ЭД.Документ.СвТНО.ОКУДПервДок);
	
	Если ЭД.Документ.СвТНО.ТН.ТНОбщ <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗап);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗапПр);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМест);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМестПр);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МассаГрузаПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.БруттоПр);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаБезНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумБезНДСВс);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумНДСВс);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ЭД.Документ.СвТНО.ОтпускГруз.СумОтпускПр);
		ДатаДок = ЭД.Документ.СвТНО.ОтпускГруз.ДатаОтпуск;
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтпуска", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));
		КонецЕсли;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЛистовВПрилПрописью", ЭД.Документ.СвТНО.ОтпускГруз.КолПрилПр);
	КонецЕсли;
	
	НаборДанных = ЭД.Документ.СвТНО.ТН.Таблица.СвТов;
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			СписокТЧ.Добавить(Элемент.НаимТов, "НаименованиеНоменклатуры");
			СписокТЧ.Добавить(Элемент.ХарактерТов, "НаименованиеХарактеристики");
			СписокТЧ.Добавить(Элемент.СортТов, "Сорт");
			СписокТЧ.Добавить(Элемент.АртикулТов, "Артикул");
			СписокТЧ.Добавить(Элемент.НаимЕдИзм, "ЕдиницаИзмеренияНаименование");
			СписокТЧ.Добавить(Элемент.ОКЕИ_Тов, "ЕдиницаИзмеренияКод");
	
			СписокТЧ.Добавить(Элемент.НомТов, "Номер");
			СписокТЧ.Добавить(Элемент.Нетто, "Количество");
			СписокТЧ.Добавить(Элемент.СумУчНДС, "СуммаСНДС");
			СписокТЧ.Добавить(Элемент.КолМест, "Мест");
			СписокТЧ.Добавить(Элемент.ВидУпак, "Упаковка");
			СписокТЧ.Добавить(Элемент.Место, "КоличествоВОдномМесте");
			СписокТЧ.Добавить(Элемент.Нетто, "МассаНетто");
			СписокТЧ.Добавить(Элемент.Брутто, "МассаБрутто");
			СписокТЧ.Добавить(Элемент.Цена, "Цена");
			СписокТЧ.Добавить(Элемент.СумБезНДС, "Сумма");
			СписокТЧ.Добавить(Элемент.СумНДС, "СуммаНДС");
			СписокТЧ.Добавить(Элемент.КодТов, "ТоварКод");
			
			// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
			Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) И Найти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
				
				СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Элемент.СтавкаНДС);
				СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
				
				// В инф.поле xml-строка неактуального формата.
				ОбъектXML = Новый ЧтениеXML;
				Попытка
					ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
					ТоварXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					РазобратьСтрокуТЧНакладной(ТоварXDTO, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
				Исключение
				КонецПопытки;
			Иначе
				Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
					// В инф.поле xml-строка Актуального формата.
					ИнфПол = Элемент.ИнфПолСтр;
					ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Элемент.НомТов);
					ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Элемент.НомТов, "Товары", Ошибка);
				КонецЕсли;
				РеквизитыНоменклатуры = Новый Структура;
				РеквизитыЕдиницыИзмерения = Новый Структура;
				ИдТовара = "";
				СтавкаНДСПереданаДопПараметром = Ложь;
				Для Каждого ЭлементСЗ Из СписокТЧ Цикл
					
					// Номенклатура.
					Если ЭлементСЗ.Представление = "НаименованиеНоменклатуры" Тогда
						РеквизитыНоменклатуры.Вставить("НаименованиеНоменклатуры", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Характеристика" Тогда
						РеквизитыНоменклатуры.Вставить("Характеристика", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Артикул" Тогда
						РеквизитыНоменклатуры.Вставить("Артикул", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
						ИдТовара = ЭлементСЗ.Значение;
						
					// Проверка наличия ставки НДС в доп. параметрах.
					ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
						СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(ЭлементСЗ.Значение);
						ЭлементСЗ.Значение = СтавкаНалога;
						СтавкаНДСПереданаДопПараметром = Истина;
					КонецЕсли;
				КонецЦикла;
				// Ставка НДС может прийти в доп. параметрах.
				Если НЕ СтавкаНДСПереданаДопПараметром Тогда
					СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Элемент.СтавкаНДС);
					СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
				КонецЕсли;
				
				НаимТовара = "";
				РеквизитыНоменклатуры.Свойство("НаименованиеНоменклатуры", НаимТовара);
				
				КодЕдИзм = "";
				Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
					НаименованиеЕдИзм = "";
					РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
					ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(КодЕдИзм),
						РеквизитыЕдиницыИзмерения);
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм),
						НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
				
				// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
				Если ИдентификацияПоНоменклатуреКомпании Тогда
					СтруктураИд = РазобратьИДТовара(ИдТовара);
					Номенклатура = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
					Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
						ХарактеристикаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
							СтруктураИд.ИДХарактеристики);
						Если СписокТЧ.НайтиПоЗначению(ХарактеристикаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
						КонецеСли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
						УпаковкаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
							СтруктураИд.ИДУпаковки);
						Если СписокТЧ.НайтиПоЗначению(УпаковкаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
						КонецеСли;
					КонецЕсли;
				Иначе
					// Номенклатура поставщиков.
					РеквизитыНоменклатурыПоставщика = Новый Структура;
					ИмяРеквизитаВладельца = ЭлектронныеДокументыСлужебный.ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
					ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
					
					РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
					РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
					Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НаимТовара) Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
					КонецЕсли;
					
					НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
						РеквизитыНоменклатурыПоставщика);
					
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
						РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
					
					Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
						РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
						РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
					КонецЕсли;
					СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
					ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара);
					
					Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
					Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
						СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
						СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
					Конецесли;
				КонецЕсли;
				
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
					РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
				
				ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТОРГ12ПокупательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНП.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНП.ПолучилГруз <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвТНП.ПолучилГруз.ДатаПолуч;
		ДатаПолучения = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.НомДоверен);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем <> Неопределено Тогда
				ВспомСтруктура = Новый Структура;
				ВспомСтруктура.Вставить("Организация", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.НаимОргКем);
				ВспомСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДолжнКем);
				ВспомСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО <> Неопределено Тогда
					ВспомСтруктура.Вставить("ФИО", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Фамилия + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Имя + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Отчество);
				КонецЕсли;
				Для Каждого Элемент Из ВспомСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому <> Неопределено Тогда
				ВспомСтруктура = Новый Структура;
				ВспомСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.Должн);
				ВспомСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО <> Неопределено Тогда
					ВспомСтруктура.Вставить("ФИО", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Фамилия + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Имя + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Отчество);
				КонецЕсли;
				Для Каждого Элемент Из ВспомСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.Должность);
			Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялФИО", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Фамилия + " "
					+ ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Имя + " " + ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.Должность);
			Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Фамилия + " "
					+ ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Имя + " " + ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьНакладнуюXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	// Валюта, курс
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		Если Не ВалютаXDTO = Неопределено Тогда
			СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
			Если СвойствоКодОКВ <> Неопределено Тогда
				КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
				
				ДопРеквизиты = Новый Структура;
				ДопРеквизиты.Вставить("Код", КодВалюты);
				Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, КодВалюты, "Код валюты: "+КодВалюты,
					Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
				
			КонецЕсли;
			
			СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
			Если СвойствоКурс <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("СуммаВсего");
	Если СвойствоЭД <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Грузоотправитель");
	Если СвойствоЭД <> Неопределено Тогда
		Грузоотправитель = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Грузополучатель");
	Если СвойствоЭД <> Неопределено Тогда
		Грузополучатель = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеКонтрагента(Грузополучатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Поставщик");
	Если СвойствоЭД <> Неопределено Тогда
		Поставщик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Плательщик");
	Если СвойствоЭД <> Неопределено Тогда
		Плательщик = ЭД.Получить(СвойствоЭД);
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Основание");
	Если СвойствоЭД<>Неопределено Тогда
		Основание = ЭД.Получить(СвойствоЭД);
		Если НЕ Основание=Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Основание.ДатаДокументаОснования);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", Основание.НомерДокументаОснования);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ОКУД");
	Если СвойствоЭД<>Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКУД", ЭД.Получить(СвойствоЭД));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
		КоличествоЗаписей = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоЗаписей");
		Если КоличествоЗаписей<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ИтогоПоДокументуXDTO.Получить(КоличествоЗаписей));
		КонецЕсли;
		КоличествоМест = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоМест");
		Если КоличествоМест<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ИтогоПоДокументуXDTO.Получить(КоличествоМест));
		КонецЕсли;
		СуммаБезНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаБезНДС");
		Если СуммаБезНДС<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаБезНДС", ИтогоПоДокументуXDTO.Получить(СуммаБезНДС));
		КонецЕсли;
		СуммаНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНДС");
		Если СуммаНДС<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ИтогоПоДокументуXDTO.Получить(СуммаНДС));
		КонецЕсли;
		СуммаСУчетомНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаСУчетомНДС");
		Если СуммаНДС<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ИтогоПоДокументуXDTO.Получить(СуммаСУчетомНДС));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогиПрописью");
	Если СвойствоЭД <> Неопределено Тогда
		ИтогиПрописьюXDTO = ЭД.Получить(СвойствоЭД);
		КоличествоЗаписейПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоЗаписейПрописью");
		Если КоличествоЗаписейПрописью<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ИтогоПоДокументуXDTO.Получить(
				КоличествоЗаписейПрописью));
		КонецЕсли;
		КоличествоМестПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоМестПрописью");
		Если КоличествоМестПрописью<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ИтогоПоДокументуXDTO.Получить(КоличествоМестПрописью));
		КонецЕсли;
		СуммаВсегоПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаВсегоПрописью");
		Если СуммаВсегоПрописью<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ИтогоПоДокументуXDTO.Получить(СуммаВсегоПрописью));
		КонецЕсли;
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьКаталогXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
	
	// Заполняем данные о владельце каталога.
	// Контрагент
	Элемент = ЭД.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда 
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя + "_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента,
		РеквизитыКонтрагента, ЭД.Ид);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДатаФормирования);
	
	ЗнДопАналитики = ВернутьДопАналитикуКонтрагента(Контрагент, "Партнер");
	Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
		НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: " +
			ЗнДопАналитики.Код, ЗнДопАналитики, Новый Структура(), ДеревоРазбора, Ошибка);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
	КонецЕсли;
	
	// Заполняем данные о товарах каталога.
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьПрайсXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена.
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.ДействительноС);
	
	// Контрагент
	Элемент = ЭД.Владелец;
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП.
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
			РеквизитыУчастника = ЗнДанных;
			Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
				РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
				Если РеквизитУчастника <> Неопределено Тогда
					Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
						
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя+"_Представление", РеквизитУчастника.Представление);
					ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
						ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
						
						РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
					Иначе
						РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента, РеквизитыКонтрагента, ЭД.Ид);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДействительноС);
	
	ЗнДопАналитики = ВернутьДопАналитикуКонтрагента(Контрагент, "Партнер");
	Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
		НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
			+ ЗнДопАналитики.Код, ЗнДопАналитики, Новый Структура(), ДеревоРазбора, Ошибка);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
	КонецЕсли;
	
	// Товары
	Предложения = ЭД.Предложения.ПолучитьСписок("Предложение");
	Для Каждого Элемент Из Предложения Цикл
		
		СписокТЧ = Новый СписокЗначений;
		НаименованиеТовара = "";
		ИдТовара           = "";
		АртикулТовара      = "";
		
		// Номенклатура.
		РеквизитыНоменклатуры = Новый Структура;
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ЭлектронныеДокументыСлужебный.ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			
			ЗнДанных = Элемент[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			// Разберем свойства Товара.
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ЗнДанных);
				ИдТовара = ЗнДанных;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
				РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Наименование", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
				РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				РеквизитыНоменклатурыПоставщика.Вставить("Артикул", ЗнДанных);
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
				Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					РеквизитыЕдИзм = Новый Структура;
					РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм,
						РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
					Если ЗначениеЗаполнено(ЕдИзм) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
				Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					РеквизитыЕдИзм = Новый Структура;
					РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					
					ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
					НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм,
						РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						
					Если ЗначениеЗаполнено(ЕдИзм) Тогда
						СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Упаковка");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		РеквизитыНоменклатурыПоставщика.Вставить("Наименование", РеквизитыНоменклатуры.Наименование);
		НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ИдТовара,
			РеквизитыНоменклатурыПоставщика, ЭД.Ид);
		
		НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, РеквизитыНоменклатурыПоставщика.Наименование,
			НоменклатураПоставщика, РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика,
			СтруктураРеквизитовТовара, ЭД.Ид);
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
		Конецесли;
		
		
		НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара,
			РеквизитыНоменклатурыПоставщика.Наименование, Номенклатура, РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
		
		ЗначениеЦены = 0;
		ЕдиницаИзмерения = "";
		Цены = Элемент.Цены.ПолучитьСписок("Цена");
		Для Каждого Цена Из Цены Цикл
			ЗначениеЦены = Цена.Цена;
			СписокТЧ.Добавить(ЗначениеЦены, "Цена");
			ЗнДанных = Цена.ЕдиницаИзмерения;
			
			РеквизитыЕдИзм = Новый Структура;
			РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
			РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
			СвойствоКоличество = Цена.Свойства().Получить("МинКоличество");
			Если СвойствоКоличество<>Неопределено Тогда
				СписокТЧ.Добавить(Цена.МинКоличество, "Количество");
			КонецЕсли;
			ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм,
				РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
			Если ЗначениеЗаполнено(ЕдИзм) Тогда
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Упаковка");
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьСчетНаОплатуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("РеквизитыПолучателя");
	РеквизитыПолучателя = ЭД.Получить(СвойствоЭД);
	ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РеквизитыПолучателя, ДеревоРазбора, "БанковскиеСчетаКонтрагентов",
		"Продавец", , Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("НазначениеПлатежа");
	НазначениеПлатежа = ЭД.Получить(СвойствоЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", НазначениеПлатежа);
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаОкончанияДействияСчета");
	ДатаОкончанияДействияСчета = ЭД.Получить(СвойствоЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОкончанияДействияСчета", ДатаОкончанияДействияСчета);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
		Если СвойствоКодОКВ <> Неопределено Тогда 
			КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
		Если СвойствоКурс <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Поставщик");
	Поставщик = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Покупатель");
	Покупатель = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
	СуммаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаИтог");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог", ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	СвойствоСуммаНалогаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНалогаИтог");
	Если СвойствоСуммаНалогаИтог <> Неопределено Тогда
		СуммаНалогаИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаНалогаИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	КонецЕсли;
	
	СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
	Если СвойствоЦенаВключаетНДС <> Неопределено Тогда
		ЦенаВключаетНДС =  ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	Если СвойствоЭД <> Неопределено И ЭД.Получить(СвойствоЭД) <> Неопределено Тогда
		НаборДанных = ЭД["Товары"].Товар;
		ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Руководитель");
	Если СвойствоЭД <> Неопределено Тогда
		Руководитель = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Руководитель", Руководитель.ПолноеНаименование);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Бухгалтер");
	Если СвойствоЭД <> Неопределено Тогда
		Бухгалтер = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Бухгалтер", Бухгалтер.ПолноеНаименование);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");
	Если СвойствоЭД <> Неопределено Тогда
		Для Каждого ДокументОснованияXDTO ИЗ ЭД.ДокументОснования Цикл
			СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
			Если СвойствоНомерДокументаОснования <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДокументаОснования",ДокументОснованияXDTO.НомерДокументаОснования);
			КонецЕсли;
			СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
			Если СвойствоДатаДокументаОснования <> Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДокументаОснования",ДокументОснованияXDTO.ДатаДокументаОснования);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗаказXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	
	Если ЭД.Роль = "Покупатель" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
	ИначеЕсли ЭД.Роль = "Продавец" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Исполнитель");
	Исполнитель = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ЭД.Роль);
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Если ЭД.Роль = "Покупатель" Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли ЭД.Роль = "Продавец" Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Заказчик");
	Заказчик = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		Если ЭД.Роль = "Покупатель" Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
		ИначеЕсли ЭД.Роль = "Продавец" Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
		КонецЕсли;
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ЭД.Роль);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);
	СуммаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаИтог");
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог", ИтогоПоДокументуXDTO.Получить(СуммаИтог));
	СвойствоСуммаНалогаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНалогаИтог");
	Если СвойствоСуммаНалогаИтог <> Неопределено Тогда
		СуммаНалогаИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаНалогаИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	КонецЕсли;
	
	СвойствоСуммаБезСкидкиИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаБезСкидкиИтог");
	Если СвойствоСуммаБезСкидкиИтог <> Неопределено Тогда
		СуммаБезСкидкиИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаБезСкидкиИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаБезСкидкиИтог", СуммаБезСкидкиИтог);
	КонецЕсли;
	
	СвойствоСуммаСкидкиИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаСкидкиИтог");
	Если СвойствоСуммаСкидкиИтог <> Неопределено Тогда
		СуммаСкидкиИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаСкидкиИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСкидкиИтог", СуммаСкидкиИтог);
	КонецЕсли;
	
	СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");
	Если СвойствоЦенаВключаетНДС <> Неопределено Тогда
		ЦенаВключаетНДС = ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");
	Если СвойствоЭД <> Неопределено Тогда
		Для Каждого ДокументОснованияXDTO ИЗ ЭД.ДокументОснования Цикл
			СвойствоНаименованиеДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НаименованиеДокументаОснования");
			Если СвойствоНаименованиеДокументаОснования <> Неопределено Тогда
				Если ДокументОснованияXDTO.НаименованиеДокументаОснования = "По данным клиента" Тогда
					СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
					Если СвойствоНомерДокументаОснования <> Неопределено Тогда
						ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента",ДокументОснованияXDTO.НомерДокументаОснования);
					КонецЕсли;
					СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
					Если СвойствоДатаДокументаОснования <> Неопределено Тогда
						ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента",ДокументОснованияXDTO.ДатаДокументаОснования);
					КонецЕсли;
				ИначеЕсли ДокументОснованияXDTO.НаименованиеДокументаОснования = "По данным поставщика" Тогда
					СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
					Если СвойствоНомерДокументаОснования <> Неопределено Тогда
						ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымПоставщика",ДокументОснованияXDTO.НомерДокументаОснования);
					КонецЕсли;
					СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
					Если СвойствоДатаДокументаОснования <> Неопределено Тогда
						ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымПоставщика",ДокументОснованияXDTO.ДатаДокументаОснования);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
		Если СвойствоКодОКВ <> Неопределено Тогда 
			КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
			НайденныйТипВДереве  = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
		Если СвойствоКурс <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комментарий");
	Если СвойствоЭД <> Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДополнительнаяИнформация", ЭД.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Комитент");
	Комитент = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда		
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комиссионер");
	Комиссионер = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументу = ЭД.Получить(СвойствоЭД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогоПоДокументу", ИтогоПоДокументу);
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
		Если СвойствоКодОКВ <> Неопределено Тогда
			КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
		Если СвойствоКурс <> Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	
	СвойствоЭД = ЭД.Свойства().Получить("Комитент");
	Комитент = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комиссионер");
	Комиссионер = ЭД.Получить(СвойствоЭД);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	НаборДанных = ЭД["Товары"].Товар;
	ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");
	ИтогоПоДокументу = ЭД.Получить(СвойствоЭД);
	СвойствоСуммаКомитентаИтог = ИтогоПоДокументу.Свойства().Получить("СуммаКомитентаИтог");
	СуммаКомитентаИтог = ИтогоПоДокументу.Получить(СвойствоСуммаКомитентаИтог);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаКомитента", СуммаКомитентаИтог);
	СвойствоСуммаПродажиИтог = ИтогоПоДокументу.Свойства().Получить("СуммаПродажиИтог");
	СуммаПродажиИтог = ИтогоПоДокументу.Получить(СвойствоСуммаПродажиИтог);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаПродажиИтог);
	СвойствоСуммаВознагражденияИтог = ИтогоПоДокументу.Свойства().Получить("СуммаВознагражденияИтог");
	Если СвойствоСуммаВознагражденияИтог <> Неопределено Тогда
		СуммаВознагражденияИтог = ИтогоПоДокументу.Получить(СвойствоСуммаВознагражденияИтог);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВознаграждения", СуммаВознагражденияИтог);
	КонецЕсли;
	
	СвойствоПроцент = ИтогоПоДокументу.Свойства().Получить("Процент");
	Если СвойствоПроцент <> Неопределено Тогда
		Процент = ИтогоПоДокументу.Получить(СвойствоПроцент);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПроцентВознаграждения", Процент);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		ВалютаXDTO = ЭД.Получить(СвойствоЭД);
		СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");
		Если СвойствоКодОКВ<>Неопределено Тогда 
			КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);
			НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");
		Если СвойствоКурс<>Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаНачала");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаНачала = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НачалоПериода", ДатаНачала);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаКонца");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаКонца = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КонецПериода", ДатаКонца);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ФормаОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ФормаОплаты = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФормаОплаты",
			ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ФормыОплаты", ФормаОплаты));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("СпособРасчета");
	Если СвойствоЭД <> Неопределено Тогда
		СпособРасчета = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СпособРасчетаВознаграждения",
			ЭлектронныеДокументыПовтИсп.НайтиПеречисление("СпособРасчета", СпособРасчета));
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СпособРасчетаВознаграждения",
			ЭлектронныеДокументыПовтИсп.НайтиПеречисление("СпособРасчета", "Не рассчитывается"));
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДатаОплаты");
	Если СвойствоЭД <> Неопределено Тогда
		ДатаОплаты = ЭД.Получить(СвойствоЭД);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПлатежа", ДатаОплаты);
	КонецЕсли;	
	
	СвойствоЭД = ЭД.Свойства().Получить("Услуга");
	Если СвойствоЭД <> Неопределено Тогда
		Услуга = ЭД.Получить(СвойствоЭД);
		СвойствоНалог = Услуга.Свойства().Получить("Налог");
		Если СвойствоНалог <> Неопределено Тогда
			Налог = Услуга.Получить(СвойствоНалог);
			Если ВРег(Налог.ТипНалога) = "НДС" Тогда
				
				СвойствоВеличинаСтавкиНалога = Налог.Свойства().Получить("ВеличинаСтавкиНалога");
				Если СвойствоВеличинаСтавкиНалога <> Неопределено Тогда
					СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтавкаНДСВознаграждения", СтавкаНалога);
				КонецЕсли;
				
				СвойствоСумма = Налог.Свойства().Получить("Сумма");
				Если СвойствоСумма <> Неопределено Тогда
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДСВознаграждения", Налог.Сумма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПлатежа", ДатаОплаты);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвСчФакт.НомерСчФ);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ЭД.Документ.СвСчФакт.ДатаСчФ));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалКод", ЭД.Документ.СвСчФакт.КодОКВ);
	Если НЕ ЭД.Документ.СвСчФакт.ИспрСчФ = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИспрНом", ЭД.Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИспрДата", ДатаИзСтроки(ЭД.Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ));
	КонецЕсли;
	Если Не ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвФЛ = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Продавец", ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвФЛ.ФИОИП.Фамилия + " "
			+ ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвФЛ.ФИОИП.Имя + " " + ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвФЛ.ФИОИП.Отчество);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецФизЛицо", Истина);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецИНН", ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвФЛ.ИННФЛ);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Продавец", ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвЮЛ.НаимОрг);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецИНН", ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвЮЛ.ИННЮЛ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецКПП", ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвЮЛ.КПП);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецФизЛицо", Ложь);
	КонецЕсли;
	Если НЕ ЭД.Документ.СвСчФакт.СвПрод.Адрес.АдрИно = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецАдрес", ЭД.Документ.СвСчФакт.СвПрод.Адрес.АдрИно.АдрТекст);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецКодСтраны", ЭД.Документ.СвСчФакт.СвПрод.Адрес.АдрИно.КодСтр);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецАдрес", СоставнойАдрес(ЭД.Документ.СвСчФакт.СвПрод.Адрес.АдрРФ));
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.ГрузОт = Неопределено Тогда
		Если НЕ ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр = Неопределено Тогда
			Если НЕ ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.НаимОрг = Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.НаимОрг);
			Иначе	
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель", 
				ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Фамилия + " " + ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Имя
					+ " " + ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Отчество);
			КонецЕсли;
			Если Не ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно = Неопределено Тогда
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительАдрес", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст);
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительКодСтраны", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно.КодСтр);
			Иначе
				ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительАдрес", СоставнойАдрес(ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрРФ));
			КонецЕсли
		ИначеЕсли НЕ ЭД.Документ.СвСчФакт.ГрузОт.ОнЖе = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель", "он же");
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч = Неопределено Тогда
		Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.НаимОрг = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузополучатель", ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.НаимОрг);
		Иначе	
			ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД, 
			"Грузополучатель", 
			ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Фамилия + " " + ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Имя
				+ " " + ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Отчество);
		КонецЕсли;
		
		Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно = Неопределено Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательАдрес", ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно.АдрТекст);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательКодСтраны", ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно.КодСтр);
		Иначе
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательАдрес", СоставнойАдрес(ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрРФ));
		КонецЕсли
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.СвПРД = Неопределено И ЭД.Документ.СвСчФакт.СвПРД.Количество() > 0 Тогда
		ПлатежныеДокументы = "";
		ПервыйЭлемент = Истина;
		Для Каждого СтрокаПлатежа Из ЭД.Документ.СвСчФакт.СвПРД Цикл
			ПлатежныеДокументы = ПлатежныеДокументы + ?(ПервыйЭлемент,"",", № ") + СтрокаПлатежа.НомерПРД + " от " + СтрокаПлатежа.ДатаПРД;
			ПервыйЭлемент = Ложь;
		КонецЦикла;
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлатежныйДокумент", ПлатежныеДокументы);
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвФЛ = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Покупатель", ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвФЛ.ФИОИП.Фамилия + " "
			+ ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвФЛ.ФИОИП.Имя + " " + ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвФЛ.ФИОИП.Отчество);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательФизЛицо", Истина);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Покупатель", ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвЮЛ.НаимОрг);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательИНН", ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвЮЛ.ИННЮЛ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательКПП", ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвЮЛ.КПП);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательФизЛицо", Ложь);	
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.СвПокуп.Адрес.АдрИно = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательАдрес", ЭД.Документ.СвСчФакт.СвПокуп.Адрес.АдрИно.АдрТекст);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательКодСтраны", ЭД.Документ.СвСчФакт.СвПокуп.Адрес.АдрИно.КодСтр);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательАдрес", СоставнойАдрес(ЭД.Документ.СвСчФакт.СвПокуп.Адрес.АдрРФ));
	КонецЕсли;
	
	
	Если НЕ ЭД.Документ.СвСчФакт.ИнфПол = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстИнф", ЭД.Документ.СвСчФакт.ИнфПол.ТекстИнф);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдФайлИнфПол", ЭД.Документ.СвСчФакт.ИнфПол.ИдФайлИнфПол);
	КонецЕсли;
	
	Если Не ЭД.Документ.Подписант.ИП = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИП", ЭД.Документ.Подписант.ИП.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ИП.ФИО.Имя + " " + ЭД.Документ.Подписант.ИП.ФИО.Отчество);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННФЛ", ЭД.Документ.Подписант.ИП.ИННФЛ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантСвГосРегИП", ЭД.Документ.Подписант.ИП.СвГосРегИП);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантЮЛ", ЭД.Документ.Подписант.ЮЛ.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ЮЛ.ФИО.Имя + " " + ЭД.Документ.Подписант.ЮЛ.ФИО.Отчество);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННЮЛ", ЭД.Документ.Подписант.ЮЛ.ИННЮЛ);
	КонецЕсли;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДС",ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовБезНДСВсего);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНал", ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДС",     СуммаНДССФПривестиКТребуемомуФормату(
		ЭД.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.СумНДС));
	
	Для каждого Товар ИЗ ЭД.Документ.ТаблСчФакт.СведТов Цикл
		
		СписокТЧ = Новый СписокЗначений;
		СписокТЧ.Добавить(Товар.НомСтр,         "НомСтр");
		СписокТЧ.Добавить(Товар.НаимТов,        "НаимТов");
		СписокТЧ.Добавить(Товар.ОКЕИ_Тов,       "ОКЕИ_Тов");
		СписокТЧ.Добавить(Товар.КолТов,         "КолТов");
		СписокТЧ.Добавить(Товар.ЦенаТов,        "ЦенаТов");
		СписокТЧ.Добавить(Товар.СтТовБезНДС,    "СтТовБезНДС");
		СписокТЧ.Добавить(Товар.СтТовУчНал,     "СтТовУчНал");
		СписокТЧ.Добавить(Товар.ИнфПолСтр,      "ТовДопСв");
		СписокТЧ.Добавить(Товар.НалСт.НалСтВел, "НалСтВел");
		СписокТЧ.Добавить(Товар.НалСт.НалСтТип, "НалСтТип");
		СписокТЧ.Добавить(Товар.Акциз.СумАкциз, "СумАкциз");
		СписокТЧ.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНал.СумНДС), "СумНДС");
		
		Если НЕ Товар.НомерТД = Неопределено И Товар.НомерТД.Количество() > 0 Тогда
			НомераТД = "";
			Для Каждого СтрокаТД Из Товар.НомерТД Цикл
				НомераТД = НомераТД + СтрокаТД + ", ";
			КонецЦикла;
			СписокТЧ.Добавить(НомераТД, "НомерТД");
		КонецЕсли;
		
		Если НЕ Товар.КодПроисх = Неопределено И Товар.КодПроисх.Количество() > 0 Тогда
			СписокТЧ.Добавить(Товар.КодПроисх[0], "КодПроисх");
		КонецЕсли;
		
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьКорректировочныйСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	НовыйЭД.ОписаниеОбъекта = "Корректировочный";
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвКСчФ.НомерКСчФ);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаКСчФ));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерСчетаФактуры", ЭД.Документ.СвКСчФ.НомерСчФ);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСчетаФактуры", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаСчФ));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалКод", ЭД.Документ.СвКСчФ.КодОКВ);
	Если НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрКСчФ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИспрКСчФ = Неопределено  Тогда
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправления", ЭД.Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправления", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ));
	КонецЕсли;
	Если НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрСчФ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИспрСчФ = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправленияСчетаФактуры", ЭД.Документ.СвКСчФ.ИспрСчФ.НомИспрСчФ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправленияСчетаФактуры", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрСчФ.ДатаИспрСчФ));
	КонецЕсли;
	Если Не ЭД.Документ.СвКСчФ.СвПрод.ИдСв.Свойства().Получить("СвФЛ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвФЛ = Неопределено  Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Продавец", ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвФЛ.ФИОИП.Фамилия + " "
			+ ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвФЛ.ФИОИП.Имя + " " + ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвФЛ.ФИОИП.Отчество);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецФизЛицо", Истина);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Продавец", ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвЮЛ.НаимОрг);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецИНН", ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвЮЛ.ИННЮЛ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецКПП", ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвЮЛ.КПП);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецФизЛицо", Ложь);
	КонецЕсли;
	Если Не ЭД.Документ.СвКСчФ.СвПрод.Адрес.Свойства().Получить("АдрИно") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.СвПрод.Адрес.АдрИно = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецАдрес", ЭД.Документ.СвКСчФ.СвПрод.Адрес.АдрИно.АдрТекст);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецКодСтраны", ЭД.Документ.СвКСчФ.СвПрод.Адрес.АдрИно.КодСтр);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецАдрес", СоставнойАдрес(ЭД.Документ.СвКСчФ.СвПрод.Адрес.АдрРФ));
	КонецЕсли;
	
	Если Не ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.Свойства().Получить("СвФЛ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвФЛ = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Покупатель", ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвФЛ.ФИОИП.Фамилия + " "
			+ ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвФЛ.ФИОИП.Имя + " " + ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвФЛ.ФИОИП.Отчество);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательФизЛицо", Истина);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Покупатель", ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвЮЛ.НаимОрг);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательИНН", ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвЮЛ.ИННЮЛ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательКПП", ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвЮЛ.КПП);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательФизЛицо", Ложь);
	КонецЕсли;
	
	Если Не ЭД.Документ.СвКСчФ.СвПокуп.Адрес.Свойства().Получить("АдрИно") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.СвПокуп.Адрес.АдрИно = Неопределено Тогда
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательАдрес", ЭД.Документ.СвКСчФ.СвПокуп.Адрес.АдрИно.АдрТекст);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательКодСтраны", ЭД.Документ.СвКСчФ.СвПокуп.Адрес.АдрИно.КодСтр);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательАдрес", СоставнойАдрес(ЭД.Документ.СвКСчФ.СвПокуп.Адрес.АдрРФ));
	КонецЕсли;
	
	Если Не ЭД.Документ.СвКСчФ.Свойства().Получить("ИнфПол") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИнфПол = Неопределено Тогда
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстИнф", ЭД.Документ.СвКСчФ.ИнфПол.ТекстИнф);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдФайлИнфПол", ЭД.Документ.СвКСчФ.ИнфПол.ИдФайлИнфПол);
	КонецЕсли;
	
	Если Не ЭД.Документ.Подписант.Свойства().Получить("ИП") = Неопределено 
		И НЕ ЭД.Документ.Подписант.ИП = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИП", ЭД.Документ.Подписант.ИП.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ИП.ФИО.Имя + " " + ЭД.Документ.Подписант.ИП.ФИО.Отчество);
			
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННФЛ", ЭД.Документ.Подписант.ИП.ИННФЛ);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантСвГосРегИП", ЭД.Документ.Подписант.ИП.СвГосРегИП);
	Иначе
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантЮЛ", ЭД.Документ.Подписант.ЮЛ.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ЮЛ.ФИО.Имя + " " + ЭД.Документ.Подписант.ЮЛ.ФИО.Отчество);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННЮЛ", ЭД.Документ.Подписант.ЮЛ.ИННЮЛ);
	КонецЕсли;
	
	Если НЕ ЭД.Документ.ТаблКСчФ.Свойства().Получить("ВсегоУвел") = Неопределено
		И НЕ ЭД.Документ.ТаблКСчФ.ВсегоУвел = Неопределено Тогда
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДСВсегоУвел", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовБезНДСВсего);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНалВсегоУвел", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовУчНалВсего);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДСУвел", СуммаНДССФПривестиКТребуемомуФормату(
			ЭД.Документ.ТаблКСчФ.ВсегоУвел.СумНал.СумНДС));
	КонецЕсли;
	
	Если НЕ ЭД.Документ.ТаблКСчФ.Свойства().Получить("ВсегоУм") = Неопределено
		И НЕ ЭД.Документ.ТаблКСчФ.ВсегоУм = Неопределено Тогда
		
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДСВсегоУм", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовБезНДСВсего);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНалВсегоУм", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовУчНалВсего);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДСУм", СуммаНДССФПривестиКТребуемомуФормату(
			ЭД.Документ.ТаблКСчФ.ВсегоУм.СумНал.СумНДС));
	КонецЕсли;
	
	Для каждого Товар ИЗ ЭД.Документ.ТаблКСчФ.СведТов Цикл
		
		СписокТЧ = Новый СписокЗначений;
		СписокТч.Добавить(Товар.НомСтр,	"НомСтр");
		СписокТч.Добавить(Товар.НаимТов, "НаимТов");
		Если НЕ Товар.Свойства().Получить("ОКЕИ_ТовДо") = Неопределено Тогда
			СписокТч.Добавить(Товар.ОКЕИ_ТовДо, "ОКЕИ_ТовДо");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ОКЕИ_ТовПосле") = Неопределено Тогда
			СписокТч.Добавить(Товар.ОКЕИ_ТовПосле, "ОКЕИ_ТовПосле");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("КолТовДо") = Неопределено Тогда
			СписокТч.Добавить(Товар.КолТовДо, "КолТовДо");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("КолТовПосле") = Неопределено Тогда
			СписокТч.Добавить(Товар.КолТовПосле, "КолТовПосле");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ЦенаТовДо") = Неопределено Тогда
			СписокТч.Добавить(Товар.ЦенаТовДо, "ЦенаТовДо");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ЦенаТовПосле") = Неопределено Тогда
			СписокТч.Добавить(Товар.ЦенаТовПосле, "ЦенаТовПосле");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ИнфПолСтр") = Неопределено Тогда
			СписокТч.Добавить(Товар.ИнфПолСтр, "ИнфПолСтр");
		КонецЕсли;
		
		Если НЕ Товар.Свойства().Получить("СтТовБезНДС") = Неопределено
			И НЕ Товар.СтТовБезНДС = Неопределено Тогда
			СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимДоИзм, "СтТовБезНДСДоИзм");
			СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимПослеИзм, "СтТовБезНДСПослеИзм");
			Если НЕ Товар.СтТовБезНДС.Свойства().Получить("СтоимУвел") = Неопределено Тогда
				СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимУвел, "СтТовБезНДСУвел");
			КонецЕсли;
			Если НЕ Товар.СтТовБезНДС.Свойства().Получить("СтоимУм") = Неопределено Тогда
				СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимУм, "СтТовБезНДСУм");
			КонецЕсли;
		КонецЕсли;
		
		СписокТч.Добавить(Товар.АкцизДо.СумАкциз, "АкцизДо");
		СписокТч.Добавить(Товар.АкцизПосле.СумАкциз, "АкцизПосле");
		СписокТч.Добавить(Товар.АкцизРазн.СумУвел, "АкцизУвел");
		СписокТч.Добавить(Товар.АкцизРазн.СумУм, "АкцизУм");
		СписокТч.Добавить(Товар.НалСтДо.НалСтВел, "НалСтВелДо");
		СписокТч.Добавить(Товар.НалСтДо.НалСтТип, "НалСтТипДо");
		СписокТч.Добавить(Товар.НалСтПосле.НалСтВел, "НалСтВелПосле");
		СписокТч.Добавить(Товар.НалСтПосле.НалСтТип, "НалСтТипПосле");
		СписокТч.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНалДо.СумНДС), "СумНДСДо");
		СписокТч.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНалПосле.СумНДС), "СумНДСПосле");
		СписокТч.Добавить(Товар.СумНалРазн.СумУвел, "СумНДСУвел");
		СписокТч.Добавить(Товар.СумНалРазн.СумУм, "СумНДСУм");
		СписокТч.Добавить(Товар.СтТовУчНал.СтоимДоИзм, "СтТовУчНалДоИзм");
		СписокТч.Добавить(Товар.СтТовУчНал.СтоимПослеИзм, "СтТовУчНалПослеИзм");
		Если НЕ Товар.СтТовУчНал.Свойства().Получить("СтоимУвел") = Неопределено Тогда
			СписокТч.Добавить(Товар.СтТовУчНал.СтоимУвел, "СтТовУчНалУвел");
		КонецЕсли;
		Если НЕ Товар.СтТовУчНал.Свойства().Получить("СтоимУм") = Неопределено Тогда
			СписокТч.Добавить(Товар.СтТовУчНал.СтоимУм, "СтТовУчНалУм");
		КонецЕсли;
		
		ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
КонецПроцедуры

// Получает данные электронного документа из файла, заполняет дерево значений для загрузки в ИБ,
// создает/изменяет необходимые объекты ИБ.
// 
// Параметры:
//  СтруктураПараметров - структура параметров для разбора электронного документа, 
//  ДеревоРазбора - дерево значений, структура данных для загрузки в ИБ,
//  НаправлениеЭД - направление электронного документа, требующего разбора.
//
// Возвращаемое значение:
//  Структура параметров с реквизитами созданных/измененных объектов ИБ
//
Функция ПолучитьДанныеИзФайла(СтруктураПараметров, ДеревоРазбора, НаправлениеЭД = Неопределено)
	
	Если НЕ СтруктураПараметров.Свойство("ПолноеИмяФайла") Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВладелецЭД") Тогда
		СсылкаНаВладельца = СтруктураПараметров.ВладелецЭД;
	Иначе
		СсылкаНаВладельца = Неопределено;
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	КонецЕсли;
	НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	
	ФайлДопДанных = "";
	ДеревоДопДанных = Неопределено;
	Если СтруктураПараметров.Свойство("ФайлДопДанных", ФайлДопДанных) Тогда
		ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ФайлДопДанных);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
		СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Результат = ПрочитатьФайлCMLпоXDTO(СтруктураПараметров.ПолноеИмяФайла, ДеревоРазбора, НовыйЭД, Истина);
	Если Результат Тогда
		// Заполним ссылки на объекты из дерева соответствий, если ссылок нет,
		// тогда будем создавать объекты
		ОшибкаЗаписи = Ложь;
		ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
		
		Попытка
			СсылкаНаВладельца = ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоРазбора,
				СсылкаНаВладельца);
		Исключение
			ОшибкаЗаписи = Истина;
		КонецПопытки;
		
		// Дозаполняем структуру параметров из файла данных.
		СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаВладельца);
		СтруктураПараметров.Вставить("ВидЭД",      НовыйЭД.ВидЭД);
		НомерЭД = НовыйЭД.ИД;
		Если Не ЗначениеЗаполнено(НомерЭД) Тогда
			УИД = Новый УникальныйИдентификатор;
			НомерЭД = Строка(УИД) + "##1";
		КонецЕсли;
		СтруктураПараметров.Вставить("НомерЭД", НомерЭД);
		НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(НовыйЭД.ИД);
		Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);
		Исключение
		КонецПопытки;
		СтруктураПараметров.Вставить("НомерВерсииЭД", НомерВерсииЭД);
		СтруктураПараметров.Вставить("НаправлениеЭД", НовыйЭД.НаправлениеЭД);
		СтруктураПараметров.Вставить("НомерДокументаОтправителя", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Номер"));
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Дата"));
		ОрганизацияПолучатель = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
		Если ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
			СтруктураПараметров.Вставить("Организация", ОрганизацияПолучатель);
		Иначе
			
		КонецЕсли;
		СтруктураПараметров.Вставить("Контрагент", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент", ДеревоРазбора));
		СтруктураПараметров.Вставить("Загружен",   НЕ ОшибкаЗаписи);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Разбираем строковую конструкцию вида "ИНН_КПП"
//
// Возвращаемое значение:
//  Структура параметров с ИНН и КПП
//
Функция РазобратьИДКонтрагента(Знач СтрокаИД)
	
	ПозицияРазделителя1 = Найти(СтрокаИД, "#");
	СтруктураПоиска = Новый Структура;
	ПозицияРазделителя1 = Найти(СтрокаИД, "_");
	Если ПозицияРазделителя1 > 0 Тогда
		ИНН = Лев(СтрокаИД, ПозицияРазделителя1 - 1);
		КПП = Сред(СтрокаИД, ПозицияРазделителя1 + 1, СтрДлина(СтрокаИД) - ПозицияРазделителя1);
	ИначеЕсли СтрДлина(СтрокаИД) > 0 Тогда
		ИНН = СокрЛП(СтрокаИД);
		КПП = "";
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ИНН", ИНН);
	СтруктураПоиска.Вставить("КПП", КПП);
	
	Возврат СтруктураПоиска;
	
КонецФункции

// Функция преобразует строку в дату и время
//
// Параметры:
//  Зн - строка - дата в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС"
//
// Возвращаемое значение:
//  Значение типа "ДатаВремя"
//
Функция ПолучитьДатуВремяИзСтроки(Зн)
	
	Результат = Неопределено;
	Зн = СтрЗаменить(Зн, "-", "");
	Зн = СтрЗаменить(Зн, ":", "");
	Если СтрДлина(Зн) - Найти(Зн, " ") = 5 Тогда // время в формате Ч:ММ:СС
		Зн = СтрЗаменить(Зн, " ", "0");
	ИначеЕсли Найти(Зн, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		Зн = СтрЗаменить(Зн, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		Зн = СтрЗаменить(Зн, " ", "");
	КонецЕсли;
	
	Попытка
		Результат = Дата(Зн); // дата и время в виде "ГГГГММДДЧЧММСС"
	Исключение
		Попытка
			Результат = Дата(Лев(Зн, 8)); // только дата "ГГГГММДД"
		Исключение
		КонецПопытки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьФайлCMLпоXDTO(ИмяФайла, ДеревоРазбора, НовыйЭД, ПоказыватьОшибки = Ложь)
	
	ОбъектXML = Новый ЧтениеXML;
	Ошибка = Ложь;
	НеизвестныйЭД = Ложь;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		ЕстьСвойствоИдФайл = ЭД.Свойства().Получить("ИдФайл") <> Неопределено;
		
		Если ЕстьСвойствоИдФайл Тогда //чтение файлов без namespace
			// Обрабатываем случай когда к нам пришел сторонний XML файл.
			Если НЕ ЗначениеЗаполнено(ОбъектXML.URIПространстваИмен) Тогда
				
				// Вставляем во временный файл ЭД пространство имен 1С.
				ДобавитьПространствоИмен1СВоВнешнийФайлЭД(ОбъектXML, ЭД, ИмяФайла);
			КонецЕсли;
			
			Если Найти(ЭД.ИдФайл, "ON_SFAKT") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "SFAKT"));
				ПрочитатьСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "ON_KORSFAKT") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "KORSFAKT"));
				ПрочитатьКорректировочныйСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "OTORG12") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "OTORG12"));
				ПрочитатьТОРГ12XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "PTORG12") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "PTORG12"));
				ПрочитатьТОРГ12ПокупательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "IAKTPRM") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "IAKTPRM"));
				ПрочитатьАкт501XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "ZAKTPRM") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "ZAKTPRM"));
				ПрочитатьАкт501ЗаказчикXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "DP_IZVPOL") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "DP_IZVPOL"));
				ПрочитатьИзвещениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "DP_UVUTOCH") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "DP_UVUTOCH"));
				ПрочитатьУточнениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "POD_DPIZVPOL") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "DP_IZVPOL"));
				ПрочитатьПодтверждениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "DP_PDOTPR") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,ПолучитьТипЗначенияCML("Файл", "DP_PDOTPR"));
				ПрочитатьПодтверждениеДатыОтправкиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "DP_PDPOL") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "DP_PDPOL"));
				ПрочитатьПодтверждениеДатыПолученияXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			ИначеЕсли Найти(ЭД.ИдФайл, "POD") > 0 Тогда
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "PDO"));
				ПрочитатьПодтверждениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
			Иначе
				НеизвестныйЭД = Истина;
			КонецЕсли;
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02") Тогда
			ПрочитатьКаталогXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
			ПрочитатьПрайсXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02") Тогда
			ПрочитатьАктОПриемкеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02") Тогда
			ПрочитатьНакладнуюXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02") Тогда
			ПрочитатьСчетНаОплатуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02") Тогда
			ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02") Тогда
			ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		ИначеЕсли ЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
			ПрочитатьЗаказXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		Иначе
			НеизвестныйЭД = Истина;
		КонецЕсли;
		Если НеизвестныйЭД Тогда
			Если ПользователиСервер.ЭтоПолноправныйПользовательИБ() Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1!'"), ИмяФайла);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Ошибка = Истина;
		КонецЕсли;
	Исключение
		Ошибка = Истина;
		Если ПользователиСервер.ЭтоПолноправныйПользовательИБ() ИЛИ ПоказыватьОшибки Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИмяФайла, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	Возврат НЕ Ошибка;
	
КонецФункции

Функция ВернутьДопАналитикуКонтрагента(Контрагент, ДопАналитика)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ Контрагент.Метаданные().Реквизиты.Найти(ДопАналитика) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Контрагент[ДопАналитика]; // Вернем значение Партнера для УТ
	
КонецФункции

Функция СоставнойАдрес(Параметры)
	
	ВозврЗнч = "";
	Для Каждого Свойство ИЗ Параметры.Свойства() Цикл
		Если Свойство.Имя = "Индекс" И ЗначениеЗаполнено(Параметры[Свойство.Имя]) Тогда
			ВозврЗнч = Параметры[Свойство.Имя] + ", ";
		ИначеЕсли Свойство.Имя = "КодРегион" Тогда
			ВозврЗнч = ВозврЗнч + ЭлектронныеДокументыПереопределяемый.НазваниеРегиона(Параметры.КодРегион);
		ИначеЕсли ЗначениеЗаполнено(Параметры[Свойство.Имя]) Тогда
			ПредставлениеПоля = "";
			Если Свойство.Имя = "Дом" Тогда
				ПредставлениеПоля = "дом № ";
			ИначеЕсли Свойство.Имя = "Корпус" Тогда
				ПредставлениеПоля = "корпус ";
			ИначеЕсли Свойство.Имя = "Кварт" Тогда
				ПредставлениеПоля = "кв. ";
			КонецЕсли;
			ВозврЗнч = ВозврЗнч + ", "+ ПредставлениеПоля + Параметры[Свойство.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозврЗнч;
	
КонецФункции

Функция ИнициализироватьДеревоРазбора()
	
	ДеревоРазбора = Новый ДеревоЗначений;
	ДеревоРазбора.Колонки.Добавить("ТипОбъекта");
	ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");
	ДеревоРазбора.Колонки.Добавить("ИндексСтроки");
	ДеревоРазбора.Колонки.Добавить("Реквизит");
	ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");
	ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");
	ДеревоРазбора.Колонки.Добавить("ВидЭД");
	ДеревоРазбора.Колонки.Добавить("ИД");
	ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");
	ДеревоРазбора.Колонки.Добавить("ДопДанные");
	
	Возврат ДеревоРазбора;
	
КонецФункции

Функция ДатаИзСтроки(Строка)
	
	Возврат Дата(Сред(Строка, 7, 4) + Сред(Строка, 4, 2) + Сред(Строка, 1, 2) + "000000");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение дерева объектов разбора и дерева соответствий объектам

Процедура СформироватьТЗПоНаборуДанныхXDTO(ТЗ, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных = Неопределено,
	ЕстьСвойствоИдФайл = Ложь, ИмяТЧ = Неопределено, НомерСтроки = Неопределено)
	
	КС80 = Новый КвалификаторыСтроки(80);
	КС255 = Новый КвалификаторыСтроки(255);
	КС3000 = Новый КвалификаторыСтроки(3000);
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ОписаниеТиповС80 = Новый ОписаниеТипов(МассивСтрока, , КС80);
	ОписаниеТиповС255 = Новый ОписаниеТипов(МассивСтрока, , КС255);
	ОписаниеТиповС3000 = Новый ОписаниеТипов(МассивСтрока, , КС3000);
	МассивТипЭД = Новый Массив;
	МассивТипЭД.Добавить(Тип("СправочникСсылка.ЭДПрисоединенныеФайлы"));
	ОписаниеТиповЭД = Новый ОписаниеТипов(МассивТипЭД);
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("ИД", ОписаниеТиповС80);
	ТЗ.Колонки.Добавить("Артикул", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Наименование", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКод",ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование",ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное",ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение",ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Описание",ОписаниеТиповС3000);
	ТЗ.Колонки.Добавить("ЭД",ОписаниеТиповЭД);
	
	Для Каждого ТекЭлемент Из НаборДанных Цикл
		НовЗапись = ТЗ.Добавить();
		НовЗапись.ЭД = ЭД;
		Если ЕстьСвойствоИдФайл Тогда
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.ИнфПолСтр) Тогда
				Продолжить;
			КонецЕсли;
			Если Найти(ТекЭлемент.ИнфПолСтр, "xml") = 0 Тогда
				НомСтр = ?(ИмяТЧ = "Услуги", Строка(НомерСтроки) + "." + ТекЭлемент.Номер, Строка(ТекЭлемент.НомТов));
				ПрочитатьИнфПол(ТекЭлемент.ИнфПолСтр, ДеревоДопДанных, ИмяТЧ, НомСтр);
				
				Если ДеревоДопДанных <> Неопределено И ДеревоДопДанных.Строки.Количество() > 0 Тогда
					СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяТЧ);
					СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
					Если СтрокиДерева.Количество() > 0 Тогда
						СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомСтр);
						СтрокиДерева = СтрокиДерева[0].Строки.НайтиСтроки(СтруктураПоиска);
						Если СтрокиДерева.Количество() > 0 Тогда
							СтрокаВладелец = СтрокиДерева[0];
							СтрокаИД = СтрокаВладелец.Строки.Найти("ИД", "ИмяРеквизита");
							СтрокаБЕНаименованиеПолное = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименованиеПолное", "ИмяРеквизита");
							СтрокаБЕМСокращение = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаМеждународноеСокращение", "ИмяРеквизита");
							СтрокаБЕНаименование = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименование", "ИмяРеквизита");
							СтрокаБЕКод = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаКод", "ИмяРеквизита");
							Если СтрокаИД <> Неопределено Тогда
								НовЗапись.ИД = СтрокаИД.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименованиеПолное <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаНаименованиеПолное = СтрокаБЕНаименованиеПолное.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕМСокращение <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаМеждународноеСокращение = СтрокаБЕМСокращение.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименование <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаНаименование = СтрокаБЕНаименование.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕКод <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаКод = СтрокаБЕКод.ЗначениеРеквизита;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Элемент = ТекЭлемент;
			Иначе
				ОбъектXML.УстановитьСтроку(ТекЭлемент.ИнфПолСтр);
				Элемент = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
			КонецЕсли;
		Иначе
			Элемент = ТекЭлемент;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("ИД") = Неопределено Тогда
			НовЗапись.ИД = Элемент.ИД;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Наименование") = Неопределено Тогда
			НовЗапись.Наименование = Элемент.Наименование;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимРабот") = Неопределено Тогда
			НовЗапись.Наименование = ТекЭлемент.НаимРабот;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимТов") = Неопределено Тогда
			НовЗапись.Наименование = ТекЭлемент.НаимТов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ_Тов") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ_Тов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимЕдИзм") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаНаименование = ТекЭлемент.НаимЕдИзм;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("БазоваяЕдиница") = Неопределено Тогда
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Код") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаКод = Элемент.БазоваяЕдиница.Код;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Наименование") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименование = Элемент.БазоваяЕдиница.Наименование;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("НаименованиеПолное") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименованиеПолное = Элемент.БазоваяЕдиница.НаименованиеПолное;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("МеждународноеСокращение") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаМеждународноеСокращение = Элемент.БазоваяЕдиница.МеждународноеСокращение;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Артикул") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.Артикул;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("АртикулТов") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.АртикулТов;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Описание") = Неопределено Тогда
			НовЗапись.Описание = Элемент.Описание;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("ДополнительныеРеквизиты") = Неопределено Тогда
			Для Каждого ЭлементДанных из Элемент.ДополнительныеРеквизиты Цикл
				Если ТЗ.Колонки.Найти("Доп_" + ЭлементДанных.Наименование) = Неопределено Тогда
					ТЗ.Колонки.Добавить("Доп_" + ЭлементДанных.Наименование, ОписаниеТиповС255);
					ИменаДопКолонок = ИменаДопКолонок + ", "+ "Доп_" + ЭлементДанных.Наименование;
				КонецЕсли;
				Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
					НовЗапись["Доп_" + ЭлементДанных.Наименование] = ЭлементЗначения;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеКонтрагента(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль = "")
	
	ВидКонтрагента  = "";
	ВидДопАналитики = "";
	Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани) Тогда
		ВидКонтрагента = "Организации";
		Если Роль = "Продавец" ИЛИ Роль = "Исполнитель" Тогда
			ИмяРеквизита = "Организация";
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		ИначеЕсли Роль = "Покупатель" ИЛИ Роль = "Заказчик" Тогда
			ИмяРеквизита = "Контрагент";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ИначеЕсли Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель" Тогда
			ИмяРеквизита = Роль;
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		КонецЕсли;
	ИначеЕсли Роль = "Продавец" ИЛИ Роль = "Исполнитель" Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
	ИначеЕсли Роль = "Покупатель" ИЛИ Роль = "Заказчик" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидДопАналитики = "Партнеры";
		ДопАналитика = "Партнер";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
	ИначеЕсли Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = Роль;
		ВидДопАналитики = "Партнеры";
		ДопАналитика = "Партнер";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
	КонецЕсли;
	
	// Контрагент
	РеквизитыКонтрагента = Новый Структура;
	Если Элемент.Тип().URIПространстваИмен = "OTORG12"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM" Тогда
		ИдКонтрагента = "";
		Если Элемент.ИдСв <> Неопределено Тогда
			Если Элемент.ИдСв.СвЮЛ <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить("ПолноеНаименование", Элемент.ИдСв.СвЮЛ.НаимОрг);
				РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвЮЛ.ИННЮЛ);
				РеквизитыКонтрагента.Вставить("КПП", Элемент.ИдСв.СвЮЛ.КПП);
				РеквизитыКонтрагента.Вставить("ОКОПФ", Элемент.ИдСв.СвЮЛ.ОКОПФ);
				Если ЗначениеЗаполнено(Элемент.ИдСв.СвЮЛ.ИННЮЛ) Тогда
					ИдКонтрагента = Элемент.ИдСв.СвЮЛ.ИННЮЛ + Элемент.ИдСв.СвЮЛ.КПП;
				КонецЕсли;
			ИначеЕсли Элемент.ИдСв.СвФЛ <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить("ПолноеНаименование",
					Элемент.ИдСв.СвФЛ.ФИОИП.Фамилия +" "+ Элемент.ИдСв.СвФЛ.ФИОИП.Имя
					+ " " + Элемент.ИдСв.СвФЛ.ФИОИП.Отчество);
				РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвФЛ.ИННФЛ);
				ИдКонтрагента = Элемент.ИдСв.СвФЛ.ИННФЛ;
			КонецЕсли;
		КонецЕсли;
		РеквизитыКонтрагента.Вставить("ОКПО", Элемент.ОКПО);
		ЭлементАдрес = Элемент.Адрес;
		Если ЭлементАдрес <> Неопределено Тогда
			ПрефиксАдреса = ?(Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель", "Фактический", "Юридический");
			Если ЭлементАдрес.АдрРФ <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", СоставнойАдрес(ЭлементАдрес.АдрРФ));
			ИначеЕсли ЭлементАдрес.АдрИно <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИно.АдрТекст);
				РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИно.КодСтр);
			ИначеЕсли ЗначениеЗаполнено(ЭлементАдрес.АдрТекст) Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрТекст);
			КонецЕсли;
		КонецЕсли;
		ЭлементКонтакты = Элемент.Контакт;
		Если ЭлементКонтакты <> Неопределено Тогда
			Если ЭлементКонтакты.Тлф <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить("Телефоны", ЭлементКонтакты.Тлф);
			КонецЕсли;
			Если ЭлементКонтакты.Факс <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить("Факс", ЭлементКонтакты.Факс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			ЗнДанных = Элемент[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			КонецЕсли;
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				ИдКонтрагента = ЗнДанных;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Роль") Тогда
				Если ВРег(ЗнДанных) = ВРег("Продавец") Тогда
					Если НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара Тогда
						ВидКонтрагента = "Организации";
						ИмяРеквизита = "Организация";
						ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
					Иначе
						ВидКонтрагента = "Контрагенты";
						ИмяРеквизита = "Контрагент";
						// доп.аналитика по Партнеру
						ВидДопАналитики = "Партнеры";
						ДопАналитика = "Партнер";
						ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
					КонецЕсли;
				ИначеЕсли ВРег(ЗнДанных) = ВРег("Покупатель") Тогда
					Если НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
						ВидКонтрагента = "Контрагенты";
						ИмяРеквизита = "Контрагент";
						ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
						// доп.аналитика по Партнеру
						ВидДопАналитики = "Партнеры";
						ДопАналитика = "Партнер";
					Иначе
						ВидКонтрагента = "Организации";
						ИмяРеквизита = "Организация";
						ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
				РеквизитыУчастника = ЗнДанных;
				Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
					РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
					Если РеквизитУчастника <> Неопределено Тогда
						Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
							РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя+"_Представление", РеквизитУчастника.Представление);
						ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
							РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
						Иначе // остальное по именам
							РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ВРег(ТекСвойство) = ВРег("Адрес") Тогда
				РеквизитыКонтрагента.Вставить("ФактическийАдрес_Представление", ЗнДанных.Представление);
			ИначеЕсли ВРег(ТекСвойство) = ВРег("Контакты") Тогда
				ТаблицаКонтактов = Новый ТаблицаЗначений();
				ТаблицаКонтактов.Колонки.Добавить("Вид");
				ТаблицаКонтактов.Колонки.Добавить("Представление");
				ТаблицаКонтактов.Колонки.Добавить("ЗначенияПолей");
				Для Каждого Контакт из ЗнДанных.Контакт Цикл
					Вид = Неопределено;
					Если Контакт.Тип = "Почта" Тогда
						Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","EmailКонтрагента");
					ИначеЕсли Контакт.Тип = "Телефон рабочий" Тогда
						Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента");
					ИначеЕсли Контакт.Тип = "Факс" Тогда
						Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ФаксКонтрагента");
					КонецЕсли;
					Если ЗначениеЗаполнено(Вид) Тогда // добавляем только, если есть виды контактной информации в конфигурации-приемнике
						НовКонт = ТаблицаКонтактов.Добавить();
						НовКонт.Вид = Вид;
						НовКонт.Представление = Контакт.Значение;
						НовКонт.ЗначенияПолей = Контакт.Комментарий;
					КонецЕсли;
				КонецЦикла;
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ТаблицаКонтактов);
			Иначе // остальное по именам
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: "+ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
	// Определяем расчетный счет контрагента
	Если Элемент.Свойства().Получить("РасчетныеСчета") <> Неопределено Тогда
		РасчетныеСчета = Элемент.РасчетныеСчета;
		Если РасчетныеСчета <> Неопределено Тогда
			РасчетныеСчетаXDTO = РасчетныеСчета.ПолучитьСписок("РасчетныйСчет");
			Для Каждого РасчетныйСчетXDTO Из РасчетныеСчетаXDTO Цикл
				ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РасчетныйСчетXDTO, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
				Прервать;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Элемент.Свойства().Получить("БанкРекв") <> Неопределено И Элемент.БанкРекв <> Неопределено Тогда
		ПрочитатьДанныеПоРасчетномуСчетуТорг12(НовыйЭД, Элемент.БанкРекв, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
	КонецЕсли;
	
	// доп.аналитику добавим, если заполнена
	Если ЗначениеЗаполнено(ВидДопАналитики) Тогда
		ЗнДопАналитики = ВернутьДопАналитикуКонтрагента(Контрагент, ДопАналитика);
		Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидДопАналитики);
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: " + ЗнДопАналитики.Код,
			ЗнДопАналитики, Новый Структура(), ДеревоРазбора, Ошибка);
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ДопАналитика, НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли; // доп.аналитики
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧАктаОПриемке(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры.
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) И НЕ ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
					Продолжить;
				КонецЕсли;
				// Разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
							
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
						
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Упаковка");
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					
					ЕстьНДС = Ложь;
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);
										СписокТЧ.Добавить(СтавкаНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
										ЕстьНДС = Истина;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если НЕ ЕстьНДС Тогда
						СтавкаНалога = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("НДС", "без НДС");
						СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
						СписокТЧ.Добавить(0, "СуммаНДС");
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма, "СуммаСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Описание") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Содержание");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали.
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свой-во ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
			Если ИдентификацияПоНоменклатуреКомпании Тогда 
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
						СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
						СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
				КонецЕсли;
				
			Иначе
				// Номенклатура поставщиков.
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяРеквизитаВладельца = ЭлектронныеДокументыСлужебный.ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
					РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
				
				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				
				Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "",
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			КонецЕсли;
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСтруктуруПоДопДанным(Дерево, СтруктураДопДанных)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
			Структура = Новый Структура;
			СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
			СтруктураДопДанных.Вставить(СтрокаДерева.ЗначениеРеквизита, Структура);
		ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
			СтруктураДопДанных.Вставить(СтрокаДерева.ЗначениеРеквизита, СтрокаДерева.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"));
		Иначе
			СтруктураДопДанных.Вставить(СтрокаДерева.ИмяРеквизита, СтрокаДерева.ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		СтруктураОтбора = Новый Структура("ИмяРеквизита", "Набор");
		СтрокиДопДанные = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаДопДанных Из СтрокиДопДанные Цикл
			Для Каждого СтрокаДерева Из СтрокаДопДанных.Строки Цикл
				Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
					Структура = Новый Структура;
					СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ЗначениеРеквизита, Структура);
				ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ЗначениеРеквизита, СтрокаДерева.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"));
				Иначе
					ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ИмяРеквизита, СтрокаДерева.ЗначениеРеквизита);
				КонецЕсли;
			КонецЦикла;
			ВозвращаемоеЗначение = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, НомерСтроки, ИмяТЧ, Ошибка)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяТЧ);
		СтрокиШапкиДопДанные = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиШапкиДопДанные.Количество() > 0 Тогда
			СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиТЧДопДанные = СтрокиШапкиДопДанные[0].Строки.НайтиСтроки(СтруктураОтбора);
			Если СтрокиТЧДопДанные.Количество() > 0 Тогда
				Для Каждого СтрокаДерева Из СтрокиТЧДопДанные[0].Строки Цикл
					Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
						Структура = Новый Структура;
						СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
						СписокТЧ.Добавить(Структура, СтрокаДерева.ЗначениеРеквизита);
					ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
						СписокТЧ.Добавить(СтрокаДерева.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"), СтрокаДерева.ЗначениеРеквизита);
					Иначе
						СписокТЧ.Добавить(СтрокаДерева.ЗначениеРеквизита, СтрокаДерева.ИмяРеквизита);
					КонецЕсли;
				КонецЦикла;
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура РазобратьСтрокуТЧНакладной(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдЭД = ?(ЭД.Свойства().Получить("ИД") = Неопределено, "", ЭД.Ид);
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
	
	НаимТовара = "";
	ИдТовара = "";
	ЕстьДопРеквизиты = Ложь;
	
	// Номенклатура.
	РеквизитыНоменклатуры = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		ЗнДанных = Элемент[ТекСвойство.Имя];
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		// Разберем свойства Товара.
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
			ИдТовара = РеквизитыНоменклатуры.Ид;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
			РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
			НаимТовара = РеквизитыНоменклатуры.Наименование;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
			РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
				РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
				ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
					ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
				Если НЕ ЗнДанных.Свойства().Получить("Наименование") = Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
				КонецЕсли;
				Если НЕ ЗнДанных.Свойства().Получить("Коэффициент") = Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Коэффициент", ЗнДанных.Коэффициент);
				КонецЕсли;
				ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(ЗнДанных.Код),
					ЗнДанных.Наименование, ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налог") Тогда
			ЕстьНДС = Ложь;
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				Если ВРег(ЗнДанных.ТипНалога) = "НДС" Тогда
					СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(ЗнДанных.ВеличинаСтавкиНалога);
					СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
					СписокТЧ.Добавить(ЗнДанных.Сумма, "СуммаНДС");
					ЕстьНДС = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаБезНДС") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Сумма");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаСУчетомНДС") Тогда
			СписокТЧ.Добавить(ЗнДанных, "СуммаСНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("СрокГодности") Тогда
			СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗнДанных), ТекСвойство.Имя);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
			ЕстьДопРеквизиты = Истина;
			СтруктураДопРеквизитов = новый Структура;
			Для Каждого ЭлементДанных из ЗнДанных Цикл
				МассивЗначений = Новый Массив;
				Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
					МассивЗначений.Добавить(ЭлементЗначения)
				КонецЦикла;
				СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
			КонецЦикла;
		Иначе
			СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
	Если ИдентификацияПоНоменклатуреКомпании Тогда
		СтруктураИд = РазобратьИДТовара(ИдТовара);
		Номенклатура = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
		Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
			ХарактеристикаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
				СтруктураИд.ИДХарактеристики);
			СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
			УпаковкаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
				СтруктураИд.ИДУпаковки);
			СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
		КонецЕсли;
	Иначе
		// Номенклатура поставщиков.
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ЭлектронныеДокументыСлужебный.ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
		Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаимТовара) Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
		КонецЕсли;
		
		Если ЕстьДопРеквизиты Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
		КонецЕсли;
		
		НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
			РеквизитыНоменклатурыПоставщика, ИдЭД);
		
		НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
			РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ЭлектронныеДокументыПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара, ИдЭД);
		
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
		Конецесли;
	КонецЕсли;
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
	
	ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			РазобратьСтрокуТЧНакладной(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоГрафикуОплаты(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) И НЕ ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
					Продолжить;
				КонецЕсли;
				Если ВРег(ТекСвойство.Имя) = ВРег("ДатаПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ДатаПлатежа");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ПроцентПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ПроцентПлатежа");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "СуммаПлатежа");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ВидОплаты") Тогда
					Если ЗнДанных = "Аванс" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								"Аванс (до обеспечения)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель"  Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								"Аванс (до подтверждения)"), "ВариантОплаты");
						КонецЕсли;
					ИначеЕсли ЗнДанных = "Предоплата" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								"Предоплата (до отгрузки)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								"Предоплата (до поступления)"), "ВариантОплаты");
						КонецЕсли;
					ИначеЕсли ЗнДанных = "Кредит" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								"Кредит (после отгрузки)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель" Тогда 
							СписокТЧ.Добавить(ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								"Кредит (после поступления)"), "ВариантОплаты");
						КонецЕсли;
					КонецЕсли;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЦикла;
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "ЭтапыГрафикаОплаты", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		
		Для Каждого Элемент Из НаборДанных Цикл
			
			СписокТЧ = Новый СписокЗначений;
			НаименованиеТовара = "";
			ИдТовара = "";
			АртикулТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура.
			РеквизитыНоменклатуры = Новый Структура;
			РеквизитыНоменклатурыПоставщика = Новый Структура;
			ИмяРеквизитаВладельца = ЭлектронныеДокументыСлужебный.ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
			ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
			РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатурыПоставщика.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, ЕдИзм,
							РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						РеквизитыНоменклатурыПоставщика.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для Каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
			Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
				РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
			КонецЕсли;
			Если ЗначениеЗаполнено(НаимТовара) Тогда
				РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
			КонецЕсли;
			Если ЕстьДопРеквизиты Тогда
				РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
			КонецЕсли;
			
			НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
				РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
			НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
				РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
			
			Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
				РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			КонецЕсли;
			Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетномуСчетуТорг12(НовыйЭД, РасчетныйСчетXDTO, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент = Неопределено, Ошибка)
	
	// Обработка банка счета
	
	БанкXDTO = РасчетныйСчетXDTO.СвБанк;
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("Код",			БанкXDTO.БИК);
	РеквизитыБанка.Вставить("Наименование", БанкXDTO.НаимБанк);
	
	БанкСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	// Создаем объект банка в дереве разбора
	ТипБанкиВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
	БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
	
	// Обработка самого счета
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета, РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, "Номер счета: " + РеквизитыБанковскогоСчета.НомерСчета,
	БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РасчетныйСчетXDTO, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент = Неопределено, Ошибка)
	
	БанкXDTO = РасчетныйСчетXDTO.Банк;
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("Код",          БанкXDTO.БИК);
	РеквизитыБанка.Вставить("Наименование", БанкXDTO.Наименование);
	РеквизитыБанка.Вставить("КоррСчет",     БанкXDTO.СчетКорреспондентский);
	
	БанкСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	// Создаем объект банка в дереве разбора.
	ТипБанкиВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
	БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
	
	//Обработка банка корреспондента
	ЕстьБанкКорреспондент = Ложь;
	СвойствоЭД = РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");
	Если СвойствоЭД <> Неопределено И РасчетныйСчетXDTO.БанкКорреспондент <> Неопределено Тогда
		
		ЕстьБанкКорреспондент = Истина;
		БанкКорреспондентXDTO = РасчетныйСчетXDTO.БанкКорреспондент;
		
		РеквизитыБанкаКорреспондента = Новый Структура;
		РеквизитыБанкаКорреспондента.Вставить("Код",          БанкКорреспондентXDTO.БИК);
		РеквизитыБанкаКорреспондента.Вставить("Наименование", БанкКорреспондентXDTO.Наименование);
		РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     БанкКорреспондентXDTO.СчетКорреспондентский);
		
		БанкКорреспондентСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки",
			РеквизитыБанкаКорреспондента.Код, РеквизитыБанкаКорреспондента);
		
		// Создаем объект банка в дереве разбора
		ТипБанкиКоррВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
		
		СтрокаБанкаКорреспондента = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиКоррВДереве, РеквизитыБанкаКорреспондента.Код,
			"БИК: " + РеквизитыБанкаКорреспондента.Код, БанкКорреспондентСсылка, РеквизитыБанкаКорреспондента, ДеревоРазбора,
			Ошибка);
		
	КонецЕсли;	
	
	// Обработка самого счета	
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета,
		РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора.
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, "Номер счета: "
		+ РеквизитыБанковскогоСчета.НомерСчета,
	БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ЕстьБанкКорреспондент Тогда
		ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);
	КонецЕсли;	
	
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли	
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		Иначе	
			ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры.
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код,
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					ЕстьНДС = Ложь;
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);
										СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
										ЕстьНДС = Истина;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
							КонецЕсли;
							
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если НЕ ЕстьНДС Тогда
						СтавкаНалога = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("НДС", "без НДС");
						СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
						СписокТЧ.Добавить(0, "СуммаНДС");
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали.
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") Тогда
					СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗнДанных), ТекСвойство.Имя);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
			Если ИдентификацияПоНоменклатуреКомпании Тогда
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
						СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
						СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
				КонецЕсли;
				
			Иначе // Все остальные случаи - ищем по номенклатуре поставщика.
				// Номенклатура поставщиков.
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяРеквизитаВладельца = ЭлектронныеДокументыСлужебный.ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
				РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
				
				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			КонецЕсли;
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ОтветНаЗаказ) ИЛИ (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код,
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					ЕстьНДС = Ложь;
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);
										СписокТЧ.Добавить(СтавкаНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
										ЕстьНДС = Истина;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
							КонецЕсли;	
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;
					Если НЕ ЕстьНДС Тогда
						СтавкаНалога = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("НДС", "без НДС");
						СписокТЧ.Добавить(СтавкаНалога, "СтавкаНДС");
						СписокТЧ.Добавить(0, "СуммаНДС");
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
										СписокТЧ.Добавить(Скидка.Процент,"ПроцентРучнойСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных Из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
			Если ИдентификацияПоНоменклатуреКомпании Тогда 
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
						СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
						СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
				КонецЕсли;
			Иначе
				// Номенклатура поставщиков.
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяРеквизитаВладельца = ЭлектронныеДокументыСлужебный.ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
				
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
					РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
				
				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				Номенклатура = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "",
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				ХарактеристикаНоменклатуры = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(
																						"ХарактеристикаНоменклатуры", ,
																						РеквизитыНоменклатурыПоставщика, 
																						ЭД.Ид);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
			КонецЕсли;
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных)
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали.
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураИд = РазобратьИДТовара(ИдТовара);
			Номенклатура = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
			Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
				ХарактеристикаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
					СтруктураИд.ИДХарактеристики);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
				УпаковкаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
					СтруктураИд.ИДУпаковки);
				СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
			КонецЕсли;
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура.
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, 
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);
										СписокТЧ.Добавить(СтавкаНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаПродажи");
							ИначеЕсли ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "СуммаБезНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Цена") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ЦенаПродажи");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаКомитента") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Цена");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаКомитента") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Сумма");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = новый Структура;
					Для Каждого ЭлементДанных из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЦикла;
			
			СтруктураИд = РазобратьИДТовара(ИдТовара);
			Номенклатура = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
			Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
				ХарактеристикаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
					СтруктураИд.ИДХарактеристики);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
				УпаковкаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
					СтруктураИд.ИДУпаковки);
				СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
			КонецЕсли;
			
			НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, Ошибка)
	
	ОтборБезСсылокНаОбъекты = Новый Структура;
	ОтборБезСсылокНаОбъекты.Вставить("СсылкаНаОбъект", Неопределено);
	ПорядокСозданияТиповОбъектов = ЭлектронныеДокументыПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов();
	Для Каждого СтрокаТипОбъекта Из ПорядокСозданияТиповОбъектов Цикл
		НайденнаяСтрокаТипа = ДеревоРазбора.Строки.Найти(СтрокаТипОбъекта.ТипОбъекта, "ТипОбъекта");
		Если НайденнаяСтрокаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Всегда будет перезаполнять Номенклатуру поставщика
		Если СтрокаТипОбъекта.ТипОбъекта = "НоменклатураПоставщиков" Тогда
			Для Каждого СтрокаОбъекта Из НайденнаяСтрокаТипа.Строки Цикл
				СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокиБезСсылокНаОбъекты = НайденнаяСтрокаТипа.Строки.НайтиСтроки(ОтборБезСсылокНаОбъекты);
			Для Каждого СтрокаОбъекта Из СтрокиБезСсылокНаОбъекты Цикл
				СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРеквизитШапкиОбъекта(СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект = Неопределено)
	
	// Добавить в реквизиты шапки ЭлектронныеДокументы
	НовСтрока                   = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит          = ИмяРеквизита;
	НовСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	Если СсылкаНаОбъект <> Неопределено Тогда
		НовСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыТЧОбъекта(СтрокаЭлементов, ИмяТЧ, СписокРеквизитов)
	
	// Добавить в реквизиты ТЧ ЭлектронныеДокументы
	НовСтрока          = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит = ИмяТЧ;
	Для Каждого ТекЭлСписка Из СписокРеквизитов Цикл
		НовСтрокаТЧ                   = НовСтрока.Строки.Добавить();
		НовСтрокаТЧ.Реквизит          = ТекЭлСписка.Представление;
		НовСтрокаТЧ.ЗначениеРеквизита = ТекЭлСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ЗначениеТипаОбъекта)
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ЗначениеТипаОбъекта, "ТипОбъекта");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Добавить();
		НайденнаяСтрока.ТипОбъекта = ЗначениеТипаОбъекта;
		НайденнаяСтрока.ИндексСтроки = Строка(ДеревоРазбора.Строки.Индекс(НайденнаяСтрока));
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Функция НайтиСоздатьСтрокуВДеревеРазбора(СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДеревоРазбора, Ошибка)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
			НайденнаяСтрока.ИД = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа = ЭлектронныеДокументыСлужебный.ОпределитьТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Если НЕ ЭлектронныеДокументыСлужебный.ЭтоНоменклатура(СсылкаНаОбъект) Тогда
				// Проверим, что Описания совпадают по одной ссылке
				Если НайденнаяСтрока.ОписаниеОбъекта <> ОписаниеОбъекта Тогда
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: на один Объект <%1>, два Описания <%2> и <%3>'"), СсылкаНаОбъект,
						НайденнаяСтрока.ОписаниеОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
				КонецЕсли;
			Иначе
				// У номенклатуры может быть такое, в случае когда несколько элементов вход.данных
				// имеют ссылку на один элемент справочника.
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СсылкаНаОбъект",  СсылкаНаОбъект);
				ПараметрыОтбора.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
				ПараметрыОтбора.Вставить("ИД",              ИдОбъекта);
				НайденныеСтроки = СтрокаТипаВДереве.Строки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
					НайденнаяСтрока.СсылкаНаОбъект  = СсылкаНаОбъект;
					НайденнаяСтрока.ИД              = ИдОбъекта;
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
					НайденнаяСтрока.ОписаниеТипа    = ЭлектронныеДокументыСлужебный.ОпределитьТипОбъекта(
						СтрокаТипаВДереве.ТипОбъекта);
					НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
						НайденнаяСтрока));
					ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
				Иначе // Непредвиденная ситуация
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в данных эл.документа: неуникальное описание для ИД <%1>, Описание <%2>'"),
						ИдОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдОбъекта) Тогда
		
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ИдОбъекта, "ИД");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ИД              = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ЭлектронныеДокументыСлужебный.ОпределитьТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Возврат НайденнаяСтрока;
		КонецЕсли;
	Иначе
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ОписаниеОбъекта, "ОписаниеОбъекта");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ЭлектронныеДокументыСлужебный.ОпределитьТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Процедура ДобавитьДопРеквизиты(СтрокаДереваРазбора, ДопРеквизиты, ДеревоРазбора, Отказ = Ложь)
	
	Для Каждого ТекЭл Из ДопРеквизиты Цикл
		
		Если ТипЗнч(ТекЭл.Значение) = Тип("ОбъектXDTO") Тогда
		Иначе
			
			Если ЗначениеЗаполнено(ТекЭл.Значение) Тогда
				Если ТипЗнч(ТекЭл.Значение) = Тип("Массив") Тогда
					Для Каждого ТекЭлМассива Из ТекЭл.Значение Цикл
						Если ТипЗнч(ТекЭлМассива) = Тип("Структура") Тогда
							ДобавитьДопРеквизиты(СтрокаДереваРазбора, ТекЭлМассива, ДеревоРазбора, Отказ);
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Поищем, возможно уже есть такой реквизит с таким же значением.
					НайденнаяСтрока = СтрокаДереваРазбора.Строки.Найти(ТекЭл.Ключ, "Реквизит", Истина);
					Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.ЗначениеРеквизита = ТекЭл.Значение Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтрока = СтрокаДереваРазбора.Строки.Добавить();
					НовСтрока.Реквизит          = ТекЭл.Ключ;
					НовСтрока.ЗначениеРеквизита = ТекЭл.Значение;
					// Если ИндексСтроки, то попытка найти СсылкуНаОбъект.
					Если ТипЗнч(НовСтрока.ЗначениеРеквизита) = Тип("Строка") Тогда
						НайденнаяСтрока = ДеревоРазбора.Строки.Найти(НовСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
						Если НайденнаяСтрока <> Неопределено Тогда
							Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
								НовСтрока.СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьИДТовара(знач ИД)
	
	СтруктураВозврата = Новый Структура("ИДТовара, ИДХарактеристики, ИДУпаковки");
	Если Не ЗначениеЗаполнено(ИД) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Поз = Найти(ИД, "#");
	Если Поз > 0 Тогда
		
		СтруктураВозврата.ИДТовара = Сред(ИД, 1 , Поз - 1);
		Если СтрДлина(ИД) > Поз Тогда
			
			Ид = Сред(ИД, Поз + 1);
			Поз = Найти(ИД, "#");
			Если Поз > 0 Тогда
				СтруктураВозврата.ИДХарактеристики = Сред(ИД, 1 ,Поз - 1);
			КонецЕсли;
			
			Если СтрДлина(ИД) > Поз Тогда
				СтруктураВозврата.ИДУпаковки = Сред(ИД, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СформироватьСтруктуруТовара()
	
	СтруктураВозврата = Новый Структура("Номенклатура, Характеристика, Упаковка");
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом разбора

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если Найти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту)
	
	ПозТочки = Найти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД, ФайлДопДанных = Неопределено)
	
	ДеревоРазбора = Новый ДеревоЗначений;
	ДеревоРазбора.Колонки.Добавить("ТипОбъекта");
	ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");
	ДеревоРазбора.Колонки.Добавить("ИндексСтроки");
	ДеревоРазбора.Колонки.Добавить("Реквизит");
	ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");
	ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");
	ДеревоРазбора.Колонки.Добавить("ВидЭД");
	ДеревоРазбора.Колонки.Добавить("ИД");
	ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");
	
	НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	Иначе 
		НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	КонецЕсли;
	
	Если ФайлДопДанных <> Неопределено Тогда
		ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ФайлДопДанных);
		ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Результат = ПрочитатьФайлCMLпоXDTO(ПолноеИмяФайла, ДеревоРазбора, НовыйЭД);
	
	Если НЕ Результат Тогда // ошибка разбора ЭД
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти("ЭлектронныеДокументы","ТипОбъекта"); // раздел ЭлектронныеДокументы
	СтрокаОбъекта = НайденнаяСтрока.Строки[0];
	
	Возврат Новый Структура("ДеревоРазбора, СтрокаОбъекта", ДеревоРазбора, СтрокаОбъекта);
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с ТОРГ-12

Функция ПолучитьДанныеНакладнойДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	СведенияОКонтрагенте.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));
	СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ПолноеНаименование"));
	СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ИНН"));
	СведенияОГрузоотправителе.Вставить("КодПоОКПО", 		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ОКПО"));
	СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ЮридическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ФактическийАдрес_Представление"));
	СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.НомерСчета"));
	СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Наименование"));
	СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Код"));
	СведенияОГрузоотправителе.Вставить("КоррСчет",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.КоррСчет"));
	СведенияОГрузоотправителе.Вставить("Телефоны",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.Телефоны"));
	Контакты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.Контакты");
	Если ТипЗнч(Контакты) = Тип("ТаблицаЗначений") И Контакты.Количество()>0 Тогда
		Строка = Контакты.Найти(ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента"),"Вид");
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);
	
	СведенияОГрузополучателе = Новый Структура;
	СведенияОГрузополучателе.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ПолноеНаименование"));
	СведенияОГрузополучателе.Вставить("ИНН", 			   	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ИНН"));
	СведенияОГрузополучателе.Вставить("КодПоОКПО", 		 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ОКПО"));
	СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ЮридическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ФактическийАдрес_Представление"));
	СведенияОГрузополучателе.Вставить("НомерСчета",		 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.НомерСчета"));
	СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Наименование"));
	СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Код"));
	СведенияОГрузополучателе.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.КоррСчет"));
	СведенияОГрузополучателе.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.Телефоны"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПодразделения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.СтруктурноеПодразделение"));
	ДанныеЗаполненияШапки.Вставить("ОрганизацияПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ПоставщикПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПлательщика",	"");
	ДанныеЗаполненияШапки.Вставить("ПлательщикПоОКПО",			"");
	
	ДанныеЗаполненияШапки.Вставить("ОснованиеНомер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ОснованиеДата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеОснования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НаименованиеОснования"));
	
	ДанныеЗаполненияШапки.Вставить("Номер",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("Курс", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АдресДоставки"));
	
	ДанныеЗаполненияПодвала = Новый Структура;
	
	ДанныеЗаполненияПодвала.Вставить("КоличествоЛистовВПриложении", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоЛистовВПрилПрописью"));
	ДанныеЗаполненияПодвала.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоЗаписейПрописью"));
	ДанныеЗаполненияПодвала.Вставить("ВсегоМестПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоМестПрописью"));
	ДанныеЗаполненияПодвала.Вставить("МассаГрузаПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "МассаГрузаПрописью"));
	ДанныеЗаполненияПодвала.Вставить("СуммаПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаВсегоПрописью"));
	ДанныеЗаполненияПодвала.Вставить("ДатаОтпуска", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаОтпуска"));
	
	ДанныеЗаполненияПодвала.Вставить("ДолжностьРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьРуководителя"));
	ДанныеЗаполненияПодвала.Вставить("ДолжностьГлавБухгалтера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьГлавБухгалтера"));
	ДанныеЗаполненияПодвала.Вставить("ДолжностьКладовщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьКладовщика"));
	ДанныеЗаполненияПодвала.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОРуководителя"));
	ДанныеЗаполненияПодвала.Вставить("ФИОГлавБухгалтера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОГлавБухгалтера"));
	ДанныеЗаполненияПодвала.Вставить("ФИОКладовщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОКладовщика"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("ВидУпаковки");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаНетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("МассаБрутто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоМест", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТЗ.Колонки.Добавить("КоличествоВОдномМесте", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	
	ИмяНоменклатуры = "Номенклатура";
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		
		НоваяСтрока.ТоварКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ТоварКод");
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НаименованиеНоменклатуры");
		
		НоваяСтрока.БазоваяЕдиницаНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.ЕдиницаИзмерения.Код");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.КоличествоВОдномМесте = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоВОдномМесте");
		
		НоваяСтрока.КоличествоМест = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Мест");
		
		НоваяСтрока.МассаБрутто = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаБрутто");
		НоваяСтрока.МассаНетто = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "МассаНетто");
		
		НоваяСтрока.ВидУпаковки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Упаковка");
		
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СуммаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.СуммаНДС),НоваяСтрока.СуммаНДС,0);
		Если Не ЗначениеЗаполнено (НоваяСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = "без НДС";
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Подвал", ДанныеЗаполненияПодвала);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ ТОРГ-12.
//
Процедура ЗаполнитьТабличныйДокументТОРГ12_ЭД(ТабличныйДокумент, ДанныеПечати, ДанныеПокупателя)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(?(ДанныеПокупателя.Количество() > 0, "ЭД_ТОРГ12Покупателя", "ЭД_ТОРГ12"));
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ТОРГ12";
	
	ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати.Шапка, Макет, ТабличныйДокумент);
	
	НомерСтраницы = 1;
	ИтоговыеСуммы = СтруктураИтоговыеСуммы();
	
	КоэффициентПересчета = 1;
	ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	
	// Выводим табличную часть документа
	ТЧТовары = ДанныеПечати.Товары;
	
	КоличествоСтрок = ТЧТовары.Количество();
	
	Для Каждого СтрокаТовары Из ТЧТовары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
		
		ДанныеСтроки.КоэффициентПересчета  = ?(ЗначениеЗаполнено(СтрокаТовары.КоличествоВОдномМесте),СтрокаТовары.КоличествоВОдномМесте,1);
		ДанныеСтроки.Количество  = СтрокаТовары.Количество;
		ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
		
		ДанныеСтроки.СуммаСНДС   = СтрокаТовары.СуммаСНДС;
		ДанныеСтроки.СуммаНДС    = СтрокаТовары.СуммаНДС;
		ДанныеСтроки.СуммаБезНДС = СтрокаТовары.Сумма;
		
		ДанныеСтроки.Цена = СтрокаТовары.Цена;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
		
		
		Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			
			Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
				
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				
			КонецЕсли;
			
			Если ДанныеСтроки.Номер <> 1 И Не ЭлектронныеДокументыСлужебный.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент,МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// Очистим итоги по странице.
				ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки);
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати.Подвал, Макет, ТабличныйДокумент, ДанныеПокупателя);
	
КонецПроцедуры

// Процедура заполнения реквизитов шапки ТОРГ-12.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  Макет - Макет ТОРГ-12
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.НомерДокумента = ДанныеПечати.Номер;
	ОбластьМакета.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
	
	ОбластьМакета.Параметры.Основание = 
		?(ЗначениеЗаполнено(ДанныеПечати.НаименованиеОснования), ДанныеПечати.НаименованиеОснования, "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеНомер), " № " + ДанныеПечати.ОснованиеНомер, "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеДата), " от " + ДанныеПечати.ОснованиеДата, "");
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПоставщике);
	
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПокупателе);
	
	// Выводим всевозможные коды.
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = ДанныеПечати.СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО  = ДанныеПечати.СведенияОПокупателе.КодПоОКПО;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала ТОРГ-12.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  Макет - Макет ТОРГ-12
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент, ДанныеПокупателя)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.Заполнить(ДанныеПокупателя);
	
	ПолнаяДатаДокумента = Формат(ДанныеПечати.ДатаОтпуска, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
	ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со СЧЕТ (ЗАКАЗ КЛИЕНТА)

Функция ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, Тип = "Счет")
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("БИКБанкаПолучателя",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкПолучателяПредставление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаПолучателяПредставление", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ДанныеЗаполненияШапки.Вставить("СчетПолучателяПредставление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	ДанныеЗаполненияШапки.Вставить("БИКБанкаКорреспондента",           ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкКорреспондент",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаКорреспондента",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.КоррСчет"));
	
	ДанныеЗаполненияШапки.Вставить("Номер",             ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",              ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СрокПлатежа"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОкончанияДействияСчета"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("Руководитель",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Руководитель"));
	ДанныеЗаполненияШапки.Вставить("Бухгалтер",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Бухгалтер"));
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"НазначениеПлатежа"));
	ДанныеЗаполненияШапки.Вставить("Сумма",             ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаИтог"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.Наименование");
			ИДТовара = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			Поз = Найти(ИДТовара, "#");
			Если Поз > 0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз - 1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.Код   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		КонецЕсли;
		
		НоваяСтрока.Артикул          = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		Упаковка                     = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"ЕдиницаИзмерения");
		БазоваяЕдиницаИзмерения      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество       = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"КоличествоУпаковок");
		НоваяСтрока.Цена             = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма            = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС         = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС        = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		
	КонецЦикла;
	
	// ЭтапыОплаты
	ТЗЭтапыОплаты = Новый ТаблицаЗначений;
	
	Если Тип = "Заказ" Тогда
		ТЗЭтапыОплаты.Колонки.Добавить("ВариантОплаты");
	КонецЕсли;
	ТЗЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("ПроцентПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("СуммаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("НомерСтроки");
	НомерСтроки = 1;
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ЭтапыГрафикаОплаты"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗЭтапыОплаты.Добавить();
		Если Тип = "Заказ" Тогда
			НоваяСтрока.ВариантОплаты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВариантОплаты");
		КонецЕсли;
		НоваяСтрока.ДатаПлатежа    = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаПлатежа");
		НоваяСтрока.ПроцентПлатежа = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПроцентПлатежа");
		НоваяСтрока.СуммаПлатежа   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаПлатежа");
		НоваяСтрока.НомерСтроки    = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",       ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",      ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыОплаты", ТЗЭтапыОплаты);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Счет-заказ.
//
Процедура ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеПечати, Тип = "Счет")
	
	ИспользоватьРучныеСкидки         = ЭлектронныеДокументыСлужебный.ПолучитьЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ЭлектронныеДокументыСлужебный.ПолучитьЗначениеФункциональнойОпции("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетЗаказ");
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_СчетЗаказ";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		ЧастичнаяОплата = Ложь;
	Иначе
		ЧастичнаяОплата = Истина;
	КонецЕсли;
	
	ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки
		ИЛИ ИспользоватьАвтоматическиеСкидки);
	
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);
	
	Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки ТОгда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДССоСкидкой");
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДСИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если НЕ ВыводитьКоды Тогда
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
		КонецЕсли;
		
	КонецЕсли;
	
	Если  ЕстьСкидки ТОгда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
	КонецЕсли;
	
	ТаблицаЭтапыОплаты = Новый ТаблицаЗначений;
	ТаблицаЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	Если ДанныеПечати.Свойство("ДатаПлатежа") Тогда
		НовСтрока = ТаблицаЭтапыОплаты.Добавить();
		НовСтрока.ДатаПлатежа = ДанныеПечати.ДатаПлатежа;
	КонецЕсли; 
	
	ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип);
	
	СоответствиеСтавокНДС = Новый Соответствие();
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);
	
	Если ЧастичнаяОплата Тогда
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата"));
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
		
		ОбластьСтрокаТаблицы.Параметры.Товар = ДанныеПечати.Шапка.НазначениеПлатежа;
		ОбластьСтрокаТаблицы.Параметры.Сумма = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		ОбластьИтого = Макет.ПолучитьОбласть("ИтогоЧастичнаяОплата");
		ОбластьИтого.Параметры.Всего = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтого);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СуммаНДС) Тогда
			
			ОбластьНДС = Макет.ПолучитьОбласть("ИтогоНДСЧастичнаяОплата");
			ОбластьНДС.Параметры.НДС = "В т.ч. НДС:";
			ОбластьНДС.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
			ТабличныйДокумент.Вывести(ОбластьНДС);
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки ТОгда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
			
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
		
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок	   = 0;
		ВсегоБезСкидок = 0;
		
		НомерСтроки = 0;
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ОбластьТовар.Параметры.Товар = СтрокаТовары.Товар;
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				СуммаПоСтроке = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
			Иначе
				СуммаПоСтроке = СтрокаТовары.Сумма;
			КонецЕсли;
			
			ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
			
			Если ЕстьСкидки ТОгда
				СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки, 0);
				ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок = ВсегоСкидок + СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			Сумма = Сумма + СуммаПоСтроке;
			СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
			
		КонецЦикла;
		
		Если  ЕстьСкидки ТОгда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
		
		Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСуммаНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(СуммаНДС);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСкидок = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ВсегоСкидок);
			ОбластьДанных.Параметры.ВсегоБезСкидок = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ВсегоБезСкидок);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести ИтогоНДС
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
			
			Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
				
				ПараметрыОтбора = Новый Структура();
				ПараметрыОтбора.Вставить("СтавкаНДС", ТекСтавкаНДС.Ключ);
				НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ТаблицаТоварыНДС = ТаблицаТовары.Скопировать(НайденныеСтроки, "СуммаНДС");
					ТаблицаТоварыНДС.Свернуть(, "СуммаНДС");
					СоответствиеСтавокНДС.Вставить(ТекСтавкаНДС.Ключ, ТаблицаТоварыНДС[0].СуммаНДС);
					
					ТабличныйДокумент.Вывести(ОбластьНомера);
					
					Если ВыводитьКоды Тогда
						ТабличныйДокумент.Присоединить(ОбластьКодов);
					КонецЕсли;
					
					ТабличныйДокумент.Присоединить(ОбластьТовар);
					
					ОбластьДанных.Параметры.НДС = ЭлектронныеДокументыПереопределяемый.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ,
						ДанныеПечати.Шапка.ЦенаВключаетНДС);
					ОбластьДанных.Параметры.ВсегоНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ТаблицаТоварыНДС[0].СуммаНДС);
					ТабличныйДокумент.Присоединить(ОбластьДанных);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыОплаты;
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты"));
		Область = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			Область.Параметры.Заполнить(ТекЭтап);
			Область.Параметры.ТекстНДС = ЭлектронныеДокументыПереопределяемый.СформироватьТекстНДСЭтапаОплаты(
				СоответствиеСтавокНДС, ТекЭтап.ПроцентПлатежа);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ИтогоЭтапыОплаты"));
	КонецЕсли;
	
	ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип);
	
КонецПроцедуры

// Процедура заполнения реквизитов шапки счета, заказа.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  Макет - Макет СчетЗаказ
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип)
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	СведенияОПолучателе = ДанныеПечати.Шапка.СведенияОПолучателе;
	
	Если Тип = "Счет" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДатаПлатежа) Тогда
			
			НадписьСрокДействия = НСтр("ru='Счет действителен до %СрокДействия%.'");
			НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%",
				Формат(ДанныеПечати.Шапка.ДатаПлатежа, "ДЛФ=D"));
			ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.БанкКорреспондент) Тогда
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаКорреспондента;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкКорреспондент;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаКорреспондента;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
		Иначе	
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаПолучателя;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкПолучателяПредставление;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетПолучателяПредставление;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
			СведенияОПоставщике, "ПолноеНаименование,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если Тип = "Счет" Тогда
		ТекстЗаголовка = НСтр("ru='Счет на оплату № %НомерДокумента% от %ДатаДокумента% г.'");
	ИначеЕсли Тип = "Заказ" Тогда
		ТекстЗаголовка = НСтр("ru='Заказ клиента № %НомерДокумента% от %ДатаДокумента% г.'");
	КонецЕсли;
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ТекстПоставщик = ?(Тип = "Счет", НСтр("ru='Поставщик:'"), НСтр("ru='Исполнитель:'"));
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель         = ?(Тип = "Счет", НСтр("ru='Покупатель:'"), НСтр("ru='Заказчик:'"));
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПолучателе,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");
		ОбластьМакета.Параметры.НазначениеПлатежа = ДанныеПечати.Шапка.НазначениеПлатежа;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала счета, заказа.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  Макет - Макет СчетЗаказ
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип)
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		ОбластьМакета.Параметры.ФИОРуководителя = ДанныеПечати.Шапка.Руководитель;
		ОбластьМакета.Параметры.ФИОБухгалтера   = ДанныеПечати.Шапка.Бухгалтер;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЗАКАЗОМ ПОСТАВЩИКУ

Функция ПолучитьДанныеЗаказаПоставщикуДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер",                    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",                     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",                 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("НаименованиеНоменклатурыПоставщика");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			или СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.НаименованиеНоменклатурыПоставщика = НоваяСтрока.Товар;
			НоваяСтрока.Код = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
			НоваяСтрока.Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.Наименование");
			НоваяСтрока.НаименованиеНоменклатурыПоставщика = НоваяСтрока.Товар;
			ИДТовара = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			Поз = Найти(ИДТовара, "#");
			Если Поз > 0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз - 1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
			НоваяСтрока.Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.Артикул");
		КонецЕсли;
		Упаковка = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения");
		БазоваяЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоУпаковок");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Заказ поставщику".
//
Процедура ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	ИспользоватьРучныеСкидки = ЭлектронныеДокументыСлужебный.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьРучныеСкидкиВЗакупках");
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ЗаказПоставщику");
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ЗаказПоставщику";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	КолонкаКодов  = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);
	
	ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки);
	
	Если ЕстьСкидки Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСУсловиемИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
	КонецЕсли;
	
	Если ЕстьСкидки ТОгда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	КонецЕсли;
	
	// Заполнить реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Заказ поставщику № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.Шапка.СведенияОПоставщике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.Шапка.СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	Если ВыводитьКоды Тогда
		
		ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
		ТабличныйДокумент.Присоединить(ОбластьКодов);
		
	КонецЕсли;
	
	ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
	КонецЕсли;
	
	Сумма          = 0;
	СуммаНДС       = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НомерСтроки    = 0;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = СтрокаТовары.НаименованиеНоменклатурыПоставщика;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
		СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки, 0);
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			СуммаПоСтроке = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
		Иначе
			СуммаПоСтроке = СтрокаТовары.Сумма;
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
		КонецЕсли;
		
		ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Сумма     = Сумма + СуммаПоСтроке;
		СуммаНДС  = СуммаНДС + СтрокаТовары.СуммаНДС;
		
		Если ЕстьСкидки Тогда
			ВсегоСкидок    = ВсегоСкидок    + СуммаСкидки;
			ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	Если ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	
	Если ЕстьСкидки Тогда
		
		ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
	КонецЕсли;
	
	ОбластьДанных.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	// Вывести ИтогоНДС
	Если ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			ОбластьДанных.Параметры.НДС = НСтр("ru='В том числе НДС:'");
		Иначе
			ОбластьДанных.Параметры.НДС = НСтр("ru='Сумма НДС:'");
		КонецЕсли;
		ОбластьДанных.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со СЧЕТ-ФАКТУРА

Функция ПолучитьДанныеСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДатаДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	НомерДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	
	ДанныеЗаполненияШапки.Вставить("Номер", "Счет-фактура №" + НомерДокумента +" от "+ Формат(ДатаДокумента,"ДЛФ=DD"));
	
	ДатаИспрСтрокой = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИспрДата");
	НомерИсправления = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИспрНом");
	
	ДанныеЗаполненияШапки.Вставить("НомерИсправления", "Исправление №"
		+ ?(ЗначениеЗаполнено(НомерИсправления), НомерИсправления, "--") + " от "
		+ ?(ЗначениеЗаполнено(ДатаИспрСтрокой), Формат(ДатаИспрСтрокой, "ДЛФ=DD"), "--"));
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", "Продавец: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "Продавец"));
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", "Адрес: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ПродавецАдрес"));
		
	ИННПоставщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПродавецИНН");
	КПППоставщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПродавецКПП");
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", "ИНН/КПП продавца: " + ИННПоставщика + ?(ЗначениеЗаполнено(
		КПППоставщика), "/" + КПППоставщика, ""));
		
	Грузоотправитель = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель");
	ГрузоотправительАдрес = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ГрузоотправительАдрес");
	Если ЗначениеЗаполнено(Грузоотправитель) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", "Грузоотправитель и его адрес: " + Грузоотправитель+ 
			?(ЗначениеЗаполнено(ГрузоотправительАдрес),", "+ГрузоотправительАдрес,"")); 
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", "Грузоотправитель и его адрес: --"); 
	КонецЕсли;
		
	Грузополучатель = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель");
	ГрузополучательАдрес = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузополучательАдрес");
	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", "Грузополучатель и его адрес: " + Грузополучатель+ 
			?(ЗначениеЗаполнено(ГрузополучательАдрес),", "+ГрузополучательАдрес,"")); 
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", "Грузополучатель и его адрес: --"); 
	КонецЕсли;
		
	ДанныеЗаполненияШапки.Вставить("ПоДокументу", "К платежно-расчетному документу № "
		+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлатежныйДокумент"));
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя","Покупатель: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "Покупатель"));
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", "Адрес: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ПокупательАдрес"));
		
	ИННПокупателя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПокупательИНН");
	КПППокупателя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПокупательКПП");
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", "ИНН/КПП покупателя: " + ИННПокупателя
		+ ?(ЗначениеЗаполнено(КПППокупателя), "/" + КПППокупателя, ""));
		
	КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Валюта: код %1", КодВалюты);
	ДанныеЗаполненияШапки.Вставить("Валюта", ТекстВалюта);
	
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаБезНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовБезНДС"));
	ДанныеЗаполненияШапки.Вставить("ИтогоСуммаНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДС"));
	ДанныеЗаполненияШапки.Вставить("ИтогоВсего", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНал"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантФЛ"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("СуммаБезНДС");
	ТЗ.Колонки.Добавить("Акциз");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СтранаПроисхожденияКод");
	ТЗ.Колонки.Добавить("ПредставлениеСтраны");
	ТЗ.Колонки.Добавить("ПредставлениеГТД");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НаимТов");
		ОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ОКЕИ_Тов");
		НоваяСтрока.ЕдиницаИзмеренияКод = ОКЕИ;

		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КолТов");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаТов");
		НоваяСтрока.СуммаБезНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДС");
		НоваяСтрока.Акциз = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумАкциз");
		ПредставлениеСтавкиНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НалСтВел");
		НоваяСтрока.СтавкаНДС = ?(ПредставлениеСтавкиНДС = "без НДС", ПредставлениеСтавкиНДС, ПредставлениеСтавкиНДС + " %");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДС");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНал");
		СтранаПроисхожденияКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КодПроисх");
		НоваяСтрока.СтранаПроисхожденияКод = СтранаПроисхожденияКод;

		НоваяСтрока.ПредставлениеГТД = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НомерТД");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Счет-фактура".
//
Процедура ЗаполнитьТабличныйДокументСчетФактура_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетФактура1137");
	
	ШапкаТаблицы = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ШапкаТаблицы);
	
	// Выводим заголовок таблицы.
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	ДанныеСтроки = СтруктураДанныеСтроки(1);
	
	// Создаем массив для проверки вывода.
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа.
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
	ОбластьИтого   = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		
		Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьИтого);
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;
		
		Если НЕ ЭлектронныеДокументыСлужебный.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		Если СтрокаТовары.СтранаПроисхожденияКод = "643" Тогда
			СтрокаТовары.СтранаПроисхожденияКод = "--";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ОбластьИтого.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьПодвала);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с КОРРЕКТИРОВОЧНЫЙ СЧЕТ-ФАКТУРА

Функция ПолучитьДанныеКорректировочногоСчетаФактурыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");
	ДанныеЗаполненияШапки.Вставить("Номер", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");
	ДанныеЗаполненияШапки.Вставить("Дата", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправления");
	ДанныеЗаполненияШапки.Вставить("НомерИсправления", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправления");
	ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправленияСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("НомерИсправленияСчетаФактуры", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));
	ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправленияСчетаФактуры");
	ДанныеЗаполненияШапки.Вставить("ДатаИсправленияСчетаФактуры", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));
	
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика","Продавец: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "Продавец"));
	ДанныеЗаполненияШапки.Вставить("АдресПоставщика", "Адрес: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ПродавецАдрес"));
		
	ИННПоставщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПродавецИНН");
	КПППоставщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПродавецКПП");
	ДанныеЗаполненияШапки.Вставить("ИННПоставщика", "ИНН/КПП продавца: " + ИННПоставщика
		+ ?(ЗначениеЗаполнено(КПППоставщика), "/" + КПППоставщика, ""));
	ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя","Покупатель: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "Покупатель"));
	ДанныеЗаполненияШапки.Вставить("АдресПокупателя", "Адрес: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПокупательАдрес"));
		
	ИННПокупателя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПокупательИНН");
	КПППокупателя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПокупательКПП");
	ДанныеЗаполненияШапки.Вставить("ИННПокупателя", "ИНН/КПП покупателя: " + ИННПокупателя
		+ ?(ЗначениеЗаполнено(КПППокупателя), "/" + КПППокупателя, ""));
		
	КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалКод");
	ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Валюта: код %1", КодВалюты);
	ДанныеЗаполненияШапки.Вставить("Валюта", ТекстВалюта);
	
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаБезНДСУвеличение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "СтТовБезНДСВсегоУвел"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаНДСУвеличение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДСУвел"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаСНДСУвеличение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНалВсегоУвел"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаБезНДСУменьшение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "СтТовБезНДСВсегоУм"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаНДСУменьшение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДСУм"));
	ДанныеЗаполненияШапки.Вставить("ИтогоРазницаСНДСУменьшение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНалВсегоУм"));
	ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантЮЛ"));
	ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ПодписантФЛ"));
	ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СвГосРегИП"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияДо");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКодДо");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("КоличествоДо");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("ЦенаДо");
	ТЗ.Колонки.Добавить("СуммаБезНДС");
	ТЗ.Колонки.Добавить("СуммаБезНДСДо");
	ТЗ.Колонки.Добавить("Акциз");
	ТЗ.Колонки.Добавить("АкцизДо");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДСДо");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаНДСДо");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СуммаСНДСДо");
	ТЗ.Колонки.Добавить("РазницаБезНДСУвеличение");
	ТЗ.Колонки.Добавить("РазницаБезНДСУменьшение");
	ТЗ.Колонки.Добавить("РазницаНДСУвеличение");
	ТЗ.Колонки.Добавить("РазницаНДСУменьшение");
	ТЗ.Колонки.Добавить("РазницаСНДСУвеличение");
	ТЗ.Колонки.Добавить("РазницаСНДСУменьшение");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НаимТов");
		
		ОКЕИДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ОКЕИ_ТовДо");
		ОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ОКЕИ_ТовПосле");
		НоваяСтрока.ЕдиницаИзмеренияКод = ОКЕИ;
		
		НоваяСтрока.КоличествоДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КолТовДо");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КолТовПосле");
		НоваяСтрока.ЦенаДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаТовДо");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаТовПосле");
		НоваяСтрока.СуммаБезНДСДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДСДоИзм");
		НоваяСтрока.СуммаБезНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДСПослеИзм");
		НоваяСтрока.АкцизДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "АкцизДо");
		НоваяСтрока.Акциз = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "АкцизПосле");
		ПредставлениеСтавкиНДСДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НалСтВелДо");
		НоваяСтрока.СтавкаНДСДо = ?(ПредставлениеСтавкиНДСДо = "без НДС", ПредставлениеСтавкиНДСДо, ПредставлениеСтавкиНДСДо + " %");
		ПредставлениеСтавкиНДСПосле = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НалСтВелПосле");
		НоваяСтрока.СтавкаНДС = ?(ПредставлениеСтавкиНДСПосле = "без НДС",
			ПредставлениеСтавкиНДСПосле,ПредставлениеСтавкиНДСПосле + " %");
		НоваяСтрока.СуммаНДСДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСДо");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСПосле");
		НоваяСтрока.СуммаСНДСДо = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалДоИзм");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалПослеИзм");
		НоваяСтрока.РазницаБезНДСУвеличение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"СтТовБезНДСУвел");
		НоваяСтрока.РазницаНДСУвеличение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСУвел");
		НоваяСтрока.РазницаСНДСУвеличение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалУвел");
		НоваяСтрока.РазницаБезНДСУменьшение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовБезНДСУм");
		НоваяСтрока.РазницаНДСУменьшение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СумНДСУм");
		НоваяСтрока.РазницаСНДСУменьшение = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтТовУчНалУм");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Корректировочный Счет-фактура".
//
Процедура ЗаполнитьТабличныйДокументКорректировочныйСчетФактура_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетФактураКорректировочный1137");
	
	ШапкаТаблицы = Макет.ПолучитьОбласть("Шапка");
	ШапкаТаблицы.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ШапкаТаблицы);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	ДанныеСтроки = СтруктураДанныеСтроки(1);
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть документа
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
	ОбластьИтого   = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	
	Товары = ДанныеПечати.Товары;
	КоличествоСтрок = Товары.Количество();
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		
		Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьИтого);
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;
		
		Если НЕ ЭлектронныеДокументыСлужебный.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент,МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ОбластьИтого.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьПодвала);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ПРАЙС-ЛИСТ

Функция ПолучитьДанныеПрайсЛистаДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОПоставщике = Новый Структура;
	СведенияОПоставщике.Вставить("Представление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.Наименование"));
	СведенияОПоставщике.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);
	ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаФормирования"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Цена");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Артикул          = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		НоваяСтрока.Код              = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Код");
		НоваяСтрока.Товар            = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Наименование");
		НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Упаковка.Наименование");
		НоваяСтрока.Цена             = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Количество       = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПрайсЛист_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ПрайсЛист");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвал    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ДанныеПечати.Шапка.ДатаФормирования, "ДЛФ = Д");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати.Шапка);
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = ?(ЗначениеЗаполнено(СведенияОПоставщике.ПолноеНаименование),
		СведенияОПоставщике.ПолноеНаименование,
		СведенияОПоставщике.Представление);
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ТаблицаТовары = ДанныеПечати.Товары;
	НомерСтроки = 1;
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с каталогом файлов

Функция ПолучитьДанныеКаталогаТоваровДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОПоставщике = Новый Структура;
	СведенияОПоставщике.Вставить("Представление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.Наименование"));
	СведенияОПоставщике.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	
	ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);
	ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаФормирования"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Артикул = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Артикул");
		НоваяСтрока.Код     = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Код");
		НоваяСтрока.Товар   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Наименование");
		
		Упаковка = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения.Наименование");
		НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.ЕдиницаИзмерения.Наименование");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументКаталогаТоваров_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_КаталогТоваров");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвал    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ДанныеПечати.Шапка.ДатаФормирования, "ДЛФ = Д");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати.Шапка);
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = ?(ЗначениеЗаполнено(СведенияОПоставщике.ПолноеНаименование),
		СведенияОПоставщике.ПолноеНаименование, СведенияОПоставщике.Представление);
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ТаблицаТовары = ДанныеПечати.Товары;
	НомерСтроки = 1;
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с АКТОМ ВЫПОЛНЕННЫХ РАБОТ

Функция ПолучитьДанныеАктовВыполненныхРаботДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("КорСчет",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Банк",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("КорСчет",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Банк",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Код"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("ТекстШапки", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Заголовок"));
	ДанныеЗаполненияШапки.Вставить("ОписаниеВыполненныхРабот", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ОписаниеВыполненныхРабот"));
	ДанныеЗаполненияШапки.Вставить("Претензии", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Претензии"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТоварКод");
	ТЗ.Колонки.Добавить("ТоварНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	ТЗ.Колонки.Добавить("Содержание");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.ТоварКод = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Код");
		НоваяСтрока.ТоварНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"НоменклатураПоставщика.Наименование");
		НоваяСтрока.Содержание = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Содержание");
		НоваяСтрока.БазоваяЕдиницаНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.БазоваяЕдиницаКодПоОКЕИ = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Код");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		НоваяСтрока.СуммаСкидки = ?(НоваяСтрока.СуммаСкидки = Неопределено, 0, НоваяСтрока.СуммаСкидки);
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Акт выполненных работ.
//
Процедура ЗаполнитьТабличныйДокументАктВыполненныхРабот_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";
	
	ТаблицаУслуг = ДанныеПечати.Товары;
	ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаУслуг, Истина);
	Если ТаблицаУслуг.Итог("СуммаНДС") > 0 Тогда
		ЕстьНДС = истина;
	Иначе	
		ЕстьНДС = Ложь;
	КонецЕсли;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Акт");
	
	// Выводим шапку акта
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Акт № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета  = Макет.ПолучитьОбласть("ТекстШапки");
	ОбластьМакета.Параметры.ТекстШапки = ДанныеПечати.Шапка.ТекстШапки;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы Услуги
	СуффиксОбласти = ?(ЕстьСкидки, "СоСкидкой", "") + ?(ЕстьНДС, "СНДС", "");
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти);
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Сумма       = 0;
	СуммаНДС    = 0;
	НомерСтроки = 0;
	
	// Выводим строки таблицы Услуги
	Для каждого СтрокаУслуги из ТаблицаУслуг Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаУслуги);
		ОбластьСтроки.Параметры.ЕдиницаИзмерения = СтрокаУслуги.БазоваяЕдиницаНаименование;
		
		Если ЗначениеЗаполнено(СтрокаУслуги.Содержание) Тогда
			ОбластьСтроки.Параметры.Товар = СтрокаУслуги.Содержание;
		Иначе
			ОбластьСтроки.Параметры.Товар = СтрокаУслуги.ТоварНаименование;
		КонецЕсли;
		
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			СуммаПоСтроке = СтрокаУслуги.Сумма + СтрокаУслуги.СуммаНДС;
		Иначе
			СуммаПоСтроке = СтрокаУслуги.Сумма;
		КонецЕсли;
		
		ОбластьСтроки.Параметры.Сумма = СуммаПоСтроке;
		
		Если ЕстьСкидки Тогда
			
			ОбластьСтроки.Параметры.Скидка         = СтрокаУслуги.СуммаСкидки;
			ОбластьСтроки.Параметры.СуммаБезСкидки = ФорматСумм(СуммаПоСтроке + СтрокаУслуги.СуммаСкидки);
			
		КонецЕсли;
		
		Сумма    = Сумма    + СуммаПоСтроке;
		СуммаНДС = СуммаНДС + СтрокаУслуги.СуммаНДС;
		
		ТабличныйДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;
	Если ЕстьНДС Тогда
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'В том числе НДС:'");
		Иначе
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'Сумма НДС'");
		КонецЕсли;
	Иначе
		ОбластьМакета.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
	ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ОписаниеВыполненныхРабот;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Претензии                = ДанныеПечати.Шапка.Претензии;
	ОбластьМакета.Параметры.ПредставлениеИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.ПолноеНаименование;
	ОбластьМакета.Параметры.ЮрАдресИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.ЮридическийАдрес;
	ОбластьМакета.Параметры.ИННИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.ИНН;
	ОбластьМакета.Параметры.КППИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.КПП;
	ОбластьМакета.Параметры.РасчетныйСчетИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.РасчетныйСчет;
	ОбластьМакета.Параметры.КорСчетИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.КорСчет;
	ОбластьМакета.Параметры.БанкИсполнителя          = ДанныеПечати.Шапка.СведенияОПоставщике.Банк;
	ОбластьМакета.Параметры.БИКИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.БИК;
	ОбластьМакета.Параметры.ПредставлениеЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.ПолноеНаименование;
	ОбластьМакета.Параметры.ЮрАдресЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.ЮридическийАдрес;
	ОбластьМакета.Параметры.ИННЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.ИНН;
	ОбластьМакета.Параметры.КППЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.КПП;
	ОбластьМакета.Параметры.РасчетныйСчетЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.РасчетныйСчет;
	ОбластьМакета.Параметры.КорСчетЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.КорСчет;
	ОбластьМакета.Параметры.БанкЗаказчика            = ДанныеПечати.Шапка.СведенияОПокупателе.Банк;
	ОбластьМакета.Параметры.БИКЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.БИК;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Функция ПолучитьДанныеАкта501ДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("КорСчет",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Банк",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));
	СведенияООрганизации.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.НомерСчета"));
	СведенияООрганизации.Вставить("КорСчет",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияООрганизации.Вставить("Банк",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияООрганизации.Вставить("БИК",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Код"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("ТекстШапки", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Заголовок"));
	ДанныеЗаполненияШапки.Вставить("Претензии", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Претензии"));
		
	ТЗОписанийРабот = Новый ТаблицаЗначений;
	ТЗОписанийРабот.Колонки.Добавить("НачалоРабот");
	ТЗОписанийРабот.Колонки.Добавить("КонецРабот");
	ТЗОписанийРабот.Колонки.Добавить("Сумма");
	ТЗОписанийРабот.Колонки.Добавить("СуммаНДС");
	ТЗОписанийРабот.Колонки.Добавить("СуммаСНДС");
	ТЗОписанийРабот.Колонки.Добавить("Работы");
	
	СтрокиТЧОписанийРабот = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СписокОписаний"));
	Для Каждого СтрокаТЧОписанийРабот Из СтрокиТЧОписанийРабот Цикл
		
		НоваяСтрокаОписанийРабот = ТЗОписанийРабот.Добавить();
		ОписаниеРабот = СтрокаТЧОписанийРабот.ЗначениеРеквизита;
		
		НоваяСтрокаОписанийРабот.НачалоРабот = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, ОписаниеРабот, "НачРабот");
		НоваяСтрокаОписанийРабот.КонецРабот = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, ОписаниеРабот, "КонРабот");
		НоваяСтрокаОписанийРабот.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, ОписаниеРабот, "Сумма");
		НоваяСтрокаОписанийРабот.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, ОписаниеРабот, "СуммаНДС");
		НоваяСтрокаОписанийРабот.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, ОписаниеРабот, "СуммаСНДС");
		
		ТЗРабот = Новый ТаблицаЗначений;
		ТЗРабот.Колонки.Добавить("НомерСтроки");
		ТЗРабот.Колонки.Добавить("НаименованиеРабот");
		ТЗРабот.Колонки.Добавить("ЕдиницаИзмерения");
		ТЗРабот.Колонки.Добавить("Количество");
		ТЗРабот.Колонки.Добавить("Цена");
		ТЗРабот.Колонки.Добавить("Сумма");
		ТЗРабот.Колонки.Добавить("СуммаНДС");
		ТЗРабот.Колонки.Добавить("СуммаСНДС");
		ТЗРабот.Колонки.Добавить("Описание");
		
		СтрокиТЧРабот = ОписаниеРабот.Строки.НайтиСтроки(Новый Структура("Реквизит", "Работа"));
		Для Каждого СтрокаТЧРабот Из СтрокиТЧРабот Цикл
			
			НоваяСтрока = ТЗРабот.Добавить();
			НоваяСтрока.НомерСтроки = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот,
			"Номер");
			НоваяСтрока.НаименованиеРабот = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот,
			"Номенклатура.Наименование");
			НоваяСтрока.Описание = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Описание");
			НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
			НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Количество");
			НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Цена");
			НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "Сумма");
			НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "СуммаНДС");
			НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧРабот, "СуммаСНДС");
			
		КонецЦикла;
		
		НоваяСтрокаОписанийРабот.Работы = ТЗРабот;
	КонецЦикла;
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("ОписанияРабот", ТЗОписанийРабот);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Акт выполненных работ.
//
Процедура ЗаполнитьТабличныйДокументАкт501(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";
	
	ТаблицаОписанийРабот = ДанныеПечати.ОписанияРабот;
	Если ТаблицаОписанийРабот.Итог("СуммаНДС") > 0 Тогда
		ЕстьНДС = Истина;
	Иначе
		ЕстьНДС = Ложь;
	КонецЕсли;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Акт501");
	
	// Выводим шапку акта
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Акт № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета  = Макет.ПолучитьОбласть("ТекстШапки");
	ОбластьМакета.Параметры.ТекстШапки = ДанныеПечати.Шапка.ТекстШапки;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы Услуги
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыОписаниеРабот");
	
	СуммаСНДС = 0;
	СуммаНДС = 0;
	НомерОписания = 0;
	Для Каждого СтрокаОписанийРабот Из ТаблицаОписанийРабот Цикл
		
		НомерОписания = НомерОписания + 1;
		ОбластьМакета.Параметры.НомерОписания = НомерОписания;
		ОбластьМакета.Параметры.Заполнить(СтрокаОписанийРабот);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим строки таблицы Услуги
		ОбластьСтрокиРабот = Макет.ПолучитьОбласть("СтрокаРабот");
		Для Каждого СтрокаРаботы Из СтрокаОписанийРабот.Работы Цикл
			
			ОбластьСтрокиРабот.Параметры.НомерСтроки = СтрокаРаботы.НомерСтроки;
			
			ОбластьСтрокиРабот.Параметры.Заполнить(СтрокаРаботы);
			
			Если ЗначениеЗаполнено(СтрокаРаботы.Описание) Тогда
				ОбластьСтрокиРабот.Параметры.НаимРабот = СтрокаРаботы.Описание;
			Иначе
				ОбластьСтрокиРабот.Параметры.НаимРабот = СтрокаРаботы.НаименованиеРабот;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокиРабот);
			
		КонецЦикла;
		
		СуммаСНДС = СуммаСНДС + СтрокаОписанийРабот.СуммаСНДС;
		Если ЕстьНДС Тогда
			СуммаНДС = СуммаНДС + СтрокаОписанийРабот.СуммаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(СуммаСНДС);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;
	Если ЕстьНДС Тогда
		ОбластьМакета.Параметры.НДС = НСтр("ru = 'Сумма НДС'");
	Иначе
		ОбластьМакета.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПоставщике) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Претензии                = ДанныеПечати.Шапка.Претензии;
		ОбластьМакета.Параметры.ПредставлениеИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.ПолноеНаименование;
		ОбластьМакета.Параметры.ЮрАдресИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.ЮридическийАдрес;
		ОбластьМакета.Параметры.ИННИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КППИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.КПП;
		ОбластьМакета.Параметры.РасчетныйСчетИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.РасчетныйСчет;
		ОбластьМакета.Параметры.КорСчетИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.КорСчет;
		ОбластьМакета.Параметры.БанкИсполнителя          = ДанныеПечати.Шапка.СведенияОПоставщике.Банк;
		ОбластьМакета.Параметры.БИКИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.БИК;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПокупателе) Тогда
		ОбластьМакета.Параметры.ПредставлениеЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.ПолноеНаименование;
		ОбластьМакета.Параметры.ЮрАдресЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.ЮридическийАдрес;
		ОбластьМакета.Параметры.ИННЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.ИНН;
		ОбластьМакета.Параметры.КППЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.КПП;
		ОбластьМакета.Параметры.РасчетныйСчетЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.РасчетныйСчет;
		ОбластьМакета.Параметры.КорСчетЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.КорСчет;
		ОбластьМакета.Параметры.БанкЗаказчика            = ДанныеПечати.Шапка.СведенияОПокупателе.Банк;
		ОбластьМакета.Параметры.БИКЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.БИК;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ОТЧЕТОМ О ПРОДАЖАХ КОМИССИОННОГО ТОВАРА

Функция ПолучитьДанныеОтчетаОПродажахКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКомитенте = Новый Структура;
	СведенияОКомитенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));
	СведенияОКомитенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));
	СведенияОКомитенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));
	СведенияОКомитенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));
	СведенияОКомитенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомитенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомитенте);
	КонецЕсли;
	
	СведенияОКомиссионере = Новый Структура;
	СведенияОКомиссионере.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКомиссионере.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКомиссионере.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКомиссионере.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКомиссионере.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомиссионере);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомиссионере);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.КодОКВ"));
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаДокумента"));
	ДанныеЗаполненияШапки.Вставить("СуммаКомитента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаКомитента"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("СуммаВознаграждения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаВознаграждения"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СуммаВознаграждения");
	ТЗ.Колонки.Добавить("СуммаПродажи");
	ТЗ.Колонки.Добавить("ЦенаПродажи");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Код             = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		НоваяСтрока.Артикул         = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		НоваяСтрока.Наименование    = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Наименование");
		
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Количество");
		
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.ЦенаПродажи = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЦенаПродажи");
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаПродажи = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаПродажи");
		НоваяСтрока.СуммаВознаграждения = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"СуммаВознаграждения");
		НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		НоваяСтрока.СтавкаНДС = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
	
КонецФункции

// Процедура заполняет табличный документ отчет о продажах комиссионного товара
//
Процедура ЗаполнитьТабличныйДокументОтчетаОПродажахКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ОтчетПоКомиссии");
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Выводим общие реквизиты шапки.
	ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати.Шапка, "Отчет о продажах комиссионного товара", Макет,
		ТабличныйДокумент);
	
	// Выводим заголовок таблицы.
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами");
		ЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = КолонкаКодов;
	Иначе
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	
	Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ДанныеПечати.Шапка.КодВалюты);
	ЗаголовокТаблицы.Параметры.Валюта = Валюта;
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выводим многострочную часть документа.
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСКодами");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	
	НомерСтроки = 0;
	Товары = ДанныеПечати.Товары;
	Для Каждого СтрокаТовары из Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			ОбластьМакета.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.ТоварНаименование = СтрокаТовары.Наименование;
		ОбластьМакета.Параметры.ЦенаКомитента     = СтрокаТовары.Цена;
		ОбластьМакета.Параметры.СуммаКомитента    = СтрокаТовары.Сумма;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыПодвалаОтчетаОПродажахКомиссионногоТовара(ДанныеПечати.Шапка, Товары, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала отчета о продажах комиссионного товара.
//
// Параметры:
//  ДанныеПечати -  Данные шапки документа
//  Товары - Данные табличной части документа
//  Макет - Макет ОтчетПоКомиссии
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаОтчетаОПродажахКомиссионногоТовара(ДанныеПечати, Товары, Макет, ТабличныйДокумент)
	
	СуммаПродажи = ДанныеПечати.СуммаДокумента;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.СуммаКомитентаВсего      = ДанныеПечати.СуммаКомитента;
	ОбластьМакета.Параметры.СуммаПродажиВсего        = СуммаПродажи;
	ОбластьМакета.Параметры.СуммаВознагражденияВсего = ДанныеПечати.СуммаВознаграждения;
	ОбластьМакета.Параметры.ИтоговаяСтрока           = ДанныеПечати.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ОТЧЕТОМ О СПИСАНИИ КОМИССИОННОГО ТОВАРА

Функция ПолучитьДанныеОтчетаОСписанииКомиссионногоТовараДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКомитенте = Новый Структура;
	СведенияОКомитенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияОКомитенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияОКомитенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));
	СведенияОКомитенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияОКомитенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомитенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомитенте);
	КонецЕсли;
	
	СведенияОКомиссионере = Новый Структура;
	СведенияОКомиссионере.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКомиссионере.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКомиссионере.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКомиссионере.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКомиссионере.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомиссионере);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомиссионере);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.КодОКВ"));
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогоПоДокументу"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Код                          = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		НоваяСтрока.Артикул                      = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		НоваяСтрока.Наименование                 = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Наименование");
		НоваяСтрока.ЕдиницаИзмеренияНаименование = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.ЕдиницаИзмерения.Наименование");
		НоваяСтрока.Количество                   = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Количество");
		НоваяСтрока.Цена                         = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма                        = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ отчет о списании комиссионного товара
//
Процедура ЗаполнитьТабличныйДокументОтчетОСписанииКомиссионногоТовара_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ОтчетПоКомиссииОСписании");
	
	Заголовок = "Отчет о списании комиссионного товара";
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Выводим общие реквизиты шапки
	ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати.Шапка, Заголовок, Макет, ТабличныйДокумент);
	
	// Выводим заголовок таблицы
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами");
		ЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = КолонкаКодов;
	Иначе
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	
	Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ДанныеПечати.Шапка.КодВалюты);
	
	ЗаголовокТаблицы.Параметры.Валюта = Валюта;
	ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Если ЗначениеЗаполнено(КолонкаКодов) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСКодами");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	
	НомерСтроки = 0;
	
	Для каждого СтрокаТовары из ДанныеПечати.Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		Если ЗначениеЗаполнено(КолонкаКодов) Тогда
			ОбластьМакета.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакета.Параметры.ТоварНаименование = СтрокаТовары.Наименование;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании(ДанныеПечати.Шапка, ДанныеПечати.Товары, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполнения реквизитов шапки отчета по комиссии
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  Макет - Макет отчета
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати, Заголовок, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОКомитенте = ДанныеПечати.СведенияОПоставщике;
	СведенияОКомиссионере = ДанныеПечати.СведенияОПокупателе;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТекстЗаголовка = НСтр("ru='" + Заголовок + " № %1 от %2 г.'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ДанныеПечати.Номер,
		Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'"));

	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ОбластьМакета.Параметры.ПредставлениеКомитента = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		СведенияОКомитенте, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеКомиссионера = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		СведенияОКомиссионере, "ПолноеНаименование,");
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала отчета по комиссии о списании.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  ВыборкаПоДокументам - ВыборкаИзРезультатаЗапроса - Данные табличной части документа
//  Макет - Макет ОтчетКомитенту
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании(ДанныеПечати, Товары, Макет, ТабличныйДокумент)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	СуммаВсего = ДанныеПечати.СуммаДокумента;
	
	ОбластьМакета.Параметры.СуммаВсего = СуммаВсего;
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с печатными формами

// Функция формирования структуры хранения итоговых суммы.
//
// Возвращаемое значение:
//  Структура - Структура хранения итоговых сумм
//
Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоНДСНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоНДС", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции

// Функция формирования структуры хранения данных строки.
//
// Параметры:
//  КоэффициентПересчета - Число - Коэффициент пересчета в валюту регл. учета
//
// Возвращаемое значение:
//  Структура - Структура данных строки товаров
//
Функция СтруктураДанныеСтроки(КоэффициентПересчета)
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("СуммаБезНДС", 0);
	Структура.Вставить("СуммаНДС", 0);
	Структура.Вставить("СуммаСНДС", 0);
	Структура.Вставить("КоэффициентПересчета", КоэффициентПересчета);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНетто", 0);
	
	Возврат Структура;
	
КонецФункции

// Процедура обнуления итоговых сумм по странице.
//
Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
	ИтоговыеСуммы.ИтогоНДСНаСтранице         = 0;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;
	
КонецПроцедуры

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  ДанныеСтроки - Структура - Структура данных строки товаров
//
Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.ИтогоНДСНаСтранице         = ИтоговыеСуммы.ИтогоНДСНаСтранице + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице + ДанныеСтроки.МассаНетто;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто + ДанныеСтроки.МассаНетто;
	
КонецПроцедуры

// Функция форматирования сумм
//
// Параметры:
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "")
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" + ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
		+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции

// Функция приводит к требуемому формату сумму НДС, если она имеет числовое представление.
//
// Параметры:
// СуммаНДС - строка, сумма НДС (без НДС, -, число).
//
// Возвращаемое значение:
// ВозвращаемаяСумма - если входящий параметр - представление числа, то возвращаемое значение - число.
//
Функция СуммаНДССФПривестиКТребуемомуФормату(СуммаНДС)
	
	Если Найти(СуммаНДС, ".") > 0 ИЛИ Найти(СуммаНДС, ",") > 0 ИЛИ Найти(СуммаНДС, "-") > 0 Тогда
		ВозвращаемаяСумма = Число(СуммаНДС);
	Иначе
		ВозвращаемаяСумма = СуммаНДС;
	КонецЕсли;
	
	Возврат ВозвращаемаяСумма;
	
КонецФункции

// Проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(ОбластьМакета)
	
	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка к просмотру служебного ЭД

Функция ПолучитьДанныеУчастникаОбменаЭД(УчастникОбмена)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если УчастникОбмена.Свойства().Получить("ОтпрЮЛ") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ОтпрЮЛ.НаимОрг + ", " + УчастникОбмена.ОтпрЮЛ.ИННЮЛ + "/"
			+ УчастникОбмена.ОтпрЮЛ.КПП;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ПолЮЛ") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ПолЮЛ.НаимОрг + ", " + УчастникОбмена.ПолЮЛ.ИННЮЛ + "/"
			+ УчастникОбмена.ПолЮЛ.КПП;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ОтпрИП") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = СокрЛП(УчастникОбмена.ОтпрИП.ФИО.Фамилия + " " + УчастникОбмена.ОтпрИП.ФИО.Имя + " "
			+ УчастникОбмена.ОтпрИП.ФИО.Отчество) + ", " + УчастникОбмена.ОтпрИП.ИННФЛ;
		ИначеЕсли УчастникОбмена.Свойства().Получить("ЮЛ") <> Неопределено И УчастникОбмена.ЮЛ <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ЮЛ.НаимОрг + ", " + УчастникОбмена.ЮЛ.ИННЮЛ + "/" + УчастникОбмена.ЮЛ.КПП;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ИП") <> Неопределено И УчастникОбмена.ИП <> Неопределено Тогда
		
		ВозвращаемоеЗначение = СокрЛП(УчастникОбмена.ИП.ФИО.Фамилия + " " + УчастникОбмена.ИП.ФИО.Имя + " "
			+ УчастникОбмена.ИП.ФИО.Отчество) + ", " + УчастникОбмена.ИП.ИННФЛ;
	ИначеЕсли УчастникОбмена.Свойства().Получить("ОперЭДО") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = УчастникОбмена.ОперЭДО.НаимОрг + ", " + УчастникОбмена.ОперЭДО.ИННЮЛ;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с подтверждением

// ПДПЭСФ, ПДОИПЭСФ
Процедура ПрочитатьПодтверждениеДатыПолученияXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                 ЭД.Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя", ЭД.Документ.ОтпрДок.ИдУчастЭДО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",               ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ПолДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",  ЭД.Документ.ПолДок.ИдУчастЭДО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",             ЭД.Документ.СведПодтв.ДатаОтпр);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",            ЭД.Документ.СведПодтв.ВремяОтпр);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",                 ЭД.Документ.КНД);
	Если ЭД.Документ.КНД = "1115112" Тогда
		ПараметрЗаголовка = "получения";
		ОтправленПолучен = "получен";
	Иначе
		ПараметрЗаголовка = "отправки";
		ОтправленПолучен = "отправлен";
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",  ПараметрЗаголовка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",  ОтправленПолучен);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");
	
КонецПроцедуры

// ПДОЭСФ
Процедура ПрочитатьПодтверждениеДатыОтправкиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                 ЭД.Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвОтпрДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя", ЭД.Документ.СвОтпрДок.ИдУчастЭДО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",               ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвПолДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",  ЭД.Документ.СвПолДок.ИдУчастЭДО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",             ЭД.Документ.СведПодтв.ДатаОтпр);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",            ЭД.Документ.СведПодтв.ВремяОтпр);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",                 ЭД.Документ.КНД);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",        "отправки");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",        "отправлен");
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");
	
КонецПроцедуры

// ПДО
Процедура ПрочитатьПодтверждениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",      ЭД.Документ.СведПодтв.ИмяПостФайла);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",   ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвОтпр));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",    ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ПолДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",  ЭД.Документ.СведПодтв.ДатаДок);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки", ЭД.Документ.СведПодтв.ВремяДок);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",      ЭД.Документ.КНД);
	Если ЭД.Документ.КНД = "1167002" Тогда
		ПараметрЗаголовка = "получения";
		ОтправленПолучен = "получен";
	Иначе
		ПараметрЗаголовка = "отправки";
		ОтправленПолучен = "отправлен";
	КонецЕсли;
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",  ПараметрЗаголовка);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",  ОтправленПолучен);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");
	
КонецПроцедуры

// Процедура заполняет табличный документ Подтверждение (ПДО, ПДП, ПДОИП).
//
Процедура ЗаполнитьТабличныйДокументПодтверждение(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Подтверждение";
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Подтверждение");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Функция ПолучитьДанныеПодтвержденияДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("ОператорЭДО", "Оператор электронного документооборота "
		+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ОператорЭДО"));
	
	ДанныеЗаполненияШапки.Вставить("Отправитель", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	
	ДанныеЗаполненияШапки.Вставить("Получатель",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	
	ДанныеЗаполненияШапки.Вставить("ДатаОтправки", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОтправки"));
	ДанныеЗаполненияШапки.Вставить("ВремяОтправки",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ВремяОтправки"));
	
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	ДанныеЗаполненияШапки.Вставить("ПараметрЗаголовка", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПараметрЗаголовка"));
	ДанныеЗаполненияШапки.Вставить("КНДФормы", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"КНДФормы"));
	ДанныеЗаполненияШапки.Вставить("Отправлен_Получен", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Отправлен_Получен"));
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр извещений

// Процедура заполняет табличный документ Извещение.
//
Процедура ЗаполнитьТабличныйДокументИзвещение(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Извещение";
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Извещение");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Извещение о получении электронного документа'");
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ПрочитатьИзвещениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                ЭД.Документ.СвИзвПолуч.СведПолФайл.ИмяПостФайла);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",             ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя",
		?(ЭД.Документ.ОтпрДок.ОперЭДО <> Неопределено, ЭД.Документ.ОтпрДок.ОперЭДО.ИдОперЭДО,
		ЭД.Документ.ОтпрДок.ИдУчастЭДО));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.УчастЭДО));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя", ЭД.Документ.УчастЭДО.ИдУчастЭДО);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",           ЭД.Документ.СвИзвПолуч.ДатаПол);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяПолучения",          ЭД.Документ.СвИзвПолуч.ВремяПол);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",       "");
	
КонецПроцедуры

Функция ПолучитьДанныеИзвещенияДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Отправитель", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	
	ДанныеЗаполненияШапки.Вставить("Получатель",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаПолучения"));
	ДанныеЗаполненияШапки.Вставить("ВремяПолучения",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВремяПолучения"));
	
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование извещений

Процедура ДозаполнитьСтруктуруТипДокументДляИзвещенияОПолучении(СтруктураДокумента)
	
	// Структура участника ЭДО
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИдУчастникаЭДО");
	СтруктураДанных.Вставить("УчастникЭДО");
	СтруктураДокумента.Вставить("ОтправительЭД", СтруктураДанных);
	
	// Структура извещения
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаПолучения");
	СтруктураДанных.Вставить("ВремяПолучения");
	СтруктураДанных.Вставить("ИмяПолученногоФайла");
	
	ТЗ_ЭЦП = Новый ТаблицаЗначений;
	ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");
	
	СтруктураДанных.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);
	
	ДанныеПолученногоЭД = Новый Структура;
	ДанныеПолученногоЭД.Вставить("НаимДокумента");
	ДанныеПолученногоЭД.Вставить("НомерДокумента");
	ДанныеПолученногоЭД.Вставить("ДатаДокумента");
	
	СтруктураДанных.Вставить("ДанныеПолученногоДокумента", ДанныеПолученногоЭД);
	
	СтруктураДокумента.Вставить("ДанныеИзвещения", СтруктураДанных);
	
	// Структура получателя
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИдУчастникаЭДО");
	СтруктураДанных.Вставить("УчастникЭДО");
	
	СтруктураДокумента.Вставить("ПолучательЭД", СтруктураДанных);
	
	// Структура подписанта
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Должность");
	СтруктураДанных.Вставить("ФИО", СоздатьСтруктуруТипФИО());
	
	СтруктураДокумента.Вставить("Подписант", СтруктураДанных);
	
КонецПроцедуры

Процедура СформироватьДанныеПоУчастникуЭДО(УчастникЭДО, СтруктураПараметров, ВидУчастникаЭДО, ТекстОшибки, ПространствоИмен, ВерсияФормата)
	
	ДанныеУчастникаЭДО = Неопределено;
	Если НЕ СтруктураПараметров.Свойство(ВидУчастникаЭДО, ДанныеУчастникаЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИдУчастЭДО", СтруктураПараметров.ИдУчастникаЭДО, Истина, ТекстОшибки);
	
	// Заполнение реквизитов
	Если ВидУчастникаЭДО = "ОператорЭДО" Тогда
		РеквизитыОператора = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ОперЭДО"), ВерсияФормата);
		ЗаполнитьСвойствоXDTO(РеквизитыОператора, "НаимОрг", ДанныеУчастникаЭДО.Наименование, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыОператора, "ИННЮЛ", ДанныеУчастникаЭДО.ИНН, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыОператора, "ИдОперЭДО", ДанныеУчастникаЭДО.ИдентификаторОператора, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УчастникЭДО, "ОперЭДО", РеквизитыОператора, Истина, ТекстОшибки);
	Иначе
		ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеУчастникаЭДО);
		ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеУчастникаЭДО);
		
		ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
		ПолноеНаименование = "";
		ДанныеЮрФизЛица.Свойство("ОфициальноеНаименование", ПолноеНаименование);
		
		Если НЕ ЗначениеЗаполнено(ПолноеНаименование) Тогда
			ПолноеНаименование = ?(ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование), ДанныеЮрФизЛица.ПолноеНаименование,
				ДанныеЮрФизЛица.Представление);
		КонецЕсли;
		
		РеквизитыКонтрагентаИмя  = ?(ЭтоФизЛицо, "ФЛТип", "ЮЛТип");
		РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, РеквизитыКонтрагентаИмя), ВерсияФормата);
		
		Если ЭтоФизЛицо Тогда
			РеквизитыФИО = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"), ВерсияФормата);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Фамилия", ДанныеЮрФизЛица.Фамилия, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Имя", ДанныеЮрФизЛица.Имя, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Отчество", ДанныеЮрФизЛица.Отчество, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ФИО", РеквизитыФИО, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", РеквизитыКонтрагента, Истина, ТекстОшибки);
		Иначе
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "НаимОрг", ПолноеНаименование, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "КПП", ДанныеЮрФизЛица.КПП, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", РеквизитыКонтрагента, Истина, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЭЦППолученногоФайла(СсылкаНаОбъект, ТаблицаЗначений)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Подпись
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтрока = ТаблицаЗначений.Добавить();
		НовСтрока.ЭЦП = Base64Строка(Выборка.Подпись.Получить());
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров)
	
	Отказ = ЭлектронныеДокументыПереопределяемый.ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД,
		СтруктураПараметров);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Возьмем первый действующий сертификат для соответствующего вида ЭД
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СертификатыЭЦПВидыДокументов.Ссылка,
	|	СертификатыЭЦПВидыДокументов.Ссылка.ДолжностьПоСертификату КАК Должность,
	|	СертификатыЭЦПВидыДокументов.Ссылка.ФайлСертификата КАК Сертификат
	|ИЗ
	|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|ГДЕ
	|	СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидЭД
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВидЭД", СтруктураЭД.ВидЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Должность = ?(ЗначениеЗаполнено(Выборка.Должность), Выборка.Должность, НСтр("ru = 'Не назначена'")); // необходимо заполнить обязательно
		СтруктураПараметров.Вставить("Должность", Должность);
		
		Сертификат = Новый СертификатКриптографии(Выборка.Сертификат.Получить());
		КомуВыдан = "";
		Если Сертификат.Субъект.Свойство("CN", КомуВыдан) Тогда // ФИО возьмем из сертификата
			Фамилия = "";
			Имя = "";
			Отчество = "";
			СокрФИО = ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(КомуВыдан, Фамилия, Имя, Отчество); // разложим на Ф, И, О
			СтруктураПараметров.ФИО.Вставить("Фамилия",  Фамилия);
			СтруктураПараметров.ФИО.Вставить("Имя",      Имя);
			СтруктураПараметров.ФИО.Вставить("Отчество", Отчество);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьФайлИзвещенияПоЭД(СсылкаНаЭД)
	
	ВозвращаемоеЗначение = Неопределено;
	
	НастройкиОбменаЭД = СсылкаНаЭД.СоглашениеЭД;
	
	СтруктураЭД = Новый Структура; // для создания ЭДПрисоединенныеФайлы
	СтруктураЭД.Вставить("ВидЭД",         Перечисления.ВидыЭД.ИзвещениеОПолучении);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("НомерЭД",       Новый УникальныйИдентификатор());
	
	Если ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(НастройкиОбменаЭД.СпособОбменаЭД) Тогда
		СтруктураЭД.Вставить("Получатель",   НастройкиОбменаЭД.Контрагент);
		СтруктураЭД.Вставить("ИдПолучателя", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	Иначе // через ОператораЭДО
		СтруктураУчастника = ЭлектронныеДокументыСлужебный.ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(НастройкиОбменаЭД,
			СсылкаНаЭД.Контрагент);
		СтруктураЭД.Вставить("Получатель",   СтруктураУчастника.Контрагент);
		СтруктураЭД.Вставить("ИдПолучателя", СтруктураУчастника.ИдентификаторКонтрагента);
		
		Если СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
			ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
			
			СтруктураЭД.Вставить("ОператорЭДО", ЭлектронныеДокументыОператорыЭДО.СтруктураНастроекОператораЭДО());
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЭД.Вставить("ИдОтправителя", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Отправитель",   НастройкиОбменаЭД.Организация);
	СтруктураЭД.Вставить("ИдФайла",       ОпределитьИдФайлаЭД(СтруктураЭД));
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", СсылкаНаЭД.Наименование);
	// Дата и время получения файла.
	СтруктураЭД.Вставить("ДатаВремяПолучения", СсылкаНаЭД.ДатаСоздания);
	
	СтруктураПараметров = ПодготовитьДанныеПоИзвещению(СсылкаНаЭД, СтруктураЭД);
	
	Если ЗаполнитьФайлИзвещенияОПолучении(СтруктураПараметров) Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
		СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		
		ВозвращаемоеЗначение = СтруктураЭД;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗаполнитьФайлИзвещенияОПолучении(СтруктураПараметров)
	
	ТекстОшибки = "";
	ПространствоИмен = "DP_IZVPOL";
	ПутьКОписанию = "{" + ПространствоИмен + "}.Файл";
	
	Попытка
		ЭД = ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		// Общая информация
		ЗаполнитьСвойствоXDTO(ЭД, "ИдФайл", СтруктураПараметров.ИдФайла, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "ВерсПрог", СтруктураПараметров.ВерсияПрограммы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "ВерсФорм", СтруктураПараметров.ВерсияФормата, Истина, ТекстОшибки);
		
		ДокументЭО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "КНД", СтруктураПараметров.Документ.КодКНД, Истина, ТекстОшибки);
		
		// Отправитель извещения
		Отправитель = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.УчастЭДО");
		СформироватьДанныеПоУчастникуЭДО(Отправитель, СтруктураПараметров.Документ.ОтправительЭД, "УчастникЭДО", ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "УчастЭДО", Отправитель, Истина, ТекстОшибки);
		
		// Получатель извещения
		Получатель = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.ОтпрДок");
		Если СтруктураПараметров.Документ.ПолучательЭД.Свойство("ОператорЭДО") Тогда
			ТипПолучателя = "ОператорЭДО";
		Иначе
			ТипПолучателя = "УчастникЭДО";
		КонецЕсли;
		
		СформироватьДанныеПоУчастникуЭДО(Получатель, СтруктураПараметров.Документ.ПолучательЭД, ТипПолучателя, ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОтпрДок", Получатель, Истина, ТекстОшибки);
		
		// Сведения извещения
		ИзвещениеЭД = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.СвИзвПолуч");
		ЗаполнитьСвойствоXDTO(ИзвещениеЭД, "ДатаПол",  СтруктураПараметров.Документ.ДанныеИзвещения.ДатаПолучения, Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ИзвещениеЭД, "ВремяПол", СтруктураПараметров.Документ.ДанныеИзвещения.ВремяПолучения, Истина,
			ТекстОшибки);
		
		// Данные о полученном файле
		ПолученныйЭД = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "СведПолФайл"));
		ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ИмяПостФайла", СтруктураПараметров.Документ.ДанныеИзвещения.ИмяПолученногоФайла,
			Истина, ТекстОшибки);
		
		// ЭЦП полученного файла в кодировке Base64
		ТЗ_ЭЦП = СтруктураПараметров.Документ.ДанныеИзвещения.ПолученныеЭЦП;
		Если ТЗ_ЭЦП.Количество() > 0 Тогда
			Для Каждого ТекСтроки Из ТЗ_ЭЦП Цикл
				ПолученныйЭД.ЭЦППолФайл.Добавить(ТекСтроки.ЭЦП);
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ИзвещениеЭД, "СведПолФайл", ПолученныйЭД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "СвИзвПолуч", ИзвещениеЭД, Истина, ТекстОшибки);
		
		// Подписант
		Подписант = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "Подписант"));
		ЗаполнитьСвойствоXDTO(Подписант, "Должность", СтруктураПараметров.Документ.Подписант.Должность, Истина, ТекстОшибки);
		// Его ФИО
		ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", СтруктураПараметров.Документ.Подписант.ФИО.Фамилия, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", СтруктураПараметров.Документ.Подписант.ФИО.Имя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Отчество", СтруктураПараметров.Документ.Подписант.ФИО.Отчество, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "Документ", ДокументЭО, Истина, ТекстОшибки);
		
		ЭД.Проверить();
		ФайлИзвещения = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ВыгрузитьЭДвФайл(ЭД, ФайлИзвещения, Ложь, "windows-1251");
		
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ФайлИзвещения);
		
		Возврат Истина;
	Исключение
		ТекстСообщения = НСтр("ru = '" + ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())) + " (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПодготовитьДанныеПоИзвещению(СсылкаНаОбъект, СтруктураЭД)
	
	СтруктураПараметров = СоздатьСтруктуруТипФайл(СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("ИдФайла", СтруктураЭД.ИдФайла);
	СтруктураПараметров.Вставить("ВерсияПрограммы", НСтр("ru = '1С:Предприятие 8'"));
	СтруктураПараметров.Вставить("ВерсияФормата", "1.02");
	
	// Документ
	СтруктураПараметров.Документ.Вставить("КодКНД", "1115110");
	СтруктураПараметров.Документ.ОтправительЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДОтправителя);
	СтруктураПараметров.Документ.ОтправительЭД.Вставить("УчастникЭДО", СтруктураЭД.Отправитель);
	СтруктураПараметров.Документ.ПолучательЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДПолучателя);
	Если СтруктураЭД.Свойство("ОператорЭДО") Тогда
		СтруктураПараметров.Документ.ПолучательЭД.Вставить("ОператорЭДО", СтруктураЭД.ОператорЭДО);
	Иначе
		СтруктураПараметров.Документ.ПолучательЭД.Вставить("УчастникЭДО", СтруктураЭД.Получатель);
	КонецЕсли;
	
	// Данные извещения по полученному файлу
	СтруктураПараметров.Документ.ДанныеИзвещения.Вставить("ДатаПолучения", ВернутьДатуЭСФ(СтруктураЭД.ДатаВремяПолучения));
	СтруктураПараметров.Документ.ДанныеИзвещения.Вставить("ВремяПолучения", ВернутьВремяЭСФ(СтруктураЭД.ДатаВремяПолучения));
	СтруктураПараметров.Документ.ДанныеИзвещения.Вставить("ИмяПолученногоФайла",
		СтруктураЭД.ИмяПолученногоФайлаБезРасширения);
	
	// ЭЦП полученного файла
	ЗаполнитьЭЦППолученногоФайла(СсылкаНаОбъект, СтруктураПараметров.Документ.ДанныеИзвещения.ПолученныеЭЦП);
	
	// ЭЦП полученного файла
	ЗаполнитьДанныеПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров.Документ.Подписант);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция СформироватьИмяФайлаЭД(СтруктураЭД)
	
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		СтрокаИмени = СтруктураЭД.ИдФайла+".xml";
	Иначе
		СтрокаИмени = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	КонецЕсли;
	СтрокаИмени = ЭлектронныеДокументыСлужебный.КорректноеИмяФайла(СтрокаИмени, Истина);
	
	Возврат СтрокаИмени;
	
КонецФункции

Функция ОпределитьИдФайлаЭД(СтруктураЭД)
	
	ТекстИд = "";
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		
		// Формат имени по ЭСФ: DP_IZVPOL_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
		ТекстИд = НСтр("ru = 'DP_IZVPOL_%1_%2_%3_%4'");
		Если СтруктураЭД.Свойство("ОператорЭДО") И СтруктураЭД.ОператорЭДО.Свойство("ИдентификаторОператора") Тогда
			ИдПолучателя = СтруктураЭД.ОператорЭДО.ИдентификаторОператора;
		Иначе
			ИдПолучателя = СтруктураЭД.ИдПолучателя;
		КонецЕсли;
		ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, ИдПолучателя, СтруктураЭД.ИдОтправителя,
			ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);
	ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		// Формат имени по ЭСФ: DP_UVUTOCH_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
		ТекстИд = НСтр("ru = 'DP_UVUTOCH_%1_%2_%3_%4'");
		ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, СтруктураЭД.ИдПолучателя,
			СтруктураЭД.ИдОтправителя, ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);
	КонецЕсли;
	
	ИдФайлаЭД = ЭлектронныеДокументыСлужебный.КорректноеИмяФайла(ТекстИд);
	
	Возврат ИдФайлаЭД;
	
КонецФункции

Функция ВернутьДатуСтрокойДляИД(ДатаВремя)
	
	Возврат Формат(ДатаВремя, "ДФ=yyyyMMdd");
	
КонецФункции

Функция ВернутьДатуЭСФ(ДатаВремя)
	
	ДатаЭСФ = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");
	Возврат ДатаЭСФ;
	
КонецФункции

Функция ВернутьВремяЭСФ(ДатаВремя)
	
	ВремяЭСФ = Формат(Час(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";
	ВремяЭСФ = ВремяЭСФ+Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";
	ВремяЭСФ = ВремяЭСФ+Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=");
	
	Возврат ВремяЭСФ;
	
КонецФункции

Функция СоздатьСтруктуруТипФИО()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Фамилия");
	СтруктураДанных.Вставить("Имя");
	СтруктураДанных.Вставить("Отчество");
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СоздатьСтруктуруТипФайл(ВидЭД)
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("ИдФайла");
	СтруктураДанных.Вставить("ВерсияПрограммы");
	СтруктураДанных.Вставить("ВерсияФормата");
	СтруктураДанных.Вставить("ВидЭД",    ВидЭД);
	СтруктураДанных.Вставить("Документ", СоздатьСтруктуруТипДокумент(ВидЭД));
	СтруктураДанных.Вставить("ОбязательныеПараметры", "ИдФайла, ВерсияПрограммы, ВерсияФормата, Документ");
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СоздатьСтруктуруТипДокумент(ВидЭД)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("КодКНД"); // код классификатора налоговой документации
	
	Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		ДозаполнитьСтруктуруТипДокументДляИзвещенияОПолучении(СтруктураДанных);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		ДозаполнитьСтруктуруТипДокументДляУведомленияОбУточнении(СтруктураДанных);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр уведомлений об уточнении

// Процедура заполняет табличный документ Уведомление об уточнении.
//
Процедура ЗаполнитьТабличныйДокументУточнение(ТабличныйДокумент, ДанныеПечати)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Уточнение";
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Уточнение");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Уведомление об уточнении'");
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ПрочитатьУточнениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении;
	
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",          ЭД.Документ.СвУведУточ.СведПолФайл.ИмяПостФайла);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",       ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",        ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.УчастЭДО));
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",     ЭД.Документ.СвУведУточ.ДатаПол);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяПолучения",    ЭД.Документ.СвУведУточ.ВремяПол);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстУточнения",    ЭД.Документ.СвУведУточ.ТекстУведУточ);
	ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка", "");
	
КонецПроцедуры

Процедура ДозаполнитьСтруктуруТипДокументДляУведомленияОбУточнении(СтруктураДокумента)
	
	// Структура участника ЭДО
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИдУчастникаЭДО");
	СтруктураДанных.Вставить("УчастникЭДО");
	
	СтруктураДокумента.Вставить("ОтправительЭД", СтруктураДанных);
	
	// Структура извещения
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаПолучения");
	СтруктураДанных.Вставить("ВремяПолучения");
	СтруктураДанных.Вставить("ИмяПолученногоФайла");
	СтруктураДанных.Вставить("ТекстУточнения");
	
	ТЗ_ЭЦП = Новый ТаблицаЗначений;
	ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");
	
	СтруктураДанных.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);
	
	ДанныеПолученногоЭД = Новый Структура;
	ДанныеПолученногоЭД.Вставить("НаимДокумента");
	ДанныеПолученногоЭД.Вставить("НомерДокумента");
	ДанныеПолученногоЭД.Вставить("ДатаДокумента");
	
	СтруктураДанных.Вставить("ДанныеПолученногоДокумента", ДанныеПолученногоЭД);
	
	СтруктураДокумента.Вставить("ДанныеУточнения", СтруктураДанных);
	
	// Структура получателя
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИдУчастникаЭДО");
	СтруктураДанных.Вставить("УчастникЭДО");
	
	СтруктураДокумента.Вставить("ПолучательЭД", СтруктураДанных);
	
	// Структура подписанта
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Должность");
	СтруктураДанных.Вставить("ФИО", СоздатьСтруктуруТипФИО());
	
	СтруктураДокумента.Вставить("Подписант", СтруктураДанных);
	
КонецПроцедуры

Функция СформироватьФайлУведомлениеОбУточненииПоЭД(СсылкаНаЭД, ТекстУточнения)
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураЭД = СтруктураУведомленияОбУточнении(); // для создания ЭДПрисоединенныеФайлы
	
	СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении;
	СтруктураЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
	СтруктураЭД.НомерЭД = Новый УникальныйИдентификатор();
	СтруктураЭД.ИдОтправителя = СсылкаНаЭД.ПолучательЭД;
	СтруктураЭД.Отправитель = СсылкаНаЭД.Организация;
	СтруктураЭД.ИдПолучателя = СсылкаНаЭД.ОтправительЭД;
	СтруктураЭД.Получатель = СсылкаНаЭД.Контрагент;
	СтруктураЭД.ИдФайла = ОпределитьИдФайлаЭД(СтруктураЭД);
	СтруктураЭД.ИмяПолученногоФайлаБезРасширения =  СсылкаНаЭД.Наименование;
	// Дата и время получения файла
	СтруктураЭД.ДатаВремяПолучения = СсылкаНаЭД.ДатаСоздания;
	СтруктураЭД.ТекстУточнения = ТекстУточнения;
	СтруктураЭД.ИдПолучателя = СсылкаНаЭД.ОтправительЭД;
	СтруктураЭД.Получатель = СсылкаНаЭД.Контрагент;
	
	СтруктураПараметров = ПодготовитьДанныеПоУведомлению(СсылкаНаЭД, СтруктураЭД);
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("Уточнения");
	СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СформироватьИмяФайлаЭД(СтруктураЭД));
	
	Если ЗаполнитьФайлУведомленияОбУточнении(СтруктураПараметров) Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
		СтруктураЭД.АдресВоВременномХранилище = АдресВоВременномХранилище;
		
		ВозвращаемоеЗначение = СтруктураЭД;
	КонецЕсли;
	УдалитьФайлы(АдресКаталога);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьДанныеУточненияДляПечати(СтрокаОбъекта, ДеревоРазбора, ИД)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("Отправитель", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	ДанныеЗаполненияШапки.Вставить("Получатель",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаПолучения"));
	ДанныеЗаполненияШапки.Вставить("ВремяПолучения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВремяПолучения"));
	ДанныеЗаполненияШапки.Вставить("ТекстУточнения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ТекстУточнения"));
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	
	ЭДУточнение = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(ИД);
	
	Параметры = Новый Структура;
	Параметры.Вставить("УникальныйИД", ЭДУточнение.УникальныйИД);
	Параметры.Вставить("ВидЭД", Перечисления.ВидыЭД.Подтверждение);
	Параметры.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	Если ЭДУточнение.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ);
	Иначе
		Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ);
	КонецЕсли;
	
	ЭДПодтверждениеДаты = ЭлектронныеДокументыОператорыЭДО.ОпределитьДокументПоПараметрам(Параметры);
	Если ЭДПодтверждениеДаты <> Неопределено Тогда
		ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭДПодтверждениеДаты, , Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			Если ИмяФайла <> Неопределено Тогда
				
				ДанныеЭД.Записать(ИмяФайла);
				
				СтруктураПодтверждения = СформироватьДеревоРазбора(ИмяФайла, ЭДПодтверждениеДаты.НаправлениеЭД);
				
				Если СтруктураПодтверждения <> Неопределено И СтруктураПодтверждения.Количество() > 0 Тогда
					ДанныеЗаполненияШапки.Вставить("ДатаОтправления", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
						СтруктураПодтверждения.ДеревоРазбора, СтруктураПодтверждения.СтрокаОбъекта, "ДатаОтправки"));
					ДанныеЗаполненияШапки.Вставить("ВремяОтправления", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
						СтруктураПодтверждения.ДеревоРазбора, СтруктураПодтверждения.СтрокаОбъекта, "ВремяОтправки"));
					ДанныеЗаполненияШапки.Вставить("ОператорЭДО", "оператора электронного документооборота "
						+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(СтруктураПодтверждения.ДеревоРазбора,
						СтруктураПодтверждения.СтрокаОбъекта, "ОператорЭДО"));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьДанныеПоУведомлению(СсылкаНаОбъект, СтруктураЭД)
	
	СтруктураПараметров = СоздатьСтруктуруТипФайл(СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("ИдФайла", СтруктураЭД.ИдФайла);
	СтруктураПараметров.Вставить("ВерсияПрограммы", НСтр("ru = '1С:Предприятие 8'"));
	СтруктураПараметров.Вставить("ВерсияФормата", "1.02");
	
	// Данные по документу.
	СтруктураПараметров.Документ.Вставить("КодКНД", "1115113");
	СтруктураПараметров.Документ.ОтправительЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДОтправителя);
	СтруктураПараметров.Документ.ОтправительЭД.Вставить("УчастникЭДО", СтруктураЭД.Отправитель);
	СтруктураПараметров.Документ.ПолучательЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДПолучателя);
	СтруктураПараметров.Документ.ПолучательЭД.Вставить("УчастникЭДО", СтруктураЭД.Получатель);
	
	// Данные уведомления об уточнении по полученному файлу.
	СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ДатаПолучения", ВернутьДатуЭСФ(СтруктураЭД.ДатаВремяПолучения));
	СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ВремяПолучения", ВернутьВремяЭСФ(СтруктураЭД.ДатаВремяПолучения));
	СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ИмяПолученногоФайла", СтруктураЭД.ИмяПолученногоФайлаБезРасширения);
	СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ТекстУточнения", СтруктураЭД.ТекстУточнения);
	СтруктураПараметров.Документ.ДанныеУточнения.Вставить("НомерОтклоненногоЭД", СсылкаНаОбъект.НомерЭД);
	
	// ЭЦП полученного файла.
	ЗаполнитьЭЦППолученногоФайла(СсылкаНаОбъект, СтруктураПараметров.Документ.ДанныеУточнения.ПолученныеЭЦП);
	
	// ЭЦП полученного файла.
	ЗаполнитьДанныеПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров.Документ.Подписант);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЗаполнитьФайлУведомленияОбУточнении(СтруктураПараметров)
	
	ТекстОшибки = "";
	ПространствоИмен = "DP_UVUTOCH";
	ПутьКОписанию = "{" + ПространствоИмен + "}.Файл";
	
	Попытка
		ЭД = ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		// Общая информация
		ЗаполнитьСвойствоXDTO(ЭД, "ИдФайл",   СтруктураПараметров.ИдФайла, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "ВерсПрог", СтруктураПараметров.ВерсияПрограммы, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "ВерсФорм", СтруктураПараметров.ВерсияФормата, Истина, ТекстОшибки);
		
		ДокументЭО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "КНД", СтруктураПараметров.Документ.КодКНД, Истина, ТекстОшибки);
		
		// Отправитель извещения
		Отправитель = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.УчастЭДО");
		СформироватьДанныеПоУчастникуЭДО(Отправитель, СтруктураПараметров.Документ.ОтправительЭД, "УчастникЭДО", ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "УчастЭДО", Отправитель, Истина, ТекстОшибки);
		
		// Получатель извещения
		Получатель = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.ОтпрДок");
		СформироватьДанныеПоУчастникуЭДО(Получатель, СтруктураПараметров.Документ.ПолучательЭД, "УчастникЭДО", ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ОтпрДок", Получатель, Истина, ТекстОшибки);
		
		// Сведения уточнения
		УточнениеЭД = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.СвУведУточ");
		ЗаполнитьСвойствоXDTO(УточнениеЭД, "ДатаПол",  СтруктураПараметров.Документ.ДанныеУточнения.ДатаПолучения, Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УточнениеЭД, "ВремяПол", СтруктураПараметров.Документ.ДанныеУточнения.ВремяПолучения, Истина,
			ТекстОшибки);
		
		// Данные о полученном файле
		ПолученныйЭД = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "СведПолФайл"));
		ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ИмяПостФайла", СтруктураПараметров.Документ.ДанныеУточнения.ИмяПолученногоФайла,
			Истина, ТекстОшибки);
		
		// ЭЦП полученного файла в кодировке Base64.
		ТЗ_ЭЦП = СтруктураПараметров.Документ.ДанныеУточнения.ПолученныеЭЦП;
		Если ТЗ_ЭЦП.Количество() > 0 Тогда
			Для Каждого ТекСтроки Из ТЗ_ЭЦП Цикл
				ПолученныйЭД.ЭЦППолФайл.Добавить(ТекСтроки.ЭЦП);
			КонецЦикла;
		КонецЕсли;
		
		ДанПолучДок = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.СвУведУточ.ДанПолучДок");
		ЗаполнитьСвойствоXDTO(ДанПолучДок, "НаимДок", "ДокОснование", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанПолучДок, "НомСФ", СтруктураПараметров.Документ.ДанныеУточнения.НомерОтклоненногоЭД, ,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДанПолучДок, "ДатаСФ", СтруктураПараметров.Документ.ДанныеУточнения.ДатаПолучения, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УточнениеЭД, "ДанПолучДок", ДанПолучДок, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УточнениеЭД, "СведПолФайл", ПолученныйЭД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УточнениеЭД, "ТекстУведУточ", СтруктураПараметров.Документ.ДанныеУточнения.ТекстУточнения, Истина,
			ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "СвУведУточ", УточнениеЭД, Истина, ТекстОшибки);
		
		// Подписант
		Подписант = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "Подписант"));
		ЗаполнитьСвойствоXDTO(Подписант, "Должность", СтруктураПараметров.Документ.Подписант.Должность, Истина, ТекстОшибки);
		
		ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", СтруктураПараметров.Документ.Подписант.ФИО.Фамилия, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", СтруктураПараметров.Документ.Подписант.ФИО.Имя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Отчество", СтруктураПараметров.Документ.Подписант.ФИО.Отчество, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписант", Подписант, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ЭД, "Документ", ДокументЭО, Истина, ТекстОшибки);
		
		ЭД.Проверить();
		
		ВыгрузитьЭДвФайл(ЭД, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");
		
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '1% (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование уведомлений об уточнении

Функция ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД)
	
	ТипЭлементаВерсииЭД = СсылкаНаЭД.ТипЭлементаВерсииЭД;
	Если ЗначениеЗаполнено(ТипЭлементаВерсииЭД) Тогда
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
		Иначе
			ВозвращаемыйТип = Неопределено;
		КонецЕсли;
	Иначе
		Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
		ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
		ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
			ВозвращаемыйТип = Неопределено;
		Иначе
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемыйТип;
	
КонецФункции

Функция СтруктураУведомленияОбУточнении()
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД");
	СтруктураЭД.Вставить("НаправлениеЭД");
	СтруктураЭД.Вставить("НомерЭД");
	СтруктураЭД.Вставить("ИдОтправителя");
	СтруктураЭД.Вставить("ИдПолучателя");
	СтруктураЭД.Вставить("Отправитель");
	СтруктураЭД.Вставить("Получатель");
	СтруктураЭД.Вставить("ИдФайла");
	СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения");
	СтруктураЭД.Вставить("ДатаВремяПолучения");
	СтруктураЭД.Вставить("ТекстУточнения");
	СтруктураЭД.Вставить("АдресВоВременномХранилище");
	
	Возврат СтруктураЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Оператор ЭДО

Процедура ЗаполнитьРеквизитыОператораЭДО(СтруктураПараметров)
	
	СтруктураРеквизитов = ЭлектронныеДокументыОператорыЭДО.СтруктураНастроекОператораЭДО();
	Наименование = "";
	ИНН = "";
	ИдентификаторОператора = "";
	СтруктураРеквизитов.Свойство("Наименование", Наименование);
	СтруктураРеквизитов.Свойство("ИНН", ИНН);
	СтруктураРеквизитов.Свойство("ИдентификаторОператора", ИдентификаторОператора);
	Если СтруктураПараметров.Свойство("НаимОрг") Тогда
		СтруктураПараметров.НаимОрг = Наименование;
	Иначе
		СтруктураПараметров.Вставить("НаимОрг", Наименование);
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ИННЮЛ") Тогда
		СтруктураПараметров.ИННЮЛ = ИНН;
	Иначе
		СтруктураПараметров.Вставить("ИННЮЛ", ИНН);
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ИдЭДО") Тогда
		СтруктураПараметров.ИдЭДО = ИдентификаторОператора;
	Иначе
		СтруктураПараметров.Вставить("ИдЭДО", ИдентификаторОператора);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

Функция РекурсивноОбработатьСтрокиДерева(МассивСтрок, Рекв, ПространствоИменСхемы, ЮридическиЗначимый, ЕстьДанныеДляДопФайла, ТекстОшибки)
	
	Для Каждого СтрокаДЗ Из МассивСтрок Цикл
		Если НЕ ЮридическиЗначимый И СтрокаДЗ.ЮридическиЗначимый Тогда
			// Если ЮридическиЗначимый = Истина, то входящий МассивСтрок содержит только юридически значимые реквизиты.
			// В противном случае, МассивСтрок - смешанный, поэтому надо пропускать юридически значимые реквизиты (т.к. они
			// будут передаваться отдельно от незначимых, в разных файлах).
			Продолжить;
		КонецЕсли;
		Реквизит = ПолучитьОбъектТипаCML("Реквизит.Реквизит", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Реквизит, "Имя", СтрокаДЗ.ИмяРеквизита, , ТекстОшибки);
		Если ЗначениеЗаполнено(СтрокаДЗ.ЗначениеРеквизита) Тогда
			ЗаполнитьСвойствоXDTO(Реквизит, "Значение", СтрокаДЗ.ЗначениеРеквизита, , ТекстОшибки);
		КонецЕсли;
		МассивСтрокДЗ = СтрокаДЗ.Строки;
		Если МассивСтрокДЗ.Количество() > 0 Тогда // добавляем наборы и массивы данных:
			РекурсивноОбработатьСтрокиДерева(МассивСтрокДЗ, Реквизит, ПространствоИменСхемы, ЮридическиЗначимый,
				ЕстьДанныеДляДопФайла, ТекстОшибки);
			Рекв.Реквизит.Добавить(Реквизит);
		Иначе // добавляем конечные значения реквизитов:
			Если ЮридическиЗначимый = СтрокаДЗ.ЮридическиЗначимый Тогда
				Рекв.Реквизит.Добавить(Реквизит);
				ЕстьДанныеДляДопФайла = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция СформироватьУниверсальныйДопФайлCML(СтруктураПараметров,
											ТекстОшибки,
											Знач ЮридическиЗначимый = Ложь,
											ИмяТЧ = Неопределено,
											НомерСтроки = Неопределено)
	
	// ИмяТЧ и НомерСтроки заполняются только для юридически значимой информации (информация - которая будет помещена в
	// основном файле (ИнфПол, ИнфПолСтр) и подписана ЭЦП).
	Если ЗначениеЗаполнено(ИмяТЧ) ИЛИ НомерСтроки <> Неопределено Тогда
		ЮридическиЗначимый = Истина;
	КонецЕсли;
	ДопФайлСформирован = Ложь;
	ПространствоИменСхемы = "ДопФайлУниверсальный";
	Попытка
		ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
		Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") И ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			ЕстьДанныеДляДопФайла = Ложь;
			ДопФайл = ПолучитьОбъектТипаCML("ДопФайл", ПространствоИменСхемы);
			Данные = ПолучитьОбъектТипаCML("ДопФайл.Данные", ПространствоИменСхемы);
			
			Если НомерСтроки <> Неопределено Тогда
				// Если НомерСтроки - заполнено, то формируется строка ИнфПолСтр по юридически значимой информации и конкретной строке ТЧ.
				СтОтбора = Новый Структура;
				СтОтбора.Вставить("ТЧ", Истина);
				СтОтбора.Вставить("ИмяРеквизита", "Список");
				СтОтбора.Вставить("ЗначениеРеквизита", ИмяТЧ);
				МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если МассивСтрокДЗ.Количество() > 0 Тогда
					// В нужной таб.части найдем требующуюся строку (НомерСтроки):
					СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомерСтроки);
					МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(СтОтбора);
					Если МассивСтрокДЗ.Количество() > 0 Тогда
						// В подчиненных строках выберем юридически значимые реквизиты:
						МассивСтрокДЗ = МассивСтрокДЗ[0].Строки;//.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Если ЮридическиЗначимый=Истина, значит формируется строка ИнфПол(ИнфПолСтр).
				Если ЮридическиЗначимый Тогда
					СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Набор", ИмяТЧ);
					МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора);
					Если МассивСтрокДЗ.Количество() > 0 Тогда
						// В подчиненных строках выберем юридически значимые реквизиты:
						МассивСтрокДЗ = МассивСтрокДЗ[0].Строки;//.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
					КонецЕсли;
				Иначе
					МассивСтрокДЗ = ДеревоДопДанных.Строки;
				КонецЕсли;
			КонецЕсли;

			Если МассивСтрокДЗ.Количество() > 0 Тогда
				РекурсивноОбработатьСтрокиДерева(МассивСтрокДЗ, Данные, ПространствоИменСхемы, ЮридическиЗначимый,
					ЕстьДанныеДляДопФайла, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ДопФайл, "Данные", Данные, Истина, ТекстОшибки);
			КонецЕсли;
			
			ИдДопФайла = Новый УникальныйИдентификатор;
			ЗаполнитьСвойствоXDTO(ДопФайл, "ИдФайла", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ИдДопФайла", Строка(ИдДопФайла), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ВерсияФормата", "1", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ДатаФормирования", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
			ДопФайл.Проверить();
			
			Если ЕстьДанныеДляДопФайла И НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ЮридическиЗначимый Тогда
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.УстановитьСтроку();
					ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДопФайл);
					СтрXML = ЗаписьXML.Закрыть();
					НачПоз = Найти(СтрXML, "<Данные>");
					КолСимв = Найти(СтрXML, "</Данные>") - НачПоз + 9;
					СтрXML = Сред(СтрXML, НачПоз, КолСимв);
					СтруктураПараметров.Вставить("ИнфПол", СтрXML);
				Иначе
					СтруктураПараметров.Вставить("ИдентификаторДопФайла", ИдДопФайла);
					
					ПолноеИмяФайла = ЭлектронныеДокументыСлужебный.РабочийКаталог() + ИдДопФайла + ".xml";
					СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ПолноеИмяФайла);
					ВыгрузитьЭДвФайл(ДопФайл, ПолноеИмяФайла, Ложь);
				КонецЕсли;
				ДопФайлСформирован = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ДопФайлСформирован;
	
КонецФункции

Функция РекурсивноРазобратьДопФайл(ОбъектРазбора, ДеревоДопДанных, ЮридическиЗначимый = Ложь)
	
	Для Каждого Реквизит Из ОбъектРазбора.Реквизит Цикл
		СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", Реквизит.Имя, Реквизит.Значение);
		СтрокиДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора, Истина);
		Если СтрокиДЗ.Количество() <> 0 Тогда
			СтрДЗ = СтрокиДЗ[0];
		Иначе
			СтрДЗ = ДеревоДопДанных.Строки.Добавить();
			СтрДЗ.ИмяРеквизита = Реквизит.Имя;
			СтрДЗ.ЗначениеРеквизита = Реквизит.Значение;
			СтрДЗ.ЮридическиЗначимый = ЮридическиЗначимый;
		КонецЕсли;
		Если Реквизит.Реквизит <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(Реквизит, СтрДЗ);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Универсальный доп. файл, представляет из себя дерево с неограниченым уровнем вложений. Каждый элемент дерева имеет
// реквизиты (Имя, Значение) и подчиненные элементы (ветки), с таким же составом, как и у текущего элемента.
//
// Параметры:
//  ДопФайл - строка - путь к файлу.
//
// Возвращаемое значение - Неопределено, либо ДеревоЗначений.
//
Функция РазобратьУниверсальныйДопФайл(ДопФайл)
	
	ДеревоДопДанных = ДеревоДопДанных();
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ДопФайл);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));
		ОбъектXML.Закрыть();
		Если ЭД.Данные <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(ЭД.Данные, ДеревоДопДанных);
		КонецЕсли;
	Исключение
		ДеревоДопДанных = Неопределено;
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДопФайл, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Возврат ДеревоДопДанных;
	
КонецФункции

Процедура ПрочитатьИнфПол(Знач СтрокаXML, ДеревоДопДанных, ИмяНабораДанных, НомерСтроки = Неопределено)
	
	СтрокаXML = "<ДопФайл ИдФайла=""1"" ИдДопФайла=""1"" ВерсияФормата=""1"" ДатаФормирования=""2000-01-01T00:00:00"" xmlns=""ДопФайлУниверсальный"">"
		+ СтрокаXML + "</ДопФайл>";
	
	Если ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = ДеревоДопДанных();
	КонецЕсли;
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.УстановитьСтроку(СтрокаXML);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));
		ОбъектXML.Закрыть();
		Если ЭД.Данные <> Неопределено Тогда
			СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");
			Если СтрокаДЗ = Неопределено Тогда
				СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();
				СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;
				Если НомерСтроки = Неопределено Тогда
					СтрокаДЗ.ИмяРеквизита = "Набор";
				Иначе
					СтрокаДЗ.ИмяРеквизита = "Список";
				КонецЕсли;
			КонецЕсли;
			Если НомерСтроки <> Неопределено Тогда
				СтрокиДЗ = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомерСтроки));
				Если СтрокиДЗ.Количество() > 0 Тогда
					СтрокаДЗ = СтрокиДЗ[0];
				Иначе
					СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
					СтрокаДЗ.ИмяРеквизита = "Нпп";
					СтрокаДЗ.ЗначениеРеквизита = НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			РекурсивноРазобратьДопФайл(ЭД.Данные, СтрокаДЗ, Истина);
		КонецЕсли;
	Исключение
		ДеревоДопДанных = Неопределено;
		ОбъектXML.Закрыть();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла ошибка при чтении данных из строки доп.данных. (%1)'"), ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры