////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Получение данных объектов для сравнения

// Получает таблицу реквизитов шапки передаваемого объекта.
//
// Параметры
//  Объект           - Ссылка на объект, реквизиты шапки которого надо получить.
//  РеквизитыОбъекта - Строка содержащая названия реквизитов через запятую
//  ИмяОбъекта       - Строка, название объектов метаданных
//
Функция ПолучитьТаблицуРеквизитовШапки(СсылкаНаОбъект, РеквизитыОбъекта, ИмяОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ " + РеквизитыОбъекта + " ИЗ " + ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|	ТекущийОбъект.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает таблицу реквизитов табличной части передаваемого объекта.
//
// Параметры:
//  Объект - Ссылка на объект, реквизиты табличной части которого надо получить.
//  СтрокаТаблицыРеквизитов - Строка таблицы значений, набор наименований необходимых реквизитов для получения.
//
Функция ПолучитьТаблицуРеквизитовТабличнойЧасти(Объект, РеквизитыОбъекта, ИмяОбъекта, ИмяТабличнойЧасти) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ РеквизитыОбъекта + " ИЗ " + ИмяОбъекта + "." + ИмяТабличнойЧасти + " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|	ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры:
//  Таблица1, Таблица2 - таблицы значений, реквизиты, которые надо проверить на совпадение,
//  РеквизитыОбъекта   - строка, содержит реквизиты, перечисленные через запятую,
//  ДопПараметры       - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, РеквизитыОбъекта, ДопПараметры = Неопределено) Экспорт
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Шапка" Тогда
			
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = "Реквизиты шапки";
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти( - ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта,
						"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ	НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда
						Продолжить;
					КонецЕсли;
					НовСтрокаДереваРекв = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРекв.Реквизит  = ИмяКолонки;
					НовСтрокаДереваЗнч            = НовСтрокаДереваРекв.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД = ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД = НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = "Табличная часть <" + ИмяТабличнойЧасти + ">";
			НовСтрокаДереваРекв = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРекв.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакСовпадения;
	
КонецФункции

// Получает таблицу с ключевыми реквизитами объекта
// 
// Параметры 
//  ИмяОбъекта - строка, имя объекта конфигурации, ключевые реквизиты которого необходимо получить.
//
Функция ПолучитьТаблицуКлючевыхРеквизитовОбъекта(ИмяОбъекта) Экспорт
	
	ТаблицаРеквизитов = ИнициализацияТаблицыРеквизитовОбъектов();
	
	Если ИмяОбъекта = "Документ.ПакетЭД" Тогда
		Возврат ТаблицаРеквизитов;
	КонецЕсли;
	
	СтруктураКлючевыхРеквизитов = Новый Структура;
	Если ИмяОбъекта = "Документ.ПроизвольныйЭД" Тогда
		СтрокаРеквизитовОбъекта = "Дата, Номер, Организация, Контрагент, Текст";
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	Иначе
		ЭлектронныеДокументыПереопределяемый.ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураКлючевыхРеквизитов) Тогда
		ШаблонСообщения = НСтр("ru = 'Не определена структура ключевых реквизитов для объекта %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяОбъекта);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ТекПорядок = -50;
	Для Каждого ТекЭлемент Из СтруктураКлючевыхРеквизитов Цикл
		НовСтрока                            = ТаблицаРеквизитов.Добавить();
		НовСтрока.Порядок                    = ТекПорядок;
		НовСтрока.ИмяОбъекта                 = ИмяОбъекта;
		НовСтрока.ИмяТабличнойЧасти          = ?(ТекЭлемент.Ключ = "Шапка", "", ТекЭлемент.Ключ);
		НовСтрока.РеквизитыОбъекта           = ТекЭлемент.Значение;
		НовСтрока.СтруктураРеквизитовОбъекта = Новый Структура(ТекЭлемент.Значение);
		ТекПорядок = ТекПорядок + 100;
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Порядок Возр");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Устанавливает статус документа ПакетЭД.
//
// Параметры:
//  Пакет - Ссылка на документ ПакетЭД
//  СтатусПакета - ссылка на перечисление СтатусыПакетовЭД
//
Процедура УстановитьСтатусПакета(Пакет, СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.СтатусПакета = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

// Получает выборку элементов справочника ЭДПрисоединенныеФайлы по отбору
//
// Параметры:
//  Параметры - Структура, Ключ - название реквизита отбора, Значение - значение отбора
//
Функция ПолучитьВыборкуЭДПоОтбору(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") ИЛИ Параметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ЭДПрисоединенныеФайлы.Наименование,
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ 
	|";
	
	ПервыйЭлемент = Истина;
	Для Каждого Элемент Из Параметры Цикл
		Запрос.Текст = Запрос.Текст + ?(НЕ ПервыйЭлемент," И ","") + " ЭДПрисоединенныеФайлы." + Элемент.Ключ + "=&" + Элемент.Ключ;
		ПервыйЭлемент = Ложь;
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Возвращает ссылка на элемент справочника
//
// Параметры:
//  Наименование - Строка, название справочника в метаданных
//  ИД - Уникальный идентификатор элемента
//
// Возвращаемое значение:
//  Ссылка на элемент справочника
//
Функция ЭлементСправочникаПоИД(Наименование, ИД) Экспорт
	
	Результат = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(Наименование);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		Если ЗначениеЗаполнено(ИД) Тогда
			UID = Новый УникальныйИдентификатор(ИД);
			Результат = Справочники[ИмяПрикладногоСправочника].ПолучитьСсылку(UID);
		Иначе
			Результат = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку(Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отборы по элементу

// Устанавливает отбор по элементу при загрузке настроек.
//
// Параметры:
//  Форма - ссылка на форму, в которой надо провести отбор, 
//  СписокДанных - список, в котором будет проводиться отбор,
//  ВидЭлемента - строка, вид элемента, по которому будет проводиться отбор,
//  Настройки - структура настроек формы.
//
Процедура ОтборПоЭлементуПриЗагрузкеИзНастроек(Форма, СписокДанных, ВидЭлемента, Настройки) Экспорт
	
	ЗначениеЭлемента = Настройки.Получить(ВидЭлемента);
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Форма[ВидЭлемента] = ЗначениеЭлемента;
		УстановитьОтборВСпискеПоЭлементу(СписокДанных, ВидЭлемента, ЗначениеЭлемента);
	КонецЕсли;
	
	Настройки.Удалить(ВидЭлемента);
	
КонецПроцедуры

// Устанавливает отбор в списке данных по элементу.
//
// Параметры:
//  СписокДанных - список, в котором будет проводиться отбор,
//  ВидЭлемента - строка, вид элемента, по которому будет проводиться отбор,
//  ЗначениеЭлемента - значение, которое будет передано отбору.
//
Процедура УстановитьОтборВСпискеПоЭлементу(СписокДанных, ВидЭлемента, ЗначениеЭлемента) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		СписокДанных.Отбор, ВидЭлемента, ЗначениеЭлемента, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ЗначениеЭлемента));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Выполняет регламентное задание по получению
// новых электронных документов.
//
// Параметры:
//  ОписаниеОшибки - строка, описание ошибки, в случае ее возникновения в ходе получения документов.
//
Процедура РегламентноеПолучениеНовыхЭД() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение новых эл.документов'"), УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное задание по получению новых эл.документов.'"));
		
	НачатьТранзакцию();
	Попытка
		НовыеДокументы = ПолучитьНовыеЭД();
		КоличествоПакетов = НовыеДокументы.МассивВозврата.Количество();
		Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
			Если СтруктураРаспаковки.Распаковывать Тогда
				РаспаковатьПакетЭДНаСервере(СтруктураРаспаковки.ПакетЭД);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		Текст = НСтр("ru = 'Закончено регламентное задание. Получено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение новых эл.документов'"), УровеньЖурналаРегистрации.Информация, , , Текст);
		
	Исключение
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'Во время регламентного получения новых эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение новых эл.документов'"),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет регламентное задание по фактической отправке
// электронных документов.
//
Процедура РегламентнаяОтправкаОформленныхЭД() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка оформленных эл.документов'"), УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное задание по отправке оформленных эл.документов.'"));
		
	НачатьТранзакцию();
	Попытка
		КоличествоПакетов = ОтправкаСформированныхЭД();
		ЗафиксироватьТранзакцию();
		Текст = НСтр("ru = 'Закончено регламентное задание. Отправлено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка оформленных эл.документов'"),
			УровеньЖурналаРегистрации.Информация, , , Текст);
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'Во время регламентной отправки оформленных эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка оформленных эл.документов'"),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ОтправитьИПолучитьДокументы(СоответствиеПаролейДляЭДО) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КолОтправленныхПакетов", ОтправкаСформированныхЭД(СоответствиеПаролейДляЭДО));
	СтруктураВозврата.Вставить("НовыеДокументы", ПолучитьНовыеЭД(СоответствиеПаролейДляЭДО));
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправкаПакетовЭД(МассивПакетовЭД, СоответствиеПаролейДляЭДО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = 0;
	Для Каждого ТекЭл Из МассивПакетовЭД Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		Попытка
			ПакетЭД = ТекЭл;
			ТипОтправки = ТекЭл.СпособОбменаЭД;
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				Продолжить;
			КонецЕсли;
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				
				РезультатОтправки = РезультатОтправки + ОтправитьЭлектронноеПисьмо(ПакетЭД, АдресКаталогаОтправки);
				
			ИначеЕсли ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				Если СоответствиеПаролейДляЭДО = Неопределено Тогда
					ПарольКСертификату = Неопределено;
				Иначе
					ПарольКСертификату = СоответствиеПаролейДляЭДО.Получить(ПакетЭД.Соглашение.СертификатАбонента);
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				КоличествоКОтправке = ФайлыОтправки.Количество();
				КоличествоОтправленных = ЭлектронныеДокументыОператорыЭДО.ОтправитьЧерезОператораЭДО(ПакетЭД.Соглашение,
					АдресКаталогаОтправки, "SendMessage", ПарольКСертификату);
					
				Если КоличествоОтправленных <> КоличествоКОтправке Тогда
					ШаблонСообщения = Нстр("ru = 'Не удалось отправить оператору ЭДО ""%1""!
					|Повторите попытку отправки позже, либо обратитесь за помощью к техническому специалисту.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					
					ШаблонОшибки = Нстр("ru = 'Ошибка отправки пакета ЭД ""%1"" Оператору ЭДО.
					|Отправлено %2 из %3 электронных документов.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПакетЭД,
						КоличествоОтправленных, КоличествоКОтправке);
						
					ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'отправка пакета ЭД'"), ТекстОшибки,
						ТекстСообщения);
				Иначе
					РезультатОтправки = РезультатОтправки + КоличествоОтправленных;
				КонецЕсли;
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				
				АдресКаталога = ПакетЭД.АдресРесурсаКонтрагента+?(Прав(ПакетЭД.АдресРесурсаКонтрагента,1) <> "\", "\", "");
				КаталогНаДиске = Новый Файл(АдресКаталога);
				Если НЕ КаталогНаДиске.Существует() Тогда
					СоздатьКаталог(АдресКаталога);
				КонецЕсли;
				
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					КопироватьФайл(Файл.ПолноеИмя, АдресКаталога  +Файл.Имя);
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
			КонецЕсли;
			ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, Перечисления.СтатусыПакетовЭД.Отправлен, ТекущаяДатаСеанса());
		Исключение
			ШаблонСообщения = НСтр("ru = ' %1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'отправка пакета ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(АдресКаталогаОтправки) Тогда
		УдалитьФайлы(АдресКаталогаОтправки);
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с сертификатами ЭЦП

// Создает новый элемент справочника "СертификатыЭЦП"
// и заполняет его переданными данными.
//
// Параметры:
//  СтруктураСертификата - структура данных для заполнения элемента справочника
//  ОписаниеОшибки - строка - описание ошибки при ее возникновении.
//
Функция ЗагрузитьСертификат(СтруктураСертификата, ОписаниеОшибки) Экспорт
	
	НовыйЭлемент = Справочники.СертификатыЭЦП.СоздатьЭлемент();
	НовыйЭлемент.Отпечаток    = СтруктураСертификата.Отпечаток;
	НовыйЭлемент.Наименование = СтруктураСертификата.КомуВыдан;
	НовыйЭлемент.Организация  = СтруктураСертификата.Организация;
	
	СтрокаОписания = "Кому выдан: " + СтруктураСертификата.КомуВыдан + Символы.ПС;
	СтрокаОписания = СтрокаОписания + "Кем выдан: " + СтруктураСертификата.КемВыдан + Символы.ПС;
	СтрокаОписания = СтрокаОписания + "Действителен: " + СтруктураСертификата.ДействителенДо + Символы.ПС;
	НовоеНазначение = "";
	ЭлектроннаяЦифроваяПодпись.ЗаполнитьНазначениеСертификата(СтруктураСертификата.Назначение, НовоеНазначение, Истина);
	СтрокаОписания = СтрокаОписания + НовоеНазначение;
	НовыйЭлемент.Назначение = СтрокаОписания;
	
	Если СтруктураСертификата.Свойство("ДвоичныеДанныеСертификата")
		И ЗначениеЗаполнено(СтруктураСертификата.ДвоичныеДанныеСертификата) Тогда
		
		ДанныеХранилища = Новый ХранилищеЗначения(СтруктураСертификата.ДвоичныеДанныеСертификата, Новый СжатиеДанных(9));
		НовыйЭлемент.ФайлСертификата = ДанныеХранилища;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Ошибка получения данных сертификата подписи!'");
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает массив сертификатов, которые указаны в соглашении,
// а также предназначены для организации из соглашения.
//
// Параметры:
//  ТекущееСоглашение - СправочникСсылка.СоглашениеОбОбменеЭД, соглашение,
//                      сертификаты по которому надо получить.
//
Функция ПолучитьОтпечаткиОжидаемыхСертификатов(ТекущееСоглашение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭЦП.Отпечаток КАК Отпечаток
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|ГДЕ
	|	СертификатыЭЦП.Организация = &Организация
	|	И СертификатыЭЦП.Отозван = ЛОЖЬ
	|	И СертификатыЭЦП.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Отпечаток
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейКонтрагента КАК СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Ссылка = &СоглашениеОбИспользованииЭД";
	Запрос.УстановитьПараметр("Организация", ТекущееСоглашение.Организация);
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", ТекущееСоглашение);
	
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

// Проверяет наличие элементов справочника организации
// и возвращает элемент, если он единственный.
//
// Параметры:
//  ЕстьОрганизации - Булево - в справочнике есть элементы
//  Организация - СправочникСсылка.Организации - ссылка на единственный элемент справочника Организации
//
Процедура ПроверитьНаличиеОрганизаций(ЕстьОрганизации, Организация) Экспорт
	
	ЕстьОрганизации = Истина;
	СписокОрганизаций = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	СписокОрганизаций.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если СписокОрганизаций.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Нет данных по организациям.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЕстьОрганизации = Ложь;
		
	ИначеЕсли СписокОрганизаций.Количество() = 1 Тогда
		Организация = СписокОрганизаций[0].Значение;
	КонецЕсли;

КонецПроцедуры

// Только для внутреннего использования
Процедура СохранитьВместеСПоследнейЭЦП(ПрисоединенныйФайл,
										ДанныеФайла,
										УникальныйИдентификатор,
										АдресКаталога,
										СоответствиеФайлЭД) Экспорт
	
	ПолноеИмяФайла = АдресКаталога+ СтрЗаменить(ДанныеФайла.ИмяФайла, "..",".");
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	Файл = Новый Файл(АдресКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(АдресКаталога);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей, АдресКаталога,
			СоответствиеФайлЭД, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СохранитьВместеСЭЦП(ПрисоединенныйФайл,
								ДанныеФайла,
								УникальныйИдентификатор,
								АдресКаталога,
								СсылкаНаПакет,
								СоответствиеФайлЭД,
								ЭтоПроизвольныйДокумент = Неопределено) Экспорт
	
	// Для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись
	ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, СсылкаНаПакет,
		ЭтоПроизвольныйДокумент, СоответствиеФайлЭД);
	
	Если ПолноеИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей, АдресКаталога,
			СоответствиеФайлЭД, , ЭтоПроизвольныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыборкаДопДанныеЭД(ЭДВладелец) Экспорт
	
	// Для одного ЭД может быть сформирован один ЭД-доп.данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ДопДанные)
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)";

	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭДВладелец);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура СохранитьФайлыДопДанныхЭД(ПрисоединенныйФайл, ИмяКаталога, ДеревоДанных) Экспорт
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) И ТипЗнч(ДеревоДанных) = Тип("ДеревоЗначений") Тогда
		// Для одного ЭД может быть сформирован один ЭД-доп.данных.
		Выборка = ВыборкаДопДанныеЭД(ПрисоединенныйФайл);

		Если Выборка.Следующий() Тогда
			Файл = Новый Файл(ИмяКаталога);
			Если НЕ Файл.Существует() Тогда
				СоздатьКаталог(ИмяКаталога);
			КонецЕсли;
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Выборка.Ссылка);
			ИмяПолучаемогоФайла = СтрЗаменить(ДанныеФайла.ИмяФайла, "..", ".");
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
		
			СтрокаВладелец = ДеревоДанных.Строки.Найти(ПрисоединенныйФайл.НомерЭД, "НомерЭД");
			Если СтрокаВладелец = Неопределено Тогда
				СтрокаВладелец = ДеревоДанных.Строки.Добавить();
				СтрокаВладелец.НомерЭД = ПрисоединенныйФайл.НомерЭД;
			КонецЕсли;
			НоваяСтрока = СтрокаВладелец.Строки.Добавить();
			
			НоваяСтрока.ПсевдонимФайла = ИмяПолучаемогоФайла;
			НоваяСтрока.ЭтоПодпись = Ложь;
			НоваяСтрока.ИмяФайла = ИмяПолучаемогоФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Функция РезультатЗапросаПоСертификатам(МассивСоглашений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СертификатыЭЦП.Ссылка,
	|	СоглашенияОбИспользованииЭД.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|		ПО СоглашенияОбИспользованииЭД.СертификатАбонента = СертификатыЭЦП.Ссылка
	|ГДЕ
	|	НЕ СертификатыЭЦП.ЗапомнитьПарольКСертификату
	|	И НЕ СертификатыЭЦП.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА СертификатыЭЦП.ОграничитьДоступКСертификату
	|				ТОГДА СертификатыЭЦП.Пользователь = &Пользователь
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|	И СоглашенияОбИспользованииЭД.Ссылка В (&МассивСоглашений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СертификатыЭЦП.Представление";
	Запрос.УстановитьПараметр("Пользователь", ПользователиСервер.ТекущийПользователь());
	Если МассивСоглашений = Неопределено ИЛИ МассивСоглашений.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СоглашенияОбИспользованииЭД.Ссылка В (&МассивСоглашений)", "");
	Иначе	
		Запрос.УстановитьПараметр("МассивСоглашений", МассивСоглашений);
	КонецЕсли;
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Выгрузка.ВыгрузитьКолонку("Ссылка"));
	
	Возврат ПоместитьВоВременноеХранилище(СписокВыбора);
	
КонецФункции

// Получение актуальных сертификатов для подписи электронных документов

// Только для внутреннего использования
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов) Экспорт
	
	Возврат ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов);
	
КонецФункции

// Только для внутреннего использования
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов) Экспорт
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов);
	Для Каждого ТекЭл Из МассивСтруктурСертификатов Цикл
		Если ТаблицаДоступныхСертификатов.Найти(ТекЭл.Отпечаток, "Отпечаток") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивСтруктурДоступныхСертификатов.Добавить(ТекЭл);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Удаляет запись из регистра сведений СостоянияЭД с отбором по объекту
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, для которого требуется удалить запись из регистра
//
Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на документ базы данных, номер версии электронного документа которого надо изменить,
//  ПрисоединенныйФайл - ссылка на электронный документ, который в данный момент является актуальным
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, ПрисоединенныйФайл = Неопределено, УдалятьСтаруюВерсию = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект      = СсылкаНаОбъект;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
		Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		НоваяЗаписьНабора.СостояниеВерсииЭД = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
		СсылкаНаОбъект, ЗначениеЗаполнено(ПрисоединенныйФайл));
	Иначе
		
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюЭД(НоваяЗаписьНабора);
		КонецЕсли;
		Если СсылкаНаОбъект.ПометкаУдаления Тогда
			НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		Иначе
			НоваяЗаписьНабора.СостояниеВерсииЭД = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаОбъект, Истина);
		КонецЕсли;
		Если ПрисоединенныйФайл = Неопределено ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
			Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
		
		НоваяЗаписьНабора.ДействияСНашейСтороны             = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// При удалении ЭД, если ЭД актуален, производит сброс состояния владельца ЭД в первоначальное состояние
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на элемент справочника ЭДПрисоединенныеФайлы
//
Процедура ОбработатьУдалениеЭлектронногоДокумента(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭтоСлужебныйДокумент(СсылкаНаОбъект) Тогда
		ЗапросДокументовИБ = Новый Запрос;
		ЗапросДокументовИБ.УстановитьПараметр("ЭлектронныйДокумент", СсылкаНаОбъект);
		ЗапросДокументовИБ.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		
		ВыборкаДокументов = ЗапросДокументовИБ.Выполнить().Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаДокументов.СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			Иначе
				НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			КонецЕсли;
			НоваяЗаписьНабора.СостояниеВерсииЭД   = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(ВыборкаДокументов.СсылкаНаОбъект);
			НоваяЗаписьНабора.ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|	СостоянияЭД.ДействияСНашейСтороны КАК ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника КАК ДействияСоСтороныДругогоУчастника
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Получает сопоставление владельцев и актуальных ЭД
//
// Параметры:
//  МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьСоответствиеВладельцевИЭД(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК СсылкаНаЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИЭД.Вставить(Результат.ВладелецЭд, Результат.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//  Гиперссылка - булево, Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	ТекстСостоянияЭД = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Если ИспользуетсяОбменЭД() Тогда
			ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураВыданныйВМетаданных");
			ИмяСчетаФактурыПолученного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураПолученныйВМетаданных");
			Если ИмяСчетаФактурыВыданного <> Неопределено
				И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного)
				ИЛИ ИмяСчетаФактурыПолученного <> Неопределено
				И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыПолученного) Тогда
				
				ТекстСостоянияЭД = ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца);
			Иначе
				ТекущееСостояниеЭД = СостояниеВерсииЭД(СсылкаНаВладельца);
				ТекстСостоянияЭД = Строка(ТекущееСостояниеЭД);
			КонецЕсли;
			
			НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаВладельца, Ложь);
			Если НЕ ЗначениеЗаполнено(ТекстСостоянияЭД) И НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				Если НастройкиОбмена = Неопределено Тогда
					ТекстСостоянияЭД = "Нет действующего соглашения об использовании ЭД";
				КонецЕсли;
			Иначе
				Гиперссылка = Истина;
			КонецЕсли;
		Иначе
			ТекстСостоянияЭД = "Обмен электронными документами отключен";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

// Возвращает структуру версии электронного документа по владельцу.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на документ ИБ, структуру версии электронного документа которого необходимо получить.
//
Функция ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД КАК СтатусЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.НомерВерсииЭД) КАК НомерВерсииЭД
	|ПОМЕСТИТЬ МаксВерсия
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И (НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД,
	|	ЭДПрисоединенныеФайлы.СтатусЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И ЭДПрисоединенныеФайлы.НомерВерсииЭД В
	|			(ВЫБРАТЬ
	|				МаксВерсия.НомерВерсииЭД
	|			ИЗ
	|				МаксВерсия)
	|	И (НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления)
	|	И (ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден))";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоРегистру = Результат[0].Выбрать();
	Если ВыборкаПоРегистру.Следующий() Тогда
		НомерВерсииЭД     = ВыборкаПоРегистру.НомерВерсииЭД;
		СостояниеВерсииЭД = ВыборкаПоРегистру.СостояниеВерсииЭД;
		СсылкаНаДокумент  = ВыборкаПоРегистру.ЭлектронныйДокумент;
		СтатусЭД          = ВыборкаПоРегистру.СтатусЭД;
	Иначе
		НомерВерсииЭД     = 0;
		СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		СсылкаНаДокумент  = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		СтатусЭД          = Перечисления.СтатусыЭД.ПустаяСсылка();
	КонецЕсли;
	
	Если НомерВерсииЭД = 0 Тогда
		ВыборкаПоСправочнику = Результат[2].Выбрать();
		Если ВыборкаПоСправочнику.Количество()>0 Тогда
			ВыборкаПоСправочнику.Следующий();
			НомерВерсииЭД    = ВыборкаПоСправочнику.НомерВерсииЭД;
			СсылкаНаДокумент = ВыборкаПоСправочнику.Ссылка;
			СтатусЭД         = ВыборкаПоСправочнику.СтатусЭД;
		КонецЕсли;
	КонецЕсли;
	СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     НомерВерсииЭД);
	СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаДокумент);
	СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", СостояниеВерсииЭД);
	СтруктураВерсииЭД.Вставить("СтатусЭД",          СтатусЭД);

	Возврат СтруктураВерсииЭД;
	
КонецФункции

// Получает номер текущей версии электронного документа для владельца.
// 
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, номер версии электронного документа которого надо получить.
//
Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов на сервере

// Выполняет добавление ЭЦП в электронный документ.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на элемент справочника, содержащего в себе электронный документ,
//  ДанныеПодписи - Структура параметров ЭЦП.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрисоединенныеФайлы.ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи);
	ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
	Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		Если ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ФайлОбъект.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПолностьюПодписан, ПрисоединенныйФайл);
		Иначе
			ФайлОбъект.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Подписан, ПрисоединенныйФайл);
		КонецЕсли;
		
		ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
		ФайлОбъект.Записать();
		ОбновитьВерсиюЭД(ФайлОбъект.Ссылка);
		ЭлектронныеДокументыПереопределяемый.НазначенСтатусПодписан(ФайлОбъект.Ссылка);
		
	Иначе
		
		// В рамках интеркампани, документ должен иметь 2 подписи,
		// т.к. электронный документ подписан не полностью, то достаточно проверить,
		// что количество ЭЦП отлично от 0.
		Если ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
			И ПрисоединенныйФайл.ЭлектронныеЦифровыеПодписи.Количество() > 0 Тогда
			
			ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ФайлОбъект.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
			ФайлОбъект.Изменил  = ПользователиСервер.ТекущийПользователь();
			ФайлОбъект.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает отпечаток сертификата криптографии по ссылке.
// 
// Параметры:
//  СертификатПодписи - Ссылка на элемент справочника, содержащего в себе сертификат криптографии.
//
Функция ПолучитьОтпечатокСертификата(СертификатПодписи) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат СертификатПодписи.Ссылка.Отпечаток;
	
КонецФункции

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент) Экспорт
	
	ФлагПодписанПолностью = Истина;
	
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Возврат ФлагПодписанПолностью;
	КонецЕсли;
	
	Если ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ТЗ = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.Выгрузить(, "Отпечаток");
		ТЗ.Свернуть("Отпечаток");
		ФлагПодписанПолностью = ТЗ.Количество() > 1;
	Иначе
		// Массив отпечатков всех установленных ЭЦП на ЭД
		МассивОтпечатковСертификатов = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.ВыгрузитьКолонку("Отпечаток");
		
		// Выберем все действующие сертификаты по тек.организации и тек.виду ЭД,
		// совпадающие с сертификатами установленных ЭЦП.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ 
		|	СертификатыЭЦПВидыДокументов.Ссылка КАК СертификатЭЦП
		|ИЗ
		|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
		|ГДЕ
		|	СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
		|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
		|	И СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатковСертификатов)
		|	И СертификатыЭЦПВидыДокументов.Ссылка.Отозван = ЛОЖЬ
		|	И СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
		Запрос.УстановитьПараметр("Организация",                  ЭлектронныйДокумент.Организация);
		Запрос.УстановитьПараметр("ВидДокумента",                 ЭлектронныйДокумент.ВидЭД);
		
		ФлагПодписанПолностью = НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью);
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение почты

// Только для внутреннего использования
Процедура ЗаписатьДатуПолучения(ДокументСсылка, ДатаИзменения) Экспорт
	
	Попытка
		ОбъектЭД = ДокументСсылка.ПолучитьОбъект();
		Если ОбъектЭД = Неопределено 
			ИЛИ (ОбъектЭД.СтатусЭД <> Перечисления.СтатусыЭД.ОтправленоПодтверждение
			И ОбъектЭД.СтатусЭД <> Перечисления.СтатусыЭД.Отправлен) Тогда 
			Возврат;
		КонецЕсли;
		
		Если ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			ОбъектЭД.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ДокументСсылка);
		ИначеЕсли ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			ОбъектЭД.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ДокументСсылка);
		КонецЕсли;
		
		ОбъектЭД.ДатаИзмененияСтатусаЭД = ДатаИзменения;
		ОбъектЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты получения ЭД'"), ТекстОшибки,
			ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ЗаписатьДатуОтправки(ДокументСсылка, ДатаИзменения) Экспорт
	
	Попытка
		ОбъектЭД = ДокументСсылка.ПолучитьОбъект();
		Если ОбъектЭД = Неопределено 
			ИЛИ (ОбъектЭД.СтатусЭД <> Перечисления.СтатусыЭД.ПодготовленоПодтверждение
			И ОбъектЭД.СтатусЭД <> Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
			
			Возврат;
		КонецЕсли;
		
		Если ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			ОбъектЭД.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ДокументСсылка);
		ИначеЕсли ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			Если ДокументСсылка.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				И (//ДокументСсылка.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
				//ИЛИ ДокументСсылка.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
				ДокументСсылка.ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении) Тогда
				ОбъектЭД.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПереданОператору, ДокументСсылка);
			Иначе
				ОбъектЭД.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ДокументСсылка);
			КонецЕсли;
		КонецЕсли;
		
		ОбъектЭД.ДатаИзмененияСтатусаЭД = ДатаИзменения;
		ОбъектЭД.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты отправки ЭД'"), ТекстОшибки,
			ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция СформироватьНовыйПакетЭД(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата                    = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета            = СтруктураПараметров.СтатусПакета;
		ПакетЭД.Направление             = СтруктураПараметров.НаправленияЭД;
		ПакетЭД.Контрагент              = СтруктураПараметров.Контрагент;
		ПакетЭД.Организация             = СтруктураПараметров.Организация;
		ПакетЭД.Отправитель             = СтруктураПараметров.Отправитель;
		ПакетЭД.Получатель              = СтруктураПараметров.Получатель;
		ПакетЭД.Соглашение              = СтруктураПараметров.Соглашение;
		ПакетЭД.СпособОбменаЭД          = СтруктураПараметров.СпособОбменаЭД;
		ПакетЭД.АдресРесурсаКонтрагента = СтруктураПараметров.АдресОтправителя;
		ПакетЭД.АдресРесурсаОрганизации = СтруктураПараметров.АдресПолучателя;
		Если СтруктураПараметров.Свойство("ВнешнийУИД") Тогда
			ПакетЭД.ВнешнийУИД          = СтруктураПараметров.ВнешнийУИД;
		КонецЕсли;
		ПакетЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'создание нового ПакетаЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетЭД;
	
КонецФункции

// Только для внутреннего использования
Функция ОпределитьДокументПоНомеруЭД(НомерЭД, Направление) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &НомерЭД
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
	|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("НомерЭД",       НомерЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", Направление);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

// Процедура предназначена для коррекции имени файла
// замена некорректных символов на пробел
//
// Параметры
//  СтрИмяФайла - Строка - Имя файла
//
Процедура СкорректироватьИмяФайла(СтрИмяФайла) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru.
	// При этом были объединены запрещенные символы для файловых систем FAT и NTFS.
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Для Сч=1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, " ");
		КонецЕсли;
	КонецЦикла;
	
	СтрИмяФайла = СокрЛП(СтрИмяФайла);
	
КонецПроцедуры

// Создает пакет электронных документов.
// 
// Параметры:
//  МассивЭД - Массив ссылок на электронные документы, которые надо включить в пакет.
//  ПризнакПодписи - булево, признак, что документы подписаны ЭЦП.
//
Функция СоздатьДокументыПакетовЭД(МассивЭД, ПризнакПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ПЭД = Новый ТаблицаЗначений;
	ТЗ_ПЭД.Колонки.Добавить("ПЭД");
	ТЗ_ПЭД.Колонки.Добавить("Соглашение");
	ТЗ_ПЭД.Колонки.Добавить("АдресРесурса");
	
	МассивПодготовленныхКОтправкеЭД = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		Если (ПризнакПодписи И (ЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден))
			ИЛИ НЕ УстановленныеПодписиВалидны(ЭД) Тогда
			
			Продолжить;
		КонецЕсли;
		ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ЭД.ВладелецФайла, , , ЭД);
		Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ПЭД = НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыСоглашения);
			НоваяСтрока                     = ПЭД.ЭлектронныеДокументы.Добавить();
			НоваяСтрока.ЭлектронныйДокумент = ЭД;
			НоваяСтрока.ОбъектВладелец      = ЭД.ВладелецФайла;
			ПЭД.Записать();
			МассивПодготовленныхКОтправкеЭД.Добавить(ЭД);
		Исключение
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации)'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'формирование пакета ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТЗ_ПЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД",          ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("АдресРесурса", ТекСтрока.АдресРесурса);
		Если ТекСтрока.Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
			Если ЭлектронныеДокументыОператорыЭДО.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(ТекСтрока.ПЭД) Тогда
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Иначе
				Для Каждого ЭД Из ТекСтрока.ПЭД.ЭлектронныеДокументы Цикл
					ЭДвМассиве = МассивПодготовленныхКОтправкеЭД.Найти(ЭД.ЭлектронныйДокумент);
					Если ЭДвМассиве <> Неопределено Тогда
						МассивПодготовленныхКОтправкеЭД.Удалить(ЭДвМассиве);
					КонецЕсли;
				КонецЦикла;
				ПЭД = ТекСтрока.ПЭД.ПолучитьОбъект();
				ПЭД.СтатусПакета    = Перечисления.СтатусыПакетовЭД.Отменен;
				ПЭД.ПометкаУдаления = Истина;
				ПЭД.Записать();
			КонецЕсли;
		Иначе
			СформироватьЭДПрисоединенныйФайлПакета(ТекСтрока.ПЭД);
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
		КонецЕсли;
	КонецЦикла;
	ОбновитьСтатусыЭД(МассивПодготовленныхКОтправкеЭД, ПризнакПодписи);
	
	Возврат МассивСтруктурПЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование пакетов электронных документов

// Только для внутреннего использования
Процедура ПоместитьПакетЭДВКонверт(Конверт, АдресЗипКонтейнера) Экспорт
	
	// Так как теперь может быть несколько документов в одном пакете, надо проверять, есть ли
	// уже присоединенные файлы к пакету. Если есть - ничего не делать.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	
	Если ЗначениеЗаполнено(Выборка) И Выборка.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(АдресЗипКонтейнера);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(АдресЗипКонтейнера);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(Конверт, Файл.ИмяБезРасширения, СтрЗаменить(Файл.Расширение,".", ""),
		ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВоВременномХранилище, Неопределено, ,"ЭДПрисоединенныеФайлы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Функция, добавляющая данные по распакованному пакету электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, пакет электронных документов, по которому необходимо добавить данные. 
//  СтруктураДанныхПодписей - Структура, связывающая двоичные данные файла данных и двоичные данные файла электронной цифровой подписи.
//  СтруктураДанных - Структура, связывающая имена файлов и их двоичные данные.
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и имена файлов электронных цифровых подписей.
//
Функция ДобавитьДанныеПоПакетуЭД(ПакетЭД,
								СтруктураДанныхПодписей,
								СтруктураДанных,
								СоответствиеФайлПараметры,
								ПапкаДляРаспаковки,
								ПапкаДляРасшифровки = "",
								ФлагОшибки = Ложь,
								ЕстьКриптосредствоНаКлиенте = Неопределено) Экспорт
								
	УстановитьПривилегированныйРежим(Истина);

	ЭтоПроизвольныйЭД = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ПапкаДляРасшифровки) Тогда
		ПапкаДляРасшифровки = РабочийКаталог("Расшифровка", ПакетЭД.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	Если Найти(СтруктураДанных.ИмяФайла, "ИзвещениеОПолученииДокумента") > 0 Тогда
		ОбработатьИзвещениеОператора(ПакетЭД, СтруктураДанныхПодписей, СтруктураДанных, СоответствиеФайлПараметры);
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДобавленныхФайлов = Новый Массив;
	// Попытаемся получить настройки криптографии.
	// Если неудачно, значит средства криптографии не установлены на АРМ
	Попытка
		НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	
	Если НЕ ЕстьКриптосредствоНаКлиенте = Истина И СтруктураДанныхПодписей.Количество() > 0
		И МенеджерКриптографии = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка распаковки пакета:
		|%1
		|Пакет содержит электронные цифровые подписи. Для распаковки требуется наличие криптосредства на компьютере.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПакетЭД);

		Если НЕ ЕстьКриптосредствоНаКлиенте = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Распаковка пакета'"), УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		ФлагОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		Соглашение = ПакетЭД.Соглашение;
		
		Если НЕ ПолучитьФайлДанныхДляОбработки(СтруктураДанных, ПапкаДляРасшифровки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, "*.xml");
		
		СтруктураПодписей = СоответствиеФайлПараметры.Получить(СтруктураДанных.ИмяФайла);
		Если ФайлыРасшифровки.Количество() = 0 Тогда
			СтруктураФайлаЭД = Новый Структура;
			СтруктураФайлаЭД.Вставить("ВидЭД",         Перечисления.ВидыЭД.ПроизвольныйЭД);
			СтруктураФайлаЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
			ЭтоПроизвольныйЭД = Истина;
			
		Иначе
			ФайлСДанными = ФайлыРасшифровки[0];
			Попытка
				СтруктураФайлаЭД = ЭлектронныеДокументыФорматОбмена.ПрочитатьШапкуФайлаCMLпоXDTO(ФайлСДанными.ПолноеИмя);
				
				// Xsd-схема Счета-фактуры не позволяет передавать НомерЭД,
				// в этом случае возьмем НомерЭД из карточки транспортной информации.
				КодРегламента = "";
				Если СтруктураПодписей.Свойство("КодРегламента", КодРегламента) И ЗначениеЗаполнено(КодРегламента) Тогда
					СтруктураФайлаЭД.НомерЭД = СтруктураПодписей.НомерЭД;
				КонецЕсли;
				
				СтруктураФайлаЭД.Вставить("НаправлениеЭД", ОпределитьНаправление(СтруктураФайлаЭД));
				// Если нужные параметры не заполнены, заполним данными из пакета ЭД
				Если НЕ СтруктураФайлаЭД.Свойство("Организация")
					ИЛИ НЕ ЗначениеЗаполнено(СтруктураФайлаЭД.Организация) Тогда
					
					СтруктураФайлаЭД.Вставить("Организация", ПакетЭДОбъект.Организация);
				КонецЕсли;
				Если НЕ СтруктураФайлаЭД.Свойство("Контрагент")
					ИЛИ НЕ ЗначениеЗаполнено(СтруктураФайлаЭД.Контрагент) Тогда
					
					СтруктураФайлаЭД.Вставить("Контрагент", ПакетЭДОбъект.Контрагент);
				КонецЕсли;
			Исключение
				СтруктураФайлаЭД = Новый Структура;
				СтруктураФайлаЭД.Вставить("ВидЭД",         Перечисления.ВидыЭД.ПроизвольныйЭД);
				СтруктураФайлаЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
				ЭтоПроизвольныйЭД = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Если Не ЭтоПроизвольныйЭД Тогда
			ОбъектВладелец = ?(СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров, ПакетЭД.Соглашение,
				ОпределитьОбъектПривязки(СтруктураФайлаЭД));
			
			Если ПакетЭДОбъект.Соглашение.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				СтруктураФайлаЭД.Вставить("Партнер", ПакетЭДОбъект.Соглашение.Партнер);
			КонецЕсли;
			
			Если Не ЕстьДействующееСоглашение(СтруктураФайлаЭД)
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик Тогда
				
				СообщитьОбОтсутствииСоглашенияЭД(СтруктураФайлаЭД, ОбъектВладелец);
				ФлагОшибки = истина;
				
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ФайлСДанными.ПолноеИмя);
		
		ДопДанные = "";
		Если СтруктураПодписей.Свойство("ДопДанные", ДопДанные) И ТипЗнч(ДопДанные) = Тип("Структура") И ДопДанные.Количество() > 0 Тогда
			ФайлДопДанных = "";
			Если ДопДанные.Свойство("ФайлДопДанных", ФайлДопДанных) Тогда
				СтруктураПараметров.Вставить("ФайлДопДанных", ФайлДопДанных);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектВладелец <> Неопределено Тогда
			СтруктураЭД = Неопределено;
			НовыйДокумент = ОбъектВладелец;
		Иначе
			СтруктураЭД = ЭлектронныеДокументыФорматОбмена.РазобратьФайлДанных(СтруктураПараметров);
			
			// Xsd-схема счета-фактуры не позволяет передавать НомерЭД,
			// в этом случае возьмем НомерЭД из карточки транспортной информации.
			КодРегламента = "";
			Если СтруктураПодписей.Свойство("КодРегламента", КодРегламента) И ЗначениеЗаполнено(КодРегламента) Тогда
				СтруктураЭД.НомерЭД = СтруктураПодписей.НомерЭД;
			КонецЕсли;
			
			Если СтруктураЭД.Свойство("ВладелецЭД") Тогда
				НовыйДокумент = СтруктураЭД.ВладелецЭД;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовыйДокумент) Тогда
			ФлагОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;
		
		// В присоединенные файлы к документу БД поместить файл с данными, подпись к нему,
		// указать его в табличной части транспортного пакета.
		ДобавленныйФайл = ОпределитьДокументПоНомеруЭД(СтруктураФайлаЭД.НомерЭД, СтруктураФайлаЭД.НаправлениеЭД);
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
		
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных.ДвоичныеДанные);
			СтруктураФайлаЭД.Вставить("УникальныйИД",
				?(Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском, СтруктураПодписей.НомерЭД, ""));
			
			ПодписиФайлаДанных  = СтруктураПодписей.Подписи;
			СтруктураФайла = ПолучитьСтруктуруФайла(СтруктураДанных.ИмяФайла);
			
			ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(НовыйДокумент, СтруктураФайла.ИмяБезРасширения, СтруктураФайла.Расширение,
				ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВоВременномХранилище, Неопределено, , "ЭДПрисоединенныеФайлы");
			
			Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(ПакетЭД.Контрагент, Соглашение);
			
			ЭДВладелец = "";
			Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД[?(СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура, "ЭСФ", "ПервичныйЭД")];
				Если СтруктураЭД = Неопределено Тогда
					СтруктураОбновленияПараметров = Новый Структура;
					СтруктураОбновленияПараметров.Вставить("ВладелецЭД",                НовыйДокумент);
					СтруктураОбновленияПараметров.Вставить("ВидЭД",                     СтруктураФайлаЭД.ВидЭД);
					СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",             Перечисления.НаправленияЭД.Входящий);
					СтруктураОбновленияПараметров.Вставить("НомерЭД",                   СтруктураФайлаЭД.НомерЭД);
					СтруктураОбновленияПараметров.Вставить("Организация",               СтруктураФайлаЭД.Организация);
					СтруктураОбновленияПараметров.Вставить("Контрагент",                СтруктураФайлаЭД.Контрагент);
					СтруктураОбновленияПараметров.Вставить("НомерВерсииЭД",             СтруктураФайлаЭД.НомерВерсииЭД);
					СтруктураОбновленияПараметров.Вставить("НомерДокументаОтправителя", СтруктураФайлаЭД.НомерДокументаОтправителя);
					СтруктураОбновленияПараметров.Вставить("ДатаДокументаОтправителя",  СтруктураФайлаЭД.ДатаДокументаОтправителя);
					СтруктураОбновленияПараметров.Вставить("Ответственный",             Ответственный);
					СтруктураОбновленияПараметров.Вставить("Отправитель",               ПакетЭД.Отправитель);
					СтруктураОбновленияПараметров.Вставить("Получатель",                Соглашение.ИдентификаторОрганизации);
					СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",              Соглашение);
					СтруктураОбновленияПараметров.Вставить("УникальныйИД",              СтруктураФайлаЭД.УникальныйИД);
					СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД",       ТипЭлементаВерсииЭД);
					СтруктураОбновленияПараметров.Вставить("ДатаФормированияЭДОтправителем", СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
					Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭДВладелец) Тогда
						СтруктураОбновленияПараметров.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
					КонецЕсли;
					
					Если СтруктураОбновленияПараметров.Свойство("Организация")
						И СтруктураОбновленияПараметров.Организация <> Соглашение.Организация Тогда
						
						ВызватьИсключение("Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении!");
					КонецЕсли;
					УстановитьНовуюВерсиюЭД(НовыйДокумент, ДобавленныйФайл);
					ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбновленияПараметров);
				Иначе
					СтруктураЭД.Вставить("Отправитель", ПакетЭД.Отправитель);
					СтруктураЭД.Вставить("Получатель", Соглашение.ИдентификаторОрганизации);
					СтруктураЭД.Вставить("Ответственный", Ответственный);
					СтруктураЭД.Вставить("СоглашениеЭД", Соглашение);
					СтруктураЭД.Вставить("УникальныйИД", СтруктураФайлаЭД.УникальныйИД);
					СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
					СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
					Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭДВладелец) Тогда
						СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
					КонецЕсли;
					Если СтруктураЭД.Свойство("Организация") И ЗначениеЗаполнено(СтруктураЭД.Организация) Тогда
						Если СтруктураЭД.Организация <> Соглашение.Организация Тогда
							
							ВызватьИсключение("Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении!");
						КонецЕсли;
					Иначе
						СтруктураЭД.Вставить("Организация", Соглашение.Организация);
					КонецЕсли;
					Контрагент = "";
					Если НЕ СтруктураЭД.Свойство("Контрагент", Контрагент) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
						СтруктураЭД.Вставить("Контрагент", ПакетЭД.Контрагент);
					КонецЕсли;
					УстановитьНовуюВерсиюЭД(НовыйДокумент, ДобавленныйФайл);
					ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭДВладелец) И ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				И ЭДВладелец.СтатусЭД <> Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
				
				СтруктураПараметровЭДВладельца = Новый Структура;
				СтруктураПараметровЭДВладельца.Вставить("ВладелецЭД", ЭДВладелец.ВладелецФайла);
				СтруктураПараметровЭДВладельца.Вставить("Контрагент", ЭДВладелец.Контрагент);
				СтруктураПараметровЭДВладельца.Вставить("ВидЭД", ЭДВладелец.ВидЭД);
				СтруктураПараметровЭДВладельца.Вставить("НаправлениеЭД", ЭДВладелец.НаправлениеЭД);
				СтруктураПараметровЭДВладельца.Вставить("СоглашениеЭД", ЭДВладелец.СоглашениеЭД);
				СтруктураПараметровЭДВладельца.Вставить("СтатусЭД",
					ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭДВладелец));
				ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДВладелец, СтруктураПараметровЭДВладельца);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписиФайлаДанных) И (МенеджерКриптографии <> Неопределено) Тогда
				Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
					
					ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + "\" + ИмяФайлаПодписи;
					ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
					СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
					Если СертификатыПодписи.Количество() <> 0 Тогда
						
						Сертификат = СертификатыПодписи[0];
						ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(ДобавленныйФайл, ДвоичныеДанныеПодписи,
							Base64Строка(Сертификат.Отпечаток), ТекущаяДатаСеанса(), "", ИмяФайлаПодписи,
							ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
							Сертификат.Выгрузить());
					КонецЕсли;
				КонецЦикла;
				ОпределитьСтатусыПодписей(ДобавленныйФайл);
			КонецЕсли;
			МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
		КонецЕсли;
		
		УдалитьФайлы(ПапкаДляРасшифровки);
		
		// Добавим информацию о присоединенном файле в документ пакета электронных документов
		Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
			
			НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
			НовыйЭлектронныйДокумент.ОбъектВладелец      = ДобавленныйФайл.ВладелецФайла;
			
		КонецЦикла;
		
		Если МенеджерКриптографии <> Неопределено Тогда
			ПодтвержденныеДокументы = ОбработатьПодтвержденияДокументов(ПапкаДляРаспаковки, СоответствиеФайлПараметры, ПакетЭДОбъект);
			Для Каждого ПодтвержденныйДокумент Из ПодтвержденныеДокументы Цикл
				МассивДобавленныхФайлов.Добавить("Подтверждение " + Строка(ПодтвержденныйДокумент));
			КонецЦикла;
		КонецЕсли;
		
		ПакетЭДОбъект.Записать();
		
		Возврат МассивДобавленныхФайлов;
	Исключение
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ПапкаДляРасшифровки);
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		ФлагОшибки = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ПараметрыШифрования - Структура, настройки шифрования, применимые к данному пакету электронных документов.
//
Функция ВернутьМассивДвоичныхДанныхПакета(ПакетЭД, ПапкаДляРаспаковки = "", ПараметрыШифрования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПакетЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		Возврат ЭлектронныеДокументыОператорыЭДО.ВернутьМассивДвоичныхДанныхПакетаОператораЭДО(ПакетЭД, ПапкаДляРаспаковки, ПараметрыШифрования);
	КонецЕсли;
	
	// Так как данный процесс потенциально порождает много ошибок и выполняется в цикле, возьмем его целиком в попытку-исключение,
	// чтобы при ошибке в одном контейнере, остальные могли корректно распаковаться
	
	ФайлАрхива = "";
	ФайлРасшифрованногоАрхива = "";
	
	Если НЕ ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
		ПапкаДляРаспаковки = РабочийКаталог("Распаковка", ПакетЭД.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	Попытка
		// Проверим, что соглашение, указанное в пакете, до сих пор действует.
		Соглашение = ПакетЭД.Соглашение;
		Если Соглашение.Пустая() ИЛИ Соглашение.СтатусСоглашения <> Перечисления.СтатусыСоглашенийЭД.Действует Тогда
			СообщениеИсключения = НСтр("ru = 'По данному пакету электронных документов нет действующего соглашения.
			|Распаковка невозможна.'");
			ВызватьИсключение(СообщениеИсключения);
			Возврат Неопределено;
		КонецЕсли;
		
		// Необходимо получить архив пакета из присоединенных файлов к документу
		ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
		Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) ИЛИ НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
			Возврат Неопределено;	
		КонецЕсли;
		
		// Для каждого из пакетов необходимо определить файл с данными
		ПараметрыДанных = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки, "*"); 
		ЗИПЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		
		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		
		// Файл с данными также лежит в виде .zip-архива.
		// В одном пакете может лежать несколько файлов данных, соберем их в массив.
		
		МассивФайловДанных = НайтиФайлы(ПапкаДляРаспаковки, "*.zip");
		МассивФайловИзвещений = НайтиФайлы(ПапкаДляРаспаковки, "*ИзвещениеОПолученииДокумента*.xml");
		
		// Расшифровать файл с данными
		// Найдем файл с информацией о шифровании документа
		ФайлИнформации = Неопределено;
		Для Каждого Файл Из ФайлыАрхива Цикл
			Если Найти(Файл.Имя, "packageDescription") > 0  Тогда
				ФайлИнформации = Файл;
			ИначеЕсли Файл.Расширение = ".xml" Тогда
				МассивФайловДанных.Добавить(Файл);
			КонецЕсли;
		КонецЦикла;
		
		// Для последующих действий определим соглашение 
		
		ТекстИнформации = Новый ТекстовыйДокумент;
		ТекстИнформации.Прочитать(ФайлИнформации.ПолноеИмя);
		НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		Попытка
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			// Менеджер криптографии генерирует ошибку при создании, если заданы неправильно настройки,
			// либо отсутствует ПО криптопровайдера.
			// В этом случае менеджерам присваиваем "Неопределено"
			МенеджерКриптографии = Неопределено;
		КонецПопытки;
		
		СоответствиеФайлПараметры = ПолучитьСоответствиеФайлПараметры(ФайлИнформации);
		
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		
		МассивДобавленныхФайлов = Новый Массив;
		ЭтоПроизвольныйЭД = Ложь;
		
		Если Не СоответствиеФайлПараметры.Получить("Текст") = Неопределено Тогда
			ЭтоПроизвольныйЭД = Истина;
		КонецЕсли;
		
		Если ЭтоПроизвольныйЭД Тогда
			ОбработатьВходящийПроизвольныйЭД(ПапкаДляРаспаковки, ПараметрыШифрования, МассивФайловДанных, МенеджерКриптографии,
				МенеджерКриптографии, ПакетЭДОбъект, СоответствиеФайлПараметры);
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлАрхива);
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("СоответствиеФайлПараметры",        СоответствиеФайлПараметры);
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанных",          ПреобразоватьМассивФайловВДвоичныеДанные(
			МассивФайловДанных));
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанныхИзвещений", ПреобразоватьМассивФайловВДвоичныеДанные(
			МассивФайловИзвещений));
		Возврат СтруктураВозврата;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Возвращает соответствие с двоичными данными файлов
// и электронными цифровыми подписями к ним.
//
// Параметры:
//  ИмяФайла - Строка, путь к файлу данных.
//  РасшифрованныеДвоичныеДанные - ДвоичныеДанные, двоичные данные файла данных.
//  СоответствиеФайлПараметры - Соответствие, связывает имена файлов данных и электронных цифровых подписей.
//  ЭтоXMLФайл - Булево, признак того, что переданный файл является xml-файлом.
//
Функция ПолучитьСоответствиеДанныхПодписей(ИмяФайла,
										ПапкаДляРаспаковки,
										РасшифрованныеДвоичныеДанные,
										СоответствиеФайлПараметры,
										ЭтоXMLФайл = Ложь) Экспорт
	
	МассивВозврата = Новый Массив;
	ФайлРасшифрованногоАрхива = ?(ЭтоXMLФайл, ТекущееИмяВременногоФайла("xml"), ТекущееИмяВременногоФайла("zip"));
	РасшифрованныеДвоичныеДанные.Записать(ФайлРасшифрованногоАрхива);
	РасшифрованныйФайлДанных = Новый Файл(ФайлРасшифрованногоАрхива);
	
	// Определить подпись к данному файлу, проверить подпись
	
	ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ИмяФайла).Подписи;	
	ДвоичныеДанныеФайлаДанных = Новый ДвоичныеДанные(РасшифрованныйФайлДанных.ПолноеИмя);
	
	Если ПодписиФайлаДанных = Неопределено ИЛИ ПодписиФайлаДанных.Количество() = 0 Тогда
		// Если подписей нет, тогда пока продолжаем, но, возможно, что это ошибка
	Иначе
		Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
			ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + "\" + ИмяФайлаПодписи;
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
			СтруктураВозврата = Новый Структура("ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи",
				ДвоичныеДанныеФайлаДанных, ДвоичныеДанныеПодписи);
			
			МассивВозврата.Добавить(СтруктураВозврата);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Обрабатывает подтверждения документов, состоящие из электронно-цифровой подписи.
//
// Параметры:
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и файлов электронных цифровых подписей к ним.
//  ПакетЭДСсылка - ДокументСсылка.ПакетЭД, ссылка на пакет электронных документов, содержащий подтверждение.
//
Функция ОбработатьПодтвержденияДокументовНаСервере(СоответствиеФайлПараметры, ПакетЭДСсылка, ПапкаДляРаспаковки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	ПакетЭДОбъект = ПакетЭДСсылка.ПолучитьОбъект();
	// Попытаемся получить настройки криптографии.
	Попытка
		НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		МенеджерКриптографии = Неопределено;
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'обработка подтверждений ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат МассивВозврата;
	КонецПопытки;
	
	// Подтверждением считаем подпись без файла (в соответствии - ключ с файлом подписи)
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			ФайлыПодписи = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствие.Ключ, Истина);
			Если ФайлыПодписи.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлыПодписи[0].ПолноеИмя);
			
			СтрНомерЭД = ЭлементСоответствие.Значение.НомерЭД;
			ЭлектронныйДокумент = ОпределитьДокументПоНомеруЭД(СтрНомерЭД, НаправлениеИскомогоДокумента);
			Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) И ТипЗнч(ЭлементСоответствие.Значение) = Тип("Структура")
				И ЭлементСоответствие.Значение.Свойство("КодРегламента") И СтрДлина(СтрНомерЭД) = 36 Тогда
				ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрНомерЭД));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) ИЛИ ЭлектронныйДокумент.ПолучитьОбъект() = Неопределено
				ИЛИ ЕстьТакаяПодпись(ДвоичныеДанныеПодписи, ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанныхДокументов = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭлектронныйДокумент).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
			
			// Определим сертификаты криптографии из подписи.
			СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
			Если СертификатыПодписи.Количество() <> 0 Тогда
				Сертификат = СертификатыПодписи[0];
				ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(ЭлектронныйДокумент, ДвоичныеДанныеПодписи,
					Base64Строка(Сертификат.Отпечаток), ТекущаяДатаСеанса(), "", ЭлементСоответствие.Ключ,
					ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект), Сертификат.Выгрузить());
			КонецЕсли;
			
			ЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокументОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
			ЭлектронныйДокументОбъект.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭлектронныйДокумент);
			ЭлектронныйДокументОбъект.Записать();
			ОбновитьВерсиюЭД(ЭлектронныйДокумент);
			
			ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ЭлектронныйДокумент.ВладелецФайла;
			МассивВозврата.Добавить(ЭлектронныйДокумент.ВладелецФайла);
		КонецЕсли;
	КонецЦикла;
	ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
	ПакетЭДОбъект.Записать();
	
	Возврат МассивВозврата;
	
КонецФункции

// Функция определяет настройки обмена ЭД
// по источнику - документу базы данных или по ЭД
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(Источник,
											ВыводитьСообщения = Истина,
											ПараметрыСертификатов = Неопределено,
											ЭД = Неопределено,
											ВидЭД = Неопределено) Экспорт
											
	ПараметрыЭД = ЭлектронныеДокументыВызовСервераСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(Источник);
	
	Если ЗначениеЗаполнено(ЭД) Тогда
		
		Если ЗначениеЗаполнено(ЭД.СоглашениеЭД) Тогда
			ПараметрыЭД.СоглашениеЭД = ЭД.СоглашениеЭД;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
			ПараметрыЭД.Контрагент = ЭД.Контрагент;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			ПараметрыЭД.Организация = ЭД.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
			ПараметрыЭД.ВидЭД = ЭД.ВидЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, ПараметрыСертификатов);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			ПараметрыЭД.Удалить("ИмяРеквизитаОрганизации");
			ПараметрыЭД.Удалить("ИмяРеквизитаКонтрагента");
			СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры
//  ИДОрганизации – строка с ИД Отправителя,
//  ИДКонтрагента - строка с ИД получателя
//
// Возвращаемое значение:
//  Структуру параметров с настройками обмена
//
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОрганизации, ИДКонтрагента, ТолькоСОператоромЭДО = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаЭД.Организация,
	|	НастройкиОбменаЭД.Контрагент,
	|	НастройкиОбменаЭД.Партнер КАК Партнер,
	|	НастройкиОбменаЭД.Ссылка КАК Основание,
	|	НастройкиОбменаЭД.АдресРесурсаКонтрагента,
	|	НастройкиОбменаЭД.АдресРесурсаОрганизации,
	|	ВЫБОР
	|		КОГДА НастройкиОбменаЭД.ЭтоИнтеркампани
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиОбменаЭД
	|ГДЕ
	|	НастройкиОбменаЭД.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	|	И НастройкиОбменаЭД.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|	И НЕ НастройкиОбменаЭД.ПометкаУдаления
	|	И НастройкиОбменаЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ &ТолькоСОператоромЭДО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашениеЧерезОЭДО.Ссылка.Организация,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.Участник,
	|	NULL,
	|	СоглашениеЧерезОЭДО.Ссылка,
	|	NULL,
	|	NULL,
	|	1
	|ИЗ
	|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеЧерезОЭДО
	|		ПО УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашениеЧерезОЭДО.Ссылка
	|ГДЕ
	|	СоглашениеЧерезОЭДО.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ СоглашениеЧерезОЭДО.Ссылка.ПометкаУдаления
	|	И УчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор = &ИдентификаторКонтрагента
	|	И УчастникиОбменовЭДЧерезОператоровЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|	И СоглашениеЧерезОЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|	И СоглашениеЧерезОЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДКонтрагента);
	Запрос.УстановитьПараметр("ТолькоСОператоромЭДО", 	  ТолькоСОператоромЭДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Получатель",       ИДОрганизации);
		СтруктураВозврата.Вставить("Отправитель",      ИДКонтрагента);
		СтруктураВозврата.Вставить("Организация",      Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",       Выборка.Контрагент);
		СтруктураВозврата.Вставить("Партнер",          Выборка.Партнер);
		СтруктураВозврата.Вставить("Основание",        Выборка.Основание);
		СтруктураВозврата.Вставить("АдресОтправителя", Выборка.АдресРесурсаКонтрагента);
		СтруктураВозврата.Вставить("АдресПолучателя",  Выборка.АдресРесурсаОрганизации);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет признак шифрования и статус пакета электронных документов.
//
// Параметры:
// МассивСсылокНаДокументы - массив ссылок на пакеты электронных документов, параметры которых надо определить.
//
Функция ОпределитьШифрованиеИСтатус(Знач МассивСсылокНаДокументы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК СсылкаНаДокумент,
	|	ПакетЭД.Соглашение.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ПакетЭД.СтатусПакета
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО (ЭДПрисоединенныеФайлы.ВладелецФайла = ПакетЭД.Ссылка)
	|ГДЕ
	|	ПакетЭД.Ссылка В(&МассивСсылок)
	|	И ПакетЭД.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаДокументы);
	
	ВыборкаПакеты = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПакеты.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПакеты.Ссылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ВыборкаПакеты.Количество() = 1 И  ВыборкаПакеты.СтатусПакета <> Перечисления.СтатусыПакетовЭД.КРаспаковке Тогда
			ВызватьИсключение(Нстр("ru = 'Статус пакета отличен от значения ""К распаковке""! Обработка прервана...'"));
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыДанных = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПакеты.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ТекущееИмяВременногоФайла("zip");
		
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		ПапкаДляРаспаковки = РабочийКаталог("Распаковка", ВыборкаПакеты.Ссылка.УникальныйИдентификатор());
		Для Каждого Элемент Из ЗИПЧтение Цикл
			ДоступнаяДлинаИмени = 256 - СтрДлина(ФайлАрхива);
			Если СтрДлина(Элемент.Имя) > ДоступнаяДлинаИмени Тогда
				ТекстСообщения = НСтр("ru = 'Операция не выполнена! Невозможно извлечь данные из файла.
				|Полное имя файла превышает допустимые 256 символа.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		
		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		
		Для Каждого ФайлИнформации Из ФайлыАрхива Цикл
			Если Найти(ФайлИнформации.Имя, "packageDescription") > 0  Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		НашлиШифрование = Ложь;
		Документ = Неопределено;
		Зашифрован = Ложь;
		Сертификат = "";
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
				НашлиШифрование = Истина;
			КонецЕсли;
			Если Не НашлиШифрование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
				ЧтениеХМЛ.Прочитать();
				Документ = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеХМЛ.Прочитать();
				Зашифрован = Булево(ЧтениеХМЛ.Значение);
				Сертификат = ВыборкаПакеты.СертификатОрганизацииДляРасшифровки;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "СертификатШифрования" Тогда
				ЧтениеХМЛ.Прочитать();
				Сертификат = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
				
				ПарольДоступа = СохраненныйПарольКСертификату(ВыборкаПакеты.СертификатОрганизацииДляРасшифровки);
				НоваяСтруктураМассива = Новый Структура("Документ, Зашифрован, Сертификат, ПарольДоступа",
					Документ, Зашифрован, Сертификат, ПарольДоступа);
					
				МассивВозврата.Добавить(НоваяСтруктураМассива);
				Документ = Неопределено;
				Зашифрован = Ложь;
				Сертификат = "";
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ФайлАрхива);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Определяет, указано ли в настройках соглашения необходимость подписания для вида ЭД.
//
// Параметры:
//  Соглашение    - ссылка на элемент справочника СоглашенияОбИспользованииЭД.
//  ВидЭД         - значение перечисления ВидыЭД
//  НаправлениеЭД - значение перечисления НаправленияЭД
//
// Возвращаемое значение:
//  ИспользоватьЭЦП - Булево - истина или ложь
//
Функция НеобходимоПодписать(ЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЭД, "ВидЭД, НаправлениеЭД");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	|	И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|	И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|			ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",        ЭД.СоглашениеЭД);
	Запрос.УстановитьПараметр("ВидЭД",         Реквизиты.ВидЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", Реквизиты.НаправлениеЭД);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Результат.ИспользоватьЭЦП;
	
КонецФункции

// Определяет по параметрам, существует ли действующее соглашение
// 
// Параметры:
//  ПараметрыЭД - структура, содержащая параметры поиска соглашения
//
// Возвращаемое значение:
//  Булево Истина или Ложь
//
Функция ЕстьДействующееСоглашение(ПараметрыЭД) Экспорт
	
	НастройкиОбмена = ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат НЕ (НастройкиОбмена = Неопределено);
	
КонецФункции

// Только для внутреннего использования
Функция ПараметрыУчастникаОбменаЭДЧерезОператораЭДО(СоглашениеЧерезОЭДО, Участник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашениеЧерезОЭДО.Ссылка.Организация КАК Организация,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.Участник КАК Контрагент,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор КАК ИдентификаторКонтрагента,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.ФорматФайловОбменаЭД,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.Статус,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.ДатаИзмененияСтатуса,
	|	СоглашениеЧерезОЭДО.ИдентификаторОрганизации
	|ИЗ
	|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеЧерезОЭДО
	|		ПО УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашениеЧерезОЭДО.Ссылка
	|ГДЕ
	|	СоглашениеЧерезОЭДО.Ссылка = &СоглашениеЧерезОЭДО
	|	И УчастникиОбменовЭДЧерезОператоровЭДО.Участник = &Участник
	|	И СоглашениеЧерезОЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)";
	Запрос.УстановитьПараметр("СоглашениеЧерезОЭДО", СоглашениеЧерезОЭДО);
	Запрос.УстановитьПараметр("Участник", Участник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента,
		|ФорматФайловОбменаЭД, Статус, ДатаИзмененияСтатуса");
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.Вставить("Организация",              Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",               Выборка.Контрагент);
		СтруктураВозврата.Вставить("ИдентификаторОрганизации", Выборка.ИдентификаторОрганизации);
		СтруктураВозврата.Вставить("ИдентификаторКонтрагента", Выборка.ИдентификаторКонтрагента);
		СтруктураВозврата.Вставить("ФорматФайловОбменаЭД",     Выборка.ФорматФайловОбменаЭД);
		СтруктураВозврата.Вставить("Статус",                   Выборка.Статус);
		СтруктураВозврата.Вставить("ДатаИзмененияСтатуса",     Выборка.ДатаИзмененияСтатуса);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ОбработатьПодтвержденияДокументов(АдресКаталога, СоответствиеФайлПараметры, ПакетЭДОбъект) Экспорт
	
	МассивВозврата = Новый Массив;
	// Попытаемся получить настройки криптографии.
	Попытка
		НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии .ТипПровайдераЭЦП;
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		МенеджерКриптографии = Неопределено;
		Возврат МассивВозврата;
	КонецПопытки;
	
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			ФайлыПодписи = НайтиФайлы(АдресКаталога, ЭлементСоответствие.Ключ);
			Если ФайлыПодписи.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлыПодписи[0].ПолноеИмя);
			
			ЭлектронныйДокумент = ОпределитьДокументПоНомеруЭД(ЭлементСоответствие.Значение.НомерЭД, НаправлениеИскомогоДокумента);
			Если ЕстьТакаяПодпись(ДвоичныеДанныеПодписи , ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанныхДокументов = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭлектронныйДокумент).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
			
			СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
			Если СертификатыПодписи.Количество() <> 0 Тогда
				Сертификат = СертификатыПодписи[0];
				ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(ЭлектронныйДокумент, ДвоичныеДанныеПодписи,
					Base64Строка(Сертификат.Отпечаток), ТекущаяДатаСеанса(), "", ЭлементСоответствие.Ключ,
					ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект), Сертификат.Выгрузить());
			КонецЕсли;
			ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			
			Попытка
				ЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
				ЭлектронныйДокументОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
				ЭлектронныйДокументОбъект.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭлектронныйДокумент);
				ЭлектронныйДокументОбъект.Записать();
				ОбновитьВерсиюЭД(ЭлектронныйДокумент);
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
					+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'получение подтверждения ЭД'"), ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ЭлектронныйДокумент.ВладелецФайла;
			МассивВозврата.Добавить(ЭлектронныйДокумент.ВладелецФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево, признак смены версии, несмотря на условия.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			ОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
	ИначеЕсли НЕ ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ЭлектронныйДокумент.ВладелецФайла);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()<>0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			
			Если ЭлектронныйДокумент = НоваяЗаписьНабора.ЭлектронныйДокумент
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель)
				
				ИЛИ ((ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
				И НоваяЗаписьНабора.ЭлектронныйДокумент.Пустая())
				ИЛИ ПринудительнаяСменаСостоянияВерсии Тогда

				НоваяЗаписьНабора.СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент);
				
				СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
				НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
				НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
				НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
				НаборЗаписей.Записать();
			ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
				И ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И НЕ НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент
				И НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
				НаборЗаписей.Записать();
			ИначеЕсли (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик)
				И ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеЦифровыеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//  ВыводитьСообщения - Булево, требуется ли выводить сообщения .
//
Процедура ОпределитьСтатусыПодписей(ЭД, ВыводитьСообщения = Ложь) Экспорт
	
	НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
	ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
	ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
	ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
	
	Попытка
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	Исключение
		Если ВыводитьСообщения Тогда
			ТекстСообщения = НСтр("ru = 'Код ошибки 100. Необходимо провести тест настроек сертификата.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецПопытки;
	
	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища (ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
	ОбъектЭД = ЭД.ПолучитьОбъект();
	
	Для каждого СтрокаЭЦП из ОбъектЭД.ЭлектронныеЦифровыеПодписи Цикл
		Попытка
			ДвоичныеДанныеЭЦП = СтрокаЭЦП.Подпись.Получить();
			ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеДокумента, ДвоичныеДанныеЭЦП);
			СтрокаЭЦП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭЦП.ПодписьВерна = Истина;
		Исключение
			СтрокаЭЦП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭЦП.ПодписьВерна = Ложь;
			
			ТекстСообщения = НСтр("ru = 'Код ошибки 104. Необходимо провести тест настроек сертификата.'");
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка электронной цифровой подписи'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ОбъектЭД.Записать();
	
КонецПроцедуры

// Помечает на удаление элементы справочника ЭДПрисоединенныеФайлы с отбором по владельцу
//
// Параметры: 
//  Ссылка -  ссылка на объект.
//
Процедура ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И (Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|			ИЛИ Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПустаяСсылка))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Ссылка.ПометкаУдаления И НЕ Выборка.Редактирует.Пустая() Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"" не может быть удален, т.к. содержит файл ""%2"", занятый для редактирования.'"),
				Строка(Ссылка), Строка(Выборка.Ссылка));
		КонецЕсли;
		
		ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.УстановитьПометкуУдаления(Ссылка.ПометкаУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивная процедура, получает все подчиненные электронные документы с любой глубиной вложенности.
//
// Параметры:
//  МассивЭДВладельцев - массив ссылок на электронные документы владельцы (для текущей итерации - владелец выбираемых ЭД).
//  МассивЭД - массив подчиненных электронных документов (с каждой итерацией увеличивается на количество найденных ЭД).
//             Электронный документ - владелец добавляется в этот массив отдельно (до или после вызова данной процедуры).
//
Процедура ВыбратьПодчиненныеЭД(Знач МассивЭДВладельцев, МассивЭД) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В (&МассивЭДВладельцев)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДПрисоединенныеФайлы.Ссылка";
	Запрос.УстановитьПараметр("МассивЭДВладельцев", МассивЭДВладельцев);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		МассивЭДВладельцев = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		Для Каждого Эл Из МассивЭДВладельцев Цикл
			
			МассивЭД.Добавить(Эл);
			
		КонецЦикла;
		ВыбратьПодчиненныеЭД(МассивЭДВладельцев, МассивЭД);
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПерезаполнитьДокументыИБПоЭД(СоответствиеВладельцевИЭД, КолОбработанных=0) Экспорт
	
	Для Каждого Строка Из СоответствиеВладельцевИЭД Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			Попытка
				ДокЗаполнен = Ложь;
				Если Строка.Значение.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ Строка.Значение.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
					ЭД = Строка.Значение.ЭлектронныйДокументВладелец;
				Иначе
					ЭД = Строка.Значение;
				КонецЕсли;
				ЗаполнитьДокументИБПоЭД(Строка.Ключ, ЭД, ДокЗаполнен);
				КолОбработанных = КолОбработанных + ?(ДокЗаполнен, 1, 0);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Только для внутреннего использования
Процедура ЗаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД, ДокЗаполнен =Ложь)
	
	ИмяФайлаДанных = ПолучитьИмяФайлаДанныхЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ИмяФайлаДанных) Тогда 
		Возврат;
	КонецЕсли;
	ДанныеНаДиске = Новый Файл(ИмяФайлаДанных);
	Если НЕ ДанныеНаДиске.Существует() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл данных не обнаружен: %1'"),
			ИмяФайлаДанных);
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВладелецЭД",     СсылкаНаВладельца);
	СтруктураПараметров.Вставить("ПолноеИмяФайла", ИмяФайлаДанных);
	
	СтруктураЭД = ЭлектронныеДокументыФорматОбмена.РазобратьФайлДанных(СтруктураПараметров);
	ДокЗаполнен = СтруктураЭД.Загружен;
	
КонецПроцедуры

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
//  Действия - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//
Функция ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
								МассивСтруктурСертификатов,
								Действия,
								ДопПараметры = "",
								ЭД = Неопределено) Экспорт
	
	Если НЕ ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ИспользуетсяОбменЭД() Тогда
		ТекстСообщения = ЭлектронныеДокументыПереопределяемый.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		КлиентскиеНастройкиКриптографии = МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов);
	Исключение
		КлиентскиеНастройкиКриптографии = Новый Массив;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ (ЗначениеЗаполнено(ЭД) И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ЭтоСлужебныйДокумент(ЭД))) Тогда
		ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СоответствиеСертификатов = Новый Соответствие;
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	Если ЭД = Неопределено И ЕстьДействие(Действия, "Сформировать") Тогда
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = 0 По МассивСсылокНаОбъект.Количество() - 1 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[Сч];
			
			// Для случая определения вида ЭД пользователем
			ВидЭД = "";
			Если ЗначениеЗаполнено(ДопПараметры) Тогда
				ДопПараметры.Свойство("ВидЭД", ВидЭД);
			КонецЕсли;
			
			НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект, , КлиентскиеНастройкиКриптографии, , ВидЭД);
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(Сч);
				Если МассивСсылокНаОбъект.Количество() = 0 Тогда
					Возврат Неопределено;
				Иначе
					Сч = Сч - 1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
		КонецЦикла;
		
		Если МассивСсылокНаОбъект.Количество() > 0 Тогда
		
			Запрос = Новый Запрос;
			ТекстЗапросаСоздатьЭД =
			"ВЫБРАТЬ
			|	МассивСсылок.ОбъектСсылка
			|ПОМЕСТИТЬ МассивСсылок
			|ИЗ
			|	&МассивСсылок КАК МассивСсылок
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
			|ИЗ
			|	МассивСсылок КАК МассивСсылок
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект";
			
			Если Действия = "СформироватьУтвердитьПодписатьОтправить" Тогда
				ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов);
				Запрос.Текст = ТекстЗапросаСоздатьЭД + " ГДЕ
				|(СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
				|ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован))";
			Иначе
				ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
					"СчетФактураВыданныйВМетаданных");
				Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
					
					Запрос.Текст = ТекстЗапросаСоздатьЭД + " ГДЕ (ВЫБОР
					|КОГДА МассивСсылок.ОбъектСсылка ССЫЛКА Документ." + ИмяСчетаФактурыВыданного + "
					|	ТОГДА СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
					|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
					|		ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
					|	ИНАЧЕ ИСТИНА
					|КОНЕЦ)";
				КонецЕсли;
			КонецЕсли;

			МассивТипов = Новый Массив;
			Для Каждого МетаданныеДокумент Из Метаданные.Документы Цикл
				МассивТипов.Добавить(Тип("ДокументСсылка." + МетаданныеДокумент.Имя));
			КонецЦикла;
			МассивТипов.Добавить(Тип("СправочникСсылка.СоглашенияОбИспользованииЭД"));
			
			ТЗ_Ссылки = Новый ТаблицаЗначений;
			КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Новый ОписаниеТипов(МассивТипов));
			Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
				Строка = ТЗ_Ссылки.Добавить();
				Строка.ОбъектСсылка = Элемент;
			КонецЦикла;
			Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
			ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
			
			КолНовыхЭД = 0;
			Если ТЗ_ЭД.Количество() > 0 Тогда
				МассивНовыхЭД = СформироватьПрисоединенныеФайлы(ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД"),
					НастройкиОбъектов, ДопПараметры);
				КолНовыхЭД = МассивНовыхЭД.Количество();
			КонецЕсли;
			СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
			Если Действия = "Сформировать" Тогда
				СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат СтруктураВозврата; // не найдено действующее соглашение
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	ЕСТЬNULL(ПрисоединенныеФайлы.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК СсылкаНаЭД,
	|	ПрисоединенныеФайлы.СтатусЭД,
	|	ПрисоединенныеФайлы.ВидЭД,
	|	ПрисоединенныеФайлы.СоглашениеЭД КАК Соглашение
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО (ПрисоединенныеФайлы.Ссылка = СостоянияЭД.ЭлектронныйДокумент)
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	
	Если ЕстьДействие(Действия, "Утвердить") Тогда
		Если Не ЗначениеЗаполнено(ЭД) Тогда
			ДопУсловие = " И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL) 
			|	И (ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
			|	ИЛИ ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Получен)
			|	ИЛИ ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден))";
			Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
				ДопУсловие = ДопУсловие + " И НЕ(ПрисоединенныеФайлы.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
				Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
			КонецЕсли;
			Запрос.Текст = ТекстЗапроса + ДопУсловие;
			ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		Иначе
			ТЗ_ЭД = ТаблицаПоЭД(ЭД);
		КонецЕсли;
		КолУтвержденныхЭД = 0;
		КолУтвержденныхРанее = 0;
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			Если ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
				СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
				НачатьТранзакцию();
				УстановитьПризнакУтвержден(СсылкаНаЭД);
				Если ТранзакцияАктивна() Тогда
					ТекСтрока.СтатусЭД = СсылкаНаЭД.СтатусЭД;
					КолУтвержденныхЭД = КолУтвержденныхЭД + 1;
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			Иначе
				КолУтвержденныхРанее = КолУтвержденныхРанее + 1;
			КонецЕсли;
		КонецЦикла;
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
	КонецЕсли;
	
	Если ЕстьДействие(Действия, "Подписать") Тогда
		
		Если Не ЗначениеЗаполнено(ЭД) Тогда
			ДопУсловие = " И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL) И (ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
			|	ИЛИ ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ЧастичноПодписан))";
			Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
				ДопУсловие = ДопУсловие + " И НЕ(ПрисоединенныеФайлы.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
				Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
			КонецЕсли;
			Запрос.Текст = ТекстЗапроса + ДопУсловие;
			ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		Иначе
			ТЗ_ЭД = ТаблицаПоЭД(ЭД);
			Для Каждого Строка из ТЗ_ЭД Цикл
				Если НЕ (Строка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					ИЛИ Строка.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан) Тогда
					
					ТЗ_ЭД.Удалить(Строка);
				КонецЕсли
			КонецЦикла
		КонецЕсли;
		
		ТЗ_ЭД.Колонки.Добавить("Подписывать");
		ТЗ_ЭД.Колонки.Добавить("Сертификат");
		КолСтрокТЗ = ТЗ_ЭД.Количество();
		ИндексТекСтроки = 0;
		Пока ИндексТекСтроки < КолСтрокТЗ Цикл
			ТекСтрока = ТЗ_ЭД[ИндексТекСтроки];
			
			Если ЗначениеЗаполнено(НастройкиОбъектов) Тогда
				НастройкиОбменаЭД = НастройкиОбъектов.Получить(ТекСтрока.ВладелецЭД);
			Иначе
				НастройкиОбменаЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(ТекСтрока.ВладелецЭД, , КлиентскиеНастройкиКриптографии,
					ТекСтрока.СсылкаНаЭД);
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда // нет обмена
				ИндексТекСтроки = ИндексТекСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ТекСтрока.Подписывать = Ложь;
			ТекстОшибки = НСтр("ru = 'Нет действующего сертификата ЭЦП для организации <%1>, по виду документов <%2>.
			|Перейдите в настройки обмена, задайте вид документа <%2> для действующего сертификата организации <%1>.'");
			
			// В настройках задано требование подписать и еще не подписывали
			// для исходящих и входящих документов.
			Если НастройкиОбменаЭД.Подписывать И (ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан) Тогда
				ТекСтрока.Подписывать = Истина;
				Если ТекСтрока.СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
					
					// Для интеркампани добавляем два сертификата для подписи ЭД
					// (если ЭД ранее не был подписан текущим сертификатом).
					Для Сч = 1 По 2 Цикл
						Если Сч = 2 Тогда
							КолСтрокТЗ = КолСтрокТЗ + 1;
							ИндексТекСтроки = ИндексТекСтроки + 1;
							ДопСтр = ТЗ_ЭД.Вставить(ИндексТекСтроки);
							ЗаполнитьЗначенияСвойств(ДопСтр, ТекСтрока,, "Сертификат");
							ТекСтрока = ДопСтр;
							ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииПолучателяДляПодписи;
						Иначе
							ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииДляПодписи;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ТекСертификат) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
								?(Сч = 1, НастройкиОбменаЭД.Организация.Наименование, НастройкиОбменаЭД.Контрагент.Наименование),
								ТекСтрока.ВидЭД);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
							Продолжить;
						КонецЕсли;
						
						Если НастройкиОбменаЭД.СертификатДоступен
							И ТекСтрока.СсылкаНаЭД.ЭлектронныеЦифровыеПодписи.Найти(ТекСертификат.Отпечаток) = Неопределено
							Тогда
								ТекСтрока.Сертификат = ТекСертификат;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если ТекСтрока.СсылкаНаЭд.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
						ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииДляПодтверждения;
					Иначе
						ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииДляПодписи;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ТекСертификат) Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
							НастройкиОбменаЭД.Организация.Наименование, ТекСтрока.ВидЭД);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						ИндексТекСтроки = ИндексТекСтроки + 1;
						Продолжить;
					КонецЕсли;
					
					Если НастройкиОбменаЭД.СертификатДоступен Тогда
						ТекСтрока.Сертификат = ТекСертификат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ТекСтрока.Соглашение = НастройкиОбменаЭД.СоглашениеЭД;
			ИндексТекСтроки = ИндексТекСтроки + 1;
			
		КонецЦикла;
		
		МассивСертификатов = Новый Массив;
		ВремТЗ = ТЗ_ЭД.Скопировать(, "Сертификат");
		ВремТЗ.Свернуть("Сертификат");
		Для Каждого ТекСтрока Из ВремТЗ Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Сертификат) Тогда
				Продолжить;
			КонецЕсли;
			Отбор = Новый Структура("Сертификат, Подписывать", ТекСтрока.Сертификат, Истина);
			МассивЭД = ТЗ_ЭД.НайтиСтроки(Отбор);
			Если МассивЭД.Количество() > 0 Тогда
				МассивОбработки = Новый Массив;
				Для Каждого ТекЭл Из МассивЭД Цикл
					МассивОбработки.Добавить(ТекЭл.СсылкаНаЭД);
				КонецЦикла;
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("Сертификат", ТекСтрока.Сертификат);
				СтруктураДанных.Вставить("МассивЭД",   МассивОбработки);
				МассивСертификатов.Добавить(СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
		СтруктураВозврата.Вставить("МассивСертификатов", МассивСертификатов);
	КонецЕсли;
	
	Если ЕстьДействие(Действия, "Отправить") Тогда
		Если ЗначениеЗаполнено(ЭД) Тогда
			ТЗ_ЭД = ТаблицаПоЭД(ЭД);
			Если (ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель)
				И ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ТЗ_ЭД.Удалить(ТЗ_ЭД[0]);
			КонецЕсли;
		Иначе
			Если Действия = "Отправить" Тогда
				Запрос.Текст = ТекстЗапроса + " И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL)";
			Иначе
				ДопУсловие = " И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL)
				| И (ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден))";
				Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
					ДопУсловие = ДопУсловие + " И НЕ(ПрисоединенныеФайлы.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
					Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
				КонецЕсли;
				Запрос.Текст = ТекстЗапроса + ДопУсловие;
			КонецЕсли;
			ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		ТЗ_ЭД.Колонки.Добавить("Подписывать");
		ТЗ_ЭД.Колонки.Добавить("Сертификат");
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			НастройкиОбменаЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(ТекСтрока.ВладелецЭД, , КлиентскиеНастройкиКриптографии,
				ТекСтрока.СсылкаНаЭД);
			
			Если НЕ ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
				Продолжить;
			КонецЕсли;
			ТекСтрока.Подписывать = НастройкиОбменаЭД.Подписывать;
		КонецЦикла;
		
		Если Действия = "Отправить" Тогда
			Для Каждого Строка из ТЗ_ЭД Цикл
				Если Строка.СтатусЭД = Перечисления.СтатусыЭД.Сформирован Тогда
					ТЗ_ЭД.Удалить(Строка);
					ТекстСообщения = Нстр("ru = 'Для отправки ЭД необходимо его утвердить.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ИначеЕсли Строка.Подписывать И Строка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
					ТЗ_ЭД.Удалить(Строка);
					ТекстСообщения = Нстр("ru = 'Для отправки ЭД необходимо его подписать.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли
			КонецЦикла;
		Иначе
			Для Каждого Строка из ТЗ_ЭД Цикл
				Если НЕ (Строка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					ИЛИ Строка.СтатусЭД = Перечисления.СтатусыЭД.Подписан) Тогда
					
					ТЗ_ЭД.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если (ЕстьДействие(Действия, "Утвердить") И (КолУтвержденныхЭД > 0 ИЛИ КолУтвержденныхРанее > 0))
			ИЛИ Действия = "Отправить" Тогда
			
			МассивСоглашений = Новый Массив;
			ВремТЗ = ТЗ_ЭД.Скопировать(, "Соглашение");
			ВремТЗ.Свернуть("Соглашение");
			Для Каждого ТекСтрока Из ВремТЗ Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрока.Соглашение)
					ИЛИ ЭтоПрямойОбменЭД(ТекСтрока.Соглашение.СпособОбменаЭД)
					И НЕ ЗначениеЗаполнено(ТекСтрока.Соглашение.Контрагент)
					ИЛИ ТекСтрока.Соглашение.ЭтоИнтеркампани Тогда
					
					Продолжить;
				КонецЕсли;
				Для Сч = 0 По 1 Цикл
					ПризнакПодписи = Сч <> 0;
					Отбор = Новый Структура("Соглашение, Подписывать", ТекСтрока.Соглашение, ПризнакПодписи);
					МассивЭД = ТЗ_ЭД.НайтиСтроки(Отбор);
					Если МассивЭД.Количество() > 0 Тогда
						МассивОбработки = Новый Массив;
						Для Каждого ТекЭл Из МассивЭД Цикл
							МассивОбработки.Добавить(ТекЭл.СсылкаНаЭД);
						КонецЦикла;
						СтруктураДанных = Новый Структура;
						СтруктураДанных.Вставить("Соглашение",     ТекСтрока.Соглашение);
						СтруктураДанных.Вставить("ПризнакПодписи", ПризнакПодписи);
						СтруктураДанных.Вставить("МассивЭД",       МассивОбработки);
						МассивСоглашений.Добавить(СтруктураДанных);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			СтруктураВозврата.Вставить("МассивСоглашений", МассивСоглашений);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Обрабатывает входящий произвольный документ.
//
// Параметры:
//  ПапкаДляРаспаковки - Строка, путь к папке, куда будет помещено содержимое произвольного электронного документа,
//  ПараметрШифрования - Булево, признак шифрования произвольного электронного документа,
//  МассивФайловДанных - Массив, список документов, приложенных к произвольному электронному документу,
//  МенеджерКриптографии - Менеджер криптографии, предназначенный для дешифрования произвольного электронного документа,
//  МенеджерКриптографииПодписи - менеджер криптографии, предназначенный для проверки подписи вложений произвольного электронного документа,
//  ПакетЭДОбъект - объект ИБ, содержащий в себе произвольный электронный документ,
//  СоответствиеФайлПараметры - соответствие, определяющее наличие вложений и подписей к ним в произвольном электронном документе.
//
Функция ОбработатьВходящийПроизвольныйЭД(ПапкаДляРаспаковки,
										ПараметрыШифрования,
										МассивФайловДанных,
										МенеджерКриптографии,
										МенеджерКриптографииПодписи,
										ПакетЭДОбъект,
										СоответствиеФайлПараметры) Экспорт
	
	ДокументСообщение = Неопределено;
	
	Если МассивФайловДанных.Количество() > 0 Тогда
		СтрокаСообщения = СоответствиеФайлПараметры.Получить("Текст");
		Попытка
			ДокументСообщение = Документы.ПроизвольныйЭД.СоздатьДокумент();
			ДокументСообщение.Направление     = Перечисления.НаправленияЭД.Входящий;
			ДокументСообщение.Контрагент      = ПакетЭДОбъект.Контрагент;
			ДокументСообщение.Организация     = ПакетЭДОбъект.Организация;
			ДокументСообщение.Текст           = СтрокаСообщения;
			ДокументСообщение.Прочитан        = Ложь;
			ДокументСообщение.СтатусДокумента = Перечисления.СтатусыЭД.Получен;
			ДокументСообщение.Дата            = ТекущаяДатаСеанса();
			ДокументСообщение.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации)'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'создание произвольного ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Для Каждого ФайлПакета Из МассивФайловДанных Цикл
		
		СтруктураШифрования = НайтиСтруктуруВПараметрах(ФайлПакета, ПараметрыШифрования);
	
		Если СтруктураШифрования <> Неопределено И СтруктураШифрования.Зашифрован Тогда
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураШифрования.ПарольДоступа;
			Попытка
				РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ФайлПакета.ПолноеИмя);
			Исключение
				УдалитьФайлы(ПапкаДляРаспаковки);
				ТекстСообщения = НСтр("ru = 'Код ошибки 103. Необходимо провести тест настроек сертификата.'");
				ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'расшифровка ЭД'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
				Возврат Неопределено;
			КонецПопытки;
		Иначе
			РасшифрованныеДвоичныеДанные = Новый ДвоичныеДанные(ФайлПакета.ПолноеИмя);
		КонецЕсли;
		
		Если Найти(ФайлПакета.Расширение, "zip") > 0 Тогда
			КлючУникальности = Новый УникальныйИдентификатор;
			ПапкаДляРасшифровки = РабочийКаталог("Расшифровка", КлючУникальности);
			ФайлРасшифрованногоАрхива = ТекущееИмяВременногоФайла(ФайлПакета.Расширение);
			РасшифрованныеДвоичныеДанные.Записать(ФайлРасшифрованногоАрхива);
			ЗипЧтениеРаспакованного = Новый ЧтениеZipФайла(ФайлРасшифрованногоАрхива);
			
			УдалитьФайлы(ПапкаДляРасшифровки, "*");
			ЗипЧтениеРаспакованного.ИзвлечьВсе(ПапкаДляРасшифровки);
			ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, "*");
			Если ФайлыРасшифровки.Количество() <> 1 Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
				УдалитьФайлы(ФайлРасшифрованногоАрхива);
				УдалитьФайлы(ПапкаДляРасшифровки);
				
				ВызватьИсключение ("Ошибка распаковки расшифрованного архива");
			КонецЕсли;
			
			РасшифрованныйФайлДанных = ФайлыРасшифровки[0];
		Иначе
			РасшифрованныйФайлДанных = ФайлПакета;
		КонецЕсли;
		СтруктураПодписей = СоответствиеФайлПараметры.Получить(ФайлПакета.Имя);
		ПодписиФайлаДанных = СтруктураПодписей.Подписи;
		
		ДвоичныеДанныеФайлаДанных = Новый ДвоичныеДанные(РасшифрованныйФайлДанных.ПолноеИмя);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДанных);
		
		СтруктураФайла = ПолучитьСтруктуруФайла(РасшифрованныйФайлДанных.Имя);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ДокументСообщение.Ссылка, СтруктураФайла.ИмяБезРасширения,
			СтруктураФайла.Расширение, ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВоВременномХранилище, Неопределено, ,
			"ЭДПрисоединенныеФайлы");
		
		ОбъектФайл = ДобавленныйФайл.ПолучитьОбъект();
		
		ФайлОтветственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(
			ПакетЭДОбъект.Контрагент, ПакетЭДОбъект.Соглашение);
		
		СтруктураДокумента =  Новый Структура;
		СтруктураДокумента.Вставить("ВладелецЭД", ДокументСообщение.Ссылка);
		СтруктураДокумента.Вставить("Ответственный", ФайлОтветственный);
		СтруктураДокумента.Вставить("Организация", ПакетЭДОбъект.Организация);
		СтруктураДокумента.Вставить("Контрагент", ПакетЭДОбъект.Контрагент);
		СтруктураДокумента.Вставить("ВидЭД", Перечисления.ВидыЭД.ПроизвольныйЭД);
		СтруктураДокумента.Вставить("НомерЭД", СоответствиеФайлПараметры.Получить(ФайлПакета.Имя).НомерЭД);
		СтруктураДокумента.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
		СтруктураДокумента.Вставить("Отправитель", ПакетЭДОбъект.Отправитель);
		СтруктураДокумента.Вставить("Получатель", ПакетЭДОбъект.Получатель);
		СтруктураДокумента.Вставить("НомерВерсииЭД", 0);
		СтруктураДокумента.Вставить("СоглашениеЭД", ПакетЭДОбъект.Соглашение);
		СтруктураДокумента.Вставить("УникальныйИД",
			?(ПакетЭДОбъект.Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском,
			СтруктураПодписей.НомерЭД, ""));
		
		ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураДокумента);
		ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ФайлПакета.Имя).Подписи;
		
		Если ТипЗнч(ПодписиФайлаДанных) = Тип("Массив") Тогда
			
			Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
				ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + "\" + ИмяФайлаПодписи;
				ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
				
				СертификатыПодписи = МенеджерКриптографииПодписи.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
				Если СертификатыПодписи.Количество() <> 0 Тогда
					Сертификат = СертификатыПодписи[0];
					ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(ДобавленныйФайл, ДвоичныеДанныеПодписи,
						Base64Строка(Сертификат.Отпечаток), ТекущаяДатаСеанса(), "",
						ИмяФайлаПодписи, ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
						Сертификат.Выгрузить());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
	ПакетЭДОбъект.Записать();
	
	Возврат ДокументСообщение.Ссылка;
	
КонецФункции

// Получает текстовое представление электронного документа.
//
// Параметры:
//  СсылкаНаЭД - Ссылка на электронный документ, текстовое представление которого необходимо получить.
//
Функция ПолучитьПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	Версия = ?(ЗначениеЗаполнено(СсылкаНаЭД.ДатаФормированияЭДОтправителем), СсылкаНаЭД.ДатаФормированияЭДОтправителем,
		СсылкаНаЭД.НомерВерсииЭД);
	ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
	ТекстДаты = ?(ЗначениеЗаполнено(СсылкаНаЭД.ДатаДокументаОтправителя),
		" от " + Формат(СсылкаНаЭД.ДатаДокументаОтправителя, "ДФ=dd.MM.yyyy"), "");
	
	Если СсылкаНаЭд.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ СсылкаНаЭд.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		Представление = "" + СсылкаНаЭД.ВидЭД + ТекстДаты + ТекстВерсии;
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Представление = "" + СсылкаНаЭД.ТипЭлементаВерсииЭД + ТекстДаты;
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		Представление = "" + СсылкаНаЭД.ВидЭД + " № " + СсылкаНаЭД.НомерДокументаОтправителя + ТекстДаты;
	Иначе
		Представление = "" + СсылкаНаЭД.ВидЭД + " № " + СсылкаНаЭД.НомерДокументаОтправителя + ТекстДаты + ТекстВерсии;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Определяет состояние версии электронного документа на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСостояниеВерсииПоСтатусуЭД(СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если СсылкаНаЭД = Неопределено Тогда
		ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НеСформирован;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭД.СоглашениеЭД) Тогда
		
		ТекущийСтатус = СсылкаНаЭД.СтатусЭД;
		
		НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
		
		Если ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
			ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
			Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				И НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка;
			Иначе
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
			КонецЕсли;
		ИначеЕсли НастройкиОбмена <> Неопределено Тогда
			
			МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
			
			Если МассивСтатусов.Количество() > 0 Тогда
				
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				Если ИндексТекущегоСтатуса = Неопределено Тогда
				ИначеЕсли ИндексТекущегоСтатуса + 1 = МассивСтатусов.Количество() Тогда
					ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
				Иначе
					СледующийСтатус = МассивСтатусов[ИндексТекущегоСтатуса + 1];
					Если СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаУтверждении;
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Подписан
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПолностьюПодписан
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ЧастичноПодписан Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПереданОператору Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Доставлен
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ДоставленоПодтверждение Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определяет, все ли установленные на ЭД подписи являются валидными
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция УстановленныеПодписиВалидны(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &Ссылка
	|	И НЕ ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна";
	Запрос.УстановитьПараметр("Ссылка", ЭД.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество()>0 Тогда
		ШаблонТекста = НСтр("ru = 'Обработка электронного документа %1.
		|Документ не обработан, так как содержит невалидные подписи.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Только для внутреннего использования
Функция ИспользуетсяОбменЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьОбменЭД.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Только для внутреннего использования
Процедура ЗаписатьОшибкуПоЭД(ВидОперации, ТекстОшибки) Экспорт
	
	ШаблонСообщения = НСтр("ru = 'Выполнение операции: %1.'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВидОперации);
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с типами объектов

// Определяет тип объекта по текстовому представлению.
//
// Параметры:
//  ОписаниеТипаОбъекта - строка, текстовое представление типа объекта.
//
Функция ОпределитьТипОбъекта(ОписаниеТипаОбъекта) Экспорт
	
	ТипОбъекта = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(ОписаниеТипаОбъекта);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		ТипОбъекта = "СправочникСсылка." + ИмяПрикладногоСправочника;
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

// Получает имя владельца справочника НоменклатураПоставщика.
//
// Возвращаемое значение:
//  ИмяСправочника - строковое имя владельца.
//
Функция ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков() Экспорт
	
	ИмяРеквизитаВладельца = Неопределено;
	ЭлектронныеДокументыПереопределяемый.ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца);
	
	Если ИмяРеквизитаВладельца = Неопределено Тогда // не задано соответствие
		ТекстСообщения = НСтр("ru = 'В коде прикладного решения необходимо указать имя реквизита для владельца номенклатуры поставщиков.'");
		ЗаписьЖурналаРегистрации(ЭлектронныеДокументыСлужебный.ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
		ИмяРеквизитаВладельца = "";
	КонецЕсли;
	
	Возврат ИмяРеквизитаВладельца;
	
КонецФункции

// Определяет, является ли параметр ссылкой на номенклатуру
//
// Параметры:
//  СсылкаНаОбъект - любой объект.
//
// Возвращаемое значение:
//  Булево - Истина, если это ссылка на элемент справочника Номенклатура ИЛИ НоменклатураПоставщиков
//
Функция ЭтоНоменклатура(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	
	Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ОпределитьТипОбъекта("Номенклатура"));
	Если ОпределитьТипОбъекта("НоменклатураПоставщиков") <> Неопределено Тогда
		Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ОпределитьТипОбъекта("НоменклатураПоставщиков"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Работа с журналом регистрации

// Записывает в журнал регистрации событие записи ЭД.
//
// Параметры:
//  СсылкаНаЭД - ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаЭД) Экспорт
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналСобытийЭД");
		ЭлементБлокировки.УстановитьЗначение("ПрисоединенныйФайл", СсылкаНаЭД);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ЖурналСобытийЭД.НомерЗаписи), 0) + 1 КАК НомерЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", СсылкаНаЭД);
		НомерЗаписи = Запрос.Выполнить().Выгрузить()[0].НомерЗаписи;
		
		МенджерЗаписи                    = РегистрыСведений.ЖурналСобытийЭД.СоздатьМенеджерЗаписи();
		МенджерЗаписи.ПрисоединенныйФайл = СсылкаНаЭД;
		МенджерЗаписи.НомерЗаписи        = НомерЗаписи;
		МенджерЗаписи.ВладелецЭД         = СсылкаНаЭД.ВладелецФайла;
		МенджерЗаписи.СтатусЭД           = СсылкаНаЭД.СтатусЭД;
		МенджерЗаписи.Дата               = Формат(СсылкаНаЭД.ДатаИзмененияСтатусаЭД, "ДЛФ=");
		МенджерЗаписи.Пользователь       = ПараметрыСеанса.ТекущийПользователь;
		МенджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текстовое представление для события в журнале регистрации.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, представление события для которого необходимо получить.
//
Функция ТекстовоеПредставлениеСобытияДляЖурналаРегистрации(СсылкаНаОбъект) Экспорт
	
	ТекстПредставления = "";
	ЭлектронныеДокументыПереопределяемый.ТекстовоеПредставлениеСобытияДляЖурналаРегистрации(СсылкаНаОбъект, ТекстПредставления);
	Если НЕ ЗначениеЗаполнено(ТекстПредставления) Тогда
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
			Текст = НСтр("ru ='Соглашение об использовании электронных документов %1.'");
			ТекстПредставленияВладельца = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СсылкаНаОбъект.Код);
		Иначе
			ЭлектронныеДокументыПереопределяемый.ТекстовоеПредставлениеВладельцаДляЖурналаРегистрации(СсылкаНаОбъект,
				ТекстПредставленияВладельца);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекстПредставленияВладельца) Тогда
			ТекстПредставленияВладельца = Строка(СсылкаНаОбъект);
		КонецЕсли;
		
		ТекстПредставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
			ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации(), ТекстПредставленияВладельца);
	КонецЕсли;
	
	Возврат ТекстПредставления;
	
КонецФункции

// Возвращает текстовое представление заголовка события по подсистеме.
//
Функция ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обмен ЭД.'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Определяет имя файла электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//
Функция ОпределитьИмяФайлаЭД(ВидЭД, СсылкаНаОбъект) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НомерВладельца",СсылкаНаОбъект.Номер);
		СтруктураПараметров.Вставить("ДатаВладельца",СсылкаНаОбъект.Дата);
		СтруктураПараметров.Вставить("ВерсияЭД",НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
		СтрокаИмени = ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров)+".xml";
	Иначе
		СтрокаИмени = ТекущееИмяВременногоФайла("xml");
	КонецЕсли;
	СтрокаИмени = КорректноеИмяФайла(СтрокаИмени, Истина);
	
	Возврат СтрокаИмени;
	
КонецФункции

// Определяет представление электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//  СтруктураПараметров: НомерВладельца, ДатаВладельца, ВерсияЭД.
//
Функция ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров)  Экспорт
	
	ТекстВидЭД = "";
	ТекстНомера = "";
	ТекстДаты = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = "_" + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = "_" + Формат(ЗначениеСвойства, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ТекстВерсии = НСтр("ru = ' (версия %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		ТекстВидЭД = "СФ";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		ТекстВидЭД = "ТОРГ-12";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		ТекстВидЭД = "Счет";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		ТекстВидЭД = "ЗаказТовара";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		ТекстВидЭД = "ОтветНаЗаказ";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		ТекстВидЭД = "ПрайсЛист";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		ТекстВидЭД = "КаталогТоваров";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
		ТекстВидЭД = "Акт";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		ТекстВидЭД = "ОтчетОПродажахКомиссионногоТовара";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		ТекстВидЭД = "ОтчетОСписанииКомиссионногоТовара";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = "ПередачаИнт";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = "ВозвратИнт";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		ТекстВидЭД = "Извещение о получении";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
		ТекстВидЭД = "Подтверждение";
		ТипЭД = "";
		Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД) Тогда
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
				ТекстВидЭД = ТекстВидЭД + " даты получения";
			Иначе
				ТекстВидЭД = ТекстВидЭД + " даты отправки";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		ТекстВидЭД = "Уведомление об уточнении";
	КонецЕсли;
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

// Функция предназначена для проверки имени файла на наличие некорректных символов
// Алгоритм взят с небольшими изменениями из процедуры клиентского общего модуля "ФайловыеФункции"
//
// Параметры:
//  СтрИмяФайла - Строка - проверяемое имя файла
//  ФлУдалятьНекорректные - Булево - удалять или нет некорректные символы из переданной строки
// Возвращаемое значение:
//  Строка - имя файла
//
Функция КорректноеИмяФайла(СтрИмяФайла, ФлУдалятьНекорректные = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Результат = Истина;
	
	Для Сч = 1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			Если ФлУдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		Текст = НСтр("ru = 'В имени файла не должно быть следующих символов: %1
		|Имя файла: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрИсключения, СтрИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат СтрИмяФайла;
	КонецЕсли;
	
КонецФункции

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
Функция ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Экспорт
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент.ТипЭлементаВерсииЭД) Тогда
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Иначе
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Ошибка
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ДопДанные);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет, умещаются ли переданные табличные документы
// на страницу при печати.
//
// Параметры
//  ТабДокумент        – Табличный документ
//  ВыводимыеОбласти   – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//  Булево – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент,
										ВыводимыеОбласти,
										РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции

// Только для внутреннего использования
Функция МассивСпособовОбменаЭД(ФлагПрямогоОбмена = Истина) Экспорт
	
	СпособыОЭД = Новый Массив;
	Если ФлагПрямогоОбмена Тогда
		СпособыОЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
		СпособыОЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	Иначе
		СпособыОЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	КонецЕсли;
	
	Возврат СпособыОЭД;
	
КонецФункции

// Только для внутреннего использования
Функция ЭтоПрямойОбменЭД(СпособОбменаЭД) Экспорт
	
	ФлагПрямогоОбменаЭД = Истина;
	СпособыПрямогоОЭД = МассивСпособовОбменаЭД(Истина);
	Если СпособыПрямогоОЭД.Найти(СпособОбменаЭД) = Неопределено Тогда
		ФлагПрямогоОбменаЭД = Ложь;
	КонецЕсли;
	
	Возврат ФлагПрямогоОбменаЭД;
	
КонецФункции

// Только для внутреннего использования
Функция РабочийКаталог(Знач ВидОбработки = "", КлючУникальности = "") Экспорт
	
	Подкаталог = "";
	Если ЗначениеЗаполнено(ВидОбработки) Тогда
		Подкаталог = КорректноеИмяФайла(ВидОбработки, Истина) + "\";
	КонецЕсли;
	ИмяКаталога = ТекущийКаталогВременныхФайлов() + Подкаталог + КлючУникальности + "\";
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		УдалитьФайлы(КаталогНаДиске, "*");
	Иначе
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	УдалитьЛишнийСлэшВПути(ИмяКаталога);
	
	Возврат ИмяКаталога;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьДопустимыйСтатусЭД(НовыйСтатус, СсылкаНаЭД) Экспорт
	
	ТекущийСтатус = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
			ТекущийСтатус = СсылкаНаЭД.СтатусДокумента;
		Иначе
			ТекущийСтатус = СсылкаНаЭД.СтатусЭД;
		КонецЕсли;
		
		Если НовыйСтатус = Перечисления.СтатусыЭД.Отклонен ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ НЕ ЗначениеЗаполнено(ТекущийСтатус) ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			ТекущийСтатус = НовыйСтатус;
		Иначе
			НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
			
			Если НастройкиОбмена <> Неопределено Тогда
			
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				ИндексНовогоСтатуса   = МассивСтатусов.Найти(НовыйСтатус);
				Если ИндексНовогоСтатуса <> Неопределено И ИндексТекущегоСтатуса <> Неопределено Тогда
					Если ИндексНовогоСтатуса > ИндексТекущегоСтатуса Тогда
						ТекущийСтатус = НовыйСтатус;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

// Только для внутреннего использования
Функция ВернутьМассивСтатусовЭД(НастройкиОбмена) Экспорт
	
	МассивСтатусов = Новый Массив;
	
	Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
		
		Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
				
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
				
			ИначеЕсли НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.НеОтправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					
					Если НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СчетФактура
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.НеОтправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ИспользоватьПодпись Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					КонецЕсли;
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					Если НастройкиОбмена.ИспользоватьКвитанции Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					КонецЕсли;
					Если НастройкиОбмена.ИспользоватьПодпись
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
			
		ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
			
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.Подтверждение
				ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
				ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
				
			ИначеЕсли НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СчетФактура
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ИспользоватьПодпись
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
						Если НастройкиОбмена.ИспользоватьКвитанции Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Интеркампани Тогда
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

// Формирует фамилию и инициалы по переданной строке.
//
// Параметры
//  ПолноеНаименование - строка с наименованием.
//
// Возвращаемое значение:
//  Строка - фамилия и инициалы одной строкой.
//  В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	ЭлектронныеДокументыПереопределяемый.РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия, Имя, Отчество);
	Если НЕ ЗначениеЗаполнено(Фамилия) И НЕ ЗначениеЗаполнено(Имя) И НЕ ЗначениеЗаполнено(Отчество) Тогда
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ПолноеНаименование), " ");
		
		КоличествоПодстрок = ФИО.Количество();
		Фамилия            = ?(КоличествоПодстрок > 0, ФИО[0], "");
		Имя                = ?(КоличествоПодстрок > 1, ФИО[1], "");
		Отчество           = ?(КоличествоПодстрок > 2, ФИО[2], "");
	КонецЕсли;
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя), " " + Лев(Имя, 1) + "."
		+ ?(НЕ ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", ""), ""), "");
	
КонецФункции

// Возвращает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - строка - "Факт" или "Юр";
//  ТекстОшибки         - строка - описание ошибки;
//
// Возвращаемое значение:
//  СтруктураАдреса - структура - информация о юридическом адресе.
//
Функция ПолучитьАдресСтруктурой(СтруктураПараметров = Неопределено,
								ВидКонтрагента = Неопределено,
								ВидАдреса = Неопределено,
								ТекстОшибки = "") Экспорт
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("АдресРФ");
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента,
		ВидАдреса, ТекстОшибки);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Только для внутреннего использования
Процедура УдалитьЛишнийСлэшВПути(Путь) Экспорт
	
	Пока Найти(Путь, "\\") > 0 Цикл
		
		Путь = СтрЗаменить(Путь, "\\", "\");
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из клиентского модуля, удаляет папку,
// созданную на сервере и переданную на клиент в качестве параметра.
// 
// Параметры:
// Папка - строка, путь к временной папке на сервере.
//
Процедура УдалитьПапкуНаСервере(Папка) Экспорт
	
	Если ЗначениеЗаполнено(Папка) Тогда
		
		Файл = Новый Файл(Папка);
		Если Файл.Существует() Тогда
			УдалитьФайлы(Папка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Функция СтруктураПараметровЭД() Экспорт
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД",         Неопределено);
	ПараметрыЭД.Вставить("НаправлениеЭД", Неопределено);
	ПараметрыЭД.Вставить("Контрагент",    Неопределено);
	ПараметрыЭД.Вставить("Организация",   Неопределено);
	ПараметрыЭД.Вставить("СоглашениеЭД",  Неопределено);
	ПараметрыЭД.Вставить("Партнер",       Неопределено);

	Возврат ПараметрыЭД;
	
КонецФункции

// Возвращает текст сообщения пользователю о необходимости  настройки системы.
//
// Параметры:
//  <ВидОперации> - Строка - признак выполняемой операции
//
// Возвращаемое значение:
//  ТекстСообщения - <Строка> - Строка сообщения
//
Функция ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации) Экспорт

	ТекстСообщения = ЭлектронныеДокументыПереопределяемый.ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации);
	Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
		Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами.'");
		ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности настройки криптографии необходимо 
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		Иначе
			ТекстСообщения = НСтр("ru='Операция не может быть выполнена.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Определяет настройки обмена электронными документами по структуре параметров.
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, ПараметрыСертификатов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Неопределено;
	
	НаправлениеЭД = "";
	ВидЭД = "";
	Контрагент = "";
	Если СтруктураПараметров.Свойство("НаправлениеЭД", НаправлениеЭД) И СтруктураПараметров.Свойство("ВидЭД", ВидЭД)
		И СтруктураПараметров.Свойство("Контрагент", Контрагент)
		И ЗначениеЗаполнено(НаправлениеЭД) И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Контрагент) Тогда
		
		ФлагИспользованияЭЦП = Константы.ИспользоватьЭлектронныеЦифровыеПодписи.Получить();
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
		Запрос.УстановитьПараметр("ВидЭД",         ВидЭД);
		Запрос.УстановитьПараметр("Контрагент",    Контрагент);
		СоглашениеЭД = "";
		Организация = "";
		Если СтруктураПараметров.Свойство("СоглашениеЭД", СоглашениеЭД) И ЗначениеЗаполнено(СоглашениеЭД) Тогда
			Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
			Запрос.Текст = ЭлектронныеДокументыПереопределяемый.ПолучитьТекстНастроекОбменаПоСоглашению();
		ИначеЕсли СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Партнер = "";
			СтруктураПараметров.Свойство("Партнер", Партнер);
			Запрос.УстановитьПараметр("Партнер", Партнер);
			
			Запрос.Текст = ЭлектронныеДокументыПереопределяемый.ПолучитьТекстЗапросаНастроекОбменаСПриоритетами();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ТЗ = РезультатЗапроса.Выгрузить();
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				Если ФлагИспользованияЭЦП И ПараметрыСертификатов <> Неопределено Тогда
					МассивОтпечатковСертификатов = ВернутьМассивОтпечатковСтруктуры(ПараметрыСертификатов);
					Для Каждого СтрокаТЗ Из ТЗ Цикл
						Если СтрокаТЗ.Подписывать Тогда
							Если ПараметрыСертификатов.Количество() = 0 Тогда
								Прервать;
							Иначе
								Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииПолучателяДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодтверждения.Отпечаток) <> Неопределено Тогда
									
									ТекущаяНастройка = СтрокаТЗ;
									НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
					
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				Если ФлагИспользованияЭЦП Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет соглашения об обмене.
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Позволяет получить значение реквизита недоступного для чтения объекта
Функция ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Ссылка, ИмяРеквизита) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита);
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	СоответствиеФО = Новый Соответствие;
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО);
	
	ИмяФОПрикладногоРешения = СоответствиеФО.Получить(НаименованиеФО);
	Если ИмяФОПрикладногоРешения = Неопределено Тогда // не задано соответствие
		Результат = Ложь;
	Иначе
		Результат = ПолучитьФункциональнуюОпцию(ИмяФОПрикладногоРешения)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
//
// Параметры:
// 
// НастройкаПроксиСервера - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
// Протокол - строка - протокол для которого устанавливаются параметры прокси сервера, например "http", "https", "ftp"
// 
Функция СформироватьПрокси(Протокол) Экспорт
	
	НастройкаПроксиСервера = Новый Соответствие;
	ЭлектронныеДокументыПереопределяемый.ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера);
	Если НастройкаПроксиСервера.Количество() > 0 Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер.
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Только для внутреннего использования
Функция ТекущийКаталогВременныхФайлов() Экспорт
	
	ТекущийКаталог = "";
	ЭлектронныеДокументыПереопределяемый.ТекущийКаталогВременныхФайлов(ТекущийКаталог);
	Если НЕ ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ТекущийКаталог = КаталогВременныхФайлов();
	КонецЕсли;
	
	Возврат ТекущийКаталог;
	
КонецФункции

// Только для внутреннего использования
Функция ТекущееИмяВременногоФайла(Расширение = "") Экспорт
	
	ИмяВременногоФайла = "";
	ЭлектронныеДокументыПереопределяемый.ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение);
	Если НЕ ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Функция ЕстьПравоОбработкиЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = ПользователиСервер.РолиДоступны("ВыполнениеОбменаЭД");
	КонецЕсли;
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

Функция ЕстьПравоЧтенияЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоЧтенияЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = ПользователиСервер.РолиДоступны("ВыполнениеОбменаЭД, ЧтениеЭД");
	КонецЕсли;	
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Возвращает номер версии Библиотеки стандартных подсистем.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.0.6";
	
КонецФункции

// Неинтерактивное обновление данных ИБ при смене версии библиотеки
// Обязательная "точка входа" обновления ИБ в библиотеке.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	// Обработчик заполнения старых соглашениий новыми видами документов: ТОРГ12Продавец, ТОРГ12Покупатель,
	// АктИсполнитель, АктЗаказчик.
	ФлагПринудительногоЗапускаОбработчика = Ложь;
	ВерсияОбрабочтика = "1.0.4";
	ЭлектронныеДокументыПереопределяемый.ОпределитьФлагЗапускаОбработчикаОбновления(ВерсияОбрабочтика,
		ФлагПринудительногоЗапускаОбработчика);
	Если ВерсияБиблиотеки() = ВерсияОбрабочтика ИЛИ ФлагПринудительногоЗапускаОбработчика Тогда
		ОбновитьВидыДокументовВСоглашениях();
	КонецЕсли;
	
	// Обработчик заполнения поля РегламентЭДО в старых соглашениях.
	ФлагПринудительногоЗапускаОбработчика = Ложь;
	ВерсияОбрабочтика = "1.0.5";
	ЭлектронныеДокументыПереопределяемый.ОпределитьФлагЗапускаОбработчикаОбновления(ВерсияОбрабочтика,
		ФлагПринудительногоЗапускаОбработчика);
	Если ВерсияБиблиотеки() = ВерсияОбрабочтика ИЛИ ФлагПринудительногоЗапускаОбработчика Тогда
		ОбновитьВерсиюРегламентаЭДО();
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьДатуВКаноническийВид(ПреобрДата) Экспорт
	
	
	Если ТипЗнч(ПреобрДата) = Тип("Дата") Тогда
		
		КаноничДата = Формат(Год(ПреобрДата),"ЧГ=0") + Формат(Месяц(ПреобрДата), "ЧЦ=2; ЧВН=") + Формат(День(ПреобрДата), "ЧЦ=2; ЧВН=")
			+ Формат(Час(ПреобрДата), "ЧЦ=2; ЧВН=") + Формат(Минута(ПреобрДата), "ЧЦ=2; ЧВН=") + Формат(Секунда(ПреобрДата), "ЧЦ=2; ЧВН=");
			
	Иначе
		КаноничДата = ПреобрДата;
	КонецЕсли;
	
	Возврат КаноничДата;
	
КонецФункции

Процедура ОбновитьВидыДокументовВСоглашениях()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ИскомоеСоглашение = Результат.Ссылка.ПолучитьОбъект();
		
		Если ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12Продавец, "ИсходящийДокумент") = Неопределено Тогда
			НайденаяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12, "ИсходящийДокумент");
			Если НайденаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.ТОРГ12Продавец;
				НоваяСтрока.ИспользоватьЭЦП           = НайденаяСтрока.ИспользоватьЭЦП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденаяСтрока.Формировать;
			КонецЕсли;
		КонецЕсли;
		
		Если ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12Покупатель, "ИсходящийДокумент") = Неопределено Тогда
			НайденаяСтрока = ИскомоеСоглашение.ВходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12, "ВходящийДокумент");
			Если НайденаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.ТОРГ12Покупатель;
				НоваяСтрока.ИспользоватьЭЦП           = НайденаяСтрока.ИспользоватьЭЦП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденаяСтрока.Формировать;
			КонецЕсли;
		КонецЕсли;
		
		Если ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктИсполнитель, "ИсходящийДокумент") = Неопределено Тогда
			НайденаяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктВыполненныхРабот, "ИсходящийДокумент");
			Если НайденаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.АктИсполнитель;
				НоваяСтрока.ИспользоватьЭЦП           = НайденаяСтрока.ИспользоватьЭЦП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденаяСтрока.Формировать;
			КонецЕсли;
		КонецЕсли;
		
		Если ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктЗаказчик, "ИсходящийДокумент") = Неопределено Тогда
			НайденаяСтрока = ИскомоеСоглашение.ВходящиеДокументы.Найти(Перечисления.ВидыЭД.АктВыполненныхРабот, "ВходящийДокумент");
			Если НайденаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.АктЗаказчик;
				НоваяСтрока.ИспользоватьЭЦП           = НайденаяСтрока.ИспользоватьЭЦП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденаяСтрока.Формировать;
			КонецЕсли;
		КонецЕсли;
		
		ИскомоеСоглашение.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьВерсиюРегламентаЭДО()
	
	НаборЗаписей = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(Запись.ВерсияРегламентаЭДО) Тогда
			Запись.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Получение данных объектов для сравнения

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры

Функция ИнициализацияТаблицыРеквизитовОбъектов()
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаРеквизитов.Колонки;
	Колонки.Добавить("Порядок",                    Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",          Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыОбъекта",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовОбъекта", Новый ОписаниеТипов("Структура"));
	
	ТаблицаРеквизитов.Индексы.Добавить("ИмяОбъекта");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Управление электронной почтой

Функция СформироватьТемуПисьма(Отправитель, Получатель)
	
	Возврат "Обмен эл.документами: " + Отправитель + ?(ЗначениеЗаполнено(Получатель), " -> " + Получатель, "");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

Процедура СформироватьЭДПрисоединенныйФайлПакета(Конверт)
	
	ПодготовленныеДокументы = ПолучитьЭлектронныеДокументыКонвертов(Конверт);	
	ЭтоПроизвольныйДокумент = ЭтоПакетПроизвольногоЭД(ПодготовленныеДокументы);
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	СоответствиеФайлЭД      = Новый Соответствие;
	
	АдресКаталога = РабочийКаталог("Отправка", Конверт.Ссылка.УникальныйИдентификатор());
	УдалитьФайлы(АдресКаталога, "*");
	Для Каждого ДокументНаОтправку Из ПодготовленныеДокументы Цикл
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ДокументНаОтправку);
		Если ЭтоОтправкаПодтверждения(ДокументНаОтправку)  Тогда
			СохранитьВместеСПоследнейЭЦП(ДокументНаОтправку, ДанныеФайла, УникальныйИдентификатор, АдресКаталога, СоответствиеФайлЭД);
		Иначе
			СохранитьВместеСЭЦП(ДокументНаОтправку, ДанныеФайла, УникальныйИдентификатор, АдресКаталога, Конверт,
				СоответствиеФайлЭД, ЭтоПроизвольныйДокумент );
		КонецЕсли;
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	
	Для Каждого Файл Из Файлы Цикл
		Если Файл.Расширение <> ".zip" И Найти(Файл.Имя, "Извещение") = 0 И Файл.Расширение <> ".p7s"
			И Файл.Расширение <> ".xml" Тогда
			
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		Возврат ;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
	КонецЦикла;
	
	ЗипКонтейнер = Новый ЗаписьZipФайла();
	ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
	ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	ЗипКонтейнер.Открыть(АдресКаталога+ИмяФайла+".zip");
	
	Для Каждого Файл Из Файлы Цикл
		ЗипКонтейнер.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	СоответствиеВложений 	= ПолучитьСоответствиеФайловИПодписей(МассивИменФайлов);
	ТекстОписанияУчастников = СоздатьТекстОписиЭД(Конверт.Отправитель, Конверт.Получатель, Конверт, СоответствиеВложений,
		СоответствиеФайлЭД, ЭтоПроизвольныйДокумент);
	
	КопироватьФайл(ТекстОписанияУчастников, АдресКаталога+"packageDescription.xml");
	ЗипКонтейнер.Добавить(АдресКаталога+"packageDescription.xml");
	
	ЗипКонтейнер.Записать();
	
	ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла+".zip");
	УдалитьФайлы(АдресКаталога);
	
КонецПроцедуры

Функция РаспаковатьПакетЭДНаСервере(ПакетЭД, ПараметрыШифрования = "")
	
	МассивВозврата = Новый Массив;
	ПапкаДляРаспаковки = РабочийКаталог("Распаковка",  ПакетЭД.Ссылка.УникальныйИдентификатор());
	ПапкаДляРасшифровки = РабочийКаталог("Расшифровка", ПакетЭД.Ссылка.УникальныйИдентификатор());

	ДанныеРаспаковки  = ВернутьМассивДвоичныхДанныхПакета(ПакетЭД, ПапкаДляРаспаковки, ПараметрыШифрования);
	// Если это был произвольный ЭД.
	Если ДанныеРаспаковки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
	МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
	Попытка
		НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	Исключение
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	
	Если МассивДвоичныхДанных.Количество() = 0 Тогда
		ОбработатьПодтвержденияДокументовНаСервере(ДанныеРаспаковки.СоответствиеФайлПараметры, ПакетЭД, ПапкаДляРаспаковки);
	КонецЕсли;
	
	Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
		Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
			
		// Обработать пришедшие извещения от оператора.
		// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
		МассивСтруктурПодписей = ПолучитьСоответствиеДанныхПодписей(СтруктураДанных.ИмяФайла, ПапкаДляРаспаковки,
			СтруктураДанных.ДвоичныеДанные, ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
		
		Если МассивСтруктурПодписей <> Неопределено Тогда
			ФлагОшибки = Ложь;
			Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
				Если СтруктураПодписи.ДвоичныеДанныеПодписи <> Неопределено Тогда
					Попытка 
						ПроверитьПодпись(МенеджерКриптографии, СтруктураПодписи.ДвоичныеДанныеФайла, СтруктураПодписи.ДвоичныеДанныеПодписи);
					Исключение
						ТекстСообщения = НСтр("ru = 'Код ошибки 104. Необходимо провести тест настроек сертификата.'");
						ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка подписи'"),
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
						ФлагОшибки = Истина;
						Прервать;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Если ФлагОшибки Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		МассивДобавленныхФайлов = ДобавитьДанныеПоПакетуЭД(ПакетЭД, МассивСтруктурПодписей, СтруктураДанных, 
			ДанныеРаспаковки.СоответствиеФайлПараметры, ПапкаДляРаспаковки, ПапкаДляРасшифровки);
		КонецЦикла;
	КонецЕсли;
	
	ЕстьОшибкаРаспаковки=Ложь;
	
	Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
		СтруктураШифрования = НайтиСтруктуруВПараметрах(СтруктураДанных.ИмяФайлаБезРасширения, ПараметрыШифрования);
		// Если есть шифрование прекращаем обработку, расшифровка проходит на клиенте
		Если СтруктураШифрования <> Неопределено И СтруктураШифрования.Зашифрован Тогда
			Прервать;
		КонецЕсли;
		
		МассивСтруктурПодписей = ПолучитьСоответствиеДанныхПодписей(СтруктураДанных.ИмяФайла, ПапкаДляРаспаковки,
			СтруктураДанных.ДвоичныеДанные, ДанныеРаспаковки.СоответствиеФайлПараметры);
				
		МассивДобавленныхФайлов = ДобавитьДанныеПоПакетуЭД(ПакетЭД, МассивСтруктурПодписей, СтруктураДанных,
			ДанныеРаспаковки.СоответствиеФайлПараметры, ПапкаДляРаспаковки, ПапкаДляРасшифровки, ЕстьОшибкаРаспаковки);
			
		Если НЕ ЕстьОшибкаРаспаковки Тогда
			ДобавитьМассив(МассивВозврата, МассивДобавленныхФайлов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибкаРаспаковки Тогда
		
		Возврат (Новый массив);
	КонецЕсли;
	
	УстановитьСтатусПакета(ПакетЭД, Перечисления.СтатусыПакетовЭД.Распакован);
	УдалитьФайлы(ПапкаДляРаспаковки);

	Возврат МассивВозврата;
	
КонецФункции

Функция ОпределитьПодготовленныеКОтправкеЭД()
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.СтатусПакета = &СтатусПакета";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьЭлектронноеПисьмо(ПодготовленныеДокументы, АдресКаталогаСВложениями)
	
	СоответствиеВложений = СформироватьСоответствиеВложений(АдресКаталогаСВложениями);
	Результат = ПередатьПисьмоСВложениями(ПодготовленныеДокументы, СоответствиеВложений);
	УдалитьФайлы(АдресКаталогаСВложениями);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПакетПроизвольногоЭД(МассивДокументов)
	
	Для Каждого Документ Из МассивДокументов Цикл
		Если ТипЗнч(Документ.ВладелецФайла) = Тип("ДокументСсылка.ПроизвольныйЭД")
			И Документ.ВладелецФайла.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	АдресКаталога = РабочийКаталог("Отправка", Конверт.Ссылка.УникальныйИдентификатор());
	
	Пока ЗначениеЗаполнено(ФайлыЭД) И ФайлыЭД.Следующий() Цикл
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлыЭД.Ссылка);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
	КонецЦикла;
	
	Возврат АдресКаталога;
	
КонецФункции

Функция СформироватьСписокРасширенийСертификатов()
	
	СписокРасширений = Новый СписокЗначений;
	СписокРасширений.Добавить(".p7s");
	
	Возврат СписокРасширений;
	
КонецФункции

Функция СформироватьСоответствиеВложений(КаталогВложений, ТолькоПодписи = Ложь)
	
	СписокДоступныхРасширений = СформироватьСписокРасширенийСертификатов();
	СоответствиеВозврата = Новый Соответствие;
	СписокВложений = НайтиФайлы(КаталогВложений, "*");
	Для Каждого ФайлВложений Из СписокВложений Цикл
		Если ТолькоПодписи И Найти(ФайлВложений.Расширение, СписокДоступныхРасширений) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФайлВложений.ЭтоФайл() Тогда
			СоответствиеВозврата.Вставить(ФайлВложений.Имя, Новый ДвоичныеДанные(ФайлВложений.ПолноеИмя));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если Найти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

Функция ОтправкаСформированныхЭД(СоответствиеПаролейДляЭДО = Неопределено)
	
	Результат = 0;
	// Создадим и заполним документы ПакетыЭД
	ГотовыеКОтправкеПакеты = ОпределитьПодготовленныеКОтправкеЭД();
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты, СоответствиеПаролейДляЭДО);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с сертификатами ЭЦП

// Проверяет действительность подписи, без учета списка отозванных сертификатов.
// В случае ошибки генерирует исключение
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ДвоичныеДанныеФайла   - двоичные данные файла
//  ДвоичныеДанныеПодписи - двоичные данные подписи
//
Процедура ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи)
	
	Сертификат = Неопределено;
	МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
	
КонецПроцедуры	

Процедура СохранитьПодписи(ФайлСсылка,
							ПолноеИмяФайла,
							УникальныйИдентификатор,
							МассивСтруктурПодписей,
							АдресКаталога,
							СоответствиеФайлЭД,
							БезИсходника = Ложь,
							ЭтоПроизвольныйЭД = Ложь)
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;
	
	ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
	
	Если НЕ БезИсходника Тогда
		МассивИмен.Добавить(ОсновнойФайл.Имя);
	КонецЕсли;
	
	Сч = 0;
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Сч = Сч + 1;
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда
			Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД И Прав(ПолноеИмяФайла, 4) = ".zip" Тогда
				ИмяФайлаПодписи = Строка(ФайлСсылка)+"ЭЦП" + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
			Иначе
				ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Сч + ".p7s";
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи);
		
		ПолныйПутьПодписи = Путь;
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи);
			
			ПолныйПутьПодписи = Путь;
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СоответствиеФайлЭД.Вставить(Файл.Имя, ФайлСсылка.НомерЭД);
		Иначе
			СтрокаВладелец = СоответствиеФайлЭД.Строки.Найти(ФайлСсылка.НомерЭД, "НомерЭД");
			Если СтрокаВладелец = Неопределено Тогда
				СтрокаВладелец = СоответствиеФайлЭД.Строки.Добавить();
				СтрокаВладелец.НомерЭД = ФайлСсылка.НомерЭД;
			КонецЕсли;
			НоваяСтрока = СтрокаВладелец.Строки.Добавить();
			ПолноеИмяПодписи = Строка(ФайлСсылка) + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
			
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ПолноеИмяПодписи);
			НоваяСтрока.ПсевдонимФайла = ПолноеИмяПодписи;
			НоваяСтрока.ЭтоПодпись = Истина;
			НоваяСтрока.ИмяФайла = Файл.Имя;
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		ДвоичныеДанныеПодписи.Записать(ПолныйПутьПодписи);
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пароль к переданному сертификату,
// если он был сохранен в базе
//
// Параметры
//  Сертификат  - элемент справочника СертификатыЭЦП
Функция СохраненныйПарольКСертификату(Сертификат)
	
	ПарольКСертификату = Неопределено;
	Если ЗначениеЗаполнено(Сертификат) И Сертификат.ЗапомнитьПарольКСертификату Тогда
		ПарольКСертификату = Сертификат.ПарольПользователя;
	КонецЕсли;
	
	Возврат ПарольКСертификату;
	
КонецФункции

Функция ПолучитьСоответствиеФайловИПодписей(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	ИменаФайловПодписей = Новый Массив;
	ИменаФайловДанных   = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если Прав(ИмяФайла, 3) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА;
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС - 1]) > СтрДлина(ИменаФайловДанных[ИндексБ - 1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		Своп = ИменаФайловДанных[ИндексА - 1];
		ИменаФайловДанных[ИндексА - 1] = ИменаФайловДанных[ИндексМАКС - 1];
		ИменаФайловДанных[ИндексМАКС - 1] = Своп;
	КонецЦикла;
	
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СохранитьФайлКак(ДанныеФайла,
						ИмяКаталога,
						ПрисоединенныйФайл = Неопределено,
						СсылкаНаПакет = Неопределено,
						ЭтоПроизвольныйЭД = Неопределено,
						СоответствиеФайлЭД= Неопределено)
	
	Файл = Новый Файл(ИмяКаталога);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	ИмяПолучаемогоФайла = СтрЗаменить(ДанныеФайла.ИмяФайла, "..", ".");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СоответствиеФайлЭД.Вставить(ДанныеФайла.ИмяФайла, ПрисоединенныйФайл.НомерЭД);
		Иначе
			НоваяСтрока = СоответствиеФайлЭД.Строки.Добавить();
			НоваяСтрока.НомерЭД = ПрисоединенныйФайл.НомерЭД;
			НоваяСтрока.ЭтоПодпись = Ложь;
			НоваяСтрока.ПсевдонимФайла = ДанныеФайла.ИмяФайла;
			НоваяСтрока.ИмяФайла = ИмяПолучаемогоФайла;
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД Тогда
		
		ИмяФайла      = ДанныеФайла.Наименование;
		ИмяКонтейнера = ИмяКаталога + ИмяФайла + ".zip";
		ИмяАрхива     = ИмяФайла + ".zip";
		
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ИмяКонтейнера = ИмяКаталога+ИмяФайла+"ЭЦП.zip";
			ИмяАрхива     = ИмяФайла + "ЭЦП.zip";
		КонецЕсли;
		
		ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяКонтейнера);
		ЗипКонтейнер.Добавить(ИмяКаталога + ИмяПолучаемогоФайла );
		
		ЗипКонтейнер.Записать();
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			УдалитьФайлы(ИмяКаталога + ИмяПолучаемогоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			СоответствиеФайлЭД.Вставить(ИмяАрхива, ПрисоединенныйФайл.НомерЭД);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыШифрования = ПолучитьМассивАдресовСертификатовШифрования(ПрисоединенныйФайл);
	Если ПараметрыШифрования <> Неопределено Тогда
		Попытка
			НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
			
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			ТекстСообщения = НСтр("ru = 'Код ошибки 100.  Необходимо провести тест настроек сертификата.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			УдалитьФайлы(ИмяКаталога, "*");
			Возврат "";
		КонецПопытки;
		
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ПараметрыШифрования[0]);
			ДвоичныеДанныеСертификатаОрганизации = ПолучитьИзВременногоХранилища(ПараметрыШифрования[1]);
			
			Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			СертификатОрганизации = Новый СертификатКриптографии(ДвоичныеДанныеСертификатаОрганизации);
			
			МассивСертификатов = Новый Массив;
			МассивСертификатов.Добавить(Сертификат);
			МассивСертификатов.Добавить(СертификатОрганизации);
			
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяКаталога + ИмяПолучаемогоФайла);
			
			МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла, ИмяКаталога + ИмяПолучаемогоФайла, МассивСертификатов);
			
		ДобавитьПризнакШифрованияПакетуЭД(СсылкаНаПакет, ПрисоединенныйФайл, ПараметрыШифрования);
	КонецЕсли;
	
	Возврат ИмяКаталога + ИмяПолучаемогоФайла;
	
КонецФункции

// Получение актуальных сертификатов для подписи электронных документов

Функция ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов)
	
	МассивОтпечатков = Новый Массив;
	Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
		МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
	КонецЦикла;
	
	ЗапросПоСертификатам = Новый Запрос;
	ЗапросПоСертификатам.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СертификатыЭЦП.Ссылка,
	|	СертификатыЭЦП.Отпечаток
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|ГДЕ
	|	СертификатыЭЦП.Отозван = ЛОЖЬ
	|	И (СертификатыЭЦП.Пользователь = &ТекущийПользователь
	|			ИЛИ СертификатыЭЦП.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	И СертификатыЭЦП.ПометкаУдаления = ЛОЖЬ
	|	И СертификатыЭЦП.Отпечаток В(&МассивОтпечатков)";
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", ПользователиСервер.ТекущийПользователь());
	ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков",    МассивОтпечатков);
	
	Возврат ЗапросПоСертификатам.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями ЭД

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	ЗапросЭД.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД КАК НомерВерсии
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаВладельца
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсии;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция СостояниеВерсииЭД(СсылкаНаВладельца)
	
	ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	СтруктураВерсииЭД = ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	
	Если СтруктураВерсииЭД.Свойство("СостояниеВерсииЭД") Тогда
		ВозвращаемоеЗначение = СтруктураВерсииЭД.СостояниеВерсииЭД;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура УдалитьСтаруюВерсиюЭД(ЗаписьНабора)
	
	СтруктураВерсии = ПолучитьСтруктуруВерсииЭД(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И (СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
		ИЛИ СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца, ПризнакПолучения = Ложь)
	
	ПараметрыЭД = ЭлектронныеДокументыВызовСервераСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца.Ссылка);
	
	СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	НаправлениеЭД = "";
	Если ПараметрыЭД.Свойство("НаправлениеЭД", НаправлениеЭД) И ЗначениеЗаполнено(НаправлениеЭД) Тогда
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован;
		ИначеЕсли НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если ПризнакПолучения Тогда 
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
			Иначе
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеВерсииЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Добавление объектов в присоединенные файлы

Процедура СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры)
	
	МассивОбъектовДляВыгрузки = ТекЭлемент.Значение;
	ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивОбъектовДляВыгрузки);
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров Тогда
			НастройкиОбменаЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДляВыгрузки);
		Иначе
			НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
			Продолжить
		КонецЕсли;
		
		УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12 Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьНакладнуюПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьТорг12ФНСПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетНаОплату Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ЗаказТовара Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьЗаказПоставщикуПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьЗаказКлиентаПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПрайсЛист Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьПрайсПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров Тогда
			ТоварыКаталога = "";
			ДопПараметры.Свойство("ТоварыКаталога", ТоварыКаталога);
			СписокТоваровКаталога = ПолучитьИзВременногоХранилища(ТоварыКаталога);
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьКаталогНоменклатуры(ОбъектДляВыгрузки,
				СписокТоваровКаталога, НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьАктВыполненныхРаботПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктИсполнитель Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьАкт501ФНСПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(
				ОбъектДляВыгрузки, НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(
				ОбъектДляВыгрузки, НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьПередачуТоваровМеждуОрганизациями(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьВозвратТоваровМеждуОрганизациями(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетФактура Тогда
			СтруктураВозврата = ЭлектронныеДокументыФорматОбмена.СформироватьСчетФактуру(ОбъектДляВыгрузки, НастройкиОбменаЭД);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект, ЭлектронныйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		КонецЕсли;
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДопДокумент(СтруктураОбмена, ОписаниеФормата)
	
	ТабличныйДокумент = ЭлектронныеДокументыФорматОбмена.СформироватьПечатнуюФормуЭД(
		СтруктураОбмена.ПолноеИмяФайла, СтруктураОбмена.СтруктураЭД.НаправлениеЭД);
	СтруктураОбработкиДопФайла = ОпределитьТипСохраненияПоПеречислению(ОписаниеФормата);
	ФайлИсходногоДокумента = Новый Файл(СтруктураОбмена.ПолноеИмяФайла);
	ИмяИсходногоДокумента = ФайлИсходногоДокумента.ИмяБезРасширения;
	ФайлСохранения = ФайлИсходногоДокумента.Путь + ИмяИсходногоДокумента +"."
		+ СтруктураОбработкиДопФайла.ПредставлениеРасширения;
	
	ТабличныйДокумент.Записать(ФайлСохранения,СтруктураОбработкиДопФайла.ПредставлениеТипаСохранения);
	
	Возврат ФайлСохранения;
	
КонецФункции

Функция ОпределитьТипСохраненияПоПеречислению(ТипСохранения)
	
	СтруктураВозврата = Новый Структура("ПредставлениеРасширения, ПредставлениеТипаСохранения");
	Если ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.DOCX Тогда
		СтруктураВозврата.ПредставлениеРасширения = "docx";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.DOCX;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.HTML Тогда
		СтруктураВозврата.ПредставлениеРасширения = "html";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.HTML;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.XLS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "xls";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.XLS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.MXL Тогда
		СтруктураВозврата.ПредставлениеРасширения = "mxl";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.MXL;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.ODS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "ods";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.ODS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.PDF Тогда
		СтруктураВозврата.ПредставлениеРасширения = "pdf";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.PDF;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СформироватьЗипАрхивФайлов(ИмяОсновногоФайла, МассивФайлов)
	
	Попытка
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлЗипАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		ЗаписьЗип = Новый ЗаписьZIPФайла(ФайлЗипАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьЗип.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьЗип.Записать();
		Возврат ФайлЗипАрхива;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись файла архива на диск'"), ТекстОшибки, ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

Функция ПолучитьПолноеИмяФайлаЭД(СтруктураОбмена)
	
	// Формируем ЭД в формате xml, в случае если это:
	// - торг-12 в формате ФНС;
	// - Акт в формате ФНС;
	// - торг-12 в старом формате;
	// - обмен через оператора ЭДО счетом-фактурой.
	Если (СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик)
		ИЛИ СтруктураОбмена.СтруктураЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
		И (СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12) Тогда
		
		ПолноеИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчастникиОбменовЭД.ФорматФайловОбменаЭД КАК ФорматФайла
		|ИЗ
		|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭД
		|ГДЕ
		|	УчастникиОбменовЭД.Участник = &Участник
		|	И УчастникиОбменовЭД.СоглашениеОбИспользованииЭД = &СоглашениеЭД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДФорматыФайловОбмена.ФорматФайла
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.ФорматыФайловОбмена КАК СоглашенияОбИспользованииЭДФорматыФайловОбмена
		|ГДЕ
		|	СоглашенияОбИспользованииЭДФорматыФайловОбмена.Ссылка.Ссылка = &СоглашениеЭД
		|	И СоглашенияОбИспользованииЭДФорматыФайловОбмена.Использовать
		|	И НЕ СоглашенияОбИспользованииЭДФорматыФайловОбмена.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)";
		Запрос.УстановитьПараметр("СоглашениеЭД", СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
		Запрос.УстановитьПараметр("Участник",     СтруктураОбмена.СтруктураЭД.Контрагент);
		
		ИспользуемыеФорматы = Запрос.Выполнить().Выгрузить();
		
		МассивФайловДляОтправки = Новый Массив;
		
		Для Каждого ИспользуемаяСтрока Из ИспользуемыеФорматы Цикл
			Если ИспользуемаяСтрока.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.XML
				ИЛИ ИспользуемаяСтрока.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат Тогда
				
				ИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
			Иначе
				
				ИмяФайла = СформироватьДопДокумент(СтруктураОбмена, ИспользуемаяСтрока.ФорматФайла);
			КонецЕсли;
			МассивФайловДляОтправки.Добавить(ИмяФайла);
		КонецЦикла;
		ПолноеИмяФайла = СформироватьЗипАрхивФайлов(СтруктураОбмена.ПолноеИмяФайла, МассивФайловДляОтправки);
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

// Функция формирует электронные документы и помещает их в справочник присоединенных файлов
//
// Параметры:
//  МассивОбъектов - массив ссылок на объекты, к которым надо создать электронный документ;
//  СоответствиеПараметров - соответствие, содержащая настройки обмена ЭД для объектов.
//
Функция СформироватьПрисоединенныеФайлы(МассивОбъектов, ПараметрыОбмена, ДопПараметры = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена, ДопПараметры);
	МассивСформированныхФайлов = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		ПолноеИмяФайла = ПолучитьПолноеИмяФайлаЭД(СтруктураОбмена);
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяСозданияЭД = СтруктураОбмена.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураОбмена.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураОбмена.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецЭД, Файл.ИмяБезРасширения , СтрЗаменить(Файл.Расширение, ".", ""),
			ВремяСозданияЭД, ВремяСозданияЭД, АдресФайла, Неопределено, , "ЭДПрисоединенныеФайлы", УникальныйИдентификаторЭД);
		
		УдалитьФайлы(Файл.Путь);
		
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл)
			ИЛИ (СтруктураОбмена.Свойство("ПолноеИмяДопФайла")
			И НЕ СоздатьПрисоединенныйДопФайл(СтруктураОбмена, ДобавленныйФайл))Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("УникальныйИД", Строка(ДобавленныйФайл.УникальныйИдентификатор()));
		
		Если СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
		Иначе
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
		ДатаФормированияЭДОтправителем = "";
		Если НЕ СтруктураОбмена.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
			ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
		КонецЕсли;
		СтруктураОбмена.СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		
		ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбмена.СтруктураЭД);
		УстановитьСсылкуДляВладельцаВРегистреСостояний(ВладелецЭД, ДобавленныйФайл);
		МассивСформированныхФайлов.Добавить(ДобавленныйФайл);
		
	КонецЦикла;
	
	Возврат МассивСформированныхФайлов;
	
КонецФункции

Функция ПолучитьСтруктуруФайла(Строка)
	
	ИмяФайла = КорректноеИмяФайла(Строка, Истина);
	Файл = Новый Файл(ИмяФайла);
	
	Возврат Новый Структура("ИмяБезРасширения, Расширение", Файл.ИмяБезРасширения, СтрЗаменить(Файл.Расширение, ".",""));
	
КонецФункции

Функция СформироватьХМЛФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "")
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ЭлектронныеДокументыВызовСервераСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры);
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

Функция СоздатьПрисоединенныйДопФайл(СтруктураПараметров, ЭДВладелец)
	
	ДопЭДСоздан = Ложь;
	ПолноеИмяФайла = СтруктураПараметров.ПолноеИмяДопФайла;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		
		ВремяСозданияЭД = СтруктураПараметров.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураПараметров.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураПараметров.Свойство("ИдентификаторДопФайла", УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецЭД, Файл.ИмяБезРасширения , СтрЗаменить(Файл.Расширение, ".", ""),
			ВремяСозданияЭД, ВремяСозданияЭД, АдресФайла, Неопределено, , "ЭДПрисоединенныеФайлы", УникальныйИдентификаторЭД);
		
		УдалитьФайлы(ПолноеИмяФайла);
		Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ДопЭДСоздан = Истина;
			ВспомСтруктура = Новый Структура;
			ВспомСтруктура.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
			ВспомСтруктура.Вставить("Контрагент", СтруктураПараметров.СтруктураЭД.Контрагент);
			ВспомСтруктура.Вставить("ВладелецЭД", ВладелецЭД);
			ВспомСтруктура.Вставить("СоглашениеЭД", СтруктураПараметров.СтруктураЭД.СоглашениеЭД);
			ВспомСтруктура.Вставить("УникальныйИД", Строка(ДобавленныйФайл.УникальныйИдентификатор()));
			ВспомСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ВспомСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
			ВспомСтруктура.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
			
			ДатаФормированияЭДОтправителем = "";
			Если НЕ СтруктураПараметров.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
				ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
			КонецЕсли;
			СтруктураПараметров.СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
			
			ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, ВспомСтруктура);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДопЭДСоздан;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка сообщений с ЭЦП

// Отправляет письмо с вложениями по пакету ЭД.
//
// Параметры:
//  Конверт - Ссылка на документ "ПакетЭД" - подготовленный к отправке пакет электронных документов,
//  СоответствиеВложений - Соответствие, список вложенных файлов в пакет электронных документов.
//
Функция ПередатьПисьмоСВложениями(ПакетЭД, СоответствиеВложений)
	
	Получатель = ПакетЭД.Получатель;
	Отправитель = ПакетЭД.Отправитель;
	
	ПараметрыОтправки = Новый Структура("Кому, Тема, Тело, Вложения, Пароль",
		ПакетЭД.АдресРесурсаКонтрагента, СформироватьТемуПисьма(Отправитель, Получатель), , СоответствиеВложений,
		ПакетЭД.АдресРесурсаОрганизации.Пароль);
	
	РаботаСПочтовымиСообщениями.ОтправитьСообщение(ПакетЭД.АдресРесурсаОрганизации, ПараметрыОтправки);
	
	Возврат 1;
	
КонецФункции

Функция СоздатьТекстОписиЭД(ЦентрОбменаЭД, УчастникОбменаЭД, Конверт, СоответствиеВложений, СоответствиеФайлЭД, ЭтоПроизвольныйДокумент)
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Идентификатор документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.УникальныйИдентификатор()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	// Дата получения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Отправитель");
	ЗаписьХМЛ.ЗаписатьТекст(ЦентрОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Получатель");
	ЗаписьХМЛ.ЗаписатьТекст(УчастникОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Текст произвольного документа
	Если ЭтоПроизвольныйДокумент Тогда 
		Текст = Конверт.ЭлектронныеДокументы[0].ЭлектронныйДокумент.ВладелецФайла.Текст;
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Текст");
		ЗаписьХМЛ.ЗаписатьТекст(Текст);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
	// Шифрование по документам
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НастройкиШифрования");
	Для Каждого ВложениеДокумент Из Конверт.ЭлектронныеДокументы Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументШифрования");
		ЗаписьХМЛ.ЗаписатьТекст(Строка(ВложениеДокумент.ЭлектронныйДокумент));
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Зашифрован");
		Если ВложениеДокумент.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьТекст("Да");
		Иначе
			ЗаписьХМЛ.ЗаписатьТекст("Нет");
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
		Если ВложениеДокумент.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СертификатШифрования");
			ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.СертификатШифрования));
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументыИПодписи");
	Для Каждого Вложение Из СоответствиеВложений Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьХМЛ.ЗаписатьТекст(Вложение.Ключ);
		
		НомерЭД = СоответствиеФайлЭД.Получить(Вложение.Ключ);
		Если Не НомерЭД=Неопределено Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НомерЭД");
			ЗаписьХМЛ.ЗаписатьТекст(НомерЭД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Для Каждого Подпись Из Вложение.Значение Цикл
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подпись");
			ЗаписьХМЛ.ЗаписатьТекст(Подпись);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение почты

Процедура ОбработатьПодтверждениеПолучения(Сообщение, ЭтоФайл = Ложь)
	
	Если ЭтоФайл Тогда
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(Сообщение.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
			КонецЕсли;
			Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
			КонецЕсли;
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();
		
		Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
			И ДатаПолучения <> Дата('00010101') Тогда
			ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
		КонецЕсли;
		УдалитьФайлы(Сообщение.ПолноеИмя);
	Иначе
		Если Найти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") > 0 Тогда
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеПодтверждения = Вложение.Значение;
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
				ДвоичныеДанныеПодтверждения.Записать(ИмяФайла);
				
				ЧтениеХМЛ = Новый ЧтениеXML;
				ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
				Пока ЧтениеХМЛ.Прочитать() Цикл
					Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
					КонецЕсли;
					Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
					И ДатаПолучения <> Дата('00010101') Тогда
					
					ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьПодтверждениеПоПакету(ПакетЭД, РесурсОтправителя, АдресОтправителя, ТипОтправки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла",ПакетЭД));
	Если ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Тогда
		Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			Если ПакетЭД.Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
			Иначе
				ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
				ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
				СоответствиеВложений = Новый Соответствие;
				СоответствиеВложений.Вставить(ФайлХМЛ.Имя, Новый ДвоичныеДанные(ФайлХМЛ.ПолноеИмя));
				
				ПараметрыОтправки = Новый Структура("Кому, Тема, Тело, Вложения, Пароль", АдресОтправителя,
					"Подтверждение получения пакета электронных документов: " + ИмяПакетаЭД, , СоответствиеВложений, РесурсОтправителя.Пароль);
				РаботаСПочтовымиСообщениями.ОтправитьСообщение(РесурсОтправителя, ПараметрыОтправки);
				
				УдалитьФайлы(ФайлХМЛ);
			КонецЕсли;
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда	
		Иначе
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			АдресКаталога = АдресОтправителя + ?(Прав(АдресОтправителя,1) <> "\", "\", "");
			КопироватьФайл(ФайлХМЛ.ПолноеИмя, АдресКаталога + ФайлХМЛ.Имя);
			УдалитьФайлы(ФайлХМЛ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, НовыйСтатусПакетаЭД, ДатаИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				ЗаписатьДатуПолучения(Документ.ЭлектронныйДокумент, ДатаИзменения);
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ЗаписатьДатуОтправки(Документ.ЭлектронныйДокумент, ДатаИзменения);
			КонецЕсли;
			ОбновитьВерсиюЭД(Документ.ЭлектронныйДокумент);
		КонецЦикла;
		Если ТипЗнч(Документ.ОбъектВладелец)=Тип("ДокументСсылка.ПроизвольныйЭД")
			И (НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен
			ИЛИ НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен) Тогда
			
			Объект = Документ.ОбъектВладелец.ПолучитьОбъект();
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, Документ.ОбъектВладелец);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, Документ.ОбъектВладелец);
				КонецЕсли;
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, Документ.ОбъектВладелец);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, Документ.ОбъектВладелец);
				КонецЕсли;
			КонецЕсли;
			Объект.Записать();
		КонецЕсли;
		
		ПакетОбъект = ПакетЭД.ПолучитьОбъект();
		ПакетОбъект.СтатусПакета = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'смена статуса пакета ЭД и обновление статусов ЭД'"),
			ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьФайлПодтвержденияОператора(ИмяФайла)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
	
	ИдентификаторЭлектронногоДокумента = "";
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			ЧтениеХМЛ.Прочитать();
			ИдентификаторЭлектронногоДокумента = ЧтениеХМЛ.Значение;
		КонецЕсли;
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ИДПодтверждения" Тогда
			ЧтениеХМЛ.Прочитать();
			ИдентификаторПодтверждения = ЧтениеХМЛ.Значение;
		КонецЕсли;
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Направление" Тогда
			ЧтениеХМЛ.Прочитать();
			НаправлениеДокумента = Перечисления.НаправленияЭД[ЧтениеХМЛ.Значение];
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеХМЛ.Закрыть();
	
	Если Не ПустаяСтрока(ИдентификаторЭлектронногоДокумента) Тогда
		СтруктураВладельцев = ДобавитьПодтверждениеКЭлектроннымДокументамРодителя(
			ИмяФайла, ИдентификаторЭлектронногоДокумента, НаправлениеДокумента);
		СформироватьИзвещениеПоПодтверждению(ИдентификаторПодтверждения, СтруктураВладельцев);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьИзвещениеПоПодтверждению(ИдентификаторПодтверждения, СтруктураВладельцев)
	
	Если НЕ ЗначениеЗаполнено(СтруктураВладельцев) ИЛИ  СтруктураВладельцев.Владелец = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючУникальности = Новый УникальныйИдентификатор;
	АдресКаталога = РабочийКаталог( ,КлючУникальности);
	ИмяФайлаИзвещения = АдресКаталога + "Извещение.xml";
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайлаИзвещения);
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");

	// Идентификатор подтверждения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ИДПодтверждения");
	ЗаписьХМЛ.ЗаписатьТекст(ИдентификаторПодтверждения);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();

	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаИзвещения));
	
	УдалитьФайлы(АдресКаталога);
	
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СтруктураВладельцев.Владелец, "ИзвещениеОператору", "xml",
		ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВоВременномХранилище, Неопределено, , "ЭДПрисоединенныеФайлы");
		
	НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Сформирован, ДобавленныйФайл);
	СтруктураИзвещения = Новый Структура("ВидЭД, Контрагент, ВладелецЭД, НаправлениеЭД, СтатусЭД, НомерЭД, ЭлектронныйДокументВладелец",
		Перечисления.ВидыЭД.ИзвещениеОПолучении, СтруктураВладельцев.Владелец.Контрагент, СтруктураВладельцев.Владелец,
		Перечисления.НаправленияЭД.Исходящий, НовыйСтатусЭД, ДобавленныйФайл.УникальныйИдентификатор(),
		СтруктураВладельцев.ЭлектронныйДокументВладелец);
	
	ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураИзвещения);
	ОбновитьВерсиюЭД(СтруктураВладельцев.ЭлектронныйДокументВладелец);
	
КонецПроцедуры

// Выполняет получение новых электронных документов
// на основе заведенных соглашений об обмене.
//
Функция ПолучитьНовыеЭД(СоответствиеПаролейДляЭДО = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура("ПараметрыРаспаковки, МассивВозврата, ВызватьОповещение",
		Новый Массив, Неопределено, Ложь);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоглашениеОбИспользованииЭД.АдресРесурсаОрганизации,
	|	СоглашениеОбИспользованииЭД.СпособОбменаЭД
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашениеОбИспользованииЭД.ПометкаУдаления
	|	И СоглашениеОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ СоглашениеОбИспользованииЭД.ЭтоТиповое
	|	И НЕ СоглашениеОбИспользованииЭД.ЭтоИнтеркампани";
	
	РесурсыДляПроверки = Запрос.Выполнить().Выгрузить();
	
	ОтборЭП = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	МассивРесурсовЭП = РесурсыДляПроверки.НайтиСтроки(ОтборЭП);
	
	Для Каждого СтрокаРесурсовЭП Из МассивРесурсовЭП Цикл
		Если ПустаяСтрока(СтрокаРесурсовЭП.АдресРесурсаОрганизации) Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗаписьЭП = СтрокаРесурсовЭП.АдресРесурсаОрганизации;
		НаборСообщений = Новый Массив();
		Попытка
			НаборСообщений = ЭлектроннаяПочта.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьЭП);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при получении сообщения с сервера электронной почты.
			|%1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
			
			ТекстСообщения = НСтр("ru = 'Ошибка при получении новых эл.документов.
			|(подробности см. в Журнале регистрации).'");
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Получение новых эл.документов'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
		
		Для Каждого Сообщение Из НаборСообщений Цикл
			СтруктураПараметров = Новый Структура;
			Если НЕ НеобходимоПолучить(Сообщение, СтруктураПараметров) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") Тогда
				ОбработатьПодтверждениеПолучения(Сообщение);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			ИначеЕсли СтрокаРесурсовЭП.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				И Найти(Сообщение.Тема, "Подтверждение оператора") Тогда
				ОбработатьПодтверждениеОператора(Сообщение);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			СтруктураПараметров.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			Для Каждого ЭлементВложенийПисьма Из Сообщение.Вложения Цикл
				ДвоичныеДанныеЭлемента = ЭлементВложенийПисьма.Значение;
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
				ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка, Лев(ЭлементВложенийПисьма.Ключ,
					СтрДлина(ЭлементВложенийПисьма.Ключ) -4), Прав(ЭлементВложенийПисьма.Ключ, 3), ТекущаяДатаСеанса(),
					ТекущаяДатаСеанса(), АдресВХранилище, , , "ЭДПрисоединенныеФайлы");
				
				МассивВозврата.Добавить(ПрисоединенныйФайл);
			КонецЦикла;
			ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, УчетнаяЗаписьЭП, Сообщение.Отправитель,
				Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			ПарольКСертификату = СохраненныйПарольКСертификату(СтруктураПараметров.Соглашение.СертификатОрганизацииДляРасшифровки);
			
			СтруктураШифрования = Новый Структура;
			СтруктураШифрования.Вставить("ПарольДоступа", ПарольКСертификату);
			СтруктураШифрования.Вставить("Зашифрован",    СтруктураПараметров.Зашифрован);
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			СтруктураРаспаковки.Вставить("ПакетЭД",             ПакетЭД.Ссылка);
			СтруктураРаспаковки.Вставить("Распаковывать", (Не СтруктураПараметров.Зашифрован ИЛИ СтруктураПараметров.Зашифрован
				И ПарольКСертификату <> Неопределено));
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
	КонецЦикла;
	
	ОтборКаталог = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	МассивРесурсовКаталоги = РесурсыДляПроверки.НайтиСтроки(ОтборКаталог);
	Для Каждого СтрокаРесурсовКаталог Из МассивРесурсовКаталоги Цикл
		КаталогСФайлами = СтрокаРесурсовКаталог.АдресРесурсаОрганизации;
		МассивИменФайлов = Новый Массив;
		МассивФайлов = НайтиФайлы(КаталогСФайлами, "*");
		Для Каждого ЭлементФайл Из МассивФайлов Цикл
			Если ЭлементФайл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			СтруктураПараметров = Новый Структура;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлы(ЭлементФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			СтруктураПараметров.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка, Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4),
				Прав(ЭлементФайл.Имя, 3), ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВХранилище, , , "ЭДПрисоединенныеФайлы");
			
			МассивВозврата.Добавить(ПрисоединенныйФайл);
			ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, СтрокаРесурсовКаталог, СтруктураПараметров.АдресОтправителя,
				Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			УдалитьФайлы(ЭлементФайл.ПолноеИмя);
			
			ПарольКСертификату = СохраненныйПарольКСертификату(СтруктураПараметров.Соглашение.СертификатОрганизацииДляРасшифровки);
			
			СтруктураШифрования = Новый Структура;
			СтруктураШифрования.Вставить("ПарольДоступа", ПарольКСертификату);
			СтруктураШифрования.Вставить("Зашифрован",    СтруктураПараметров.Зашифрован);
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД",             ПакетЭД.Ссылка);
			СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			СтруктураРаспаковки.Вставить("Распаковывать", (Не СтруктураПараметров.Зашифрован ИЛИ СтруктураПараметров.Зашифрован
				И ПарольКСертификату <> Неопределено));
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураВозврата.МассивВозврата = МассивВозврата;
	
	ОтборСпецОператоров = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	МассивРесурсовСпецОператоров = РесурсыДляПроверки.НайтиСтроки(ОтборСпецОператоров);
	
	Если МассивРесурсовСпецОператоров.Количество() > 0 Тогда
		ЭлектронныеДокументыОператорыЭДО.ПолучитьНовыеЭДОператораЭДО(СтруктураВозврата, СоответствиеПаролейДляЭДО);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД)
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	// Корневой элемент
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подтверждение");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ЭлектронныйДокумент");
	ЗаписьХМЛ.ЗаписатьТекст(ИмяПакетаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаПолучения");
	ТекДата = ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса());
	ЗаписьХМЛ.ЗаписатьТекст(ТекДата);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат Новый Файл(ИмяФайла);
	
КонецФункции

Функция НеобходимоПолучить(Сообщение, СтруктураПараметров)
	
	Если Сообщение.Вложения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сообщение.Вложения.Количество() = 1 Тогда 
	
		Если Найти(Сообщение.Тема, "Подтверждение") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Найти(Сообщение.Тема, "Обмен эл.документами:") Тогда
			
			Для Каждого Вложение ИЗ Сообщение.Вложения Цикл
				ДвоичныеДанныеВложения = Вложение.Значение;
			КонецЦикла;
		
			Результат = НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеВложения, Вложение.Ключ, СтруктураПараметров);
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанные, ИмяФайла, СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим из файла вложений идентификаторы отправителя и получателя
	// и сохраним файл на диск
	ИмяВременногоФайлаЗИП = ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
	
	ЗИПЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
	КлючУникальности = Новый УникальныйИдентификатор();
	ПапкаДляРаспаковки = РабочийКаталог("ВходящийПакет", КлючУникальности);
	ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
	
	РаспакованныеФайлы = НайтиФайлы(ПапкаДляРаспаковки, "*");
	
	ФайлИнформации = Неопределено;
	Для Каждого ТекФайл Из РаспакованныеФайлы Цикл
		Если Найти(ТекФайл.Имя, "packageDescription") > 0  Тогда
			ФайлИнформации = ТекФайл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НастройкиСоглашения = Неопределено;
	Если НЕ ФайлИнформации = Неопределено Тогда
		// Определим в этом файле строку с отправителем и получателем
		// и признак шифрования и попытаемся найти соглашение
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		Зашифрован = Ложь;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Отправитель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДОтправителя = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеХМЛ.Прочитать();
				Зашифрован = Зашифрован ИЛИ Булево(ЧтениеХМЛ.Значение);
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Получатель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДПолучателя = ЧтениеХМЛ.Значение;
			КонецЕсли;
				
		КонецЦикла;
		
		ЧтениеХМЛ.Закрыть();
		НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
	КонецЕсли;
	
	Если ФайлИнформации = Неопределено ИЛИ НастройкиСоглашения = Неопределено Тогда // не нашли файл описанием или нет обмена
		УдалитьФайлы(ИмяВременногоФайлаЗИП);
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	// Теперь проверим, что такого транспортного пакета от этого отправителя еще не было
	ИмяПакета = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4);
	
	ЗапросПрисоединенногоФайла = Новый Запрос;
	ЗапросПрисоединенногоФайла.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПрисоединенныйФайл
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Направление = &Направление
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Получатель ПОДОБНО &Получатель
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Отправитель ПОДОБНО &Отправитель
	|	И ЭДПрисоединенныеФайлы.Наименование ПОДОБНО &Наименование
	|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Направление",  Перечисления.НаправленияЭД.Входящий);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Получатель",   ИДПолучателя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Отправитель",  ИДОтправителя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Наименование", ИмяПакета);
	
	РезультатПустой = ЗапросПрисоединенногоФайла.Выполнить().Пустой();
	
	УдалитьФайлы(ИмяВременногоФайлаЗИП);
	УдалитьФайлы(ПапкаДляРаспаковки);
	
	Если РезультатПустой Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Получатель",       ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",      ИДОтправителя);
		СтруктураПараметров.Вставить("Организация",      НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",       НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("Соглашение",       НастройкиСоглашения.Основание);
		СтруктураПараметров.Вставить("АдресОтправителя", НастройкиСоглашения.АдресОтправителя);
		СтруктураПараметров.Вставить("АдресПолучателя",  НастройкиСоглашения.АдресПолучателя);
		СтруктураПараметров.Вставить("Зашифрован",       Зашифрован);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьПодтверждаемыйПакетЭД(ПредставлениеПакета)
	
	СтрокаИдентификатора = СтрЗаменить(ПредставлениеПакета, "EDI_", "");
	Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора);
	ДокументПакет = Документы.ПакетЭД.ПолучитьСсылку(Идентификатор);
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументПакет) Тогда
		ДокументПакет = Неопределено;
	КонецЕсли;
	
	Возврат ДокументПакет;
	
КонецФункции

Функция ОбработатьПодтверждениеОператора(Сообщение)
	
	Для Каждого ПрисланноеПодтверждение Из Сообщение.Вложения Цикл
		ДвоичныеДанныеПодтверждения = ПрисланноеПодтверждение.Значение;
		ФайлПодтверждения = СохранитьДвоичныеДанныеНаЛокальныйДиск(ДвоичныеДанныеПодтверждения);
		ОбработатьФайлПодтвержденияОператора(ФайлПодтверждения);
	КонецЦикла;
	
КонецФункции

Функция СохранитьДвоичныеДанныеНаЛокальныйДиск(ДвоичныеДанные)
	
	// Добавить механизм по проверке подписей оператора.
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	Возврат ИмяФайла;
	
КонецФункции

Функция УжеЕстьДанноеПодтверждение(ЭлектронныйДокумент, ИмяФайлаПодтверждения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПодтверждений = Новый Запрос;
	ЗапросПодтверждений.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПодтверждение
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|	И ЭДПрисоединенныеФайлы.Наименование ПОДОБНО &Наименование
	|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	ЗапросПодтверждений.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭлектронныйДокумент);
	ФайлПодтверждения = Новый Файл(ИмяФайлаПодтверждения);
	ЗапросПодтверждений.УстановитьПараметр("Наименование", "%" + ФайлПодтверждения.ИмяБезРасширения + "%");
	
	Возврат ЗапросПодтверждений.Выполнить().Пустой();
	
КонецФункции

Функция ДобавитьПодтверждениеКЭлектроннымДокументамРодителя(ИмяФайлаПодтверждения, НомерЭД, НаправлениеДокумента, ЭтоИзвещение = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерЭДПоиска = Сред(Лев(НомерЭД, Найти(НомерЭД, "##") - 1), Найти(НомерЭД, "#") + 1);
	ПараметрыПоиска = Новый Структура("ВидЭД, НаправлениеЭД, НомерЭД", Перечисления.ВидыЭД.ТОРГ12, НаправлениеДокумента, НомерЭД);
	Владелец = ОпределитьОбъектПривязки(ПараметрыПоиска);
	Если Владелец = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаЭД = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ПометкаУдаления, НомерЭД, ВладелецФайла", Ложь, НомерЭД, Владелец));
	Если НЕ ЗначениеЗаполнено(ВыборкаЭД) ИЛИ НЕ ВыборкаЭД.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлектронныйДокументВладелец = ВыборкаЭД.Ссылка;
	Если УжеЕстьДанноеПодтверждение(ЭлектронныйДокументВладелец, ?(ЭтоИзвещение, "ИзвещениеОтКонтрагента", "ПодтверждениеОператора")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлектронныйДокументВладелецОбъект = ЭлектронныйДокументВладелец.ПолучитьОбъект();
	ЭлектронныйДокументВладелецОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
	ЭлектронныйДокументВладелецОбъект.СтатусЭД = ПолучитьДопустимыйСтатусЭД(?(ЭтоИзвещение, Перечисления.СтатусыЭД.ПолученоИзвещение,
		Перечисления.СтатусыЭД.ПолученоПодтверждение), ЭлектронныйДокументВладелец);
	ЭлектронныйДокументВладелецОбъект.Записать();
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаПодтверждения));
	
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(Владелец, ?(ЭтоИзвещение, "ИзвещениеОтКонтрагента", "ПодтверждениеОператора"),
		"xml", ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВоВременномХранилище, Неопределено, ,"ЭДПрисоединенныеФайлы");
	
	НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Получен, ДобавленныйФайл);
	СтруктураПодтверждения = Новый Структура("ВидЭД, Контрагент, ВладелецЭД, НаправлениеЭД, СтатусЭД, НомерЭД, ЭлектронныйДокументВладелец",
		?(ЭтоИзвещение, Перечисления.ВидыЭД.ИзвещениеОПолучении, Перечисления.ВидыЭД.Подтверждение), Владелец.Контрагент,
		Владелец, Перечисления.НаправленияЭД.Входящий, НовыйСтатусЭД, ДобавленныйФайл.УникальныйИдентификатор(),
		ЭлектронныйДокументВладелец);
		
	ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПодтверждения);
		
	Возврат Новый Структура("Владелец, ЭлектронныйДокументВладелец", Владелец, ЭлектронныйДокументВладелец);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

// Обновляет статусы электронных документов.
//
// Параметры: 
//  МассивДокументов - массив ссылок на электронные документы, состояние которых надо обновить,
//  ПризнакПодписи - булево, признак того, что документы подписаны ЭЦП.
//
Процедура ОбновитьСтатусыЭД(МассивДокументов, ПризнакПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлектронныйДокумент Из МассивДокументов Цикл
		Если (ПризнакПодписи И ЭлектронныйДокумент.СтатусЭД <> Перечисления.СтатусыЭД.Подписан)
			ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
			И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
			ИЛИ ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			
			Если ДокументОбъект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ДокументОбъект.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленКОтправке,
					ЭлектронныйДокумент);
			Иначе
				ДокументОбъект.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленоПодтверждение,
					ЭлектронныйДокумент);
			КонецЕсли;
			
			ДокументОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
			ДокументОбъект.Записать();
			
			ПринудительнаяСменаСостояния = Ложь;
			Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				
				ПринудительнаяСменаСостояния = Истина;
			КонецЕсли;
			
			ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостояния);
		Исключение
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'подготовка к отправке ЭД'"), ТекстОшибки,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак шифрования пакету электронных документов.
//
// Параметры:
//  СсылкаНаПакетЭД - Ссылка на пакет электронных документов, которому необходимо установить признак шифрования,
//  ПараметрыШифрования - Структура, параметры шифрования для данного пакета электронных документов.
//
Процедура ДобавитьПризнакШифрованияПакетуЭД(СсылкаНаПакетЭД, ПрисоединенныйФайл, ПараметрыШифрования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭДОбъект = СсылкаНаПакетЭД.ПолучитьОбъект();
		Для Каждого Сертификат Из ПараметрыШифрования Цикл
			СертификатКриптографии = Новый СертификатКриптографии(ПолучитьИзВременногоХранилища(Сертификат));
			ПакетЭДОбъект.СертификатШифрования = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
				СертификатКриптографии.Субъект);
			ПараметрыПоиска = Новый Структура("ЭлектронныйДокумент", ПрисоединенныйФайл);
			СтрокиТЧПакета = ПакетЭДОбъект.ЭлектронныеДокументы.НайтиСтроки(ПараметрыПоиска);
			Для Каждого СтрокаТЧПакета Из СтрокиТЧПакета Цикл
				СтрокаТЧПакета.ДанныеЗашифрованы = Истина;
				СтрокаТЧПакета.СертификатШифрования = ПакетЭДОбъект.СертификатШифрования;
			КонецЦикла;
		КонецЦикла;
		ПакетЭДОбъект.ДанныеЗашифрованы = Истина;
		ПакетЭДОбъект.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка признака шифрования пакету ЭД'"),
			ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Получает адрес сертификата шифрования во временном хранилище данных.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на электронный документ, адрес сертификата шифрования по которому необходимо получить.
//
Функция ПолучитьМассивАдресовСертификатовШифрования(ПрисоединенныйФайл)
	
	ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ПрисоединенныйФайл.ВладелецФайла, , , ПрисоединенныйФайл);
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения)
		ИЛИ ПараметрыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	СертификатКонтрагентаШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования;
	СертификатОрганизацииШифрования = ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки;
	
	ДвоичныеДанныеСертификата            = СертификатКонтрагентаШифрования.Получить();
	ДвоичныеДанныеСертификатаОрганизации = СертификатОрганизацииШифрования.ФайлСертификата.Получить();
	
	Если ДвоичныеДанныеСертификата = Неопределено ИЛИ ДвоичныеДанныеСертификатаОрганизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
	АдресСертификатаОрганизации = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаОрганизации);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(АдресСертификата);
	МассивВозврата.Добавить(АдресСертификатаОрганизации);
	
	Возврат МассивВозврата;
	
КонецФункции

Функция НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыСоглашения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		// Через ОЭДО пакеты формируем с одним вложенным ЭД.
		НайденнаяСтрока = Неопределено;
	Иначе
		НайденнаяСтрока = ТЗ_ПЭД.Найти(ПараметрыСоглашения.СоглашениеЭД, "Соглашение");
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		ПЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПЭД.Дата                    = ТекущаяДатаСеанса();
		ПЭД.Отправитель             = ПараметрыСоглашения.ИдентификаторОрганизации;
		ПЭД.Получатель              = ПараметрыСоглашения.ИдентификаторКонтрагента;
		
		ПЭД.СтатусПакета            = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
		ПЭД.Направление             = Перечисления.НаправленияЭД.Исходящий;
		
		ПЭД.СпособОбменаЭД          = ПараметрыСоглашения.СпособОбменаЭД;
		ПЭД.АдресРесурсаКонтрагента = ПараметрыСоглашения.АдресРесурсаКонтрагента;
		ПЭД.АдресРесурсаОрганизации = ПараметрыСоглашения.АдресРесурсаОрганизации;
		ПЭД.Соглашение              = ПараметрыСоглашения.СоглашениеЭД;
		ПЭД.Контрагент              = ПараметрыСоглашения.Контрагент;
		ПЭД.Организация             = ПараметрыСоглашения.Организация;
		ПЭД.Записать();
		
		НовСтрока              = ТЗ_ПЭД.Добавить();
		НовСтрока.ПЭД          = ПЭД.Ссылка;
		НовСтрока.Соглашение   = ПараметрыСоглашения.СоглашениеЭД;
		НовСтрока.АдресРесурса = ПараметрыСоглашения.АдресРесурсаКонтрагента;
	Иначе
		ПЭД = НайденнаяСтрока.ПЭД.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ПЭД;
	
КонецФункции

Функция ПолучитьЭлектронныеДокументыКонвертов(Конверт)
	
	Возврат Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

Процедура ДобавитьМассив(МассивПриемник, МассивИсточник)
	
	Если ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЭлементИсточник)
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара И СтруктураФайлаЭД.ПризнакПродавца Тогда
		Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Функция НайтиСтруктуруВПараметрах(ИмяПоиска, ПараметрыШифрования)
	
	Если ТипЗнч(ПараметрыШифрования) = Тип("Массив") Тогда
		Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
			Если СокрЛП(ИмяПоиска) = СокрЛП(СтруктураШифрования.Документ) Тогда
				Возврат СтруктураШифрования;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьОбъектПривязки(СтруктураПараметровДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		Возврат СтруктураПараметровДокумента.ВладелецЭД;
	ИначеЕсли СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		
		ЭДВладелецСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(
			Новый УникальныйИдентификатор(СтруктураПараметровДокумента.ИдЭДВладельца));
		Если ЭДВладелецСсылка.ПолучитьОбъект() <> Неопределено Тогда
			СтруктураПараметровДокумента.Вставить("ЭлектронныйДокументВладелец", ЭДВладелецСсылка);
			Возврат ЭДВладелецСсылка.ВладелецФайла;
		КонецЕсли;
	ИначеЕсли СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
		|	И ЭДПрисоединенныеФайлы.Организация = &Организация
		|	И ЭДПрисоединенныеФайлы.Контрагент = &Контрагент
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
		|	И ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя = &ДатаДокументаОтправителя
		|	И ЭДПрисоединенныеФайлы.НомерДокументаОтправителя = &НомерДокументаОтправителя";
		Запрос.УстановитьПараметр("ВидЭД",                     СтруктураПараметровДокумента.ВидЭД);
		Запрос.УстановитьПараметр("ДатаДокументаОтправителя",  СтруктураПараметровДокумента.ДатаДокументаОтправителя);
		Запрос.УстановитьПараметр("Контрагент",                СтруктураПараметровДокумента.Контрагент);
		Запрос.УстановитьПараметр("НаправлениеЭД",             СтруктураПараметровДокумента.НаправлениеЭД);
		Запрос.УстановитьПараметр("НомерДокументаОтправителя", СтруктураПараметровДокумента.НомерДокументаОтправителя);
		Запрос.УстановитьПараметр("Организация",               СтруктураПараметровДокумента.Организация);

		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ПозПодстроки = Найти(СтруктураПараметровДокумента.НомерЭД, "##") - 1;
	Если ПозПодстроки > 0 Тогда
		ЭлектронныйНомерДокумента = Лев(СтруктураПараметровДокумента.НомерЭД, ПозПодстроки);
	Иначе
		ЭлектронныйНомерДокумента = СтруктураПараметровДокумента.НомерЭД;
	КонецЕсли;
	
	ЗапросДокументовОснований = Новый Запрос;
	ЗапросДокументовОснований.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	(НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД)
	|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &Параметр
	|	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
	ЗапросДокументовОснований.УстановитьПараметр("НаправлениеЭД", СтруктураПараметровДокумента.НаправлениеЭД);
	ЗапросДокументовОснований.УстановитьПараметр("Параметр",      ЭлектронныйНомерДокумента + "%");
	ЗапросДокументовОснований.УстановитьПараметр("ВидЭД",         СтруктураПараметровДокумента.ВидЭд);
	
	НайденныеДокументы = ЗапросДокументовОснований.Выполнить().Выбрать();
	Если НайденныеДокументы.Следующий() Тогда
		Возврат НайденныеДокументы.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЕстьТакаяПодпись(ДвоичныеДанныеПроверки, ЭлектронныйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодписьДокумента Из ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи Цикл
		ДвоичныеДанныеПодписи = ПодписьДокумента.Подпись.Получить();
		Если ДвоичныеДанныеПодписи = ДвоичныеДанныеПроверки Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСоответствиеФайлПараметры(ФайлИнформации)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
	
	ПредставлениеДокумента = "";
	ПредставленияПодписей = Новый Массив;
	НашлиДокумент = Ложь;
	СоответствиеВозврата = Новый Соответствие;
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Параметры = Новый Структура;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Текст" Тогда
			ЧтениеХМЛ.Прочитать();
			СоответствиеВозврата.Вставить("Текст", ЧтениеХМЛ.Значение);
		КонецЕсли;

		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			ПредставлениеДокумента = "";
			ПредставленияПодписей.Очистить();
			ЧтениеХМЛ.Прочитать();
			ПредставлениеДокумента = СокрЛП(ЧтениеХМЛ.Значение);
			НашлиДокумент = Истина;
			НомерЭД = "";
		КонецЕсли;
		
		Если НЕ НашлиДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Подпись" Тогда
			ЧтениеХМЛ.Прочитать();
			ПредставленияПодписей.Добавить(СокрЛП(ЧтениеХМЛ.Значение));
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НомерЭД" Тогда
			ЧтениеХМЛ.Прочитать();
			НомерЭД = ЧтениеХМЛ.Значение;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			НашлиДокумент = Ложь;
			НовыйМассив = ПредставленияПодписей;
			СоответствиеВозврата.Вставить(ПредставлениеДокумента, Новый Структура("Подписи, НомерЭД",
				ВернутьМассивПредставленийПодписей(ПредставленияПодписей),НомерЭД));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ВернутьМассивПредставленийПодписей(МассивПредставления)
	
	МассивВозврата = Новый Массив;
	Для Каждого Элемент Из МассивПредставления Цикл
		МассивВозврата.Добавить(Элемент);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ВернутьМассивОтпечатковСтруктуры(СтруктураСертификатов)
	
	МассивВозврата = Новый Массив;
	Для Каждого СтруктураКлиентскогоСертификата Из СтруктураСертификатов Цикл
		МассивВозврата.Добавить(СтруктураКлиентскогоСертификата.Отпечаток);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайлов)
	
	МассивВозврата = Новый Массив;
	Для Каждого ФайлДанных Из МассивФайлов Цикл
		СтруктураМассива = Новый Структура;
		СтруктураМассива.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя));
		СтруктураМассива.Вставить("ИмяФайлаБезРасширения", ФайлДанных.ИмяБезРасширения);
		СтруктураМассива.Вставить("ИмяФайла", ФайлДанных.Имя);	
		МассивВозврата.Добавить(СтруктураМассива);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ПолучитьФайлДанныхДляОбработки(СтруктураДанных, ПапкаДляРасшифровки)
	
	ФайлДанныхОбработан = Ложь;
	Если ЗначениеЗаполнено(ПапкаДляРасшифровки) Тогда
		
		Если НайтиФайлы(ПапкаДляРасшифровки).Количество() = 0 Тогда
			СоздатьКаталог(ПапкаДляРасшифровки);
		КонецЕсли;
			
		Если НайтиФайлы(ПапкаДляРасшифровки).Количество() > 0 Тогда
			
			УдалитьФайлы(ПапкаДляРасшифровки, "*");
			
			ФайлДанных = СтруктураДанных.ДвоичныеДанные;
			Расширение = СтрЗаменить(СтруктураДанных.ИмяФайла, СтруктураДанных.ИмяФайлаБезРасширения, "");
			
			ФайлРасшифрованногоАрхива = ТекущееИмяВременногоФайла(Расширение);
			ФайлДанных.Записать(ФайлРасшифрованногоАрхива);
			
			Если Найти(Расширение, "zip") > 0 Тогда
				ЧтениеЗИП = Новый ЧтениеZIPФайла(ФайлРасшифрованногоАрхива);
				ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРасшифровки);
				ФайлДанныхОбработан = Истина;
			ИначеЕсли Найти(Расширение, "xml") > 0 Тогда
				ФайлДвойчныйДанных = Новый Файл(ФайлРасшифрованногоАрхива);
				КопироватьФайл(ФайлРасшифрованногоАрхива, ПапкаДляРасшифровки + ФайлДвойчныйДанных.Имя);
				ФайлДанныхОбработан = Истина;
			КонецЕсли;
			
			УдалитьФайлы(ФайлРасшифрованногоАрхива);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФайлДанныхОбработан;
	
КонецФункции

Функция ОбработатьИзвещениеОператора(ПакетЭД, СтруктураДанныхПодписей, СтруктураДанных, СоответствиеФайлПараметры)
	
	ДвоичныеДанныеИзвещения = СтруктураДанных.ДвоичныеДанные;
	ИмяФайлаЧтенияХМЛ = ТекущееИмяВременногоФайла("xml");
	ДвоичныеДанныеИзвещения.Записать(ИмяФайлаЧтенияХМЛ);
	ФайлЧтенияХМЛ = Новый Файл(ИмяФайлаЧтенияХМЛ);
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайлаЧтенияХМЛ);
	
	ИдентификаторЭлектронногоДокумента = "";
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ИДПодтверждения" Тогда
			ЧтениеХМЛ.Прочитать();
			ИдентификаторЭлектронногоДокумента = ЧтениеХМЛ.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеХМЛ.Закрыть();
	
	Если Не ПустаяСтрока(ИдентификаторЭлектронногоДокумента) Тогда
		СтруктураВладельцев = ДобавитьПодтверждениеКЭлектроннымДокументамРодителя(ИмяФайлаЧтенияХМЛ,
			ИдентификаторЭлектронногоДокумента, Перечисления.НаправленияЭД.Исходящий, Истина);

	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаЧтенияХМЛ);
	
КонецФункции

Функция ПолучитьИмяФайлаДанныхЭД(СсылкаНаЭД)
	
	ИмяФайлаДанных = "";
	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки = РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
			
			УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
		ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			ИмяФайлаДанных = ИмяФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФайлаДанных;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  ПрисоединенныйФайл - ссылка на электронный документ, который необходимо обработать.
//
Процедура УстановитьПризнакУтвержден(ПрисоединенныйФайл)
	
	// Проверим, все ли необходимые условия выполнены
	Если ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументГотовКУтверждению(ПрисоединенныйФайл) Тогда
		Попытка
			ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ФайлОбъект.СтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Утвержден, ПрисоединенныйФайл);
			ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
			ФайлОбъект.Изменил                = ПользователиСервер.ТекущийПользователь();
			ФайлОбъект.Записать();
			ОбновитьВерсиюЭД(ФайлОбъект.Ссылка);
			ЭлектронныеДокументыПереопределяемый.НазначенСтатусУтвержден(ФайлОбъект.Ссылка);
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	Если ТранзакцияАктивна() И ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И (ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель) Тогда
		
		Если ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			НовыйЭД = ЭлектронныеДокументыФорматОбмена.СформироватьЭДТорг12Покупатель(ПрисоединенныйФайл);
		ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			НовыйЭД = ЭлектронныеДокументыФорматОбмена.СформироватьЭДАкт501Заказчик(ПрисоединенныйФайл);
		КонецЕсли;
		
		Если НовыйЭД = Неопределено Тогда
			ОтменитьТранзакцию();
		Иначе
			МассивЭД = Новый Массив;
			МассивЭД.Добавить(НовыйЭД);
			
			НастройкиОбмена = НастройкиОбменаЭД(НовыйЭД);
			СоздатьДокументыПакетовЭД(МассивЭД, НастройкиОбмена.ИспользоватьПодпись);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (утверждение,
// подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ, 
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеобрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент ИЗ НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
	|				И ИСТИНА)";
	
	ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("СчетФактураВыданныйВМетаданных");
	Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "ИЛИ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ." + ИмяСчетаФактурыВыданного + "
		|				И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
		|					ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
		|					ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен))");
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеобрабатываемыхОбъектов.Добавить(Результат.ЭлектронныйДокумент);
		
		ТекстСообщения = НСтр("ru = 'Обработка %1.
		|Не требуется выполнения действий с электронным документом.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(СсылкаНаЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДействий = Новый Структура("СНашейСтороны, СоСтороныДругогоУчастника",
		Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	Если СсылкаНаЭД <> Неопределено Тогда
		
		Если СсылкаНаЭД.ВидЭД <> Перечисления.ВидыЭД.СчетФактура Тогда
			
			Если СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
				
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
		Иначе
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(СсылкаНаЭД);
			ВыбратьПодчиненныеЭД(МассивЭД, МассивПодчиненныхЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   СсылкаНаЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        СсылкаНаЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ НЕ СтруктураФлагов.ЭСФОтправлен ИЛИ СтруктураФлагов.ПДППолучен И НЕ СтруктураФлагов.ИППДПОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
				ИначеЕсли (СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
					И (НЕ СтруктураФлагов.ПДППолучен ИЛИ НЕ СтруктураФлагов.ИПЭСФПолучен) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			Иначе
				Если СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
				ИначеЕсли СтруктураФлагов.ПДОПолучен И НЕ СтруктураФлагов.ИППДООтправлен
					ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден И НЕ СтруктураФлагов.ИПЭСФОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ НЕ СтруктураФлагов.ПДОПолучен
					ИЛИ СтруктураФлагов.ИПЭСФОтправлен И НЕ СтруктураФлагов.ПДОИППолучен
					ИЛИ СсылкаНаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И НЕ СтруктураФлагов.ИПУУПолучен Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется
		И СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется Тогда
		
		СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

// Определяет необходимость конкретного действия из перечня действий.
//
// Параметры:
//  ПереченьДействий - Строка, перечень действий, которые должны быть совершены с объектом
//  Действие - Строка, конкретное действие, которое нужно найти в перечне действий
// 
// Возвращаемое значение:
//  Булево - Если действие найдено - возвращается Истина, иначе Ложь
//
Функция ЕстьДействие(ПереченьДействий, Действие)
	
	Если Найти(ПереченьДействий, Действие) > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТаблицаПоЭД(СсылкаНаЭД)
	
	РеквизитыЭД = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаЭД, "Ссылка, СтатусЭД, ВидЭД, СоглашениеЭД, ВладелецФайла");
	
	ТЗВозврата = Новый ТаблицаЗначений;
	ТЗВозврата.Колонки.Добавить("СсылкаНаЭД");
	ТЗВозврата.Колонки.Добавить("СтатусЭД");
	ТЗВозврата.Колонки.Добавить("ВидЭД");
	ТЗВозврата.Колонки.Добавить("Соглашение");
	ТЗВозврата.Колонки.Добавить("ВладелецЭД");
	
	НовСтрока = ТЗВозврата.Добавить();
	НовСтрока.СсылкаНаЭД = РеквизитыЭД.Ссылка;
	НовСтрока.СтатусЭД   = РеквизитыЭД.СтатусЭД;
	НовСтрока.ВидЭД      = РеквизитыЭД.ВидЭД;
	НовСтрока.Соглашение = РеквизитыЭД.СоглашениеЭД;
	НовСтрока.ВладелецЭД = РеквизитыЭД.ВладелецФайла;
	
	Возврат ТЗВозврата;
	
КонецФункции

Функция ЭтоОтправкаПодтверждения(ПрисоединенныйФайл)
	
	Возврат ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

Функция ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСводногоСостояния = "";
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СсылкаНаВладельца);
	ТаблицаДанных = ПолучитьДанныеЭДПоВладельцам(МассивСсылок);

	Если ТаблицаДанных.Количество() > 0 Тогда
		Строка = ТаблицаДанных[0];
		
		ТекстСНашейСтороны = "";
		ТекстСоСтороныДругогоУчастника = "";
		
		Если ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
			И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
			
			ТекстСНашейСтороны = НСтр("ru = 'с нашей стороны'");
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
			И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
			
			ТекстСоСтороныДругогоУчастника = НСтр("ru = 'со стороны других участников'");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстСНашейСтороны) ИЛИ ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника) Тогда
			
			ТекстСводногоСостояния = НСтр("ru = 'Требуются действия '") + ТекстСНашейСтороны
				+ ?(ЗначениеЗаполнено(ТекстСНашейСтороны) И ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника), " и ", "")
				+ ТекстСоСтороныДругогоУчастника;
		ИначеЕсли ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
			И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
			И ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
			И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено Тогда
			
			ТекстСводногоСостояния = НСтр("ru = 'Обмен завершен.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСводногоСостояния;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Оповещение пользователя об обработке ЭД

// Выводит сообщение пользователю о нехватки прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа()
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

Процедура СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник)
	
	Если НЕ ЭлектронныеДокументыПереопределяемый.ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = Нстр("ru = 'Обработка %1.
	|Операция не выполнена!
	|Введите действующее ""Соглашение об использовании электронных документов"" с реквизитами:'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	ЭтоСчетФактураВыданный = Ложь;
	Если ПараметрыЭД.Свойство("ЭтоСчетФактураВыданный") И ЗначениеЗаполнено(ПараметрыЭД.ЭтоСчетФактураВыданный) Тогда
		ЭтоСчетФактураВыданный = ПараметрыЭД.ЭтоСчетФактураВыданный;
	КонецЕсли;
		
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Партнер") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
			Порядок = 3;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("НаправлениеЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 4;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 5;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") И ЭтоСчетФактураВыданный Тогда
			Порядок = 0.5;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметров, ТекПараметр);
			Если ЭтоСчетФактураВыданный Тогда
				Если НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") Тогда
					СтрокаПараметров.Ключ = "Способ обмена";
					СтрокаПараметров.Значение = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
				ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
					СтрокаПараметров.Ключ = "Участник";
				КонецЕсли;
			ИначеЕсли ПараметрыЭД.НаправлениеЭД=Перечисления.НаправленияЭД.Интеркампани Тогда
				Если ТекПараметр.Ключ = "Организация" Тогда
					СтрокаПараметров.Ключ = "Организация-отправитель";
				ИначеЕсли ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Организация-получатель";
				КонецЕсли;
			КонецЕсли;
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru = '<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

Функция НастройкиОбменаЭД(СсылкаНаЭД) Экспорт
	
	НастройкиОбмена = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
			РеквизитыЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаЭД);
		Иначе
			РеквизитыЭД = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаЭД, "ВидЭД, НаправлениеЭД, СоглашениеЭД");
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыЭД) Тогда
			
			НастройкиОбмена = Новый Структура;
			НастройкиОбмена.Вставить("СпособОбмена",
				ОбщегоНазначения.ПолучитьЗначениеРеквизита(РеквизитыЭД.СоглашениеЭД, "СпособОбменаЭД"));
			НастройкиОбмена.Вставить("Направление", РеквизитыЭД.НаправлениеЭД);
			НастройкиОбмена.Вставить("ВидЭД", РеквизитыЭД.ВидЭД);
			НастройкиОбмена.Вставить("ИспользоватьПодпись", Истина);
			НастройкиОбмена.Вставить("ИспользоватьКвитанции", Ложь);
			
			Если НастройкиОбмена.СпособОбмена <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				ЗапросПоНастройкам = Новый Запрос;
				ЗапросПоНастройкам.УстановитьПараметр("СоглашениеЭД",  РеквизитыЭД.СоглашениеЭД);
				ЗапросПоНастройкам.УстановитьПараметр("НаправлениеЭД", РеквизитыЭД.НаправлениеЭД);
				ЗапросПоНастройкам.УстановитьПараметр("ВидЭД",         РеквизитыЭД.ВидЭД);
				
				ЗапросПоНастройкам.Текст =
				"ВЫБРАТЬ
				|	Соглашение.ИспользоватьПодпись,
				|	Соглашение.ИспользоватьКвитанции
				|ИЗ
				|	(ВЫБРАТЬ
				|		СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьПодпись,
				|		СоглашенияОбИспользованииЭДВходящиеДокументы.ОжидатьКвитанциюОДоставке КАК ИспользоватьКвитанции,
				|		ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий) КАК НаправлениеЭД
				|	ИЗ
				|		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
				|	ГДЕ
				|		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
				|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &СоглашениеЭД
				|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Формировать
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП,
				|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ОжидатьКвитанциюОДоставке,
				|		ВЫБОР
				|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
				|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
				|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
				|		КОНЕЦ
				|	ИЗ
				|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|	ГДЕ
				|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
				|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
				|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать) КАК Соглашение
				|ГДЕ
				|	Соглашение.НаправлениеЭД = &НаправлениеЭД";
				
				Результат = ЗапросПоНастройкам.Выполнить();
				
				Если НЕ Результат.Пустой() Тогда
					ТЗ = Результат.Выгрузить();
					ЗаполнитьЗначенияСвойств(НастройкиОбмена, ТЗ[0]);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиОбмена;
	
КонецФункции