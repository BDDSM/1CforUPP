////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиентСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Только для внутреннего использования
Функция СоответствиеПаролейКСертификатам(МассивСоглашений = Неопределено) Экспорт
	
	СоответствиеВозврата = Неопределено;
	СписокВыбора = ПолучитьИзВременногоХранилища(ЭлектронныеДокументыСлужебный.РезультатЗапросаПоСертификатам(МассивСоглашений));
	
	Если СписокВыбора.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выполнения обмена с оператором ЭДО ""Такском"" необходимо ввести парол%1 к %2 ЭЦП.
		|Продолжить?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса,
			?(СписокВыбора.Количество() > 1, "и", "ь"), ?(СписокВыбора.Количество() = 1, "", СписокВыбора.Количество()));
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 30, КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			СоответствиеВозврата = Новый Соответствие;
			
			СписокВыбора.ЗаполнитьПометки(Истина);
			Если СписокВыбора.Количество() > 1 Тогда
				СписокВыбора.ОтметитьЭлементы(НСтр("ru = 'Отметьте сертификаты по которым необходимо выполнить обмен'"));
			КонецЕсли;
			ЗаголовокФормы = НСтр("ru = 'Введите пароль для ЭЦП'");
			
			Для Каждого Элемент Из СписокВыбора Цикл
				Если Элемент.Пометка Тогда
					ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата", ЗаголовокФормы, Элемент.Значение);
					КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
					
					Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
						СоответствиеВозврата.Вставить(Элемент.Значение, КодВозврата);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ПроверитьИспользованиеИнтернетПоддержкаПользователей() Экспорт
	
	Использование = Неопределено;
	ЭлектронныеДокументыКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование);
	Если Использование = Неопределено Тогда
		Использование = Ложь;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если Метаданные.Константы.Найти("ФайлОбработкиИнтернетПоддержкиПользователей") <> Неопределено Тогда
				Использование = Истина;
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Оповещение пользователя об обработке ЭД

// Выводит сообщение пользователю о нехватки прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыКлиентПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Оповещает пользователя о смене ответственных при обработке электронных документов.
//
// Параметры:
//  КоличествоОбработанных - Число, количество обработанных электронных документов
//  СписокОбъектов - СписокФормы, список объектов, которым сменяли ответственного
//  Ответственный - Пользователь, новый ответственный за выбранные электронные документы.
//
Процедура ОповеститьПользователяОСменеОтветственного(КоличествоОбработанных, СписокОбъектов, Ответственный) Экспорт
	
	ОчиститьСообщения();
	
	Если КоличествоОбработанных > 0 Тогда
		
		СписокОбъектов.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
		|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        СписокОбъектов.ВыделенныеСтроки.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Только для внутреннего использования
Процедура ОтправитьПодтверждениеЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, "УтвердитьПодписатьОтправить", , ЭД);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УтвердитьЭД(ПараметрКоманды, ЭД = Неопределено, ФлагОтправки = Истина) Экспорт
	
	Если НЕ (ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД()) Тогда
		СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагОтправки Тогда
		ИмяКоманды = "УтвердитьОтправить";
	Иначе
		ИмяКоманды = "Утвердить";
	КонецЕсли;
	ОбработатьЭД(МассивСсылок, ИмяКоманды, , ЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Функция получает массив ссылок на объекты.
//
// Параметры:
//  ПараметрКоманды - ссылка на объект или массив
//
// Возвращаемое значение:
//  МассивСсылок - если передан в параметр массив, то возвращает его же
//                 если передана пустая ссылка возвращает неопределено
//
Функция ПолучитьМассивПараметров(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = ПараметрКоманды;
	Иначе // пришла единичная ссылка на объект
		Если ПараметрКоманды.Пустая() Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПараметрКоманды);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сравнение электронных документов

// Только для внутреннего использования
Процедура ВыполнитьСравнениеЭД(СтруктураПараметров) Экспорт
	
	#Если НЕ ТолстыйКлиентУправляемоеПриложение И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		ТекстСообщения = НСтр("ru='Сравнение электронных документов можно сделать только в режиме толстого клиента.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	#Иначе
		
		ЭДПервый = СтруктураПараметров.ЭДПервый;
		ЭДВторой = СтруктураПараметров.ЭДВторой;
		
		Если НЕ (ЗначениеЗаполнено(ЭДПервый) И ЗначениеЗаполнено(ЭДВторой)) Тогда
			ТекстСообщения = НСтр("ru='Не указан один из сравниваемых электронных документов.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(ЭДПервый);
		МассивЭД.Добавить(ЭДВторой);
		ПереченьВременныхФайлов = ЭлектронныеДокументыФорматОбмена.ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД);
		
		Если ПереченьВременныхФайлов = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Ошибка при разборе электронного документа.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("mxl");
		// Необходимо заменить фрагмент от последнего подчеркивания до фрагмента ".mxl"
		ДлинаСтроки = СтрДлина(ИмяФайла);
		Для ОбратныйИндекс = 0 По ДлинаСтроки Цикл
			Если Сред(ИмяФайла, ДлинаСтроки - ОбратныйИндекс, 1) = "_" Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НазваниеЭД = ПереченьВременныхФайлов[0].НазваниеЭД;
		ЭлектронныеДокументыСлужебный.СкорректироватьИмяФайла(НазваниеЭД);
		ИмяПервогоФайлаMXL = Лев(ИмяФайла, ДлинаСтроки - ОбратныйИндекс) + НазваниеЭД + Прав(ИмяФайла, 4);
		ТабличныйДокумент = ПолучитьИзВременногоХранилища(ПереченьВременныхФайлов[0].АдресФайлаДанных);
		ТабличныйДокумент.Записать(ИмяПервогоФайлаMXL);
		
		НазваниеЭД = ПереченьВременныхФайлов[0].НазваниеЭД;
		ЭлектронныеДокументыСлужебный.СкорректироватьИмяФайла(НазваниеЭД);
		ИмяВторогоФайлаMXL = Лев(ИмяФайла, ДлинаСтроки - ОбратныйИндекс) + НазваниеЭД + Прав(ИмяФайла, 4);
		ТабличныйДокумент = ПолучитьИзВременногоХранилища(ПереченьВременныхФайлов[1].АдресФайлаДанных);
		ТабличныйДокумент.Записать(ИмяВторогоФайлаMXL);
		
		Сравнение = Новый СравнениеФайлов;
		Сравнение.СпособСравнения = СпособСравненияФайлов.ТабличныйДокумент;
		Сравнение.ПервыйФайл = ИмяПервогоФайлаMXL;
		Сравнение.ВторойФайл = ИмяВторогоФайлаMXL;
		Сравнение.ПоказатьРазличияМодально();
		
	#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭЦП

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПарольПользователя - Строка, пароль установки ЭЦП данным сертификатом.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы, СертификатПодписи, ПарольПользователя = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ТекстСообщения = НСтр("ru = 'Расширение для работы с криптографией не подключено, операция прервана.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат 0;
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебный.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(СертификатПодписи, "Отозван") Тогда
		ШаблонСообщения = НСтр("ru = 'Невозможно подписать документы. Сертификат (%1) отозван.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат 0;
	КонецЕсли;
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ШаблонСообщения = НСтр("ru = 'Код ошибки 100.  Необходимо провести тест настроек сертификата: %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат 0;
	КонецПопытки;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	// Проверим сертификат с помощью менеджера криптографии.
	// Если есть ошибка - подпись не производим.
	КриптоСертификат = ПодписьДоступнаПоСертификату(СертификатПодписи);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат, РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Код ошибки 102. Необходмо провести тест настроек сертификата: %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КриптоСертификат);
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка сертификата на корректность'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
			Возврат 0;
		КонецПопыткИ;
		
		Если ЭлектронныеДокументыСлужебный.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(СертификатПодписи, "ЗапомнитьПарольКСертификату")
			И ПарольПользователя = Неопределено Тогда
			
			ПарольПользователя = ЭлектронныеДокументыСлужебный.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(
				СертификатПодписи, "ПарольПользователя");
		КонецЕсли;
		
		Если ПарольПользователя = Неопределено Тогда
			ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата", 
			НСтр("ru = 'Введите пароль для ЭЦП'"), СертификатПодписи);
			КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
			
			Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
				ПарольПользователя = КодВозврата;
			Иначе
				ЭлектронныеДокументыСлужебный.ОбновитьВерсиюЭД(ДобавленныеФайлы);
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ТекДокумент Из ДобавленныеФайлы Цикл
			
			// Проверим, все ли необходимые условия выполнены
			Если ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументГотовКПодписи(ТекДокумент) 
				И ЭлектронныеДокументыСлужебный.УстановленныеПодписиВалидны(ТекДокумент) Тогда
				СтруктураДанныхПодписи = Новый Структура("Сертификат, Пароль, Комментарий", КриптоСертификат, ПарольПользователя,
					НСтр("ru = 'Подписание электронного документа'"));
				Попытка
					ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ТекДокумент);
					ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(МенеджерКриптографии,
						ТекДокумент, ДвоичныеДанныеФайла, СтруктураДанныхПодписи);
					
					ЭлектронныеДокументыСлужебный.ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
					КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
				Исключение
					ШаблонСообщения = НСтр("ru = 'Ошибка подписи. Необходимо провести тест сертификата криптографии дяя: %1.
					|%2.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка подписи ЭЦП'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка пакетов

// Готовит к отправке электронные документы (формирует пакеты ЭД).
//
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подготовить к отправке,
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭЦП, 
//
Функция ПодготовитьКОтправкеЭД(ДобавленныеФайлы, ПризнакПодписи) Экспорт
	
	МассивСтруктурПакетовЭД = ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	Возврат МассивСтруктурПакетовЭД.Количество();
	
КонецФункции

// Готовит к отправке ЭД и ОТПРАВЛЯЕТ (подготовленные электронные документы).
//
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо поместить в пакеты ЭД,
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭЦП, 
//
Функция ПодготовитьИОтправитьПЭД(ДобавленныеФайлы, ПризнакПодписи) Экспорт
	
	МассивСтруктурПакетовЭД = ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	Возврат МассивСтруктурПакетовЭД.Количество();
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьМассивПакетовЭД(Знач МассивПЭД, СоответствиеПаролейДляЭДО) Экспорт
	
	Результат = ЭлектронныеДокументыСлужебный.ОтправкаПакетовЭД(МассивПЭД, СоответствиеПаролейДляЭДО);
	Оповестить("ОбновитьСостояниеЭД");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с подписями

// Процедура предназначена для коррекции имени файла  - замена некорректных символов на пробел
//
// Параметры
//  СтрИмяФайла  - Строка - Имя файла
//
Процедура СкорректироватьИмяФайла(СтрИмяФайла) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru.
	// При этом были объединены запрещенные символы для файловых систем FAT и NTFS.
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Для Сч = 1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, " ");
		КонецЕсли;
	КонецЦикла;
	
	СтрИмяФайла = СокрЛП(СтрИмяФайла);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Выводит пользователю информацию об обработанных электронных документах.
//
// Параметры:
//  КолСформированных - число, количество сформированных электронных документов,
//  КолПодписанных - число, количество подписанных электронных документов,
//  КолОтправленных - число, количество отправленных электронных документов.
//
Процедура ВывестиИнформациюОбОбработанныхЭД(КолСформированных, КолУтвержденных, КолПодписанных, КолПодготовленных) Экспорт
	
	Если КолПодготовленных > 0 Тогда
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3), подготовлено к отправке пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, 
					КолУтвержденных, КолПодписанных, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2), подготовлено к отправке пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных,
						КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1), подготовлено к отправке пакетов: (%2)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных, КолПодготовленных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подготовлено к отправке пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных,
						КолУтвержденных, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подготовлено к отправке пакетов: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подготовлено к отправке пакетов: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодготовленных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных);
				КонецЕсли;
			Иначе
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных);
				Иначе
					Текст = НСтр("ru = 'Обработанных документов нет...'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,Текст);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ, которые необходимо обработать,
//  Действие - строка, представление действия, которое необходимо произвести с электронными документами,
//  ДопПараметры - структура, дополнительные параметры обработки электронных документов.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//
Процедура ОбработатьЭД(МассивСсылокНаОбъект, Действие, ДопПараметры = "", ЭД = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	Попытка
		МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
	
	СтруктураДействий = ЭлектронныеДокументыСлужебный.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
		МассивСтруктурСертификатов, Действие, ДопПараметры, ЭД);
	
	Если СтруктураДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИтогКолНовыхЭД = 0;
	ИтогКолОтправленныхНаПодпись = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	
	Если ТипЗнч(СтруктураДействий) = Тип("Структура") Тогда
		Если СтруктураДействий.Свойство("КоличествоНовыхЭД") Тогда
			ИтогКолНовыхЭД = СтруктураДействий.КоличествоНовыхЭД;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолОтправленныхНаПодпись = СтруктураДействий.КоличествоУтвержденныхЭД;
		КонецЕсли;
		
		МассивОбработки = "";
		Если СтруктураДействий.Свойство("МассивСертификатов", МассивОбработки) Тогда
			Для Каждого ТекЭл Из МассивОбработки Цикл
				СертификатПодписи = ТекЭл.Сертификат;
				МассивЭД = ТекЭл.МассивЭД;
				КолПодписанных = ПодписатьЭДОпределеннымСертификатом(МассивЭД, СертификатПодписи);
				ИтогКолПодписанных = ИтогКолПодписанных + КолПодписанных;
			КонецЦикла;
		КонецЕсли;
		
		МассивОбработки = "";
		Если СтруктураДействий.Свойство("МассивСоглашений", МассивОбработки) Тогда
			Для Каждого ТекЭл Из МассивОбработки Цикл
				Соглашение = ТекЭл.Соглашение;
				ПризнакПодписи = ТекЭл.ПризнакПодписи;
				МассивЭД = ТекЭл.МассивЭД;
				КолПодготовленных = ПодготовитьКОтправкеЭД(МассивЭД, ПризнакПодписи);
				ИтогКолПодготовленных = ИтогКолПодготовленных + КолПодготовленных;
			КонецЦикла;
		КонецЕсли;
		
		МассивОбработки = "";
		Если СтруктураДействий.Свойство("МассивНовыхЭД", МассивОбработки) И МассивОбработки <> Неопределено Тогда
			Для Каждого ТекЭл Из МассивОбработки Цикл
				ОткрытьЗначение(ТекЭл);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	ВывестиИнформациюОбОбработанныхЭД(ИтогКолНовыхЭД, ИтогКолОтправленныхНаПодпись, ИтогКолПодписанных, ИтогКолПодготовленных);
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт
	
	Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
		СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебный.ИспользуетсяОбменЭД() Тогда
		ТекстСообщения = ЭлектронныеДокументыСлужебный.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Получение и отправка документов.
	СоответствиеПаролейДляЭДО = СоответствиеПаролейКСертификатам();
	СтруктураВозврата = ЭлектронныеДокументыСлужебный.ОтправитьИПолучитьДокументы(СоответствиеПаролейДляЭДО);
	
	// Распаковываем принятые пакеты с электронными документами.
	НовыеДокументы = СтруктураВозврата.НовыеДокументы;
	КоличествоНовыхЭД = НовыеДокументы.МассивВозврата.Количество();
	Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
		Если СтруктураРаспаковки.Распаковывать Тогда
			ПараметрыШифрования = Неопределено;
			СтруктураРаспаковки.Свойство("СтруктураШифрования", ПараметрыШифрования);
			РаспаковатьПакетЭДНаКлиенте(СтруктураРаспаковки.ПакетЭД, ПараметрыШифрования);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим вывод сообщения для пользователя об отправке/получению пакетов ЭД.
	КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов;
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КолОтправленныхПакетов,
		КоличествоНовыхЭД);
	
	Если КолОтправленныхПакетов > 0 ИЛИ КоличествоНовыхЭД > 0
		ИЛИ СтруктураВозврата.НовыеДокументы.ВызватьОповещение Тогда
		
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

// Только для внутреннего использования
Процедура РаспаковатьМассивПакетовЭД(МассивПЭД) Экспорт
	
	СписокДокументов = Новый Массив;
	ПараметрыШифрования = ЭлектронныеДокументыСлужебный.ОпределитьШифрованиеИСтатус(МассивПЭД);
	
	Если ПараметрыШифрования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Индекс = 0;
	
	Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
		Если СтруктураШифрования.ПарольДоступа = Неопределено Тогда
			ПарольДоступа = Неопределено;
			Если СтруктураШифрования.Зашифрован И НЕ ПарольЗадан(СтруктураШифрования, ПараметрыШифрования, ПарольДоступа) Тогда
				ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата",
					НСтр("ru = 'Введите пароль расшифровки'"), СтруктураШифрования.Сертификат);
				
				КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
				Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
					ПарольДоступа = КодВозврата;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураШифрования.ПарольДоступа = ПарольДоступа;
			ПараметрыШифрования.Установить(Индекс, СтруктураШифрования);
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ВсегоРаспакованоЭД = 0;
	Для Каждого ТекЭл Из МассивПЭД Цикл
		КоличествоРаспакованныхДокументов = РаспаковатьПакетЭДНаКлиенте(ТекЭл, ПараметрыШифрования);
		Если НЕ КоличествоРаспакованныхДокументов = Неопределено Тогда
			ВсегоРаспакованоЭД = ВсегоРаспакованоЭД + КоличествоРаспакованныхДокументов;
		КонецЕсли;
	КонецЦикла;
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Распаковано электронных документов: (%1)'"), ВсегоРаспакованоЭД);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с уточнением

// Только для внутреннего использования
Функция СформироватьПодписатьЭДУведомлениеОбУточнении(СсылкаНаЭД, ТекстУточнения) Экспорт
	
	КолСформированных = 0;
	КолУтвержденных   = 0;
	КолПодписанных    = 0;
	КолПодготовленных = 0;
	
	ФайлУведомления = ЭлектронныеДокументыФорматОбмена.СформироватьЭДУведомлениеОбУточнении(СсылкаНаЭД, ТекстУточнения);
	
	Если ФайлУведомления <> Неопределено Тогда
		
		КолСформированных = 1;
		КолУтвержденных   = 1;
		
		ДобавленныеФайлы  = Новый Массив;
		ДобавленныеФайлы.Добавить(ФайлУведомления);
		
		СертификатПодписи = ЭлектронныеДокументыОператорыЭДО.ОпределитьСертификатПодписиСлужебногоДокумента(СсылкаНаЭД,
			"УведомлениеОбУточнении");
		Если СертификатПодписи <> Неопределено Тогда
			Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(СертификатПодписи, "ЗапомнитьПарольКСертификату") Тогда
				КолПодписанных = ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы, СертификатПодписи,
					ОбщегоНазначения.ПолучитьЗначениеРеквизита(СертификатПодписи, "ПарольПользователя"));
				
				Если КолПодписанных > 0 Тогда
					КолПодготовленных = ПодготовитьКОтправкеЭД(ДобавленныеФайлы, Истина);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	ВывестиИнформациюОбОбработанныхЭД(КолСформированных, КолУтвержденных, КолПодписанных, КолПодготовленных);
	
	Возврат ЗначениеЗаполнено(ФайлУведомления);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭЦП

Функция ПодписьДоступнаПоСертификату(СертификатПодписи)
	
	ТребуемаяПодпись = ЭлектронныеДокументыСлужебный.ПолучитьОтпечатокСертификата(СертификатПодписи);
	Возврат ПодписьДоступна(ТребуемаяПодпись);
	
КонецФункции

Функция ПодписьДоступна(ТребуемаяПодпись)
	
	Возврат ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ТребуемаяПодпись);
	
КонецФункции

// Выводит результат проверки корректности сертификата криптографии.
//
// Параметры
//  ОтпечатокСертификатаПодписи - строка-отпечаток сертификата ЭЦП
//
Процедура ТестНастроекСертификата(ОтпечатокСертификатаПодписи) Экспорт
	
	ШаблонСообщения = НСтр("ru = '%1
	|%2'");
	
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста =  НСтр("ru = 'Тест. Проверка средства криптографии на компьютере.'");
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		ШаблонРезультата = НСтр("ru = 'Код ошибки 100. Не удалось создать менеджер криптографии.
		|%1'");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		ОписаниеТеста, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста =  НСтр("ru = 'Тест. Проверка наличия сертификата на компьютере.'");
	
	Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокСертификатаПодписи);
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Если Сертификат = Неопределено Тогда
		РезультатТеста = НСтр("ru = 'Код ошибки 101. Сертификат не найден в хранилище сертификатов.'");
	КонецЕсли;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		ОписаниеТеста, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	// Блок проверки сертификата на корректность.
	ОписаниеТеста =  НСтр("ru = 'Тест. Проверка реквизитов сертификата.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(Сертификат, РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		ШаблонРезультата = НСтр("ru = 'Код ошибки 102. Сертификат не действителен.
		|%1'");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		ОписаниеТеста, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокДвоичныеДанные = Base64Значение(ОтпечатокСертификатаПодписи);
	ФайлДанных = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("txt");
	
	ОписаниеТеста =  НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки.'");
	МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, ФайлДанных, Сертификат);
	Попытка
		ДвоичныеДанные = Новый ДвоичныеДанные(ФайлДанных);
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		РезультатТеста = НСтр("ru = 'Код ошибки 103. Не удалось выполнить операции шифрования/расшифровки.'");
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		ОписаниеТеста, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	// Блок проверки ЭЦП.
	ОписаниеТеста =  НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭЦП.'");
	Попытка
		МенеджерКриптографии.Подписать(ОтпечатокДвоичныеДанные, ФайлДанных, Сертификат);
		ДвоичныеДанные = Новый ДвоичныеДанные(ФайлДанных);
		ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, ОтпечатокДвоичныеДанные, ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		ШаблонРезультата = НСтр("ru = 'Код ошибки 104. Не удалось выполнить операции формирования/проверки ЭЦП.
		|%1'");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		ОписаниеТеста, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	УдалитьФайлы(ФайлДанных);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

Процедура ДобавитьМассив(МассивПриемник, МассивИсточник)
	
	Если ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЭлементИсточник)
	КонецЦикла;
	
КонецПроцедуры

// Расшифровывает и распаковывает пакет электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, исследуемый пакет электронных документов.
//  ПараметрыШифрования - Структура, параметры шифрования для данного пакета электронных документов.
//
Функция РаспаковатьПакетЭДНаКлиенте(ПакетЭД, ПараметрыШифрования = "")
	
	Перем ПапкаДляРаспаковки, ПапкаДляРасшифровки;
	МассивВозврата = Новый Массив;
	
	Попытка
		ДанныеРаспаковки = ЭлектронныеДокументыСлужебный.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД, ПапкаДляРаспаковки, ПараметрыШифрования);
		
		Если ДанныеРаспаковки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЕстьКриптосредствоНаКлиенте = Истина;
		Попытка
			МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		Исключение
			МенеджерКриптографии = Неопределено;
			ЕстьКриптосредствоНаКлиенте = Ложь;
		КонецПопытки;
		
		ТипДанных = Неопределено;
		ЕстьТипДанных = ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных);
		Если ЕстьТипДанных И ТипДанных <> "ЭД" И ТипДанных <> "Подпись" Тогда
			МассивДобавленныхФайловДляИзвещений = Новый Массив;
			КоличествоОбработанныхДокументов = ЭлектронныеДокументыОператорыЭДОКлиент.ОбработатьДвоичныеДанныеПакетаОператораЭДО(ПакетЭД,
				ДанныеРаспаковки, ПапкаДляРаспаковки, ПапкаДляРасшифровки, ЕстьКриптосредствоНаКлиенте, МассивДобавленныхФайловДляИзвещений);
			
			Если КоличествоОбработанныхДокументов > 0 Тогда
				Оповестить("ОбновитьДокументИБПослеЗаполнения");
			КонецЕсли;
			
			// Получили данные от оператора ЭДО
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				ЭлектронныеДокументыОператорыЭДОКлиент.СформироватьПодписатьЭДИзвещениеОПолучении(МассивДобавленныхФайловДляИзвещений);
			КонецЕсли;
			
			Возврат КоличествоОбработанныхДокументов;
		КонецЕсли;
		
		МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
		МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
		
		Если МассивДвоичныхДанных.Количество() = 0 Тогда
			ЭлектронныеДокументыСлужебный.ОбработатьПодтвержденияДокументовНаСервере(ДанныеРаспаковки.СоответствиеФайлПараметры,
				ПакетЭД, ПапкаДляРаспаковки);
		КонецЕсли;
		
		Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
			Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
				
				// Обработать пришедшие извещения от оператора
				// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
				МассивСтруктурПодписей = ЭлектронныеДокументыСлужебный.ПолучитьСоответствиеДанныхПодписей(СтруктураДанных.ИмяФайла,
					ПапкаДляРаспаковки, СтруктураДанных.ДвоичныеДанные, ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
				
				Если МассивСтруктурПодписей <> Неопределено Тогда
					ФлагОшибки = Ложь;
					Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
						Если СтруктураПодписи.ДвоичныеДанныеПодписи <> Неопределено Тогда
							Попытка
								ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, СтруктураПодписи.ДвоичныеДанныеФайла,
									СтруктураПодписи.ДвоичныеДанныеПодписи);
							Исключение
								ТекстСообщения = НСтр("ru = 'Код ошибки 104. Необходимо провести тест настроек сертификата.'");
								ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка подписи'"),
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
								ФлагОшибки = Истина;
								Прервать;
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
					
					Если ФлагОшибки Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебный.ДобавитьДанныеПоПакетуЭД(ПакетЭД, МассивСтруктурПодписей,
					СтруктураДанных, ДанныеРаспаковки.СоответствиеФайлПараметры, ПапкаДляРаспаковки, ПапкаДляРасшифровки);
			КонецЦикла;
		КонецЕсли;
		
		ЕстьОшибкаРаспаковки = Ложь;
		
		Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
			СтруктураШифрования = НайтиСтруктуруВПараметрах(СтруктураДанных.ИмяФайлаБезРасширения, ПараметрыШифрования);
			Если СтруктураШифрования <> Неопределено И СтруктураШифрования.Зашифрован Тогда
				Если СтруктураШифрования.Свойство("ПарольДоступа") Тогда
					МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураШифрования.ПарольДоступа;
					
					// Метод расшифровки генерирует исключение в случае ошибки.
					Попытка
						РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(СтруктураДанных.ДвоичныеДанные);
					Исключение
						ТекстСообщения = НСтр("ru = 'Код ошибки 103. Необходимо провести тест настроек сертификата.'");
						ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'расшифровка пакета ЭД'"),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
						Возврат Неопределено;
					КонецПопытки;
					СтруктураДанных.ДвоичныеДанные = РасшифрованныеДвоичныеДанные;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтруктурПодписей = ЭлектронныеДокументыСлужебный.ПолучитьСоответствиеДанныхПодписей(СтруктураДанных.ИмяФайла,
				ПапкаДляРаспаковки, СтруктураДанных.ДвоичныеДанные, ДанныеРаспаковки.СоответствиеФайлПараметры);
			
			МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебный.ДобавитьДанныеПоПакетуЭД(ПакетЭД, МассивСтруктурПодписей,
				СтруктураДанных, ДанныеРаспаковки.СоответствиеФайлПараметры, ПапкаДляРаспаковки, ПапкаДляРасшифровки,
				ЕстьОшибкаРаспаковки, ЕстьКриптосредствоНаКлиенте);
			
			Если НЕ ЕстьОшибкаРаспаковки Тогда
				Если ЗначениеЗаполнено(ТипДанных) Тогда
					ЭлектронныеДокументыОператорыЭДОКлиент.СформироватьПодписатьЭДИзвещениеОПолучении(МассивДобавленныхФайлов);
				КонецЕсли;
				
				ДобавитьМассив(МассивВозврата, МассивДобавленныхФайлов);
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОшибкаРаспаковки Тогда
			Возврат 0;
		КонецЕсли;
		
		ЭлектронныеДокументыСлужебный.УстановитьСтатусПакета(ПакетЭД, ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка распаковки входящего пакета ЭД.
		|%1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка входящего пакета ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
	КонецПопытки;
	ЭлектронныеДокументыСлужебный.УдалитьПапкуНаСервере(ПапкаДляРаспаковки);
	ЭлектронныеДокументыСлужебный.УдалитьПапкуНаСервере(ПапкаДляРасшифровки);
	
	Возврат МассивВозврата.Количество();
	
КонецФункции

Функция ПарольЗадан(ТекущаяСтруктура, ПараметрыШифрования, ПарольДоступа)
	
	СертификатПоиска = ТекущаяСтруктура.Сертификат;
	ВозвращаемоеЗначение = Ложь;
	Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
		Если СтруктураШифрования.Сертификат = СертификатПоиска
			И СтруктураШифрования.Свойство("ПарольДоступа", ПарольДоступа)
			И ПарольДоступа <> Неопределено Тогда
			
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСтруктуруВПараметрах(ИмяПоиска, ПараметрыШифрования)
	
	ВозвращаемыйПараметр = Неопределено;
	
	Если ТипЗнч(ПараметрыШифрования) = Тип("Массив") Тогда
		Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
			Если СокрЛП(ИмяПоиска) = СокрЛП(СтруктураШифрования.Документ) Тогда
				ВозвращаемыйПараметр = СтруктураШифрования;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПараметрыШифрования) = Тип("Структура") Тогда
		ВозвращаемыйПараметр = ПараметрыШифрования;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции