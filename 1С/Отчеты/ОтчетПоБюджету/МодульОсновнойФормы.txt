Перем ВысотаЗаголовка;
Перем ИдентификаторОкнаРасшифровки;
Перем ФормаНастройка;
Перем СтруктураРеквизитов;
Перем НеВосстанавливатьНастройку Экспорт;
Перем СтруктураСвязиЭлементовСДанными;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()
	
	Если ПоказыватьЗаголовок Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Истина;

	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Ложь;

	КонецЕсли;

	Если ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
	КонецЕсли;
		
КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

// Проверяет даты начала и конца ограничения оборотов и корректирует при необходимости
//
Процедура ПроверкаИнтервала()
	
	Если (ДатаКон='00010101') И (ДатаНач<>'00010101') Тогда
		
		ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(ДатаНач,Сценарий.Периодичность);
		
	ИначеЕсли (ДатаКон<>'00010101') И (ДатаНач='00010101') Тогда
		
		ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(ДатаКон,Сценарий.Периодичность);
		
	ИначеЕсли ДатаКон<ДатаНач Тогда
		
		Если ЭтаФорма.ТекущийЭлемент.Имя="ДатаКон" Тогда
			
			ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(ДатаКон,Сценарий.Периодичность);
			
		Иначе
			
			ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(ДатаНач,Сценарий.Периодичность);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаИнтервала()

Процедура УстановитьДоступностьСценария()
	
	Если ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.Сценарий Тогда
		ЭлементыФормы.Сценарий.Доступность=Истина;
	Иначе
		ЭлементыФормы.Сценарий.Доступность=Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьСценария()

// Обновляет таблицу отчета
//
// Параметры:
//	Нет.
//
Процедура ОбновитьТаблицуОтчета() Экспорт

	СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);

	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры // ОбновитьОтчет()

//  Управляет выводом заголовка
//
// Параметры:
//	Нет.
//
Процедура ВыводЗаголовка()

	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры // ВыводЗаголовка()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек() Экспорт
	
	СтруктНастр = Новый Структура;
	СтруктНастр.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	СтруктНастр.Вставить("Показатели", Показатели.Выгрузить());
	СтруктНастр.Вставить("ОтборПомечен", ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка);
	СтруктНастр.Вставить("ЗаголовокПомечен", ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка);
	СтруктНастр.Вставить("Сценарий", Сценарий);
    СтруктНастр.Вставить("Бюджет",Бюджет);
	СтруктНастр.Вставить("ГруппировкаГоризонтальная",ГруппировкаГоризонтальная);

	
	Возврат СтруктНастр;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт

	ПостроительОтчета.УстановитьНастройки(СтруктураСНастройками.НастройкиПостроителя);
	Показатели.Загрузить(СтруктураСНастройками.Показатели);
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = СтруктураСНастройками.ЗаголовокПомечен;
	Сценарий=(СтруктураСНастройками.Сценарий);
	Бюджет=СтруктураСНастройками.Бюджет;
	ГруппировкаГоризонтальная=СтруктураСНастройками.ГруппировкаГоризонтальная;

КонецПроцедуры

// Формирует список выбора группировки для разворота по горизонтали
// в соответствии с измерениями построителя
//
// Параметры: нет
//
Процедура СформироватьСписокДляРазворота()
	
	СписокИзмерений=Новый СписокЗначений;
	СписокИзмерений.Добавить("","Не разворачивать");

	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		ТекущееИзмерение=ПостроительОтчета.ИзмеренияСтроки[Сч];
		
		СписокИзмерений.Добавить(ТекущееИзмерение.ПутьКДанным,?(ТекущееИзмерение.Представление="",ТекущееИзмерение.Имя,ТекущееИзмерение.Представление));
		
	КонецЦикла;
		
	ЭлементыФормы.ГруппировкаГоризонтальная.СписокВыбора=СписокИзмерений;

КонецПроцедуры // СформироватьСписокДляРазворота()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

// Процедура - обработчик нажатия кнопки "Настройка".
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	//ВызовСтандартнойНастройки(ЭтаФорма);
	
	ФормаНастройка = ОтчетОбъект.ПолучитьФорму("ФормаНастройка", ЭтаФорма);

	СтруктураСНастройками = СформироватьСтруктуруДляСохраненияНастроек();
	
	РезультатОткрытия = ФормаНастройка.ОткрытьМодально();

	Если РезультатОткрытия = Истина Тогда

		СформироватьСписокДляРазворота();
		УстановитьДоступностьСценария();

	Иначе
		//форму закрыли эскейпом или по "Закрыть" - восстановим настройки, отчет формировать не будем!
		//восстанавливаем значения
		НеВосстанавливатьНастройку = Ложь;
		ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками);
	КонецЕсли;
	
	УправлениеОтчетами.УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Отбор".
//
Процедура КоманднаяПанельФормыОтбор(Кнопка)

	Если НЕ ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Обновить".
//
Процедура КоманднаяПанельФормыОбновить(Кнопка)

	СформироватьЗаголовокОтчета();
	
	ОбновитьТаблицуОтчета();

КонецПроцедуры // ВыполнитьНажатие()

// Процедура - обработчик нажатия кнопки "Заголовок".
//
Процедура КоманднаяПанельЗаголовок(Кнопка)
	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	ВыводЗаголовка();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик закрытия формы
//
Процедура ПриЗакрытии()

	ИмяОтчета = ЭтотОбъект.Метаданные().Имя;
	
	// Запомним параметры для данной формы
	СохранитьЗначение( ИмяОтчета+ "_ОтборПомечен", ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка);
	
	// Запомним параметры для данной формы
	СохранитьЗначение( ИмяОтчета+ "_ЗаголовокПомечен", ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события перед открытием формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если неВосстанавливатьНастройку<>Истина Тогда
		
		ЗаполнитьНачальныеНастройки();
		
		Если ТипЗнч(СохраненныеНастройки)=Тип("Структура") И ТипЗнч(СохраненныеНастройки.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки.НастройкиПостроителя);
		КонецЕсли;

		ВысотаЗаголовка = 0;

		Заголовок=мНазваниеОтчета;
		
	КонецЕсли;
	
	УправлениеОтчетами.УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными);
		
КонецПроцедуры // ПередОткрытием()     ЭтотОбъект

// Процедура - обработчик события при открытии формы
//
Процедура ПриОткрытии()
	
	УстановилиСверткуИзНастройки = Ложь;
	
	Если НЕ (НеВосстанавливатьНастройку = Истина) Тогда
		//отработаем сворачивание панели "Отбор"...
		Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда

			УстановилиСверткуИзНастройки = истина;
			ЭлементыФормы.ПанельОтбор.Свертка = ?(СохраненныеНастройки.ОтборПомечен, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
			//Это, что выше, не работает при еще не открытой форме.
			УправлениеПометкамиКнопокКоманднойПанели();

		КонецЕсли;
	Иначе
		//в следующий раз настройку мы все-таки восстановим - форма уже открыта...
		НеВосстанавливатьНастройку = Ложь;
		
	КонецЕсли;
	Если НЕ УстановилиСверткуИзНастройки Тогда
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	ЭлементыФормы.ГруппировкаГоризонтальная.Значение=ГруппировкаГоризонтальная;
	
	Если ДатаНач='00010101' Тогда
		ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(РабочаяДата,Сценарий.Периодичность);
	КонецЕсли;
	
	Если ДатаКон='00010101' Тогда
		ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(РабочаяДата,Сценарий.Периодичность);
	КонецЕсли;	
	
	УправлениеПометкамиКнопокКоманднойПанели();
	
	Если НЕ ЗначениеЗаполнено(ВидДанныхОтчета) Тогда
		ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.Сценарий;
	КонецЕсли;
	
	УстановитьДоступностьСценария();
	
КонецПроцедуры

// Процедура - обработчик события перед сохранением значений формы
//
Процедура ПередСохранениемЗначений(Отказ)

	СохраненныеНастройки = СформироватьСтруктуруДляСохраненияНастроек();

КонецПроцедуры // ПередСохранениемЗначений()

// Процедура - обработчик события после восстановления значений формы
//
Процедура ПослеВосстановленияЗначений()

	Если НеВосстанавливатьНастройку<>Истина Тогда

		Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда

			ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки);

			ЗаполнитьНачальныеНастройки();
			
			Если ТипЗнч(СохраненныеНастройки.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки.НастройкиПостроителя);
				СформироватьСписокДляРазворота();
			КонецЕсли;
			
			ГруппировкаГоризонтальная=СохраненныеНастройки.ГруппировкаГоризонтальная;
			
			УправлениеОтчетами.УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными);
			
			Если Открыта() Тогда
				ЭлементыФормы.ПанельОтбор.Свертка = ?(СохраненныеНастройки.ОтборПомечен, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
				УправлениеПометкамиКнопокКоманднойПанели();
			КонецЕсли;
			
			Заголовок=мНазваниеОтчета;

		КонецЕсли;

	КонецЕсли; 

КонецПроцедуры // ПослеВосстановленияЗначений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик изменения данных в поле значения отбора
//
Процедура ПолеНастройки1ПриИзменении(Элемент)

	УправлениеОтчетами.ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);
	
КонецПроцедуры // ПолеНастройки1ПриИзменении()

// Процедура - обработчик изменения данных в поле выбора вида сравнения
//
Процедура ПолеВидаСравнения1ПриИзменении(Элемент)

	УправлениеОтчетами.ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);
	
КонецПроцедуры // ПолеВидаСравнения1ПриИзменении()

// Процедура - обработчик события "Обработка расшифровки" поля табличного документа ДокументРезультат
//
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, РасшифровкаСтроки, СтандартнаяОбработка)
	
	Если Элемент.ТекущаяОбласть.Лево>2 Тогда
		
		РасшифровкаСтроки=Элемент.Область(Элемент.ТекущаяОбласть.Верх, 1).Расшифровка;
		
		Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
			
			// Расшифровка колонки находится в заголовке колонки
			РасшифровкаКолонки = Элемент.Область(ВысотаЗаголовка+1, Элемент.ТекущаяОбласть.Лево).Расшифровка;
			
			Расшифровка = Новый Структура;
			
			Для каждого Элемент Из РасшифровкаСтроки Цикл
				
				Если Элемент.Ключ="СтрокаБюджета" Тогда
					Если ТипЗнч(Элемент.Значение)=Тип("СправочникСсылка.СтатьиБюджета") Тогда
						Расшифровка.Вставить("СтатьяОборотов",Элемент.Значение.СтатьяОборотов);
					ИначеЕсли ТипЗнч(Элемент.Значение)=Тип("СправочникСсылка.СчетаБюджета") Тогда
						Расшифровка.Вставить("СтатьяБаланса",Элемент.Значение.СтатьяБаланса);
					КонецЕсли;
				Иначе
					Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда
				
				Для каждого Элемент Из РасшифровкаКолонки Цикл
					Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
				КонецЦикла;
				
			КонецЕсли;
			
			ОбработкаРасшифровкиОтчетаБюджетирования(Расшифровка, СтандартнаяОбработка, ОтчетОбъект);
			
		КонецЕсли;
		
	Иначе 
		
		Если ТипЗнч(РасшифровкаСтроки)=Тип("СправочникСсылка.СтатьиБюджета") Тогда
			
			ФормаСписка=Справочники.СтатьиБюджета.ПолучитьФормуСписка();
			ФормаСписка.ПараметрТекущаяСтрока=РасшифровкаСтроки;
			ФормаСписка.ПараметрОтборПоВладельцу=Бюджет;
			ФормаСписка.Открыть();
			
		ИначеЕсли ТипЗнч(РасшифровкаСтроки)=Тип("СправочникСсылка.СчетаБюджета") Тогда
			
			ФормаСписка=Справочники.СчетаБюджета.ПолучитьФормуСписка();
			
			ФормаСписка.ПараметрТекущаяСтрока=РасшифровкаСтроки;
			ФормаСписка.ПараметрОтборПоВладельцу=Бюджет;
			ФормаСписка.Открыть();
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры // ДокументРезультатОбработкаРасшифровки()

Процедура СформироватьЗаголовокОтчета()
	
	мНазваниеОтчета = "Отчет по бюджету: "+?(Бюджет.НаименованиеПолное="",Бюджет.Наименование,Бюджет.НаименованиеПолное);
	Если Сценарий.Пустая() Тогда
		
		Если ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.ФактическиеДанныеИсточники Тогда
			мНазваниеОтчета=мНазваниеОтчета+" По фактическим данным: источники данных для расчетов";
			
		Иначе
			мНазваниеОтчета=мНазваниеОтчета+" По фактическим данным";
			
		КонецЕсли;
		
	Иначе
		
		мНазваниеОтчета=мНазваниеОтчета+" Сценарий: "+Строка(Сценарий);
			
	КонецЕсли;
			
	Заголовок=мНазваниеОтчета;
	
КонецПроцедуры // СформироватьЗаголовокОтчета() 

Процедура СценарийПриИзменении(Элемент)
	
	Если НЕ Сценарий.Пустая() Тогда
		
		ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(ДатаНач,Сценарий.Периодичность);
		ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(ДатаКон,Сценарий.Периодичность);
				
	КонецЕсли;
	
	СформироватьЗаголовокОтчета();
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура БюджетПриИзменении(Элемент)
	
	ПостроительОтчета.Параметры.Удалить("Бюджет");
	ПостроительОтчета.Параметры.Вставить("Бюджет",Бюджет);
	
	СформироватьЗаголовокОтчета();
		
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(НЕ ЗначениеЗаполнено(ДатаКон), ДатаКон, КонецДня(ДатаКон)));
	
	Если НП.Редактировать() Тогда
		
		Если НЕ Сценарий.Пустая() Тогда
			
			ДатаНачПериода = НП.ПолучитьДатуНачала();
			Если НЕ ЗначениеЗаполнено(ДатаНачПериода) Тогда
				ДатаНач = ДатаНачПериода;
			Иначе
				ДатаНач = ОбщегоНазначения.ДатаНачалаПериода(ДатаНачПериода,Сценарий.Периодичность);
			КонецЕсли; 
			
			ДатаКонПериода = НП.ПолучитьДатуОкончания();
			Если НЕ ЗначениеЗаполнено(ДатаКонПериода) Тогда
				ДатаКон = ДатаКонПериода;
			Иначе
				ДатаКон = ОбщегоНазначения.ДатаКонцаПериода(ДатаКонПериода,Сценарий.Периодичность);
			КонецЕсли; 
			
		Иначе
			ДатаНач = НП.ПолучитьДатуНачала();
			ДатаКон = НП.ПолучитьДатуОкончания();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ДатаНачПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение,Сценарий.Периодичность);
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаНачРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Сценарий.Периодичность,Направление);
	
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаКонПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(Элемент.Значение,Сценарий.Периодичность);
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаКонРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Сценарий.Периодичность,Направление),Сценарий.Периодичность);

	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ВидДанныхОтчетаПриИзменении(Элемент)
		
	Если НЕ ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.Сценарий Тогда
		Сценарий=Справочники.СценарииПланирования.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьНачальныеНастройки();
	УстановитьДоступностьСценария();
	
	СформироватьЗаголовокОтчета();
	
КонецПроцедуры