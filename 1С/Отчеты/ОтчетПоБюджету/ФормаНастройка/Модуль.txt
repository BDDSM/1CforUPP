////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Проверяет даты начала и конца ограничения оборотов и корректирует при необходимости
//
// Проверяет даты начала и конца ограничения оборотов и корректирует при необходимости
//
Процедура ПроверкаИнтервала()
	
	Если (ДатаКон='00010101') И (ДатаНач<>'00010101') Тогда
		
		ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(ДатаНач,Сценарий.Периодичность);
		
	ИначеЕсли (ДатаКон<>'00010101') И (ДатаНач='00010101') Тогда
		
		ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(ДатаКон,Сценарий.Периодичность);
		
	ИначеЕсли ДатаКон<ДатаНач Тогда
		
		Если ЭтаФорма.ТекущийЭлемент.Имя="ДатаКон" Тогда
			
			ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(ДатаКон,Сценарий.Периодичность);
			
		Иначе
			
			ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(ДатаНач,Сценарий.Периодичность);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаИнтервала()

Процедура УстановитьДоступностьСценария()
	
	Если ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.Сценарий Тогда
		ЭлементыФормы.Сценарий.Доступность=Истина;
	Иначе
		ЭлементыФормы.Сценарий.Доступность=Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьСценария()

// Формирует список выбора группировки для разворота по горизонтали
// в соответствии с измерениями построителя
//
// Параметры: нет
//
Процедура СформироватьСписокДляРазворота()

	СписокИзмерений=Новый СписокЗначений;
	СписокИзмерений.Добавить("","Не разворачивать");
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		ТекущееИзмерение=ПостроительОтчета.ИзмеренияСтроки[Сч];
		
		СписокИзмерений.Добавить(ТекущееИзмерение.ПутьКДанным,?(ТекущееИзмерение.Представление="",ТекущееИзмерение.Имя,ТекущееИзмерение.Представление));
		
	КонецЦикла;
		
	ЭлементыФормы.ГруппировкаГоризонтальная.СписокВыбора=СписокИзмерений;

КонецПроцедуры // СформироватьСписокДляРазворота()
 
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик нажатия кнопки ОК.
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Закрыть(Истина);
	
КонецПроцедуры // ОсновныеДействияФормыОК()

// Процедура - обработчик перед удалением строки отбора
//
Процедура ОтборПередУдалением(Элемент, Отказ)
	
	Если Не ПустаяСтрока(Элемент.ТекущаяСтрока.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ОтборПередУдалением()

// Процедура - обработчик нажатия кнопки "Установить все" командной панели списка показателей
//
Процедура КоманднаяПанельСписокПоказателейУстановитьВсе(Кнопка)
	
	Для каждого Строка Из Показатели Цикл
		Строка.Использование = Истина;
	КонецЦикла;
		
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Снять все" командной панели списка показателей
//
Процедура КоманднаяПанельСписокПоказателейСнятьВсе(Кнопка)
	
	Для каждого Строка Из Показатели Цикл
		Строка.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	СформироватьСписокДляРазворота();	
	
КонецПроцедуры

Процедура СценарийПриИзменении(Элемент)
	
	Если НЕ Сценарий.Пустая() Тогда
		
		ДатаНач=ОбщегоНазначения.ДатаНачалаПериода(ДатаНач,Сценарий.Периодичность);
		ДатаКон=ОбщегоНазначения.ДатаКонцаПериода(ДатаКон,Сценарий.Периодичность);
				
	КонецЕсли;		
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура БюджетПриИзменении(Элемент)
	
	ПостроительОтчета.Параметры.Удалить("Бюджет");
	ПостроительОтчета.Параметры.Вставить("Бюджет",Бюджет);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(НЕ ЗначениеЗаполнено(ДатаКон), ДатаКон, КонецДня(ДатаКон)));
	
	Если НП.Редактировать() Тогда
		
		Если НЕ Сценарий.Пустая() Тогда
			
			ДатаНачПериода = НП.ПолучитьДатуНачала();
			Если НЕ ЗначениеЗаполнено(ДатаНачПериода) Тогда
				ДатаНач = ДатаНачПериода;
			Иначе
				ДатаНач = ОбщегоНазначения.ДатаНачалаПериода(ДатаНачПериода,Сценарий.Периодичность);
			КонецЕсли; 
			
			ДатаКонПериода = НП.ПолучитьДатуОкончания();
			Если НЕ ЗначениеЗаполнено(ДатаКонПериода) Тогда
				ДатаКон = ДатаКонПериода;
			Иначе
				ДатаКон = ОбщегоНазначения.ДатаКонцаПериода(ДатаКонПериода,Сценарий.Периодичность);
			КонецЕсли; 
			
		Иначе
			ДатаНач = НП.ПолучитьДатуНачала();
			ДатаКон = НП.ПолучитьДатуОкончания();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ДатаНачПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение,Сценарий.Периодичность);
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаНачРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Сценарий.Периодичность,Направление);
	
	ПроверкаИнтервала();

КонецПроцедуры

Процедура ДатаКонПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(Элемент.Значение,Сценарий.Периодичность);
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаКонРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Сценарий.Периодичность,Направление),Сценарий.Периодичность);

	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ИзмеренияСтрокиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СформироватьСписокДляРазворота();
	
КонецПроцедуры

Процедура ИзмеренияСтрокиПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПутьКДанным=ГруппировкаГоризонтальная Тогда
		ГруппировкаГоризонтальная="";
	КонецЕсли;
	
	СформироватьСписокДляРазворота();
	
КонецПроцедуры

Процедура ВидДанныхОтчетаПриИзменении(Элемент)
		
	Если НЕ ВидДанныхОтчета=Перечисления.ВидыДанныхДляОтчетовБюджетированияИсточники.Сценарий Тогда
		Сценарий=Справочники.СценарииПланирования.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьНачальныеНастройки();	
	УстановитьДоступностьСценария();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УстановитьДоступностьСценария();
	
КонецПроцедуры