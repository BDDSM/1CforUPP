Перем ПолеТаблДокументаТитульный;
Перем ПолеТаблДокументаРаздел1;
Перем ПолеТаблДокументаРаздел2;
Перем ПолеТаблДокументаРаздел21;
Перем ПолеТаблДокументаРаздел3;
Перем ПолеТаблДокументаРаздел31;

Перем мСтруктураМногостраничныхРазделов Экспорт; // структура для хранения описаний многострочных частей
Перем мСтруктураМногострочныхРазделов Экспорт; // структура для хранения данных многостраничных разделов

Перем мДеревоВыбранныхСтраниц Экспорт; // хранит дерево значений - список выводимых на печать страниц

Перем мСтрокаФормата Экспорт; // хранит форматную строку представления денежных показателей отчета

Перем мКодОтчета; // хранит код отчета по КНД

Перем мСтруктураЦветовРаскраски Экспорт; // хранит коллекцию цветов раскраски автоматически заполняемых ячеек табличного документа

Перем ВариантыФорматовВыгрузки;
Перем ТаблицаСообщений Экспорт;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;

Перем мОписаниеТиповЧислоЕ Экспорт; // описание типа числа денежного представления

Перем мСоставПоказателей Экспорт;

Перем мБезОткрытияФормы Экспорт;
Перем мРежимПечати Экспорт;

Перем СвойстваПоказателей Экспорт;

Перем СоответствиеЕдиницыИзмеренияДелителю;

Перем мДанныеОтчета Экспорт;

Перем мНеВызыватьРасчет;

Перем НастройкиФормы; // общие настройки формы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьДеревоНастройкиСтраниц();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура ПолеТабличногоДокументаТитульныйПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел21ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел21Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел3ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел3Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел31ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел31Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

Процедура КнопкаПредыдущаяСтраницаРаздел21Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел21");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел21Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел21");
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел21Нажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу("Раздел21");
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел21Нажатие(Элемент)
	
	УдалитьДополнительнуюСтраницу("Раздел21");
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел21Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел21");
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел31Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел31");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел31Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел31");
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел31Нажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу("Раздел31");
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел31Нажатие(Элемент)
	
	УдалитьДополнительнуюСтраницу("Раздел31");
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел31Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел31");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	мНеВызыватьРасчет = Ложь;
	
	мБезОткрытияФормы = БезОткрытияФормы;
	
	ИнициализироватьПоляТабличныхДокументов();
	
	ЗаполнитьНачальныеНастройки();
	
	СформироватьСпискиВыбора();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	НастроитьПоляВвода();
	
	ВидДокумента = 0;
	НомерКорректировки = 1;
	УправлениеЭУВидДокументаНомерКорректировки();
	
	мАвтоВыборКодов = Ложь;
	мРежимПечати = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
	
	ДокументСкопирован = (мСохраненныйДок = Неопределено);
	Если ДокументСкопирован Тогда
		Если мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе 
			ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			ОтобразитьНомерКорректировки();
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			УстановитьФорматВыводаВПоляхВвода();
		КонецЕсли;
		ЗаполнитьДатуПодписи();
		ЗаполнитьЗначенияНовогоЭкземпляра();
	Иначе
		ВосстановитьСохраненныеДанные();
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если мСохраненныйДок = Неопределено И НЕ ЗначениеЗаполнено(мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;
	
	// Устанавливаем раскраску ячеек, участвующих в автозаполнении.
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		УстановитьДоступностьОбластей();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура ИнициализироватьПоляТабличныхДокументов()
	
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Титульный");
	ПолеТаблДокументаТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	ПолеТаблДокументаТитульный.Очистить();
	ПолеТаблДокументаТитульный.Вывести(Макет);
	
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1");
	ПолеТаблДокументаРаздел1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	ПолеТаблДокументаРаздел1.Очистить();
	ПолеТаблДокументаРаздел1.Вывести(Макет);
	
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел2");
	ПолеТаблДокументаРаздел2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	ПолеТаблДокументаРаздел2.Очистить();
	ПолеТаблДокументаРаздел2.Вывести(Макет);
	
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел21");
	ПолеТаблДокументаРаздел21 = ЭлементыФормы.ПолеТабличногоДокументаРаздел21;
	ПолеТаблДокументаРаздел21.Очистить();
	ПолеТаблДокументаРаздел21.Вывести(Макет);
	
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел3");
	ПолеТаблДокументаРаздел3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел3;
	ПолеТаблДокументаРаздел3.Очистить();
	ПолеТаблДокументаРаздел3.Вывести(Макет);
	
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел31");
	ПолеТаблДокументаРаздел31 = ЭлементыФормы.ПолеТабличногоДокументаРаздел31;
	ПолеТаблДокументаРаздел31.Очистить();
	ПолеТаблДокументаРаздел31.Вывести(Макет);
	
КонецПроцедуры

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	
	Если Найти(ИмяОбласти, "КодИМНС") = 1 Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(ИмяОбласти, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ИмяОбласти = "ФормаРеорганизации" Тогда
		УстановитьДоступностьОбластей();
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет(НастройкиФормы.МакетСписковВводаКодов);
	
	ЗначениеОтбораПоПериоду = Формат(мДатаКонцаПериодаОтчета, "ДФ=M");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код");
			ТаблСписка.Колонки.Добавить("Название");
			
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				НазваниеПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				ОтборПоказателя = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				
				ПоказательПроходитОтбор = (ПустаяСтрока(ОтборПоказателя) ИЛИ (ОтборПоказателя = ЗначениеОтбораПоПериоду));
				
				Если КодПоказателя <> "###" И ПоказательПроходитОтбор Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = НазваниеПоказателя;
				КонецЕсли;
			КонецЦикла;
			
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
			
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "НалоговыйПериод", 2, , "Выбор налогового периода", КоллекцияСписковВыбора["НалоговыеПериоды"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "МестоНахожденияУчета", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ФормаРеорганизации", 1, , "Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100001003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100002003", 11, "ОКАТО");
	
КонецПроцедуры // СформироватьСпискиВыбора()

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	ФормаВыбора = ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.Заголовок = ТекстВыбора;
	ФормаВыбора.СписокКодов = ТаблицаВыбора;
	Если ИсходнаяСтрока <> Неопределено Тогда
		ФормаВыбора.КодИсходнойСтроки = ИсходнаяСтрока.Код;
	КонецЕсли;
	
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	//ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(КодПоказателя);
	//Расчет(ИмяСтраницыПанели);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	ИмяОбласти = Область.Имя;
	
	Если ИмяОбласти = "ОКВЭД" И НЕ ПустаяСтрока(Область.Значение) И НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
		Сообщить("На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!", СтатусСообщения.Важное);
		Сообщить("Допустимы значения, соответствующие следующим шаблонам:", СтатусСообщения.Обычное);
		Сообщить("""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", СтатусСообщения.Обычное);
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(ИмяОбласти, "Показатель");
	Если ПараметрВводаПоля <> Неопределено Тогда
		Если ПараметрВводаПоля.Тип = "ОКАТО" И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
			Сообщить("Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!", СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяОбласти = "ФормаРеорганизации" Тогда
		УстановитьДоступностьОбластей();
	КонецЕсли;
	
	Расчет();
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура УстановитьДоступностьОбластей()
	
	ОпределяющаяОбласть    = ПолеТаблДокументаТитульный.Области.ФормаРеорганизации;
	ОбрабатываемаяОбласть1 = ПолеТаблДокументаТитульный.Области.РеорганизацияИНН;
	ОбрабатываемаяОбласть2 = ПолеТаблДокументаТитульный.Области.РеорганизацияКПП;
	Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
	 ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть1);
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть2);
	Иначе
		РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть1);
		РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть2);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

Процедура ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)
	
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

Процедура УдалитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)
	
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры

Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)
	
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);
	
КонецПроцедуры

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт
	
	Если (ФлажокОтклАвтоРасчет) ИЛИ (мРежимПечати) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		
		РасчетРаздел1(ПолеТаблДокументаРаздел1);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		РасчетРаздел2(ПолеТаблДокументаРаздел2);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда
		
		РасчетРаздел21(ПолеТаблДокументаРаздел21);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел3" Тогда
		
		РасчетРаздел3(ПолеТаблДокументаРаздел3);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел31" Тогда
		
		РасчетРаздел31(ПолеТаблДокументаРаздел31);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		
		ПолныйРасчетРаздел31();
		ПолныйРасчетРаздел3();
		ПолныйРасчетРаздел21();
		ПолныйРасчетРаздел2();
		ПолныйРасчетРаздел1();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолныйРасчетРаздел1()
	
	РасчетРаздел1(ПолеТаблДокументаРаздел1);
	
КонецПроцедуры

Процедура ПолныйРасчетРаздел2()
	
	РасчетРаздел2(ПолеТаблДокументаРаздел2);
	
КонецПроцедуры

Процедура ПолныйРасчетРаздел21()
	
	СтруктураРаздела = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел21", СтруктураРаздела);
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		ОбработкаВТабличномПоле = СтраницаРаздела.АктивнаяСтраница;
		Если ОбработкаВТабличномПоле Тогда
			РазмещениеДанных = ПолеТаблДокументаРаздел21;
		Иначе
			РазмещениеДанных = СтраницаРаздела.Данные;
		КонецЕсли;
		РасчетРаздел21(РазмещениеДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолныйРасчетРаздел3()
	
	РасчетРаздел3(ПолеТаблДокументаРаздел3);
	
КонецПроцедуры

Процедура ПолныйРасчетРаздел31()
	
	СтруктураРаздела = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел31", СтруктураРаздела);
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		ОбработкаВТабличномПоле = СтраницаРаздела.АктивнаяСтраница;
		Если ОбработкаВТабличномПоле Тогда
			РазмещениеДанных = ПолеТаблДокументаРаздел31;
		Иначе
			РазмещениеДанных = СтраницаРаздела.Данные;
		КонецЕсли;
		РасчетРаздел31(РазмещениеДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетРаздел1(МестоРазмещенияДанных)
	
	МестоРазмещенияДанныхРаздела2 = ПолеТаблДокументаРаздел2;
	Раздел2Строка070Графа04 = ОкруглитьЧислоПоФормату(ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела2, "П000200007004"));
	Раздел2Строка080Графа04 = ОкруглитьЧислоПоФормату(ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела2, "П000200008004"));
	Раздел2Строка090Графа04 = ОкруглитьЧислоПоФормату(ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела2, "П000200009004"));
	Раздел2Строка100Графа04 = ОкруглитьЧислоПоФормату(ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела2, "П000200010004"));
	Раздел2Строка110Графа04 = ОкруглитьЧислоПоФормату(ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела2, "П000200011004"));
	Раздел2Строка120Графа04 = ОкруглитьЧислоПоФормату(ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела2, "П000200012004"));
	
	ЗначениеСтроки030 = Раздел2Строка070Графа04 + Раздел2Строка080Графа04 + Раздел2Строка090Графа04
	                  + Раздел2Строка100Графа04 + Раздел2Строка110Графа04 + Раздел2Строка120Графа04;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000100003003", ЗначениеСтроки030);
	
КонецПроцедуры

Процедура РасчетРаздел2(МестоРазмещенияДанных)
	
	ЗначениеСтроки030Графа03 = ПолучитьСуммуПоказателяПоСтраницам("Раздел21", "П000210005003");
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00030"+"03", ЗначениеСтроки030Графа03);
	
	ЗначениеСтроки040Графа03 = ПолучитьСуммуПоказателяПоСтраницам("Раздел21", "П000210006003");
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00040"+"03", ЗначениеСтроки040Графа03);
	
	ЗначениеСтроки050Графа03 = ПолучитьСуммуПоказателяПоСтраницам("Раздел21", "П000210007003");
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00050"+"03", ЗначениеСтроки050Графа03);
	
	ЗначениеСтроки060Графа03 = ПолучитьСуммуПоказателяПоСтраницам("Раздел21", "П000210008003");
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00060"+"03", ЗначениеСтроки060Графа03);
	
	Строка030Графа03 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00030"+"03");
	Строка040Графа03 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00040"+"03");
	Строка050Графа03 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00050"+"03");
	Строка060Графа03 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00060"+"03");
	
	ЗначениеСтроки020Графа03 = Строка030Графа03 + Строка040Графа03 + Строка050Графа03 + Строка060Графа03;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00020"+"03", ЗначениеСтроки020Графа03);
	
	МестоРазмещенияДанныхРаздела3 = ПолеТаблДокументаРаздел3;
	
	Для Инд = 4 По 8 Цикл
		
		НомерГрафы = Формат(Инд, "ЧЦ=2; ЧН=; ЧВН=");
		
		Строка010Раздела3ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела3, "П00030"+"00010"+НомерГрафы);
		Строка020Раздела3ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела3, "П00030"+"00020"+НомерГрафы);
		Строка040Раздела3ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела3, "П00030"+"00040"+НомерГрафы);
		
		ЗначениеСтроки020ПоГрафе = Строка010Раздела3ПоГрафе + Строка020Раздела3ПоГрафе + Строка040Раздела3ПоГрафе;
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020" + "00020" + НомерГрафы, ЗначениеСтроки020ПоГрафе);
		
		Строка020ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020" + "00020" + НомерГрафы);
		Строка040Раздела3ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела3, "П00030" + "00040" + НомерГрафы);
		Строка050Раздела3ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанныхРаздела3, "П00030" + "00050" + НомерГрафы);
		
		ЗначениеСтроки030ПоГрафе = Строка020ПоГрафе - (Строка040Раздела3ПоГрафе + Строка050Раздела3ПоГрафе);
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020" + "00030" + НомерГрафы, ЗначениеСтроки030ПоГрафе);
		
		ЗначениеСтроки040ПоГрафе = Строка040Раздела3ПоГрафе + Строка050Раздела3ПоГрафе;
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020" + "00040" + НомерГрафы, ЗначениеСтроки040ПоГрафе);
		
	КонецЦикла;
	
	ЗначениеСтроки070Графа04 = ПолучитьСуммуПоказателяПоСтраницам("Раздел21", "П000210009003");
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00070"+"04", ЗначениеСтроки070Графа04);
	
	Строка080Графа03 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00080"+"03");
	Строка030Графа04 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00030"+"04");
	Строка040Графа04 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00040"+"04");
	
	ЗначениеСтроки080Графа04 = Строка080Графа03 * Строка030Графа04 + 1/2 * Строка080Графа03 * Строка040Графа04;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00080"+"04", ЗначениеСтроки080Графа04);
	
	Строка090Графа03 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00090"+"03");
	Строка030Графа05 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00030"+"05");
	Строка040Графа05 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00040"+"05");
	
	ЗначениеСтроки090Графа04 = Строка090Графа03 * Строка030Графа05 + 1/2 * Строка090Графа03 * Строка040Графа05;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00090"+"04", ЗначениеСтроки090Графа04);
	
	Строка100Графа03 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00100"+"03");
	Строка030Графа06 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00030"+"06");
	Строка040Графа06 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00040"+"06");
	
	ЗначениеСтроки100Графа04 = Строка100Графа03 * Строка030Графа06 + 1/2 * Строка100Графа03 * Строка040Графа06;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00100"+"04", ЗначениеСтроки100Графа04);
	
	Строка110Графа03 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00110"+"03");
	Строка030Графа07 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00030"+"07");
	Строка040Графа07 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00040"+"07");
	
	ЗначениеСтроки110Графа04 = Строка110Графа03 * Строка030Графа07 + 1/2 * Строка110Графа03 * Строка040Графа07;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00110"+"04", ЗначениеСтроки110Графа04);
	
	Строка120Графа03 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00120"+"03");
	Строка030Графа08 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00030"+"08");
	Строка040Графа08 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00020"+"00040"+"08");
	
	ЗначениеСтроки120Графа04 = Строка120Графа03 * Строка030Графа08 + 1/2 * Строка120Графа03 * Строка040Графа08;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00020"+"00120"+"04", ЗначениеСтроки120Графа04);
	
КонецПроцедуры

Процедура РасчетРаздел21(МестоРазмещенияДанных)
	
	Строка010 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00021"+"00010"+"03");
	Строка020 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00021"+"00020"+"03");
	
	ЗначениеСтроки030 = Строка010 * Строка020;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00021"+"00030"+"03", ЗначениеСтроки030);
	
	Строка020Раздела31 = ПолучитьСуммуПоказателяПоСтраницам("Раздел31", "П00031"+"00020"+"03", Новый Структура("Показатель, ЗначениеПоказателя", "П000310001003", Строка010));
	Строка030Раздела31 = ПолучитьСуммуПоказателяПоСтраницам("Раздел31", "П00031"+"00030"+"03", Новый Структура("Показатель, ЗначениеПоказателя", "П000310001003", Строка010));
	Строка040Раздела31 = ПолучитьСуммуПоказателяПоСтраницам("Раздел31", "П00031"+"00040"+"03", Новый Структура("Показатель, ЗначениеПоказателя", "П000310001003", Строка010));
	Строка050Раздела31 = ПолучитьСуммуПоказателяПоСтраницам("Раздел31", "П00031"+"00050"+"03", Новый Структура("Показатель, ЗначениеПоказателя", "П000310001003", Строка010));
	Строка060Раздела31 = ПолучитьСуммуПоказателяПоСтраницам("Раздел31", "П00031"+"00060"+"03", Новый Структура("Показатель, ЗначениеПоказателя", "П000310001003", Строка010));
	
	Если Строка010 <> 0 Тогда
		ЗначениеСтроки040 = Строка020Раздела31 + Строка030Раздела31 + Строка050Раздела31;
	Иначе
		ЗначениеСтроки040 = 0;
	КонецЕсли;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00021"+"00040"+"03", ЗначениеСтроки040);
	
	Строка040 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00021"+"00040"+"03");
	
	Если Строка010 = 1 Тогда
		ЗначениеСтроки050 = Строка040 - (Строка050Раздела31 + Строка060Раздела31);
	Иначе
		ЗначениеСтроки050 = 0;
	КонецЕсли;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00021"+"00050"+"03", ЗначениеСтроки050);
	
	Если Строка010 = 1 Тогда
		ЗначениеСтроки060 = Строка050Раздела31 + Строка060Раздела31;
	Иначе
		ЗначениеСтроки060 = 0;
	КонецЕсли;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00021"+"00060"+"03", ЗначениеСтроки060);
	
	Если Строка010 > 1 Тогда
		ЗначениеСтроки070 = Строка040 - (Строка050Раздела31 + Строка060Раздела31);
	Иначе
		ЗначениеСтроки070 = 0;
	КонецЕсли;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00021"+"00070"+"03", ЗначениеСтроки070);
	
	Если Строка010 > 1 Тогда
		ЗначениеСтроки080 = Строка050Раздела31 + Строка060Раздела31;
	Иначе
		ЗначениеСтроки080 = 0;
	КонецЕсли;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00021"+"00080"+"03", ЗначениеСтроки080);
	
	Строка030 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00021"+"00030"+"03");
	Строка050 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00021"+"00050"+"03");
	Строка060 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00021"+"00060"+"03");
	Строка070 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00021"+"00070"+"03");
	Строка080 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00021"+"00080"+"03");
	
	Если Строка010 = 1 Тогда
		ЗначениеСтроки090 = Строка050 * Строка020 + Строка060 * 1/2 * Строка020;
	ИначеЕсли Строка010 > 1 Тогда
		ЗначениеСтроки090 = Строка070 * Строка030 + Строка080 * 1/2 * Строка030;
	Иначе
		ЗначениеСтроки090 = 0;
	КонецЕсли;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00021"+"00090"+"03", ЗначениеСтроки090);
	
КонецПроцедуры

Процедура РасчетРаздел3(МестоРазмещенияДанных)
	
	ЗначениеСтроки010Графа03 = ПолучитьСуммуПоказателяПоСтраницам("Раздел31", "П000310002003");
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00030"+"00010"+"03", ЗначениеСтроки010Графа03);
	
	ЗначениеСтроки020Графа03 = ПолучитьСуммуПоказателяПоСтраницам("Раздел31", "П000310003003");
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00030"+"00020"+"03", ЗначениеСтроки020Графа03);
	
	ЗначениеСтроки030Графа03 = ПолучитьСуммуПоказателяПоСтраницам("Раздел31", "П000310004003");
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00030"+"00030"+"03", ЗначениеСтроки030Графа03);
	
	ЗначениеСтроки040Графа03 = ПолучитьСуммуПоказателяПоСтраницам("Раздел31", "П000310005003");
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00030"+"00040"+"03", ЗначениеСтроки040Графа03);
	
	ЗначениеСтроки050Графа03 = ПолучитьСуммуПоказателяПоСтраницам("Раздел31", "П000310006003");
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00030"+"00050"+"03", ЗначениеСтроки050Графа03);
	
	Для Инд = 3 По 8 Цикл
		
		НомерГрафы = Формат(Инд, "ЧЦ=2; ЧН=; ЧВН=");
		
		Строка010ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00030" + "00010" + НомерГрафы);
		Строка020ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00030" + "00020" + НомерГрафы);
		Строка030ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00030" + "00030" + НомерГрафы);
		Строка040ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00030" + "00040" + НомерГрафы);
		Строка050ПоГрафе = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00030" + "00050" + НомерГрафы);
		
		ЗначениеСтроки060ПоГрафе = Строка010ПоГрафе + Строка020ПоГрафе - Строка030ПоГрафе + Строка040ПоГрафе - Строка050ПоГрафе;
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00030" + "00060" + НомерГрафы, ЗначениеСтроки060ПоГрафе);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетРаздел31(МестоРазмещенияДанных)
	
	Строка020 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00031"+"00020"+"03");
	Строка030 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00031"+"00030"+"03");
	Строка040 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00031"+"00040"+"03");
	Строка050 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00031"+"00050"+"03");
	Строка060 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П00031"+"00060"+"03");
	
	ЗначениеСтроки070 = Строка020 + Строка030 - Строка040 + Строка050 - Строка060;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П00031"+"00070"+"03", ЗначениеСтроки070);
	
КонецПроцедуры

Функция ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, АдресДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		ЗначениеВСтруктуре = Неопределено;
		Если МестоРазмещенияДанных.Свойство(АдресДанных, ЗначениеВСтруктуре) Тогда
			Возврат ЗначениеВСтруктуре;
		Иначе
			ВызватьИсключение "Невозможно получить данные из структуры: поле " + АдресДанных + " не существует";
		КонецЕсли;
	Иначе
		// Это должны быть данные в поле табличного документа.
		Возврат МестоРазмещенияДанных.Области[АдресДанных].Значение;
	КонецЕсли;
	
КонецФункции

Процедура ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, АдресДанных, ЗначениеДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		МестоРазмещенияДанных.Вставить(АдресДанных, ЗначениеДанных);
	Иначе
		МестоРазмещенияДанных.Области[АдресДанных].Значение = ЗначениеДанных;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСуммуПоказателяПоСтраницам(ИмяСтраницы, ИмяПоказателя, Условие = Неопределено)
	
	Результат = 0;
	
	ПолеТабличногоДокумента = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы];
	
	СтруктураРаздела = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, СтруктураРаздела) Тогда
		Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
			ОбработкаВТабличномПоле = СтраницаРаздела.АктивнаяСтраница;
			Если ОбработкаВТабличномПоле Тогда
				Если Условие <> Неопределено И ПолеТабличногоДокумента.Области[Условие.Показатель].Значение <> Условие.ЗначениеПоказателя Тогда
					ЗначениеПоказателя = 0;
				Иначе
					ЗначениеПоказателя = ПолеТабличногоДокумента.Области[ИмяПоказателя].Значение;
				КонецЕсли;
			Иначе
				Если Условие <> Неопределено И СтраницаРаздела.Данные[Условие.Показатель] <> Условие.ЗначениеПоказателя Тогда
					ЗначениеПоказателя = 0;
				Иначе
					ЗначениеПоказателя = СтраницаРаздела.Данные[ИмяПоказателя];
				КонецЕсли;
			КонецЕсли;
			Результат = Результат + ЗначениеПоказателя;
		КонецЦикла;
	Иначе
		Если Условие <> Неопределено И ПолеТабличногоДокумента.Области[Условие.Показатель].Значение <> Условие.ЗначениеПоказателя Тогда
			Результат = 0;
		Иначе
			Результат = ПолеТабличногоДокумента.Области[ИмяПоказателя].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЗначенияНовогоЭкземпляра()
	
	КодПериода = Формат(мДатаКонцаПериодаОтчета, "ДФ=MM");
	ПолеТаблДокументаТитульный.Области.НалоговыйПериод1.Значение = Сред(КодПериода, 1, 1);
	ПолеТаблДокументаТитульный.Области.НалоговыйПериод2.Значение = Сред(КодПериода, 2, 1);
	
	ПолеТаблДокументаТитульный.Области.МестоНахожденияУчета1.Значение = "2";
	ПолеТаблДокументаТитульный.Области.МестоНахожденияУчета2.Значение = "1";
	ПолеТаблДокументаТитульный.Области.МестоНахожденияУчета3.Значение = "4";
	
	ПолеТаблДокументаРаздел1.Области["П00010"+"00010"+"03"].Значение = "18210605000021000110";
	//
	//ПолеТаблДокументаРаздел2.Области["П00020"+"00080"+"03"].Значение = 1500;
	//ПолеТаблДокументаРаздел2.Области["П00020"+"00090"+"03"].Значение = 125000;
	//ПолеТаблДокументаРаздел2.Области["П00020"+"00100"+"03"].Значение = 125000;
	//ПолеТаблДокументаРаздел2.Области["П00020"+"00110"+"03"].Значение = 5000;
	//ПолеТаблДокументаРаздел2.Области["П00020"+"00120"+"03"].Значение = 5000;
	//
	//ПолеТаблДокументаРаздел21.Области["П00021"+"00020"+"03"].Значение = 25000;
	
КонецПроцедуры

// Процедура предназначена для настройки параметров полей ввода для предотвращения
// ввода некорректных данных при ручном заполнении отчета. 
// Необходима для совместимости с платформой версии 8.2.13 и более ранних.
Процедура НастроитьПоляВвода()
	
	МаскаКБК   = "99999999999999999999";
	МаскаОКАТО = "99999999999";
	
	ПолеТаблДокументаТитульный.Области["НалоговыйПериод1"].ЭлементУправления.Маска = "9";
	ПолеТаблДокументаТитульный.Области["НалоговыйПериод2"].ЭлементУправления.Маска = "9";
	
	ПолеТаблДокументаТитульный.Области["КодИМНС1"].ЭлементУправления.Маска = "9";
	ПолеТаблДокументаТитульный.Области["КодИМНС2"].ЭлементУправления.Маска = "9";
	ПолеТаблДокументаТитульный.Области["КодИМНС3"].ЭлементУправления.Маска = "9";
	ПолеТаблДокументаТитульный.Области["КодИМНС4"].ЭлементУправления.Маска = "9";
	
	ПолеТаблДокументаТитульный.Области["МестоНахожденияУчета1"].ЭлементУправления.Маска = "9";
	ПолеТаблДокументаТитульный.Области["МестоНахожденияУчета2"].ЭлементУправления.Маска = "9";
	ПолеТаблДокументаТитульный.Области["МестоНахожденияУчета3"].ЭлементУправления.Маска = "9";
	
	ПолеТаблДокументаТитульный.Области["ФормаРеорганизации"].ЭлементУправления.Маска = "9";
	
	ПолеТаблДокументаТитульный.Области["РеорганизацияИНН"].ЭлементУправления.Маска = "9999999999";
	ПолеТаблДокументаТитульный.Области["РеорганизацияКПП"].ЭлементУправления.Маска = "999999999";
	
	ПолеТаблДокументаРаздел1.Области["П000100001003"].ЭлементУправления.Маска = МаскаКБК;
	ПолеТаблДокументаРаздел1.Области["П000100002003"].ЭлементУправления.Маска = МаскаОКАТО;
	
	ПолеТаблДокументаРаздел2.Области["П00020"+"00080"+"03"].ЭлементУправления.МинимальноеЗначение = 1500;
	ПолеТаблДокументаРаздел2.Области["П00020"+"00080"+"03"].ЭлементУправления.МаксимальноеЗначение = 7500;
	
	ПолеТаблДокументаРаздел2.Области["П00020"+"00090"+"03"].ЭлементУправления.МинимальноеЗначение = 25000;
	ПолеТаблДокументаРаздел2.Области["П00020"+"00090"+"03"].ЭлементУправления.МаксимальноеЗначение = 125000;
	
	ПолеТаблДокументаРаздел2.Области["П00020"+"00100"+"03"].ЭлементУправления.МинимальноеЗначение = 25000;
	ПолеТаблДокументаРаздел2.Области["П00020"+"00100"+"03"].ЭлементУправления.МаксимальноеЗначение = 125000;
	
	ПолеТаблДокументаРаздел2.Области["П00020"+"00110"+"03"].ЭлементУправления.МинимальноеЗначение = 5000;
	ПолеТаблДокументаРаздел2.Области["П00020"+"00110"+"03"].ЭлементУправления.МаксимальноеЗначение = 7000;
	
	ПолеТаблДокументаРаздел2.Области["П00020"+"00120"+"03"].ЭлементУправления.МинимальноеЗначение = 5000;
	ПолеТаблДокументаРаздел2.Области["П00020"+"00120"+"03"].ЭлементУправления.МаксимальноеЗначение = 7000;
	
	ПолеТаблДокументаРаздел21.Области["П00021"+"00020"+"03"].ЭлементУправления.МаксимальноеЗначение = 125000;
	
КонецПроцедуры


Процедура УстановитьФорматВыводаВПоляхВвода() Экспорт
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента		= СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;

КонецПроцедуры

Процедура Очистить() Экспорт

	Если ОчиститьОтчет() Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	ОписаниеТиповБулево    = Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",                         ОписаниеТиповСтрока100);
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",             ОписаниеТиповЧисло1);
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",              ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",           ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",                       ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",                    ОписаниеТиповСтрока50);
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",                 ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",         ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела", ОписаниеТиповСтрока50);
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым",       ОписаниеТиповБулево);
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел31";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт
КонецПроцедуры

Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт
КонецПроцедуры

Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы) Экспорт
КонецПроцедуры

Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из ТабличноеПоле.Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураДанныхПоля;

КонецФункции

Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт

	РегламентированнаяОтчетность.роУстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);

КонецПроцедуры

Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

Процедура ПоказатьПериод()
	
	ОтчетныйГод = Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=");
	ПолеТаблДокументаТитульный.Области.ОтчетныйГод1.Значение = Сред(ОтчетныйГод, 1, 1);
	ПолеТаблДокументаТитульный.Области.ОтчетныйГод2.Значение = Сред(ОтчетныйГод, 2, 1);
	ПолеТаблДокументаТитульный.Области.ОтчетныйГод3.Значение = Сред(ОтчетныйГод, 3, 1);
	ПолеТаблДокументаТитульный.Области.ОтчетныйГод4.Значение = Сред(ОтчетныйГод, 4, 1);
	
	ПредставлениеПериодаОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");
	СтрокаЗаголовка = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + ПредставлениеПериодаОтчета + ")";
	Заголовок = СтрокаЗаголовка;
	
КонецПроцедуры

Процедура ЗаполнитьДатуПодписи()

	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "));
	ПроставитьНаВсехЛистах("ДатаПодписиПолная", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ=dd.MM.yyyy"), ""), Ложь);

КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах()
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	// Выясним, есть ли представитель.
	КодНО = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП   = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП");
	
	СведенияОПредставителе = РегламентированнаяОтчетность.ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			// Поле подписанта остается пустым.
		Иначе
			СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		Подписант                            = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя                = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ПолеТаблДокументаТитульный.Области.ТипПодписанта.Значение = ТипПодписанта;
	ПолеТаблДокументаТитульный.Области.Подписант.Значение = Подписант;
	ПолеТаблДокументаТитульный.Области.НаименованиеОрганизацииПредставителя.Значение = НаименованиеОрганизацииПредставителя;
	ПолеТаблДокументаТитульный.Области.НаименованиеДокументаПредставителя.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)
	
	Если НЕ ИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКВЭД";
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		ПроставитьНаВсехЛистах("ИНН", ИНН);
		
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		ПроставитьНаВсехЛистах("КПП", КПП);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Для Инд = 1 По 4 Цикл
			ПолеТаблДокументаТитульный.Области["КодИМНС" + Инд].Значение = Сред(КодНО, Инд, 1);
		КонецЦикла;
		
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
		
		ПолеТаблДокументаТитульный.Области.Налогоплательщик.Значение = НаименованиеОрганизации;
		ПолеТаблДокументаТитульный.Области.ОКВЭД.Значение = СведенияОбОрганизации.ОКВЭД;
		ПолеТаблДокументаТитульный.Области.Телефон.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");
	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПоказатьБланк"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

Процедура ВывестиНаПечатьЛистЧерновика(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт
	
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура ПечатьЧерновика(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	мРежимПечати = Истина;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	мРежимПечати = Ложь;

КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	
	Перем ТаблицаСтраниц;
	
	Вариант = ВидДокумента * НомерКорректировки;
	
	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП     = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП");
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;
	
	мВариант = Вариант;
	
	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;
	
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация =				мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи =				мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения =			мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения =	мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий =				мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
		// Отображаем данные, хранящиеся в структуре многостраничных разделов.
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;
	КонецЕсли;

	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	мАвтоВыборКодов = ?(мАвтоВыборКодов = Неопределено, Ложь, мАвтоВыборКодов);

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");
			
			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВыводаВПоляхВвода();
	
	ОтобразитьНомерКорректировки();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	Делитель = СоответствиеЕдиницыИзмеренияДелителю[ЕдиницаИзмерения];
	Возврат Окр(ИсходноеЧисло / Делитель, ТочностьЕдиницыИзмерения) * Делитель;

КонецФункции

Процедура ОтобразитьНомерКорректировки()

	НомерКорректировки = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорректировки, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	Для Инд = 1 По 3 Цикл
		ПолеТаблДокументаТитульный.Области["НомерКорректировки" + Инд].Значение = ?(Инд > СтрДлинаНомерКорректировкиСтрока, "-", Сред(НомерКорректировкиСтрока, Инд, 1));
	КонецЦикла;

Конецпроцедуры

Процедура УправлениеЭУВидДокументаНомерКорректировки()
	
	НомерКорректировкиДоступен = (ВидДокумента = 1);
	ЭлементыФормы.НомерКорректировки.Доступность = НомерКорректировкиДоступен;
	Если НомерКорректировкиДоступен И НомерКорректировки = 0 Тогда
		НомерКорректировки = 1;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

Процедура ЗаполнитьАвто() Экспорт

	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьАвто()

Процедура ОбработкаВыбораИФНС()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.Ссылка КАК Ссылка,
	               |	СправочникИФНС.КПП КАК КПП,
	               |	СправочникИФНС.Код КАК КодНО,
	               |	СправочникИФНС.Представитель КАК Представитель
	               |ИЗ
	               |	Справочник.РегистрацияВИФНС КАК СправочникИФНС
	               |ГДЕ
	               |	СправочникИФНС.Владелец = &Владелец
	               |	И СправочникИФНС.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодНО,
	               |	КПП";
	Запрос.УстановитьПараметр("Владелец", Организация);
	ТаблицаВыбора = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВыбора.Колонки.КПП.Ширина = 10;
	ТаблицаВыбора.Колонки.КодНО.Ширина = 7;
	ТаблицаВыбора.Колонки.КодНО.Заголовок = "ИФНС";
	ТаблицаВыбора.Колонки.Представитель.Ширина = 42;
	
	КодИМНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП"); 
	Отбор = Новый Структура("КодНО, КПП", КодИМНС, КПП);
	
	Ссылки = ТаблицаВыбора.ВыгрузитьКолонку("Ссылка");
	ТаблицаВыбора.Колонки.Удалить("Ссылка");
	
	Если ТаблицаВыбора.Количество() <> 0 Тогда
		//определение первоначального значеня
		Строки = ТаблицаВыбора.НайтиСтроки(Отбор);
		
		Если Строки.Количество() > 0 Тогда
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС", Строки[0]);
		Иначе
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС");
		КонецЕсли;
		
		Если РезультатВыбора <> Неопределено Тогда
			ВыбранныйКодНО = РезультатВыбора.КодНО;
			
			//доработка результата выбора
			ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
			Для Инд = ДлинаКодаНО + 1 По 4 Цикл
				ВыбранныйКодНО = "0" + ВыбранныйКодНО;
			КонецЦикла;
			
			//заполнение отчета данными выбора
			Для Инд = 1 По 4 Цикл
				ПолеТаблДокументаТитульный.Области["КодИМНС" + Инд].Значение = Сред(ВыбранныйКодНО, Инд, 1);
			КонецЦикла;
			
			ПроставитьНаВсехЛистах("КПП", РезультатВыбора.КПП);
			
			//заполняем сведения о подписантах
			ЗаполнитьСведенияОПодписантах();
			
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщить("Код налогового органа необходимо задать в справочнике ""Организации"".", СтатусСообщения.Информация);
	Иначе
		Сообщить("Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрация в ИФНС"".", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)

	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);

КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	ПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)
	
	УправлениеЭУВидДокументаНомерКорректировки();
	ОтобразитьНомерКорректировки();
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)

	ОтобразитьНомерКорректировки();

КонецПроцедуры

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	ЗаполнитьСведенияОбОрганизации();

КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт

	Перем ТекущаяОбласть;

	//РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры

Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();

КонецПроцедуры

Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВыводаВПоляхВвода();
	Расчет();

КонецПроцедуры

Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьСведенияОбОрганизации(Истина);
	ЗаполнитьДатуПодписи();

КонецПроцедуры

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(НастройкиФормы.МакетСоставаПоказателей);
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",            ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",        ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",             мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",                   мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",              ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура ФормироватьСтруктуруСтраницОтчета()
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);
	
	мДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел21";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел31";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел31";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	
	Если ФлажокОтклАвтоРасчет = Ложь Тогда
		Ответ = Вопрос("Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			ФлажокОтклАвтоРасчет = Истина;
			Возврат;
		КонецЕсли;
		Расчет();
	КонецЕсли;
	
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

// Процедура является частью механизма автосохранения
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()

	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// преобразовываем, при необходимости, значение показателя к типу "Строка"
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// проставляем значение в табличные документы
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// проставляем значение в многостраничные разделы
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина)
	
	Если ЗапрашиватьПодтверждение Тогда
		Ответ = Вопрос("Внимание! Будут очищены все разделы (листы) отчета." + Символы.ПС + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// очищаем поля табличных документов (кроме "Титульный")
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		Если СтрокаУровня1.ИмяСтраницы <> "Титульный" Тогда
			ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;

	// удаляем все страницы, кроме текущих
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;
		Если ТаблицаТекущейСтраницы.Количество() > 1 Тогда
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
		КонецЕсли;
		ПанельРаздела = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "НазваниеПанелиТабличногоПоляРаздела");
		Если ЭлементыФормы[ПанельРаздела].ТекущаяСтраница.Имя = ИмяТекущейСтраницыПанели Тогда
			РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
		КонецЕсли;
	КонецЦикла;

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	ЗаполнитьДатуПодписи();
	Расчет();
	
	Модифицированность = Истина;

	Возврат Истина;
	
КонецФункции

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СтруктураXML501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодНО)
			+ "_" + Параметры.КодНО
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННОрг), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Сред(Раздел.Ключ, 24), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВерсПрог",  РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("ДатаДок",   Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("ОтчетГод",  Титульный.ОтчетныйГод);
	Параметры.Вставить("Период",    СокрЛП(Титульный.НалоговыйПериод));
	Параметры.Вставить("КодНО",     СокрЛП(Титульный.КодИМНС));
	Параметры.Вставить("НомКорр",   Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("ПоМесту",   СокрЛП(Титульный.МестоНахожденияУчета));
	Параметры.Вставить("ОКВЭД",     СокрЛП(Титульный.ОКВЭД));
	Параметры.Вставить("Тлф",       СокрЛП(Титульный.Телефон));
	Параметры.Вставить("НаимОрг",   СокрЛП(Титульный.Налогоплательщик));
	Параметры.Вставить("ИННОрг",    СокрЛП(Организация.ИНН));
	Параметры.Вставить("КППОрг",    СокрЛП(Титульный.КПП));
	
	Параметры.Вставить("ТипПодписанта",        СокрЛП(Титульный.ТипПодписанта));
	Параметры.Вставить("НаимОргПредставителя", СокрЛП(Титульный.НаименованиеОрганизацииПредставителя));
	Параметры.Вставить("НаимДокПредставителя", СокрЛП(Титульный.НаименованиеДокументаПредставителя));
	
	Параметры.Вставить("ФормРеорг",  СокрЛП(Титульный.ФормаРеорганизации));
	Параметры.Вставить("ИННЮЛРеорг", СокрЛП(Титульный.РеорганизацияИНН));
	Параметры.Вставить("КППРеорг",   СокрЛП(Титульный.РеорганизацияКПП));
	
	ФИОПодписанта = РазложитьФИО(Титульный.Подписант);
	Параметры.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	Параметры.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	Параметры.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	Параметры.Вставить("ИмяФайлаСхемы",             "NO_IGBISND_1_021_00_05_01_01.xsd");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_IGBISND");
	
	Параметры.Вставить("КодИФНСПосредника", СокрЛП(Организация.КодИФНСПолучателя));
	Параметры.Вставить("ИдФайл",            СформироватьИдФайл(Параметры));
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	Если ПустаяСтрока(Параметры.Период) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового периода!", "Титульный", "НалоговыйПериод1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОтчетГод) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан отчетный год!", "Титульный", "ОтчетныйГод");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КодНО) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ПоМесту) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по месту учета!", "Титульный", "МестоНахожденияУчета1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.НаимОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан налогоплательщик!", "Титульный", "Налогоплательщик");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИННОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КППОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ФормаРеорганизации = Параметры.ФормРеорг;
	ПроверяемыеКодыРеорганизации = "1|2|3|5|6";
	ТребуетсяУказаниеИННКППРеорганизации = (НЕ ПустаяСтрока(ФормаРеорганизации) И Найти(ПроверяемыеКодыРеорганизации, ФормаРеорганизации) <> 0);
	Если ТребуетсяУказаниеИННКППРеорганизации Тогда
		ДлинаИННРеорг = СтрДлина(Параметры.ИННЮЛРеорг);
		Если ДлинаИННРеорг <> 10 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации!", "Титульный", "РеорганизацияИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДлинаКППРеорг = СтрДлина(Параметры.КППРеорг);
		Если ДлинаКППРеорг <> 9 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации!", "Титульный", "РеорганизацияКПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ТипПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан признак лица, подписавшего документ!", "Титульный", "ТипПодписанта");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "Подписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Параметры.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "Подписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.ТипПодписанта = "2" И ПустаяСтрока(Параметры.НаимДокПредставителя) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "НаименованиеДокументаПредставителя");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДанныеРаздела1 =  мДанныеОтчета.Раздел1;
	
	ДлинаКБК = СтрДлина(ДанныеРаздела1.П000100001003);
	Если ДлинаКБК <> 20 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаКБК = 0, "", "верно") + " задан КБК!", "Раздел1", "П000100001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДлинаОКАТО = СтрДлина(ДанныеРаздела1.П000100002003);
	Если ДлинаОКАТО <> 11 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не" + ?(ДлинаОКАТО = 0, "", "верно") + " задан код по ОКАТО!", "Раздел1", "П000100002003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДанныеРаздела21 = мДанныеОтчета.Раздел21;
	ДанныеРаздела31 = мДанныеОтчета.Раздел31;
	
	ТаблицаПроверкиПоИгровымПолям = Новый ТаблицаЗначений;
	ТаблицаПроверкиПоИгровымПолям.Колонки.Добавить("ИгровыеПоля",       ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15));
	ТаблицаПроверкиПоИгровымПолям.Колонки.Добавить("СтраницаРаздела21", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15));
	ТаблицаПроверкиПоИгровымПолям.Колонки.Добавить("СтраницаРаздела31", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15));
	
	Для Каждого Лист21 Из ДанныеРаздела21 Цикл
		ДанныеЛиста = Лист21.Данные;
		ИндексЛиста = ДанныеРаздела21.Индекс(Лист21) + 1;
		
		ВРазделеЕстьДанные = (ДанныеЛиста.П000210002003 <> 0
		                 ИЛИ ДанныеЛиста.П000210003003 <> 0
		                 ИЛИ ДанныеЛиста.П000210004003 <> 0
		                 ИЛИ ДанныеЛиста.П000210005003 <> 0
		                 ИЛИ ДанныеЛиста.П000210006003 <> 0
		                 ИЛИ ДанныеЛиста.П000210007003 <> 0
		                 ИЛИ ДанныеЛиста.П000210008003 <> 0
		                 ИЛИ Окр(ДанныеЛиста.П000210009003,0) <> 0);
		Если ВРазделеЕстьДанные И ДанныеЛиста.П000210001003 = 0 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.1 на странице " + ИндексЛиста + " не указано количество игровых полей на игровом столе!", "Раздел21", "П000210001003", ИндексЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЗаписьОЛисте = ТаблицаПроверкиПоИгровымПолям.Добавить();
		ЗаписьОЛисте.ИгровыеПоля = ДанныеЛиста.П000210001003;
		ЗаписьОЛисте.СтраницаРаздела21 = ИндексЛиста;
	КонецЦикла;
	
	Для Каждого Лист31 Из ДанныеРаздела31 Цикл
		ДанныеЛиста = Лист31.Данные;
		ИндексЛиста = ДанныеРаздела31.Индекс(Лист31) + 1;
		
		ВРазделеЕстьДанные = (ДанныеЛиста.П000310002003 <> 0
		                 ИЛИ ДанныеЛиста.П000310003003 <> 0
		                 ИЛИ ДанныеЛиста.П000310004003 <> 0
		                 ИЛИ ДанныеЛиста.П000310005003 <> 0
		                 ИЛИ ДанныеЛиста.П000310006003 <> 0
		                 ИЛИ ДанныеЛиста.П000310007003 <> 0);
		Если ВРазделеЕстьДанные И ДанныеЛиста.П000310001003 = 0 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1 на странице " + ИндексЛиста + " не указано количество игровых полей на игровом столе!", "Раздел31", "П000310001003", ИндексЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЗаписьОЛисте = ТаблицаПроверкиПоИгровымПолям.Добавить();
		ЗаписьОЛисте.ИгровыеПоля = ДанныеЛиста.П000310001003;
		ЗаписьОЛисте.СтраницаРаздела31 = ИндексЛиста;
	КонецЦикла;
	
	ТаблицаКоличестваИгровыхПолей = ТаблицаПроверкиПоИгровымПолям.Скопировать(, "ИгровыеПоля");
	ТаблицаКоличестваИгровыхПолей.Свернуть("ИгровыеПоля");
	
	Для Каждого СтрокаКоличестваИгровыхПолей Из ТаблицаКоличестваИгровыхПолей Цикл
		КоличествоИгровыхПолей = СтрокаКоличестваИгровыхПолей.ИгровыеПоля;
		Если КоличествоИгровыхПолей = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборРаздела21 = Новый Структура("ИгровыеПоля, СтраницаРаздела31", КоличествоИгровыхПолей, 0);
		СтрокиПоКоличеству = ТаблицаПроверкиПоИгровымПолям.НайтиСтроки(ОтборРаздела21);
		Если СтрокиПоКоличеству.Количество() > 1 Тогда
			ИндексПервогоЛиста = СтрокиПоКоличеству[0].СтраницаРаздела21;
			СписокСтраниц = "";
			Для Инд = 0 По СтрокиПоКоличеству.ВГраница() Цикл
				ЭтоПоследняяСтрока = (Инд = СтрокиПоКоличеству.ВГраница());
				Разделитель = ?(ЭтоПоследняяСтрока, " и ",  ", ");
				СтрокаПоКоличеству = СтрокиПоКоличеству[Инд];
				СписокСтраниц = СписокСтраниц + ?(ПустаяСтрока(СписокСтраниц), "", Разделитель) + СтрокаПоКоличеству.СтраницаРаздела21;
			КонецЦикла;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.1 на страницах " + СписокСтраниц + " совпадает количество игровых полей на игровом столе!", "Раздел21", "П000210001003", ИндексПервогоЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКоличестваИгровыхПолей Из ТаблицаКоличестваИгровыхПолей Цикл
		КоличествоИгровыхПолей = СтрокаКоличестваИгровыхПолей.ИгровыеПоля;
		Если КоличествоИгровыхПолей = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборРаздела31 = Новый Структура("ИгровыеПоля, СтраницаРаздела21", КоличествоИгровыхПолей, 0);
		СтрокиПоКоличеству = ТаблицаПроверкиПоИгровымПолям.НайтиСтроки(ОтборРаздела31);
		Если СтрокиПоКоличеству.Количество() > 1 Тогда
			ИндексПервогоЛиста = СтрокиПоКоличеству[0].СтраницаРаздела31;
			СписокСтраниц = "";
			Для Инд = 0 По СтрокиПоКоличеству.ВГраница() Цикл
				ЭтоПоследняяСтрока = (Инд = СтрокиПоКоличеству.ВГраница());
				Разделитель = ?(ЭтоПоследняяСтрока, " и ",  ", ");
				СтрокаПоКоличеству = СтрокиПоКоличеству[Инд];
				СписокСтраниц = СписокСтраниц + ?(ПустаяСтрока(СписокСтраниц), "", Разделитель) + СтрокаПоКоличеству.СтраницаРаздела31;
			КонецЦикла;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1 на страницах " + СписокСтраниц + " совпадает количество игровых полей на игровом столе!", "Раздел31", "П000310001003", ИндексПервогоЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПроверкиПоИгровымПолям.Свернуть("ИгровыеПоля", "СтраницаРаздела21, СтраницаРаздела31");
	Для Каждого СтрокаПроверкиИгровыхПолей Из ТаблицаПроверкиПоИгровымПолям Цикл
		КоличествоИгровыхПолей = СтрокаПроверкиИгровыхПолей.ИгровыеПоля;
		Если КоличествоИгровыхПолей = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПроверкиИгровыхПолей.СтраницаРаздела21 = 0 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2.1 нет листов соответствующих количеству игровых полей " + КоличествоИгровыхПолей + ", указанному в разделе 3.1!", "Раздел21", "П000210001003", 1);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаПроверкиИгровыхПолей Из ТаблицаПроверкиПоИгровымПолям Цикл
		КоличествоИгровыхПолей = СтрокаПроверкиИгровыхПолей.ИгровыеПоля;
		Если КоличествоИгровыхПолей = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПроверкиИгровыхПолей.СтраницаРаздела31 = 0 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1 нет листов соответствующих количеству игровых полей " + КоличествоИгровыхПолей + ", указанному в разделе 2.1!", "Раздел31", "П000310001003", 1);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Если ТипЗнч(ПоказателиРаздела) = Тип("Структура") Тогда
				Для Каждого Эл Из ПоказателиРаздела Цикл
					Параметры.Вставить(Эл.Ключ, Эл.Значение);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	МассивДобавленныхСтрок = Новый Массив();
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если МассивДобавленныхСтрок.Найти(Стр) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ЛистыМногостраничногоРаздела = Неопределено;
				Если Не ПустаяСтрока(Стр.Раздел) И мДанныеОтчета.Свойство(Стр.Раздел, ЛистыМногостраничногоРаздела) Тогда
					Для Каждого Лист Из ЛистыМногостраничногоРаздела Цикл
						УзелМногостраничногоРаздела = СкопироватьУзел(Узел, Стр);
						МассивДобавленныхСтрок.Добавить(УзелМногостраничногоРаздела);
						ДанныеЛиста = Лист.Данные;
						Для Каждого УзелПоказателя Из УзелМногостраничногоРаздела.Строки Цикл
							Если НЕ ПустаяСтрока(УзелПоказателя.Ключ) И СвойствоОпределено(ДанныеЛиста, УзелПоказателя.Ключ) Тогда
								ВывестиПоказательВXML(УзелПоказателя, ДанныеЛиста[УзелПоказателя.Ключ]);
							Иначе
								Стр.Значение = "";
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				Иначе
					ЗаполнитьДаннымиУзел(Параметры, Стр);
				КонецЕсли;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И СвойствоОпределено(Параметры, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если СвойствоОпределено(Параметры, Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	//ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", Параметры.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура Печать(ВидПечати) Экспорт

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 ИЛИ ТочностьЕдиницыИзмерения <> 0 Тогда
		Сообщить("Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	мРежимПечати = Истина;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  СтрокаУровня1.ИмяПоляТабличногоДокум);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	мРежимПечати = Ложь;
	
КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

Процедура ВывестиНаПечатьЛист(Параметры)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаТитульный", "МЧБ_2012Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел1",   "МЧБ_2012Кв1_Раздел1");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел2",   "МЧБ_2012Кв1_Раздел2");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел21",  "МЧБ_2012Кв1_Раздел21");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел3",   "МЧБ_2012Кв1_Раздел3");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел31",  "МЧБ_2012Кв1_Раздел31");

	МЧБРаздела = СоответствиеРазделовМакетам[Параметры.ИмяТабличногоПоля];

	сохрТаблДок = ЭлементыФормы[Параметры.ИмяТабличногоПоля].ПолучитьОбласть();

	МакетМЧБ = ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 10;
	МакетМЧБ.ПолеСправа = 10;
	МакетМЧБ.ПолеСнизу =  10;
	МакетМЧБ.ПолеСлева =  10;

	ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ);

	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], МакетМЧБ, СтрПоля);

	ВывестиНаПечатьЛистРаздела(Параметры);

	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);

КонецПроцедуры

Процедура ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ)

	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ЭлементыФормы[Параметры.ИмяТабличногоПоля];
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;

	// особая обработка ФИО на титульном листе
	Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
		
		ПокПодписант = Показатели.Найти("Подписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По ИНН.ВГраница() Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;

	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
						ЗначениеВыведено = Истина;
					КонецЕсли;
				Иначе
				
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					Сообщить("Не удалось заполнить область """ + ИмяОбласти + """!");
				КонецЕсли;
			Иначе
				Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
					Дополнять_ = НЕ (Лев(РезультатПоиска.Имя, СтрДлина("НомСтр")) = "НомСтр"
								ИЛИ Лев(РезультатПоиска.Имя, СтрДлина("СоставленаНа")) = "СоставленаНа");
				Иначе
					Дополнять_ = Лев(РезультатПоиска.Имя, СтрДлина("НомСтр")) <> "НомСтр";
				КонецЕсли;
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, , Дополнять_);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, Дополнять_ = Истина)
	
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) И Дополнять_ Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=dd.MM.yyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = Найти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = Найти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	Состояние(Заголовок + ". Формирование печатной формы " + СтруктураПараметровЛиста.НаименованиеЛиста + "...");
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	мПечатныеФормы.Добавить(ПечатныеЛисты[0], СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;

	ТаблДок = ЭлементыФормы[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Процедура КоманднаяПанельДействийПоказатьБланк(Кнопка)

	Печать(Кнопка.Имя);

КонецПроцедуры

Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

Процедура ПоискВРегламентированномОтчете(Форма) Экспорт
	
	ФормаПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиПоиска", Форма);
	ЧтоИскать = ФормаПоиска.ОткрытьМодально();
	Если ЧтоИскать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мРезультатПоиска = Новый ТаблицаЗначений;
	мРезультатПоиска.Колонки.Добавить("Раздел");
	мРезультатПоиска.Колонки.Добавить("Страница");
	мРезультатПоиска.Колонки.Добавить("НаименованиеЛиста");
	мРезультатПоиска.Колонки.Добавить("ИмяЯчейки");
	мРезультатПоиска.Колонки.Добавить("СтрокаПП");
	мРезультатПоиска.Колонки.Добавить("НайденоВСтроке");
	
	мСчетчикиСтраницПриПоиске = Новый ТаблицаЗначений;
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("ИмяТабличногоПоля");
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("Счетчик");
	
	ПечатьЧерновика("", ЧтоИскать);
	
	Состояние("Поиск завершен.");
	Если мРезультатПоиска.Количество() = 0 Тогда
		Предупреждение("По Вашему запросу ничего не найдено!");
		Возврат;
	КонецЕсли;
	
	ФормаРезультатыПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("РезультатыПоиска", Форма);
	Если ФормаРезультатыПоиска.Открыта() Тогда
		ФормаРезультатыПоиска.Закрыть();
	КонецЕсли;
	ФормаРезультатыПоиска.Заголовок = Заголовок + " - результаты поиска значения [" + ЧтоИскать.ИскомоеЗначение + "]";
	ФормаРезультатыПоиска.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаРезультатыПоиска.ЭлементыФормы.РезультатыПоиска.Значение = мРезультатПоиска.Скопировать();
	ФормаРезультатыПоиска.НадписьНайдено = "Найдено: " + Формат(мРезультатПоиска.Количество(), "ЧГ=");
	ФормаРезультатыПоиска.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры


// Имена вспомогательных макетов и форм.
НастройкиФормы = Новый Структура;
НастройкиФормы.Вставить("МакетСоставаПоказателей", "СоставПоказателей2012Кв1");
НастройкиФормы.Вставить("МакетСписковВводаКодов",  "Списки2012Кв1");
НастройкиФормы.Вставить("МакетФорматаВыгрузки501", "СхемаВыгрузки501");

// Требуется для совместимости с процедурами общего модуля РО.
мСоставПоказателей = НастройкиФормы.МакетСоставаПоказателей;

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

СоответствиеЕдиницыИзмеренияДелителю = Новый Соответствие;
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 1);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 1000);
СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 1000000);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // Зеленый
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // Желтый
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

ТаблицаСтраницыРаздела = РегламентированнаяОтчетность.ПолучитьТаблицуМногостраничногоРаздела();
мСтруктураМногостраничныхРазделов = Новый Структура;
мСтруктураМногостраничныхРазделов.Вставить("Раздел21", ТаблицаСтраницыРаздела.Скопировать());
мСтруктураМногостраничныхРазделов.Вставить("Раздел31", ТаблицаСтраницыРаздела.Скопировать());

мСтруктураМногострочныхРазделов = Новый Структура;

// Версия формы
мВерсияФормы = "01/02/2012";

// Код отчета, равен КНД
мКодОтчета = "1152011";

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 5.01", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;