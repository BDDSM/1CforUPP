Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ЭтоОтработкаРасшифровки 
	   И Не СохранениеНастроек.ЗаполнитьНастройкиПриОткрытииОтчета(ОтчетОбъект) Тогда
		ИнициализацияОтчета();
		ДатаРасходовПо = ОбщегоНазначения.ПолучитьРабочуюДату();
		ДатаПриходовПо = ОбщегоНазначения.ПолучитьРабочуюДату();
		ДатаРасходовС = НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату());
		ДатаПриходовС = НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату());
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРасходовПо"));
		Если ЗначениеПараметра <> Неопределено тогда
			ЗначениеПараметра.Значение = ДатаРасходовПо;
		КонецЕсли;
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаПриходовПо"));
		Если ЗначениеПараметра <> Неопределено тогда
			ЗначениеПараметра.Значение = ДатаПриходовПо;
		КонецЕсли;
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРасходовС"));
		Если ЗначениеПараметра <> Неопределено тогда
			ЗначениеПараметра.Значение = ДатаРасходовС;
		КонецЕсли;
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаПриходовС"));
		Если ЗначениеПараметра <> Неопределено тогда
			ЗначениеПараметра.Значение = ДатаПриходовС;
		КонецЕсли;
		
	КонецЕсли;
	СписокЗначенияДляВыбора = Новый СписокЗначений;
	СписокЗначенияДляВыбора.Добавить("Работники", "работникам");
	СписокЗначенияДляВыбора.Добавить("Кандидаты", "кандидатам");
	
	ЭлементыФормы.Данные.СписокВыбора = СписокЗначенияДляВыбора;
	ЭлементыФормы.Данные.Значение = "Работники";
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Данные"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = "Работники";
	КонецЕсли;
	
    ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
    ВалютаУпрУчета  = Константы.ВалютаУправленческогоУчета.Получить();
	
	СписокЗначенияДляВыбора = Новый СписокЗначений;
	Если ВалютаУпрУчета = ВалютаРеглУчета тогда
		СписокЗначенияДляВыбора.Добавить(ВалютаУпрУчета);
	Иначе
		СписокЗначенияДляВыбора.Добавить(ВалютаУпрУчета);
		СписокЗначенияДляВыбора.Добавить(ВалютаРеглУчета);
	КонецЕсли;
	

	ЭлементыФормы.Валюта.СписокВыбора = СписокЗначенияДляВыбора;
	ЭлементыФормы.Валюта.Значение = ВалютаУпрУчета;

	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Валюта"));
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Значение = ВалютаУпрУчета;
	КонецЕсли;
	
	ТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ЭтаФорма);
	УправлениеОтображениемЭлементовФормыТиповогоОтчета(ОтчетОбъект, ЭтаФорма);
	ЭтаФорма.ЭлементыФормы.Результат.Защита = УправлениеДопПравамиПользователей.ЗащитаТаблиц();
	
КонецПроцедуры

Процедура ДействияФормыНастройки(Кнопка)
	
	Если ТиповыеОтчеты.РедактироватьНастройкиТиповогоОтчета(ОтчетОбъект, ЭтаФорма) Тогда
		ОбновитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСформировать(Кнопка)
	
	ОбновитьОтчет();
	
КонецПроцедуры

Процедура ДействияФормыЗаголовок(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	УправлениеОтображениемЭлементовФормыТиповогоОтчета(ОтчетОбъект, ЭтаФорма);
	ТиповыеОтчеты.УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, ЭтаФорма.ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ДействияФормыОткрытьВНовомОкне(Кнопка)
	
	ТиповыеОтчеты.ОткрытьВНовомОкнеТиповойОтчет(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыВосстановитьЗначения(Кнопка)
	
	СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя, Ложь);
	ТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ЭтаФорма);
	ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыСохранитьЗначения(Кнопка)
	
	СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя, Истина);
	ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыОтбор(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ПоказыватьБыстрыйОтбор = Кнопка.Пометка;
	УправлениеОтображениемЭлементовФормыТиповогоОтчета(ОтчетОбъект, ЭтаФорма);
	ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

// Скрывает или отображает быстрый отбор на форме
Процедура УправлениеОтображениемЭлементовФормыТиповогоОтчета(ОтчетОбъект, ФормаОтчета)
	
	ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Отбор.Пометка = ОтчетОбъект.ПоказыватьБыстрыйОтбор;
	Если ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Заголовок.Пометка Тогда
		Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
	Иначе
		Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КонецЕсли;
	ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение = Значение;
	
	Если ОтчетОбъект.ПоказыватьБыстрыйОтбор Тогда
		// Нужно показывать отбор
		ФормаОтчета.ЭлементыФормы.ПанельОтбора.Свертка = РежимСверткиЭлементаУправления.Нет;
		//ФормаОтчета.ЭлементыФормы.ПанельВыбораПериода.УстановитьПривязку(ГраницаЭлементаУправления.Право);
		//ФормаОтчета.ЭлементыФормы.ПанельОтбора.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ФормаОтчета.ЭлементыФормы.ПанельВыбораПериода, ГраницаЭлементаУправления.Право);
		
	Иначе
		// Не нужно показывать отбор
		ФормаОтчета.ЭлементыФормы.ПанельОтбора.Свертка = РежимСверткиЭлементаУправления.Право;
		//ФормаОтчета.ЭлементыФормы.ПанельОтбора.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
		//ФормаОтчета.ЭлементыФормы.ПанельВыбораПериода.УстановитьПривязку(ГраницаЭлементаУправления.Право, ФормаОтчета.ЭлементыФормы.ПанельПериод, ГраницаЭлементаУправления.Право);
	КонецЕсли;
	
КонецПроцедуры



Процедура ОбновлениеОтображения()
	
	ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	ТиповыеОтчеты.НастроитьПериод(НастройкаПериода, НачалоПериода, КонецДня(КонецПериода));
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
	ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ПолеВводаПериодПриИзменении(Элемент)
	
	ТиповыеОтчеты.ОбновитьПараметрыПериодаПоФорме(КомпоновщикНастроек, ЭтаФорма);
	ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ВыполненноеДействие;

	// Запретим стандартную обработку расшифровки
	СтандартнаяОбработка = Ложь;

	// Создадим и инициализируем обработчик расшифровки
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
	
	Элемент = ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(Элемент) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	Иначе
		Элементы = Элемент.ПолучитьРодителей();
		Если Элементы.Количество() > 0 Тогда
			Элемент = Элементы[0];
			Если ТипЗнч(Элемент) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
				ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Осуществим выбор действия расшифровки пользователем
	Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия);
	
	Если Настройки <> Неопределено Тогда
		
		// Пользователь выбрал действие, для которого нужно менять настройки
        Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить Тогда
			
			ФормированиеПечатныхФормЗК.ПеренестиПорядокВОтчет(Настройки);
			
			Если ЭлементыФормы.ДействияФормы.Кнопки.Заголовок.Пометка тогда
				
				ЗначениеПараметра = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput"));
				ЗначениеПараметра.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
				
			КонецЕсли;
			
			// Если требется упорядочить - упорядочим в текущем отчете
			КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			ОбновитьОтчет();

		Иначе
            // При других действиях - создадим новый отчет, откроем форму, сформируем отчет в ней
			Отчет = Отчеты[Метаданные().Имя].Создать();
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			Форма = Отчет.ПолучитьФорму();
			Форма.ОбновитьОтчет();
			Форма.Открыть();

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПечать(Кнопка)
	
	ТиповыеОтчеты.ПечатьТиповогоОтчета(ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ОбновитьОтчет() Экспорт
	
	СформироватьОтчет(ЭтаФорма.ЭлементыФормы.Результат, ЭтаФорма.ДанныеРасшифровки);
	
КонецПроцедуры

Процедура ТабличноеПолеОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТиповыеОтчеты.ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДатаРасходовСПриИзменении(Элемент)
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРасходовС"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаРасходовПоПриИзменении(Элемент)
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРасходовПо"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаПриходовСПриИзменении(Элемент)
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаПриходовС"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаПриходовПоПриИзменении(Элемент)

	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаПриходовПо"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры

// Процедура выбора периода Затрат
//
//
Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(ДатаРасходовС, ?(ДатаРасходовПо='0001-01-01', ДатаРасходовПо, КонецДня(ДатаРасходовПо)));
	НастройкаПериода.Редактировать();
	ДатаРасходовС = НастройкаПериода.ПолучитьДатуНачала();
	ДатаРасходовПо = НастройкаПериода.ПолучитьДатуОкончания();
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРасходовПо"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = ДатаРасходовПо;
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРасходовС"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = ДатаРасходовС;
	КонецЕсли;
	
КонецПроцедуры // ВыбПериодНажатие

// Процедура выбора периода Результата
//
//
Процедура ВыбПериодНажатие1(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(ДатаПриходовС, ?(ДатаПриходовПо='0001-01-01', ДатаПриходовПо, КонецДня(ДатаПриходовПо)));
	НастройкаПериода.Редактировать();
	ДатаПриходовС = НастройкаПериода.ПолучитьДатуНачала();
	ДатаПриходовПо = НастройкаПериода.ПолучитьДатуОкончания();
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаПриходовС"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = ДатаПриходовС;
	КонецЕсли;

	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаПриходовПо"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = ДатаПриходовПо;
	КонецЕсли;
	
КонецПроцедуры // ВыбПериодНажатие

Процедура ДанныеПриИзменении(Элемент)
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Данные"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВалютаПриИзменении(Элемент)
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Валюта"));
	Если ЗначениеПараметра <> Неопределено тогда
		ЗначениеПараметра.Значение = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры