Перем мСписокОтчетов;
Перем мСписокВыбораОтчетов;

Перем мСтараяОсновнаяРасшифровка;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ

Процедура ЗаполнитьДанныеФормы()

	Если Показатель = Неопределено Тогда
		
		ЗаполнитьНастройкиНовогоПоказателя(ЭтаФорма);
		
	Иначе
		
		ПредставлениеПоказателя =  Показатель.Представление;
		
		ВидПроизвольногоОтчета = Показатель.ВидПроизвольногоОтчета;	
		
		ТрендНижняяГраница = Показатель.ТрендНижняяГраница;
		ТрендВерхняяГраница = Показатель.ТрендВерхняяГраница;
		
		СостояниеНижняяГраница = Показатель.СостояниеНижняяГраница;
		СостояниеВерхняяГраница = Показатель.СостояниеВерхняяГраница;
		
		ИндикаторТрендВерхняяГраница = Показатель.ИндикаторТрендВерхняяГраница;
		ИндикаторТрендСредняяГраница = Показатель.ИндикаторТрендСредняяГраница;
		ИндикаторТрендНижняяГраница = Показатель.ИндикаторТрендНижняяГраница;
		
		ИндикаторСостояниеВерхняяГраница = Показатель.ИндикаторСостояниеВерхняяГраница;
		ИндикаторСостояниеСредняяГраница = Показатель.ИндикаторСостояниеСредняяГраница;
		ИндикаторСостояниеНижняяГраница = Показатель.ИндикаторСостояниеНижняяГраница;
		
		Если Показатель.СтруктураИсточникаДанных <> Неопределено Тогда
			Показатель.СтруктураИсточникаДанных.Свойство("ИмяИсточника", ОсновнаяРасшифровка);
			Показатель.СтруктураИсточникаДанных.Свойство("СохраненнаяНастройка", НастройкаОсновнойРасшифровки);
		КонецЕсли; 
		
		ПараметрыПоказателя = Показатель.НастройкиПоказателя.ПараметрыПоказателя.Скопировать();
		СписокРасшифровок = Показатель.НастройкиПоказателя.СписокРасшифровок.Скопировать();
		
	КонецЕсли;
	
КонецПроцедуры //

Функция ПроверитьНастройку()

	Отказ = Ложь;
	
	Если ПустаяСтрока(ПредставлениеПоказателя) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле ""Наименование""", Отказ, Заголовок);
	Иначе
		МассивПоказателей = ПоказателиКопия.Строки.НайтиСтроки(Новый Структура("Представление", ПредставлениеПоказателя), Истина);
		Для каждого ЭлКоллекции Из МассивПоказателей Цикл
			Если Показатель <> Неопределено 
				И ЭлКоллекции.КлючПоказателя = Показатель.КлючПоказателя Тогда
				
				Продолжить;
			КонецЕсли;		
			ОбщегоНазначения.СообщитьОбОшибке("Показатель с именем """ + ПредставлениеПоказателя + """ уже существует", Отказ, Заголовок);
			Прервать;
		КонецЦикла; 
	КонецЕсли;
	
	Если ОсновнаяРасшифровка.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле ""Отчет-показатель""", Отказ, Заголовок);
	КонецЕсли;
	
	Если ТрендНижняяГраница > ТрендВерхняяГраница Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нижняя граница тренда не может быть больше верхней границы", Отказ, Заголовок);
	КонецЕсли; 
	
	Если СостояниеНижняяГраница > СостояниеВерхняяГраница Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нижняя граница состояния не может быть больше верхней границы", Отказ, Заголовок);
	КонецЕсли; 
	
    Возврат НЕ Отказ;
	
КонецФункции //
 
Функция ПроверитьИЗаписатьНастройки()

	Если НЕ ПроверитьНастройку() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ГруппаПоказателей = Неопределено Тогда
		Группа = ПоказателиКопия;
	Иначе	
		Группа = ГруппаПоказателей;
	КонецЕсли;
	
	ЗаполнитьНастройкиПоказателя(Показатель, ЭтаФорма, Группа);

	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции //
 
Процедура НастройкаОсновнойРасшифровкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ОсновнаяРасшифровка.Пустая() Тогда
		Предупреждение("Необходимо выбрать источник данных.");
		Возврат;
	КонецЕсли;
	
	СохранениеНастроек.ВыбратьНастройкуФормы(НастройкаОсновнойРасшифровки, Элемент, ОсновнаяРасшифровка, Ложь);
	
КонецПроцедуры

Процедура НастройкаОсновнойРасшифровкиПриИзменении(Элемент)
	
	ЗаполнитьЗначенияПараметровПоказателя();
	
КонецПроцедуры

Процедура ОсновнаяРасшифровкаПриИзменении(Элемент)
	
	Если НастройкаОсновнойРасшифровки.НастраиваемыйОбъект <> ОсновнаяРасшифровка Тогда
		НастройкаОсновнойРасшифровки = Справочники.СохраненныеНастройки.ПустаяСсылка();
	КонецЕсли; 
	
	Если НЕ ОсновнаяРасшифровка.Пустая() Тогда
		
		Если ОсновнаяРасшифровка.ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
			И ОсновнаяРасшифровка.ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт
			И ОсновнаяРасшифровка.ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
			
			ОсновнаяРасшифровка = Справочники.ПроизвольныеОтчеты.ПустаяСсылка();
			Предупреждение("Допускается выбор следующих видов показателей:
							|- Стандартный
							|- План-факт
							|- План (прогноз)");
		КонецЕсли; 
		ВидПроизвольногоОтчета = ОсновнаяРасшифровка.ВидПроизвольногоОтчета;
		
		Если ПустаяСтрока(ПредставлениеПоказателя)
			ИЛИ мСтараяОсновнаяРасшифровка.Наименование = ПредставлениеПоказателя Тогда
			
			ПредставлениеПоказателя = ОсновнаяРасшифровка.Наименование;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ЗаполнитьПараметрыПоказателя(ЭтаФорма);
	
	мСтараяОсновнаяРасшифровка = ОсновнаяРасшифровка;
	
КонецПроцедуры

Процедура ОсновнаяРасшифровкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ПроизвольныеОтчеты.ПолучитьФормуВыбора(, Элемент);
	
	СписокВидовОтчета = Новый СписокЗначений;
	СписокВидовОтчета.Добавить(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности);
	СписокВидовОтчета.Добавить(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт);
	СписокВидовОтчета.Добавить(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз);
	
	ФормаВыбора.СправочникСписок.Отбор.ВидПроизвольногоОтчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.СправочникСписок.Отбор.ВидПроизвольногоОтчета.Значение = СписокВидовОтчета;
	ФормаВыбора.СправочникСписок.Отбор.ВидПроизвольногоОтчета.Использование = Истина;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидПроизвольногоОтчета.Доступность = Ложь;
	
	ФормаВыбора.НачальноеЗначениеВыбора = ОсновнаяРасшифровка;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКА ПАРАМЕТРОВ

Процедура ЗаполнитьЗначенияПараметровПоказателя()

	// Очистим значения
	Для каждого НастройкаПараметра Из ПараметрыПоказателя Цикл
		НастройкаПараметра.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(НастройкаПараметра.Значение));
	КонецЦикла;
	
	Если НастройкаОсновнойРасшифровки.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры //
 
Процедура ПараметрыПоказателяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЭлементУправления = Элемент.Колонки["Значение"].ЭлементУправления; 
	ЭлементУправления.КнопкаОчистки = Ложь;
	ЭлементУправления.КнопкаВыбора = Истина;
	
КонецПроцедуры

Процедура ПараметрыПоказателяПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если (ДанныеСтроки.Параметр = "Периодичность"
			ИЛИ ДанныеСтроки.Параметр = "СмещениеПериода"
			ИЛИ ДанныеСтроки.Параметр = "Горизонт") 
		И НЕ ЗначениеЗаполнено(ДанныеСтроки.Значение)Тогда
		
		ОформлениеСтроки.Ячейки.Значение.УстановитьТекст("<по умолчанию>");
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКА ИНДИКАТОРОВ

Процедура ИндикаторНижняяГраницаПриИзменении(Элемент)
	
	УстановитьКартинкуПоляВыбораИндикатора(Элемент);
	
	Для каждого ЭлКоллекции Из Элемент.СписокВыбора Цикл
		Если ИндикаторТрендНижняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторТрендСредняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторТрендВерхняяГраница <> ЭлКоллекции.Значение Тогда
			
			НовоеЗначение = ЭлКоллекции.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ИндикаторТрендСредняяГраница = ИндикаторТрендНижняяГраница Тогда
		ИндикаторТрендСредняяГраница = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторТрендСредняяГраница);
	ИначеЕсли ИндикаторТрендВерхняяГраница = ИндикаторТрендНижняяГраница Тогда
		ИндикаторТрендВерхняяГраница = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторТрендВерхняяГраница);
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ИндикаторСредняяГраницаПриИзменении(Элемент)
	
	УстановитьКартинкуПоляВыбораИндикатора(Элемент);
	
	Для каждого ЭлКоллекции Из Элемент.СписокВыбора Цикл
		Если ИндикаторТрендНижняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторТрендСредняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторТрендВерхняяГраница <> ЭлКоллекции.Значение Тогда
			
			НовоеЗначение = ЭлКоллекции.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ИндикаторТрендНижняяГраница = ИндикаторТрендСредняяГраница Тогда
		ИндикаторТрендНижняяГраница = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторТрендНижняяГраница);
	ИначеЕсли ИндикаторТрендВерхняяГраница = ИндикаторТрендСредняяГраница Тогда
		ИндикаторТрендВерхняяГраница = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторТрендВерхняяГраница);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИндикаторВерхняяГраницаПриИзменении(Элемент)
	
	УстановитьКартинкуПоляВыбораИндикатора(Элемент);
	
	Для каждого ЭлКоллекции Из Элемент.СписокВыбора Цикл
		Если ИндикаторТрендНижняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторТрендСредняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторТрендВерхняяГраница <> ЭлКоллекции.Значение Тогда
			
			НовоеЗначение = ЭлКоллекции.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ИндикаторТрендНижняяГраница = ИндикаторТрендВерхняяГраница Тогда
		ИндикаторТрендНижняяГраница = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторТрендНижняяГраница);
	ИначеЕсли ИндикаторТрендСредняяГраница = ИндикаторТрендВерхняяГраница Тогда
		ИндикаторТрендСредняяГраница = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторТрендСредняяГраница);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИндикаторСостояниеНижняяГраницаПриИзменении(Элемент)
	
	УстановитьКартинкуПоляВыбораИндикатора(Элемент);
	
	Для каждого ЭлКоллекции Из Элемент.СписокВыбора Цикл
		Если ИндикаторСостояниеНижняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторСостояниеСредняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторСостояниеВерхняяГраница <> ЭлКоллекции.Значение Тогда
			
			НовоеЗначение = ЭлКоллекции.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ИндикаторСостояниеСредняяГраница = ИндикаторСостояниеНижняяГраница Тогда
		ИндикаторСостояниеСредняяГраница = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторСостояниеСредняяГраница);
	ИначеЕсли ИндикаторСостояниеВерхняяГраница = ИндикаторСостояниеНижняяГраница Тогда
		ИндикаторСостояниеВерхняяГраница = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторСостояниеВерхняяГраница);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИндикаторСостояниеСредняяГраницаПриИзменении(Элемент)
	
	УстановитьКартинкуПоляВыбораИндикатора(Элемент);
	
	Для каждого ЭлКоллекции Из Элемент.СписокВыбора Цикл
		Если ИндикаторСостояниеНижняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторСостояниеСредняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторСостояниеВерхняяГраница <> ЭлКоллекции.Значение Тогда
			
			НовоеЗначение = ЭлКоллекции.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ИндикаторСостояниеНижняяГраница = ИндикаторСостояниеСредняяГраница Тогда
		ЭлементыФормы.ИндикаторСостояниеНижняяГраница.Значение = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторСостояниеНижняяГраница);
	ИначеЕсли ИндикаторСостояниеВерхняяГраница = ИндикаторСостояниеСредняяГраница Тогда
		ЭлементыФормы.ИндикаторСостояниеВерхняяГраница.Значение = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторСостояниеВерхняяГраница);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИндикаторСостояниеВерхняяГраницаПриИзменении(Элемент)
	
	УстановитьКартинкуПоляВыбораИндикатора(Элемент);
	
	Для каждого ЭлКоллекции Из Элемент.СписокВыбора Цикл
		Если ИндикаторСостояниеНижняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторСостояниеСредняяГраница <> ЭлКоллекции.Значение 
			И ИндикаторСостояниеВерхняяГраница <> ЭлКоллекции.Значение Тогда
			
			НовоеЗначение = ЭлКоллекции.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ИндикаторСостояниеНижняяГраница = ИндикаторСостояниеВерхняяГраница Тогда
		ЭлементыФормы.ИндикаторСостояниеНижняяГраница.Значение = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторСостояниеНижняяГраница);
	ИначеЕсли ИндикаторСостояниеСредняяГраница = ИндикаторСостояниеВерхняяГраница Тогда
		ЭлементыФормы.ИндикаторСостояниеСредняяГраница.Значение = НовоеЗначение;
		УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторСостояниеСредняяГраница);
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьКартинкуПоляВыбораИндикатора(Элемент)

	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(Элемент.Значение);
	Если ЭлементСписка = Неопределено Тогда
		Элемент.Картинка = Новый Картинка;
	Иначе
		Элемент.Картинка = ЭлементСписка.Картинка;
	КонецЕсли; 
	
КонецПроцедуры //


////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКА РАСШИФРОВОК

Процедура ВыбратьНастройкуУниверсальногоОтчета(ИмяОтчета, ТекущиеДанные)

	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", ?(ЗначениеЗаполнено(ТекущиеДанные.ПользовательНастройкиОтчета), ТекущиеДанные.ПользовательНастройкиОтчета, глЗначениеПеременной("глТекущийПользователь")));
	СтруктураНастройки.Вставить("ИмяОбъекта", "ОтчетОбъект." + ИмяОтчета);
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(ПустаяСтрока(ТекущиеДанные.НаименованиеНастройкиОтчета), Неопределено, ТекущиеДанные.НаименованиеНастройкиОтчета));
	
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
		
		ТекущиеДанные.НаименованиеНастройкиОтчета = Результат.НаименованиеНастройки;
		ТекущиеДанные.ПользовательНастройкиОтчета = Результат.Пользователь;
	Иначе
		ТекущиеДанные.НаименованиеНастройкиОтчета = "";
		ТекущиеДанные.ПользовательНастройкиОтчета = Неопределено;
	КонецЕсли;
	
КонецПроцедуры //

Процедура ВыбратьНастройкуТиповогоОтчета(ИмяОтчета, Элемент)

	ОтчетРасшифровкаОбъект = Отчеты[ИмяОтчета].Создать();
	
	НастраиваемыйОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетРасшифровкаОбъект);
	
	ФормаВыбора = Справочники.СохраненныеНастройки.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.Отбор.НастраиваемыйОбъект.Установить(НастраиваемыйОбъект);
	
	ФормаВыбора.Отбор.ТипНастройки.Установить(Перечисления.ТипыНастроек.НастройкиОтчета);
	
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	СписокДоступныхВариантов = ТиповыеОтчеты.ПолучитьСписокДоступныхВариантов(НастраиваемыйОбъект);
	Для каждого ДоступныйВариант Из СписокДоступныхВариантов Цикл
		Если ДоступныйВариант.Пометка Тогда
			ФормаВыбора.Отбор.Ссылка.Значение.Добавить(ДоступныйВариант.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ФормаВыбора.РежимСохраненияНастройки = Ложь;
	
	ФормаВыбора.ОткрытьМодально();

КонецПроцедуры

Процедура СписокРасшифровокНастройкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ЭлементыФормы.СписокРасшифровок.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ИмяИсточника) Тогда
		Предупреждение("Необходимо выбрать расшифровку.");
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет Тогда
		
		ВыбратьНастройкуУниверсальногоОтчета(ТекущиеДанные.ИмяИсточника, ТекущиеДанные);
		
	ИначеЕсли ТекущиеДанные.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет Тогда
		
		ВыбратьНастройкуТиповогоОтчета(ТекущиеДанные.ИмяИсточника, Элемент);
		
	ИначеЕсли ТекущиеДанные.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда
		
		СохранениеНастроек.ВыбратьНастройкуФормы(ТекущиеДанные.СохраненнаяНастройка, Элемент, ТекущиеДанные.ИмяИсточника, Ложь);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьСписокОтчетов()
	
	Если мСписокОтчетов = Неопределено Тогда
		
		мСписокОтчетов = Новый ТаблицаЗначений;
		мСписокОтчетов.Колонки.Добавить("Имя");
		мСписокОтчетов.Колонки.Добавить("Синоним");
		мСписокОтчетов.Колонки.Добавить("ТипОтчета");
		
		мСписокВыбораОтчетов = Новый СписокЗначений;
		
		Для Каждого МетаданныеОтчета Из Метаданные.Отчеты Цикл
			
			Если ПроцедурыПроизвольныхОтчетов.ЭтоТиповойОтчет(МетаданныеОтчета) Тогда
				ТипОтчета = Перечисления.ТипыИсточниковДанных.ТиповойОтчет;
			ИначеЕсли ПроцедурыПроизвольныхОтчетов.ЭтоУниверсальныйОтчет(МетаданныеОтчета) Тогда
				ТипОтчета = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет;
			Иначе
				Продолжить;
			КонецЕсли;
				
			ИмяОтчета     = МетаданныеОтчета.Имя;
			СинонимОтчета = ?(МетаданныеОтчета.Синоним="", МетаданныеОтчета.Имя, МетаданныеОтчета.Синоним);
			
			мСписокВыбораОтчетов.Добавить(ИмяОтчета, СинонимОтчета);
			
			НовыйОтчет = мСписокОтчетов.Добавить();
			НовыйОтчет.Имя = ИмяОтчета; 
			НовыйОтчет.Синоним = СинонимОтчета; 
			НовыйОтчет.ТипОтчета = ТипОтчета; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры //

Функция ПолучитьТипВыбранногоОтчета(ИмяИсточника, ПредставлениеОтчета)
	
	Если ПустаяСтрока(ИмяИсточника) Тогда
		Возврат Перечисления.ТипыИсточниковДанных.ПустаяСсылка();
	КонецЕсли;
	
	ВыбранныйОтчет = мСписокОтчетов.Найти(ИмяИсточника, "Имя");
	
	ПредставлениеОтчета = ВыбранныйОтчет.Синоним;
	
	Возврат ВыбранныйОтчет.ТипОтчета;

КонецФункции //

Процедура СписокРасшифровокОтчетНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтчетов = Новый СписокЗначений;
	СписокОтчетов.Добавить("Отчет");
	СписокОтчетов.Добавить(Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет);
	
	ТипОтчета = ВыбратьИзСписка(СписокОтчетов, Элемент);
	Если ТипОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.СписокРасшифровок.ТекущиеДанные;
	
	Если ТипОтчета.Значение = "Отчет" Тогда
		
		Если мСписокОтчетов = Неопределено Тогда
			ЗаполнитьСписокОтчетов();
		КонецЕсли;

		РезультатВыбора = мСписокВыбораОтчетов.ВыбратьЭлемент("Выберите отчет для расшифровки ...");
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ПредставлениеОтчета = "";
		ТипОтчета = ПолучитьТипВыбранногоОтчета(РезультатВыбора.Значение, ПредставлениеОтчета);
		ПользовательНастройкиОтчета = Неопределено;
		НаименованиеНастройкиОтчета = "";
		
		ТекущиеДанные.ИмяИсточника = РезультатВыбора.Значение;
		ТекущиеДанные.ТипИсточникаДанных = ТипОтчета;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Представление)
			ИЛИ ТекущиеДанные.Представление = ТекущиеДанные.ПредставлениеРасшифровки Тогда
			ТекущиеДанные.Представление = ПредставлениеОтчета;
		КонецЕсли; 
		ТекущиеДанные.ПредставлениеРасшифровки = ПредставлениеОтчета;
		
		ТекущиеДанные.ПользовательНастройкиОтчета = Неопределено;
		ТекущиеДанные.НаименованиеНастройкиОтчета = "";
		ТекущиеДанные.СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
		
	ИначеЕсли ТипОтчета.Значение = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда
		ТекущиеДанные.ТипИсточникаДанных = ТипОтчета.Значение;
		ФормаВыбора = Справочники.ПроизвольныеОтчеты.ПолучитьФормуВыбора(, Элемент);
		Если ТипЗнч(ТекущиеДанные.ИмяИсточника) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда
			ФормаВыбора.ПараметрТекущаяСтрока = ТекущиеДанные.ИмяИсточника;
		КонецЕсли; 
		ФормаВыбора.Открыть()
	Иначе
		Возврат;
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура СписокРасшифровокПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СписокРасшифровок.ТекущиеДанные;
	
	// Выбор произвольного отчета
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Представление)
		ИЛИ ТекущиеДанные.Представление = ТекущиеДанные.ПредставлениеРасшифровки Тогда
		ТекущиеДанные.Представление = ВыбранноеЗначение;
	КонецЕсли; 
	
	ТекущиеДанные.ПредставлениеРасшифровки = ВыбранноеЗначение;
	ТекущиеДанные.ИмяИсточника = ВыбранноеЗначение;
	
	ТекущиеДанные.ПользовательНастройкиОтчета = Неопределено;
	ТекущиеДанные.НаименованиеНастройкиОтчета = "";
	ТекущиеДанные.СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();

КонецПроцедуры

Процедура СписокРасшифровокНастройкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СписокРасшифровок.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет
		ИЛИ ТекущиеДанные.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет Тогда
		
		ТекущиеДанные.СохраненнаяНастройка = ВыбранноеЗначение;
	КонецЕсли; 
	
	ТекущиеДанные.НаименованиеНастройкиОтчета = ВыбранноеЗначение;
	
КонецПроцедуры

Процедура СписокРасшифровокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = ЭлементыФормы.СписокРасшифровок.ТекущиеДанные;
		МаксКлюч = 0;
		Для каждого ЭлКоллекции Из СписокРасшифровок Цикл
			Если МаксКлюч < ЭлКоллекции.КлючОтчета Тогда
				МаксКлюч = ЭлКоллекции.КлючОтчета;
			КонецЕсли;
		КонецЦикла; 
		ТекущиеДанные.КлючОтчета = МаксКлюч + 1;
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	мСтараяОсновнаяРасшифровка = ОсновнаяРасшифровка;
	
	ЗаполнитьДанныеФормы();
		
	УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторТрендНижняяГраница);
	УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторТрендСредняяГраница);
	УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторТрендВерхняяГраница);
	
	УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторСостояниеНижняяГраница);
	УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторСостояниеСредняяГраница);
	УстановитьКартинкуПоляВыбораИндикатора(ЭлементыФормы.ИндикаторСостояниеВерхняяГраница);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОсновныеДействияФормыОК(Кнопка)
	
	Если ПроверитьИЗаписатьНастройки() Тогда
		Закрыть(Истина);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ТекстВопроса = "Данные были изменены. Записать?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Отмена, Заголовок);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ ПроверитьИЗаписатьНастройки() Тогда
				Отказ = Истина;
			КонецЕсли; 
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры



Показатель = Неопределено;
ГруппаПоказателей = Неопределено;

СписокИндикаторовТренда = Новый СписокЗначений;
СписокИндикаторовТренда.Добавить("Позитивная", "",, БиблиотекаКартинок.ДинамикаПозитивная);
СписокИндикаторовТренда.Добавить("Стабильная", "",, БиблиотекаКартинок.ДинамикаСтабильная);
СписокИндикаторовТренда.Добавить("Негативная", "",, БиблиотекаКартинок.ДинамикаНегативная);

ЭлементыФормы.ИндикаторТрендНижняяГраница.СписокВыбора  = СписокИндикаторовТренда.Скопировать();
ЭлементыФормы.ИндикаторТрендСредняяГраница.СписокВыбора = СписокИндикаторовТренда.Скопировать();
ЭлементыФормы.ИндикаторТрендВерхняяГраница.СписокВыбора = СписокИндикаторовТренда.Скопировать();

СписокИндикаторовСостояния = Новый СписокЗначений;
СписокИндикаторовСостояния.Добавить("Хорошее", "",, БиблиотекаКартинок.СостояниеХорошее);
СписокИндикаторовСостояния.Добавить("Удовлетворительное", "",, БиблиотекаКартинок.СостояниеУдовлетворительное);
СписокИндикаторовСостояния.Добавить("Тревожное", "",, БиблиотекаКартинок.СостояниеТревожное);

ЭлементыФормы.ИндикаторСостояниеНижняяГраница.СписокВыбора  = СписокИндикаторовСостояния.Скопировать();
ЭлементыФормы.ИндикаторСостояниеСредняяГраница.СписокВыбора = СписокИндикаторовСостояния.Скопировать();
ЭлементыФормы.ИндикаторСостояниеВерхняяГраница.СписокВыбора = СписокИндикаторовСостояния.Скопировать();