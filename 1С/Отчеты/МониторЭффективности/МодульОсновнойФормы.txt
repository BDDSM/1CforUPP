////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ
//

Перем СоответствиеНастройкаРезультат Экспорт;         // Соответствие, в котором хранятся все результаты при текущем открытии отчета
Перем ПредставлениеНастройки         Экспорт;         // Представление настройки при редактировании отдельной настройки
Перем ПанельНастроекНарисована       Экспорт;         // Флаг, означающий что панель настроек после открытия нарисована
Перем ДействияЭлементовФормы         Экспорт;         // Структура, содеражащая действия элементов формы, формируемых программно

// ДЕЙСТВИЯ С РЕЗУЛЬТАТОМ

Процедура ДействияСРезультатомПечатьНажатие(Элемент)
	
	ТиповыеОтчеты.ПечатьТиповогоОтчета(ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ДействияСРезультатомВывестиКопиюРезультатаВТабличныйДокумент(Кнопка)

	ТиповыеОтчеты.ПоказатьКопиюРезультата(ЭлементыФормы.Результат);
	
КонецПроцедуры

Процедура ДействияСРезультатомСохранитьРезультатВНастройке(Кнопка)
	
	ТиповыеОтчеты.СохранитьРезультатВНастройке(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияСРезультатомСравнитьТекущийРезультатССохраненным(Кнопка)
	
	ТиповыеОтчеты.СохранитьРезультатССохраненным(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияСРезультатомЗаголовок(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ТиповыеОтчеты.УправлениеОтображениемЭлементовФормыТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
	ТиповыеОтчеты.УправлениеОтображениемЗаголовкаТиповогоОтчета(ЭтотОбъект, ЭтаФорма.ЭлементыФормы.Результат);
	
КонецПроцедуры

// ОБЩИЕ ПРОЦЕДУРЫ

Процедура ОбновитьОтчет() Экспорт
	
	СостояниеМодифицированности = Модифицированность;
	Если НЕ ПанельНастроекНарисована тогда
		ОбновлениеОтображения();
	КонецЕсли;
	ТиповыеОтчеты.ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(ЭтотОбъект, ЭтаФорма);
	ПараметрыПанели  = ТиповыеОтчеты.ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	ЗначенияНастроек = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	
	СформироватьОтчет(ЭлементыФормы.Результат, ДанныеРасшифровки);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ЭлементыФормы.Результат, Заголовок, Строка(ПараметрыСеанса.ТекущийПользователь));
	Модифицированность = СостояниеМодифицированности;
	
КонецПроцедуры

// ОБРАБОТЧИКИ КНОПОК ФОРМЫ

Процедура ДействияФормыСформировать(Кнопка)
	
	ОбновитьОтчет();
	
КонецПроцедуры

Процедура ДействияФормыСохранитьНастройку(Кнопка)
	
	ТиповыеОтчеты.СохранитьТекущуюНастройку(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыСохранитьНастройкуКак(Кнопка)
	
	ТиповыеОтчеты.СохранитьТекущуюНастройкуКак(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаСписокВариантовНажатие(Кнопка)
	
	СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект), Ложь);
	ПанельНастроекНарисована = Ложь;
	
	Если Не РежимРедактированияНастройки тогда
		ТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ЭтотОбъект);
		ТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ЭтаФорма, ЭтотОбъект, ПредставлениеНастройки, РежимРедактированияНастройки);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНастройкуСтруктуры(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("НастройкаСтруктурыОтчета");
	ФормаНастройки.ОткрытьМодально();
	Если ФормаНастройки.МодифицированностьСтруктуры Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьПанельПользователя(Кнопка)
	
	ТиповыеОтчеты.РедактироватьПанельПользователя(ЭтотОбъект, ЭтаФорма);
		
КонецПроцедуры

Процедура ДействияФормыРедактироватьОписаниеИПользователей(Кнопка)
	
	ТиповыеОтчеты.ОткрытьФормуСохраненнойНастройки(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельПанельВариантов(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ТиповыеОтчеты.УправлениеОтображениемПанелиВариантов(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельПанельПользователя(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ТиповыеОтчеты.УправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
КонецПроцедуры

// ОБРАБОТЧИКИ ФОРМЫ

Процедура ПриОткрытии()
	
	// Реквизит формы и компоновщик отчета ссылаются на один компоновщик
	ТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ЭтотОбъект);
	ТиповыеОтчеты.УстановитьВариантПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	
	// Нарисуем кнопки выбора настроек на верхней панели
	ТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ЭтаФорма, ЭтотОбъект, ПредставлениеНастройки, РежимРедактированияНастройки);
	
	ТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ЭтотОбъект, ЭтаФорма);
	ТиповыеОтчеты.УстановитьВидимостьПанелиВариантовПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	ТиповыеОтчеты.УстановитьВидимостьПанелиПользователяПоУмолчанию(ЭтотОбъект, ЭтаФорма);
	ТиповыеОтчеты.ВосстановитьНастройкиФормыОтчета(ЭтотОбъект, ЭтаФорма);
	ТиповыеОтчеты.УправлениеОтображениемПанелиВариантов(ЭтаФорма);
	ТиповыеОтчеты.УправлениеОтображениемПанелиПользователя(ЭтаФорма);
	
	УстановитьЗначенияПоУмолчанию();
	
	ПоказыватьИндикаторы = Истина;
	
	// Инициализация списка ПолеВыбораЧислоДней
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора = Новый СписокЗначений;
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(0, "По текущую дату");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(1, "1 день");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(2, "2 дня");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(3, "3 дня");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(4, "4 дня");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(5, "5 дней");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(6, "6 дней");
	ЭлементыФормы.ПолеВыбораЧислоДней.СписокВыбора.Добавить(7, "7 дней");
	ЭлементыФормы.ПолеВыбораЧислоДней.Значение = ЧислоДнейДоТекущейДаты;

	УстановитьВариантДатыОтчета();
	
	ПересчетДатыОтчета();
	ОбновитьНадписи();
	
КонецПроцедуры

Процедура ОбновлениеОтображения() Экспорт
	
	Если Не ПанельНастроекНарисована И Не Модифицированность тогда
		
		// Инициализация компоновщиков настроек и, если необходимо, загрузка настроек по умолчанию
		ЗагружатьНастройкиПоУмолчанию = Не РежимРедактированияНастройки И Не ЭтоОтработкаРасшифровки И СохраненнаяНастройка.Пустая();
		
		Если Не ЭтоОтработкаРасшифровки И Не РежимРедактированияНастройки тогда
			ПрименитьНастройку();
			ОбновитьНадписи();
			УправлениеПанельюНастройкиДатыОтчета();
			ТиповыеОтчеты.ПрименитьНастройкуПользователяНастройкиОтчета(ЭтотОбъект);
			ТиповыеОтчеты.ОбработкаФормыПослеПримененияНастройки(ЭтотОбъект, ЭтаФорма);
		КонецЕсли;
		
		ПанельНастроекНарисована = Истина;
		
	КонецЕсли;
	
	ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ТиповыеОтчеты.ОбработкаВыбораФормыОтчета(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора, Источник);
	
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получим показатель, который будем расшифровывать
	ЗначенияПолейРасшифровкиКомпоновкиДанных = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
	
	ПоказательЗначениеРасшифровки = ЗначенияПолейРасшифровкиКомпоновкиДанных.Найти("Показатель");
	
	Если ПоказательЗначениеРасшифровки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательОтчета = Неопределено;
	
	// Пользователь может создать группу показателей с таким же названием
	ПоказателиОтчета = Показатели.Строки.НайтиСтроки(Новый Структура("Представление", ПоказательЗначениеРасшифровки.Значение), Истина);
	Для каждого ЭлКоллекции Из ПоказателиОтчета Цикл
		Если НЕ ЭлКоллекции.ЭтоГруппа Тогда
			ПоказательОтчета = ЭлКоллекции;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПоказательОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначенияПолейРасшифровкиКомпоновкиДанных.Количество() = 1 Тогда
		Если РедактироватьПоказатель(ПоказательОтчета, Неопределено, Показатели) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли; 
	
	СписокОтчетовДляРасшифровки = Новый СписокЗначений;	
	
	СписокОтчетовДляРасшифровки.Добавить(-1, "<Основная расшифровка>");
	
	Для каждого РасшифровкаОтчета Из ПоказательОтчета.НастройкиПоказателя.СписокРасшифровок Цикл
		СписокОтчетовДляРасшифровки.Добавить(РасшифровкаОтчета.КлючОтчета, РасшифровкаОтчета.Представление);
	КонецЦикла;
	
	Если СписокОтчетовДляРасшифровки.Количество() = 1 Тогда
		РезультатВыбора = СписокОтчетовДляРасшифровки.Получить(0);
	Иначе
		РезультатВыбора = ВыбратьИзМеню(СписокОтчетовДляРасшифровки);
	КонецЕсли; 
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определим за какой период нужно формировать отчет
	Если ЗначенияПолейРасшифровкиКомпоновкиДанных.Найти("ПредыдущееЗначение") <> Неопределено Тогда
		// За предыдущий период
		СмещениеПериода = ПолучитьЗначениеПараметраПоказателя(ПоказательОтчета, "СмещениеПериода");
	Иначе
		// За текущий период
		СмещениеПериода = 0;
	КонецЕсли; 
	ПериодичностьАнализа = ПолучитьЗначениеПараметраПоказателя(ПоказательОтчета, "Периодичность");
	ПериодФормирования = ПроцедурыПроизвольныхОтчетов.ПолучитьПериодФормирования(мДатаОтчета, ПериодичностьАнализа, СмещениеПериода);
	
	// Сформируем отчет
	Если РезультатВыбора.Значение = -1 Тогда
		ОтчетРасшифровкаОбъект = ПроцедурыПроизвольныхОтчетов.ПолучитьОтчетИзИсточникаДанных(ПоказательОтчета.СтруктураИсточникаДанных, Истина);
		ТипОтчета = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет;
		
		ЭтоОсновнаяРасшифровка = Истина;
	Иначе
		РасшифровкаОтчета = ПоказательОтчета.НастройкиПоказателя.СписокРасшифровок.Найти(РезультатВыбора.Значение, "КлючОтчета");
		
		ТипОтчета = РасшифровкаОтчета.ТипИсточникаДанных;
		
		ОтчетРасшифровкаОбъект = ПроцедурыПроизвольныхОтчетов.ПолучитьОтчетИзИсточникаДанных(ПроцедурыПроизвольныхОтчетов.ПолучитьСтруктуруИсточникаДанных(РасшифровкаОтчета));
		
		СохраненнаяНастройкаОтчета = Неопределено;
		Если ТипОтчета = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет Тогда
			
			Если НЕ ПустаяСтрока(РасшифровкаОтчета.НаименованиеНастройкиОтчета) Тогда
				СтруктураНастройки = Новый Структура;
				СтруктураНастройки.Вставить("Пользователь", РасшифровкаОтчета.ПользовательНастройкиОтчета);
				СтруктураНастройки.Вставить("ИмяОбъекта", "ОтчетОбъект." + РасшифровкаОтчета.ИмяИсточника);
				СтруктураНастройки.Вставить("НаименованиеНастройки", РасшифровкаОтчета.НаименованиеНастройкиОтчета);
				
				Если УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки) Тогда
					СохраненнаяНастройкаОтчета = СтруктураНастройки.СохраненнаяНастройка;
					ОтчетРасшифровкаОбъект.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
				КонецЕсли;
			КонецЕсли;
		
			ОтчетРасшифровкаОбъект.УниверсальныйОтчет.ДатаНач = ПериодФормирования.НачалоПериода;
			ОтчетРасшифровкаОбъект.УниверсальныйОтчет.ДатаКон = ПериодФормирования.КонецПериода;
		Иначе
			
			СохраненнаяНастройкаОтчета = РасшифровкаОтчета.СохраненнаяНастройка;
		КонецЕсли;
		
		ПроцедурыПроизвольныхОтчетов.ВосстановитьНастройкиОтчета(ОтчетРасшифровкаОбъект, 
																ТипОтчета,
																СохраненнаяНастройкаОтчета);
		ЭтоОсновнаяРасшифровка = Ложь
	КонецЕсли; 
	
	ФормаОтчета = ОтчетРасшифровкаОбъект.ПолучитьФорму();
	
	Если ТипОтчета = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет Тогда
		ФормаОтчета.Открыть();
	Иначе
		
		НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Попытка	
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика);	
		Исключение
			Вопрос("Ошибка расшифровки отчета!" + Символы.ПС + ТиповыеОтчеты.ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке()), РежимДиалогаВопрос.ОК);
			Возврат;
		КонецПопытки; 
		
		ФормаОтчета.ЭтоОтработкаРасшифровки = Истина;
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновлениеОтображения();
		
		ПараметрыНабораДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьПараметрыИсточника(ПараметрыИсточниковДанныхПроизвольногоОтчета, ПоказательОтчета.КлючПоказателя);
		
		// Добавим дополнительные параметры для заполнения даты формирования
		ЗначенияПараметровИсточника = Новый Структура;
		
		Если ПараметрыНабораДанных.Найти("НачалоПериода", "Параметр") = Неопределено Тогда
			НовыйПараметр = ПараметрыНабораДанных.Добавить();
			НовыйПараметр.Параметр = "НачалоПериода";
			
			ЗначенияПараметровИсточника.Вставить("НачалоПериода", ПериодФормирования.НачалоПериода);
		КонецЕсли; 
		
		Если ПараметрыНабораДанных.Найти("КонецПериода", "Параметр") = Неопределено Тогда
			НовыйПараметр = ПараметрыНабораДанных.Добавить();
			НовыйПараметр.Параметр = "КонецПериода";
			
			ЗначенияПараметровИсточника.Вставить("КонецПериода", ПериодФормирования.КонецПериода);
		КонецЕсли; 
		
		ПроцедурыПроизвольныхОтчетов.ЗаполнитьПользовательскиеНастройкиПоКомпоновщику(
										ОтчетРасшифровкаОбъект,
										МакетКомпоновки.ЗначенияПараметров,
										ПараметрыНабораДанных,
										ЗначенияПараметровИсточника);
		
		ТиповыеОтчеты.ОбработкаФормыПослеПримененияНастройки(ОтчетРасшифровкаОбъект, ФормаОтчета);
		
		Если ЭтоОсновнаяРасшифровка Тогда
			
			// Отключим невидимые поля			
			ПоказателиПанели = ФормаОтчета.Показатели;
			Для каждого ПолеОтчета Из мСписокПолейОтчета Цикл
				Если НЕ ПолеОтчета.Пометка 
					ИЛИ ПоказательОтчета[ПолеОтчета.Значение] = 0 Тогда
					
					ПоказательРасшифровки = ПоказателиПанели.Найти(ПолеОтчета.Представление, "Представление");
					Если ПоказательРасшифровки <> Неопределено Тогда
						ПоказательРасшифровки.Использование = Ложь;
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла; 
			
		КонецЕсли;
		
		ФормаОтчета.Модифицированность = Ложь;
	КонецЕсли; 
	
	ФормаОтчета.ОбновитьОтчет();
		
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если РежимРедактированияНастройки тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТиповыеОтчеты.ОбработкаЗакрытияНастройкиОтчета(ЭтотОбъект, ЭтаФорма, Отказ, СтандартнаяОбработка);
	Если Не ЭтоОтработкаРасшифровки И Не РежимРедактированияНастройки тогда
		ТиповыеОтчеты.СохранитьПоследнююИспользуемуюНастройку(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ НА ПАНЕЛИ

Процедура ОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ЛевоеЗначениеДляКраткогоОтображенияЭлемента.ОтображатьКартинку = Ложь;
	
КонецПроцедуры

Процедура ОбработкаНажатияКнопкиСохраненнойНастройки(Элемент)
	
	ТиповыеОтчеты.ВыборВариантаОтчетаНаПанелиВариантов(ЭтотОбъект, ЭтаФорма, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиСохранитьСписок(Элемент)
	
	ТиповыеОтчеты.СохранитьСписокВТабличномПоле(ЭтотОбъект, ЭлементыФормы, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиЗагрузитьСписок(Элемент)
	
	ТиповыеОтчеты.ЗагрузитьСписокВТабличноеПоле(ЭтотОбъект, ЭлементыФормы, Элемент);
		
КонецПроцедуры

Процедура ДействияПанелиСтандартныйПериодПользователяПриИзменении(Элемент)
	
	СтандартныйПериод.Вариант = ?(Элемент.Значение = Неопределено, ВариантСтандартногоПериода.ПроизвольныйПериод, Элемент.Значение);
	
КонецПроцедуры

Процедура ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении(Элемент)
	
	СтандартнаяДатаНачала.Вариант = ?(Элемент.Значение = Неопределено, ВариантСтандартнойДатыНачала.ПроизвольнаяДата, Элемент.Значение);
	
КонецПроцедуры

Процедура ДействияПанелиДатаСтандартногоПериодаПриИзменении(Элемент)
	
	ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
КонецПроцедуры

Процедура ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении(Элемент)
	
	ЭлементыФормы.ДинамическийОтборСтандартнаяДатаНачалаПользователя.Значение = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
	
КонецПроцедуры

Процедура ДействияПанелиИзменениеЗначенияДинамическогоОтбора(Элемент)
	
	ТиповыеОтчеты.ОбработкаИзмененияЗначенияДинамическогоОтбора(ЭлементыФормы, Элемент);
	
КонецПроцедуры

Процедура ДействияПанелиОкончаниеРедактированиеТабличногоПоля(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТиповыеОтчеты.ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент);
	
КонецПроцедуры

Процедура ДействияПанелиУдалениеСтрокиТабличногоПоля(Элемент)
	
	ТиповыеОтчеты.ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент);
	
КонецПроцедуры
                                                              
Процедура ДействияПанелиКнопкаПодборНажатие(Элемент)
	
	ТиповыеОтчеты.ОбработкаНажатияКнопкиПодбор(ЭтотОбъект, ЭтаФорма, Элемент);
	
КонецПроцедуры


Процедура ПриНажатииНаКнопкуВверх(Кнопка)
	
	Типовыеотчеты.ПриНажатииКнопкиВверхВниз(ЭтаФорма, ОтчетОбъект, Кнопка);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуВниз(Кнопка)
	
	Типовыеотчеты.ПриНажатииКнопкиВверхВниз(ЭтаФорма, ОтчетОбъект, Кнопка);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ТиповыеОтчеты.СохранитьНастройкиФормыОтчета(ОтчетОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ГруппировкиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ТиповыеОтчеты.ГруппировкаПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МОНИТОРА ЭФФЕКТИВНОСТИ

Процедура УстановитьЗначенияПоУмолчанию()

	ТекДата.Вариант = ВариантСтандартнойДатыНачала.НачалоЭтогоДня;
	
	ОтборДинамикаПозитивная = Истина;
	ОтборДинамикаСтабильная = Истина;
	ОтборДинамикаНегативная = Истина;
	ОтборСостояниеХорошее = Истина;
	ОтборСостояниеУдовлетворительное = Истина;
	ОтборСостояниеТревожное = Истина;
	
	ПериодичностьПоУмолчанию = Перечисления.Периодичность.Месяц;
	СмещениеПериодаПоУмолчанию = -1;
	
КонецПроцедуры
 
Процедура УправлениеПанельюНастройкиДатыОтчета()

	ЭтоПроизвольнаяДата = (ТекДата.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата);
	
	Если ЭтоПроизвольнаяДата Тогда
		ЭлементыФормы.ПанельНастройкиДаты.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиДаты.Страницы.Произвольная;
	Иначе
		ЭлементыФормы.ПанельНастройкиДаты.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиДаты.Страницы.Стандартная;
	КонецЕсли; 
	
КонецПроцедуры //
 
Процедура УстановитьВариантДатыОтчета()

	СтандартныйВариантДатыОтчета = (ТекДата.Вариант <> ВариантСтандартнойДатыНачала.ПроизвольнаяДата);
	УправлениеПанельюНастройкиДатыОтчета();
	
КонецПроцедуры //

Процедура ОбновитьНадписи()
	
	ЭлементыФормы.НадписьДатаФормирования.Значение = " Дата формирования: "+ Формат(мДатаОтчета, "ДЛФ=DD");
	
КонецПроцедуры // ОбновитьНадписи()

Процедура ПолеВводаТекДатаПриИзменении(Элемент)
	
	ПересчетДатыОтчета();
	ОбновитьНадписи();
	УправлениеПанельюНастройкиДатыОтчета();
	
КонецПроцедуры

Процедура ФлажокУчитыватьВыходныеПриИзменении(Элемент)
	
	ПересчетДатыОтчета();
	ОбновитьНадписи();
	
КонецПроцедуры

Процедура ПолеВыбораЧислоДнейПриИзменении(Элемент)
	
	ПересчетДатыОтчета();
	ОбновитьНадписи();
	
КонецПроцедуры



ПанельНастроекНарисована = Ложь;

СоответствиеНастройкаРезультат = Новый Соответствие;

ДействияЭлементовФормы = Новый Структура;
ДействияЭлементовФормы.Вставить("ОбработкаНажатияКнопкиСохраненнойНастройки", Новый Действие("ОбработкаНажатияКнопкиСохраненнойНастройки"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСохранитьСписок", Новый Действие("ДействияПанелиСохранитьСписок"));
ДействияЭлементовФормы.Вставить("ДействияПанелиЗагрузитьСписок", Новый Действие("ДействияПанелиЗагрузитьСписок"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСтандартныйПериодПользователяПриИзменении", Новый Действие("ДействияПанелиСтандартныйПериодПользователяПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении", Новый Действие("ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДатаСтандартногоПериодаПриИзменении", Новый Действие("ДействияПанелиДатаСтандартногоПериодаПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении", Новый Действие("ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении"));
ДействияЭлементовФормы.Вставить("ДействияПанелиИзменениеЗначенияДинамическогоОтбора", Новый Действие("ДействияПанелиИзменениеЗначенияДинамическогоОтбора"));
ДействияЭлементовФормы.Вставить("ДействияПанелиОкончаниеРедактированиеТабличногоПоля", Новый Действие("ДействияПанелиОкончаниеРедактированиеТабличногоПоля"));
ДействияЭлементовФормы.Вставить("ДействияПанелиУдалениеСтрокиТабличногоПоля", Новый Действие("ДействияПанелиУдалениеСтрокиТабличногоПоля"));
ДействияЭлементовФормы.Вставить("ДействияПанелиКнопкаПодборНажатие", Новый Действие("ДействияПанелиКнопкаПодборНажатие"));
ДействияЭлементовФормы.Вставить("ПриНажатииНаКнопкуВверх", Новый Действие("ПриНажатииНаКнопкуВверх"));
ДействияЭлементовФормы.Вставить("ПриНажатииНаКнопкуВниз", Новый Действие("ПриНажатииНаКнопкуВниз"));
ДействияЭлементовФормы.Вставить("ГруппировкиПриПолученииДанных", Новый Действие("ГруппировкиПриПолученииДанных"));