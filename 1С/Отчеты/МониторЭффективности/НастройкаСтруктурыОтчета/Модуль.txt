////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ СО СПИСКОМ ПОКАЗАТЕЛЕЙ

Функция ДоступностьПолейПлан(ДанныеСтроки)

	Если ДанныеСтроки.ЭтоГруппа Тогда
		Результат = (ДанныеСтроки.Строки.Найти(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт, "ВидПроизвольногоОтчета", Истина) <> Неопределено);
	Иначе
		Результат = (ДанныеСтроки.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт);
	КонецЕсли;
	
    Возврат Результат
	
КонецФункции //

Функция ДоступностьПоляПланПрогноз(ДанныеСтроки)

	Если ДанныеСтроки.ЭтоГруппа Тогда
		Результат = (ДанныеСтроки.Строки.Найти(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт, "ВидПроизвольногоОтчета", Истина) <> Неопределено);
		Если НЕ Результат Тогда
			Результат = (ДанныеСтроки.Строки.Найти(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз, "ВидПроизвольногоОтчета", Истина) <> Неопределено);
		КонецЕсли; 
	Иначе
		Результат = (ДанныеСтроки.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт
					ИЛИ ДанныеСтроки.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз);
	КонецЕсли;
	
    Возврат Результат
	

КонецФункции //

Функция ДоступностьПолейФакт(ДанныеСтроки)

	Если ДанныеСтроки.ЭтоГруппа Тогда
		Результат = (ДанныеСтроки.Строки.Найти(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности, "ВидПроизвольногоОтчета", Истина) <> Неопределено);
		Если НЕ Результат Тогда
			Результат = (ДанныеСтроки.Строки.Найти(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт, "ВидПроизвольногоОтчета", Истина) <> Неопределено);
		КонецЕсли; 
	Иначе
		Результат = (ДанныеСтроки.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
					ИЛИ ДанныеСтроки.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт);
	КонецЕсли;
	
    Возврат Результат
	

КонецФункции //

Процедура УправлениеВидимостьюЭлементовПлан()

	МассивСтрок = ПоказателиКопия.Строки.НайтиСтроки(Новый Структура("ВидПроизвольногоОтчета", Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт), Истина);
	
	Видимость = (МассивСтрок.Количество() <> 0);
	Если НЕ Видимость Тогда
		МассивСтрок = ПоказателиКопия.Строки.НайтиСтроки(Новый Структура("ВидПроизвольногоОтчета", Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз), Истина);
		Видимость = (МассивСтрок.Количество() <> 0);
	КонецЕсли; 
	
	ЭлементыФормы.ПоказателиКопия.Колонки.ПланФакт.Видимость = Видимость;
	ЭлементыФормы.ПоказателиКопия.Колонки.ЗначениеПлан.Видимость = Видимость;
	ЭлементыФормы.ПоказателиКопия.Колонки.ПроцентВыполнения.Видимость = Видимость;
	ЭлементыФормы.ПоказателиКопия.Колонки.ОтклонениеПроцент.Видимость = Видимость;
	ЭлементыФормы.ПоказателиКопия.Колонки.ОтклонениеАбс.Видимость = Видимость;
	
	Если Видимость Тогда
		ЭлементыФормы.ПоказателиКопия.ВысотаШапки = 1;
	Иначе
		ЭлементыФормы.ПоказателиКопия.ВысотаШапки = 2;
	КонецЕсли;
	
КонецПроцедуры //

Процедура ДобавитьНовыйЭлементВДеревоПоказателей(ЭтоГруппа, Родитель, Копирование)

	Если Родитель = Неопределено Тогда
		ГруппаПоказателей = ПоказателиКопия;
	ИначеЕсли Родитель.ЭтоГруппа Тогда
		ГруппаПоказателей = Родитель;
	ИначеЕсли Родитель.Родитель = Неопределено Тогда 
		ГруппаПоказателей = ПоказателиКопия;
	Иначе
		ГруппаПоказателей = Родитель.Родитель;
	КонецЕсли; 
	
	Если ЭтоГруппа Тогда
		
		НовыйЭлемент = ГруппаПоказателей.Строки.Добавить();
		НовыйЭлемент.КлючПоказателя = ПолучитьНовыйКлюч(ПоказателиКопия, 0);
		НовыйЭлемент.ЭтоГруппа = Истина;
		ЭлементыФормы.ПоказателиКопия.ТекущаяСтрока = НовыйЭлемент;
		ЭлементыФормы.ПоказателиКопия.ИзменитьСтроку();
		
		Модифицированность = Истина;
		
	Иначе	
		
		НовыйЭлемент = Неопределено;		
		
		Если РедактироватьПоказатель(НовыйЭлемент, ГруппаПоказателей, ПоказателиКопия) Тогда
			ЭлементыФормы.ПоказателиКопия.ТекущаяСтрока = НовыйЭлемент;
			УправлениеВидимостьюЭлементовПлан();
			ОбновитьПометкуГруппПоказателей(ПоказателиКопия, мСписокПолейОтчета);	
			Модифицированность = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры //
 
Процедура ПоказателиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ПланФакт.Видимость = Ложь;
	
	ОформлениеСтроки.Ячейки.Представление.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Представление.Картинка = БиблиотекаКартинок.ГруппаИЭлемент;
		ОформлениеСтроки.Ячейки.Представление.ИндексКартинки = 0;
		ОформлениеСтроки.Цветфона = WebЦвета.ТопленоеМолоко;
	Иначе	
		Картинка = ПроцедурыПроизвольныхОтчетов.ПолучитьКартинкуПроизвольногоОтчета(ДанныеСтроки);
		Если Картинка <> Неопределено Тогда
			ОформлениеСтроки.Ячейки.Представление.Картинка = Картинка;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ДоступностьПоляПланПрогноз(ДанныеСтроки) Тогда
		ОформлениеСтроки.Ячейки.ЗначениеПлан.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	Если НЕ ДоступностьПолейФакт(ДанныеСтроки) Тогда
		ОформлениеСтроки.Ячейки.ПредыдущееЗначение.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ИзменениеПроцент.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ИзменениеАбс.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	Если НЕ ДоступностьПолейПлан(ДанныеСтроки) Тогда
		ОформлениеСтроки.Ячейки.ПроцентВыполнения.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ОтклонениеПроцент.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ОтклонениеАбс.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПоказателиКопияПриАктивизацииКолонки(Элемент)
	
	ИмяКолонки = ЭлементыФормы.ПоказателиКопия.ТекущаяКолонка.Имя;
	
	ДоступностьКолонок = (ПоказателиКопия.Колонки[ИмяКолонки].ТипЗначения.СодержитТип(Тип("Число")));
	
	ЭлементыФормы.КоманднаяПанельПоказатели.Кнопки.ДействиеСнятьФлажки.Доступность = ДоступностьКолонок;
	ЭлементыФормы.КоманднаяПанельПоказатели.Кнопки.ДействиеУстановитьФлажки.Доступность = ДоступностьКолонок;
	
КонецПроцедуры

Процедура ПоказателиКопияПослеУдаления(Элемент)
	
	ОбновитьПометкуГруппПоказателей(ПоказателиКопия, мСписокПолейОтчета);	
	УправлениеВидимостьюЭлементовПлан();
	
КонецПроцедуры

Процедура ПоказателиКопияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = ЭлементыФормы.ПоказателиКопия.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ТекстВопроса = "Удалить группу показателей """ + ТекущиеДанные.Представление + """?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			 Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПоказателиПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = ЭлементыФормы.ПоказателиКопия.ТекущиеДанные;
	
	Если Колонка.Имя = "ЗначениеПлан" Тогда
		Если НЕ ДоступностьПоляПланПрогноз(ТекущиеДанные) Тогда
			ТекущиеДанные[Колонка.Имя] = 0;
			Возврат;
		КонецЕсли; 
		
	ИначеЕсли Колонка.Имя = "ПроцентВыполнения" 
		ИЛИ Колонка.Имя = "ОтклонениеПроцент" 
		ИЛИ Колонка.Имя = "ОтклонениеАбс" Тогда
		
		Если НЕ ДоступностьПолейПлан(ТекущиеДанные) Тогда
			ТекущиеДанные[Колонка.Имя] = 0;
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТекущиеДанные[Колонка.Имя] = 2 Тогда
		ТекущиеДанные[Колонка.Имя] = 0;
	КонецЕсли;
	
	// Дочерние строки
	Если ТекущиеДанные.ЭтоГруппа Тогда
		УстановитьПометкуДочернихСтрок(ТекущиеДанные, Колонка.Имя);
	КонецЕсли;
	
	ОбновитьПометкуГруппПоказателей(ПоказателиКопия, Колонка.Имя);	
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельПоказателиДействиеДобавитьГруппу(Кнопка)
	
	ДобавитьНовыйЭлементВДеревоПоказателей(Истина, Неопределено, Ложь);
	
КонецПроцедуры

Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	ДобавитьНовыйЭлементВДеревоПоказателей(Ложь, Родитель, Копирование);
	
КонецПроцедуры

Процедура ПоказателиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение; 
	
КонецПроцедуры

Процедура ПоказателиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
	Если Строка = Неопределено Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	ИначеЕсли Строка.ЭтоГруппа Тогда
		Если ПараметрыПеретаскивания.Значение <> Строка
			И Строка.Строки.Индекс(ПараметрыПеретаскивания.Значение) = -1 
			И ПараметрыПеретаскивания.Значение.Строки.Найти(Строка.КлючПоказателя, "КлючПоказателя", Истина) = Неопределено Тогда
			// Строка не содержит перетаскиваемую строку
			// и перетаскиваемая строка не содержит строки в которую перетаскиваем
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КопироватьНаборДанных(СтрокаПриемник, СтрокаИсточник)
	
	НовыйНабор = СтрокаПриемник.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйНабор, СтрокаИсточник);
	
	Для каждого СтрокиИсточника Из СтрокаИсточник.Строки Цикл
		КопироватьНаборДанных(НовыйНабор, СтрокиИсточника)
	КонецЦикла; 
	
КонецПроцедуры //

Процедура ПоказателиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если Строка = Неопределено Тогда
		РодительНабора = ПоказателиКопия;
	ИначеЕсли Строка.ЭтоГруппа Тогда
		РодительНабора = Строка;
	ИначеЕсли Строка.Родитель = Неопределено Тогда 
		РодительНабора = ПоказателиКопия;
	Иначе
		РодительНабора = Строка.Родитель;
	КонецЕсли; 
	
	КопироватьНаборДанных(РодительНабора, ПараметрыПеретаскивания.Значение);
	
	Если ПараметрыПеретаскивания.Значение.Родитель = Неопределено Тогда
		ПоказателиКопия.Строки.Удалить(ПараметрыПеретаскивания.Значение);
	Иначе
		ПараметрыПеретаскивания.Значение.Родитель.Строки.Удалить(ПараметрыПеретаскивания.Значение);
	КонецЕсли; 
	
	ОбновитьПометкуГруппПоказателей(ПоказателиКопия, мСписокПолейОтчета);
	
КонецПроцедуры

Процедура ПоказателиКопияПередНачаломИзменения(Элемент, Отказ)
	
	Если ЭлементыФормы.ПоказателиКопия.ТекущаяКолонка.Имя = "Представление" Тогда
		
		ТекущиеДанные = ЭлементыФормы.ПоказателиКопия.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные.ЭтоГруппа Тогда
			Отказ = Истина;
			Если РедактироватьПоказатель(ТекущиеДанные, ТекущиеДанные.Родитель, ПоказателиКопия) Тогда
				УправлениеВидимостьюЭлементовПлан();
			КонецЕсли;  
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьПометки(Пометка)

	ИмяКолонки = ЭлементыФормы.ПоказателиКопия.ТекущаяКолонка.Имя;
	
	Если НЕ ПоказателиКопия.Колонки[ИмяКолонки].ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляПометки = ПоказателиКопия.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
	Для каждого ЭлКоллекции Из СтрокиДляПометки Цикл
		
		Если ИмяКолонки = "ЗначениеПлан"
			И ЭлКоллекции.ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт 
            И ЭлКоллекции.ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
			
			Продолжить;
			
		ИначеЕсли (ИмяКолонки = "ПроцентВыполнения" 
			ИЛИ ИмяКолонки = "ОтклонениеПроцент" 
			ИЛИ ИмяКолонки = "ОтклонениеАбс") 
			И ЭлКоллекции.ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
		
			Продолжить;
			
		ИначеЕсли (ИмяКолонки = "ПредыдущееЗначение"
			ИЛИ ИмяКолонки = "ИзменениеАбс"
			ИЛИ ИмяКолонки = "ИзменениеПроцент")
			И ЭлКоллекции.ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
			И ЭлКоллекции.ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		ЭлКоллекции[ИмяКолонки] = Пометка;
	КонецЦикла;
	
	ОбновитьПометкуГруппПоказателей(ПоказателиКопия, ИмяКолонки);	
	
КонецПроцедуры //

Процедура КоманднаяПанельПоказателиДействиеУстановитьФлажки(Кнопка)
	
	УстановитьПометки(1);
	
КонецПроцедуры

Процедура КоманднаяПанельПоказателиДействиеСнятьФлажки(Кнопка)
	
	УстановитьПометки(0);
	
КонецПроцедуры

Процедура ПоказателиКопияПриАктивизацииСтроки(Элемент)
	
	ОписаниеПоказателя = "";
	
	ТекущиеДанные = ЭлементыФормы.ПоказателиКопия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
		
		Запрос = Новый Запрос;
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ПроизвольныеОтчеты.Описание
		               |ИЗ
		               |	Справочник.ПроизвольныеОтчеты КАК ПроизвольныеОтчеты
		               |ГДЕ
		               |	ПроизвольныеОтчеты.Ссылка = &Ссылка";
		 
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", ТекущиеДанные.СтруктураИсточникаДанных.ИмяИсточника);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОписаниеПоказателя = Выборка.Описание;
		КонецЕсли;
			
	КонецЕсли; 
	
	Если ПустаяСтрока(ОписаниеПоказателя) Тогда
		ОписаниеПоказателя = "<описание отсутствует>";
	КонецЕсли; 
	
	ЭлементыФормы.НадписьТекстОписания.Заголовок = ОписаниеПоказателя;
	
КонецПроцедуры

Процедура ОбработатьПодборПоказателя(ЗначениеВыбора)

	Если ТипЗнч(ЗначениеВыбора) <> Тип("СправочникСсылка.ПроизвольныеОтчеты") 
		ИЛИ ЗначениеВыбора.ЭтоГруппа Тогда
		
		Возврат;
	КонецЕсли;
	
	СписокПоказателей = ПоказателиКопия.Строки.НайтиСтроки(Новый Структура("Представление", ЗначениеВыбора.Наименование), Истина);
	Для каждого ЭлКоллекции Из СписокПоказателей Цикл
		Если НЕ ЭлКоллекции.ЭтоГруппа Тогда
			// Такой показатель уже есть
			Возврат;
		КонецЕсли; 
	КонецЦикла; 
	
	ГруппаПоказателей = Неопределено;
	
	Если НЕ ЗначениеВыбора.Родитель.Пустая() Тогда
		СписокПоказателей = ПоказателиКопия.Строки.НайтиСтроки(Новый Структура("Представление", ЗначениеВыбора.Родитель.Наименование), Истина);
		Для каждого ЭлКоллекции Из СписокПоказателей Цикл
			Если ЭлКоллекции.ЭтоГруппа Тогда
				ГруппаПоказателей = ЭлКоллекции;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если ГруппаПоказателей = Неопределено Тогда
			ГруппаПоказателей = ПоказателиКопия.Строки.Добавить();
			ГруппаПоказателей.Представление = ЗначениеВыбора.Родитель.Наименование;
			ГруппаПоказателей.КлючПоказателя = ПолучитьНовыйКлюч(ПоказателиКопия, 0);
			ГруппаПоказателей.ЭтоГруппа = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ГруппаПоказателей = Неопределено Тогда
		ГруппаПоказателей = ПоказателиКопия;
	КонецЕсли;
	
	ЗначенияНастроек = Новый Структура;
	ЗначенияНастроек.Вставить("ОсновнаяРасшифровка", ЗначениеВыбора);
	
	ЗначенияНастроек.Вставить("ВидПроизвольногоОтчета");
	ЗначенияНастроек.Вставить("ТрендНижняяГраница");
	ЗначенияНастроек.Вставить("ТрендВерхняяГраница");
	ЗначенияНастроек.Вставить("СостояниеНижняяГраница");
	ЗначенияНастроек.Вставить("СостояниеВерхняяГраница");
	ЗначенияНастроек.Вставить("ИндикаторТрендВерхняяГраница");
	ЗначенияНастроек.Вставить("ИндикаторТрендСредняяГраница");
	ЗначенияНастроек.Вставить("ИндикаторТрендНижняяГраница");
	ЗначенияНастроек.Вставить("ИндикаторСостояниеВерхняяГраница");
	ЗначенияНастроек.Вставить("ИндикаторСостояниеСредняяГраница");
	ЗначенияНастроек.Вставить("ИндикаторСостояниеНижняяГраница");
	ЗначенияНастроек.Вставить("ПараметрыПоказателя");
	ЗначенияНастроек.Вставить("СписокРасшифровок");
	ЗаполнитьНастройкиНовогоПоказателя(ЗначенияНастроек);

	ЗначенияНастроек.Вставить("НастройкаОсновнойРасшифровки", Справочники.СохраненныеНастройки.ПустаяСсылка());
	ЗначенияНастроек.Вставить("ВидПроизвольногоОтчета", ЗначениеВыбора.ВидПроизвольногоОтчета);
	ЗначенияНастроек.Вставить("ПредставлениеПоказателя", ЗначениеВыбора.Наименование);

	ЗаполнитьНастройкиПоказателя(Неопределено, ЗначенияНастроек, ГруппаПоказателей);
	
	УправлениеВидимостьюЭлементовПлан();
	ОбновитьПометкуГруппПоказателей(ПоказателиКопия, мСписокПолейОтчета);	
	
КонецПроцедуры //

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	СписокВыбранныхПоказателей = Новый Массив;
	Если ТипЗнч(ЗначениеВыбора) = Тип("Массив") Тогда
		СписокВыбранныхПоказателей = ЗначениеВыбора;
	Иначе
		СписокВыбранныхПоказателей.Добавить(ЗначениеВыбора);
	КонецЕсли;	
	
	СписокДобавляемыхПоказателей = Новый Массив;
	
	ДобавлятьЭлементыГруппы = Неопределено;
	
	Для каждого ЭлКоллекции Из СписокВыбранныхПоказателей Цикл
		Если НЕ ЗначениеЗаполнено(ЭлКоллекции) Тогда
			Продолжить; 
		КонецЕсли;
		
		Если ЭлКоллекции.ЭтоГруппа Тогда
			Если ДобавлятьЭлементыГруппы = Неопределено Тогда
				ТекстВопроса = "Добавить все показатели группы?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ДобавлятьЭлементыГруппы = Истина;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					ДобавлятьЭлементыГруппы = Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
			Если ДобавлятьЭлементыГруппы Тогда
				Запрос = Новый Запрос;
				
				ТекстЗапроса = "ВЫБРАТЬ
				               |	ПроизвольныеОтчеты.Ссылка
				               |ИЗ
				               |	Справочник.ПроизвольныеОтчеты КАК ПроизвольныеОтчеты
				               |ГДЕ
				               |	ПроизвольныеОтчеты.Ссылка В ИЕРАРХИИ(&ГруппаОтчетов)
				               |	И ПроизвольныеОтчеты.ВидПроизвольногоОтчета В(&СписокВидовОтчета)
				               |	И ПроизвольныеОтчеты.ЭтоГруппа = ЛОЖЬ";
				 
				Запрос.Текст = ТекстЗапроса;
				
				СписокВидовОтчета = Новый СписокЗначений;
				СписокВидовОтчета.Добавить(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности);
				СписокВидовОтчета.Добавить(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт);
				СписокВидовОтчета.Добавить(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз);
				
				Запрос.УстановитьПараметр("СписокВидовОтчета", СписокВидовОтчета);
				
				Запрос.УстановитьПараметр("ГруппаОтчетов", ЭлКоллекции);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					СписокДобавляемыхПоказателей.Добавить(Выборка.Ссылка);
				КонецЦикла;
			КонецЕсли; 
		Иначе
			СписокДобавляемыхПоказателей.Добавить(ЭлКоллекции);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ЭлКоллекции Из СписокДобавляемыхПоказателей Цикл
		ОбработатьПодборПоказателя(ЭлКоллекции);
	КонецЦикла; 
	
КонецПроцедуры

Процедура КоманднаяПанельПоказателиДействиеПодбор(Кнопка)
	
	ФормаПодбора = Справочники.ПроизвольныеОтчеты.ПолучитьФормуВыбора(, ЭтаФорма);
	
	СписокВидовОтчета = Новый СписокЗначений;
	СписокВидовОтчета.Добавить(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности);
	СписокВидовОтчета.Добавить(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт);
	СписокВидовОтчета.Добавить(Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз);
	
	ФормаПодбора.СправочникСписок.Отбор.ВидПроизвольногоОтчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаПодбора.СправочникСписок.Отбор.ВидПроизвольногоОтчета.Значение = СписокВидовОтчета;
	ФормаПодбора.СправочникСписок.Отбор.ВидПроизвольногоОтчета.Использование = Истина;
	
	ФормаПодбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидПроизвольногоОтчета.Доступность = Ложь;
	
	ФормаПодбора.МножественныйВыбор = Истина;
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаПодбора.Открыть();
	
КонецПроцедуры

Функция ЗаписатьНастройкуСтуктуры()

	Показатели = ПоказателиКопия.Скопировать();
	СоздатьСхемуКомпоновкиДанных();
	
	Модифицированность = Ложь;
	МодифицированностьСтруктуры = Истина;
	
	Возврат Истина;

КонецФункции //
 
Процедура ОсновныеДействияФормыДействиеОК(Кнопка)
	
	Если ЗаписатьНастройкуСтуктуры() Тогда
		Закрыть(Истина);
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ПоказателиКопия = Показатели.Скопировать();
	
	ЭлементыФормы.ПоказателиКопия.Колонки.ИндикаторСостояния.Видимость = ПоказыватьИндикаторы;	
	ЭлементыФормы.ПоказателиКопия.Колонки.Тренд.Видимость = ПоказыватьИндикаторы;	
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УправлениеВидимостьюЭлементовПлан();
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ТекстВопроса = "Данные были изменены. Записать?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Отмена, Заголовок);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ ЗаписатьНастройкуСтуктуры() Тогда
				Отказ = Истина;
			КонецЕсли; 
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры