Перем СхемаОтчета Экспорт;
Перем НастройкиКомпоновкиОтчета Экспорт;

Перем СвойстваНабораЗначениеПоказателя;
Перем СвойстваНабораЗначениеПлан;

Перем ОбъединенияПсевдонимы;

Перем СписокНаборовДанных;


Функция ДобавитьПараметр(ПараметрыСхемы, Параметр, ПутьКДанным, Заголовок, ОграничениеИспользования, ТипЗначения)

	НовыйПараметр = ПараметрыСхемы.Найти(Параметр);
	Если НовыйПараметр = Неопределено Тогда
		НовыйПараметр = ПараметрыСхемы.Добавить();
		НовыйПараметр.Имя = Параметр;
	КонецЕсли;
	
	НовыйПараметр.Заголовок = Заголовок;
	НовыйПараметр.ВключатьВДоступныеПоля = Истина;
	НовыйПараметр.ОграничениеИспользования = ОграничениеИспользования;
	НовыйПараметр.ТипЗначения = ТипЗначения;

	Возврат НовыйПараметр;
	
КонецФункции //

Процедура УстановитьНовыйПутьКДаннымПоля(ПоляНабораДанных, ПутьКДанным_Новый)

	ИмяПоляНабора = ЭтаФорма[ПутьКДанным_Новый];
	Если НЕ ЗначениеЗаполнено(ИмяПоляНабора) Тогда
		Возврат;
	КонецЕсли; 
	
	ПолеОтчета = ОбъединенияПсевдонимы.Найти(ПутьКДанным_Новый, "ПутьКДанным");
	
	ПолеНабора = ПоляНабораДанных.Найти(ИмяПоляНабора);
	
	ПолеНабора.ПутьКДанным = ПолеОтчета.ПутьКДанным;
	ПолеНабора.Заголовок = ПолеОтчета.Заголовок;
	
КонецПроцедуры //

Процедура УстановитьНовыйПутьКДаннымПараметра(НаборДанных, ИмяПараметраОтчета)

	ИмяПараметраИсточника = ЭтаФорма[ИмяПараметраОтчета];
	Если НЕ ЗначениеЗаполнено(ИмяПараметраИсточника) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
		Если ИмяПараметраОтчета = "НачалоПериодаПлан" Тогда
			ИмяПараметраОтчета = "НачалоТекущегоПериода";
		ИначеЕсли ИмяПараметраОтчета = "КонецПериодаПлан" Тогда
			ИмяПараметраОтчета = "КонецТекущегоПериода";
		КонецЕсли; 
	КонецЕсли; 
	
	// Если имя параметра источника не совпадает с именем параметра отчета,
	// то необходимо переименовать параметр в источнике
	Если ИмяПараметраИсточника <> ИмяПараметраОтчета 
		И ЗначениеЗаполнено(ИмяПараметраИсточника) Тогда
		
		ТипНабора = ТипЗнч(НаборДанных);
		Если ТипНабора = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			// Изменим текст запроса
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "&" + ИмяПараметраИсточника, "&" + ИмяПараметраОтчета);
			
		ИначеЕсли ТипНабора = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			
			ИсточникДанных = ИсточникиДанных.Найти(НаборДанных.Имя, "НаборДанных");
			Если ИсточникДанных <> Неопределено Тогда
				ПараметрыИсточника = ПараметрыИсточниковДанных.НайтиСтроки(Новый Структура("КлючИсточника", ИсточникДанных.КлючИсточника));
			
				Для каждого ПараметрИсточника Из ПараметрыИсточника Цикл
					Если ПараметрИсточника.ПутьКДанным = ИмяПараметраИсточника Тогда
						ПараметрИсточника.ПутьКДанным = ИмяПараметраОтчета;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	ПараметрОтчета = ОбъединенияПсевдонимы.Найти(ИмяПараметраОтчета, "ПутьКДанным");
	
	ПараметрСхемы = СхемаОтчета.Параметры.Найти(ИмяПараметраИсточника);
	Если ПараметрСхемы = Неопределено Тогда
		ПараметрСхемы = СхемаОтчета.Параметры.Найти(ИмяПараметраОтчета);
		Если ПараметрСхемы = Неопределено Тогда
			ПараметрСхемы = СхемаОтчета.Параметры.Добавить();
			ПараметрСхемы.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		КонецЕсли; 
	КонецЕсли; 
	ПараметрСхемы.Имя = ИмяПараметраОтчета;
	ПараметрСхемы.Заголовок = ПараметрОтчета.Заголовок;
	ПараметрСхемы.Выражение = ПараметрОтчета.Выражение;
	ПараметрСхемы.ВключатьВДоступныеПоля = Ложь;
	ПараметрСхемы.ОграничениеИспользования = Истина;
	
КонецПроцедуры //

Функция КопироватьПараметр(ИмяПараметра, НовоеИмяПараметра)
	
	Если НЕ ЗначениеЗаполнено(НовоеИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйПараметр = Неопределено;
	
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
	Если ПараметрСхемы <> Неопределено Тогда
		НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрСхемы);
		НовыйПараметр.Имя = НовоеИмяПараметра;
	КонецЕсли; 
	
	Возврат НовыйПараметр;

КонецФункции //

Процедура ДобавитьПолеИтога(ПутьКДанным, Выражение = Неопределено)

	ПолеИтога = СхемаОтчета.ПоляИтога.Найти(ПутьКДанным);
	Если ПолеИтога <> Неопределено Тогда
		СхемаОтчета.ПоляИтога.Удалить(ПолеИтога);
	КонецЕсли; 
	
	ТиповыеОтчеты.ДобавитьПолеИтога(СхемаОтчета, ПутьКДанным, Выражение);
	
КонецПроцедуры //

Процедура ДобавитьВычисляемоеПоле(ПутьКДанным, Заголовок, Выражение = Неопределено, ТипЗначения = Неопределено)

	НовоеВычисляемоеПоле = СхемаОтчета.ВычисляемыеПоля.Найти(ПутьКДанным);
	Если НовоеВычисляемоеПоле = Неопределено Тогда
		НовоеВычисляемоеПоле = СхемаОтчета.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = ПутьКДанным;
	КонецЕсли; 
	НовоеВычисляемоеПоле.Заголовок = Заголовок;
	
	Если Выражение <> Неопределено Тогда
		НовоеВычисляемоеПоле.Выражение = Выражение;
	КонецЕсли; 
	
	Если ТипЗначения <> Неопределено Тогда
		НовоеВычисляемоеПоле.ТипЗначения = ТипЗначения;
	КонецЕсли; 
	
КонецПроцедуры //

Функция СоздатьПоказатель()

	Если НЕ ПроверитьНастройку() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СхемаОтчета.ИсточникиДанных.Количество() = 0 Тогда
		ИсточникДанныхСКД = ТиповыеОтчеты.ДобавитьЛокальныйИсточникДанных(СхемаОтчета);
	Иначе
		ИсточникДанныхСКД = СхемаОтчета.ИсточникиДанных[0];
	КонецЕсли;
	
	// Если это "Стандартый показатель", то необходимо создать набор данных - объединение
	// и поместить в него выбранный набор данных.
	// В остальных случаях объединять наборы не требуется, т.к. они либо уже объеденены,
	// либо все данные содержатся в одном наборе
	Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности 
		И ТекущееЗначение = ПредыдущееЗначение Тогда
		
		ОсновнойНабор = СхемаОтчета.НаборыДанных.Добавить(Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"));
		ОсновнойНабор.Имя = "Показатель монитора эффективности";
		
		// Текущее значение
		НовыйНабор = ПроцедурыПроизвольныхОтчетов.СкопироватьНаборДанных(ОсновнойНабор.Элементы, НаборДанныхЗначениеПоказателя);
		
		// Удалим старый набор
		ВладелецНабора = Неопределено;
		ПроцедурыПроизвольныхОтчетов.НайтиНаборДанныхСхемы(НаборДанныхЗначениеПоказателя.Имя, СхемаОтчета.НаборыДанных, ВладелецНабора);
		ПроцедурыПроизвольныхОтчетов.УдалитьНаборДанных(НаборДанныхЗначениеПоказателя, ВладелецНабора);
		НаборДанныхЗначениеПоказателя = НовыйНабор;
	Иначе
		
		// Получим владельца набора данных
		ПроцедурыПроизвольныхОтчетов.НайтиНаборДанныхСхемы(НаборДанныхЗначениеПоказателя.Имя, СхемаОтчета.НаборыДанных, ОсновнойНабор) 
	КонецЕсли; 
		
	Если ТекущееЗначение = ПредыдущееЗначение Тогда
		
		// Предыдущее значение
		НаборДанныхПредыдущееЗначениеПоказателя = ПроцедурыПроизвольныхОтчетов.СкопироватьНаборДанных(ОсновнойНабор.Элементы, НаборДанныхЗначениеПоказателя, ИсточникиДанных, ПараметрыИсточниковДанных);
		
		
		// Переименуем наборы
		НовоеИмяНабора = НаборДанныхЗначениеПоказателя.Имя + " (тек)";
		ИсточникДанныхНабора = ИсточникиДанных.Найти(НаборДанныхЗначениеПоказателя.Имя, "НаборДанных");
		Если ИсточникДанныхНабора <> Неопределено Тогда
			ИсточникДанныхНабора.НаборДанных = НовоеИмяНабора;
		КонецЕсли; 
		НаборДанныхЗначениеПоказателя.Имя = НовоеИмяНабора;
		Если ТипЗнч(НаборДанныхЗначениеПоказателя) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			НаборДанныхЗначениеПоказателя.ИмяОбъекта = НаборДанныхЗначениеПоказателя.ИмяОбъекта + "_тек";
		КонецЕсли; 
		
		НовоеИмяНабора = НаборДанныхПредыдущееЗначениеПоказателя.Имя + " (пред)";
		ИсточникДанныхНабора = ИсточникиДанных.Найти(НаборДанныхПредыдущееЗначениеПоказателя.Имя, "НаборДанных");
		Если ИсточникДанныхНабора <> Неопределено Тогда
			ИсточникДанныхНабора.НаборДанных = НовоеИмяНабора;
		КонецЕсли; 
		НаборДанныхПредыдущееЗначениеПоказателя.Имя = НовоеИмяНабора;
		Если ТипЗнч(НаборДанныхПредыдущееЗначениеПоказателя) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			НаборДанныхПредыдущееЗначениеПоказателя.ИмяОбъекта = НаборДанныхПредыдущееЗначениеПоказателя.ИмяОбъекта + "_пред";
		КонецЕсли; 
		
	Иначе	
		// Текущее значение и предыдущее значение содержатся в одном наборе
		НаборДанныхПредыдущееЗначениеПоказателя = НаборДанныхЗначениеПоказателя;
	КонецЕсли; 
	
	
	УстановитьНовыйПутьКДаннымПоля(НаборДанныхЗначениеПоказателя.Поля, "ТекущееЗначение");
	ДобавитьПолеИтога("ТекущееЗначение");
	УстановитьНовыйПутьКДаннымПараметра(НаборДанныхЗначениеПоказателя, "НачалоТекущегоПериода");
	УстановитьНовыйПутьКДаннымПараметра(НаборДанныхЗначениеПоказателя, "КонецТекущегоПериода");
	
	Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
		ИЛИ ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
		
		УстановитьНовыйПутьКДаннымПоля(НаборДанныхПредыдущееЗначениеПоказателя.Поля, "ПредыдущееЗначение");
		ДобавитьПолеИтога("ПредыдущееЗначение");
		
		Если НачалоПредыдущегоПериода = НачалоТекущегоПериода Тогда
			КопироватьПараметр("НачалоТекущегоПериода", НачалоПредыдущегоПериода);
		КонецЕсли; 
		Если КонецПредыдущегоПериода = КонецТекущегоПериода Тогда
			КопироватьПараметр("КонецТекущегоПериода", КонецПредыдущегоПериода);
		КонецЕсли; 
		УстановитьНовыйПутьКДаннымПараметра(НаборДанныхПредыдущееЗначениеПоказателя, "НачалоПредыдущегоПериода");
		УстановитьНовыйПутьКДаннымПараметра(НаборДанныхПредыдущееЗначениеПоказателя, "КонецПредыдущегоПериода");
	КонецЕсли;
	
	Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт 
		ИЛИ ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		
		УстановитьНовыйПутьКДаннымПоля(НаборДанныхЗначениеПлан.Поля, "ЗначениеПлан");
		ДобавитьПолеИтога("ЗначениеПлан");
		УстановитьНовыйПутьКДаннымПараметра(НаборДанныхЗначениеПлан, "НачалоПериодаПлан");
		УстановитьНовыйПутьКДаннымПараметра(НаборДанныхЗначениеПлан, "КонецПериодаПлан");
	КонецЕсли;
	
	// Добавим специальные параметры в схему
	НовыйПараметр = ДобавитьПараметр(СхемаОтчета.Параметры, 
											"Период",
											"Период", 
											"Период", 
											Ложь,
											Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));

	Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		НовыйПараметр = ДобавитьПараметр(СхемаОтчета.Параметры, 
												"Горизонт",
												"Горизонт", 
												"Горизонт",
												Ложь,
												Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
	Иначе										
		НовыйПараметр = ДобавитьПараметр(СхемаОтчета.Параметры, 
												"СмещениеПериода",
												"СмещениеПериода", 
												"Смещение периода",
												Ложь,
												Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
	КонецЕсли; 
											
	НовыйПараметр = ДобавитьПараметр(СхемаОтчета.Параметры, 
											"Периодичность",
											"Периодичность", 
											"Периодичность", 
											Ложь,
											Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
											
	// Заполним настройки компоновки
	КомпоновщикНастроекОтчета = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекОтчета.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОтчета));
	КомпоновщикНастроекОтчета.ЗагрузитьНастройки(НастройкиКомпоновкиОтчета);
	НастройкиКомпоновкиОтчета = КомпоновщикНастроекОтчета.ПолучитьНастройки();
	
	Если ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		
		ДобавитьВычисляемоеПоле("ИзменениеАбс", "Изменение (абс)"
								,"ТекущееЗначение - ПредыдущееЗначение"
								,Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		ДобавитьВычисляемоеПоле("ИзменениеПроцент", "Изменение %"
								,"ВЫБОР КОГДА ПредыдущееЗначение = 0 
								|	ТОГДА 100
								|ИНАЧЕ
								|	(ТекущееЗначение-ПредыдущееЗначение)*100/ПредыдущееЗначение
								|КОНЕЦ"
								,Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
								
		ДобавитьПолеИтога("ИзменениеАбс", "СУММА(ЕСТЬNULL(ТекущееЗначение,0)) - СУММА(ЕСТЬNULL(ПредыдущееЗначение,0))");
		
		ДобавитьПолеИтога( "ИзменениеПроцент", 
											"ВЫБОР КОГДА СУММА(ЕСТЬNULL(ПредыдущееЗначение,0)) = 0 
											|	ТОГДА 100
											|ИНАЧЕ
											|	(СУММА(ЕСТЬNULL(ТекущееЗначение,0))-СУММА(ЕСТЬNULL(ПредыдущееЗначение,0)))*100/СУММА(ЕСТЬNULL(ПредыдущееЗначение,0))
											|КОНЕЦ");
		
		УсловноеОформлениеИзменениеПроцент = НастройкиКомпоновкиОтчета.УсловноеОформление.Элементы.Добавить();
		ЗначениеПараметраУсловногоОформления = УсловноеОформлениеИзменениеПроцент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Format"));
		ЗначениеПараметраУсловногоОформления.Значение = "ЧДЦ=2";
		ЗначениеПараметраУсловногоОформления.Использование = Истина;
		ОформляемоеПоле = УсловноеОформлениеИзменениеПроцент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИзменениеПроцент");
		
		Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
			
			ДобавитьВычисляемоеПоле("ОтклонениеАбс", "Отклонение (абс)"
									,"ТекущееЗначение - ЗначениеПлан"
									,Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			
			ДобавитьВычисляемоеПоле("ПроцентВыполнения", "% Выполнения"
									,"ВЫБОР КОГДА СУММА(ЕСТЬNULL(ЗначениеПлан,0)) = 0 
									|	ТОГДА 100
									|ИНАЧЕ
									|	СУММА(ЕСТЬNULL(ТекущееЗначение,0))*100/СУММА(ЕСТЬNULL(ЗначениеПлан,0))
									|КОНЕЦ"
									,Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
									
									
			ДобавитьВычисляемоеПоле("ОтклонениеПроцент", "Отклонение %"
									,"ВЫБОР КОГДА ЗначениеПлан = 0 
									|	ТОГДА 100
									|ИНАЧЕ
									|	(ТекущееЗначение-ПредыдущееЗначение)*100/ЗначениеПлан
									|КОНЕЦ"
									,Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			
			ДобавитьПолеИтога("ОтклонениеАбс", "СУММА(ЕСТЬNULL(ТекущееЗначение,0)) - СУММА(ЕСТЬNULL(ЗначениеПлан,0))");
			
			ДобавитьПолеИтога("ПроцентВыполнения", 
									"ВЫБОР КОГДА СУММА(ЕСТЬNULL(ЗначениеПлан,0)) = 0 
									|	ТОГДА 100
									|ИНАЧЕ
									|	СУММА(ЕСТЬNULL(ТекущееЗначение,0))*100/СУММА(ЕСТЬNULL(ЗначениеПлан,0))
									|КОНЕЦ");
			
			ДобавитьПолеИтога("ОтклонениеПроцент", 
									"ВЫБОР КОГДА СУММА(ЕСТЬNULL(ЗначениеПлан,0)) = 0 
									|	ТОГДА 100
									|ИНАЧЕ
									|	(СУММА(ЕСТЬNULL(ТекущееЗначение,0))-СУММА(ЕСТЬNULL(ЗначениеПлан,0)))*100/СУММА(ЕСТЬNULL(ЗначениеПлан,0))
									|КОНЕЦ");
			
			УсловноеОформлениеИзменениеПроцент = НастройкиКомпоновкиОтчета.УсловноеОформление.Элементы.Добавить();
			ЗначениеПараметраУсловногоОформления = УсловноеОформлениеИзменениеПроцент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Format"));
			ЗначениеПараметраУсловногоОформления.Значение = "ЧДЦ=2";
			ЗначениеПараметраУсловногоОформления.Использование = Истина;
			ОформляемоеПоле = УсловноеОформлениеИзменениеПроцент.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПроцентВыполнения");
			
			УсловноеОформлениеИзменениеПроцент = НастройкиКомпоновкиОтчета.УсловноеОформление.Элементы.Добавить();
			ЗначениеПараметраУсловногоОформления = УсловноеОформлениеИзменениеПроцент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Format"));
			ЗначениеПараметраУсловногоОформления.Значение = "ЧДЦ=2";
			ЗначениеПараметраУсловногоОформления.Использование = Истина;
			ОформляемоеПоле = УсловноеОформлениеИзменениеПроцент.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтклонениеПроцент");
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Заполним выбранные поля
	
	НастройкиКомпоновкиОтчета.Выбор.Элементы.Очистить(); //Удалим все выбранные поля
	
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(НастройкиКомпоновкиОтчета.Выбор, Новый ПолеКомпоновкиДанных("ТекущееЗначение"));
	Если ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(НастройкиКомпоновкиОтчета.Выбор, Новый ПолеКомпоновкиДанных("ПредыдущееЗначение"));
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(НастройкиКомпоновкиОтчета.Выбор, Новый ПолеКомпоновкиДанных("ИзменениеПроцент"));
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(НастройкиКомпоновкиОтчета.Выбор, Новый ПолеКомпоновкиДанных("ИзменениеАбс"));
	КонецЕсли; 
	
	Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(НастройкиКомпоновкиОтчета.Выбор, Новый ПолеКомпоновкиДанных("ЗначениеПлан"));
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(НастройкиКомпоновкиОтчета.Выбор, Новый ПолеКомпоновкиДанных("ПроцентВыполнения"));
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(НастройкиКомпоновкиОтчета.Выбор, Новый ПолеКомпоновкиДанных("ОтклонениеПроцент"));
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(НастройкиКомпоновкиОтчета.Выбор, Новый ПолеКомпоновкиДанных("ОтклонениеАбс"));
		
	ИначеЕсли ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(НастройкиКомпоновкиОтчета.Выбор, Новый ПолеКомпоновкиДанных("ЗначениеПлан"));
		
	КонецЕсли; 
	
	Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		ПараметрКомпоновки = НастройкиКомпоновкиОтчета.ПараметрыДанных.Элементы.Найти("Горизонт");
		ПараметрКомпоновки.Значение = 1;
	Иначе
		ПараметрКомпоновки = НастройкиКомпоновкиОтчета.ПараметрыДанных.Элементы.Найти("СмещениеПериода");
		ПараметрКомпоновки.Значение = - 1;
	КонецЕсли; 
	ПараметрКомпоновки.Использование = Истина;
	
	ПараметрКомпоновки = НастройкиКомпоновкиОтчета.ПараметрыДанных.Элементы.Найти("Периодичность");
	ПараметрКомпоновки.Значение = Перечисления.Периодичность.Месяц;
	ПараметрКомпоновки.Использование = Истина;
	
	Возврат Истина;

КонецФункции //

Функция ПроверитьСхемуОтчета()
	
	ЕстьОшибки = Ложь;
	
	ЗаголовокОперации = "Проверка схемы компоновки данных";
	
	Если СхемаОтчета = Неопределено Тогда
		ТекстОшибки = "Не задана схема компоновки данных.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, ЕстьОшибки, ЗаголовокОперации);
		
		Возврат Ложь;
	КонецЕсли;
	
	Если СхемаОтчета.НаборыДанных.Количество() = 0 Тогда
		
		ТекстОшибки = "Схема не содержит наборов данных.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, ЕстьОшибки, ЗаголовокОперации);
		
	ИначеЕсли СхемаОтчета.НаборыДанных.Количество() > 1 Тогда
		ТекстОшибки = "Схема может содержать только один набор данных верхнего уровня.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, ЕстьОшибки, ЗаголовокОперации);
	КонецЕсли; 
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции //
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ СТРАНИЦАМИ НАСТРОЙКИ

Процедура ОбновитьНадписиНастройки()
	
	ИмяСтраницы = ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница.Имя;
	
	ТекстПодсказки = "";
	
	Если ИмяСтраницы = "НастройкаФакт" 
		ИЛИ ИмяСтраницы = "НастройкаПлан" 
		ИЛИ ИмяСтраницы = "НастройкаФактПрогноз" 
		ИЛИ ИмяСтраницы = "НастройкаПрогноз" Тогда
		
		ТекстПодсказки = 
			"Выберите набор данных и сопоставьте полям отчета поля источника данных."
	ИначеЕсли ИмяСтраницы = "НастройкаВыборВидаПоказателя" Тогда
		ТекстПодсказки = 
			"Конструктор помогает создать показатель монитора эффективности.
			|
			|Выберите вид показателя, который нужно создать.";
	КонецЕсли; 
	
	ЭлементыФормы.НадписьПодсказка.Заголовок = ТекстПодсказки;
	
	Заголовок = Строка(ВидПроизвольногоОтчета);
	
КонецПроцедуры //

Функция ПолучитьИмяСледующейСтраницы(ТекущаяСтраницаИмя, СледующаяСтраница)

 	СледущаяСтраницаИмя = Неопределено;
	
	Если ТекущаяСтраницаИмя = "НастройкаВыборВидаПоказателя" Тогда
		Если СледующаяСтраница Тогда
			Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
				СледущаяСтраницаИмя = "НастройкаФактПрогноз";
			Иначе
				СледущаяСтраницаИмя = "НастройкаФакт";
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли ТекущаяСтраницаИмя = "НастройкаФакт" 
		ИЛИ ТекущаяСтраницаИмя = "НастройкаФактПрогноз" Тогда
		
		Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности Тогда
			Если НЕ СледующаяСтраница Тогда
				СледущаяСтраницаИмя = "НастройкаВыборВидаПоказателя";
			КонецЕсли; 
		ИначеЕсли ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт 
			ИЛИ ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
			
			Если СледующаяСтраница Тогда
				СледущаяСтраницаИмя = "НастройкаПлан";
			Иначе
				СледущаяСтраницаИмя = "НастройкаВыборВидаПоказателя";
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли ТекущаяСтраницаИмя = "НастройкаПлан" Тогда
		
		Если НЕ СледующаяСтраница Тогда
			Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
				СледущаяСтраницаИмя = "НастройкаФактПрогноз";
			Иначе
				СледущаяСтраницаИмя = "НастройкаФакт";
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СледущаяСтраницаИмя;
	
КонецФункции //

Процедура ОбновитьКнопкиПанели()

	ТекущаяСтраницаИмя = ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница.Имя;
	СледущаяСтраницаИмя = ПолучитьИмяСледующейСтраницы(ТекущаяСтраницаИмя, Истина);
	ПредыдущаяСтраницаИмя = ПолучитьИмяСледующейСтраницы(ТекущаяСтраницаИмя, Ложь);
	
	КнопкаНазад = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("Назад");
	
	Если ПредыдущаяСтраницаИмя = Неопределено Тогда
		Если КнопкаНазад <> Неопределено Тогда
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(КнопкаНазад);
		КонецЕсли; 
	Иначе
		Если КнопкаНазад = Неопределено Тогда
			КнопкаНазад = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Вставить(0, "Назад", ТипКнопкиКоманднойПанели.Действие, "Назад", Новый Действие("ОсновныеДействияФормыНазад"));
			КнопкаНазад.Текст = "Назад";
			КнопкаНазад.Подсказка = "Перейти назад";
			КнопкаНазад.Пояснение = "Перейти назад";
			КнопкаНазад.Картинка = БиблиотекаКартинок.ПредыдущийШаг;
			КнопкаНазад.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КонецЕсли; 
	КонецЕсли; 
	
	КнопкаДалее = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее;
	Если СледущаяСтраницаИмя = Неопределено Тогда
		КнопкаДалее.Текст = "Готово";
		КнопкаДалее.Подсказка = "Создать показатель";
		КнопкаДалее.Пояснение = "Создать показатель и закрыть конструктор";
		КнопкаДалее.Картинка = БиблиотекаКартинок.Завершить;
	Иначе
		КнопкаДалее.Текст = "Далее";
		КнопкаДалее.Подсказка = "Перейти дальше";
		КнопкаДалее.Пояснение = "Перейти дальше";
		КнопкаДалее.Картинка = БиблиотекаКартинок.СледующийШаг;
	КонецЕсли; 
	
КонецПроцедуры //

Процедура ПоказатьСтраницуНастройки(СледующаяСтраница)
	
	ТекущаяСтраницаИмя = ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница.Имя;
	
	СледущаяСтраницаИмя = ПолучитьИмяСледующейСтраницы(ТекущаяСтраницаИмя, СледующаяСтраница);
	
	Если СледущаяСтраницаИмя <> Неопределено Тогда
		ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница = ЭлементыФормы.ПанельЭтапов.Страницы[СледущаяСтраницаИмя];
		ОбновитьНадписиНастройки();
		ОбновитьКнопкиПанели();
	КонецЕсли; 
	
	Если СледующаяСтраница И СледущаяСтраницаИмя = Неопределено Тогда
		Если СоздатьПоказатель() Тогда
			Закрыть(Истина);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры //
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ НАСТРОЙКИ ПОЛЕЙ

Процедура ПодобратьПодходящиеНастройки(НачалоПериодаПутьКДанным, КонецПериодаПериодаПутьКДанным)

	СписокВыбора = ЭлементыФормы[НачалоПериодаПутьКДанным].СписокВыбора;
	Если СписокВыбора.Количество() <> 0 Тогда
		ДоступныйПараметр = СписокВыбора.НайтиПоЗначению("ДатаНач");
		Если ДоступныйПараметр = Неопределено Тогда
			ДоступныйПараметр = СписокВыбора.НайтиПоЗначению("НачалоПериода");
		КонецЕсли;
		
		Если ДоступныйПараметр <> Неопределено Тогда
			ЭлементыФормы[НачалоПериодаПутьКДанным].Значение = ДоступныйПараметр.Значение;
		КонецЕсли; 
	КонецЕсли; 
	
	СписокВыбора = ЭлементыФормы[КонецПериодаПериодаПутьКДанным].СписокВыбора;
	Если СписокВыбора.Количество() <> 0 Тогда
		ДоступныйПараметр = СписокВыбора.НайтиПоЗначению("ДатаКон");
		Если ДоступныйПараметр = Неопределено Тогда
			ДоступныйПараметр = СписокВыбора.НайтиПоЗначению("Период");
		КонецЕсли;
		Если ДоступныйПараметр = Неопределено Тогда
			ДоступныйПараметр = СписокВыбора.НайтиПоЗначению("КонецПериода");
		КонецЕсли;
		
		Если ДоступныйПараметр <> Неопределено Тогда
			ЭлементыФормы[КонецПериодаПериодаПутьКДанным].Значение = ДоступныйПараметр.Значение;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры //

Функция ДобавитьПолеОтчета(ПутьКДанным, Заголовок, Выражение = "", ЭтоПараметр = Ложь)

	НовоеПолеОчета = ОбъединенияПсевдонимы.Добавить();
	
	НовоеПолеОчета.ПутьКДанным = ПутьКДанным;
	НовоеПолеОчета.Заголовок = Заголовок;
	НовоеПолеОчета.ЭтоПараметр = ЭтоПараметр;
	НовоеПолеОчета.Выражение = Выражение;

	Возврат НовоеПолеОчета;
	
КонецФункции //

Процедура ЗаполнитьНастройкуПолейОтчета()
	
	СвойстваИсточникаЗначениеПоказателя = Неопределено;
	СвойстваИсточникаЗначениеПлан = Неопределено;
	
	ОбъединенияПсевдонимы = Новый ТаблицаЗначений;
	ОбъединенияПсевдонимы.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	ОбъединенияПсевдонимы.Колонки.Добавить("ЭтоПараметр", Новый ОписаниеТипов("Булево"));
	ОбъединенияПсевдонимы.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ОбъединенияПсевдонимы.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	
	ДобавитьПолеОтчета("ТекущееЗначение", "Текущее значение","СУММА(ТекущееЗначение)");
	
	ДобавитьПолеОтчета("НачалоТекущегоПериода", "Начало текущего периода",, Истина);
	ДобавитьПолеОтчета("КонецТекущегоПериода", "Конец текущего периода",, Истина);
	
	ДобавитьПолеОтчета("ПредыдущееЗначение", "Значение предыдущего периода","СУММА(ПредыдущееЗначение)");
	
	ДобавитьПолеОтчета("НачалоПредыдущегоПериода", "Начало предыдущего периода",, Истина);
	ДобавитьПолеОтчета("КонецПредыдущегоПериода", "Конец предыдущего периода",, Истина);
			
	ДобавитьПолеОтчета("НачалоПериодаПлан", "Начало планируемого периода",, Истина);
	ДобавитьПолеОтчета("КонецПериодаПлан", "Конец планируемого периода",, Истина);
			
	ДобавитьПолеОтчета("ЗначениеПлан", "План","СУММА(ЗначениеПлан)");
		
КонецПроцедуры //


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ НАСТРОЙКИ НАБОРА ДАННЫХ

Процедура ЗаполнитьСписокНаборовДанных(НаборыДанных)
	
	Для каждого НаборДанныхСхемыОтчета Из НаборыДанных Цикл
		ТипНабора = ТипЗнч(НаборДанныхСхемыОтчета);
		
		Если ТипНабора = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ЗаполнитьСписокНаборовДанных(НаборДанныхСхемыОтчета.Элементы);
		Иначе
			СписокНаборовДанных.Добавить(НаборДанныхСхемыОтчета, НаборДанныхСхемыОтчета.Имя);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры //

Функция ПолучитьСписокПараметровЗапроса(ТекстЗапроса)

	СписокПараметров = Новый СписокЗначений;
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
	Исключение
		
		Возврат СписокПараметров;
		
	КонецПопытки;
	
	ОписаниеПараметров = Запрос.НайтиПараметры();
	Для каждого ПараметрЗапроса Из ОписаниеПараметров Цикл
		ПараметрСКД = СхемаОтчета.Параметры.Найти(ПараметрЗапроса.Имя);
		Если ПараметрСКД <> Неопределено Тогда
			ПредставлениеПараметра = ПараметрСКД.Заголовок;
		Иначе
			ПредставлениеПараметра = ПараметрЗапроса.Имя;
		КонецЕсли; 
		СписокПараметров.Добавить(ПараметрЗапроса.Имя, ПредставлениеПараметра);
	КонецЦикла; 
	
	Возврат СписокПараметров;
	
КонецФункции //

Функция ПолучитьСписокПараметровНабораОбъект(ИмяНабора)
	
	СписокПараметров = Новый СписокЗначений;
	
	СтрокаИсточникиДанных = ИсточникиДанных.Найти(ИмяНабора, "НаборДанных");
	Если СтрокаИсточникиДанных = Неопределено Тогда
		Возврат СписокПараметров;
	КонецЕсли; 

	СтрокиПараметрыИсточника = ПараметрыИсточниковДанных.НайтиСтроки(Новый Структура("КлючИсточника", СтрокаИсточникиДанных.КлючИсточника));
	Для каждого СтрокаПараметрИсточника Из СтрокиПараметрыИсточника Цикл
		ПараметрСКД = СхемаОтчета.Параметры.Найти(СтрокаПараметрИсточника.ПутьКДанным);
		Если ПараметрСКД <> Неопределено Тогда
			ПредставлениеПараметра = ПараметрСКД.Заголовок;
		Иначе
			ПредставлениеПараметра = СтрокаПараметрИсточника.Параметр;
		КонецЕсли; 
		СписокПараметров.Добавить(СтрокаПараметрИсточника.ПутьКДанным, ПредставлениеПараметра);
	КонецЦикла; 
	
	Возврат СписокПараметров;
	
КонецФункции //

Функция ПолучитьСписокПараметровНабора(НаборДанных)
	
	СписокПараметровНабора = Новый СписокЗначений;
	Если НаборДанных = Неопределено Тогда
		Возврат СписокПараметровНабора;
	КонецЕсли; 
	
	ТипНабора = ТипЗнч(НаборДанных);
	Если ТипНабора = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		СписокПараметровНабора = ПолучитьСписокПараметровЗапроса(НаборДанных.Запрос);
	ИначеЕсли ТипНабора = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
		СписокПараметровНабора = ПолучитьСписокПараметровНабораОбъект(НаборДанных.Имя);
	КонецЕсли; 
	
	Возврат СписокПараметровНабора;

КонецФункции //
 
Процедура ЗаполнитьСписокВыбораПоНаборуДанных(НаборДанных, СтруктураСписковВыбораПолей, СтруктураСписковВыбораПараметров)
	
	// Заполним список полей
	Для каждого СписокВыбораПолей Из СтруктураСписковВыбораПолей Цикл
		СписокВыбора = ЭлементыФормы[СписокВыбораПолей.Ключ].СписокВыбора;
		СписокВыбора.Очистить();
		Если НаборДанных <> Неопределено Тогда
			Для каждого ПолеНабора Из НаборДанных.Поля Цикл
				СписокВыбора.Добавить(ПолеНабора.ПутьКДанным, ПолеНабора.Заголовок);
			КонецЦикла; 
		КонецЕсли; 
		
		// Очистим значение, если его нет в списке выбора
		Если СписокВыбора.НайтиПоЗначению(ЭлементыФормы[СписокВыбораПолей.Ключ].Значение) = Неопределено Тогда
			ЭлементыФормы[СписокВыбораПолей.Ключ].Значение = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
	// Заполним список параметров
	СписокПараметровНабора = ПолучитьСписокПараметровНабора(НаборДанных);
	Для каждого СписокВыбораПараметров Из СтруктураСписковВыбораПараметров Цикл
		ЭлементыФормы[СписокВыбораПараметров.Ключ].СписокВыбора = СписокПараметровНабора.Скопировать();
		
		// Очистим значение, если его нет в списке выбора
		Если СписокПараметровНабора.НайтиПоЗначению(ЭлементыФормы[СписокВыбораПараметров.Ключ].Значение) = Неопределено Тогда
			ЭлементыФормы[СписокВыбораПараметров.Ключ].Значение = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры //

Процедура НаборДанныхЗначениеПоказателяПриИзменении(Элемент)
	
	СтруктураСписковВыбораПолей = Новый Структура("ТекущееЗначение,ПредыдущееЗначение");
	СтруктураСписковВыбораПараметров = Новый Структура("НачалоТекущегоПериода,КонецТекущегоПериода,НачалоПредыдущегоПериода,КонецПредыдущегоПериода");
	
	ЗаполнитьСписокВыбораПоНаборуДанных(НаборДанныхЗначениеПоказателя, СтруктураСписковВыбораПолей, СтруктураСписковВыбораПараметров);
	
	ПодобратьПодходящиеНастройки("НачалоТекущегоПериода", "КонецТекущегоПериода");
	ПодобратьПодходящиеНастройки("НачалоПредыдущегоПериода", "КонецПредыдущегоПериода");
	
КонецПроцедуры

Процедура НаборДанныхЗначениеПланПриИзменении(Элемент)
	
	СтруктураСписковВыбораПолей = Новый Структура("ЗначениеПлан");
	СтруктураСписковВыбораПараметров = Новый Структура("НачалоПериодаПлан,КонецПериодаПлан");
	
	ЗаполнитьСписокВыбораПоНаборуДанных(НаборДанныхЗначениеПлан, СтруктураСписковВыбораПолей, СтруктураСписковВыбораПараметров);
	
	ПодобратьПодходящиеНастройки("НачалоПериодаПлан", "КонецПериодаПлан");
	
КонецПроцедуры

Процедура НаборДанныхЗначениеПоказателяПрогнозПриИзменении(Элемент)
	
	СтруктураСписковВыбораПолей = Новый Структура("ТекущееЗначение1,ПредыдущееЗначение");
	СтруктураСписковВыбораПараметров = Новый Структура("НачалоТекущегоПериода1,КонецТекущегоПериода1");
	
	ЗаполнитьСписокВыбораПоНаборуДанных(НаборДанныхЗначениеПоказателя, СтруктураСписковВыбораПолей, СтруктураСписковВыбораПараметров);
	
	ПодобратьПодходящиеНастройки("НачалоТекущегоПериода1", "КонецТекущегоПериода1");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	Если ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
		И ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт 
		И ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		
		ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности;
	КонецЕсли;
	
	// Заполним список выбора наборов данных
	СписокНаборовДанных = Новый СписокЗначений;
	ЗаполнитьСписокНаборовДанных(СхемаОтчета.НаборыДанных);
	ЭлементыФормы.НаборДанныхЗначениеПоказателя.СписокВыбора = СписокНаборовДанных.Скопировать();
	ЭлементыФормы.НаборДанныхЗначениеПоказателяПрогноз.СписокВыбора = СписокНаборовДанных.Скопировать();
	ЭлементыФормы.НаборДанныхЗначениеПлан.СписокВыбора = СписокНаборовДанных.Скопировать();
	
	ЗаполнитьНастройкуПолейОтчета();	
		
	ОбновитьКнопкиПанели();
	ОбновитьНадписиНастройки();
	
КонецПроцедуры

Функция ПроверитьНастройку()
	
	Отказ = Ложь;
	Если НаборДанныхЗначениеПоказателя = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо выбрать набор данных (фактическое значение показателя)", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущееЗначение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить поле ""Текущее значение""", Отказ, Заголовок);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ПредыдущееЗначение)
		И ВидПроизвольногоОтчета <> Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить поле ""Предыдущее значение""", Отказ, Заголовок);
	КонецЕсли; 
	
	Если ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
		Если НаборДанныхЗначениеПлан = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Необходимо выбрать набор данных (плановое значение показателя)", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеПлан) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить поле ""Значение (план)""", Отказ, Заголовок);
		КонецЕсли; 
	КонецЕсли; 
	
	Если (ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт 
			ИЛИ ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз)
		И НаборДанныхЗначениеПоказателя = НаборДанныхЗначениеПлан 
		И ТекущееЗначение = ЗначениеПлан И ЗначениеЗаполнено(ТекущееЗначение) Тогда
		
		ТекстОшибки = "Не допускается выбирать одно и тоже поле набора данных в качестве фактического и планового значения.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		
	КонецЕсли; 
	
	Возврат НЕ Отказ;

КонецФункции //

Процедура ОсновныеДействияФормыДалее(Кнопка)
	
	ПоказатьСтраницуНастройки(Истина);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНазад(Кнопка)
	
	ПоказатьСтраницуНастройки(Ложь);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПроверитьСхемуОтчета() Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры


КлючНовогоИсточника = 0;