////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поля табличного документа
Перем мЛистБаланс Экспорт;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем мСоставПоказателей Экспорт;

// временные переменные для хранения результатов запросов
Перем ВремРезультатКонца, ВремРезультатНачала;
Перем РазмерностьПрописьюТекст1;
Перем РазмерностьПрописьюТекст2;

Перем мПечатныеФормы Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мСвойстваРазделовДекларации Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));

	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));

	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Баланс";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет страницу основной панели формы, на которой табличный документ
// содержит показатель по переданному параметром "КодПоказателя" коду.
//
// Параметры:
//  КодПоказателя - строка, код показателя.
//
// Возвращаемое значение:
//  строка, имя найденной страницы основной панели формы.
//  Если страница не найдена, возвращает Неопределено.
//
Функция ОпределитьСтраницуПанелиПоКодуПоказателя(КодПоказателя)
	Перем ИмяСтраницы;

	НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(КодПоказателя, "КодПоказателяПоСоставу, КодПоказателяПоФорме");
	Если НайденнаяСтрока <> Неопределено Тогда
		ИмяСтраницы = НайденнаяСтрока.ИмяПоляТаблДокумента;
	КонецЕсли;

	Возврат ИмяСтраницы;
	
КонецФункции // ОпределитьСтраницуПанелиПоКодуПоказателя()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	//СтруктураПоказателейВнутрСвязи = Новый Структура;
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000Б0051000");
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000В0026000");

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Имеем тот случай, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Имеем тот случай, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов заполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Имеем тот случай, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов заполнения таблицы на текущей странице.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Имеем тот случай, когда в новой версии формы был добавлен 
							// реквизит, который может быть заполнен автоматически по данным ИБ.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл
	
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()
	Если (НачалоГода(мДатаНачалаПериодаОтчета) = мДатаНачалаПериодаОтчета) и (КонецГода(мДатаКонцаПериодаОтчета) = мДатаКонцаПериодаОтчета) и (НачалоГода(мДатаНачалаПериодаОтчета) <> НачалоГода(мДатаКонцаПериодаОтчета)) Тогда
		// Готовая отчетность
		//СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );
		СтрПериодОтчета = Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=0") + " г.";
	Иначе // Промежуточная отчетность
		СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП");
	КонецЕсли;

	// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	// В Приложениях Б и В заполняем даты, по состоянию на которые
	// выполняется расчет среднегодовой стоимости имущества
	ГодРасчета     = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	СледГодРасчета = Формат(ДобавитьМесяц(мДатаКонцаПериодаОтчета, 12), "ДФ = 'гггг'");

	ДатаРасчета    = Формат(НачалоКвартала(ДобавитьМесяц(мДатаКонцаПериодаОтчета, 1)), "ДФ = ""дд ММММ гггг 'г.' """);

	ДатаНачало1Квартала         = НачалоГода(     Дата(ГодРасчета     + "0101000000"));
	ДатаНачало2Квартала         = НачалоКвартала( Дата(ГодРасчета     + "0401000000"));
	ДатаНачало3Квартала         = НачалоКвартала( Дата(ГодРасчета     + "0701000000"));
	ДатаНачало4Квартала         = НачалоКвартала( Дата(ГодРасчета     + "1001000000"));
	ДатаНачало1КварталаСледГода = НачалоГода(     Дата(СледГодРасчета + "0101000000"));


КонецПроцедуры // ПоказатьПериод()

// ПолучитьПредставлениеДатыДляЛиста
//
Функция ПолучитьПредставлениеДатыДляЛиста(Англ, ПериодТип)

	По1 = Формат(День(мДатаКонцаПериодаОтчета), "ЧЦ=2; ЧВН=") + "." + Формат(Месяц(мДатаКонцаПериодаОтчета), "ЧЦ=2; ЧВН=");
	Если ПериодТип = 1 Тогда
		Возврат ?(Англ, "At " + По1, "По " + По1);
	ИначеЕсли ПериодТип = 2 Тогда
		Возврат ?(Англ, "Year ended at 31 December", "Год, закончившийся 31 декабря");
	КонецЕсли;

КонецФункции // ПолучитьПредставлениеДатыДляЛиста

// Процедура управляет выводом даты представления отчета в соответствующие
// ячейки табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаНОтч = мДатаНачалаПериодаОтчета;
	ДатаКОтч = мДатаКонцаПериодаОтчета;

	// В балансе всегда текущий сравниваем с годовым.
	// В остальных формах МСФР дата в дату, например 9 мес. 2003, с 9 мес. 2004
	// В балансе, если за полугодие, то сравниваем с годом прошлого периода.

	ДатаНПред = ДобавитьМесяц(ДатаНОтч, -12);
	ДатаКПред = КонецГода(ДатаНПред);

	мЛистБаланс.Области.ПериодОтчета.Значение = ПолучитьПредставлениеДатыДляЛиста(АнглЯзык, 1);
	мЛистБаланс.Области.ПериодОтчета2.Значение = ПолучитьПредставлениеДатыДляЛиста(АнглЯзык, 2);

	мЛистБаланс.Области.ПредГод.Значение = Формат(ДатаНПред, "ДФ = 'гггг'");
	мЛистБаланс.Области.ОтчГод.Значение = Формат(ДатаНОтч, "ДФ = 'гггг'");
	//мЛистБаланс.Области.ОтчГод.Значение = Формат(ОтчГод, "ЧГ=0");

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации()
	
	ОргНазв = Организация.НаименованиеПолное;
	Если ЗначениеЗаполнено(Организация) Тогда
		Если АнглЯзык = Истина Тогда
			Орг = РегистрыСведений.СобственныеКонтрагенты.Выбрать();
			Пока Орг.Следующий() Цикл
				Если Орг.Объект = Организация Тогда
					ОргНазв = Орг.НаименованиеАнгл;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		мЛистБаланс.Области.ОргНазв.Значение = ОргНазв;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("При выводе сумм в тысячах - точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("При выводе сумм в миллионах - точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	
	ВалютаУпр = мВалюта;
	Если АнглЯзык = ИСТИНА Тогда
		Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			мДелитель = 1;
			РазмерностьПрописьюТекст1 = "in " + ВалютаУпр;
			РазмерностьПрописьюТекст2 = "(" + ВалютаУпр +")";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0; ЧО = 0";

		ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
			мДелитель = 1000;
			РазмерностьПрописьюТекст1 = "in " + ВалютаУпр + " thousands";
			РазмерностьПрописьюТекст2 = "(" + ВалютаУпр +" thous.)";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3; ЧО = 0";

		ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
			мДелитель = 1000000;
			РазмерностьПрописьюТекст1 = "in " + ВалютаУпр + " million";
			РазмерностьПрописьюТекст2 = "(" + ВалютаУпр +"mln.)";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6; ЧО = 0";

		КонецЕсли;
	Иначе
		Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			мДелитель = 1;
			РазмерностьПрописьюТекст1 = "в " + ВалютаУпр;
			РазмерностьПрописьюТекст2 = "(" + ВалютаУпр +")";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0; ЧО = 0";

		ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
			мДелитель = 1000;
			РазмерностьПрописьюТекст1 = "в тыс. " + ВалютаУпр;
			РазмерностьПрописьюТекст2 = "(тыс. " + ВалютаУпр +")";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3; ЧО = 0";

		ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
			мДелитель = 1000000;
			РазмерностьПрописьюТекст1 = "в млн. " + ВалютаУпр;
			РазмерностьПрописьюТекст2 = "(млн. " + ВалютаУпр +")";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6; ЧО = 0";

		КонецЕсли;
	КонецЕсли;
	
	Если АнглЯзык = ИСТИНА Тогда
		мЛистБаланс.Области.МасштабСуммИВалюта.Значение = "(all amounts " + РазмерностьПрописьюТекст1 + ")";	
	Иначе	
		мЛистБаланс.Области.МасштабСуммИВалюта.Значение = "(все суммы " + РазмерностьПрописьюТекст1 + ")";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
			ФорматируемаяОбласть.Формат = мСтрокаФормата;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;

			Если ВариантЗаполнения = 4 Тогда
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
			Иначе
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиСтраниц с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Разбивает табличный документ на листы формата А4 для отображения в форме
// предварительного просмотра или вывода на печать.
//
// Параметры:
//	ПечФорма - ТабличныйДокумент, который требуется разбить.
//
Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "Баланс по МСФО";
	ПустойТаблДок = ПечФорма.ПолучитьОбласть();
	ПустойТаблДок.Очистить();
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПустойТаблДок, ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати

	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста, Истина);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);

	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];

	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;

	//+MAV. В печатную форму попадают только не пустые строки
	//ПечатнаяФорма.Вывести(ОбластьПечати); // было раньше!!!
	   
	ВысотаТаблицы = ТабличноеПоле.ВысотаТаблицы;
	ШиринаТаблицы = ТабличноеПоле.ШиринаТаблицы;
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
        БылоПолеВвода = Ложь;
        ЗначаниеЗаполнено = Ложь;
		ИтоговаяСтрока = Ложь;

		Для НомерКолонки = 1 По Мин(ШиринаТаблицы, 8) Цикл // 8 - для табличного документа ДвижениеКапитала, т.к. последняя колонка всегда Итоговая
            ИмяОбласти = "R" + НомерСтроки + "C" + НомерКолонки;
			Область = ТабличноеПоле.Область(ИмяОбласти);
			Если Область.СодержитЗначение Тогда
				БылоПолеВвода = Истина;

				Если ЗначениеЗаполнено(Область.Значение) Тогда
					ЗначаниеЗаполнено = Истина;
				КонецЕсли;

				Если (Лев(Область.Имя,4) = "Итог") или (Лев(Область.Имя,5) = "Всего") Тогда
					ИтоговаяСтрока = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если (не БылоПолеВвода) или ЗначаниеЗаполнено или ИтоговаяСтрока Тогда
            Область = ТабличноеПоле.ПолучитьОбласть("R" + НомерСтроки + "C1:R" + НомерСтроки + "C" + ШиринаТаблицы);
			ПечатнаяФорма.Вывести(Область);
		КонецЕсли;
	КонецЦикла;
	//-MAV

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	//Если ВидПечати = "ПоказатьБланк" Тогда
	//	ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	//ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
	//	ПечатнаяФорма.Напечатать();
	//КонецЕсли;

КонецПроцедуры // ВывестиНаПечатьЛист()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет("Баланс");
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет("Баланс");
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя)

	// Перевод значения показателя в нужную валюту
	Если (ЗначениеЗаполнено(мВалюта)) и (мВалюта <> глЗначениеПеременной("ВалютаМеждународногоУчета")) Тогда

		// Если заполняется колонка тек. года, то берем дату конца текущего ОП
		// если заполняется данные прошлого года, то берем дату на конец ПРОШЛОГО ОП.

		ОтчГод = мДатаКонцаПериодаОтчета;
		ПредГод = КонецГода(ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12));

		Если Найти(ИмяПоказателя, "Кон") > 0 Тогда
			Дата = ОтчГод;
		Иначе
			Дата = ПредГод;
		КонецЕсли;

		ЗначениеПоказателя = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЗначениеПоказателя
		, глЗначениеПеременной("ВалютаМеждународногоУчета")
		, мВалюта
		, МодульВалютногоУчета.ПолучитьКурсВалюты(глЗначениеПеременной("ВалютаМеждународногоУчета"), Дата).Курс
		, МодульВалютногоУчета.ПолучитьКурсВалюты(мВалюта, Дата).Курс
		, МодульВалютногоУчета.ПолучитьКурсВалюты(глЗначениеПеременной("ВалютаМеждународногоУчета"), Дата).Кратность
		, МодульВалютногоУчета.ПолучитьКурсВалюты(мВалюта, Дата).Кратность);

	КонецЕсли;
	//-
	
	ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяПоказателя);

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если ТаблицаВариантыЗаполнения <> Неопределено Тогда // MAV (было =)

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения; // MAV (было ВариантЗаполн)
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	мПечатныеФормы.Очистить();
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	//Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
	//	Возврат;
	//КонецЕсли;

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						ВывестиНаПечатьЛист(СтруктураПараметров);
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать", 	       ЧтоИскать);

				ВывестиНаПечатьЛист(СтруктураПараметров);
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",		   ЧтоИскать);

		ВывестиНаПечатьЛист(СтруктураПараметров);
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Управляет видимостью страниц основной панели формы.
//
Процедура ПоказатьСтраницыОтчета()

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;

		Если ПоказатьСтраницу = 0 Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
			ИмеютсяСкрытые = Истина;
		Иначе
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Истина;

		КонецЕсли; 

	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	КнопкиНастройки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = "Настройка";

	КнопкиНастройки.Текст = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)";
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницыОтчета()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаСдачи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.ОтчетностьПоМСФО;
	мСохраненныйДок.Комментарий                = КомментарийОбщий;

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем суммы дивидендов
	СписокСохранения.Вставить("СуммаДивидендовКон", мСуммаДивидендовКон);
	СписокСохранения.Вставить("СуммаДивидендовПред", мСуммаДивидендовПред);

	СписокСохранения.Вставить("Консолидация", мКонсолидация);
	СписокСохранения.Вставить("Примечание", мПримечание);
	СписокСохранения.Вставить("Валюта", мВалюта);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	Модифицированность = Ложь;

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем УчетнаяПолитика;
	Перем Автозаполнение;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаСдачи                = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	КомментарийОбщий         = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// В старых версиях отчета, период хранился как ДВА года. Должен как один, а в программе
	// преобразовываться в два при расчетах.

	Если (ВерсияФормы = "30/01/2004" Или ВерсияФормы = "30/01/2005")
	   И Год(мДатаНачалаПериодаОтчета) <> Год(мДатаКонцаПериодаОтчета) Тогда
		мДатаНачалаПериодаОтчета = НачалоГода(мДатаКонцаПериодаОтчета);
	КонецЕсли;

	// восстановим суммы дивидендов
	СписокСохранения.Свойство("СуммаДивидендовКон", мСуммаДивидендовКон);
	СписокСохранения.Свойство("СуммаДивидендовПред", мСуммаДивидендовПред);

	СписокСохранения.Свойство("Консолидация", мКонсолидация);
	СписокСохранения.Свойство("Примечание", мПримечание);
	СписокСохранения.Свойство("Валюта", мВалюта);
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Автозаполнение;

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	ПоказатьСтраницыОтчета();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет суммирование ячеек
//
Функция Сложить(Лист, Переменная, НачШаг, КонШаг, Итог = Неопределено, Шаг = 1)
	Итого = 0;
	Пока НачШаг <= КонШаг Цикл
		Имя = Переменная + Формат(НачШаг, "ЧЦ=2; ЧВН=");
		Попытка
			Итого = Итого + Лист.Области.Найти(Имя).Значение;
		Исключение
		КонецПопытки; 

		НачШаг = НачШаг + Шаг;
	КонецЦикла;

	Рез = ОкруглитьЧислоПоФормату(Итого);

	Если Не Итог = Неопределено Тогда
		Лист.Области.Найти(Итог).Значение = Рез;
	КонецЕсли;

	Возврат Рез;
КонецФункции // Сложить()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ФлажокОтклАвтоРасчет Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Баланс" Тогда

		Сложить(мЛистБаланс, "СумКон1", 1, 11, "ИтогКон1");	// ИтогКон1 = СумКон101 + ... + СумКон111
		Сложить(мЛистБаланс, "СумПред1", 1, 11, "ИтогПред1");

		Сложить(мЛистБаланс, "СумКон2", 1, 8, "ИтогКон2");
		Сложить(мЛистБаланс, "СумПред2", 1, 8, "ИтогПред2");

		Сложить(мЛистБаланс, "СумКон3", 1, 6, "ИтогКон3");
		Сложить(мЛистБаланс, "СумПред3", 1, 6, "ИтогПред3");

		Сложить(мЛистБаланс, "СумКон4", 1, 7, "ИтогКон4");
		Сложить(мЛистБаланс, "СумПред4", 1, 7, "ИтогПред4");

		Сложить(мЛистБаланс, "СумКон5", 1, 7, "ИтогКон5");
		Сложить(мЛистБаланс, "СумПред5", 1, 7, "ИтогПред5");

		мЛистБаланс.Области.ВсегоКон1.Значение = ОкруглитьЧислоПоФормату(мЛистБаланс.Области.ИтогКон1.Значение + мЛистБаланс.Области.ИтогКон2.Значение);
		мЛистБаланс.Области.ВсегоПред1.Значение = ОкруглитьЧислоПоФормату(мЛистБаланс.Области.ИтогПред1.Значение + мЛистБаланс.Области.ИтогПред2.Значение);

		мЛистБаланс.Области.ВсегоКон2.Значение = ОкруглитьЧислоПоФормату(мЛистБаланс.Области.ИтогКон3.Значение + мЛистБаланс.Области.ИтогКон4.Значение + мЛистБаланс.Области.ИтогКон5.Значение);
		мЛистБаланс.Области.ВсегоПред2.Значение = ОкруглитьЧислоПоФормату(мЛистБаланс.Области.ИтогПред3.Значение + мЛистБаланс.Области.ИтогПред4.Значение + мЛистБаланс.Области.ИтогПред5.Значение);

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		Расчет("Баланс");

	КонецЕсли;

КонецПроцедуры // Расчет()

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто(МассивОрганизаций = Неопределено) Экспорт

	Счета = ПланыСчетов.Международный;
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = Новый Массив();
		МассивОрганизаций.Добавить(Организация);
	КонецЕсли;

	ДатаНОтч = мДатаНачалаПериодаОтчета;
	ДатаКОтч = мДатаКонцаПериодаОтчета;

	// В балансе всегда текущий сравниваем с годовым.
	// В остальных формах МСФР дата в дату, например 9 мес. 2003, с 9 мес. 2004
	// В балансе, если за полугодие, то сравниваем с годом прошлого периода.

	ДатаНПред = ДобавитьМесяц(ДатаНОтч, -12);
	ДатаКПред = КонецГода(ДатаНПред);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МеждународныйОстатки.СуммаРазвернутыйОстатокДт КАК СуммаРазвернутыйОстатокДт,
	               |	МеждународныйОстатки.СуммаРазвернутыйОстатокКт КАК СуммаРазвернутыйОстатокКт,
	               |	МеждународныйОстатки.Субконто1 КАК Субконто1
	               |ИЗ
	               |	РегистрБухгалтерии.Международный.Остатки(&Период, Счет = &Счет, , Организация В (&Организация)) КАК МеждународныйОстатки
	               |
	               |ИТОГИ СУММА(СуммаРазвернутыйОстатокДт), СУММА(СуммаРазвернутыйОстатокКт) ПО
	               |	ОБЩИЕ,
	               |	Субконто1";
	
	Запрос.УстановитьПараметр("Счет", Счета.ПрочиеСчетаКОплатеТекущие); //5093
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.УстановитьПараметр("Период", ДатаКОтч);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	А5093Кон = 0;
	П5093Кон = 0;
	Пока Выборка.Следующий() Цикл
		А5093Кон = А5093Кон + Выборка.СуммаРазвернутыйОстатокДт;
		П5093Кон = П5093Кон + Выборка.СуммаРазвернутыйОстатокКт;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Период", ДатаКПред);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	А5093Пред = 0;
	П5093Пред = 0;
	Пока Выборка.Следующий() Цикл
		А5093Пред = А5093Пред + Выборка.СуммаРазвернутыйОстатокДт;
		П5093Пред = П5093Пред + Выборка.СуммаРазвернутыйОстатокКт;
	КонецЦикла;

	Запрос.УстановитьПараметр("Счет", Счета.ПрочиеСчетаКОплатеДолгосрочные); //4082
	Запрос.УстановитьПараметр("Период", ДатаКОтч);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	А4082Кон = 0;
	П4082Кон = 0;
	Пока Выборка.Следующий() Цикл
		А4082Кон = А4082Кон + Выборка.СуммаРазвернутыйОстатокДт;
		П4082Кон = П4082Кон + Выборка.СуммаРазвернутыйОстатокКт;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Период", ДатаКПред);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	А4082Пред = 0;
	П4082Пред = 0;
	Пока Выборка.Следующий() Цикл
		А4082Пред = А4082Пред + Выборка.СуммаРазвернутыйОстатокДт;
		П4082Пред = П4082Пред + Выборка.СуммаРазвернутыйОстатокКт;
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////
    // БАЛАНС
	///////////////////////////////////////////////////////////////////////////////
	
	ТекстЗапроса ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	МеждународныйОстатки.Счет КАК Счет,
	              |	МеждународныйОстатки.СуммаОстаток КАК Сальдо
	              |ИЗ
	              |	РегистрБухгалтерии.Международный.Остатки(&Период, , , ) КАК МеждународныйОстатки
	              |
	              |ГДЕ
	              |	МеждународныйОстатки.Организация В (&Организация)
	              |
	              |ИТОГИ СУММА(Сальдо) ПО
	              |	Счет ИЕРАРХИЯ";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.УстановитьПараметр("Период", ДатаКОтч);
	ВремРезультатКонца = Запрос.Выполнить().Выгрузить();

	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.УстановитьПараметр("Период", ДатаКПред);
	ВремРезультатНачала = Запрос.Выполнить().Выгрузить();

    // Внеоборотные активы
	НайтиСальдо(Счета.ОсновныеСредства, "101");
	НайтиСальдо(Счета.ИнвестиционнаяСобственностьНетто, "102");
    НайтиСальдо(Счета.НематериальныеАктивы, "103");
    НайтиСальдо(Счета.ИнвестицииВДочерниеКомпании, "105");
	НайтиСальдо(Счета.ИнвестицииВЗависимыеКомпании, "106");
	
	// здесь необходимо проссумировать сальдо 2-х счетов
	СальдоКон1 = 0; СальдоНач1 = 0; НайтиСальдо(Счета.ИнвестицииВСовместныеПредприятия,, СальдоКон1, СальдоНач1);
    СальдоКон2 = 0; СальдоНач2 = 0; НайтиСальдо(Счета.ПрочиеДолгосрочныеФинансовыеАктивы,, СальдоКон2, СальдоНач2);
	УстановитьЗначениеПоказателя("СумКон108", СальдоКон1+СальдоКон2);
	УстановитьЗначениеПоказателя("СумПред108", СальдоНач1+СальдоНач2);

	СальдоКон = 0; СальдоНач = 0; НайтиСальдо(Счета.ДебиторскаяЗадолженностьДолгосрочная,, СальдоКон, СальдоНач);
	УстановитьЗначениеПоказателя("СумКон109", СальдоКон + А4082Кон);
	УстановитьЗначениеПоказателя("СумПред109", СальдоНач + А4082Пред);
	
	НайтиСальдо(Счета.ОтложенныеНалоговыеАктивы, "110");
	
	// здесь необходимо проссумировать сальдо 2-х счетов
	СальдоКон1 = 0; СальдоНач1 = 0; НайтиСальдо(Счета.ПрочиеВнеоборотныеАктивы,, СальдоКон1, СальдоНач1);
    СальдоКон2 = 0; СальдоНач2 = 0; НайтиСальдо(Счета.БиологическиеАктивы,, СальдоКон2, СальдоНач2);
	УстановитьЗначениеПоказателя("СумКон111", СальдоКон1+СальдоКон2);
	УстановитьЗначениеПоказателя("СумПред111", СальдоНач1+СальдоНач2);
	
	// Оборотные активы
	// здесь необходимо проссумировать сальдо 2-х счетов
	СальдоКон1 = 0; СальдоНач1 = 0; НайтиСальдо(Счета.ЗатратыНезавершенногоСтроительства,, СальдоКон1, СальдоНач1);
    СальдоКон2 = 0; СальдоНач2 = 0; НайтиСальдо(Счета.Запасы,, СальдоКон2, СальдоНач2);
	УстановитьЗначениеПоказателя("СумКон203", СальдоКон1+СальдоКон2);
	УстановитьЗначениеПоказателя("СумПред203", СальдоНач1+СальдоНач2);

	НайтиСальдо(Счета.ФинансовыеВложенияКраткосрочные, "204");
	
	СальдоКон = 0; СальдоНач = 0; НайтиСальдо(Счета.ДебиторскаяЗадолженностьТекущая,, СальдоКон, СальдоНач);
	УстановитьЗначениеПоказателя("СумКон205", СальдоКон + А5093Кон);
	УстановитьЗначениеПоказателя("СумПред205", СальдоНач + А5093Пред);
	
	
	НайтиСальдо(Счета.НалогиКВозмещению, "206");
	НайтиСальдо(Счета.ДенежныеСредства, "207");
	
	// здесь необходимо проссумировать сальдо 2-х счетов
	СальдоКон1 = 0; СальдоНач1 = 0; НайтиСальдо(Счета.ОсновныеСредстваДляПродажи,, СальдоКон1, СальдоНач1);
    СальдоКон2 = 0; СальдоНач2 = 0; НайтиСальдо(Счета.ПрочиеТекущиеАктивы,, СальдоКон2, СальдоНач2);
	УстановитьЗначениеПоказателя("СумКон208", СальдоКон1+СальдоКон2);
	УстановитьЗначениеПоказателя("СумПред208", СальдоНач1+СальдоНач2);
    	
	// КАПИТАЛ И РЕЗЕРВЫ
    // здесь необходимо проссумировать сальдо 3-х счетов
	СальдоКон1 = 0; СальдоНач1 = 0; НайтиСальдо(Счета.ОбыкновенныеАкции,, СальдоКон1, СальдоНач1,-1);
    СальдоКон2 = 0; СальдоНач2 = 0; НайтиСальдо(Счета.ПривилегированныеАкции,, СальдоКон2, СальдоНач2,-1);
	СальдоКон3 = 0; СальдоНач3 = 0; НайтиСальдо(Счета.СобственныйКапиталПрочее,, СальдоКон3, СальдоНач3,-1);
	УстановитьЗначениеПоказателя("СумКон301", СальдоКон1+СальдоКон2+СальдоКон3);
	УстановитьЗначениеПоказателя("СумПред301", СальдоНач1+СальдоНач2+СальдоНач3);

    // здесь необходимо проссумировать сальдо 2-х счетов
	СальдоКон1 = 0; СальдоНач1 = 0; НайтиСальдо(Счета.ЭмиссионныйДоходОбыкновенныеАкции,, СальдоКон1, СальдоНач1,-1);
    СальдоКон2 = 0; СальдоНач2 = 0; НайтиСальдо(Счета.ЭмиссионныйДоходПривилегированныеАкции,, СальдоКон2, СальдоНач2,-1);
	УстановитьЗначениеПоказателя("СумКон302", СальдоКон1+СальдоКон2);
	УстановитьЗначениеПоказателя("СумПред302", СальдоНач1+СальдоНач2);
	
	НайтиСальдо(Счета.СобственныеАкцииВыкупленные, "303",,, -1);
	НайтиСальдо(Счета.Резервы, "304",,, -1);

	// здесь необходимо проссумировать сальдо 3-х счетов
	СальдоКон1 = 0; СальдоНач1 = 0; НайтиСальдо(Счета.ПрибыльУбытокДоНалогообложения,, СальдоКон1, СальдоНач1,-1);
    СальдоКон2 = 0; СальдоНач2 = 0; НайтиСальдо(Счета.НалогНаПрибыль,, СальдоКон2, СальдоНач2,-1);
	СальдоКон3 = 0; СальдоНач3 = 0; НайтиСальдо(Счета.НераспределеннаяПрибыль,, СальдоКон3, СальдоНач3,-1);
	УстановитьЗначениеПоказателя("СумКон305", СальдоКон1+СальдоКон2+СальдоКон3);
	УстановитьЗначениеПоказателя("СумПред305", СальдоНач1+СальдоНач2+СальдоНач3);

	НайтиСальдо(Счета.ДоляМеньшинства, "601",,, -1);
	
	// Долгосрочные обязательства
	СальдоКон1 = 0; СальдоНач1 = 0; НайтиСальдо(Счета.КредитыЗаймыПроцентныеДолгосрочные,, СальдоКон1, СальдоНач1,-1);
	СальдоКон2 = 0; СальдоНач2 = 0; НайтиСальдо(Счета.ДолгосрочныеЗаймыБеспроцентные,, СальдоКон2, СальдоНач2,-1);
	УстановитьЗначениеПоказателя("СумКон401", СальдоКон1+СальдоКон2);
	УстановитьЗначениеПоказателя("СумПред401", СальдоНач1+СальдоНач2);
	
	НайтиСальдо(Счета.ОтложенныеДоходыДолгосрочные, "402",,, -1);
	НайтиСальдо(Счета.РезервыПредстоящихПлатежейДолгосрочные, "403",,, -1);
	НайтиСальдо(Счета.ОбязательстваПоПенсионнымПланамДолгосрочные, "404",,, -1);
	НайтиСальдо(Счета.ОтложенныеНалоговыеОбязательства, "405",,, -1);
	НайтиСальдо(Счета.ПрочиеОбязательстваДолгосрочные, "407",,, -1);
	
	СальдоКон = 0; СальдоНач = 0; НайтиСальдо(Счета.ДолгосрочнаяКредиторскаяЗадолженность,, СальдоКон, СальдоНач,1);
	УстановитьЗначениеПоказателя("СумКон406", СальдоКон + А4082Кон);
	УстановитьЗначениеПоказателя("СумПред406", СальдоНач + А4082Пред);
	
	
	// Текущие обязательства
	СальдоКон1 = 0; СальдоНач1 = 0; НайтиСальдо(Счета.ТекущиеЗаймыБеспроцентные,, СальдоКон1, СальдоНач1,-1);
	СальдоКон2 = 0; СальдоНач2 = 0; НайтиСальдо(Счета.КредитыЗаймыПроцентныеТекущие,, СальдоКон2, СальдоНач2,-1);
	УстановитьЗначениеПоказателя("СумКон501", СальдоКон1+СальдоКон2);
	УстановитьЗначениеПоказателя("СумПред501", СальдоНач1+СальдоНач2);

	НайтиСальдо(Счета.ОтложенныеДоходыТекущие, "502",,, -1);
	НайтиСальдо(Счета.РезервыПредстоящихПлатежейТекущие, "503",,, -1);
	НайтиСальдо(Счета.ОбязательстваПоПенсионнымПланамТекущие, "504",,, -1);
	НайтиСальдо(Счета.ТекущиеНалогиКУплате, "505",,, -1);
	
	СальдоКон = 0; СальдоНач = 0; НайтиСальдо(Счета.ТекущаяКредиторскаяЗадолженность,, СальдоКон, СальдоНач,1);
	УстановитьЗначениеПоказателя("СумКон506", СальдоКон + А5093Кон);
	УстановитьЗначениеПоказателя("СумПред506", СальдоНач + А5093Пред);
	
	// здесь необходимо проссумировать сальдо 2-х счетов
	СальдоКон1 = 0; СальдоНач1 = 0; НайтиСальдо(Счета.ОбязательстваПоОплатеТрудаТекущие,, СальдоКон1, СальдоНач1,-1);
    СальдоКон2 = 0; СальдоНач2 = 0; НайтиСальдо(Счета.ПрочиеОбязательстваТекущие,, СальдоКон2, СальдоНач2,-1);
	УстановитьЗначениеПоказателя("СумКон507", СальдоКон1+СальдоКон2);
	УстановитьЗначениеПоказателя("СумПред507", СальдоНач1+СальдоНач2);
		
    // Готово! Баланс рассчитан!
	ВремРезультатКонца = Null;
	ВремРезультатНачала = Null;

	Расчет("Баланс");
	Модифицированность = Истина;
КонецПроцедуры // ЗаполнитьАвто()

Процедура НайтиСальдо(Счет, ИмяПоказателя = Неопределено, СальдоКон = 0, СальдоНач = 0, Множитель = 1)
    Рез = ВремРезультатКонца.Найти(Счет, "Счет");
	Если Рез = Неопределено Тогда
        СальдоКон = 0;
	Иначе
		СальдоКон = Множитель*Рез.Сальдо;
	КонецЕсли;
	Если ИмяПоказателя <> Неопределено Тогда
		УстановитьЗначениеПоказателя("СумКон" + ИмяПоказателя, СальдоКон);
	КонецЕсли;
	
    Рез = ВремРезультатНачала.Найти(Счет, "Счет");
	Если Рез = Неопределено Тогда
		СальдоНач = 0;
	Иначе
		СальдоНач = Множитель*Рез.Сальдо;
	КонецЕсли;
	Если ИмяПоказателя <> Неопределено Тогда
		УстановитьЗначениеПоказателя("СумПред" + ИмяПоказателя, СальдоНач);
	КонецЕсли;
КонецПроцедуры // НайтиСальдо()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
	
	ЭтаФорма.АвтоЗаголовок = Ложь;

	мВПрограммеИзмененаОрганизация = Ложь;
	ФлажокОтклАвтоРасчет = Ложь;

	мЛистБаланс         = ЭлементыФормы.ПолеТабличногоДокументаБаланс;

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный;
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// Имеем сохраненные или скопированные данные отчета.
		// Восстанавливаем сохраненные данные отчета.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	Если мКонсолидация <> Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный Тогда
		//ЭлементыФормы.Организация.Видимость = Ложь;
		//ЭлементыФормы.НадписьОрганизация.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаЗаполнитьСведенияОбОрганизации.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заполнить.Доступность = Ложь;
	КонецЕсли;

	ПоказатьПериод();
	ЗаполнитьДатуВЯчейках();
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	ПриИзмененииЯзыка(АнглЯзык);

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

	мЛистБаланс.ТолькоПросмотр         = Истина;
	ВалютаПриИзменении(Неопределено);

	ФормироватьСтруктуруСвойствСтраниц();

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Инициализация();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, Источник)
	Перем ТаблицаСтраницРаздела;
	Перем ВыбрТаблицаСтраницРаздела;
	Перем ФлМодифицированностьСписка;

	Если Источник.КлючУникальности = "дляВыбораСтраницОтчета" Тогда
		мДеревоВыбранныхСтраниц = ВыбранноеЗначение;
	ИначеЕсли Источник.КлючУникальности = "дляПереходаНаСтраницу" Тогда

		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;

		ВыбранноеЗначение.Свойство("ТаблицаСтраницРаздела",  ВыбрТаблицаСтраницРаздела);
		ВыбранноеЗначение.Свойство("ФлагМодифицированности", ФлМодифицированностьСписка);

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

		Возврат;

		ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
		ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

		ТекСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		ИндексТекСтраницы  = 0;

		Если ТекСтраницаРаздела <> Неопределено Тогда
			ИндексТекСтраницы = ТаблицаСтраницРаздела.Индекс(ТекСтраницаРаздела);
		КонецЕсли;

		ИндексВыбСтраницы     = ИндексТекСтраницы;
		
		ТаблицаСтраницРаздела = ВыбрТаблицаСтраницРаздела.Скопировать();

		ВыбСтраницаРаздела    = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

		Если ВыбСтраницаРаздела <> Неопределено Тогда
			ИндексВыбСтраницы = ТаблицаСтраницРаздела.Индекс(ВыбСтраницаРаздела);
		КонецЕсли;

		// отображаем данные следующей страницы
		СтруктураДанныхВыбСтраницы = ВыбСтраницаРаздела.Данные;

		Для Каждого Элемент Из СтруктураДанныхВыбСтраницы Цикл
			ИмяПоказателя      = Элемент.Ключ;
			ЗначениеПоказателя = Элемент.Значение;

			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;

		Расчет("Баланс");

		ТекущийЭлемент = ТекТабличноеПоле;

		Если ФлМодифицированностьСписка Тогда
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = "Баланс";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаБаланс";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	Если (мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный) и (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не указана организация!", , "Действие не выполнено!");
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьАвто();
КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	ПоказатьСтраницыОтчета();

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)
	Если (мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный) и (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не заполнена организация!", , "Действие не выполнено!");
		Возврат;
	КонецЕсли;	
	
	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)
	Если (мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный) и (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не заполнена организация!", , "Действие не выполнено!");
		Возврат;
	КонецЕсли;	

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьДатуВЯчейках();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 2" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 2" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийЛист2ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Лист 2" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияЛист2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;
КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Лист 2" основной панели формы.
// Устанавлвает признак модифицированности данных в форме.
//
Процедура ПолеТабличногоДокументаБалансПриИзменении(Элемент)

	Расчет("Баланс");
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист2ПриИзменении()

Процедура ПолеТабличногоДокументаБалансПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);
КонецПроцедуры

Процедура ПолеТабличногоДокументаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	Форма = Отчеты.МСФОПримечания.ПолучитьФорму("МСФО");
	Для каждого Страница из Форма.ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		Элемент.СписокВыбора.Добавить(Лев(Страница.Заголовок, 1), Страница.Заголовок);
	КонецЦикла;
КонецПроцедуры

Процедура ПолеТабличногоДокументаОткрытие(Элемент, СтандартнаяОбработка)
	Если (ЗначениеЗаполнено(мПримечание)) и (Элемент.Значение > 0) Тогда 
		Если мПримечание.ИсточникОтчета = "МСФОПримечания" Тогда
			Отчет = Отчеты.МСФОПримечания.Создать();
			Отчет.мСохраненныйДок = мПримечание.ПолучитьОбъект();
			Отчет.мДатаНачалаПериодаОтчета = мПримечание.ДатаНачала;
			Отчет.мДатаКонцаПериодаОтчета  = мПримечание.ДатаОкончания;
			Отчет.мВыбраннаяФорма = "МСФО";

			ВыбФормаОтчета = Отчет.ПолучитьФорму("МСФО");
			ВыбФормаОтчета.РежимВыбора = Ложь;
			
			Если Элемент.Значение <= ВыбФормаОтчета.ЭлементыФормы.ОсновнаяПанель.Страницы.Количество() Тогда
				ВыбФормаОтчета.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ВыбФормаОтчета.ЭлементыФормы.ОсновнаяПанель.Страницы[Элемент.Значение-1];
				ВыбФормаОтчета.Открыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВалютаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(мВалюта) Тогда
		мВалюта = глЗначениеПеременной("ВалютаМеждународногоУчета");
	КонецЕсли;
	ВалютаНаименование = мВалюта.Наименование;
	ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Очистить();
	ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, "в " + ВалютаНаименование);
	ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, "в тысячах " + ВалютаНаименование);
	ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах " + ВалютаНаименование);
	
	ЕдиницаИзмерения = ЕдиницаИзмерения; // для обновления списка
	Попытка
		УстановитьФорматВывода();
	Исключение
	КонецПопытки; 
КонецПроцедуры

Процедура ПримечаниеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Организация) Тогда
		СтандартнаяОбработка = Ложь;

		ИсточникОтчетаДляОтбора = "МСФОПримечания";
		НаименованиеОтчетаДляОтбора = "Примечание к отчетам по МСФО";
		ФормаСпискаОтчетов = Документы.РегламентированныйОтчет.ПолучитьФормуСписка("ФормаСписка", Элемент, "дляПолученияСпискаОтчетов");
		//ФормаСпискаОтчетов = Документы.РегламентированныйОтчет.ПолучитьФормуВыбора(,Элемент,);

		ФормаСпискаОтчетов.ЭлементыФормы.СписокВидовОтчета.СписокВыбора.Добавить(ИсточникОтчетаДляОтбора, НаименованиеОтчетаДляОтбора);

		ФормаСпискаОтчетов.Отбор.ИсточникОтчета.Использование = Истина;
		ФормаСпискаОтчетов.Отбор.ИсточникОтчета.Значение      = ИсточникОтчетаДляОтбора;
		ФормаСпискаОтчетов.Отбор.Организация.Установить(Организация);
		//ФормаСпискаОтчетов.Организация = Организация;

		ФормаСпискаОтчетов.мРежимРаботы = "ВызваноИзСправочника";
		ФормаСпискаОтчетов.ОтборПоОрг = Истина;

		// фильтр по форме будет всегда
		ФормаСпискаОтчетов.ЭлементыФормы.ОтборПоФорме.Значение = Истина;

		// ФормаСпискаОтчетов.ЭлементыФормы.ОтборПоОрг.Значение = Истина;

		ФормаСпискаОтчетов.РежимВыбора = Истина;
		ФормаСпискаОтчетов.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура ПриИзмененииЯзыка(Элемент)
	Если АнглЯзык = ИСТИНА Тогда
		Орг = РегистрыСведений.СобственныеКонтрагенты.Выбрать();
		Пока Орг.Следующий() Цикл
			Если Орг.Объект = Организация Тогда
				ОргНазв = Орг.НаименованиеАнгл;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Название = "Balance sheet";
		ПериодОтчета = ПолучитьПредставлениеДатыДляЛиста(АнглЯзык, 1);
		ПериодОтчета2 = ПолучитьПредставлениеДатыДляЛиста(АнглЯзык, 2);
		Прим = "Notes";
		Активы = "ASSETS";
		ВнеоборотныеАктивы = "Non-current assets";
		ОсновныеСредства = "Property, plant and equipment";
		ИнвестиционнаяСобственность = "Investment property";
		НематериальныеАктивы = "Intangible assets";
		ИнвестицииВДочерниеКомпании = "Investments in subsidiaries";
		ИнвестицииВЗависимыеКомпании = "Investments in associates";
		ПрочиеДолгосрочныеФинВложения = "Other non-current financial assets";
		ДолгосрочнаяДебиторскаяЗадолженность = "Trade and other receivables";
		ОтложенныеНалоговыеАктивы = "Deferred tax assets";		
		ПрочиеВнеоборотныеАктивы = "Other non-current assets";
		ВсегоВнеоборотныеАктивы = "Total non-current assets";
		ОборотныеАктивы = "Current assets";
		ЗапасыЗатраты = "Inventories";
		КраткосрочныеФинВложения = "Other financial assets, current";
		КраткосрочнаяДебиторскаяЗадолженность = "Trade and other receivables, current";
		НалогиКВозмещениюИзБюджета = "Current tax receivables";
		ДенежныеСредстваИЭквиваленты = "Cash and cash equivalents";
		ПрочиеОборотныеАктивы = "Other current assets";
		ВсегоОборотныеАктивы = "Total current assets";
		ВсегоАктивы = "Total assets";
		КапиталИРезервы = "EQUITY";
		УставныйКапитал = "Issued capital";
		ЭмиссионныйДоход = "Share premium";
		СобственныеАкцииВыкупленные = "Treasury shares";
		РезервыКапитал = "Reserves";
		НераспределеннаяПрибыльУбыток = "Retained earnings (accumulated losses)";
		ДоляМеньшинства = "Minority interest";
		ВсегоКапитал = "Total equity";
		Обязательства = "LIABILITIES";
		ДолгосрочныеОбязательства = "Non-сurrent liabilities";
		ЗаймыПолученные = "Borrowings";
		ДоходыБудущихПериодов = "Deferred income";
		РезервыПредстоящихРасходов = "Provisions for other liabilities and charges";
		ОбязательстваПоПенсионномуОбеспечению = "Retirement benefit obligations";
		ОтложенныеНалоговыеОбязательства = "Deferred tax liabilities";
		ДолгосрочнаяКредиторскаяЗадолженность = "Trade and other payables";
		ПрочиеДолгосрочныеОбязательства = "Other non-current liabilities";
		ВсегоДолгосрочныеОбязательства = "Total non-current liabilities";
		ТекущиеОбязательства = "Current liabilities";
		ЗаймыПолученныеТекущие = "Borrowings";
		ДоходыБудущихПериодовТекущие = "Deferred income";
		НачисленныеРасходы = "Provisions";
		ПенсионныеОбязательстваТекущие = "Retirement benefit obligations";
		ТекущиеНалоговыеОбязательства = "Current tax payables";
		КредиторскаяЗадолженность = "Trade and other payables";
		ПрочиеТекущиеОбязательства = "Other current liabilities";
		ВсегоТекущиеОбязательства = "Total current liabilities";
		ВсегоПассивов = "Total equity and liabilities";		
	Иначе
		ОргНазв = Организация.НаименованиеПолное;
		Название = "Бухгалтерский баланс";
		ПериодОтчета = ПолучитьПредставлениеДатыДляЛиста(АнглЯзык, 1);
		ПериодОтчета2 = ПолучитьПредставлениеДатыДляЛиста(АнглЯзык, 2);
		Прим = "Прим.";
		Активы = "АКТИВЫ";
		ВнеоборотныеАктивы = "Внеоборотные активы";
		ОсновныеСредства = "Основные средства";
		ИнвестиционнаяСобственность = "Инвестиционная собственность";
		НематериальныеАктивы = "Нематериальные активы";
		ИнвестицииВДочерниеКомпании = "Инвестиции в дочерние компании";
		ИнвестицииВЗависимыеКомпании = "Инвестиции в зависимые компании";
		ПрочиеДолгосрочныеФинВложения = "Прочие долгосрочные финансовые вложения";
		ДолгосрочнаяДебиторскаяЗадолженность = "Долгосрочная дебиторская задолженность";
		ОтложенныеНалоговыеАктивы = "Отложенные налоговые активы";
		ПрочиеВнеоборотныеАктивы = "Прочие внеоборотные активы";
		ВсегоВнеоборотныеАктивы = "Всего внеоборотные активы";
		ОборотныеАктивы = "Оборотные активы";
		ЗапасыЗатраты = "Запасы";
		КраткосрочныеФинВложения = "Краткосрочные финансовые вложения";
		КраткосрочнаяДебиторскаяЗадолженность = "Краткосрочная дебиторская задолженность";
		НалогиКВозмещениюИзБюджета = "Налоги к возмещению из бюджета";
		ДенежныеСредстваИЭквиваленты = "Денежные средства и их эквиваленты";
		ПрочиеОборотныеАктивы = "Прочие оборотные активы";
		ВсегоОборотныеАктивы = "Всего оборотные активы";
		ВсегоАктивы = "Всего активы";
		КапиталИРезервы = "КАПИТАЛ И РЕЗЕРВЫ";
		УставныйКапитал = "Уставный капитал";
		ЭмиссионныйДоход = "Эмиссионный доход";
		СобственныеАкцииВыкупленные = "Собственные акции, выкупленные у акционеров";
		РезервыКапитал = "Резервы";
		НераспределеннаяПрибыльУбыток = "Нераспределенная прибыль (непокрытый убыток)";
		ДоляМеньшинства = "Доля меньшинства";
		ВсегоКапитал = "Всего капитал и резервы";
		Обязательства = "ОБЯЗАТЕЛЬСТВА";
		ДолгосрочныеОбязательства = "Долгосрочные обязательства";
		ЗаймыПолученные = "Займы полученные";
		ДоходыБудущихПериодов = "Доходы будущих периодов";
		РезервыПредстоящихРасходов = "Резервы предстоящих расходов и платежей";
		ОбязательстваПоПенсионномуОбеспечению = "Обязательства по пенсионному обеспечению";
		ОтложенныеНалоговыеОбязательства = "Отложенные налоговые обязательства";		
		ДолгосрочнаяКредиторскаяЗадолженность = "Долгосрочная кредиторская задолженность";
		ПрочиеДолгосрочныеОбязательства = "Прочие долгосрочные обязательства";
		ВсегоДолгосрочныеОбязательства = "Всего долгосрочные обязательства";
		ТекущиеОбязательства = "Текущие обязательства";
		ЗаймыПолученныеТекущие = "Займы полученные";
		ДоходыБудущихПериодовТекущие = "Доходы будущих периодов";
		НачисленныеРасходы = "Начисленные расходы";
		ПенсионныеОбязательстваТекущие = "Обязательства по пенсионному обеспечению";
		ТекущиеНалоговыеОбязательства = "Текущие налоговые обязательства";
		КредиторскаяЗадолженность = "Кредиторская задолженность";
		ПрочиеТекущиеОбязательства = "Прочие текущие обязательства";
		ВсегоТекущиеОбязательства = "Всего текущие обязательства";
		ВсегоПассивов = "Всего собственных средств и обязательств";
	КонецЕсли;
	
	УстановитьФорматВывода();
	Если ЗначениеЗаполнено(Организация) Тогда
		мЛистБаланс.Области.ОргНазв.Значение = ОргНазв;
	КонецЕсли;
	мЛистБаланс.Области.НазвОтчета.Значение = Название;
	мЛистБаланс.Области.ПериодОтчета.Значение = ПериодОтчета;
	мЛистБаланс.Области.ПериодОтчета2.Значение = ПериодОтчета2;
	мЛистБаланс.Области.Прим.Значение = Прим;
	мЛистБаланс.Области.Активы.Значение = Активы;
	мЛистБаланс.Области.ВнеоборотныеАктивы.Значение = ВнеоборотныеАктивы;
	мЛистБаланс.Области.ОсновныеСредства.Значение = ОсновныеСредства;
	мЛистБаланс.Области.ИнвестиционнаяСобственность.Значение = ИнвестиционнаяСобственность;
	мЛистБаланс.Области.НематериальныеАктивы.Значение = НематериальныеАктивы;
	мЛистБаланс.Области.ИнвестицииВДочерниеКомпании.Значение = ИнвестицииВДочерниеКомпании;
	мЛистБаланс.Области.ИнвестицииВЗависимыеКомпании.Значение = ИнвестицииВЗависимыеКомпании;
	мЛистБаланс.Области.ПрочиеДолгосрочныеФинВложения.Значение = ПрочиеДолгосрочныеФинВложения;
	мЛистБаланс.Области.ДолгосрочнаяДебиторскаяЗадолженность.Значение = ДолгосрочнаяДебиторскаяЗадолженность;
	мЛистБаланс.Области.ОтложенныеНалоговыеАктивы.Значение = ОтложенныеНалоговыеАктивы;
	мЛистБаланс.Области.ПрочиеВнеоборотныеАктивы.Значение = ПрочиеВнеоборотныеАктивы;
	мЛистБаланс.Области.ВсегоВнеоборотныеАктивы.Значение = ВсегоВнеоборотныеАктивы;
	мЛистБаланс.Области.ОборотныеАктивы.Значение = ОборотныеАктивы;
	мЛистБаланс.Области.ЗапасыЗатраты.Значение = ЗапасыЗатраты;
	мЛистБаланс.Области.КраткосрочныеФинВложения.Значение = КраткосрочныеФинВложения;
	мЛистБаланс.Области.КраткосрочнаяДебиторскаяЗадолженность.Значение = КраткосрочнаяДебиторскаяЗадолженность;
	мЛистБаланс.Области.НалогиКВозмещениюИзБюджета.Значение = НалогиКВозмещениюИзБюджета;
	мЛистБаланс.Области.ДенежныеСредстваИЭквиваленты.Значение = ДенежныеСредстваИЭквиваленты;
	мЛистБаланс.Области.ПрочиеОборотныеАктивы.Значение = ПрочиеОборотныеАктивы;
	мЛистБаланс.Области.ВсегоОборотныеАктивы.Значение = ВсегоОборотныеАктивы;
	мЛистБаланс.Области.ВсегоАктивы.Значение = ВсегоАктивы;
    мЛистБаланс.Области.КапиталИРезервы.Значение = КапиталИРезервы;
	мЛистБаланс.Области.УставныйКапитал.Значение = УставныйКапитал;
	мЛистБаланс.Области.ЭмиссионныйДоход.Значение = ЭмиссионныйДоход;
	мЛистБаланс.Области.СобственныеАкцииВыкупленные.Значение = СобственныеАкцииВыкупленные;
	мЛистБаланс.Области.РезервыКапитал.Значение = РезервыКапитал;	
	мЛистБаланс.Области.НераспределеннаяПрибыльУбыток.Значение = НераспределеннаяПрибыльУбыток;
	мЛистБаланс.Области.ДоляМеньшинства.Значение = ДоляМеньшинства;
	мЛистБаланс.Области.ВсегоКапитал.Значение = ВсегоКапитал;
	мЛистБаланс.Области.Обязательства.Значение = Обязательства;
	мЛистБаланс.Области.ДолгосрочныеОбязательства.Значение = ДолгосрочныеОбязательства;
	мЛистБаланс.Области.ЗаймыПолученные.Значение = ЗаймыПолученные;
	мЛистБаланс.Области.ДоходыБудущихПериодов.Значение = ДоходыБудущихПериодов;
	мЛистБаланс.Области.РезервыПредстоящихРасходов.Значение = РезервыПредстоящихРасходов;
	мЛистБаланс.Области.ОбязательстваПоПенсионномуОбеспечению.Значение = ОбязательстваПоПенсионномуОбеспечению;
	мЛистБаланс.Области.ОтложенныеНалоговыеОбязательства.Значение = ОтложенныеНалоговыеОбязательства;	
	мЛистБаланс.Области.ДолгосрочнаяКредиторскаяЗадолженность.Значение = ДолгосрочнаяКредиторскаяЗадолженность;
	мЛистБаланс.Области.ПрочиеДолгосрочныеОбязательства.Значение = ПрочиеДолгосрочныеОбязательства;
	мЛистБаланс.Области.ВсегоДолгосрочныеОбязательства.Значение = ВсегоДолгосрочныеОбязательства;
	мЛистБаланс.Области.ТекущиеОбязательства.Значение = ТекущиеОбязательства;   	
	мЛистБаланс.Области.ЗаймыПолученныеТекущие.Значение = ЗаймыПолученныеТекущие;
	мЛистБаланс.Области.ДоходыБудущихПериодовТекущие.Значение = ДоходыБудущихПериодовТекущие;	
	мЛистБаланс.Области.НачисленныеРасходы.Значение = НачисленныеРасходы;	
	мЛистБаланс.Области.ПенсионныеОбязательстваТекущие.Значение = ПенсионныеОбязательстваТекущие;
	мЛистБаланс.Области.ТекущиеНалоговыеОбязательства.Значение = ТекущиеНалоговыеОбязательства;
	мЛистБаланс.Области.КредиторскаяЗадолженность.Значение = КредиторскаяЗадолженность;	
	мЛистБаланс.Области.ВсегоТекущиеОбязательства.Значение = ВсегоТекущиеОбязательства;
	мЛистБаланс.Области.ВсегоПассивов.Значение = ВсегоПассивов;
	
	Модифицированность = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если мЗаписьЗапрещена <> Истина И ТипЗнч(мСохраненныйДок) = Тип("ДокументОбъект.РегламентированныйОтчет") И Модифицированность Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

Процедура КоманднаяПанельФормыРежимВводаИнформации(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей";

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

// Список выбора поля выбора "ВариантЗаполнения" на странице <Баланс>
ЭлементыФормы.ПолеВыбораВариантЗаполненияБаланс.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияБаланс.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияБаланс.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Число"));
ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2));

МассивТипов = Новый Массив; 
МассивТипов.Добавить(Тип("Строка"));
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(254));

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);

мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);

мСтруктураМногостраничныхРазделов = Новый Структура;

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
//мВерсияФормы = "30/01/2004"; Первая версия
// мВерсияФормы = "30/01/2005";
мВерсияФормы = "30/01/2006";

мПечатныеФормы = Новый СписокЗначений;