////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поля табличного документа
Перем мЛистПрибыляИУбытки Экспорт;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем мСоставПоказателей Экспорт;

// временные переменные для хранения результатов запросов
Перем ВремРезультатКонца, ВремРезультатНачала;
Перем РазмерностьПрописьюТекст1;
Перем РазмерностьПрописьюТекст2;

Перем мПечатныеФормы Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мСвойстваРазделовДекларации Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет страницу основной панели формы, на которой табличный документ
// содержит показатель по переданному параметром "КодПоказателя" коду.
//
// Параметры:
//  КодПоказателя - строка, код показателя.
//
// Возвращаемое значение:
//  строка, имя найденной страницы основной панели формы.
//  Если страница не найдена, возвращает Неопределено.
//
Функция ОпределитьСтраницуПанелиПоКодуПоказателя(КодПоказателя)
	Перем ИмяСтраницы;

	НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(КодПоказателя, "КодПоказателяПоСоставу, КодПоказателяПоФорме");
	Если НайденнаяСтрока <> Неопределено Тогда
		ИмяСтраницы = НайденнаяСтрока.ИмяПоляТаблДокумента;
	КонецЕсли;

	Возврат ИмяСтраницы;
	
КонецФункции // ОпределитьСтраницуПанелиПоКодуПоказателя()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	//СтруктураПоказателейВнутрСвязи = Новый Структура;
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000Б0051000");
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000В0026000");

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Имеем тот случай, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Имеем тот случай, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов заполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Имеем тот случай, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов заполнения таблицы на текущей странице.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Имеем тот случай, когда в новой версии формы был добавлен 
							// реквизит, который может быть заполнен автоматически по данным ИБ.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл
	
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	Если Месяц(мДатаКонцаПериодаОтчета) - Месяц(мДатаНачалаПериодаОтчета) = 11 Тогда
		// Готовая отчетность
		//СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );
		СтрПериодОтчета = Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=0") + " г.";
	Иначе // Промежуточная отчетность
		СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП");
	КонецЕсли;

	// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	// В Приложениях Б и В заполняем даты, по состоянию на которые
	// выполняется расчет среднегодовой стоимости имущества
	ГодРасчета     = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	СледГодРасчета = Формат(ДобавитьМесяц(мДатаКонцаПериодаОтчета, 12), "ДФ = 'гггг'");

	ДатаРасчета    = Формат(НачалоКвартала(ДобавитьМесяц(мДатаКонцаПериодаОтчета, 1)), "ДФ = ""дд ММММ гггг 'г.' """);

	ДатаНачало1Квартала         = НачалоГода(     Дата(ГодРасчета     + "0101000000"));
	ДатаНачало2Квартала         = НачалоКвартала( Дата(ГодРасчета     + "0401000000"));
	ДатаНачало3Квартала         = НачалоКвартала( Дата(ГодРасчета     + "0701000000"));
	ДатаНачало4Квартала         = НачалоКвартала( Дата(ГодРасчета     + "1001000000"));
	ДатаНачало1КварталаСледГода = НачалоГода(     Дата(СледГодРасчета + "0101000000"));


КонецПроцедуры // ПоказатьПериод()

// ПолучитьПредставлениеДатыДляЛиста
//
Функция ПолучитьПредставлениеДатыДляЛиста(Англ)

	Если Месяц(мДатаКонцаПериодаОтчета) - Месяц(мДатаНачалаПериодаОтчета) = 11 Тогда
		// Готовая отчетность
		Возврат ?(Англ, "Year ended at 31 December", "Год, закончившийся 31 декабря");
	Иначе // Промежуточная отчетность
		//мЛистПрибыляИУбытки.Области.ПериодОтчета.Значение = "за: " + ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП");
		ОписаниеП = Формат(День(мДатаНачалаПериодаОтчета), "ЧЦ=2; ЧВН=") + "." + Формат(Месяц(мДатаНачалаПериодаОтчета), "ЧЦ=2; ЧВН=") + " - " + Формат(День(мДатаКонцаПериодаОтчета), "ЧЦ=2; ЧВН=") + "." + Формат(Месяц(мДатаКонцаПериодаОтчета), "ЧЦ=2; ЧВН=");
		Возврат ?(Англ, "period " + ОписаниеП, "за период: " + ОписаниеП);
	КонецЕсли;

КонецФункции // ПолучитьПредставлениеДатыДляЛиста

// Процедура управляет выводом даты представления отчета в соответствующие
// ячейки табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	ДатаНОтч = мДатаНачалаПериодаОтчета;
	ДатаКОтч = мДатаКонцаПериодаОтчета;

	// В балансе всегда текущий сравниваем с годовым.
	// В остальных формах МСФР дата в дату, например 9 мес. 2003, с 9 мес. 2004
	// В балансе, если за полугодие, то сравниваем с годом прошлого периода.

	ДатаНПред = ДобавитьМесяц(ДатаНОтч, -12);
	ДатаКПред = ДобавитьМесяц(ДатаКОтч, -12);

	мЛистПрибыляИУбытки.Области.ПериодОтчета.Значение = ПолучитьПредставлениеДатыДляЛиста(АнглЯзык);
	ПредГод = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
	ОтчГод = мДатаНачалаПериодаОтчета;

	мЛистПрибыляИУбытки.Области.ПредГод.Значение = Формат(Год(ДатаКПред), "ЧГ=0");
	мЛистПрибыляИУбытки.Области.ОтчГод.Значение = Формат(Год(ДатаНОтч), "ЧГ=0");

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации()
	ОргНазв = Организация.НаименованиеПолное;
	Если ЗначениеЗаполнено(Организация) Тогда
		Если АнглЯзык = Истина Тогда
			Орг = РегистрыСведений.СобственныеКонтрагенты.Выбрать();
			Пока Орг.Следующий() Цикл
				Если Орг.Объект = Организация Тогда
					ОргНазв = Орг.НаименованиеАнгл;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		мЛистПрибыляИУбытки.Области.ОргНазв.Значение = ОргНазв;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("При выводе сумм в тысячах - точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("При выводе сумм в миллионах - точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	
	ВалютаУпр = мВалюта;
	
	Если АнглЯзык = ИСТИНА Тогда
		Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			мДелитель = 1;
			РазмерностьПрописьюТекст1 = "in " + ВалютаУпр;
			РазмерностьПрописьюТекст2 = "(" + ВалютаУпр +")";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0; ЧО = 0";

		ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
			мДелитель = 1000;
			РазмерностьПрописьюТекст1 = "in " + ВалютаУпр + " thousands";
			РазмерностьПрописьюТекст2 = "(" + ВалютаУпр +" thous.)";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3; ЧО = 0";

		ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
			мДелитель = 1000000;
			РазмерностьПрописьюТекст1 = "in " + ВалютаУпр + " million";
			РазмерностьПрописьюТекст2 = "(" + ВалютаУпр +"mln.)";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6; ЧО = 0";

		КонецЕсли;
	Иначе
		Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			мДелитель = 1;
			РазмерностьПрописьюТекст1 = "в " + ВалютаУпр;
			РазмерностьПрописьюТекст2 = "(" + ВалютаУпр +")";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0; ЧО = 0";

		ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
			мДелитель = 1000;
			РазмерностьПрописьюТекст1 = "в тыс. " + ВалютаУпр;
			РазмерностьПрописьюТекст2 = "(тыс. " + ВалютаУпр +")";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3; ЧО = 0";

		ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
			мДелитель = 1000000;
			РазмерностьПрописьюТекст1 = "в млн. " + ВалютаУпр;
			РазмерностьПрописьюТекст2 = "(млн. " + ВалютаУпр +")";
			мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6; ЧО = 0";

		КонецЕсли;
	КонецЕсли;
	
	Если АнглЯзык = ИСТИНА Тогда
		мЛистПрибыляИУбытки.Области.МасштабСуммИВалюта.Значение = "(all amounts " + РазмерностьПрописьюТекст1 + ")";	
	Иначе	
		мЛистПрибыляИУбытки.Области.МасштабСуммИВалюта.Значение = "(все суммы " + РазмерностьПрописьюТекст1 + ")";
	КонецЕсли;


	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
			ФорматируемаяОбласть.Формат = мСтрокаФормата;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
			Если ВариантЗаполнения = 4 Тогда
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
			Иначе
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиСтраниц с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Разбивает табличный документ на листы формата А4 для отображения в форме
// предварительного просмотра или вывода на печать.
//
// Параметры:
//	ПечФорма - ТабличныйДокумент, который требуется разбить.
//
Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "Отчет о прибылях и убытках по МСФО";
	ПустойТаблДок = ПечФорма.ПолучитьОбласть();
	ПустойТаблДок.Очистить();
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПустойТаблДок, ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати

	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста, Истина);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);

	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];

	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;

	//+MAV. В печатную форму попадают только не пустые строки
	//ПечатнаяФорма.Вывести(ОбластьПечати); // было раньше!!!
	   
	ВысотаТаблицы = ТабличноеПоле.ВысотаТаблицы;
	ШиринаТаблицы = ТабличноеПоле.ШиринаТаблицы;
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
        БылоПолеВвода = Ложь;
        ЗначаниеЗаполнено = Ложь;
		ИтоговаяСтрока = Ложь;

		Для НомерКолонки = 1 По Мин(ШиринаТаблицы, 8) Цикл // 8 - для табличного документа ДвижениеКапитала, т.к. последняя колонка всегда Итоговая
            ИмяОбласти = "R" + НомерСтроки + "C" + НомерКолонки;
			Область = ТабличноеПоле.Область(ИмяОбласти);
			Если Область.СодержитЗначение Тогда
				БылоПолеВвода = Истина;

				Если ЗначениеЗаполнено(Область.Значение) Тогда
					ЗначаниеЗаполнено = Истина;
				КонецЕсли;

				Если (Лев(Область.Имя,4) = "Итог") или (Лев(Область.Имя,5) = "Всего") Тогда
					ИтоговаяСтрока = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если (не БылоПолеВвода) или ЗначаниеЗаполнено или ИтоговаяСтрока Тогда
            Область = ТабличноеПоле.ПолучитьОбласть("R" + НомерСтроки + "C1:R" + НомерСтроки + "C" + ШиринаТаблицы);
			ПечатнаяФорма.Вывести(Область);
		КонецЕсли;
	КонецЦикла;
	//-MAV

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	//Если ВидПечати = "ПоказатьБланк" Тогда
	//	ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	//ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
	//	ПечатнаяФорма.Напечатать();
	//КонецЕсли;

КонецПроцедуры // ВывестиНаПечатьЛист()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет("ПрибыляИУбытки");
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет("ПрибыляИУбытки");
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

Функция ВернутьСреднийКурс(Валюта, Знач ДатаНачала, Знач ДатаКонца)
	РегистрВалюты = РегистрыСведений.КурсыВалют;
	Отбор = Новый Структура("Валюта", Валюта);
	
	Структура = РегистрВалюты.ПолучитьПоследнее(ДатаНачала, Отбор);
	НаНачало = Структура.Курс;
	
	Результат = Новый Структура();
	Результат.Вставить("Курс", Структура.Курс);
	Результат.Вставить("Кратность", Структура.Кратность);
	
	Числитель = 0;
	Знаменатель = 0;
	
	Выборка = РегистрВалюты.Выбрать(ДатаНачала, ДатаКонца, Отбор);
	Пока Выборка.Следующий() Цикл
		Курс = Выборка.Курс;
		Период = Выборка.Период;
		Разница = Период-ДатаНачала;
		
		Числитель = Числитель + НаНачало * Разница;
		Знаменатель = Знаменатель + Разница;
		
		ДатаНачала = Период;
		НаНачало = Курс;
	КонецЦикла;
	
	Разница = ДатаКонца-ДатаНачала;
	Числитель = Числитель + НаНачало * Разница;
	Знаменатель = Знаменатель + Разница;
	
	Если Знаменатель <> 0 Тогда
		Результат.Вставить("Курс", Числитель / Знаменатель);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя)
	
	//Перевод значения показателя в нужную валюту
	Если (ЗначениеЗаполнено(мВалюта)) и (мВалюта <> глЗначениеПеременной("ВалютаМеждународногоУчета")) Тогда

		ДатаНОтч = мДатаНачалаПериодаОтчета;
		ДатаКОтч = мДатаКонцаПериодаОтчета;

		// В балансе всегда текущий сравниваем с годовым.
		// В остальных формах МСФР дата в дату, например 9 мес. 2003, с 9 мес. 2004
		// В балансе, если за полугодие, то сравниваем с годом прошлого периода.

		ДатаНПред = ДобавитьМесяц(ДатаНОтч, -12);
		ДатаКПред = ДобавитьМесяц(ДатаКОтч, -12);

		Если Найти(ИмяПоказателя, "Кон") > 0 Тогда
			ВалНач = ВернутьСреднийКурс(глЗначениеПеременной("ВалютаМеждународногоУчета"), ДатаНОтч, ДатаНОтч);
			ВалКон = ВернутьСреднийКурс(мВалюта, ДатаНОтч, ДатаКОтч);
		Иначе
			ВалНач = ВернутьСреднийКурс(глЗначениеПеременной("ВалютаМеждународногоУчета"), ДатаНПред, ДатаКПред);
			ВалКон = ВернутьСреднийКурс(мВалюта, ДатаНПред, ДатаКПред);
		КонецЕсли;
		
		ЗначениеПоказателя = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЗначениеПоказателя, глЗначениеПеременной("ВалютаМеждународногоУчета"), мВалюта, ВалНач.Курс, ВалКон.Курс, ВалНач.Кратность, ВалКон.Кратность);
	КонецЕсли;
	//-

	ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяПоказателя);

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если ТаблицаВариантыЗаполнения <> Неопределено Тогда // MAV (было =)

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения; // MAV (было ВариантЗаполн)
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	мПечатныеФормы.Очистить();
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	//Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
	//	Возврат;
	//КонецЕсли;

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						ВывестиНаПечатьЛист(СтруктураПараметров);
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать", 	       ЧтоИскать);

				ВывестиНаПечатьЛист(СтруктураПараметров);
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",		   ЧтоИскать);

		ВывестиНаПечатьЛист(СтруктураПараметров);
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Управляет видимостью страниц основной панели формы.
//
Процедура ПоказатьСтраницыОтчета()

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;

		Если ПоказатьСтраницу = 0 Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
			ИмеютсяСкрытые = Истина;
		Иначе
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Истина;

		КонецЕсли; 

	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	КнопкиНастройки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = "Настройка";

	КнопкиНастройки.Текст = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)";
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницыОтчета()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаСдачи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.ОтчетностьПоМСФО;
	мСохраненныйДок.Комментарий                = КомментарийОбщий;

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем суммы дивидендов
	СписокСохранения.Вставить("СуммаДивидендовКон", мСуммаДивидендовКон);
	СписокСохранения.Вставить("СуммаДивидендовПред", мСуммаДивидендовПред);

	СписокСохранения.Вставить("Консолидация", мКонсолидация);
	СписокСохранения.Вставить("Примечание", мПримечание);
	СписокСохранения.Вставить("ПоХарактеруЗатрат", мПоХарактеруЗатрат);
	СписокСохранения.Вставить("Валюта", мВалюта);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	Модифицированность = Ложь;

	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПрибыляИУбытки";
	СтрокаУровня1.Представление            = "Отчет о прибылях и убытках";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПрибыляИУбытки";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем УчетнаяПолитика;
	Перем Автозаполнение;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаСдачи                = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	КомментарийОбщий         = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	Если (ВерсияФормы = "30/09/2003" Или ВерсияФормы = "30/09/2005")
	   И Год(мДатаНачалаПериодаОтчета) <> Год(мДатаКонцаПериодаОтчета) Тогда
		мДатаНачалаПериодаОтчета = НачалоГода(мДатаКонцаПериодаОтчета);
	КонецЕсли;

	// восстановим суммы дивидендов
	СписокСохранения.Свойство("СуммаДивидендовКон", мСуммаДивидендовКон);
	СписокСохранения.Свойство("СуммаДивидендовПред", мСуммаДивидендовПред);

	СписокСохранения.Свойство("Консолидация", мКонсолидация);
	СписокСохранения.Свойство("Примечание", мПримечание);
	СписокСохранения.Свойство("ПоХарактеруЗатрат", мПоХарактеруЗатрат);
	СписокСохранения.Свойство("Валюта", мВалюта);

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Автозаполнение;

	УстановитьФорматВывода();
	Расчет("ПрибыляИУбытки");

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	ПоказатьСтраницыОтчета();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет суммирование ячеек
//
Функция Сложить(Лист, Переменная, НачШаг, КонШаг, Итог = Неопределено, Шаг = 1)
    Итого = 0;
	Пока НачШаг <= КонШаг Цикл
		Имя = Переменная + Формат(НачШаг, "ЧЦ=2; ЧВН=");
		Попытка
			Итого = Итого + Лист.Области.Найти(Имя).Значение;
		Исключение
		КонецПопытки;

		НачШаг = НачШаг + Шаг;
	КонецЦикла;

	Рез = ОкруглитьЧислоПоФормату(Итого);

	Если Не Итог = Неопределено Тогда
		Лист.Области.Найти(Итог).Значение = Рез;
	КонецЕсли;

	Возврат Рез;
КонецФункции // Сложить()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт
	//ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	Если ФлажокОтклАвтоРасчет Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "ПрибыляИУбытки" Тогда
		Сложить(мЛистПрибыляИУбытки, "СумКон6", 1, 2, "ИтогКон6");
		Сложить(мЛистПрибыляИУбытки, "СумПред6", 1, 2, "ИтогПред6");

		Если мПоХарактеруЗатрат Тогда
			мЛистПрибыляИУбытки.Области.Найти("ИтогКон7").Значение = Сложить(мЛистПрибыляИУбытки, "СумКон6", 20, 25) + мЛистПрибыляИУбытки.Области.Найти("СумКон601").Значение;
			мЛистПрибыляИУбытки.Области.Найти("ИтогПред7").Значение = Сложить(мЛистПрибыляИУбытки, "СумПред6", 20, 25) + мЛистПрибыляИУбытки.Области.Найти("СумПред601").Значение;

			Сложить(мЛистПрибыляИУбытки, "СумКон6", 21, 25, "СумКон626");
			Сложить(мЛистПрибыляИУбытки, "СумПред6", 21, 25, "СумПред626");
		Иначе
			Сложить(мЛистПрибыляИУбытки, "СумКон6", 1, 8, "ИтогКон7");
			Сложить(мЛистПрибыляИУбытки, "СумПред6", 1, 8, "ИтогПред7");
		КонецЕсли;

		Сложить(мЛистПрибыляИУбытки, "СумКон6", 1, 14, "ИтогКон8");
		Сложить(мЛистПрибыляИУбытки, "СумПред6", 1, 14, "ИтогПред8");

		Сложить(мЛистПрибыляИУбытки, "СумКон6", 1, 15, "ИтогКон10");
		Сложить(мЛистПрибыляИУбытки, "СумПред6", 1, 15, "ИтогПред10");

		мЛистПрибыляИУбытки.Области.Найти("СумКон627").Значение = мЛистПрибыляИУбытки.Области.Найти("ИтогКон10").Значение - мЛистПрибыляИУбытки.Области.Найти("СумКон616").Значение;
		мЛистПрибыляИУбытки.Области.Найти("СумПред627").Значение = мЛистПрибыляИУбытки.Области.Найти("ИтогПред10").Значение - мЛистПрибыляИУбытки.Области.Найти("СумПред616").Значение;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда

		Расчет("ПрибыляИУбытки");

	КонецЕсли;

КонецПроцедуры // Расчет()

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто(МассивОрганизаций = Неопределено) Экспорт
	
	Счета = ПланыСчетов.Международный;

	///////////////////////////////////////////////////////////////////////////////
    // ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
	///////////////////////////////////////////////////////////////////////////////
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = Новый Массив();
		МассивОрганизаций.Добавить(Организация);
	КонецЕсли;

	ТабДок = Новый ТабличныйДокумент;

	ДатаНОтч = мДатаНачалаПериодаОтчета;
	ДатаКОтч = мДатаКонцаПериодаОтчета;

	// В балансе всегда текущий сравниваем с годовым.
	// В остальных формах МСФР дата в дату, например 9 мес. 2003, с 9 мес. 2004
	// В балансе, если за полугодие, то сравниваем с годом прошлого периода.

	ДатаНПред = ДобавитьМесяц(ДатаНОтч, -12);
	ДатаКПред = ДобавитьМесяц(ДатаКОтч, -12);

	ЗаполнитьОтчетОПрибыляхИУбытках("СумКон",  ДатаНОтч,  ДатаКОтч,  ТабДок, МассивОрганизаций);
	ЗаполнитьОтчетОПрибыляхИУбытках("СумПред", ДатаНПред, ДатаКПред, ТабДок, МассивОрганизаций);
	
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать();
	
	Расчет("ПрибыляИУбытки");
	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьАвто()

Процедура ЗаполнитьОтчетОПрибыляхИУбытках(ИмяПоказателя, ДатаН, ДатаК, ТабДок, МассивОрганизаций)
    Счета = ПланыСчетов.Международный;
	
	// Бухгалтерский итоги по счетам
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

	// Бухгалтерские итоги по аналитике
	БухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();

	Итоги = "НачальныйОстатокДт,
	        |НачальныйОстатокКт,
	        |КонечныйОстатокДт,
	        |КонечныйОстатокКт";

	// Бухгалтерские итоги по счетам, без аналитики
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаН, ДатаК, , , , , , "Организация", МассивОрганизаций);

	УстановитьЗначениеПоказателя(ИмяПоказателя + "601", БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счета.Выручка));
    УстановитьЗначениеПоказателя(ИмяПоказателя + "602", -1 * БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счета.СебестоимостьПродаж));
	Сумм = БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счета.ПрочиеОперационныеДоходы)+БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счета.ПрочиеОперационныеДоходыСоСвязаннымиСторонами);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "603", Сумм);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "620", Сумм);

	// Бухгалтерские итоги по счетам, без аналитики
	Итоги = "ОборотДт, ОборотКт";
	БухИтогиРС.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаН, ДатаК, , , , , , "Организация", МассивОрганизаций);

    Сумма4 = -1 * БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.РасходыНаСбыт); УстановитьЗначениеПоказателя(ИмяПоказателя + "604", Сумма4);
    Сумма5 = -1 * БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.АдминистративныеРасходы); УстановитьЗначениеПоказателя(ИмяПоказателя + "605", Сумма5);
    Сумма6 = -1 * БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.РасходыНаИсследованияИРазработки); УстановитьЗначениеПоказателя(ИмяПоказателя + "606", Сумма6);
    Сумма8 = -1 * БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ПрочиеОперационныеРасходы) - БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ПрочиеОперационныеРасходыСоСвязаннымиСторонами);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "608", Сумма8);

	Сумма11 = БухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ДоходыИРасходыПоИнвестициям)-БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ДоходыИРасходыПоИнвестициям);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "611", Сумма11);
	
	Сумма12 = БухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет,", Счета.ПрибыльУбытокОтАссоциированныхКомпаний)-БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет,", Счета.ПрибыльУбытокОтАссоциированныхКомпаний);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "612", Сумма12);
	
	Сумма13 = БухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ПрочиеВнереализационныеДоходы)+БухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ПрочиеВнереализационныеДоходыСоСвязаннымиСторонами);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "613", Сумма13-Сумма11-Сумма12);
	Сумма14 = -1 * БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ПрочиеВнереализационныеРасходы)-БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ПрочиеВнереализационныеРасходыСоСвязаннымиСторонами);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "614", Сумма14-Сумма11-Сумма12);

	Сумма15 = БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счета.НалогНаПрибыль); УстановитьЗначениеПоказателя(ИмяПоказателя + "615", Сумма15);
	Сумма16 = -БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счета.ДоляМеньшинстваВПрибылиИУбытки); УстановитьЗначениеПоказателя(ИмяПоказателя + "616", Сумма16);
	
    // Расчет прибыли на базовую акцию
	СКК900 = БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счета.ПрибылиИУбытки);
	СКД999 = БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счета.СуммарныеДоходыИРасходы);

	Если ИмяПоказателя = "СумКон" Тогда
		СуммаДивидендов = мСуммаДивидендовКон;
	Иначе
		СуммаДивидендов = мСуммаДивидендовПред;
	КонецЕсли;

	ПрибыльУбыток = СКК900 + СКД999 - СуммаДивидендов;

    //+Печатная форма
	Макет = ПолучитьМакет("РасчетБазовойПрибылиНаАкцию");

	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = "Расчет базовой прибыли на акцию за " + Формат(Год(ДатаК), "ЧГ=0") + " год.";
	ТабДок.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Показатель");
	Область.Параметры.Имя = "Сальдо по счету ""Прибыли и убытки"": ";
	Область.Параметры.Значение = ОкруглитьЧислоПоФормату(СКК900 + СКД999);
	ТабДок.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Показатель");
	Область.Параметры.Имя = "Сумма дивидендов: ";
	Область.Параметры.Значение = ОкруглитьЧислоПоФормату(СуммаДивидендов);
	ТабДок.Вывести(Область);

	Область = Макет.ПолучитьОбласть("ИтоговыйПоказатель");
	Область.Параметры.Имя = "Итого прибыль/убыток: ";
	Область.Параметры.Значение = ОкруглитьЧислоПоФормату(ПрибыльУбыток);
	ТабДок.Вывести(Область);

	Область = Макет.ПолучитьОбласть("ТаблицаШапка");
	ТабДок.Вывести(Область);
	//-
	
	Итоги = "НачальныйОстатокДт,
	        |НачальныйОстатокКт,
	        |КонечныйОстатокДт,
	        |КонечныйОстатокКт";

	// Бухгалтерские итоги по счетам, без аналитики
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Количество", "Счет", ДатаН, ДатаК, , , , , , "Организация", МассивОрганизаций);

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Период",,,);
	ТЗ.Колонки.Добавить("ВыпущенныеАкции",,,);
	ТЗ.Колонки.Добавить("ВыкупленныеАкции",,,);
	ТЗ.Колонки.Добавить("АкцииВОбращении",,,);

	СтрокаТЗ = ТЗ.Добавить(); // на начало года
	СтрокаТЗ.Период = НачалоГода(мДатаКонцаПериодаОтчета);
	СтрокаТЗ.ВыпущенныеАкции = БухИтоги.ПолучитьИтог("КоличествоНачальныйОстатокКт", "Счет", Счета.ОбыкновенныеАкции);
	СтрокаТЗ.ВыкупленныеАкции = БухИтоги.ПолучитьИтог("КоличествоНачальныйОстатокДт", "Счет", Счета.ОбыкновенныеАкцииВыкупленные);
	СтрокаТЗ.АкцииВОбращении = СтрокаТЗ.ВыпущенныеАкции - СтрокаТЗ.ВыкупленныеАкции;

	ИтогоАкцииВОбращении = СтрокаТЗ.АкцииВОбращении;
	
	СтрокаТЗ = ТЗ.Добавить(); // на конец года
	СтрокаТЗ.Период = мДатаКонцаПериодаОтчета;
	СтрокаТЗ.ВыпущенныеАкции = БухИтоги.ПолучитьИтог("КоличествоКонечныйОстатокКт", "Счет", Счета.ОбыкновенныеАкции);
	СтрокаТЗ.ВыкупленныеАкции = БухИтоги.ПолучитьИтог("КоличествоКонечныйОстатокДт", "Счет", Счета.ОбыкновенныеАкцииВыкупленные);
	СтрокаТЗ.АкцииВОбращении = СтрокаТЗ.ВыпущенныеАкции - СтрокаТЗ.ВыкупленныеАкции;

	// Проверим, были ли записи по счетам 3011 или 3031, меняющие количество акций
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Международный.СчетДт,
	               |	Международный.СчетКт,
	               |	Международный.Период,
	               |	Международный.КоличествоДт,
	               |	Международный.КоличествоКт
	               |ИЗ
	               |	РегистрБухгалтерии.Международный КАК Международный
	               |
	               |ГДЕ
	               |	(Международный.СчетДт = &Счет3011 ИЛИ Международный.СчетДт = &Счет3031 ИЛИ Международный.СчетКт = &Счет3011 ИЛИ Международный.СчетКт = &Счет3031) И
	               |	Международный.Период >= &НачПериод И
	               |	Международный.Период <= &КонПериод И
	               |	Международный.Организация В (&Организация)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	Запрос.УстановитьПараметр("Счет3011", Счета.ОбыкновенныеАкции);
	Запрос.УстановитьПараметр("Счет3031", Счета.ОбыкновенныеАкцииВыкупленные);
	Запрос.УстановитьПараметр("НачПериод", ДатаН);
	Запрос.УстановитьПараметр("КонПериод", ДатаК);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЗ = ТЗ.Вставить(ТЗ.Количество()-1);
		СтрокаТЗ.Период = Выборка.Период;

		Если Выборка.СчетДт = Счета.ОбыкновенныеАкции Тогда
			СтрокаТЗ.ВыпущенныеАкции = -Выборка.КоличествоДт;
			СтрокаТЗ.ВыкупленныеАкции = 0;
			
		ИначеЕсли Выборка.СчетДт = Счета.ОбыкновенныеАкцииВыкупленные Тогда
            СтрокаТЗ.ВыпущенныеАкции = 0;
			СтрокаТЗ.ВыкупленныеАкции = Выборка.КоличествоДт;
			
		ИначеЕсли Выборка.СчетКт = Счета.ОбыкновенныеАкции Тогда
			СтрокаТЗ.ВыпущенныеАкции = Выборка.КоличествоКт;
			СтрокаТЗ.ВыкупленныеАкции = 0;
			
		ИначеЕсли Выборка.СчетКт = Счета.ОбыкновенныеАкцииВыкупленные Тогда
            СтрокаТЗ.ВыпущенныеАкции = 0;
			СтрокаТЗ.ВыкупленныеАкции = -Выборка.КоличествоКт;
		КонецЕсли;

		ИтогоАкцииВОбращении = ИтогоАкцииВОбращении + СтрокаТЗ.ВыпущенныеАкции - СтрокаТЗ.ВыкупленныеАкции;
		СтрокаТЗ.АкцииВОбращении = ИтогоАкцииВОбращении;
	КонецЦикла;

	// Временная таблица (ТЗ) готова, теперь рассчитаем средневзвешенное число обыкновенных акций

   	СредневзвешенноеЧислоОбыкновенныхАкций = 0;
	ПерваяСтрока = Истина;
	АкцииВОбращении = 0;
	Период = 0;

	Для каждого СтрокаТЗ Из ТЗ Цикл
	    //+Печатная форма
		Область = Макет.ПолучитьОбласть("ТаблицаСтрока");
		Область.Параметры.Период = Формат(СтрокаТЗ.Период, "ДЛФ=D");
		Область.Параметры.ВыпущенныеАкции = ОкруглитьЧислоПоФормату(СтрокаТЗ.ВыпущенныеАкции);
		Область.Параметры.ВыкупленныеАкции = ОкруглитьЧислоПоФормату(СтрокаТЗ.ВыкупленныеАкции);
		Область.Параметры.АкцииВОбращении = ОкруглитьЧислоПоФормату(СтрокаТЗ.АкцииВОбращении);
		ТабДок.Вывести(Область);
		//-
		
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
		Иначе
			СредневзвешенноеЧислоОбыкновенныхАкций = СредневзвешенноеЧислоОбыкновенныхАкций + АкцииВОбращении * (СтрокаТЗ.Период - Период)/60/60/24;
		КонецЕсли;

		АкцииВОбращении = СтрокаТЗ.АкцииВОбращении;
		Период = СтрокаТЗ.Период;
	КонецЦикла;

	СредневзвешенноеЧислоОбыкновенныхАкций = СредневзвешенноеЧислоОбыкновенныхАкций/365;

	Если СредневзвешенноеЧислоОбыкновенныхАкций = 0 Тогда
		Сумма18 = 0;
	Иначе
		Сумма18 = ПрибыльУбыток/СредневзвешенноеЧислоОбыкновенныхАкций; // Прибыль (убыток) на акцию
	КонецЕсли;

	УстановитьЗначениеПоказателя(ИмяПоказателя + "618", Сумма18);

	//+Печатная форма
	Область = Макет.ПолучитьОбласть("Показатель");
	Область.Параметры.Имя = "Средневзвешенное число обыкновенных акций: ";
	Область.Параметры.Значение = ОкруглитьЧислоПоФормату(СредневзвешенноеЧислоОбыкновенныхАкций);
	ТабДок.Вывести(Область);

	Область = Макет.ПолучитьОбласть("ИтоговыйПоказатель");
	Область.Параметры.Имя = "Итого базовая прибыль на акцию: ";
	Область.Параметры.Значение = ОкруглитьЧислоПоФормату(Сумма18);
	ТабДок.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(Область);
	//-
	
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счета.ГотоваяПродукция); //2034
	МассивСчетов.Добавить(Счета.КомплектующиеИПолуфабрикаты); // 2033
	МассивСчетов.Добавить(Счета.НезавершенноеПроизводство); //2032
	МассивСчетов.Добавить(Счета.ТоварыОтгруженные); //20361
	МассивСчетов.Добавить(Счета.ВыполненныеЭтапыРабот); //20362
	МассивСчетов.Добавить(Счета.ЗатратыНезавершенногоСтроительства); //202
	
	Итоги = "НачальныйОстатокДт,
	        |КонечныйОстатокДт";
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаН, ДатаК, , МассивСчетов, , , , "Организация", МассивОрганизаций);
	Сумма21 = 0;
	Для каждого Счет из МассивСчетов Цикл
		Сумма21 = Сумма21 + БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет) - БухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяПоказателя + "621", Сумма21);
	
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счета.НезавершенноеПроизводство); //2032
	МассивСчетов.Добавить(Счета.АдминистративныеРасходы); //8015
	МассивСчетов.Добавить(Счета.РасходыНаСбыт); //8016
	МассивСчетов.Добавить(Счета.РасходыНаИсследованияИРазработки); //8017
	
	Итоги = "КорОборотКт";
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаН, ДатаК, , Счета.СырьеИМатериалы, , МассивСчетов, , "Организация", МассивОрганизаций);
	
	Сумма22 = -БухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет", Счета.СырьеИМатериалы);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "622", Сумма22);
	
	Итоги = "КорОборотКт";
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаН, ДатаК, , Счета.ОбязательстваПоОплатеТрудаТекущие, , МассивСчетов, , "Организация", МассивОрганизаций);
	
	Сумма23 = -БухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет", Счета.ОбязательстваПоОплатеТрудаТекущие);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "623", Сумма23);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ОсновныеСредстваМеждународныйУчетСрезПоследних.СчетНачисленияАмортизации КАК Счет
	               |ИЗ
	               |	РегистрСведений.ОсновныеСредстваМеждународныйУчет.СрезПоследних(&Дата, ) КАК ОсновныеСредстваМеждународныйУчетСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НематериальныеАктивыМеждународныйУчетСрезПоследних.СчетНачисленияАмортизации
	               |ИЗ
	               |	РегистрСведений.НематериальныеАктивыМеждународныйУчет.СрезПоследних(&Дата, ) КАК НематериальныеАктивыМеждународныйУчетСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ДатаК);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСчетовАмортизации = Новый Массив();
	Пока Выборка.Следующий() Цикл
		МассивСчетовАмортизации.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Итоги = "КорОборотКт";
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаН, ДатаК, , МассивСчетовАмортизации, , МассивСчетов, , "Организация", МассивОрганизаций);
	
	Сумма24 = 0;
	Для каждого Счет из МассивСчетовАмортизации Цикл
		Сумма24 = Сумма24 - БухИтоги.ПолучитьИтог("СуммаКорОборотКт", "Счет", Счет);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяПоказателя + "624", Сумма24);
	
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счета.ПрочиеОперационныеРасходы); //801
	МассивСчетов.Добавить(Счета.НезавершенноеПроизводство); //2032
	
	Итоги = "КорОборотДт, ОборотДт";
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаН, ДатаК, , МассивСчетов, , Счета.НезавершенноеПроизводство, , "Организация", МассивОрганизаций);
	Сумма25 = -1*(БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ПрочиеОперационныеРасходы) + БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.НезавершенноеПроизводство)-БухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет", Счета.НезавершенноеПроизводство)+Сумма22+Сумма23+Сумма24);

	УстановитьЗначениеПоказателя(ИмяПоказателя + "625", Сумма25);
КонецПроцедуры // ЗаполнитьОтчетОПрибыляхИУбытках()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));

	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));

	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "ПрибыляИУбытки";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭтаФорма.АвтоЗаголовок = Ложь;

	мЛистПрибыляИУбытки = ЭлементыФормы.ПолеТабличногоДокументаПрибыляИУбытки;

	ФормироватьСтруктуруСвойствСтраниц();

	мВПрограммеИзмененаОрганизация = Ложь;
	ФлажокОтклАвтоРасчет = Ложь;

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный;
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// Имеем сохраненные или скопированные данные отчета.
		// Восстанавливаем сохраненные данные отчета.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	Если мКонсолидация <> Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный Тогда
		// ЭлементыФормы.Организация.Видимость = Ложь;
		// ЭлементыФормы.НадписьОрганизация.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаЗаполнитьСведенияОбОрганизации.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заполнить.Доступность = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	ЗаполнитьДатуВЯчейках();
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	ПриИзмененииЯзыка(АнглЯзык);

	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

	мЛистПрибыляИУбытки.ТолькоПросмотр = Истина;
	
	ПоХарактеруЗатратПриИзменении("");
	
	ВалютаПриИзменении(Неопределено);
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Инициализация();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, Источник)
	Перем ТаблицаСтраницРаздела;
	Перем ВыбрТаблицаСтраницРаздела;
	Перем ФлМодифицированностьСписка;

	Если Источник.КлючУникальности = "дляВыбораСтраницОтчета" Тогда
		мДеревоВыбранныхСтраниц = ВыбранноеЗначение;
	ИначеЕсли Источник.КлючУникальности = "дляПереходаНаСтраницу" Тогда

		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;

		ВыбранноеЗначение.Свойство("ТаблицаСтраницРаздела",  ВыбрТаблицаСтраницРаздела);
		ВыбранноеЗначение.Свойство("ФлагМодифицированности", ФлМодифицированностьСписка);

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

		Возврат;

		ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
		ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

		ТекСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		ИндексТекСтраницы  = 0;

		Если ТекСтраницаРаздела <> Неопределено Тогда
			ИндексТекСтраницы = ТаблицаСтраницРаздела.Индекс(ТекСтраницаРаздела);
		КонецЕсли;

		ИндексВыбСтраницы     = ИндексТекСтраницы;
		
		ТаблицаСтраницРаздела = ВыбрТаблицаСтраницРаздела.Скопировать();

		ВыбСтраницаРаздела    = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

		Если ВыбСтраницаРаздела <> Неопределено Тогда
			ИндексВыбСтраницы = ТаблицаСтраницРаздела.Индекс(ВыбСтраницаРаздела);
		КонецЕсли;

		// отображаем данные следующей страницы
		СтруктураДанныхВыбСтраницы = ВыбСтраницаРаздела.Данные;

		Для Каждого Элемент Из СтруктураДанныхВыбСтраницы Цикл
			ИмяПоказателя      = Элемент.Ключ;
			ЗначениеПоказателя = Элемент.Значение;

			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;

		Расчет("ПрибыляИУбытки");

		ТекущийЭлемент = ТекТабличноеПоле;

		Если ФлМодифицированностьСписка Тогда
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	Если (мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный) и (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не заполнена организация!", , "Действие не выполнено!");
		Возврат;
	КонецЕсли;	

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	ПоказатьСтраницыОтчета();

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)
	Если (мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный) и (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не заполнена организация!", , "Действие не выполнено!");
		Возврат;
	КонецЕсли;	

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)
	Если (мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный) и (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не заполнена организация!", , "Действие не выполнено!");
		Возврат;
	КонецЕсли;	

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьДатуВЯчейках();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 2" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 2" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийЛист2ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Лист 2" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияЛист2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;
КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Лист 2" основной панели формы.
// Устанавлвает признак модифицированности данных в форме.
//
Процедура ПолеТабличногоДокументаБалансПриИзменении(Элемент)

	Расчет("ПрибыляИУбытки");
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист2ПриИзменении()

Процедура ПолеТабличногоДокументаБалансПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);
КонецПроцедуры

Процедура КоманднаяПанельФормыДоп_Параметры(Кнопка)
	ВыбФорма = ПолучитьФорму("ФормаДопПараметров",ЭтаФорма);
	ВыбФорма.РежимВыбора = Ложь;
	ВыбФорма.ЭлементыФормы.НадписьВсеСуммы.Заголовок = "(все суммы " + РазмерностьПрописьюТекст1 + ")";
	
	//Если Месяц(мДатаКонцаПериодаОтчета) - Месяц(мДатаНачалаПериодаОтчета) = 11 Тогда
	//	// Готовая отчетность
	//	ПредГод = мДатаНачалаПериодаОтчета;
	//	ОтчГод = мДатаКонцаПериодаОтчета;
	//Иначе // Промежуточная отчетность
	//	ПредГод = ДобавитьМесяц(мДатаНачалаПериодаОтчета, -12);
	//	ОтчГод = ДобавитьМесяц(мДатаКонцаПериодаОтчета, -12);
	//КонецЕсли;

	ВыбФорма.ЭлементыФормы.СуммаДивидендовКон.Заголовок = "Сумма дивидендов на конец " + Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=0") + " г.:";
	ВыбФорма.ЭлементыФормы.СуммаДивидендовПред.Заголовок = "Сумма дивидендов на конец " + Формат(Год(мДатаКонцаПериодаОтчета) - 1, "ЧГ=0") + " г.:";
	ВыбФорма.ЭлементыФормы.ПолеВводаСуммаДивидендовКон.Значение = мСуммаДивидендовКон;
	ВыбФорма.ЭлементыФормы.ПолеВводаСуммаДивидендовПред.Значение = мСуммаДивидендовПред;
	ВыбФорма.ОткрытьМодально();

КонецПроцедуры

Процедура ПоХарактеруЗатратПриИзменении(Элемент)
	ЭлементыФормы.ПолеТабличногоДокументаПрибыляИУбытки.Область("Метод2").Видимость = мПоХарактеруЗатрат;
	ЭлементыФормы.ПолеТабличногоДокументаПрибыляИУбытки.Область("Метод1").Видимость = НЕ мПоХарактеруЗатрат;
	Расчет("ПрибыляИУбытки");
КонецПроцедуры

Процедура ВалютаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(мВалюта) Тогда
		мВалюта = глЗначениеПеременной("ВалютаМеждународногоУчета");
	КонецЕсли;
	ВалютаНаименование = мВалюта.Наименование;
	ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Очистить();
	ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, "в " + ВалютаНаименование);
	ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, "в тысячах " + ВалютаНаименование);
	ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах " + ВалютаНаименование);
	
	ЕдиницаИзмерения = ЕдиницаИзмерения; // для обновления списка
	Попытка
		УстановитьФорматВывода();
	Исключение
	КонецПопытки; 
КонецПроцедуры

Процедура ПримечаниеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Организация) Тогда
		СтандартнаяОбработка = Ложь;

		ИсточникОтчетаДляОтбора = "МСФОПримечания";
		НаименованиеОтчетаДляОтбора = "Примечание к отчетам по МСФО";
		ФормаСпискаОтчетов = Документы.РегламентированныйОтчет.ПолучитьФормуСписка("ФормаСписка", Элемент, "дляПолученияСпискаОтчетов");
		//ФормаСпискаОтчетов = Документы.РегламентированныйОтчет.ПолучитьФормуВыбора(,Элемент,);

		ФормаСпискаОтчетов.ЭлементыФормы.СписокВидовОтчета.СписокВыбора.Добавить(ИсточникОтчетаДляОтбора, НаименованиеОтчетаДляОтбора);

		ФормаСпискаОтчетов.Отбор.ИсточникОтчета.Использование = Истина;
		ФормаСпискаОтчетов.Отбор.ИсточникОтчета.Значение      = ИсточникОтчетаДляОтбора;
		ФормаСпискаОтчетов.Отбор.Организация.Установить(Организация);
		//ФормаСпискаОтчетов.Организация = Организация;

		ФормаСпискаОтчетов.мРежимРаботы = "ВызваноИзСправочника";
		ФормаСпискаОтчетов.ОтборПоОрг = Истина;

		// фильтр по форме будет всегда
		ФормаСпискаОтчетов.ЭлементыФормы.ОтборПоФорме.Значение = Истина;

		// ФормаСпискаОтчетов.ЭлементыФормы.ОтборПоОрг.Значение = Истина;

		ФормаСпискаОтчетов.РежимВыбора = Истина;
		ФормаСпискаОтчетов.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура ПриИзмененииЯзыка(Элемент)
	Если АнглЯзык = ИСТИНА Тогда
		Орг = РегистрыСведений.СобственныеКонтрагенты.Выбрать();
		Пока Орг.Следующий() Цикл
			Если Орг.Объект = Организация Тогда
				ОргНазв = Орг.НаименованиеАнгл;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Название = "Income statement";
		ПериодОтчета = ПолучитьПредставлениеДатыДляЛиста(АнглЯзык);
		Прим = "Notes";
		ВыручкаОтРеализации = "Sales";
		СебестоимостьРеализации = "Cost of goods sold";
		ВаловаяПрибыль = "Gross profit";
		ПрочиеОперационныеДоходы = "Other operating income";
		ЗатратыНаСбыт = "Selling and marketing costs";
		АдминистративныеРасходы = "Administrative expenses";
		РасходыНаИсследования = "Research and development costs";
		ПрочиеОперационныеРасходы = "Other operating expenses";
		ПрочиеОперДоходы = "Other operating income";
		ИзмененияВЗапасах = "Changes in inventories of finished goods and work in progress";
		ИспользованноеCырье = "Raw materials and consumables used";
		ЗаработнаяПлата = "Employee expenses";
		Амортизация = "Depreciation and amortisation";
		ПрочиеОперРасходы = "Other operating expenses";
		ИтогоОперРасходы = "Total operating expenses";
		ПрибыльОпер = "Operating profit (loss)";
		ПрибыльИнвест = "Other income (losses) from investments";
		ДоляПрибылиЗависимыхКомпаний = "Share of profit (loss) from equity accounted associates";
		ПрочиеДоходы = "Other income";
		ПрочиеРасходы = "Other expenses";
		ПрибыльДоНалогообложения = "Profit (loss) before income tax";
		РасходПоНалогуНаПрибыль = "Income tax expense (income)";
		ЧистаяПрибыль = "Profit (loss) for the period";
		АкционерамКомпании = "Attributable to equity holders of the Company";
		ДоляМеньшинстваПриб = "Minority interest";
		ПрибыльНаАкцию = "Earnings per share";
		Базовая = "- basic";
		Разводненная = "- diluted";
	Иначе
		ОргНазв = Организация.НаименованиеПолное;
		Название = "Отчет о прибылях и убытках";
		ПериодОтчета = ПолучитьПредставлениеДатыДляЛиста(АнглЯзык);
		Прим = "Прим.";
		ВыручкаОтРеализации = "Выручка от реализации";
		СебестоимостьРеализации = "Себестоимость реализации";  		
		ВаловаяПрибыль = "Валовая прибыль";
		ПрочиеОперационныеДоходы = "Прочие операционные доходы";		
		ЗатратыНаСбыт = "Затраты на сбыт";                 		
		АдминистративныеРасходы = "Административные расходы";        		
		РасходыНаИсследования = "Расходы на исследования и разработки";		
		ПрочиеОперационныеРасходы = "Прочие операционные расходы";		
		ПрочиеОперДоходы = "Прочие операционные доходы";		
		ИзмененияВЗапасах = "Изменения в запасах готовой продукции и незавершенного производства";		
		ИспользованноеCырье = "Использованное сырье и расходные материалы";		
		ЗаработнаяПлата = "Заработная плата";		
		Амортизация = "Расходы на амортизацию";		
		ПрочиеОперРасходы = "Прочие операционные расходы";		
		ИтогоОперРасходы = "Всего операционные расходы";
		ПрибыльОпер = "Прибыль (убыток) от операционной деятельности";		
		ПрибыльИнвест = "Прибыль (убыток) от инвестиций";
		ДоляПрибылиЗависимыхКомпаний = "Доля в прибыли (убытке) зависимых компаний";
		ПрочиеДоходы = "Прочие доходы";		
		ПрочиеРасходы = "Прочие расходы";
		ПрибыльДоНалогообложения = "Прибыль (убыток) до налогообложения";		
		РасходПоНалогуНаПрибыль = "Расход (доход) по налогу на прибыль";		
		ЧистаяПрибыль = "Прибыль (убыток) за период";		
		АкционерамКомпании = "Акционерам компании";		
		ДоляМеньшинстваПриб = "Доля меньшинства";		
		ПрибыльНаАкцию = "Прибыль на акцию";		
		Базовая = "- базовая";		
		Разводненная = "- разводненная";
	КонецЕсли;
	
	УстановитьФорматВывода();
	Если ЗначениеЗаполнено(Организация) Тогда
		мЛистПрибыляИУбытки.Области.ОргНазв.Значение = ОргНазв;
	КонецЕсли;
	мЛистПрибыляИУбытки.Области.НазвОтчета.Значение = Название;
	мЛистПрибыляИУбытки.Области.ПериодОтчета.Значение = ПериодОтчета;
	мЛистПрибыляИУбытки.Области.Прим.Значение = Прим;
	мЛистПрибыляИУбытки.Области.ВыручкаОтРеализации.Значение = ВыручкаОтРеализации;
	мЛистПрибыляИУбытки.Области.СебестоимостьРеализации.Значение = СебестоимостьРеализации;
	мЛистПрибыляИУбытки.Области.ВаловаяПрибыль.Значение = ВаловаяПрибыль;
	мЛистПрибыляИУбытки.Области.ПрочиеОперационныеДоходы.Значение = ПрочиеОперационныеДоходы;
	мЛистПрибыляИУбытки.Области.ЗатратыНаСбыт.Значение = ЗатратыНаСбыт;
	мЛистПрибыляИУбытки.Области.АдминистративныеРасходы.Значение = АдминистративныеРасходы;
	мЛистПрибыляИУбытки.Области.РасходыНаИсследования.Значение = РасходыНаИсследования;
	мЛистПрибыляИУбытки.Области.ПрочиеОперационныеРасходы.Значение = ПрочиеОперационныеРасходы;
	мЛистПрибыляИУбытки.Области.ПрочиеОперДоходы.Значение = ПрочиеОперДоходы;
	мЛистПрибыляИУбытки.Области.ИзмененияВЗапасах.Значение = ИзмененияВЗапасах;
	мЛистПрибыляИУбытки.Области.ИспользованноеCырье.Значение = ИспользованноеCырье;
	мЛистПрибыляИУбытки.Области.ЗаработнаяПлата.Значение = ЗаработнаяПлата;
	мЛистПрибыляИУбытки.Области.Амортизация.Значение = Амортизация;
	мЛистПрибыляИУбытки.Области.ПрочиеОперРасходы.Значение = ПрочиеОперРасходы;
	мЛистПрибыляИУбытки.Области.ИтогоОперРасходы.Значение = ИтогоОперРасходы;
	мЛистПрибыляИУбытки.Области.ПрибыльОпер.Значение = ПрибыльОпер;
	мЛистПрибыляИУбытки.Области.ПрибыльИнвест.Значение = ПрибыльИнвест;	
	мЛистПрибыляИУбытки.Области.ДоляПрибылиЗависимыхКомпаний.Значение = ДоляПрибылиЗависимыхКомпаний;
	мЛистПрибыляИУбытки.Области.ПрочиеДоходы.Значение = ПрочиеДоходы; 	
	мЛистПрибыляИУбытки.Области.ПрочиеРасходы.Значение = ПрочиеРасходы;	
	мЛистПрибыляИУбытки.Области.ПрибыльДоНалогообложения.Значение = ПрибыльДоНалогообложения;	
	мЛистПрибыляИУбытки.Области.РасходПоНалогуНаПрибыль.Значение = РасходПоНалогуНаПрибыль;	
	мЛистПрибыляИУбытки.Области.ЧистаяПрибыль.Значение = ЧистаяПрибыль;         	
	мЛистПрибыляИУбытки.Области.АкционерамКомпании.Значение = АкционерамКомпании; 	
	мЛистПрибыляИУбытки.Области.ДоляМеньшинстваПриб.Значение = ДоляМеньшинстваПриб;	
	мЛистПрибыляИУбытки.Области.ПрибыльНаАкцию.Значение = ПрибыльНаАкцию;	
	мЛистПрибыляИУбытки.Области.Базовая.Значение = Базовая;	
	мЛистПрибыляИУбытки.Области.Разводненная.Значение = Разводненная;
		
	Модифицированность = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если мЗаписьЗапрещена <> Истина И ТипЗнч(мСохраненныйДок) = Тип("ДокументОбъект.РегламентированныйОтчет") И Модифицированность Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРежимВводаИнформации(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей";

мСтруктураМногостраничныхРазделов = Новый Структура;

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

// Список выбора поля выбора "ВариантЗаполнения" на странице <ПрибыляИУбытки>
ЭлементыФормы.ПолеВыбораВариантЗаполненияПрибыляИУбытки.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияПрибыляИУбытки.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияПрибыляИУбытки.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Число"));
ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2));

МассивТипов = Новый Массив; 
МассивТипов.Добавить(Тип("Строка"));
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(254));

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
//мВерсияФормы = "30/09/2003"; первая версия
// мВерсияФормы = "30/09/2005";
мВерсияФормы = "30/09/2006";

мПечатныеФормы = Новый СписокЗначений;