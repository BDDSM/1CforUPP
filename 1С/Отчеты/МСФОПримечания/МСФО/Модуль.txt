////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// хранят имена многострочных разделов

Перем мИдГруппы1;
Перем мИдГруппы2;
Перем мИдГруппы3;
Перем мИдГруппы4;
Перем мИдГруппы5;
Перем мИдГруппы6;
Перем мИдГруппы7;
Перем мИдГруппы8;
Перем мИдГруппы9;
Перем мИдГруппы10;
Перем мИдГруппы11;
Перем мИдГруппы12;
Перем мИдГруппы13;
Перем мИдГруппы14;
Перем мИдГруппы15;
Перем мИдГруппы16;
Перем мИдГруппы17;
Перем мИдГруппы18;
Перем мИдГруппы19;
Перем мИдГруппы20;
Перем мИдГруппы21;

Перем мИдГруппы30;

// поля табличного документа

Перем мЛистПримечания Экспорт;
Перем мЛистПримечанияСД Экспорт;
Перем мЛистПримечанияДСОД Экспорт;

Перем мСоставПоказателей Экспорт;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц;

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// хранит версию формы отчета
Перем мВерсияФормы;

// временные переменные для хранения результатов запросов
Перем ВремРезультатКонца, ВремРезультатНачала;
Перем РазмерностьПрописьюТекст1;
Перем РазмерностьПрописьюТекст2;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов;
Перем мСтруктураМногостроничныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

Перем ТЗРезультат;

Перем мПечатныеФормы Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мСвойстваРазделовДекларации Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));

	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));

	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Примечания";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "ПримечанияСД";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "ДСОтОперДеят";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция проверяет вхождение области ячеек табличного документа 
// в многострочный раздел.
//
// Параметры:
//  ТекущаяОбласть - область ячеек табличного документа;
//
// Возвращаемое значение:
//  строка, имя раздела, содержащего искомую область ячеек.
//  В случае, когда область не входит ни в какой многострочный раздел,
//  возвращает Неопределено.
//
Функция РазделТекущейОбласти(ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	КонецЕсли;

	ИмяТекущейОбласти   = ТекущаяОбласть.Имя;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, СтрДлина(ИмяТекущейОбласти)-2);

	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		Если СтруктураГруппы.Колонки.Найти(ИмяАктивногоРаздела) <> Неопределено Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции // РазделТекущейОбласти()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет страницу основной панели формы, на которой табличный документ
// содержит показатель по переданному параметром "КодПоказателя" коду.
//
// Параметры:
//  КодПоказателя - строка, код показателя.
//
// Возвращаемое значение:
//  строка, имя найденной страницы основной панели формы.
//  Если страница не найдена, возвращает Неопределено.
//
Функция ОпределитьСтраницуПанелиПоКодуПоказателя(КодПоказателя)
	Перем ИмяСтраницы;

	НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(КодПоказателя, "КодПоказателяПоСоставу, КодПоказателяПоФорме");
	Если НайденнаяСтрока <> Неопределено Тогда
		ИмяСтраницы = НайденнаяСтрока.ИмяПоляТаблДокумента;
	КонецЕсли;

	Возврат ИмяСтраницы;
	
КонецФункции // ОпределитьСтраницуПанелиПоКодуПоказателя()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	//СтруктураПоказателейВнутрСвязи = Новый Структура;
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000Б0051000");
	//СтруктураПоказателейВнутрСвязи.Вставить("П0000В0026000");

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Имеем тот случай, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Имеем тот случай, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов заполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Имеем тот случай, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов заполнения таблицы на текущей странице.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Имеем тот случай, когда в новой версии формы был добавлен 
							// реквизит, который может быть заполнен автоматически по данным ИБ.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл
	
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()
	Если Месяц(мДатаКонцаПериодаОтчета) - Месяц(мДатаНачалаПериодаОтчета) = 11 Тогда
		// Готовая отчетность
		//СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );
		СтрПериодОтчета = Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=0") + " г.";
	Иначе // Промежуточная отчетность
		СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП");
	КонецЕсли;

	// Период в заголовке отчета
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

	// В Приложениях Б и В заполняем даты, по состоянию на которые
	// выполняется расчет среднегодовой стоимости имущества
	ГодРасчета     = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	СледГодРасчета = Формат(ДобавитьМесяц(мДатаКонцаПериодаОтчета, 12), "ДФ = 'гггг'");

	ДатаРасчета    = Формат(НачалоКвартала(ДобавитьМесяц(мДатаКонцаПериодаОтчета, 1)), "ДФ = ""дд ММММ гггг 'г.' """);

	ДатаНачало1Квартала         = НачалоГода(     Дата(ГодРасчета     + "0101000000"));
	ДатаНачало2Квартала         = НачалоКвартала( Дата(ГодРасчета     + "0401000000"));
	ДатаНачало3Квартала         = НачалоКвартала( Дата(ГодРасчета     + "0701000000"));
	ДатаНачало4Квартала         = НачалоКвартала( Дата(ГодРасчета     + "1001000000"));
	ДатаНачало1КварталаСледГода = НачалоГода(     Дата(СледГодРасчета + "0101000000"));


КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// ячейки табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках()

	ДатаНОтч = мДатаНачалаПериодаОтчета;
	ДатаКОтч = мДатаКонцаПериодаОтчета;

	// В балансе всегда текущий сравниваем с годовым.
	// В остальных формах МСФР дата в дату, например 9 мес. 2003, с 9 мес. 2004
	// В балансе, если за полугодие, то сравниваем с годом прошлого периода.

	ДатаНПред = ДобавитьМесяц(ДатаНОтч, -12);
	ДатаКПред = ДобавитьМесяц(ДатаКОтч, -12);

	мЛистПримечания.Области.ПредГод.Значение = Формат(Год(ДатаКПред), "ЧГ=0");
	мЛистПримечания.Области.ОтчГод.Значение = Формат(Год(ДатаНОтч), "ЧГ=0");

	мЛистПримечанияДСОД.Области.ПредГод.Значение = Формат(Год(ДатаКПред), "ЧГ=0");
	мЛистПримечанияДСОД.Области.ОтчГод.Значение = Формат(Год(ДатаНОтч), "ЧГ=0");
	
	Для Ном = 1 по 5 Цикл
		мЛистПримечания.Области["ПредГод" + Ном].Значение = Формат(Год(ДатаНПред), "ЧГ=0");
		мЛистПримечания.Области["ОтчГод" + Ном].Значение = Формат(Год(ДатаНОтч), "ЧГ=0");
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДатуВЯчейках()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации()
	
	ОргНазв = Организация.НаименованиеПолное;
	Если ЗначениеЗаполнено(Организация) Тогда
		мЛистПримечания.Области.ОргНазв.Значение = ОргНазв;
		мЛистПримечанияСД.Области.ОргНазв.Значение = ОргНазв;
		мЛистПримечанияДСОД.Области.ОргНазв.Значение = ОргНазв;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить("Точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить("При выводе сумм в тысячах - точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить("При выводе сумм в миллионах - точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

    ВалютаУпр = глЗначениеПеременной("ВалютаМеждународногоУчета").Наименование;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст1 = "в " + ВалютаУпр;
		РазмерностьПрописьюТекст2 = "(" + ВалютаУпр +")";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0; ЧО = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст1 = "в тыс. " + ВалютаУпр;
		РазмерностьПрописьюТекст2 = "(тыс. " + ВалютаУпр +")";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3; ЧО = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст1 = "в млн. " + ВалютаУпр;
		РазмерностьПрописьюТекст2 = "(млн. " + ВалютаУпр +")";
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6; ЧО = 0";

	КонецЕсли;

	//мЛистПримечания.Области.МасштабСуммИВалюта.Значение = "(все суммы " + РазмерностьПрописьюТекст1 + ")";

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			Иначе
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 3);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	
	Перем ИмяГруппы;
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ИмяЯчейки                = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть.Имя;

	Если ИмяТекущейСтраницыПанели = "ПримечанияСД" Тогда
		ИмяГруппы = мИдГруппы30;
	Иначе
		Если Лев(ИмяЯчейки, 1) = "Г" Тогда
			Возврат Лев(ИмяЯчейки, 3);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//Если ИмяТекущейСтраницыПанели = "Примечания" Тогда
	//	ИмяГруппы = мИдГруппы1;
	//КонецЕсли;
	//Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппы = Неопределено)
	Перем СтруктураГруппы;

    Если ИмяГруппы = Неопределено Тогда
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрок;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + (КолСтрок + 1);

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение Тогда
			ОбластьЯчейки.Очистить();
		Иначе
			// порядековый номер последней строки перед вставкой
			ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
			НовыйПорядковыйНомер = ИсходныйНомер + 1;

			ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);

		КонецЕсли;
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + (КолСтрок + 1);

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку(ИмяЯчейки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
    Если ИмяЯчейки = Неопределено Тогда
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = Лев(ИмяЯчейки, 3);
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
    Если ИмяЯчейки = Неопределено Тогда
		ИмяЯчейки      = ТекущаяОбласть.Имя;
		ИмяГруппы      = РазделТекущейОбласти(ТекущаяОбласть);
	Иначе
		ИмяГруппы = Лев(ИмяЯчейки, 3);
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

    Если ИмяЯчейки = Неопределено Тогда
		Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
			  + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					ИмяСдвинутойЯчейки = Колонка.Имя + "_" + НСтр;
					НовоеИмяСдвинутойЯчейки = Колонка.Имя + "_" + (НСтр - 1);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если НЕ(ОбластьСдвинутойЯчейки.СодержитЗначение) Тогда
						// обновляем порядковый номер строки

						СтарыйНомер = Число(ТекСтрока[Колонка.Имя]);
						НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
						ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

						// обновляем значение элемента таблицы значений
						ТекСтрока[Колонка.Имя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда

					ПервыйНомерВГруппе = 1;
					
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);

					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + НомТекущейСтроки;

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()	

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для обоих многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];

			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Комментарий;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;

			Если ВариантЗаполнения = 4 Тогда
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
			Иначе
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиСтраниц с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Ложь;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Разбивает табличный документ на листы формата А4 для отображения в форме
// предварительного просмотра или вывода на печать.
//
// Параметры:
//	ПечФорма - ТабличныйДокумент, который требуется разбить.
//
Процедура РазбитьПечатнуюФорму(ПечФорма)
	
	ИмяФормы = "Примечания к отчетам по МСФО";
	ПустойТаблДок = ПечФорма.ПолучитьОбласть();
	ПустойТаблДок.Очистить();
	ПослВерх = 1;
	
	Для Сч = 1 По ПечФорма.ВысотаТаблицы Цикл
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПустойТаблДок, ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовТаблДок = Новый ТабличныйДокумент();
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = Истина;
			НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		НовТаблДок = Новый ТабличныйДокумент();
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = Истина;
		НовТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати

	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста, Истина);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);

	ПечатнаяФорма = Новый ТабличныйДокумент();

	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];

	Если ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть();
	Иначе
		ОбластьПечати = ТабличноеПоле.ПолучитьОбласть(ИмяОбластиТаблПоля);
	КонецЕсли;

	//+MAV. В печатную форму попадают только не пустые строки
	//ПечатнаяФорма.Вывести(ОбластьПечати); // было раньше!!!
	   
	ВысотаТаблицы = ТабличноеПоле.ВысотаТаблицы;
	ШиринаТаблицы = ТабличноеПоле.ШиринаТаблицы;
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
        БылоПолеВвода = Ложь;
        ЗначаниеЗаполнено = Ложь;
		ИтоговаяСтрока = Ложь;

		Для НомерКолонки = 1 По Мин(ШиринаТаблицы, 8) Цикл // 8 - для табличного документа ДвижениеКапитала, т.к. последняя колонка всегда Итоговая
            ИмяОбласти = "R" + НомерСтроки + "C" + НомерКолонки;
			Область = ТабличноеПоле.Область(ИмяОбласти);
			Если Область.СодержитЗначение Тогда
				БылоПолеВвода = Истина;

				Если ЗначениеЗаполнено(Область.Значение) Тогда
					ЗначаниеЗаполнено = Истина;
				КонецЕсли;

				Если (Лев(Область.Имя,4) = "Итог") или (Лев(Область.Имя,5) = "Всего") Тогда
					ИтоговаяСтрока = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если (не БылоПолеВвода) или ЗначаниеЗаполнено или ИтоговаяСтрока Тогда
            Область = ТабличноеПоле.ПолучитьОбласть("R" + НомерСтроки + "C1:R" + НомерСтроки + "C" + ШиринаТаблицы);
			ПечатнаяФорма.Вывести(Область);
		КонецЕсли;
	КонецЦикла;
	//-MAV

	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;

	РазбитьПечатнуюФорму(ПечатнаяФорма);
	
	//Если ВидПечати = "ПоказатьБланк" Тогда
	//	ПечатнаяФорма.Показать(СокрП(ЭтаФорма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	//ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
	//	ПечатнаяФорма.Напечатать();
	//КонецЕсли;

КонецПроцедуры // ВывестиНаПечатьЛист()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(Ложь);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач ЗначениеПоказателя)

	ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяПоказателя);

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели);
	Если ТаблицаВариантыЗаполнения <> Неопределено Тогда // MAV (было =)

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле )

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	Ответ = Вопрос("Внимание! Будут очищены все разделы (листы) документа." + Символы.ПС
	      + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	КонецЕсли;

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле = ЭлементыФормы[ИмяТекТабличногоПоля];

		ОчиститьТабличноеПоле(ТекТабличноеПоле);

	КонецЦикла;


	// Далее выясним, есть ли добавленные в многострочный раздел дополнительные строки.
	// При наличии таких строк удаляем их.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их

			НСтр = СтруктураГруппы.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				ИмяПервойКолонки = СтруктураГруппы.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				// Определим область удаляемой строки
				УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// непосредственно удаляем область строки табличного документа
				ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

				// удаляем из структуры многострочного раздела соответствующую строку
				СтруктураГруппы.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	
	// очищаем ячейки, в которых отображается дата подписи
	// должностных лиц организации
	ЗаполнитьДатуВЯчейках();

	// выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет(Истина);

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // Очистить()

// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	мПечатныеФормы.Очистить();
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	//Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
	//	Возврат;
	//КонецЕсли;

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						ВывестиНаПечатьЛист(СтруктураПараметров);
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать", 	       ЧтоИскать);

				ВывестиНаПечатьЛист(СтруктураПараметров);
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",		   ЧтоИскать);

		ВывестиНаПечатьЛист(СтруктураПараметров);
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Управляет видимостью страниц основной панели формы.
//
Процедура ПоказатьСтраницыОтчета()

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;

		Если ПоказатьСтраницу = 0 Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
			ИмеютсяСкрытые = Истина;
		Иначе
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Истина;

		КонецЕсли; 

	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	КнопкиНастройки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = "Настройка";

	КнопкиНастройки.Текст = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)";
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницыОтчета()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаСдачи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.ОтчетностьПоМСФО;
	мСохраненныйДок.Комментарий                = КомментарийОбщий;

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	// вствляем суммы дивидендов
	СписокСохранения.Вставить("СуммаДивидендовКон", мСуммаДивидендовКон);
	СписокСохранения.Вставить("СуммаДивидендовПред", мСуммаДивидендовПред);

	СписокСохранения.Вставить("Консолидация", мКонсолидация);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	Модифицированность = Ложь;

	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные() Экспорт
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем УчетнаяПолитика;
	Перем Автозаполнение;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаСдачи                = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	КомментарийОбщий         = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	// восстановим суммы дивидендов
	СписокСохранения.Свойство("СуммаДивидендовКон", мСуммаДивидендовКон);
	СписокСохранения.Свойство("СуммаДивидендовПред", мСуммаДивидендовПред);

	СписокСохранения.Свойство("Консолидация", мКонсолидация);
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Если (ВерсияФормы = "30/09/2003" Или ВерсияФормы = "30/09/2005")
	   И Год(мДатаНачалаПериодаОтчета) <> Год(мДатаКонцаПериодаОтчета) Тогда
		мДатаНачалаПериодаОтчета = НачалоГода(мДатаКонцаПериодаОтчета);
	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение = Автозаполнение;

	УстановитьФорматВывода();
	Расчет(Истина);

	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	ПоказатьСтраницыОтчета();

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет суммирование ячеек
//
Функция Сложить(Лист, Переменная, НачШаг, КонШаг, Итог = Неопределено, Шаг = 1, Фрм = "ЧЦ=2; ЧВН=")
    Итого = 0;
	Пока НачШаг <= КонШаг Цикл
		Имя = Переменная + Формат(НачШаг, Фрм);
		Показатель = Лист.Области.Найти(Имя);

		Если Показатель <> Неопределено Тогда
			Итого = Итого + Показатель.Значение;
		КонецЕсли;

		НачШаг = НачШаг + Шаг;
	КонецЦикла;

	Рез = ОкруглитьЧислоПоФормату(Итого);

	Если Не Итог = Неопределено Тогда
		Лист.Области.Найти(Итог).Значение = Рез;
	КонецЕсли;

	Возврат Рез;
КонецФункции // Сложить()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет(РассчитатьВсе)

	Если ФлажокОтклАвтоРасчет Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;

	Если (ИмяТекущейСтраницыПанели = "Примечания") или РассчитатьВсе Тогда
		Фрм = "ЧЦ=1; ЧВН=";

		КолСтрок = мСтруктураМногострочныхРазделов.Г02.Количество();
		Сложить(мЛистПримечания, "Г02СумКон101_", 1, КолСтрок, "ИтогКон101", ,Фрм);
		Сложить(мЛистПримечания, "Г02СумПред101_", 1, КолСтрок, "ИтогПред101",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г03.Количество();
		Сложить(мЛистПримечания, "Г03СумКон102_", 1, КолСтрок, "ИтогКон102", ,Фрм);
		Сложить(мЛистПримечания, "Г03СумПред102_", 1, КолСтрок, "ИтогПред102",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г04.Количество();
		Сложить(мЛистПримечания, "Г04СумКон103_", 1, КолСтрок, "ИтогКон103", ,Фрм);
		Сложить(мЛистПримечания, "Г04СумПред103_", 1, КолСтрок, "ИтогПред103",, Фрм);
		
		КолСтрок = мСтруктураМногострочныхРазделов.Г05.Количество();
		Сложить(мЛистПримечания, "Г05СумКон110_", 1, КолСтрок, "ИтогКон112", ,Фрм);
		Сложить(мЛистПримечания, "Г05СумПред110_", 1, КолСтрок, "ИтогПред112",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г06.Количество();
		Сложить(мЛистПримечания, "Г06СумКон110_", 1, КолСтрок, "ИтогКон113", ,Фрм);
		Сложить(мЛистПримечания, "Г06СумПред110_", 1, КолСтрок, "ИтогПред113",, Фрм);
		
		КолСтрок = мСтруктураМногострочныхРазделов.Г07.Количество();
		Сложить(мЛистПримечания, "Г07СумКон111_", 1, КолСтрок, "ИтогКон114", ,Фрм);
		Сложить(мЛистПримечания, "Г07СумПред111_", 1, КолСтрок, "ИтогПред114",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г08.Количество();
		Сложить(мЛистПримечания, "Г08СумКон111_", 1, КолСтрок, "ИтогКон115", ,Фрм);
		Сложить(мЛистПримечания, "Г08СумПред111_", 1, КолСтрок, "ИтогПред115",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г09.Количество();
		Сложить(мЛистПримечания, "Г09СумКон112_", 1, КолСтрок, "ИтогКон117", ,Фрм);
		Сложить(мЛистПримечания, "Г09СумПред112_", 1, КолСтрок, "ИтогПред117",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г10.Количество();
		Сложить(мЛистПримечания, "Г10СумКон112_", 1, КолСтрок, "ИтогКон118", ,Фрм);
		Сложить(мЛистПримечания, "Г10СумПред112_", 1, КолСтрок, "ИтогПред118",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г11.Количество();
		Сложить(мЛистПримечания, "Г11СумКон113_", 1, КолСтрок, "ИтогКон120", ,Фрм);
		Сложить(мЛистПримечания, "Г11СумПред113_", 1, КолСтрок, "ИтогПред120",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г12.Количество();
		Сложить(мЛистПримечания, "Г12СумКон113_", 1, КолСтрок, "ИтогКон121", ,Фрм);
		Сложить(мЛистПримечания, "Г12СумПред113_", 1, КолСтрок, "ИтогПред121",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г13.Количество();
		Сложить(мЛистПримечания, "Г13СумКон114_", 1, КолСтрок, "ИтогКон122", ,Фрм);
		Сложить(мЛистПримечания, "Г13СумПред114_", 1, КолСтрок, "ИтогПред122",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г14.Количество();
		Сложить(мЛистПримечания, "Г14СумКон115_", 1, КолСтрок, "ИтогКон124", ,Фрм);
		Сложить(мЛистПримечания, "Г14СумПред115_", 1, КолСтрок, "ИтогПред124",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г15.Количество();
		Сложить(мЛистПримечания, "Г15СумКон116_", 1, КолСтрок, "ИтогКон125", ,Фрм);
		Сложить(мЛистПримечания, "Г15СумПред116_", 1, КолСтрок, "ИтогПред125",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г16.Количество();
		Сложить(мЛистПримечания, "Г16СумКон117_", 1, КолСтрок, "ИтогКон127", ,Фрм);
		Сложить(мЛистПримечания, "Г16СумПред117_", 1, КолСтрок, "ИтогПред127",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г17.Количество();
		Сложить(мЛистПримечания, "Г17СумКон118_", 1, КолСтрок, "ИтогКон128", ,Фрм);
		Сложить(мЛистПримечания, "Г17СумПред118_", 1, КолСтрок, "ИтогПред128",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г18.Количество();
		Сложить(мЛистПримечания, "Г18СумКон119_", 1, КолСтрок, "ИтогКон129", ,Фрм);
		Сложить(мЛистПримечания, "Г18СумПред119_", 1, КолСтрок, "ИтогПред129",, Фрм);

		КолСтрок = мСтруктураМногострочныхРазделов.Г19.Количество();
		Сложить(мЛистПримечания, "Г19СумКон120_", 1, КолСтрок, "ИтогКон130", ,Фрм);
		Сложить(мЛистПримечания, "Г19СумПред120_", 1, КолСтрок, "ИтогПред130",, Фрм);
		
		// доп. итоги.
        мЛистПримечания.Области.ИтогКон123.Значение = мЛистПримечания.Области.ИтогКон124.Значение + мЛистПримечания.Области.ИтогКон125.Значение;
		мЛистПримечания.Области.ИтогПред123.Значение = мЛистПримечания.Области.ИтогПред124.Значение + мЛистПримечания.Области.ИтогПред125.Значение;
		
        мЛистПримечания.Области.ИтогКон126.Значение = мЛистПримечания.Области.ИтогКон127.Значение + мЛистПримечания.Области.ИтогКон128.Значение;
		мЛистПримечания.Области.ИтогПред126.Значение = мЛистПримечания.Области.ИтогПред127.Значение + мЛистПримечания.Области.ИтогПред128.Значение;

        мЛистПримечания.Области.ИтогКон110.Значение = мЛистПримечания.Области.ИтогКон112.Значение + мЛистПримечания.Области.ИтогКон113.Значение;
		мЛистПримечания.Области.ИтогПред110.Значение = мЛистПримечания.Области.ИтогПред112.Значение + мЛистПримечания.Области.ИтогПред113.Значение;

        мЛистПримечания.Области.ИтогКон111.Значение = мЛистПримечания.Области.ИтогКон114.Значение + мЛистПримечания.Области.ИтогКон115.Значение;
		мЛистПримечания.Области.ИтогПред111.Значение = мЛистПримечания.Области.ИтогПред114.Значение + мЛистПримечания.Области.ИтогПред115.Значение;

        мЛистПримечания.Области.ИтогКон116.Значение = мЛистПримечания.Области.ИтогКон117.Значение + мЛистПримечания.Области.ИтогКон118.Значение;
		мЛистПримечания.Области.ИтогПред116.Значение = мЛистПримечания.Области.ИтогПред117.Значение + мЛистПримечания.Области.ИтогПред118.Значение;

        мЛистПримечания.Области.ИтогКон119.Значение = мЛистПримечания.Области.ИтогКон120.Значение + мЛистПримечания.Области.ИтогКон121.Значение;
		мЛистПримечания.Области.ИтогПред119.Значение = мЛистПримечания.Области.ИтогПред120.Значение + мЛистПримечания.Области.ИтогПред121.Значение;

		// ДДС
		Сложить(мЛистПримечания, "СумКон7", 1, 11, "ИтогКон11");
		Сложить(мЛистПримечания, "СумПред7", 1, 11, "ИтогПред11");

		Сложить(мЛистПримечания, "СумКон7", 13, 38, "ИтогКон12");
		Сложить(мЛистПримечания, "СумПред7", 13, 38, "ИтогПред12");

		Сложить(мЛистПримечания, "СумКон7", 39, 54, "ИтогКон13");
		Сложить(мЛистПримечания, "СумПред7", 39, 54, "ИтогПред13");
		
	КонецЕсли;
	
	Если (ИмяТекущейСтраницыПанели = "ДСОтОперДеят") или РассчитатьВсе Тогда
		Сложить(мЛистПримечанияДСОД, "СумКон8", 1, 16, "ИтогКон40");
		Сложить(мЛистПримечанияДСОД, "СумПред8", 1, 16, "ИтогПред40");
	КонецЕсли;
КонецПроцедуры // Расчет()

Процедура ЗаполнитьПримечанияСКонтрагентами(ИмяПоказателя, ДатаПериодаОтчета0, ДатаПериодаОтчета, Контрагент, Ном)
	Счета = ПланыСчетов.Международный;

	// Операции с дочерними компаниями
	БухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счета.Выручка); // 600
	МассивСчетов.Добавить(Счета.ЗадолженностьСвязанныхСторонКУплате); // 5092
	МассивСчетов.Добавить(Счета.РасчетыСоСвязаннымиСторонамиДолгосрочные); // 4083
	МассивСчетов.Добавить(Счета.ДивидендыКВыплате); // 5102

	Массив1 = Новый Массив();
	Массив1.Добавить(Счета.ЗадолженностьДочернихОрганизацийТекущая);
	Массив1.Добавить(Счета.ЗадолженностьПокупателейТекущая);
	
	// КО Выручка-НДС по ставкам в корр. ЗадолженностьДочернихОрганизацийТекущая по аналит. Контр.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(МеждународныйОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	               |	МеждународныйОбороты.Субконто1 КАК СтавкаНДС
	               |ИЗ
	               |	РегистрБухгалтерии.Международный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет = &СчетВыручка, &Субконто, Организация = &Организация И КорСубконто1 = &Контрагент, КорСчет В ИЕРАРХИИ(&СчетЗадолженностьДочернихОрганизацийТекущая), &КорСубконто) КАК МеждународныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МеждународныйОбороты.Субконто1";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаПериодаОтчета0);
	Запрос.УстановитьПараметр("КонецПериода", ДатаПериодаОтчета);
	Запрос.УстановитьПараметр("СчетВыручка", Счета.Выручка);
	Запрос.УстановитьПараметр("Субконто", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.СтавкиНДС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетЗадолженностьДочернихОрганизацийТекущая", Массив1);
	Запрос.УстановитьПараметр("КорСубконто", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Показатель101 = 0;
	Пока Выборка.Следующий() Цикл
		СуммаНДС = 0;
		Если Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 10/110;
		ИначеЕсли Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 10/110;
		ИначеЕсли Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 18/118;
		ИначеЕсли Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 18/118;
		ИначеЕсли Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 20/120;
		ИначеЕсли Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			СуммаНДС = Выборка.СуммаОборотКт * 20/120;
		КонецЕсли;
		Показатель101 = Показатель101 + Выборка.СуммаОборотКт - СуммаНДС;
	КонецЦикла;

	мЛистПримечания.Области["Г02" + ИмяПоказателя + "101_"+Ном].Значение = Показатель101;

	Итоги = "ОборотКт";
	БухИтогиРС.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет, Субконто1", ДатаПериодаОтчета0, ДатаПериодаОтчета, , МассивСчетов, ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, , , "Организация", Организация);
	мЛистПримечания.Области["Г04" + ИмяПоказателя + "103_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счета.ЗадолженностьСвязанныхСторонКУплате, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счета.РасчетыСоСвязаннымиСторонамиДолгосрочные, Контрагент);
	мЛистПримечания.Области["Г13" + ИмяПоказателя + "114_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет, Субконто1", Счета.ДивидендыКВыплате, Контрагент);

	// Бухгалтерский итоги по счетам
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

	// Бухгалтерские итоги по аналитике
	БухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();

	Итоги = "НачальныйОстатокДт,
			|НачальныйОстатокКт,
			|КонечныйОстатокДт,
			|КонечныйОстатокКт";

	// Бухгалтерские итоги по счетам, без аналитики
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаПериодаОтчета0, ДатаПериодаОтчета, , , , , , "Организация", Организация);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "104", БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счета.ПрочиеОперационныеДоходыСоСвязаннымиСторонами));

	// Бухгалтерские итоги по счетам, без аналитики
	Итоги = "ОборотДт, ОборотКт";
	БухИтогиРС.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет, Субконто1", ДатаПериодаОтчета0, ДатаПериодаОтчета, , , , , , "Организация", Организация);
	
	УстановитьЗначениеПоказателя(ИмяПоказателя + "105", -БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ПрочиеОперационныеРасходыСоСвязаннымиСторонами));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "108", БухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ПрочиеВнереализационныеДоходыСоСвязаннымиСторонами));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "109", БухИтогиРС.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ПрочиеВнереализационныеРасходыСоСвязаннымиСторонами));
	
	// Задолженность по расчетам с дочерними компаниями
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счета.ЗадолженностьСвязанныхСторонДолгосрочная); // 10921
	МассивСчетов.Добавить(Счета.ЗадолженностьСвязанныхСторонТекущая); // 20721
	МассивСчетов.Добавить(Счета.РасчетыСоСвязаннымиСторонамиДолгосрочные); // 4083
	МассивСчетов.Добавить(Счета.ЗадолженностьСвязанныхСторонКУплате); // 5092

	МассивСчетов.Добавить(Счета.АвансыВыданныеДолгосрочные); // 1095
	МассивСчетов.Добавить(Счета.АвансыВыданныеТекущие); // 2075
	МассивСчетов.Добавить(Счета.ПрочиеОтложенныеДоходыДолгосрочные); // 4032
	МассивСчетов.Добавить(Счета.ПрочиеОтложенныеДоходыТекущие); // 5032

	МассивСчетов.Добавить(Счета.КредитыБанковТекущие); // 5011
	МассивСчетов.Добавить(Счета.ЗаймыОбеспеченныеТекущие); // 5012
	МассивСчетов.Добавить(Счета.КонвертируемыеЗаймыТекущие); // 5013
	МассивСчетов.Добавить(Счета.ЗаймыВыданныеКраткосрочные); // 2043
	МассивСчетов.Добавить(Счета.КредитыЗаймыПроцентныеДолгосрочные); // 401
	МассивСчетов.Добавить(Счета.ДолгосрочныеЗаймыБеспроцентные); // 402
	МассивСчетов.Добавить(Счета.ЗаймыВыданныеДолгосрочные); // 1073
	
	МассивСчетов.Добавить(Счета.ЗадолженностьПокупателейДолгосрочная);
	МассивСчетов.Добавить(Счета.ПлатежиПоФинАрендеКПолучениюДолгосрочные);
	МассивСчетов.Добавить(Счета.ПрочаяДебиторскаяЗадолженностьДолгосрочная);
	МассивСчетов.Добавить(Счета.ПрочиеСчетаКОплатеДолгосрочные);
	МассивСчетов.Добавить(Счета.ЗадолженностьПокупателейТекущая);
	МассивСчетов.Добавить(Счета.ПлатежиПоФинАрендеКПолучениюТекущие);
	МассивСчетов.Добавить(Счета.ПрочаяДебиторскаяЗадолженностьТекущая);
	МассивСчетов.Добавить(Счета.ПрочиеСчетаКОплатеТекущие);
	МассивСчетов.Добавить(Счета.СчетаКОплатеДолгосрочные);
	МассивСчетов.Добавить(Счета.ПрочиеСчетаКОплатеДолгосрочные);
	МассивСчетов.Добавить(Счета.ОбязательстваПоФинансовойАрендеДолгосрочные);
	МассивСчетов.Добавить(Счета.РасчетыСПоставщикамиИПодрядчикамиТекущие);
	МассивСчетов.Добавить(Счета.ПрочиеСчетаКОплатеТекущие);
	МассивСчетов.Добавить(Счета.ЗадолженностьЗаВыкупленныеСобственныеАкции);
	
	Итоги = "КонечныйОстатокДт,
			|КонечныйОстатокКт";

	// Бухгалтерские итоги по аналитике
	БухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
	БухИтогиРС.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет, Субконто1", ДатаПериодаОтчета0, ДатаПериодаОтчета, , МассивСчетов, ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, , , "Организация", Организация);

	РезультатЗапроса = БухИтогиРС.ПолучитьОстаткиИОбороты();

	мЛистПримечания.Области["Г05" + ИмяПоказателя + "110_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ЗадолженностьСвязанныхСторонДолгосрочная, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ЗадолженностьПокупателейДолгосрочная, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ПлатежиПоФинАрендеКПолучениюДолгосрочные, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ПрочаяДебиторскаяЗадолженностьДолгосрочная, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ПрочиеСчетаКОплатеДолгосрочные, Контрагент);
	мЛистПримечания.Области["Г06" + ИмяПоказателя + "110_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ЗадолженностьСвязанныхСторонТекущая, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ЗадолженностьПокупателейТекущая, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ПлатежиПоФинАрендеКПолучениюТекущие, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ПрочаяДебиторскаяЗадолженностьТекущая, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ПрочиеСчетаКОплатеТекущие, Контрагент);
	мЛистПримечания.Области["Г07" + ИмяПоказателя + "111_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.РасчетыСоСвязаннымиСторонамиДолгосрочные, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.СчетаКОплатеДолгосрочные, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.ПрочиеСчетаКОплатеДолгосрочные, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.ОбязательстваПоФинансовойАрендеДолгосрочные, Контрагент);
	мЛистПримечания.Области["Г08" + ИмяПоказателя + "111_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.ЗадолженностьСвязанныхСторонКУплате, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.РасчетыСПоставщикамиИПодрядчикамиТекущие, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.ПрочиеСчетаКОплатеТекущие, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.ЗадолженностьЗаВыкупленныеСобственныеАкции, Контрагент);
	
	мЛистПримечания.Области["Г09" + ИмяПоказателя + "112_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.АвансыВыданныеДолгосрочные, Контрагент);
	мЛистПримечания.Области["Г10" + ИмяПоказателя + "112_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.АвансыВыданныеТекущие, Контрагент);
	мЛистПримечания.Области["Г11" + ИмяПоказателя + "113_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.ПрочиеОтложенныеДоходыДолгосрочные, Контрагент);
	мЛистПримечания.Области["Г12" + ИмяПоказателя + "113_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.ПрочиеОтложенныеДоходыТекущие, Контрагент);

	мЛистПримечания.Области["Г14" + ИмяПоказателя + "115_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.КредитыБанковТекущие, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.ЗаймыОбеспеченныеТекущие, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.КонвертируемыеЗаймыТекущие, Контрагент);
	мЛистПримечания.Области["Г15" + ИмяПоказателя + "116_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ЗаймыВыданныеКраткосрочные, Контрагент);
	мЛистПримечания.Области["Г16" + ИмяПоказателя + "117_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.КредитыЗаймыПроцентныеДолгосрочные, Контрагент) + БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет, Субконто1", Счета.ДолгосрочныеЗаймыБеспроцентные, Контрагент);
	мЛистПримечания.Области["Г17" + ИмяПоказателя + "118_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет, Субконто1", Счета.ЗаймыВыданныеДолгосрочные, Контрагент);

	// Бухгалтерские итоги по счетам, без аналитики
	Итоги = "КорОборотДт";
	БухИтогиРС.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет, КорСчет, Субконто1", ДатаПериодаОтчета0, ДатаПериодаОтчета, , , ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, , , "Организация", Организация);
	мЛистПримечания.Области["Г18" + ИмяПоказателя + "119_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет, Субконто1", Счета.РасчетыЗаРазмещенныеАкции, Счета.ОбыкновенныеАкции, Контрагент);
	мЛистПримечания.Области["Г19" + ИмяПоказателя + "120_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет, Субконто1", Счета.РасчетыЗаРазмещенныеАкции, Счета.ПривилегированныеАкции, Контрагент);

	Итоги = "ОборотДт, ОборотКт";
	БухИтогиРС.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет, Субконто1", ДатаПериодаОтчета0, ДатаПериодаОтчета, , , ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты, , , "Организация", Организация);
	мЛистПримечания.Области["Г20" + ИмяПоказателя + "121_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счета.ЗадолженностьЗаВыкупленныеСобственныеАкции, Контрагент);
	мЛистПримечания.Области["Г21" + ИмяПоказателя + "122_"+Ном].Значение = БухИтогиРС.ПолучитьИтог("СуммаОборотДт", "Счет, Субконто1", Счета.РасчетыЗаРазмещенныеАкции, Контрагент);
КонецПроцедуры // ЗаполнитьПримечанияСКонтрагентами()

Функция ПолучитьОборот(ДтКт, ДДС)
    Рез = ТЗРезультат.Найти(ДДС, "ДДС");
	Если Рез = Неопределено Тогда
        Возврат 0;
	Иначе
		Возврат Рез["СуммаОборот" + ДтКт];
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьДСОД(ИмяПоказателя, ДатаПериодаОтчета0, ДатаПериодаОтчета)
	Счета = ПланыСчетов.Международный;
	БухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	
	// 1. Прибыли до налогооблажения и чрезвычайных статей
	Итоги = "КонечныйОстатокКт";
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаПериодаОтчета0, ДатаПериодаОтчета, , Счета.ПрибыльУбытокДоНалогообложения, , , , "Организация", Организация);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "801", БухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счета.ПрибыльУбытокДоНалогообложения));
	
	// 2. Амортизацию основных средств
	// Получаем счета амортизации ОС
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ОсновныеСредстваМеждународныйУчетСрезПоследних.СчетНачисленияАмортизации КАК Счет
	               |ИЗ
	               |	РегистрСведений.ОсновныеСредстваМеждународныйУчет.СрезПоследних(&Дата, ) КАК ОсновныеСредстваМеждународныйУчетСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ДатаПериодаОтчета);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСчетовАмортизацииОС = Новый Массив();
	Пока Выборка.Следующий() Цикл
		МассивСчетовАмортизацииОС.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Итоги = "ОборотКт";
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаПериодаОтчета0, ДатаПериодаОтчета, , МассивСчетовАмортизацииОС, , , , "Организация", Организация);
	Сумм = 0;
	Для каждого Сч из МассивСчетовАмортизацииОС Цикл
		Сумм = Сумм + БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Сч);
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(ИмяПоказателя + "802", Сумм);
	
	// 3. Амортизацию нематериальных активов
	// Получаем счета амортизации НМА
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	НематериальныеАктивыМеждународныйУчетСрезПоследних.СчетНачисленияАмортизации КАК Счет
	               |ИЗ
	               |	РегистрСведений.НематериальныеАктивыМеждународныйУчет.СрезПоследних(&Дата, ) КАК НематериальныеАктивыМеждународныйУчетСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ДатаПериодаОтчета);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСчетовАмортизацииНМА = Новый Массив();
	Пока Выборка.Следующий() Цикл
		МассивСчетовАмортизацииНМА.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Итоги = "ОборотКт";
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаПериодаОтчета0, ДатаПериодаОтчета, , МассивСчетовАмортизацииНМА, , , , "Организация", Организация);
	Сумм = 0;
	Для каждого Сч из МассивСчетовАмортизацииНМА Цикл
		Сумм = Сумм + БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Сч);
	КонецЦикла;
	УстановитьЗначениеПоказателя(ИмяПоказателя + "803", Сумм);
	
	// 4. Снижение стоимости
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МеждународныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК ВидДР,
	               |	СУММА(МеждународныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	СУММА(МеждународныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Международный.Обороты(&ДатаНачала, &ДатаКонца, Период, Счет В ИЕРАРХИИ (&Счет800), &Субконто, Организация = &Организация, , ) КАК МеждународныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МеждународныйОбороты.Субконто1.ВидПрочихДоходовИРасходов";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаПериодаОтчета0);
	Запрос.УстановитьПараметр("ДатаКонца", ДатаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет800", Счета.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Субконто", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ВидыДоходовИРасходов);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	ТЗ800 = Результат.Выгрузить();
	
	Сумм = 0;
	СтрокаТЗ = ТЗ800.Найти(Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов, "ВидДР");
	Если СтрокаТЗ <> Неопределено Тогда
		Сумм = Сумм + СтрокаТЗ.СуммаОборотДт;
	КонецЕсли;
	СтрокаТЗ = ТЗ800.Найти(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы, "ВидДР");
	Если СтрокаТЗ <> Неопределено Тогда
		Сумм = Сумм + СтрокаТЗ.СуммаОборотДт;
	КонецЕсли;
	
	УстановитьЗначениеПоказателя(ИмяПоказателя + "804", Сумм);
	
	// 5. (Прибыль)/убыток от реализации основных средств
	СтрокаТЗ = ТЗ800.Найти(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств, "ВидДР");
	Если СтрокаТЗ <> Неопределено Тогда
		УстановитьЗначениеПоказателя(ИмяПоказателя + "805", СтрокаТЗ.СуммаОборотДт-СтрокаТЗ.СуммаОборотКт);
	КонецЕсли;
	
	
	// 6. Убыток от продажи прекращаемых операций
	// НЕ АВТОМАТИЗИРУЕМ
	
	// 7. Доход от финансовых вложений
	Сумм = 0;
	СтрокаТЗ = ТЗ800.Найти(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг, "ВидДР");
	Если СтрокаТЗ <> Неопределено Тогда
		Сумм = Сумм + СтрокаТЗ.СуммаОборотКт;
	КонецЕсли;
	СтрокаТЗ = ТЗ800.Найти(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыПоОперациямСФинансовымиИнструментамиСрочныхСделок, "ВидДР");
	Если СтрокаТЗ <> Неопределено Тогда
		Сумм = Сумм + СтрокаТЗ.СуммаОборотКт;
	КонецЕсли;
	СтрокаТЗ = ТЗ800.Найти(Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам, "ВидДР");
	Если СтрокаТЗ <> Неопределено Тогда
		Сумм = Сумм + СтрокаТЗ.СуммаОборотКт;
	КонецЕсли;
	
	УстановитьЗначениеПоказателя(ИмяПоказателя + "807", -Сумм);
	
	// 8. Амортизацию государственных субсидий
	Итоги = "КорОборотКт";
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счета.ПравительственныеСубсидииДолгосрочные);
	МассивСчетов.Добавить(Счета.ПравительственныеСубсидииТекущие);
	
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаПериодаОтчета0, ДатаПериодаОтчета, , Счета.ПрочиеДоходыИРасходы, , МассивСчетов, , "Организация", Организация);
	УстановитьЗначениеПоказателя(ИмяПоказателя + "808", -БухИтоги.ПолучитьИтог("СуммаКорОборотКт","Счет",Счета.ПрочиеДоходыИРасходы));

	// 9. Расходы по процентам
	СтрокаТЗ = ТЗ800.Найти(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, "ВидДР");
	Если СтрокаТЗ <> Неопределено Тогда
		УстановитьЗначениеПоказателя(ИмяПоказателя + "809", СтрокаТЗ.СуммаОборотДт-СтрокаТЗ.СуммаОборотКт);
	КонецЕсли;
	
	// 10. Долю в результатах до налогооблажения ассоциированных компаний
	СтрокаТЗ = ТЗ800.Найти(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСУчастиемВДругихОрганизациях, "ВидДР");
	Если СтрокаТЗ <> Неопределено Тогда
		УстановитьЗначениеПоказателя(ИмяПоказателя + "810", СтрокаТЗ.СуммаОборотДт-СтрокаТЗ.СуммаОборотКт);
	КонецЕсли;

	// 11. Дебиторская задолженность покупателей и заказчиков и прочая дебиторская задолженность
	Итоги = "ОборотКт,ОборотДт";
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счета.ДебиторскаяЗадолженностьДолгосрочная); // 109
	МассивСчетов.Добавить(Счета.ДебиторскаяЗадолженностьТекущая); // 207
	МассивСчетов.Добавить(Счета.Запасы); // 203
	МассивСчетов.Добавить(Счета.ДолгосрочнаяКредиторскаяЗадолженность); // 408
	МассивСчетов.Добавить(Счета.ПрочиеОбязательстваДолгосрочные); // 509
	МассивСчетов.Добавить(Счета.РезервыПредстоящихПлатежейДолгосрочные); // 404
	МассивСчетов.Добавить(Счета.РезервыПредстоящихПлатежейТекущие); // 504
	МассивСчетов.Добавить(Счета.ЗатратыНезавершенногоСтроительства); // 202
	МассивСчетов.Добавить(Счета.ОбязательстваПоПенсионнымПланамТекущие); // 506
	МассивСчетов.Добавить(Счета.ОбязательстваПоПенсионнымПланамДолгосрочные); // 405
	
	БухИтоги.РассчитатьИтоги("Международный", Итоги, "Сумма", "Счет", ДатаПериодаОтчета0, ДатаПериодаОтчета, , МассивСчетов, , , , "Организация", Организация);
	
	УстановитьЗначениеПоказателя(ИмяПоказателя + "811", БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ДебиторскаяЗадолженностьДолгосрочная)-БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ДебиторскаяЗадолженностьДолгосрочная)+БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ДебиторскаяЗадолженностьТекущая)-БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ДебиторскаяЗадолженностьТекущая));

	// 12. Материально-производственные запасы
	УстановитьЗначениеПоказателя(ИмяПоказателя + "812", БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.Запасы)-БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.Запасы));
	
	// 13. Кредиторская задолженность
	УстановитьЗначениеПоказателя(ИмяПоказателя + "813", БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ДолгосрочнаяКредиторскаяЗадолженность)-БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ПрочиеОбязательстваДолгосрочные)+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ДолгосрочнаяКредиторскаяЗадолженность)-БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ПрочиеОбязательстваДолгосрочные));
	
	// 14. Незавершенное строительство по договорам подряда
	УстановитьЗначениеПоказателя(ИмяПоказателя + "814", БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ЗатратыНезавершенногоСтроительства)-БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.ЗатратыНезавершенногоСтроительства));
	
	// 15. Резервы предстоящих расходов и платежей
	УстановитьЗначениеПоказателя(ИмяПоказателя + "815", БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.РезервыПредстоящихПлатежейДолгосрочные)-БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.РезервыПредстоящихПлатежейТекущие)+БухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счета.РезервыПредстоящихПлатежейДолгосрочные)-БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.РезервыПредстоящихПлатежейТекущие));
	
	// 16. Пенсии и другие выплаты по выходу на пенсию
	УстановитьЗначениеПоказателя(ИмяПоказателя + "816", БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ОбязательстваПоПенсионнымПланамТекущие) + БухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счета.ОбязательстваПоПенсионнымПланамДолгосрочные));
КонецПроцедуры

Процедура ЗаполнитьДДС(ИмяПоказателя, ДатаПериодаОтчета0, ДатаПериодаОтчета)
	//+ Запоминаем связанных контрагентов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыСвязанныеСОрганизациямиСрезПоследних.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.КонтрагентыСвязанныеСОрганизациями.СрезПоследних(&Дата, Организация = &Организация) КАК КонтрагентыСвязанныеСОрганизациямиСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ДатаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СЗ = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		СЗ.Добавить(Выборка.Контрагент);
	КонецЦикла;

	Счета = ПланыСчетов.Международный;
    ДДС = Перечисления.ВидыДвиженийДенежныхСредств;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МеждународныйОбороты.Субконто2.ВидДвиженияДенежныхСредств КАК ДДС,
	               |	МеждународныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	               |	МеждународныйОбороты.СуммаОборотКт КАК СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Международный.Обороты(&НачалоПериода, &КонецПериода, , Счет В ИЕРАРХИИ(&Счет), , Организация = &Организация, , &КорСубконто) КАК МеждународныйОбороты
	               |
	               |ГДЕ
	               |	МеждународныйОбороты.КорСубконто1 В(&СЗ)
	               |
	               |ИТОГИ СУММА(СуммаОборотДт), СУММА(СуммаОборотКт) ПО
	               |	ДДС";

	Запрос.УстановитьПараметр("НачалоПериода", ДатаПериодаОтчета0);
	Запрос.УстановитьПараметр("КонецПериода", ДатаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет", Счета.ДенежныеСредства);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СЗ", СЗ);
	Запрос.УстановитьПараметр("КорСубконто", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты);

	ТЗРезультат = Запрос.Выполнить().Выгрузить();

	// Операционная деятельность
	УстановитьЗначениеПоказателя(ИмяПоказателя + "701", ПолучитьОборот("Дт", ДДС.СредстваПолученныеОтПокупателейИЗаказчиков));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "703", -ПолучитьОборот("Кт", ДДС.ОплатаОборотныхАктивов));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "705", -ПолучитьОборот("Кт", ДДС.ОплатаНИОКР));
	//УстановитьЗначениеПоказателя(ИмяПоказателя + "706", -ПолучитьОборот("Кт", ДДС.ВыплатыПоГарантийнымОбязательствам));
	//УстановитьЗначениеПоказателя(ИмяПоказателя + "707", -ПолучитьОборот("Кт", ДДС.ВыплатыПоОпционам));
	//УстановитьЗначениеПоказателя(ИмяПоказателя + "709", -ПолучитьОборот("Кт", ДДС.ВыплатыВСвязиСРеструктуризацией));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "710", ПолучитьОборот("Дт", ДДС.РасчетыПоНалогамИСборам)-ПолучитьОборот("Кт", ДДС.РасчетыПоНалогамИСборам));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "711", ПолучитьОборот("Дт", ДДС.ПрочиеПоступленияПоТекущейДеятельности)-ПолучитьОборот("Кт", ДДС.ПрочиеРасходыПоТекущейДеятельности));

	// Инвестиционнная деятельность
	УстановитьЗначениеПоказателя(ИмяПоказателя + "719", -ПолучитьОборот("Кт", ДДС.ПриобретениеДочернихОрганизаций));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "713", -ПолучитьОборот("Кт", ДДС.ПриобретениеОбъектовОсновныхСредств));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "714", -ПолучитьОборот("Кт", ДДС.ВыплатаПроцентовВСвязиСоСтроительством));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "715", -ПолучитьОборот("Кт", ДДС.ПриобретениеДоходныхВложенийВМатериальныеЦенности));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "716", -ПолучитьОборот("Кт", ДДС.ПриобретениеНематериальныхАктивов));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "721", -ПолучитьОборот("Кт", ДДС.ПриобретениеЦенныхБумагИИныхФинансовыхВложений));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "722", -ПолучитьОборот("Кт", ДДС.ПрочиеРасходыПоИнвестиционнойДеятельности));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "723", ПолучитьОборот("Дт", ДДС.ВыручкаОтПродажиОбъектовОсновныхСредств));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "724", ПолучитьОборот("Дт", ДДС.ВыручкаОтПродажиДоходныхВложений));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "725", ПолучитьОборот("Дт", ДДС.ВыручкаОтПродажиНематериальныхАктивов));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "731", ПолучитьОборот("Дт", ДДС.РеализацияПрочихАктивовИнвестиционная));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "732", ПолучитьОборот("Дт", ДДС.ПолученныеДивиденды));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "733", ПолучитьОборот("Дт", ДДС.ПолученныеПроценты));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "734", -ПолучитьОборот("Кт", ДДС.ЗаймыПредоставленныеДругимОрганизациям));
	//УстановитьЗначениеПоказателя(ИмяПоказателя + "735", ПолучитьОборот("Дт", ДДС.ПоступлениеСубсидийНаКапитальныеВложения));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "736", ПолучитьОборот("Дт", ДДС.ЗаймыПредоставленныеДругимОрганизациям));
	//УстановитьЗначениеПоказателя(ИмяПоказателя + "737", ПолучитьОборот("Дт", ДДС.ЧрезвычайныеПоступленияИнвестиционные) - ПолучитьОборот("Кт", ДДС.ЧрезвычайныеПоступленияИнвестиционные));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "738", ПолучитьОборот("Дт", ДДС.ПрочиеПоступленияПоИнвестиционнойДеятельности) - ПолучитьОборот("Кт", ДДС.ПрочиеРасходыПоИнвестиционнойДеятельности));

	// Финансовая деятельность
	УстановитьЗначениеПоказателя(ИмяПоказателя + "739", ПолучитьОборот("Дт", ДДС.ПоступленияОтЭмиссииАкций));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "740", ПолучитьОборот("Дт", ДДС.ВыпускДолговыхИнструментов));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "741", ПолучитьОборот("Дт", ДДС.ПоступлениеПлатежейПоФинансовойАренде));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "742", ПолучитьОборот("Дт", ДДС.ВыпускКомплексныхФинансовыхИнструментов));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "743", -ПолучитьОборот("Кт", ДДС.ВыкупСобственныхДолевыхИнструментов));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "745", -ПолучитьОборот("Кт", ДДС.ПоступлениеПлатежейПоФинансовойАренде));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "746", -ПолучитьОборот("Кт", ДДС.ВыкупСобственныхАкций));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "747", -ПолучитьОборот("Кт", ДДС.ВыплатаПроцентовФинансовая));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "748", -ПолучитьОборот("Кт", ДДС.ВыплатаДивидендов));
	//УстановитьЗначениеПоказателя(ИмяПоказателя + "750", ПолучитьОборот("Дт", ДДС.АвансыПоРасчетамСоСвязаннымиСторонами));
	//УстановитьЗначениеПоказателя(ИмяПоказателя + "751", -ПолучитьОборот("Кт", ДДС.АвансыПоРасчетамСоСвязаннымиСторонами));
	//УстановитьЗначениеПоказателя(ИмяПоказателя + "752", ПолучитьОборот("Дт", ДДС.ЧрезвычайныеРасходы));
	УстановитьЗначениеПоказателя(ИмяПоказателя + "754", ПолучитьОборот("Дт", ДДС.ПрочиеПоступленияПоФинансовойДеятельности) - ПолучитьОборот("Кт", ДДС.ПрочиеРасходыПоФинансовойДеятельности));
КонецПроцедуры // ЗаполнитьДДС()

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто(МассивОрганизаций = Неопределено) Экспорт

	ДатаНОтч = мДатаНачалаПериодаОтчета;
	ДатаКОтч = мДатаКонцаПериодаОтчета;

	// В балансе всегда текущий сравниваем с годовым.
	// В остальных формах МСФР дата в дату, например 9 мес. 2003, с 9 мес. 2004
	// В балансе, если за полугодие, то сравниваем с годом прошлого периода.

	ДатаНПред = ДобавитьМесяц(ДатаНОтч, -12);
	ДатаКПред = ДобавитьМесяц(ДатаКОтч, -12);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтрагентыСвязанныеСОрганизациямиСрезПоследних.Контрагент КАК Контрагент,
	               |	МеждународныйОстатки.СуммаОстатокДт КАК Инвестиции
	               |ИЗ
	               |	РегистрСведений.КонтрагентыСвязанныеСОрганизациями.СрезПоследних(&Период, Организация = &Организация И ВидСобственнойОрганизации = &ДочерняяОрганизация) КАК КонтрагентыСвязанныеСОрганизациямиСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Международный.Остатки(&Период, Счет = &ИнвестицииВДочерниеКомпании, &Контрагенты, Организация = &Организация) КАК МеждународныйОстатки
	               |		ПО КонтрагентыСвязанныеСОрганизациямиСрезПоследних.Контрагент = МеждународныйОстатки.Субконто1";

	Запрос.УстановитьПараметр("Период", ДатаКОтч);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДочерняяОрганизация", Перечисления.ВидыСобственныхОрганизаций.ДочерняяОрганизация);
	Запрос.УстановитьПараметр("Контрагенты", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты);
	Запрос.УстановитьПараметр("ИнвестицииВДочерниеКомпании", ПланыСчетов.Международный.ИнвестицииВДочерниеКомпании);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Ном = 0;
	Пока Выборка.Следующий() Цикл
		Контрагент = Выборка.Контрагент;
        Наим = Контрагент.НаименованиеПолное;

		// Основные дочерние компании
		Ном = Ном + 1;

		Если Ном > 1 Тогда
			КнопкаДобавитьДопСтрокиПримечанияНажатие(Неопределено);
		КонецЕсли;

		мЛистПримечания.Области["Г01Наименование_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г01Величина_"+Ном].Значение = Выборка.Инвестиции;
		мЛистПримечания.Области["Г02Реализация_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г03ВаловаяПрибыль_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г04Приобретение_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г05ДебиторскаяЗадолженность_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г06ДебиторскаяЗадолженность_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г07КредиторскаяЗадолженность_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г08КредиторскаяЗадолженность_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г09Авансы_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г10Авансы_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г11ДоходыБП_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г12ДоходыБП_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г13Дивиденды_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г14КраткосрочныеЗаймы_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г15КраткосрочныеЗаймы_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г16ДолгосрочныеЗаймы_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г17ДолгосрочныеЗаймы_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г18РазмещениеОбыкновенных_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г19РазмещениеПривилег_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г20ВыкупСобственных_"+Ном].Значение = Наим;
		мЛистПримечания.Области["Г21ПродажаСобственных_"+Ном].Значение = Наим;
		
        // Далее считаем раздельно по двум годам
		ЗаполнитьПримечанияСКонтрагентами("СумКон", ДатаНОтч, ДатаКОтч, Контрагент, Ном);
		ЗаполнитьПримечанияСКонтрагентами("СумПред", ДатаНПред, ДатаКПред, Контрагент, Ном);

	КонецЦикла;

	ЗаполнитьДДС("СумКон", ДатаНОтч, ДатаКОтч);
	ЗаполнитьДДС("СумПред", ДатаНПред, ДатаКПред);
	
	ЗаполнитьДСОД("СумКон", ДатаНОтч, ДатаКОтч);
	ЗаполнитьДСОД("СумПред", ДатаНПред, ДатаКПред);
	
	Расчет(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьАвто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы30 Тогда
		ТекТабличноеПоле = мЛистПримечанияСД;
	Иначе
		ТекТабличноеПоле = мЛистПримечания;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	мЛистПримечания         = ЭлементыФормы.ПолеТабличногоДокументаПримечания;
	мЛистПримечанияСД         = ЭлементыФормы.ПолеТабличногоДокументаПримечанияСД;
	мЛистПримечанияДСОД         = ЭлементыФормы.ПолеТабличногоДокументаДСОтОперДеят;

	ФормироватьСтруктуруСвойствСтраниц();

	мВПрограммеИзмененаОрганизация = Ложь;
	ФлажокОтклАвтоРасчет = Ложь;
	Если мСохраненныйДок = Неопределено Тогда
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный;
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// Имеем сохраненные или скопированные данные отчета.
		// Восстанавливаем сохраненные данные отчета.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	Если мКонсолидация <> Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный Тогда
		//ЭлементыФормы.Организация.Видимость = Ложь;
		//ЭлементыФормы.НадписьОрганизация.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаЗаполнитьСведенияОбОрганизации.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заполнить.Доступность = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	ЗаполнитьДатуВЯчейках();
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;


	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки(,, Страница.Имя);
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;

			мСохраненныйДок.Записать();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, Источник)
	Перем ТаблицаСтраницРаздела;
	Перем ВыбрТаблицаСтраницРаздела;
	Перем ФлМодифицированностьСписка;

	Если Источник.КлючУникальности = "дляВыбораСтраницОтчета" Тогда
		мДеревоВыбранныхСтраниц = ВыбранноеЗначение;
	ИначеЕсли Источник.КлючУникальности = "дляПереходаНаСтраницу" Тогда

		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;

		ВыбранноеЗначение.Свойство("ТаблицаСтраницРаздела",  ВыбрТаблицаСтраницРаздела);
		ВыбранноеЗначение.Свойство("ФлагМодифицированности", ФлМодифицированностьСписка);

		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

		Возврат;

		ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
		ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];

		ТекСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		ИндексТекСтраницы  = 0;

		Если ТекСтраницаРаздела <> Неопределено Тогда
			ИндексТекСтраницы = ТаблицаСтраницРаздела.Индекс(ТекСтраницаРаздела);
		КонецЕсли;

		ИндексВыбСтраницы     = ИндексТекСтраницы;
		
		ТаблицаСтраницРаздела = ВыбрТаблицаСтраницРаздела.Скопировать();

		ВыбСтраницаРаздела    = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

		Если ВыбСтраницаРаздела <> Неопределено Тогда
			ИндексВыбСтраницы = ТаблицаСтраницРаздела.Индекс(ВыбСтраницаРаздела);
		КонецЕсли;

		// отображаем данные следующей страницы
		СтруктураДанныхВыбСтраницы = ВыбСтраницаРаздела.Данные;

		Для Каждого Элемент Из СтруктураДанныхВыбСтраницы Цикл
			ИмяПоказателя      = Элемент.Ключ;
			ЗначениеПоказателя = Элемент.Значение;

			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;

		Расчет(Ложь);

		ТекущийЭлемент = ТекТабличноеПоле;

		Если ФлМодифицированностьСписка Тогда
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Примечания";
	СтрокаУровня1.Представление            = "Дочерние компании";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПримечания";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПримечанияСД";
	СтрокаУровня1.Представление            = "Совместная деятельность";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПримечанияСД";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДСОтОперДеят";
	СтрокаУровня1.Представление            = "ДС от операционной деятельности";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаДСОтОперДеят";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(15));

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	Если (мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный) и (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не заполнена организация!", , "Действие не выполнено!");
		Возврат;
	КонецЕсли;	
	ЗаполнитьАвто();
КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	ПоказатьСтраницыОтчета();

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)
	Если (мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный) и (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не заполнена организация!", , "Действие не выполнено!");
		Возврат;
	КонецЕсли;	

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)
	Если (мКонсолидация = Перечисления.ВидыКонсолидированныхОтчетов.НеКонсолидированный) и (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не заполнена организация!", , "Действие не выполнено!");
		Возврат;
	КонецЕсли;	
	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ФлажокОтклАвтоРасчетПриИзменении
//
Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ЭлементыФормы.ФлажокОтклАвтоРасчет.Значение);

КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Перем ТекущаяОбласть;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	ЗаполнитьДатуВЯчейках();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки на странице "Лист 2" панели формы.
//
Процедура ПолеВводаЗначениеКорректировкиЛист2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// комментарий на странице "Лист 2" по ячейке, для которой установлен
// алгоритм автозаполнения [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийЛист2ПриИзменении(Элемент)

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

КонецПроцедуры // ПолеВводаКомментарийЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа на странице "Лист 2" основной панели.
//
Процедура ПолеВыбораВариантЗаполненияЛист2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	Модифицированность = Истина;
КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа на странице "Лист 2" основной панели формы.
// Устанавлвает признак модифицированности данных в форме.
//
Процедура ПолеТабличногоДокументаБалансПриИзменении(Элемент)

	Расчет(Ложь);
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаЛист2ПриИзменении()

Процедура ПолеТабличногоДокументаБалансПриАктивизацииОбласти(Элемент)
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, Элемент.ТекущаяОбласть);
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиПримечанияНажатие(Элемент)
    Для Ном = 2 по 21 Цикл
		ВставитьДополнительнуюСтроку("Г" + Формат(Ном, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
	ВставитьДополнительнуюСтроку("Г01");
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиПримечанияНажатие(Элемент)
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ИмяЯчейки                = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть.Имя;

	Если Лев(ИмяЯчейки, 1) <> "Г" Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Ном = Прав(ИмяЯчейки, 1);

	УдалитьДополнительнуюСтроку("Г02Реализация_" + Ном);
	УдалитьДополнительнуюСтроку("Г03ВаловаяПрибыль_" + Ном);
	УдалитьДополнительнуюСтроку("Г04Приобретение_" + Ном);
	УдалитьДополнительнуюСтроку("Г05ДебиторскаяЗадолженность_" + Ном);
	УдалитьДополнительнуюСтроку("Г06ДебиторскаяЗадолженность_" + Ном);
	УдалитьДополнительнуюСтроку("Г07КредиторскаяЗадолженность_" + Ном);
	УдалитьДополнительнуюСтроку("Г08КредиторскаяЗадолженность_" + Ном);
	УдалитьДополнительнуюСтроку("Г09Авансы_" + Ном);
	УдалитьДополнительнуюСтроку("Г10Авансы_" + Ном);
	УдалитьДополнительнуюСтроку("Г11ДоходыБП_" + Ном);
	УдалитьДополнительнуюСтроку("Г12ДоходыБП_" + Ном);
	УдалитьДополнительнуюСтроку("Г13Дивиденды_" + Ном);
	УдалитьДополнительнуюСтроку("Г14КраткосрочныеЗаймы_" + Ном);
	УдалитьДополнительнуюСтроку("Г15КраткосрочныеЗаймы_" + Ном);
	УдалитьДополнительнуюСтроку("Г16ДолгосрочныеЗаймы_" + Ном);
	УдалитьДополнительнуюСтроку("Г17ДолгосрочныеЗаймы_" + Ном);
	УдалитьДополнительнуюСтроку("Г18РазмещениеОбыкновенных_" + Ном);
	УдалитьДополнительнуюСтроку("Г19РазмещениеПривилег_" + Ном);
	УдалитьДополнительнуюСтроку("Г20ВыкупСобственных_" + Ном);
	УдалитьДополнительнуюСтроку("Г21ПродажаСобственных_" + Ном);
	УдалитьДополнительнуюСтроку("Г01Наименование_" + Ном);
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиПримечанияСДНажатие(Элемент)
    Для Ном = 30 по 30 Цикл // Позже будет больше
		ВставитьДополнительнуюСтроку("Г" + Формат(Ном, "ЧЦ=2; ЧВН=; ЧГ=0"));
	КонецЦикла;
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиПримечанияСДНажатие(Элемент)
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ИмяЯчейки                = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть.Имя;

	Если Лев(ИмяЯчейки, 1) <> "Г" Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Ном = Прав(ИмяЯчейки, 1);

	УдалитьДополнительнуюСтроку("Г30Наименование_" + Ном);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если мЗаписьЗапрещена <> Истина И ТипЗнч(мСохраненныйДок) = Тип("ДокументОбъект.РегламентированныйОтчет") И Модифицированность Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРежимВводаИнформации(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей";

мСтруктураМногостраничныхРазделов = Новый Структура;

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ВалютаУпр = глЗначениеПеременной("ВалютаМеждународногоУчета").Наименование;
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, "в " + ВалютаУпр);
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, "в тысячах " + ВалютаУпр);
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах " + ВалютаУпр);

// Список выбора поля выбора "ВариантЗаполнения" на странице <Примечания>
ЭлементыФормы.ПолеВыбораВариантЗаполненияПримечания.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияПримечания.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияПримечания.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

ЭлементыФормы.ПолеВыбораВариантЗаполненияПримечанияСД.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияПримечанияСД.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияПримечанияСД.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

ЭлементыФормы.ПолеВыбораВариантЗаполненияДСОтОперДеят.СписокВыбора.Добавить(1, "не заполнять автоматически");
ЭлементыФормы.ПолеВыбораВариантЗаполненияДСОтОперДеят.СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
ЭлементыФормы.ПолеВыбораВариантЗаполненияДСОтОперДеят.СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Число"));
ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2));

МассивТипов = Новый Массив; 
МассивТипов.Добавить(Тип("Строка"));
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(254));

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп

мИдГруппы1 = "Г01";
мИдГруппы2 = "Г02";
мИдГруппы3 = "Г03";
мИдГруппы4 = "Г04";
мИдГруппы5 = "Г05";
мИдГруппы6 = "Г06";
мИдГруппы7 = "Г07";
мИдГруппы8 = "Г08";
мИдГруппы9 = "Г09";
мИдГруппы10 = "Г10";
мИдГруппы11 = "Г11";
мИдГруппы12 = "Г12";
мИдГруппы13 = "Г13";
мИдГруппы14 = "Г14";
мИдГруппы15 = "Г15";
мИдГруппы16 = "Г16";
мИдГруппы17 = "Г17";
мИдГруппы18 = "Г18";
мИдГруппы19 = "Г19";
мИдГруппы20 = "Г20";
мИдГруппы21 = "Г21";

мИдГруппы30 = "Г30";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)

КолИсхСтрокИдГруппы1 = 1;
КолИсхСтрокИдГруппы2 = 1;
КолИсхСтрокИдГруппы3 = 1;
КолИсхСтрокИдГруппы4 = 1;
КолИсхСтрокИдГруппы5 = 1;
КолИсхСтрокИдГруппы6 = 1;
КолИсхСтрокИдГруппы7 = 1;
КолИсхСтрокИдГруппы8 = 1;
КолИсхСтрокИдГруппы9 = 1;
КолИсхСтрокИдГруппы10 = 1;
КолИсхСтрокИдГруппы11 = 1;
КолИсхСтрокИдГруппы12 = 1;
КолИсхСтрокИдГруппы13 = 1;
КолИсхСтрокИдГруппы14 = 1;
КолИсхСтрокИдГруппы15 = 1;
КолИсхСтрокИдГруппы16 = 1;
КолИсхСтрокИдГруппы17 = 1;
КолИсхСтрокИдГруппы18 = 1;
КолИсхСтрокИдГруппы19 = 1;
КолИсхСтрокИдГруппы20 = 1;
КолИсхСтрокИдГруппы21 = 1;

КолИсхСтрокИдГруппы30 = 1;

// структура строк многострочного раздела

СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("Г01Наименование", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("Г01Страна", ОписаниеТиповСтрока);
СтруктураГруппы1.Колонки.Добавить("Г01Доля", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("Г01Величина", ОписаниеТиповЧисло);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("Г02Реализация", ОписаниеТиповСтрока);
СтруктураГруппы2.Колонки.Добавить("Г02СумКон101", ОписаниеТиповЧисло);
СтруктураГруппы2.Колонки.Добавить("Г02СумПред101", ОписаниеТиповЧисло);

СтруктураГруппы3 = Новый ТаблицаЗначений;
СтруктураГруппы3.Колонки.Добавить("Г03ВаловаяПрибыль", ОписаниеТиповСтрока);
СтруктураГруппы3.Колонки.Добавить("Г03СумКон102", ОписаниеТиповЧисло);
СтруктураГруппы3.Колонки.Добавить("Г03СумПред102", ОписаниеТиповЧисло);

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("Г04Приобретение", ОписаниеТиповСтрока);
СтруктураГруппы4.Колонки.Добавить("Г04СумКон103", ОписаниеТиповЧисло);
СтруктураГруппы4.Колонки.Добавить("Г04СумПред103", ОписаниеТиповЧисло);

СтруктураГруппы13 = Новый ТаблицаЗначений;
СтруктураГруппы13.Колонки.Добавить("Г13Дивиденды", ОписаниеТиповСтрока);
СтруктураГруппы13.Колонки.Добавить("Г13СумКон114", ОписаниеТиповЧисло);
СтруктураГруппы13.Колонки.Добавить("Г13СумПред114", ОписаниеТиповЧисло);

СтруктураГруппы14 = Новый ТаблицаЗначений;
СтруктураГруппы14.Колонки.Добавить("Г14КраткосрочныеЗаймы", ОписаниеТиповСтрока);
СтруктураГруппы14.Колонки.Добавить("Г14СумКон115", ОписаниеТиповЧисло);
СтруктураГруппы14.Колонки.Добавить("Г14СумПред115", ОписаниеТиповЧисло);

СтруктураГруппы15 = Новый ТаблицаЗначений;
СтруктураГруппы15.Колонки.Добавить("Г15КраткосрочныеЗаймы", ОписаниеТиповСтрока);
СтруктураГруппы15.Колонки.Добавить("Г15СумКон116", ОписаниеТиповЧисло);
СтруктураГруппы15.Колонки.Добавить("Г15СумПред116", ОписаниеТиповЧисло);

СтруктураГруппы16 = Новый ТаблицаЗначений;
СтруктураГруппы16.Колонки.Добавить("Г16ДолгосрочныеЗаймы", ОписаниеТиповСтрока);
СтруктураГруппы16.Колонки.Добавить("Г16СумКон117", ОписаниеТиповЧисло);
СтруктураГруппы16.Колонки.Добавить("Г16СумПред117", ОписаниеТиповЧисло);

СтруктураГруппы17 = Новый ТаблицаЗначений;
СтруктураГруппы17.Колонки.Добавить("Г17ДолгосрочныеЗаймы", ОписаниеТиповСтрока);
СтруктураГруппы17.Колонки.Добавить("Г17СумКон118", ОписаниеТиповЧисло);
СтруктураГруппы17.Колонки.Добавить("Г17СумПред118", ОписаниеТиповЧисло);

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("Г05ДебиторскаяЗадолженность", ОписаниеТиповСтрока);
СтруктураГруппы5.Колонки.Добавить("Г05СумКон110", ОписаниеТиповЧисло);
СтруктураГруппы5.Колонки.Добавить("Г05СумПред110", ОписаниеТиповЧисло);

СтруктураГруппы6 = Новый ТаблицаЗначений;
СтруктураГруппы6.Колонки.Добавить("Г06ДебиторскаяЗадолженность", ОписаниеТиповСтрока);
СтруктураГруппы6.Колонки.Добавить("Г06СумКон110", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("Г06СумПред110", ОписаниеТиповЧисло);

СтруктураГруппы7 = Новый ТаблицаЗначений;
СтруктураГруппы7.Колонки.Добавить("Г07КредиторскаяЗадолженность", ОписаниеТиповСтрока);
СтруктураГруппы7.Колонки.Добавить("Г07СумКон111", ОписаниеТиповЧисло);
СтруктураГруппы7.Колонки.Добавить("Г07СумПред111", ОписаниеТиповЧисло);

СтруктураГруппы8 = Новый ТаблицаЗначений;
СтруктураГруппы8.Колонки.Добавить("Г08КредиторскаяЗадолженность", ОписаниеТиповСтрока);
СтруктураГруппы8.Колонки.Добавить("Г08СумКон111", ОписаниеТиповЧисло);
СтруктураГруппы8.Колонки.Добавить("Г08СумПред111", ОписаниеТиповЧисло);

СтруктураГруппы9 = Новый ТаблицаЗначений;
СтруктураГруппы9.Колонки.Добавить("Г09Авансы", ОписаниеТиповСтрока);
СтруктураГруппы9.Колонки.Добавить("Г09СумКон112", ОписаниеТиповЧисло);
СтруктураГруппы9.Колонки.Добавить("Г09СумПред112", ОписаниеТиповЧисло);

СтруктураГруппы10 = Новый ТаблицаЗначений;
СтруктураГруппы10.Колонки.Добавить("Г10Авансы", ОписаниеТиповСтрока);
СтруктураГруппы10.Колонки.Добавить("Г10СумКон112", ОписаниеТиповЧисло);
СтруктураГруппы10.Колонки.Добавить("Г10СумПред112", ОписаниеТиповЧисло);

СтруктураГруппы11 = Новый ТаблицаЗначений;
СтруктураГруппы11.Колонки.Добавить("Г11ДоходыБП", ОписаниеТиповСтрока);
СтруктураГруппы11.Колонки.Добавить("Г11СумКон113", ОписаниеТиповЧисло);
СтруктураГруппы11.Колонки.Добавить("Г11СумПред113", ОписаниеТиповЧисло);

СтруктураГруппы12 = Новый ТаблицаЗначений;
СтруктураГруппы12.Колонки.Добавить("Г12ДоходыБП", ОписаниеТиповСтрока);
СтруктураГруппы12.Колонки.Добавить("Г12СумКон113", ОписаниеТиповЧисло);
СтруктураГруппы12.Колонки.Добавить("Г12СумПред113", ОписаниеТиповЧисло);

СтруктураГруппы18 = Новый ТаблицаЗначений;
СтруктураГруппы18.Колонки.Добавить("Г18РазмещениеОбыкновенных", ОписаниеТиповСтрока);
СтруктураГруппы18.Колонки.Добавить("Г18СумКон119", ОписаниеТиповЧисло);
СтруктураГруппы18.Колонки.Добавить("Г18СумПред119", ОписаниеТиповЧисло);

СтруктураГруппы19 = Новый ТаблицаЗначений;
СтруктураГруппы19.Колонки.Добавить("Г19РазмещениеПривилег", ОписаниеТиповСтрока);
СтруктураГруппы19.Колонки.Добавить("Г19СумКон120", ОписаниеТиповЧисло);
СтруктураГруппы19.Колонки.Добавить("Г19СумПред120", ОписаниеТиповЧисло);

СтруктураГруппы20 = Новый ТаблицаЗначений;
СтруктураГруппы20.Колонки.Добавить("Г20ВыкупСобственных", ОписаниеТиповСтрока);
СтруктураГруппы20.Колонки.Добавить("Г20СумКон121", ОписаниеТиповЧисло);
СтруктураГруппы20.Колонки.Добавить("Г20СумПред121", ОписаниеТиповЧисло);

СтруктураГруппы21 = Новый ТаблицаЗначений;
СтруктураГруппы21.Колонки.Добавить("Г21ПродажаСобственных", ОписаниеТиповСтрока);
СтруктураГруппы21.Колонки.Добавить("Г21СумКон122", ОписаниеТиповЧисло);
СтруктураГруппы21.Колонки.Добавить("Г21СумПред122", ОписаниеТиповЧисло);

СтруктураГруппы30 = Новый ТаблицаЗначений;
СтруктураГруппы30.Колонки.Добавить("Г30Наименование", ОписаниеТиповСтрока);
СтруктураГруппы30.Колонки.Добавить("Г30Страна", ОписаниеТиповСтрока);
СтруктураГруппы30.Колонки.Добавить("Г30Доля", ОписаниеТиповЧисло);
СтруктураГруппы30.Колонки.Добавить("Г30Величина", ОписаниеТиповЧисло);

мСтруктураМногостроничныхРазделов = Новый Структура;

// структура многострочных разделов формы

мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы3, СтруктураГруппы3);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4, СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5, СтруктураГруппы5);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы6, СтруктураГруппы6);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы7, СтруктураГруппы7);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы8, СтруктураГруппы8);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы9, СтруктураГруппы9);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы10, СтруктураГруппы10);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы11, СтруктураГруппы11);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы12, СтруктураГруппы12);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы13, СтруктураГруппы13);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы14, СтруктураГруппы14);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы15, СтруктураГруппы15);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы16, СтруктураГруппы16);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы17, СтруктураГруппы17);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы18, СтруктураГруппы18);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы19, СтруктураГруппы19);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы20, СтруктураГруппы20);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы21, СтруктураГруппы21);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы30, СтруктураГруппы30);

// структура исходных строк (минимального кол-ва) многострочных разделов формы

мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы3, КолИсхСтрокИдГруппы3);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5, КолИсхСтрокИдГруппы5);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы6, КолИсхСтрокИдГруппы6);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы7, КолИсхСтрокИдГруппы7);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы8, КолИсхСтрокИдГруппы8);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы9, КолИсхСтрокИдГруппы9);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы10, КолИсхСтрокИдГруппы10);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы11, КолИсхСтрокИдГруппы11);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы12, КолИсхСтрокИдГруппы12);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы13, КолИсхСтрокИдГруппы13);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы14, КолИсхСтрокИдГруппы14);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы15, КолИсхСтрокИдГруппы15);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы16, КолИсхСтрокИдГруппы16);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы17, КолИсхСтрокИдГруппы17);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы18, КолИсхСтрокИдГруппы18);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы19, КолИсхСтрокИдГруппы19);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы20, КолИсхСтрокИдГруппы20);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы21, КолИсхСтрокИдГруппы21);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы30, КолИсхСтрокИдГруппы30);

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
// мВерсияФормы = "30/09/2003"; Старая форма
// мВерсияФормы = "30/09/2005";
мВерсияФормы = "30/09/2006";

мПечатныеФормы = Новый СписокЗначений;