Перем ВысотаЗаголовка;
Перем ПоказыватьЗаголовок;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ВыводЗаголовка()

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда
		ВнешняяОбработкаОбъект.СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, Истина);
	КонецЕсли;

	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры // ВыводЗаголовка()

Процедура УправлениеПометкамиКнопокКоманднойПанели()

	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка                = ПоказыватьЗаголовок;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;

КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

Процедура ЗаполнитьСписокВидовРасходов()

		// Заполним список видов расходов если он пуст.
	Если ВидыРасходов.Количество() = 0 Тогда 

		ВидыРасходов.Добавить("Проценты по долговым обязательствам");
		ВидыРасходов.Добавить("Формирование резервов по сомнительным долгам");
		ВидыРасходов.Добавить("НДС по списанной кредиторской задолженности");
		ВидыРасходов.Добавить("Доходы расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке", "Операции с финансовыми инструментами срочных сделок на организованном рынке");
		ВидыРасходов.Добавить("Доходы расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке", "Операции с финансовыми инструментами срочных сделок не на организованном рынке");
		ВидыРасходов.Добавить("Содержание имущества, переданного в аренду");
		ВидыРасходов.Добавить("Ликвидация выводимых из эксплуатации основных средств");
		ВидыРасходов.Добавить("Убытки прошлых лет");
		ВидыРасходов.Добавить("Суммы безнадежных долгов, не покрытые за счет средств резерва");
		ВидыРасходов.Добавить("Прочие убытки, приравненные к внереализационным расходам");
		ВидыРасходов.Добавить("Услуги банков");
		ВидыРасходов.Добавить("Курсовые разницы");
		ВидыРасходов.Добавить("Штрафы, пени, неустойки");
		ВидыРасходов.Добавить("Прочие внереализационные расходы");

        		
	КонецЕсли;

	ВидыРасходов.ЗаполнитьПометки(Истина);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(ДатаНач, ДатаКон);

	Если НП.Редактировать() Тогда

		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

Процедура КоманднаяПанельФормыНастройка(Кнопка)

	ФормаНастройка = ПолучитьФорму("ФормаНастройка", ЭтаФорма);

	ФормаНастройка.ОткрытьМодально();

КонецПроцедуры // КоманднаяПанельФормыНастройка()

Процедура КоманднаяПанельФормыСформировать(Элемент)
// Проверка на пустые значения
	Если ДатаНач = '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть пустой");
		Возврат;
	КонецЕсли;

	Если ДатаКон = '00010101000000' Тогда
		Предупреждение("Дата окончания периода не может быть пустой");
		Возврат;
	КонецЕсли;
	ВнешняяОбработкаОбъект.СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);

	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;

КонецПроцедуры

Процедура КоманднаяПанельЗаголовок(Кнопка)

	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	ВыводЗаголовка();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием()

	ПоказыватьЗаголовок = ИСТИНА;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ВыводЗаголовка();

	ЗаполнитьСписокВидовРасходов();
	Если НЕ ЗначениеЗаполнено(Организация) Тогда 
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяОрганизация");
	КонецЕсли;


КонецПроцедуры