Перем ПолеТаблДокументаТитульный;

Перем ПолеТаблДокументаРаздел1_1;  // Таблица 1
Перем ПолеТаблДокументаРаздел1_2;  // Таблица 2
Перем ПолеТаблДокументаРаздел1_3;  // Таблица 3
Перем ПолеТаблДокументаРаздел1_31; // Таблица 3.1
Перем ПолеТаблДокументаРаздел1_4;  // Таблица 4
Перем ПолеТаблДокументаРаздел1_41; // Таблица 4.1
Перем ПолеТаблДокументаРаздел1_42; // Таблица 4.2
Перем ПолеТаблДокументаРаздел1_43; // Таблица 4.3
Перем ПолеТаблДокументаРаздел1_44; // Таблица 4.3
Перем ПолеТаблДокументаРаздел1_5;  // Таблица 5

Перем ПолеТаблДокументаРаздел2_6_7; // Таблицы 6, 7
Перем ПолеТаблДокументаРаздел2_8_9; // Таблицы 8, 9

Перем мОписаниеТиповБулево;

Перем мСоставПоказателей Экспорт;

Перем мИдГруппы1; // Идентификатор многострочного раздела

Перем мВПрограммеИзмененаОрганизация;

Перем мСтруктураМногостраничныхРазделов Экспорт;

Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов Экспорт; // Исходное количество строк для многострочных разделов

Перем мДеревоВыбранныхСтраниц Экспорт; // Список выводимых на печать страниц отчета

Перем мСтрокаФормата Экспорт; // Форматная строка представления денежных показателей отчета

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

// Хранит код отчета по КНД
Перем мКодОтчета Экспорт;

// Хранит версию формы отчета
Перем мВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Переменные хранят параметры дополнительных листов
Перем НомТекГруппы;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем СвойстваПоказателей Экспорт;

Перем мПечатныеФормы Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мДокументВосстановлен;

Перем мПоляПоискаПоказателяВТСП Экспорт;

Перем мСтруктураДанныхОтчетаXMLКонтейнер Экспорт;
Перем ИДКонфигурации;

Перем мСтруктураДокУпПред;

Перем ИзМакета; // для ББУ, чтоб авторасчитываемые ячейки окрашивались из макета

Перем мДанныеОтчета Экспорт;

Перем ЦветБелый;
Перем ЦветЖелтый;

Перем ТаблицаСообщений Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьДеревоНастройкиСтраниц();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура ПолеТабличногоДокументаРаздел1_41Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_41ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел1_41ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел1_41ПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	
	Модифицированность = Истина;
	
КонецПроцедуры
 
Процедура ПолеВводаКомментарийРаздел1_41ПриИзменении(Элемент)
	
	Перем Комментарий;
	
	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_42Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_42ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_42ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел1_42ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел1_42ПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел1_42ПриИзменении(Элемент)
	
	Перем Комментарий;
	
	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_43Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_43ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_43ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел1_43ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел1_43ПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел1_43ПриИзменении(Элемент)
	
	Перем Комментарий;
	
	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_44Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_44ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_44ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел1_44ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел1_44ПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел1_44ПриИзменении(Элемент)
	
	Перем Комментарий;
	
	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)
	
	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	ИнициализироватьПоляТабличныхДокументов();
	
	ЗаполнитьНачальныеНастройки();
	
	// Формируем список элементов подменю, связанное с кнопкой <Печать>.
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
	
	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));
	
	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	Если НЕ БезОткрытияФормы Тогда
		Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" ИЛИ ИДКонфигурации = "ЗБУ" Тогда
			ЭлементыФормы.ФлажокВнешДанные.Видимость = Ложь;
			ФлажокВнешДанные = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;
	
	НачальнаяПодготовкаФормы();
	
	РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСС", Новый Действие("Подключаемый_КоманднаяПанельФормыПоказатьРезультат"));
	
	Если ПолеТаблДокументаТитульный.Области.ПрПодп.Значение = "1" Тогда
		ПолеТаблДокументаТитульный.Области.ДокУпПред.Защита = Истина;
		ПолеТаблДокументаТитульный.Области.ДокУпПред.ЦветФона = ЦветБелый;
	КонецЕсли;
	
	Если ИДКонфигурации <> "ЗУП" И ИДКонфигурации <> "ЗБУ" И ИДКонфигурации <> "УПП" И ИДКонфигурации <> "КА" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуРасшифровки(ЭтаФорма, "Расшифровать");
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьПоляТабличныхДокументов()
	
	// Титульный лист.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Титульный");
	ПолеТаблДокументаТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	ПолеТаблДокументаТитульный.Очистить();
	ПолеТаблДокументаТитульный.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаТитульный);
	
	// Раздел I. Таблица 1.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1_1");
	ПолеТаблДокументаРаздел1_1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	ПолеТаблДокументаРаздел1_1.Очистить();
	ПолеТаблДокументаРаздел1_1.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел1_1);
	
	// Раздел I. Таблица 2.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1_2");
	ПолеТаблДокументаРаздел1_2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	ПолеТаблДокументаРаздел1_2.Очистить();
	ПолеТаблДокументаРаздел1_2.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел1_2);
	
	// Раздел I. Таблица 3.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1_3");
	ПолеТаблДокументаРаздел1_3 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_3;
	ПолеТаблДокументаРаздел1_3.Очистить();
	ПолеТаблДокументаРаздел1_3.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел1_3);
	
	// Раздел I. Таблица 3.1.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1_31");
	ПолеТаблДокументаРаздел1_31 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_31;
	ПолеТаблДокументаРаздел1_31.Очистить();
	ПолеТаблДокументаРаздел1_31.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел1_31);
	
	// Раздел I. Таблица 4.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1_4");
	ПолеТаблДокументаРаздел1_4 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_4;
	ПолеТаблДокументаРаздел1_4.Очистить();
	ПолеТаблДокументаРаздел1_4.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел1_4);
	
	// Раздел I. Таблица 4.1.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1_41");
	ПолеТаблДокументаРаздел1_41 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_41;
	ПолеТаблДокументаРаздел1_41.Очистить();
	ПолеТаблДокументаРаздел1_41.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел1_41);
	
	// Раздел I. Таблица 4.2.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1_42");
	ПолеТаблДокументаРаздел1_42 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_42;
	ПолеТаблДокументаРаздел1_42.Очистить();
	ПолеТаблДокументаРаздел1_42.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел1_42);
	
	// Раздел I. Таблица 4.3.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1_43");
	ПолеТаблДокументаРаздел1_43 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_43;
	ПолеТаблДокументаРаздел1_43.Очистить();
	ПолеТаблДокументаРаздел1_43.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел1_43);
	
	// Раздел I. Таблица 4.4.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1_44");
	ПолеТаблДокументаРаздел1_44 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_44;
	ПолеТаблДокументаРаздел1_44.Очистить();
	ПолеТаблДокументаРаздел1_44.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел1_44);
	
	// Раздел I. Таблица 5.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1_5");
	ПолеТаблДокументаРаздел1_5 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_5;
	ПолеТаблДокументаРаздел1_5.Очистить();
	ПолеТаблДокументаРаздел1_5.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел1_5);
	
	// Раздел II. Таблицы 6, 7.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел2_6_7");
	ПолеТаблДокументаРаздел2_6_7 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_6_7;
	ПолеТаблДокументаРаздел2_6_7.Очистить();
	ПолеТаблДокументаРаздел2_6_7.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел2_6_7);
	
	// Раздел II. Таблицы 8, 9.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел2_8_9");
	ПолеТаблДокументаРаздел2_8_9 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_8_9;
	ПолеТаблДокументаРаздел2_8_9.Очистить();
	ПолеТаблДокументаРаздел2_8_9.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПолеТаблДокументаРаздел2_8_9);
	
КонецПроцедуры // ИнициализироватьПоляТабличныхДокументов()

Процедура ОбнулитьОбластиЧисловыхЗначений(ПолеТабличногоДокумента)
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Если Область.СодержитЗначение И ТипЗнч(Область.Значение) = Тип("Число") Тогда
				ИсходныйФормат = Область.Формат;
				Область.Формат = ИсходныйФормат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	//настройка многострочных частей
	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", ОписаниеТиповБулево);

	МнгРаздел1_31 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел1_31.Добавить();
	НовСтр.ИдГруппы = мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_31";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел1_31;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_4";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_41";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_42";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_43";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_44";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_5";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_6_7";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_8_9";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;

	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = ПолеТаблДокументаРаздел1_31;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице() Экспорт
	Перем ИмяГруппы;
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1_31" Тогда
		ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ПолеТаблДокументаРаздел1_31.ТекущаяОбласть);
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		//Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
		//	Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
		//		мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
		//		ЕстьИзменения = Истина;
		//	КонецЕсли;

		//КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = Ложь;
		
		Если ВариантЗаполнения = 4 Тогда

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;

		Иначе

			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;

		КонецЕсли;

		// установим цвет ячейки
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);

		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(ИмяПоказателя);
				ЗначениеВКвадратах = Ложь;

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

				Иначе

						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;

				КонецЕсли;

				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

Процедура ПоказатьПериод()
	
	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;
	
	МассивМесяцев = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю("1.2.4.5.7.8.10.11");
	Если МассивМесяцев.Найти(НомерМесяца) <> Неопределено Тогда
		НомерМесяца = "1";
	КонецЕсли;
	
	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
	
	// Период на титульном листе
	КодПериода = Формат(КонецКвартала(мДатаКонцаПериодаОтчета), "ДФ=ММ");
	
	ЗаполненНомерОбращения = НЕ ПустаяСтрока(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НомДопРасчета_"));
	
	КодПериода = Формат(мДатаКонцаПериодаОтчета, "ДФ=ММ");
	Если (КодПериода = "03" ИЛИ КодПериода = "06"  ИЛИ КодПериода = "09" ИЛИ КодПериода = "12")
	   И НЕ ЗаполненНомерОбращения Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Период_", 2, КодПериода);
	Иначе
		// Период не заполняется
	КонецЕсли;
	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОтчетГод", 4, НомерГода);
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// области табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт
	
	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "), Истина);
	ПроставитьНаВсехЛистах("ДатаПодписиПолная", ?(ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, ""), Ложь);
	
КонецПроцедуры // ЗаполнитьДатуВЯчейках()

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// Преобразовываем, при необходимости, значение показателя к типу "Строка".
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// Проставляем значение в табличные документы.
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Проставляем значение в многостраничные разделы.
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получить ПолучитьРазмерСтраховогоТарифа
// Нельзя вызывать без проверки на пустую организацию
//
// возвращает размер страхового тарифа на дату конца отчетного периода
//
Функция ПолучитьРазмерСтраховогоТарифа()

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтраховойТариф");
	СтраховойТариф = Неопределено;
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мДатаКонцаПериодаОтчета, Сведения);
	ОргСведения.Свойство("СтраховойТариф", СтраховойТариф);
	Возврат СтраховойТариф;

КонецФункции // ПолучитьРазмерСтраховогоТарифа

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь, СменилсяПризнакПодписанта = Ложь)
	
	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	
	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП
		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование
		Сведения.Добавить("", "ОГРН");
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "РегистрационныйНомерФСС");
		Сведения.Добавить("", "АдрЮР");
		Сведения.Добавить("", "АдрПрописки");
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИО"); // ФИО предпринимателя
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные
		ИННЮЛ = ""; // ИНН
		КППЮЛ = ""; // КПП
		НаимЮЛПол = ""; // Полное наименование
		ОГРН = "";
		ОКАТО = "";
		ОКПО = "";
		ОКВЭД = "";
		ОКОПФ = "";
		ОКФС = "";
		РегистрационныйНомерФСС = "";
		АдрЮР = "";
		АдрПрописки = "";
		
	КонецЕсли;
	
	ФИОРук = ""; // ФИО руководителя
	ФИО = "";
	ТелОрганизации = "";
	ТелСлуж = "";
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Получаем данные
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОГРН", ОГРН);
		ОргСведения.Свойство("ОКАТО", ОКАТО);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКВЭД", ОКВЭД);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
		ОргСведения.Свойство("АдрЮР", АдрЮР);
		ОргСведения.Свойство("АдрПрописки", АдрПрописки);
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИО", ФИО);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж", ТелСлуж);
	
	Если ПБОЮЛ Тогда
		НаимЮлПол = ФИО;
		Адрес =  АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук = ФИО;
	КонецЕсли;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		ПолеТаблДокументаТитульный.Области.ПрПодп.Значение = "1";
		ПолеТаблДокументаТитульный.Области.ОргПодписантФамилия.Значение = ФИОРук;
		ЗапретитьВводДокументаПредставителя();
		Возврат;
	КонецЕсли;
	
	// Производим операции связанные с текущей формой отчетности
	
	// Работаем с названием ЮЛ
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(ПолеТаблДокументаТитульный.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		ПолеТаблДокументаТитульный.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(ПолеТаблДокументаТитульный.Области.ПрПодп.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		ПолеТаблДокументаТитульный.Области.ПрПодп.Значение = "1";
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(ПолеТаблДокументаТитульный.Области.ОргПодписантФамилия.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		ПолеТаблДокументаТитульный.Области.ОргПодписантФамилия.Значение = ФИОРук;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(ПолеТаблДокументаТитульный.Области.ДокУпПред.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		ЗапретитьВводДокументаПредставителя();
	КонецЕсли;
	
	ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ,12,"0",0);
	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ,9,"-",1);
	
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИНН"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИНН", 12, ИННЮЛ);
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КПП", 9, КППЮЛ);
	КонецЕсли;
	
	// Работаем с ОГРН
	ОГРН = РегламентированнаяОтчетность.ДополнитьСтроку(ОГРН,15,"0",0);
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОГРН"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОГРН", 15, ОГРН);
	КонецЕсли;
	
	// Номер телефона должен заполняться без применения знаков тире и скобок.
	ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
	ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
	ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
	ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ТелОрганизации"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ТелОрганизации", 15, ТелОрганизации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКАТО")) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКАТО", 11, ОКАТО);
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКВЭД"))) Тогда
		// особая обработка ОКВЭД
		Если Сред(ОКВЭД, 2, 1) = "." Тогда
			ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
		КонецЕсли;
		Если Сред(ОКВЭД, 5, 1) = "." Тогда
			ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
		КонецЕсли;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКВЭД", 8, ОКВЭД);
		//Принудительно расставляем точки в квадратиках
		ПолеТаблДокументаТитульный.Области.ОКВЭД3.Значение = ".";
		ПолеТаблДокументаТитульный.Области.ОКВЭД6.Значение = ".";
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКПО"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКПО", 10, ОКПО);
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКОПФ"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКОПФ", 2, ОКОПФ);
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКФС"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКФС", 2, ОКФС);
	КонецЕсли;
	
	Если Не ПБОЮЛ Тогда
		Адрес = АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(Адрес);
	Если Не СтруктураАдреса = Неопределено Тогда
		ПолеТаблДокументаТитульный.Области.Адрес1.Значение = СтруктураАдреса.Индекс;
		ПолеТаблДокументаТитульный.Области.Адрес2.Значение = СтруктураАдреса.Регион;
		ПолеТаблДокументаТитульный.Области.Адрес3.Значение = СтруктураАдреса.Район;
		ПолеТаблДокументаТитульный.Области.Адрес4.Значение = СтруктураАдреса.Город;
		ПолеТаблДокументаТитульный.Области.Адрес5.Значение = СтруктураАдреса.НаселенныйПункт;
		ПолеТаблДокументаТитульный.Области.Адрес6.Значение = СтруктураАдреса.Улица;
		ПолеТаблДокументаТитульный.Области.Адрес7.Значение = СтруктураАдреса.Дом;
		ПолеТаблДокументаТитульный.Области.Адрес8.Значение = СтруктураАдреса.Корпус;
		ПолеТаблДокументаТитульный.Области.Адрес9.Значение = СтруктураАдреса.Квартира;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ ПустаяСтрока(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОргФССКод_")) Тогда
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, РегистрационныйНомерФСС, "ОргФССКод_", , , , Ложь);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОргФССКод_", 10, РегистрационныйНомерФСС);
	КонецЕсли;
	
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("ДополнительныйКодФСС") <> Неопределено Тогда
		Если (мВПрограммеИзмененаОрганизация) ИЛИ ПустаяСтрока(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ДополнительныйКод_")) Тогда
			ДополнительныйКодФСС = Организация.ДополнительныйКодФСС;
			Если ЗначениеЗаполнено(ДополнительныйКодФСС) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ДополнительныйКод_", 10, ДополнительныйКодФСС);
				РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДополнительныйКодФСС, "ДополнительныйКод_", , , , Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("КодПодчиненностиФСС") <> Неопределено Тогда
		Если (мВПрограммеИзмененаОрганизация) ИЛИ ПустаяСтрока(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодПодчиненности_")) Тогда
			КодПодчиненностиФСС = Организация.КодПодчиненностиФСС;
			Если ЗначениеЗаполнено(КодПодчиненностиФСС) Тогда
				РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КодПодчиненности_", 5, КодПодчиненностиФСС);
				РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, КодПодчиненностиФСС, "КодПодчиненности_", , , , Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (РегламентированнаяОтчетность.ПустоеЗначение(ПолеТаблДокументаРаздел2_6_7.Области.П000060001006.Значение)) Тогда
		ПолеТаблДокументаРаздел2_6_7.Области.П000060001006.Значение = ПолучитьРазмерСтраховогоТарифа();
		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации

//процедура очищает структуру мСтруктураДокУпПред;
//очищает, забеливает, запрещает вводить в область ДокУпПред
Процедура ЗапретитьВводДокументаПредставителя()
	ПолеТаблДокументаТитульный.Области.ДокУпПред.Значение = "";
	мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
	мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
	мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
	мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	мСтруктураДокУпПред.Вставить("КемВыдан", " ");
	ПолеТаблДокументаТитульный.Области.ДокУпПред.Защита = Истина;
	ПолеТаблДокументаТитульный.Области.ДокУпПред.ЦветФона = ЦветБелый;
КонецПроцедуры

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)

	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	
КонецПроцедуры // ФлажокОтклАвтоРасчетПриИзменении(Элемент)

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();
	
	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Истина;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	
	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, СтруктураПараметровЛиста);
	КонецЕсли;
	
	УстранитьОбластьКодаОрганаФСС(мПечатныеФормы);
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяЯчейка);
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	УстановитьЦветФонаЯчейки(,,"ИмяТекущейСтраницыПанел");
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт
	
	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
		               |задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если СтрокаУровня1.Строки.Количество() > 0 Тогда
			
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;
				
				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;
				
				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
						
						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;
						
						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",          ЧтоИскать);
						
						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",          ЧтоИскать);
				
				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);
		
		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;
	
	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		Если мСчетчикСтраниц <> Истина Тогда
			//проставляем номера страниц
			НомерЛиста = 1;
			Для Каждого Эл Из мПечатныеФормы Цикл
				Если НЕ УдалосьПроставитьНомерСтраницы(Эл.Значение, НомерЛиста) Тогда
					Сообщить("Не удалось проставить номер страницы для " + Эл.Представление);
					Продолжить;
				КонецЕсли;
				НомерЛиста = НомерЛиста + 1;
			КонецЦикла;
			
		КонецЕсли;
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция РазделЗаполнен(ИмяСтраницы)
	
	Если ИмяСтраницы = "Раздел1_2" Тогда
		
		Возврат ЗаполненРаздел1_2();
		
	ИначеЕсли ИмяСтраницы = "Раздел1_31" Тогда
		
		Возврат ЗаполненРаздел1_31();
		
	ИначеЕсли ИмяСтраницы = "Раздел1_4" Тогда
		
		Возврат ЗаполненРаздел1_4();
		
	ИначеЕсли ИмяСтраницы = "Раздел1_41" Тогда
		
		Возврат ЗаполненРаздел1_41();
		
	ИначеЕсли ИмяСтраницы = "Раздел1_42" Тогда
		
		Возврат ЗаполненРаздел1_42();
		
	ИначеЕсли ИмяСтраницы = "Раздел1_43" Тогда
		
		Возврат ЗаполненРаздел1_43();
		
	ИначеЕсли ИмяСтраницы = "Раздел1_44" Тогда
		
		Возврат ЗаполненРаздел1_44();
		
	ИначеЕсли ИмяСтраницы = "Раздел1_5" Тогда
		
		Возврат ЗаполненРаздел1_5();
		
	ИначеЕсли ИмяСтраницы = "Раздел2_8_9" Тогда
		
		Возврат ЗаполненРаздел2_8_9();
		
	Иначе
		
		Возврат Истина; // Остальные разделы считаются всегда заполненными
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполненРаздел1_2()
	
	ПолеТабличногоДокумента = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	ПрефиксПоказателейРаздела = "П" + "00002";
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненРаздел1_31()
	
	ПолеТабличногоДокумента = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_31;
	ПрефиксПоказателейРаздела = "П" + "00031";
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненРаздел1_4()
	
	ПолеТабличногоДокумента = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_4;
	ПрефиксПоказателейРаздела = "П" + "00004";
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненРаздел1_41()
	
	ПолеТабличногоДокумента = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_41;
	ПрефиксПоказателейРаздела = "П" + "00041";
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненРаздел1_42()
	
	ПолеТабличногоДокумента = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_42;
	ПрефиксПоказателейРаздела = "П" + "00042";
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненРаздел1_43()
	
	ПолеТабличногоДокумента = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_43;
	ПрефиксПоказателейРаздела = "П" + "00043";
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненРаздел1_44()
	
	ПолеТабличногоДокумента = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_44;
	ПрефиксПоказателейРаздела = "П" + "00044";
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненРаздел1_5()
	
	ПолеТабличногоДокумента = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_5;
	ПрефиксПоказателейРаздела = "П" + "00005";
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненРаздел2_8_9()
	
	ПолеТабличногоДокумента = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_8_9;
	
	ПрефиксПоказателейРаздела = "П" + "00008";
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПрефиксПоказателейРаздела = "П" + "00009";
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПоказательЗаполнен(ОбластьПоказателя)
	
	Если ОбластьПоказателя.СодержитЗначение Тогда
		ЗначениеОбласти = ОбластьПоказателя.Значение;
		ТипЗначенияОбласти = ТипЗнч(ЗначениеОбласти);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			Возврат (ЗначениеОбласти <> 0);
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			Возврат (НЕ ПустаяСтрока(ЗначениеОбласти));
		Иначе
			Возврат ЗначениеЗаполнено(ЗначениеОбласти);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура УстранитьОбластьКодаОрганаФСС(ПечатныеФормы)
	
	Для Каждого ПечатнаяФорма Из ПечатныеФормы Цикл
		ТаблДокументПечатнойФормы = ПечатнаяФорма.Значение.Значение;
		Если ТаблДокументПечатнойФормы.Области.Найти("НадписьКодаОрганаФСС") <> Неопределено Тогда
			ТаблДокументПечатнойФормы.Области.НадписьКодаОрганаФСС.Очистить(Истина, Истина, Истина);
			ТаблДокументПечатнойФормы.Области.КодОрганаФСС1.Очистить(Истина, Истина, Истина);
			ТаблДокументПечатнойФормы.Области.КодОрганаФСС2.Очистить(Истина, Истина, Истина);
			ТаблДокументПечатнойФормы.Области.КодОрганаФСС3.Очистить(Истина, Истина, Истина);
			ТаблДокументПечатнойФормы.Области.КодОрганаФСС4.Очистить(Истина, Истина, Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Пытается проставить номер страницы НомерЛиста в соответствующие ячейки табличного документа ТаблДок.
// Возвращает Истина, если удалось проставить номер. В противном случае возвращает Ложь.
Функция УдалосьПроставитьНомерСтраницы(ТаблДок,Знач НомерЛиста)
	
	ОбластиСНомерамиЛистов = Новый СписокЗначений;
	Для Каждого Обл Из ТаблДок.Значение.Области Цикл
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		КрайнийПравыйСимвол = Прав(Обл.Имя, 1);
		Если Лев(ВРЕГ(Обл.Имя), 6) = "НОМСТР" И (КодСимвола(КрайнийПравыйСимвол) >= КодСимвола("0") И КодСимвола(КрайнийПравыйСимвол) <= КодСимвола("9"))Тогда
			ОбластиСНомерамиЛистов.Добавить(Обл, Обл.Имя);
		КонецЕсли;
		ОбластиСНомерамиЛистов.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	КонецЦикла;
	
	Цифры = Новый Массив;
	Для Инд = 1 По 9 Цикл
		Цифра = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
		НомерЛиста = Цел(НомерЛиста / 10);
		Если ПустаяСтрока(Цифра) Тогда
			Прервать;
		Иначе
			Цифры.Добавить(Цифра);
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 0 По ОбластиСНомерамиЛистов.Количество() - 1 Цикл
		ОбластиСНомерамиЛистов.Получить(Инд).Значение.Значение = Формат(?(Цифры.Количество() > Инд, Цифры[Инд], 0), "ЧЦ=1; ЧН=0; ЧГ=");
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // УдалосьПроставитьНомерСтраницы()

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 
	
	Вариант = ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Вид                        = Вариант;
	мВариант = Вариант;
	
	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	// обновляем структуру многостраничных разделов
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	
	// обновляем структуру многострочных разделов
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		
	КонецЦикла;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ФлажокВнешДанные", ФлажокВнешДанные);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);
	
	// вставляем документ, подтверждающий полномочия представителя
	СписокСохранения.Вставить("ДокументУпПред", мСтруктураДокУпПред);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// Восстанавливаем реквизиты отчета.
		Организация = мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если ДеревоНастройкиСтраниц = Неопределено Тогда
		ФормироватьСтруктуруСтраницОтчета();
	Иначе
		мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
		
		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			
			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;
	
	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;
	
	// Восстанавливаем  документ, подтверждающий полномочия представителя;
	СписокСохранения.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	Если мСтруктураДокУпПред = Неопределено Тогда
		
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ФлажокВнешДанные") Тогда
		ФлажокВнешДанные = СписокСохранения.ФлажокВнешДанные;
	Иначе
		ФлажокВнешДанные = Ложь;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;
	
	// Восстановим сохраненные значения показателей отчета.
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			Если ТекТабличноеПоле.Области.Найти(ИмяПоказателя) <> Неопределено
			   И ТекТабличноеПоле.Области[ИмяПоказателя].СодержитЗначение Тогда
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	мДелитель = 1;
	
	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	мДокументВосстановлен = Истина;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Перем ТаблицаБлока;
	
	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда
		// РАЗДЕЛ I
		
		//Сбор данных
		
		П000010002301 = ПолеТаблДокументаРаздел1_1.Области.П000010002301.Значение;
		П000010002401 = ПолеТаблДокументаРаздел1_1.Области.П000010002401.Значение;
		П000010002501 = ПолеТаблДокументаРаздел1_1.Области.П000010002501.Значение;
		П000010003301 = ПолеТаблДокументаРаздел1_1.Области.П000010003301.Значение;
		П000010003401 = ПолеТаблДокументаРаздел1_1.Области.П000010003401.Значение;
		П000010003501 = ПолеТаблДокументаРаздел1_1.Области.П000010003501.Значение;
		П000010005301 = ПолеТаблДокументаРаздел1_1.Области.П000010005301.Значение;
		П000010005401 = ПолеТаблДокументаРаздел1_1.Области.П000010005401.Значение;
		П000010005501 = ПолеТаблДокументаРаздел1_1.Области.П000010005501.Значение;
		П000010006301 = ПолеТаблДокументаРаздел1_1.Области.П000010006301.Значение;
		П000010006401 = ПолеТаблДокументаРаздел1_1.Области.П000010006401.Значение;
		П000010006501 = ПолеТаблДокументаРаздел1_1.Области.П000010006501.Значение;
		П000010015301 = ПолеТаблДокументаРаздел1_1.Области.П000010015301.Значение;
		П000010015401 = ПолеТаблДокументаРаздел1_1.Области.П000010015401.Значение;
		П000010015501 = ПолеТаблДокументаРаздел1_1.Области.П000010015501.Значение;
		П000010016301 = ПолеТаблДокументаРаздел1_1.Области.П000010016301.Значение;
		П000010016401 = ПолеТаблДокументаРаздел1_1.Области.П000010016401.Значение;
		П000010016501 = ПолеТаблДокументаРаздел1_1.Области.П000010016501.Значение;
		
		П000010002101 = ПолеТаблДокументаРаздел1_1.Области.П000010002101.Значение;
		П000010003101 = ПолеТаблДокументаРаздел1_1.Области.П000010003101.Значение;
		П000010005101 = ПолеТаблДокументаРаздел1_1.Области.П000010005101.Значение;
		П000010006101 = ПолеТаблДокументаРаздел1_1.Области.П000010006101.Значение;
		П000010015101 = ПолеТаблДокументаРаздел1_1.Области.П000010015101.Значение;
		П000010016101 = ПолеТаблДокументаРаздел1_1.Области.П000010016101.Значение;
		
		П000010001003 = ПолеТаблДокументаРаздел1_1.Области.П000010001003.Значение;
		П000010004003 = ПолеТаблДокументаРаздел1_1.Области.П000010004003.Значение;
		П000010007003 = ПолеТаблДокументаРаздел1_1.Области.П000010007003.Значение;
		
		П000010011003 = ПолеТаблДокументаРаздел1_1.Области.П000010011003.Значение;
		
		П000010013003 = ПолеТаблДокументаРаздел1_1.Области.П000010013003.Значение;
		П000010014003 = ПолеТаблДокументаРаздел1_1.Области.П000010014003.Значение;
		П000010017003 = ПолеТаблДокументаРаздел1_1.Области.П000010017003.Значение;
		
		//Расчеты
		
		П000010002201 = П000010002301 + П000010002401 + П000010002501;
		П000010003201 = П000010003301 + П000010003401 + П000010003501;
		П000010005201 = П000010005301 + П000010005401 + П000010005501;
		П000010006201 = П000010006301 + П000010006401 + П000010006501;
		П000010015201 = П000010015301 + П000010015401 + П000010015501;
		П000010016201 = П000010016301 + П000010016401 + П000010016501;
		
		П000010002003 = П000010002101 + П000010002201;
		П000010003003 = П000010003101 + П000010003201;
		П000010005003 = П000010005101 + П000010005201;
		П000010006003 = П000010006101 + П000010006201;
		П000010015003 = П000010015101 + П000010015201;
		П000010016003 = П000010016101 + П000010016201;
		
		П000010008003 = П000010001003 + П000010002003 + П000010003003
					  + П000010004003 + П000010005003 + П000010006003
					  + П000010007003;
		
		П000010012003 = П000010013003 + П000010014003;
		
		П000010018003 =  П000010012003 +  П000010015003 + П000010016003 + П000010017003;
		
		Если П000010018003 > П000010008003 Тогда 
			ЗадолженностьЗаФондомВсего = П000010018003 - П000010008003;
			П000010019003 = 0;
		Иначе
			П000010019003 = П000010008003 - П000010018003;
			ЗадолженностьЗаФондомВсего = 0;
		КонецЕсли;
		
		П000010010003 = ЗадолженностьЗаФондомВсего - П000010011003;
		П000010009003 = П000010010003 + П000010011003;
		
		//Запишем, что посчитали
		
		ПолеТаблДокументаРаздел1_1.Области.П000010002201.Значение = П000010002201;
		ПолеТаблДокументаРаздел1_1.Области.П000010003201.Значение = П000010003201;
		ПолеТаблДокументаРаздел1_1.Области.П000010005201.Значение = П000010005201;
		ПолеТаблДокументаРаздел1_1.Области.П000010006201.Значение = П000010006201;
		ПолеТаблДокументаРаздел1_1.Области.П000010015201.Значение = П000010015201;
		ПолеТаблДокументаРаздел1_1.Области.П000010016201.Значение = П000010016201;
		
		ПолеТаблДокументаРаздел1_1.Области.П000010002003.Значение = П000010002003;
		ПолеТаблДокументаРаздел1_1.Области.П000010003003.Значение = П000010003003;
		ПолеТаблДокументаРаздел1_1.Области.П000010005003.Значение = П000010005003;
		ПолеТаблДокументаРаздел1_1.Области.П000010006003.Значение = П000010006003;
		ПолеТаблДокументаРаздел1_1.Области.П000010015003.Значение = П000010015003;
		ПолеТаблДокументаРаздел1_1.Области.П000010016003.Значение = П000010016003;
		
		ПолеТаблДокументаРаздел1_1.Области.П000010008003.Значение = П000010008003;
		ПолеТаблДокументаРаздел1_1.Области.П000010009003.Значение = П000010009003;
		ПолеТаблДокументаРаздел1_1.Области.П000010010003.Значение = П000010010003;
		ПолеТаблДокументаРаздел1_1.Области.П000010012003.Значение = П000010012003;
		ПолеТаблДокументаРаздел1_1.Области.П000010018003.Значение = П000010018003;
		ПолеТаблДокументаРаздел1_1.Области.П000010019003.Значение = П000010019003;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_2" Тогда

		//Сбор данных
		
		П000020001003 = ПолеТаблДокументаРаздел1_2.Области.П000020001003.Значение;
		П000020001004 = ПолеТаблДокументаРаздел1_2.Области.П000020001004.Значение;
		П000020001005 = ПолеТаблДокументаРаздел1_2.Области.П000020001005.Значение;
		
		П000020003003 = ПолеТаблДокументаРаздел1_2.Области.П000020003003.Значение;
		П000020003004 = ПолеТаблДокументаРаздел1_2.Области.П000020003004.Значение;
		П000020003005 = ПолеТаблДокументаРаздел1_2.Области.П000020003005.Значение;
		
		П000020005003 = ПолеТаблДокументаРаздел1_2.Области.П000020005003.Значение;
		П000020005004 = ПолеТаблДокументаРаздел1_2.Области.П000020005004.Значение;
		
		П000020006003 = ПолеТаблДокументаРаздел1_2.Области.П000020006003.Значение;
		П000020006004 = ПолеТаблДокументаРаздел1_2.Области.П000020006004.Значение;
		
		П000020008003 = ПолеТаблДокументаРаздел1_2.Области.П000020008003.Значение;
		П000020008004 = ПолеТаблДокументаРаздел1_2.Области.П000020008004.Значение;
		П000020008005 = ПолеТаблДокументаРаздел1_2.Области.П000020008005.Значение;

		П000020009003 = ПолеТаблДокументаРаздел1_2.Области.П000020009003.Значение;
		П000020009004 = ПолеТаблДокументаРаздел1_2.Области.П000020009004.Значение;
		П000020009005 = ПолеТаблДокументаРаздел1_2.Области.П000020009005.Значение;

		П000020010003 = ПолеТаблДокументаРаздел1_2.Области.П000020010003.Значение;
		П000020010004 = ПолеТаблДокументаРаздел1_2.Области.П000020010004.Значение;
		
		П000020011003 = ПолеТаблДокументаРаздел1_2.Области.П000020011003.Значение;
		П000020011004 = ПолеТаблДокументаРаздел1_2.Области.П000020011004.Значение;
		П000020011005 = ПолеТаблДокументаРаздел1_2.Области.П000020011005.Значение;
		
		//Расчеты
		
		П000020007003 = П000020008003 + П000020009003;
		П000020007004 = П000020008004 + П000020009004;
		П000020007005 = П000020008005 + П000020009005;
		
		П000020010005 = П000020010004;
		
		П000020012004 = П000020001004 + П000020003004 + П000020005004
					  + П000020006004 + П000020007004 + П000020010004
					  + П000020011004;
					  
		П000020012005 = П000020001005 + П000020003005 + П000020007005 
					  + П000020010005 + П000020011005;
					  
		//Запишем, что посчитали
		
		ПолеТаблДокументаРаздел1_2.Области.П000020007003.Значение = П000020007003;
		ПолеТаблДокументаРаздел1_2.Области.П000020007004.Значение = П000020007004;
		ПолеТаблДокументаРаздел1_2.Области.П000020007005.Значение = П000020007005;
		
		ПолеТаблДокументаРаздел1_2.Области.П000020010005.Значение = П000020010005;
		
		ПолеТаблДокументаРаздел1_2.Области.П000020012004.Значение = П000020012004;
		ПолеТаблДокументаРаздел1_2.Области.П000020012005.Значение = П000020012005;

	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_3" Тогда
		
		//Сбор данных
		
		П000030001003 = ПолеТаблДокументаРаздел1_3.Области.П000030001003.Значение;
		П000030001004 = ПолеТаблДокументаРаздел1_3.Области.П000030001004.Значение;
		П000030001005 = ПолеТаблДокументаРаздел1_3.Области.П000030001005.Значение;
		П000030001006 = ПолеТаблДокументаРаздел1_3.Области.П000030001006.Значение;
		
		П000030002003 = ПолеТаблДокументаРаздел1_3.Области.П000030002003.Значение;
		П000030002004 = ПолеТаблДокументаРаздел1_3.Области.П000030002004.Значение;
		П000030002005 = ПолеТаблДокументаРаздел1_3.Области.П000030002005.Значение;
		П000030002006 = ПолеТаблДокументаРаздел1_3.Области.П000030002006.Значение;
		
		П000030003003 = ПолеТаблДокументаРаздел1_3.Области.П000030003003.Значение;
		П000030003004 = ПолеТаблДокументаРаздел1_3.Области.П000030003004.Значение;
		П000030003005 = ПолеТаблДокументаРаздел1_3.Области.П000030003005.Значение;
		П000030003006 = ПолеТаблДокументаРаздел1_3.Области.П000030003006.Значение;
		
		//Расчеты
		
		П000030004003 = П000030001003 - П000030002003 - П000030003003;
		П000030004004 = П000030001004 - П000030002004 - П000030003004;
		П000030004005 = П000030001005 - П000030002005 - П000030003005;
		П000030004006 = П000030001006 - П000030002006 - П000030003006;
		
		//Запишем, что посчитали
		
		ПолеТаблДокументаРаздел1_3.Области.П000030004003.Значение = П000030004003;
		ПолеТаблДокументаРаздел1_3.Области.П000030004004.Значение = П000030004004;
		ПолеТаблДокументаРаздел1_3.Области.П000030004005.Значение = П000030004005;
		ПолеТаблДокументаРаздел1_3.Области.П000030004006.Значение = П000030004006;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_31" Тогда
		
		ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы1);
		// Раздел 3.1
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы1, ТаблицаБлока);
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		
		Для каждого Зап Из ТаблицаБлока Цикл
			Колонка5 = Колонка5 + Зап.П000310001005;
			Колонка6 = Колонка6 + Зап.П000310001006;
			Колонка7 = Колонка7 + Зап.П000310001007;
			Колонка8 = Колонка8 + Зап.П000310001008;
		КонецЦикла;
		
		//Запишем, что посчитали
		
		ПолеТаблДокументаРаздел1_31.Области.П000310002005.Значение = Колонка5;
		ПолеТаблДокументаРаздел1_31.Области.П000310002006.Значение = Колонка6;
		ПолеТаблДокументаРаздел1_31.Области.П000310002007.Значение = Колонка7;
		ПолеТаблДокументаРаздел1_31.Области.П000310002008.Значение = Колонка8;
		
		//перенос итоговых данных из таблицы 3.1 в таблицу 3
		ПолеТаблДокументаРаздел1_3.Области.П000030005003.Значение = Колонка5;
		ПолеТаблДокументаРаздел1_3.Области.П000030005004.Значение = Колонка6;
		ПолеТаблДокументаРаздел1_3.Области.П000030005005.Значение = Колонка7;
		ПолеТаблДокументаРаздел1_3.Области.П000030005006.Значение = Колонка8;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_4" Тогда
		
		РасчетРаздел1_4();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_41" Тогда
		
		РасчетРаздел1_41();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_42" Тогда
		
		РасчетРаздел1_42();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_43" Тогда
		
		РасчетРаздел1_43();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_44" Тогда
		
		РасчетРаздел1_44();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_5" Тогда
		//Сбор данных
		
		П000050001006 = ПолеТаблДокументаРаздел1_5.Области.П000050001006.Значение;
		П000050002006 = ПолеТаблДокументаРаздел1_5.Области.П000050002006.Значение;
		П000050003006 = ПолеТаблДокументаРаздел1_5.Области.П000050003006.Значение;
		П000050004006 = ПолеТаблДокументаРаздел1_5.Области.П000050004006.Значение;
		П000050005006 = ПолеТаблДокументаРаздел1_5.Области.П000050005006.Значение;
		П000050006006 = ПолеТаблДокументаРаздел1_5.Области.П000050006006.Значение;
		
		П000050001007 = ПолеТаблДокументаРаздел1_5.Области.П000050001007.Значение;
		П000050002007 = ПолеТаблДокументаРаздел1_5.Области.П000050002007.Значение;
		П000050004007 = ПолеТаблДокументаРаздел1_5.Области.П000050004007.Значение;
		П000050005007 = ПолеТаблДокументаРаздел1_5.Области.П000050005007.Значение;
		П000050006007 = ПолеТаблДокументаРаздел1_5.Области.П000050006007.Значение;
		
		П000050001008 = ПолеТаблДокументаРаздел1_5.Области.П000050001008.Значение;
		П000050002008 = ПолеТаблДокументаРаздел1_5.Области.П000050002008.Значение;
		П000050004008 = ПолеТаблДокументаРаздел1_5.Области.П000050004008.Значение;
		П000050005008 = ПолеТаблДокументаРаздел1_5.Области.П000050005008.Значение;
		П000050006008 = ПолеТаблДокументаРаздел1_5.Области.П000050006008.Значение;
		
		П000050001009 = ПолеТаблДокументаРаздел1_5.Области.П000050001009.Значение;
		П000050002009 = ПолеТаблДокументаРаздел1_5.Области.П000050002009.Значение;
		П000050003009 = ПолеТаблДокументаРаздел1_5.Области.П000050003009.Значение;
		П000050004009 = ПолеТаблДокументаРаздел1_5.Области.П000050004009.Значение;
		П000050005009 = ПолеТаблДокументаРаздел1_5.Области.П000050005009.Значение;
		П000050006009 = ПолеТаблДокументаРаздел1_5.Области.П000050006009.Значение;
		
		П000050001010 = ПолеТаблДокументаРаздел1_5.Области.П000050001010.Значение;
		П000050002010 = ПолеТаблДокументаРаздел1_5.Области.П000050002010.Значение;
		П000050004010 = ПолеТаблДокументаРаздел1_5.Области.П000050004010.Значение;
		П000050005010 = ПолеТаблДокументаРаздел1_5.Области.П000050005010.Значение;
		П000050006010 = ПолеТаблДокументаРаздел1_5.Области.П000050006010.Значение;
		
		П000050001011 = ПолеТаблДокументаРаздел1_5.Области.П000050001011.Значение;
		П000050002011 = ПолеТаблДокументаРаздел1_5.Области.П000050002011.Значение;
		П000050004011 = ПолеТаблДокументаРаздел1_5.Области.П000050004011.Значение;
		П000050005011 = ПолеТаблДокументаРаздел1_5.Области.П000050005011.Значение;
		П000050006011 = ПолеТаблДокументаРаздел1_5.Области.П000050006011.Значение;
		
		П000050001012 = ПолеТаблДокументаРаздел1_5.Области.П000050001012.Значение;
		П000050001013 = ПолеТаблДокументаРаздел1_5.Области.П000050001013.Значение;
		П000050001014 = ПолеТаблДокументаРаздел1_5.Области.П000050001014.Значение;
		
		П000050001015 = ПолеТаблДокументаРаздел1_5.Области.П000050001015.Значение;
		П000050002015 = ПолеТаблДокументаРаздел1_5.Области.П000050002015.Значение;
		П000050003015 = ПолеТаблДокументаРаздел1_5.Области.П000050003015.Значение;
		П000050004015 = ПолеТаблДокументаРаздел1_5.Области.П000050004015.Значение;
		П000050005015 = ПолеТаблДокументаРаздел1_5.Области.П000050005015.Значение;
		П000050006015 = ПолеТаблДокументаРаздел1_5.Области.П000050006015.Значение;
		
		П000050001016 = ПолеТаблДокументаРаздел1_5.Области.П000050001016.Значение;
		П000050002016 = ПолеТаблДокументаРаздел1_5.Области.П000050002016.Значение;
		П000050004016 = ПолеТаблДокументаРаздел1_5.Области.П000050004016.Значение;
		П000050005016 = ПолеТаблДокументаРаздел1_5.Области.П000050005016.Значение;
		П000050006016 = ПолеТаблДокументаРаздел1_5.Области.П000050006016.Значение;
		
		П000050001017 = ПолеТаблДокументаРаздел1_5.Области.П000050001017.Значение;
		П000050002017 = ПолеТаблДокументаРаздел1_5.Области.П000050002017.Значение;
		П000050004017 = ПолеТаблДокументаРаздел1_5.Области.П000050004017.Значение;
		П000050005017 = ПолеТаблДокументаРаздел1_5.Области.П000050005017.Значение;
		П000050006017 = ПолеТаблДокументаРаздел1_5.Области.П000050006017.Значение;
		
		П000050001018 = ПолеТаблДокументаРаздел1_5.Области.П000050001018.Значение;
		П000050002018 = ПолеТаблДокументаРаздел1_5.Области.П000050002018.Значение;
		П000050001019 = ПолеТаблДокументаРаздел1_5.Области.П000050001019.Значение;
		П000050002019 = ПолеТаблДокументаРаздел1_5.Области.П000050002019.Значение;
		П000050001020 = ПолеТаблДокументаРаздел1_5.Области.П000050001020.Значение;
		П000050002020 = ПолеТаблДокументаРаздел1_5.Области.П000050002020.Значение;
		
		//Расчеты
		
		П000050003007 = П000050004007 + П000050005007;
		П000050003008 = П000050004008 + П000050005008;
		П000050003010 = П000050004010 + П000050005010;
		П000050003011 = П000050004011 + П000050005011;
		П000050003016 = П000050004016 + П000050005016;
		П000050003017 = П000050004017 + П000050005017;
		
		П000050001003 = П000050001006 + П000050001009 + П000050001012 + П000050001015 + П000050001018;
		П000050002003 = П000050002006 + П000050002009 + П000050002015 + П000050002018;
		П000050003003 = П000050003006 + П000050003009 + П000050003015;
		П000050004003 = П000050004006 + П000050004009 + П000050004015;
		П000050005003 = П000050005006 + П000050005009 + П000050005015;
		П000050006003 = П000050006006 + П000050006009 + П000050006015;
		
		П000050001004 = П000050001007 + П000050001010 + П000050001013 + П000050001016 + П000050001019;
		П000050002004 = П000050002007 + П000050002010 + П000050002016 + П000050002019;
		П000050003004 = П000050003007 + П000050003010 + П000050003016;
		П000050004004 = П000050004007 + П000050004010 + П000050004016;
		П000050005004 = П000050005007 + П000050005010 + П000050005016;
		П000050006004 = П000050006007 + П000050006010 + П000050006016;
		
		П000050001005 = П000050001008 + П000050001011 + П000050001014 + П000050001017 + П000050001020;
		П000050002005 = П000050002008 + П000050002011 + П000050002017 + П000050002020;
		П000050003005 = П000050003008 + П000050003011 + П000050003017;
		П000050004005 = П000050004008 + П000050004011 + П000050004017;
		П000050005005 = П000050005008 + П000050005011 + П000050005017;
		П000050006005 = П000050006008 + П000050006011 + П000050006017;
		
		П000050007003 = П000050001003 + П000050002003 + П000050003003 + П000050006003;
		П000050007005 = П000050001005 + П000050002005 + П000050003005 + П000050006005;
		П000050007006 = П000050001006 + П000050002006 + П000050003006 + П000050006006;
		П000050007008 = П000050001008 + П000050002008 + П000050003008 + П000050006008;
		П000050007009 = П000050001009 + П000050002009 + П000050003009 + П000050006009;
		П000050007011 = П000050001011 + П000050002011 + П000050003011 + П000050006011;
		П000050007012 = П000050001012;
		П000050007014 = П000050001014;
		П000050007015 = П000050001015 + П000050002015 + П000050003015 + П000050006015;
		П000050007017 = П000050001017 + П000050002017 + П000050003017 + П000050006017;
		П000050007018 = П000050001018 + П000050002018;
		П000050007020 = П000050001020 + П000050002020;
		
		//Запишем, что посчитали
		
		ПолеТаблДокументаРаздел1_5.Области.П000050001003.Значение = П000050001003;
		ПолеТаблДокументаРаздел1_5.Области.П000050002003.Значение = П000050002003;
		ПолеТаблДокументаРаздел1_5.Области.П000050003003.Значение = П000050003003;
		ПолеТаблДокументаРаздел1_5.Области.П000050004003.Значение = П000050004003;
		ПолеТаблДокументаРаздел1_5.Области.П000050005003.Значение = П000050005003;
		ПолеТаблДокументаРаздел1_5.Области.П000050006003.Значение = П000050006003;
		
		ПолеТаблДокументаРаздел1_5.Области.П000050001004.Значение = П000050001004;
		ПолеТаблДокументаРаздел1_5.Области.П000050002004.Значение = П000050002004;
		ПолеТаблДокументаРаздел1_5.Области.П000050003004.Значение = П000050003004;
		ПолеТаблДокументаРаздел1_5.Области.П000050004004.Значение = П000050004004;
		ПолеТаблДокументаРаздел1_5.Области.П000050005004.Значение = П000050005004;
		ПолеТаблДокументаРаздел1_5.Области.П000050006004.Значение = П000050006004;
		
		ПолеТаблДокументаРаздел1_5.Области.П000050001005.Значение = П000050001005;
		ПолеТаблДокументаРаздел1_5.Области.П000050002005.Значение = П000050002005;
		ПолеТаблДокументаРаздел1_5.Области.П000050003005.Значение = П000050003005;
		ПолеТаблДокументаРаздел1_5.Области.П000050004005.Значение = П000050004005;
		ПолеТаблДокументаРаздел1_5.Области.П000050005005.Значение = П000050005005;
		ПолеТаблДокументаРаздел1_5.Области.П000050006005.Значение = П000050006005;
		
		ПолеТаблДокументаРаздел1_5.Области.П000050003007.Значение = П000050003007;
		ПолеТаблДокументаРаздел1_5.Области.П000050003008.Значение = П000050003008;
		ПолеТаблДокументаРаздел1_5.Области.П000050003010.Значение = П000050003010;
		ПолеТаблДокументаРаздел1_5.Области.П000050003011.Значение = П000050003011;
		ПолеТаблДокументаРаздел1_5.Области.П000050003016.Значение = П000050003016;
		ПолеТаблДокументаРаздел1_5.Области.П000050003017.Значение = П000050003017;
		
		ПолеТаблДокументаРаздел1_5.Области.П000050007003.Значение = П000050007003;
		ПолеТаблДокументаРаздел1_5.Области.П000050007005.Значение = П000050007005;
		ПолеТаблДокументаРаздел1_5.Области.П000050007006.Значение = П000050007006;
		ПолеТаблДокументаРаздел1_5.Области.П000050007008.Значение = П000050007008;
		ПолеТаблДокументаРаздел1_5.Области.П000050007009.Значение = П000050007009;
		ПолеТаблДокументаРаздел1_5.Области.П000050007011.Значение = П000050007011;
		ПолеТаблДокументаРаздел1_5.Области.П000050007012.Значение = П000050007012;
		ПолеТаблДокументаРаздел1_5.Области.П000050007014.Значение = П000050007014;
		ПолеТаблДокументаРаздел1_5.Области.П000050007015.Значение = П000050007015;
		ПолеТаблДокументаРаздел1_5.Области.П000050007017.Значение = П000050007017;
		ПолеТаблДокументаРаздел1_5.Области.П000050007018.Значение = П000050007018;
		ПолеТаблДокументаРаздел1_5.Области.П000050007020.Значение = П000050007020;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_6_7" Тогда
		//ТАБЛИЦА6
		//Сбор данных
		
		П000060001303 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001303.Значение;
		П000060001304 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001304.Значение;
		П000060001305 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001305.Значение;
		
		П000060001403 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001403.Значение;
		П000060001404 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001404.Значение;
		П000060001405 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001405.Значение;
		
		П000060001503 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001503.Значение;
		П000060001504 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001504.Значение;
		П000060001505 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001505.Значение;
		
		П000060001006 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001006.Значение;
		П000060001007 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001007.Значение;
		П000060001009 = ПолеТаблДокументаРаздел2_6_7.Области.П000060001009.Значение;
		
		//Расчеты
		
		П000060001203 = П000060001303 + П000060001403 + П000060001503;
		П000060001204 = П000060001304 + П000060001404 + П000060001504;
		П000060001205 = П000060001305 + П000060001405 + П000060001505;
		
		П000060001010 = П000060001006 * (1 - П000060001007 / 100 + П000060001009 / 100);
		
		//Запишем, что посчитали
		
		ПолеТаблДокументаРаздел2_6_7.Области.П000060001203.Значение = П000060001203;
		ПолеТаблДокументаРаздел2_6_7.Области.П000060001204.Значение = П000060001204;
		ПолеТаблДокументаРаздел2_6_7.Области.П000060001205.Значение = П000060001205;
		
		ПолеТаблДокументаРаздел2_6_7.Области.П000060001010.Значение = П000060001010;
		
		//ТАБЛИЦА 7
		//Сбор данных
		
		П000070002101 = ПолеТаблДокументаРаздел2_6_7.Области.П000070002101.Значение;
		П000070002201 = ПолеТаблДокументаРаздел2_6_7.Области.П000070002201.Значение;
		П000070002301 = ПолеТаблДокументаРаздел2_6_7.Области.П000070002301.Значение;
		
		П000070011101 = ПолеТаблДокументаРаздел2_6_7.Области.П000070011101.Значение;
		П000070011201 = ПолеТаблДокументаРаздел2_6_7.Области.П000070011201.Значение;
		П000070011301 = ПолеТаблДокументаРаздел2_6_7.Области.П000070011301.Значение;
		
		П000070012101 = ПолеТаблДокументаРаздел2_6_7.Области.П000070012101.Значение;
		П000070012201 = ПолеТаблДокументаРаздел2_6_7.Области.П000070012201.Значение;
		П000070012301 = ПолеТаблДокументаРаздел2_6_7.Области.П000070012301.Значение;
		
		П000070002001 = ПолеТаблДокументаРаздел2_6_7.Области.П000070002001.Значение;
		П000070011001 = ПолеТаблДокументаРаздел2_6_7.Области.П000070011001.Значение;
		П000070012001 = ПолеТаблДокументаРаздел2_6_7.Области.П000070012001.Значение;
		
		П000070001003 = ПолеТаблДокументаРаздел2_6_7.Области.П000070001003.Значение;
		П000070003003 = ПолеТаблДокументаРаздел2_6_7.Области.П000070003003.Значение;
		П000070004003 = ПолеТаблДокументаРаздел2_6_7.Области.П000070004003.Значение;
		П000070005003 = ПолеТаблДокументаРаздел2_6_7.Области.П000070005003.Значение;
		П000070006003 = ПолеТаблДокументаРаздел2_6_7.Области.П000070006003.Значение;
		П000070007003 = ПолеТаблДокументаРаздел2_6_7.Области.П000070007003.Значение;
		
		П000070010003 = ПолеТаблДокументаРаздел2_6_7.Области.П000070010003.Значение;
		П000070013003 = ПолеТаблДокументаРаздел2_6_7.Области.П000070013003.Значение;
		
		//Расчеты
		
		П000070002401 = П000070002101 + П000070002201 + П000070002301;
		П000070011401 = П000070011101 + П000070011201 + П000070011301;
		П000070012401 = П000070012101 + П000070012201 + П000070012301;
		
		П000070002003 = П000070002001 + П000070002401;
		П000070011003 = П000070011001 + П000070011401;
		П000070012003 = П000070012001 + П000070012401;
		
		П000070008003 = П000070001003 + П000070002003 + П000070003003
					  + П000070004003 + П000070005003 + П000070006003
					  + П000070007003;
		
		П000070014003 = П000070010003 + П000070011003 + П000070012003 + П000070013003;
		
		
		П000070009003 = ?(П000070014003 > П000070008003, П000070014003 - П000070008003, 0);
		П000070015003 = ?(П000070008003 > П000070014003, П000070008003 - П000070014003, 0);
		
		//Запишем, что посчитали
		
		ПолеТаблДокументаРаздел2_6_7.Области.П000070002401.Значение = П000070002401;
		ПолеТаблДокументаРаздел2_6_7.Области.П000070011401.Значение = П000070011401;
		ПолеТаблДокументаРаздел2_6_7.Области.П000070012401.Значение = П000070012401;
		ПолеТаблДокументаРаздел2_6_7.Области.П000070002003.Значение = П000070002003;
		ПолеТаблДокументаРаздел2_6_7.Области.П000070011003.Значение = П000070011003;
		ПолеТаблДокументаРаздел2_6_7.Области.П000070012003.Значение = П000070012003;
		ПолеТаблДокументаРаздел2_6_7.Области.П000070008003.Значение = П000070008003;
		ПолеТаблДокументаРаздел2_6_7.Области.П000070014003.Значение = П000070014003;
		ПолеТаблДокументаРаздел2_6_7.Области.П000070009003.Значение = П000070009003;
		ПолеТаблДокументаРаздел2_6_7.Области.П000070015003.Значение = П000070015003;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_8_9" Тогда
		
		//Сбор данных
		
		П000080001004 = ПолеТаблДокументаРаздел2_8_9.Области.П000080001004.Значение;
		П000080004004 = ПолеТаблДокументаРаздел2_8_9.Области.П000080004004.Значение;
		П000080007004 = ПолеТаблДокументаРаздел2_8_9.Области.П000080007004.Значение;
		П000080009004 = ПолеТаблДокументаРаздел2_8_9.Области.П000080009004.Значение;
		
		П000090001003 = ПолеТаблДокументаРаздел2_8_9.Области.П000090001003.Значение;
		П000090003003 = ПолеТаблДокументаРаздел2_8_9.Области.П000090003003.Значение;
		//Расчеты
		
		П000080010004 = П000080001004 + П000080004004 + П000080007004 + П000080009004;
		П000090004003 = П000090001003 + П000090003003;
		
		//Запишем, что посчитали
		
		ПолеТаблДокументаРаздел2_8_9.Области.П000080010004.Значение = П000080010004;
		ПолеТаблДокументаРаздел2_8_9.Области.П000090004003.Значение = П000090004003;

	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		// ОБЩИЙ РАСЧЕТ ПОКАЗАТЕЛЕЙ ВСЕХ РАЗДЕЛОВ ДЕКЛАРАЦИИ

		// Используется, например, в случае изменения точности или единицы измерения
		// (так как разделы взаимосвязаны, порядок пересчета не важен).
		Расчет("Раздел1_1");
		Расчет("Раздел1_2");
		Расчет("Раздел1_31"); //данные из этого раздела переносятся в раздел 1.3
		Расчет("Раздел1_3");
		Расчет("Раздел1_4");
		Расчет("Раздел1_41");
		Расчет("Раздел1_42");
		Расчет("Раздел1_43");
		Расчет("Раздел1_5");
		Расчет("Раздел2_6_7");
		Расчет("Раздел2_8_9");
		
	КонецЕсли;

КонецПроцедуры // Расчет()

Процедура РасчетРаздел1_4()
	
	П000040000103 = ПолеТаблДокументаРаздел1_4.Области.П000040000103.Значение;
	П000040000203 = ПолеТаблДокументаРаздел1_4.Области.П000040000203.Значение;
	
	П000040000104 = ПолеТаблДокументаРаздел1_4.Области.П000040000104.Значение;
	П000040000204 = ПолеТаблДокументаРаздел1_4.Области.П000040000204.Значение;
	
	П000040000105 = ПолеТаблДокументаРаздел1_4.Области.П000040000105.Значение;
	П000040000205 = ПолеТаблДокументаРаздел1_4.Области.П000040000205.Значение;
	
	П000040000106 = ПолеТаблДокументаРаздел1_4.Области.П000040000106.Значение;
	П000040000206 = ПолеТаблДокументаРаздел1_4.Области.П000040000206.Значение;
	
	П000040000303  = ? (П000040000103 <> 0, (П000040000203 / П000040000103) * 100, 0);
	П000040000304  = ? (П000040000104 <> 0, (П000040000204 / П000040000104) * 100, 0);
	П000040000305  = ? (П000040000105 <> 0, (П000040000205 / П000040000105) * 100, 0);
	П000040000306  = ? (П000040000106 <> 0, (П000040000206 / П000040000106) * 100, 0);
	
	ПолеТаблДокументаРаздел1_4.Области.П000040000303.Значение = П000040000303;
	ПолеТаблДокументаРаздел1_4.Области.П000040000304.Значение = П000040000304;
	ПолеТаблДокументаРаздел1_4.Области.П000040000305.Значение = П000040000305;
	ПолеТаблДокументаРаздел1_4.Области.П000040000306.Значение = П000040000306;
	
КонецПроцедуры

Процедура РасчетРаздел1_41()
	
	// Сбор данных.
	П000410000103 = ПолеТаблДокументаРаздел1_41.Области.П000410000103.Значение;
	П000410000203 = ПолеТаблДокументаРаздел1_41.Области.П000410000203.Значение;
	П000410000403 = ПолеТаблДокументаРаздел1_41.Области.П000410000403.Значение;
	П000410000503 = ПолеТаблДокументаРаздел1_41.Области.П000410000503.Значение;
	
	П000410000104 = ПолеТаблДокументаРаздел1_41.Области.П000410000104.Значение;
	П000410000204 = ПолеТаблДокументаРаздел1_41.Области.П000410000204.Значение;
	П000410000404 = ПолеТаблДокументаРаздел1_41.Области.П000410000404.Значение;
	П000410000504 = ПолеТаблДокументаРаздел1_41.Области.П000410000504.Значение;
	
	П000410000105 = ПолеТаблДокументаРаздел1_41.Области.П000410000105.Значение;
	П000410000205 = ПолеТаблДокументаРаздел1_41.Области.П000410000205.Значение;
	П000410000405 = ПолеТаблДокументаРаздел1_41.Области.П000410000405.Значение;
	П000410000505 = ПолеТаблДокументаРаздел1_41.Области.П000410000505.Значение;
	
	П000410000106 = ПолеТаблДокументаРаздел1_41.Области.П000410000106.Значение;
	П000410000206 = ПолеТаблДокументаРаздел1_41.Области.П000410000206.Значение;
	П000410000406 = ПолеТаблДокументаРаздел1_41.Области.П000410000406.Значение;
	П000410000506 = ПолеТаблДокументаРаздел1_41.Области.П000410000506.Значение;
	
	// Расчеты.
	
	П000410000303  = ? (П000410000103 <> 0, (П000410000203 / П000410000103) * 100, 0);
	П000410000304  = ? (П000410000104 <> 0, (П000410000204 / П000410000104) * 100, 0);
	П000410000305  = ? (П000410000105 <> 0, (П000410000205 / П000410000105) * 100, 0);
	П000410000306  = ? (П000410000106 <> 0, (П000410000206 / П000410000106) * 100, 0);
	
	П000410000603  = ? (П000410000403 <> 0, (П000410000503 / П000410000403) * 100, 0);
	П000410000604  = ? (П000410000404 <> 0, (П000410000504 / П000410000404) * 100, 0);
	П000410000605  = ? (П000410000405 <> 0, (П000410000505 / П000410000405) * 100, 0);
	П000410000606  = ? (П000410000406 <> 0, (П000410000506 / П000410000406) * 100, 0);
	
	// Запишем, что посчитали.
	ПолеТаблДокументаРаздел1_41.Области.П000410000303.Значение = П000410000303;
	ПолеТаблДокументаРаздел1_41.Области.П000410000304.Значение = П000410000304;
	ПолеТаблДокументаРаздел1_41.Области.П000410000305.Значение = П000410000305;
	ПолеТаблДокументаРаздел1_41.Области.П000410000306.Значение = П000410000306;
	ПолеТаблДокументаРаздел1_41.Области.П000410000603.Значение = П000410000603;
	ПолеТаблДокументаРаздел1_41.Области.П000410000604.Значение = П000410000604;
	ПолеТаблДокументаРаздел1_41.Области.П000410000605.Значение = П000410000605;
	ПолеТаблДокументаРаздел1_41.Области.П000410000606.Значение = П000410000606; 
	
КонецПроцедуры

Процедура РасчетРаздел1_42()
	
	П000420000203 = ПолеТаблДокументаРаздел1_42.Области.П000420000203.Значение;
	П000420000303 = ПолеТаблДокументаРаздел1_42.Области.П000420000303.Значение;
	П000420000204 = ПолеТаблДокументаРаздел1_42.Области.П000420000204.Значение;
	П000420000304 = ПолеТаблДокументаРаздел1_42.Области.П000420000304.Значение;
	
	
	П000420000403 = ?(П000420000203 <> 0, (П000420000303 / П000420000203) * 100, 0);
	П000420000404 = ?(П000420000204 <> 0, (П000420000304 / П000420000204) * 100, 0);
	
	ПолеТаблДокументаРаздел1_42.Области.П000420000403.Значение = П000420000403;
	ПолеТаблДокументаРаздел1_42.Области.П000420000404.Значение = П000420000404;
	
КонецПроцедуры

Процедура РасчетРаздел1_43()
	
	П000430000103 = ПолеТаблДокументаРаздел1_43.Области.П000430000103.Значение;
	П000430000203 = ПолеТаблДокументаРаздел1_43.Области.П000430000203.Значение;
	
	
	П000430000303 = ?(П000430000103 <> 0, (П000430000203 / П000430000103) * 100, 0);
	
	ПолеТаблДокументаРаздел1_43.Области.П000430000303.Значение = П000430000303;
	
КонецПроцедуры

Процедура РасчетРаздел1_44()
	
	П000440000103 = ПолеТаблДокументаРаздел1_44.Области.П000440000103.Значение;
	П000440000203 = ПолеТаблДокументаРаздел1_44.Области.П000440000203.Значение;
	П000440000303 = ПолеТаблДокументаРаздел1_44.Области.П000440000303.Значение;
	П000440000403 = ПолеТаблДокументаРаздел1_44.Области.П000440000403.Значение;
	
	П000440000104 = ПолеТаблДокументаРаздел1_44.Области.П000440000104.Значение;
	П000440000204 = ПолеТаблДокументаРаздел1_44.Области.П000440000204.Значение;
	П000440000304 = ПолеТаблДокументаРаздел1_44.Области.П000440000304.Значение;
	П000440000404 = ПолеТаблДокументаРаздел1_44.Области.П000440000404.Значение;
	
	П000440000503 = ?(П000440000103 <> 0, ((П000440000203 + П000440000303 + П000440000403) / П000440000103) * 100, 0);
	П000440000504 = ?(П000440000104 <> 0, ((П000440000204 + П000440000304 + П000440000404) / П000440000104) * 100, 0);
	
	ПолеТаблДокументаРаздел1_44.Области.П000440000503.Значение = П000440000503;
	ПолеТаблДокументаРаздел1_44.Области.П000440000504.Значение = П000440000504;
	
КонецПроцедуры

Процедура ОтобразитьНомерКорректировки()
	
	НомерКорр = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	НомерКорректировкиСтрока = РегламентированнаяОтчетность.ДополнитьСтроку(НомерКорректировкиСтрока,3,"0",0);	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "НомерКорректировки", 3, НомерКорректировкиСтрока);
Конецпроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2012Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрПодп", 1, , "Выбор подписанта", КоллекцияСписковВыбора["Подписант"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрекращениеДеятельности", 1, , "Прекращение деятельности", КоллекцияСписковВыбора["ПрекращениеДеятельности"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ШифрСтрах1Часть_", 3, , "Выбор шифра", КоллекцияСписковВыбора["ШифрыСтрахователя"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ШифрСтрах2Часть_", 2, , "Выбор расширения шифра", КоллекцияСписковВыбора["РасширенияШифра"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ШифрСтрах3Часть_", 2, , "Выбор дополнительного шифра", КоллекцияСписковВыбора["ДополнительныеШифры"]);
КонецПроцедуры

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Выполняет вывод полей запроса в табличный документ
// ЗавершитьИмпортXMLфайлаВОтчет
//
Процедура ЗавершитьИмпортXMLфайлаВОтчет(СтруктураДанныхОтчетаXMLКонтейнер)
	Если СтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Перебор по страницам.
	Инд = 0;
	Для каждого Экз Из СтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл
	
		ИмяРаздела = ОпределитьИмяРазделаПриИмпорте(Экз.Данные[0].СтруктураДанных);
		Если ИмяРаздела = Неопределено Тогда
			// Не удалось по показателю определить имя раздела декларации.
			Продолжить;
		КонецЕсли;
		
		МногостраничностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "МногостраничностьВРазделе", Ложь);
		
		Если МногостраничностьВРазделе Тогда
			Если мСтруктураМногостраничныхРазделов[ИмяРаздела].Количество() <> Экз.Данные.Количество() Тогда
				// Вставим нужные экземпляры.
				Для Инд1 = 1 По Экз.Данные.Количество() - 1 Цикл
					ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяРаздела);
					РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяРаздела);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Экз2 Из Экз.Данные Цикл
			Если МногостраничностьВРазделе Тогда
				ПоказатьСтраницуМногостраничногоРаздела(Инд, ИмяРаздела, Истина);
				Инд = Инд + 1;
			КонецЕсли;
			
			Для каждого Экз3 Из Экз2.СтруктураДанных Цикл
				Показатель = Экз3.Ключ;
				Значение = СокрЛП(Экз3.Значение);
				
				НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(Показатель, "КодПоказателяПоСоставу");
				
				Если НайденнаяСтрока = Неопределено Тогда
					Продолжить;
				Иначе
					ТипДанных = НайденнаяСтрока.ТипДанныхПоказателя;
				КонецЕсли;
				
				Если ТипДанных = "Е" Или ТипДанных = "E" Или ТипДанных = "Ч" Тогда
					Значение = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение), Число(Значение), 0);
				ИначеЕсли ТипДанных = "Д" Тогда
					Если РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
						Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
					Иначе
						Год = Прав(Значение, 4);
						Мес = Сред(Значение, 4, 2);
						День = Лев(Значение, 2);
						Значение = Год + Мес + День;
						Значение = ?(РегламентированнаяОтчетность.роЯвляетсяДатой(Значение), Дата(Значение), ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
					КонецЕсли;
				КонецЕсли;
				РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Показатель, Значение);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗавершитьИмпортXMLфайлаВОтчет

// ОпределитьИмяРазделаПриИмпорте
//
Функция ОпределитьИмяРазделаПриИмпорте(СтруктураДанных)
	Перем Результат;

	Для каждого Зап Из СтруктураДанных Цикл
		ИмяСтраницы = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, Зап.Ключ);
		Если ИмяСтраницы <> Неопределено Тогда
			Результат = ИмяСтраницы;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ОпределитьИмяРазделаПриИмпорте

Процедура ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, ИД, МинимальноеКоличествоСтрок, ТекущееКоличествоСтрок)
	
	НовСтр = СвойстваМногострочныхЧастей.Добавить();
	НовСтр.ИД = ИД;
	НовСтр.МинимальноеКоличествоСтрок = МинимальноеКоличествоСтрок;
	НовСтр.ТекущееКоличествоСтрок = ТекущееКоличествоСтрок;
	
КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто(ВсеДанные = Истина) Экспорт 
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ФлажокВнешДанные И НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// запрашиваем подтверждение у пользователя и очищаем отчет
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;

	// формируем структуру с данными из внешнего файла, если установлен признак заполнения по внешним данным
	мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если ФлажокВнешДанные Тогда
		мСтруктураДанныхОтчетаXMLКонтейнер = РегламентированнаяОтчетность.ИмпортироватьДанныеКонтейнераXML(ЭтаФорма);
		Если мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
			Сообщить("Данные из XML файла не подходят для текущего отчета.", СтатусСообщения.Важное);
			Сообщить("Необходимо проверить период отчета и организацию (ИНН/КПП).", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	// если авторасчет не отключен, то заполним размер страхового тарифа
	Если Не ФлажокОтклАвтоРасчет Тогда
		ПолеТаблДокументаРаздел2_6_7.Области.П000060001006.Значение = ПолучитьРазмерСтраховогоТарифа();
	КонецЕсли;
	
	// формируем таблицу свойств многострочных частей отчета (необходима для заполнения)
	СвойстваМногострочныхЧастей = Новый ТаблицаЗначений;
	СвойстваМногострочныхЧастей.Колонки.Добавить("ИД");
	СвойстваМногострочныхЧастей.Колонки.Добавить("МинимальноеКоличествоСтрок");
	СвойстваМногострочныхЧастей.Колонки.Добавить("ТекущееКоличествоСтрок");
	ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, "П0003100010", 40, 0);

	// заполняем содержательную часть
	СчетчикиЛистовМногостраничныхРазделов = Новый Соответствие;
	Для Каждого Стр Из мСтруктураМногостраничныхРазделов Цикл
		СчетчикиЛистовМногостраничныхРазделов.Вставить(Стр.Ключ, 0);
	КонецЦикла;
	
	УзелПредупреждений = Неопределено;
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				Если СтрУровня1.Имя = "Предупреждения" Тогда
					УзелПредупреждений = СтрУровня1
				Иначе
					СчетчикЛистовРаздела = СчетчикиЛистовМногостраничныхРазделов[СтрУровня1.Имя];
					Если СчетчикЛистовРаздела = Неопределено Тогда // раздел не многостраничный
						Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
							СтрУровня2Имя = СтрУровня2.Имя;
							СвойстваМнЧ = СвойстваМногострочныхЧастей.Найти(СтрУровня2Имя, "ИД");
							Если СвойстваМнЧ <> Неопределено Тогда // это определение многострочного раздела
								Если СвойстваМнЧ.ТекущееКоличествоСтрок >= СвойстваМнЧ.МинимальноеКоличествоСтрок Тогда
									ВставитьДополнительнуюСтроку(СвойстваМнЧ.ИД);
								КонецЕсли;
								СвойстваМнЧ.ТекущееКоличествоСтрок = СвойстваМнЧ.ТекущееКоличествоСтрок + 1;
								НомерСтрокиСтр = Формат(СвойстваМнЧ.ТекущееКоличествоСтрок,"ЧГ=0");
								Для Каждого СтрУровня3 Из СтрУровня2.Строки Цикл
									УстановитьЗначениеПоказателя(СтрУровня3.Имя + "_" + НомерСтрокиСтр, СтрУровня3.Значение, СтрУровня1.Имя);
								КонецЦикла;
								ОбновитьСтруктуруМногострочногоРаздела(СвойстваМнЧ.ИД);
							Иначе // это показатель
								
								Если Найти(СтрУровня2Имя, "ЧислРаботников") > 0 
									ИЛИ Найти(СтрУровня2Имя, "ЧислЖенщин") > 0
									ИЛИ Найти(СтрУровня2Имя, "ЧислИнвалидов") > 0
									ИЛИ Найти(СтрУровня2Имя, "ЧислВред") > 0 Тогда
									
									ОбластиТитульногоЛиста = ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области;
									Если ОбластиТитульногоЛиста.Найти(СтрУровня2Имя) <> Неопределено Тогда
										ОбластиТитульногоЛиста[СтрУровня2Имя].Значение = СтрУровня2.Значение
									КонецЕсли;
									
								Иначе
									УстановитьЗначениеПоказателя(СтрУровня2Имя, СтрУровня2.Значение, СтрУровня1.Имя);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе // раздел многостраничный
						СчетчикиЛистовМногостраничныхРазделов.Вставить(СтрУровня1.Имя, СчетчикЛистовРаздела + 1);
						Если СчетчикЛистовРаздела > 0 Тогда // если это не первый лист раздела, то добавим еще один
							Расчет(СтрУровня1.Имя);
							ИзменитьТаблицуПараметровАвтозаполнения(1, СтрУровня1.Имя);
							РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, СтрУровня1.Имя);
							РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, СтрУровня1.Имя, Истина);
							УстановитьЦветФонаЯчейки(,,СтрУровня1.Имя);
						КонецЕсли;
						Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
							УстановитьЗначениеПоказателя(СтрУровня2.Имя, СтрУровня2.Значение);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем показатели в внешнего файла.
	ЗавершитьИмпортXMLФайлаВОтчет(мСтруктураДанныхОтчетаXMLКонтейнер);
	
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
	Если УзелПредупреждений <> Неопределено Тогда
		ТекстПредупреждения = "";
		Для Каждого Стр Из УзелПредупреждений.Строки Цикл
			Если Стр.Имя = "ИзлишнеВыведенРаздел3_1" И Стр.Значение Тогда
				Если Не ЗначениеЗаполнено(ТекстПредупреждения) Тогда
					ТекстПредупреждения = ТекстПредупреждения + Символы.ПС;
				КонецЕсли;
				ТекстПредупреждения = ТекстПредупреждения + "Для удовлетворения контрольных соотношений показателей логического контроля несмотря на применение пониженного тарифа были выведены данные в раздел 3.1. Соотношения: №9 раздела ""Информационные показатели титульного листа"" и №6 раздела ""Таблица 6. «База для начисления страховых взносов»""";
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			Предупреждение(ТекстПредупреждения)
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Страница Из мДеревоСтраницОтчета.Строки Цикл
		ВключитьПечатьЗаполненногоНеобязательногоРаздела(Страница.ИмяСтраницы);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАвто()

// УстановитьЗначениеПоказателя
// Процедура "прослойка". Она обрабатывает показатель с учетом источника данных ИБ и XML контейнера.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач Значение,  ИмяРаздела = Неопределено)
	// Вызываем процедуру, которая обработает показатель на предмет присутствия в XML контейнере.
	// Если в xml нет такого показателя, то установится из ИБ. Если есть, то из XML.
	// РегламентированнаяОтчетность.УстановитьПоказательСУчетомXML(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
	// Флаг, что заполнение отчета происходит с учетом данных XML файла.
	// ДанныеXMLПрисутствуют
	ДанныеXMLПрисутствуют = НЕ мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если НЕ ДанныеXMLПрисутствуют Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, Значение);
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = Неопределено Тогда
		// Определим раздел отчета.
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);
	Иначе
		ИмяСтраницыПанели = ИмяРаздела;
	КонецЕсли;
	
	// Есть ли данные по этому разделу в контейнере XML.
	//ДанныеРазделаXML = мСтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета.Найти(ИмяСтраницыПанели, "Раздел");
	// Просмотрим все разделы в xml документе. Т.к. в одном разделе Раздел2 может содержаться показатели раздела 2.1 и т.д.
	ДанныеРазделаXML = Неопределено;
	Для каждого РазделXML Из мСтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл
		Для каждого Экз Из РазделXML.Данные Цикл
			Если Экз.СтруктураДанных.Свойство(ИмяПоказателя) И НЕ ИмяРаздела = "Титульный" Тогда
				ДанныеРазделаXML = РазделXML;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеРазделаXML = Неопределено Тогда
		// В контейнере XML нет данных по заполняемому разделу, и соответвтвенно по показателю.
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, Значение);
		Возврат;
	КонецЕсли;
	
	// Получим таблицу раздела.
	ДанныеРазделаXMLДанные = ДанныеРазделаXML.Данные;
	
	Многостраничность = мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели);
	Если Многостраничность Тогда
		ИндАктивнойСтр = мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели].Найти(Истина, "АктивнаяСтраница");
		ИндАктивнойСтраницы = мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели].Индекс(ИндАктивнойСтр);
	КонецЕсли;
	
	Для каждого Экз Из ДанныеРазделаXMLДанные Цикл
		Если Многостраничность Тогда
			Если ИндАктивнойСтраницы <> ДанныеРазделаXMLДанные.Индекс(Экз) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
		Если Экз.СтруктураДанных.Свойство(ИмяПоказателя) Тогда
			// Показатель есть в XML контейнере.
			ЗначениеПоПоказателюИзКонтейнераXML = СокрЛП(Экз.СтруктураДанных[ИмяПоказателя]);
			
			// Если пустая строка, то считаем, что в контейнере xml показателя нет, равносильно или 0, если число или "" если дата.
			Если ПустаяСтрока(ЗначениеПоПоказателюИзКонтейнераXML) Тогда
				ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
			ИначеЕсли (СтрДлина(ЗначениеПоПоказателюИзКонтейнераXML) = 10) И (СтрЧислоВхождений(ЗначениеПоПоказателюИзКонтейнераXML, ".") = 2) Тогда
				Год = Прав(ЗначениеПоПоказателюИзКонтейнераXML, 4);
				Мес = Сред(ЗначениеПоПоказателюИзКонтейнераXML, 4, 2);
				День = Лев(ЗначениеПоПоказателюИзКонтейнераXML, 2);
				ЗначениеДата = Год + Мес + День;
				ЗначениеПоПоказателюИзКонтейнераXML = ?(РегламентированнаяОтчетность.роЯвляетсяДатой(ЗначениеДата), Дата(ЗначениеДата), Неопределено);
			ИначеЕсли РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоПоказателюИзКонтейнераXML) Тогда
				ЗначениеПоПоказателюИзКонтейнераXML = Число(ЗначениеПоПоказателюИзКонтейнераXML);
				Если ЗначениеПоПоказателюИзКонтейнераXML = 0 Тогда
					// В случае, если числовое значение равное 0 в xml, считаем, что показатель отсутствует.
					ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			// Удаляем ключ, чтобы при окончательном импорте xml данные снова не перетерлись на листе из источника xml.
			// Таким образом остаются только те показатели, которые из ИБ не заполняются или не заполнились.
			
			Экз.СтруктураДанных.Удалить(ИмяПоказателя);
			
		КонецЕсли;
		
		// Если показатель в XML отсутствует (Неопределено) или не заполнен, то всегда записываем в отчет переданное значение (из ИБ).
		Если ЗначениеПоПоказателюИзКонтейнераXML = Неопределено Тогда
			// В контейнере не оказалось необходимого показателя. Заполняем стандартной процедурой.
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, Значение);
			Прервать;
		КонецЕсли;
		
		// Если показатель есть в ИБ и в XML, тогда за основу берем показатель из XML контейнера.
		Если ЗначениеПоПоказателюИзКонтейнераXML <> Неопределено Тогда
			// Значение из XML всегда приоритетнее. Заполняем по данным XML файла.
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, ЗначениеПоПоказателюИзКонтейнераXML);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры // УстановитьЗначениеПоказателя

Процедура НачальнаяПодготовкаФормы() Экспорт 
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	мВПрограммеИзмененаОрганизация = Ложь;
	
	мДокументВосстановлен = Ложь;
	
	мАвтоВыборКодов = Ложь;
	
	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
	
	ПолеТаблДокументаТитульный  = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	ПолеТаблДокументаРаздел1_1  = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_1;
	ПолеТаблДокументаРаздел1_2  = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_2;
	ПолеТаблДокументаРаздел1_3  = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_3;
	ПолеТаблДокументаРаздел1_31 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_31;
	ПолеТаблДокументаРаздел1_4  = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_4;
	ПолеТаблДокументаРаздел1_41 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_41;
	ПолеТаблДокументаРаздел1_5  = ЭлементыФормы.ПолеТабличногоДокументаРаздел1_5;
	
	ПолеТаблДокументаРаздел2_6_7 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_6_7;
	ПолеТаблДокументаРаздел2_8_9 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2_8_9;
	
	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	
	Если мСохраненныйДок = Неопределено Тогда
		
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;

					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		// создаём структуру документа, подтверждающего полномочия представителя
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			мДелитель = 1;
			ТочностьЕдиницыИзмерения = 2;
			ОтобразитьНомерКорректировки();

			//РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда 
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();

	// В случае, если по F9 поменяли организацию при копировании, тогда в переменную
	// мВПрограммеИзмененаОрганизация будет записано значение Истина;
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда

		ЗаполнитьДатуВЯчейках();
		ЗаполнитьСведенияОбОрганизации();

	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим титульный лист т.к. он не входит в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);

	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИмя = Область.Имя;
	ОграничениеНаВвод = Новый Структура;
	ОграничениеНаВвод.Вставить("СтрокаТолькоИзЧисел", Истина);
	
	Если Найти(ОбластьИмя, "НомСтр") > 0 Тогда
		ИмяРаздела = Сред(Элемент.Имя, 24);
		НомерСтраницы = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, ИмяРаздела, "НомСтр"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, ИмяРаздела, "НомСтр", НомерСтраницы, 3, 0, Ложь, "Введите номер страницы", , , Неопределено, СтандартнаяОбработка, 3, , ОграничениеНаВвод);
		
	ИначеЕсли Найти(ОбластьИмя, "ДополнительныйКод") > 0 Тогда
		ОграничениеНаВвод.Вставить("КонтролируемаяДлинаСтроки", 10);
		ДополнительныйКод = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ДополнительныйКод_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "ДополнительныйКод_", ДополнительныйКод, 10, 0, Ложь, "Введите код", , , Неопределено, СтандартнаяОбработка, 10, , ОграничениеНаВвод);
		
		ДополнительныйКод = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ДополнительныйКод_"));
		
		Для Сч = СтрДлина(ДополнительныйКод) По 9 Цикл
			ДополнительныйКод = ДополнительныйКод + " ";
		КонецЦикла;
		
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, ДополнительныйКод, "ДополнительныйКод_", , , , Ложь);
		
	ИначеЕсли Найти(ОбластьИмя, "КодПодчиненности") > 0 Тогда
		ОграничениеНаВвод.Вставить("КонтролируемаяДлинаСтроки", 5);
		КодПодчиненности = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодПодчиненности_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "КодПодчиненности_", КодПодчиненности, 5, 0, Ложь, "Введите код", , , Неопределено, СтандартнаяОбработка, 5, , ОграничениеНаВвод);
		
		КодПодчиненности = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодПодчиненности_"));
		
		Для Сч = СтрДлина(КодПодчиненности) По 4 Цикл
			КодПодчиненности = КодПодчиненности + " ";
		КонецЦикла;
		
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, КодПодчиненности, "КодПодчиненности_", , , , Ложь);
		
	ИначеЕсли Найти(ОбластьИмя, "КодОрганаФСС") = 1 Тогда
		ОграничениеНаВвод.Вставить("КонтролируемаяДлинаСтроки", 4);
		КодОрганаФСС = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодОрганаФСС"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "КодОрганаФСС", КодОрганаФСС, 4, 0, Ложь, "Введите код", , , Неопределено, СтандартнаяОбработка, 4, , ОграничениеНаВвод);
		
	ИначеЕсли Найти(ОбластьИмя, "НомДопРасчета") > 0 Тогда
		НомДопРасчета = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НомДопРасчета_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "НомДопРасчета_", НомДопРасчета, 2, 0, Ложь, "Введите номер дополнительного расчета (1-12)", , , Неопределено, СтандартнаяОбработка, 2, , ОграничениеНаВвод);
		
		НомДопРасчета = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НомДопРасчета_"));
		Если ЗначениеЗаполнено(НомДопРасчета) Тогда
			НомДопРасчета = РегламентированнаяОтчетность.ДополнитьСтроку(НомДопРасчета, 2, "0", 0);
		КонецЕсли;
		
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "НомДопРасчета_", 2, НомДопРасчета);
		
		ЭтоОбластьПериода = (Область.Имя = "НомДопРасчета_1" ИЛИ Область.Имя = "НомДопРасчета_2");
		ЗаполнениеПериодаОтчетаПоПриказу1385н = (КонецДня(мДатаКонцаПериодаОтчета) >= КонецГода('20111231'));
		
		Если ЭтоОбластьПериода И ЗаполнениеПериодаОтчетаПоПриказу1385н Тогда
			КодПериода = Формат(мДатаКонцаПериодаОтчета, "ДФ=ММ");
			Если КодПериода = "03" ИЛИ КодПериода = "06"  ИЛИ КодПериода = "09" ИЛИ КодПериода = "12" Тогда
				Если ПустаяСтрока(НомДопРасчета) Тогда
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Период_", 2, КодПериода);
				Иначе
					РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Период_", 2, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Найти(ОбластьИмя, "ТелОрганизации") > 0 Тогда
		ТелОрганизации = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ТелОрганизации"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "ТелОрганизации", ТелОрганизации, 15, 0, Ложь, "Введите код", , , Неопределено, СтандартнаяОбработка, 15);
		
	ИначеЕсли Найти(ОбластьИмя, "ДокУпПред") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ФормаВводаДокументПредставителя = ПолучитьФорму("ФормаВводаДокументПредставителя");
		ФормаВводаДокументПредставителя.СтруктураДокумента = мСтруктураДокУпПред;
		Результат = ФормаВводаДокументПредставителя.ОткрытьМодально();
		
		Если Результат <> Неопределено Тогда
			
			мСтруктураДокУпПред = Результат;
			Текст = "";
			
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НаименованиеУдостоверяющего, "");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРимскиеЦифры, " ");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРусскиеБуквы, " ");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НомерУдостоверяющего, " № ");
			Текст = ДобавитьРеквизит(Текст, Формат(мСтруктураДокУпПред.ДатаВыдачи,"ДФ=dd.MM.yyyy"), " от ");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.КемВыдан, " выдан: ");
			
			ПолеТаблДокументаТитульный.Области.ДокУпПред.Значение = Текст;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Найти(ОбластьИмя, "ОКАТО") > 0 Тогда
		ОграничениеНаВвод.Вставить("КонтролируемаяДлинаСтроки", 11);
		ОКАТО = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКАТО"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "ОКАТО", ОКАТО, 11, 0, Ложь, "ОКАТО", , , Неопределено, СтандартнаяОбработка, 11, , ОграничениеНаВвод);
		
	ИначеЕсли Найти(ОбластьИмя, "СПриложением") > 0 Тогда
		Прил = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "СПриложением"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "СПриложением", Прил, 3, 0, Ложь, "Количество листов приложения", , , Неопределено, СтандартнаяОбработка, 3, , ОграничениеНаВвод);
		
	ИначеЕсли Найти(ОбластьИмя, "ЧислРаботников_") > 0 Тогда
		ЧислРаботников = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ЧислРаботников_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "ЧислРаботников_", ЧислРаботников, 6, 0, Ложь, "Численность", , , Неопределено, СтандартнаяОбработка, 6, , ОграничениеНаВвод);
		
	ИначеЕсли Найти(ОбластьИмя, "ЧислЖенщин_") > 0 Тогда
		ЧислЖенщин = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ЧислЖенщин_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "ЧислЖенщин_", ЧислЖенщин, 6, 0, Ложь, "Численность", , , Неопределено, СтандартнаяОбработка, 6, , ОграничениеНаВвод);
		
	ИначеЕсли Найти(ОбластьИмя, "ЧислИнвалидов_") > 0 Тогда
		ЧислИнвалидов = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ЧислИнвалидов_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "ЧислИнвалидов_", ЧислИнвалидов, 6, 0, Ложь, "Численность", , , Неопределено, СтандартнаяОбработка, 6, , ОграничениеНаВвод);
		
	ИначеЕсли Найти(ОбластьИмя, "ЧислВред_") > 0 Тогда
		ЧислВред = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ЧислВред_"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма, "Титульный", "ЧислВред_", ЧислВред, 6, 0, Ложь, "Численность", , , Неопределено, СтандартнаяОбработка, 6, , ОграничениеНаВвод);
		
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(ОбластьИмя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		ПрПодписанта = ПолеТаблДокументаТитульный.Области.ПрПодп.Значение;
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		Если Область.Имя = "ПрПодп" Тогда
			ПрПодписантаНов = ПолеТаблДокументаТитульный.Области.ПрПодп.Значение;
			СменилсяПрПодписанта = ?(ПрПодписанта = ПрПодписантаНов, Ложь, Истина);
			Если СменилсяПрПодписанта Тогда
				Если ПрПодписантаНов = "1" Тогда
					ЗаполнитьСведенияОбОрганизации(, Истина);
				ИначеЕсли ПрПодписантаНов = "2" ИЛИ ПрПодписантаНов = "3" Тогда
					ПолеТаблДокументаТитульный.Области.ДокУпПред.Защита = Ложь;
					ПолеТаблДокументаТитульный.Области.ДокУпПред.ЦветФона = ЦветЖелтый;
					ПолеТаблДокументаТитульный.Области.ОргПодписантФамилия.Значение = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс)
     
     Если ЗначениеЗаполнено(ДобСтрока) Тогда
          Текст = Текст + Префикс + ДобСтрока;
     КонецЕсли;
     
     Возврат Текст;
     
КонецФункции

Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	ФормаВыбора = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.Заголовок = ТекстВыбора;
	ФормаВыбора.СписокКодов = ТаблицаВыбора;
	Если ИсходнаяСтрока <> Неопределено Тогда
		ФормаВыбора.КодИсходнойСтроки = ИсходнаяСтрока.Код;
	КонецЕсли;
	
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Расчет();
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1Выбор

Процедура ПолеТабличногоДокументаРаздел1_2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2Выбор

Процедура ПолеТабличногоДокументаРаздел1_3Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2Выбор

Процедура ПолеТабличногоДокументаРаздел1_31Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2Выбор

Процедура ПолеТабличногоДокументаРаздел1_4Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_5Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2_6_7Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2_8_9Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)
	
	ПроверитьВероятностныеОшибкиЗаполнения();
	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)
	
	ПроверитьВероятностныеОшибкиЗаполнения();
	Сохранить();
	
КонецПроцедуры // КоманднаяПанельДействийЗаписать()

// Процедура расшифровки отчета показателей отчета 
Процедура КоманднаяПанельФормыРасшифровать(Кнопка)
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		СвойстваЗаполненияОтчета.ИсточникЗаполнения.ВывестиОтчетРасшифровку("РегламентированныйОтчет4ФСС_2012", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);
	ОтобразитьНомерКорректировки();

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;
	
    РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переформируем листы ФЛ
	//ЗаполнитьСведенияОбФЛ(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

Процедура ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияРаздел1_3ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_2ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияРаздел1_31ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_31ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияРаздел1_4ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияРаздел1_5ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияРаздел1_1ПриИзменении()

Процедура ПолеВыбораВариантЗаполненияРаздел2_6_7ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел2_8_9ПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

Процедура ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении()

Процедура ПолеВводаЗначениеКорректировкиРаздел1_3ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_2ПриИзменении()

Процедура ПолеВводаЗначениеКорректировкиРаздел1_31ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_31ПриИзменении()

Процедура ПолеВводаЗначениеКорректировкиРаздел1_4ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

Процедура ПолеВводаЗначениеКорректировкиРаздел1_5ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиРаздел1_1ПриИзменении()

Процедура ПолеВводаЗначениеКорректировкиРаздел2_6_7ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел2_8_9ПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел1_1ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

Процедура ПолеВводаКомментарийРаздел1_2ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_2ПриИзменении()

Процедура ПолеВводаКомментарийРаздел1_3ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_2ПриИзменении()

Процедура ПолеВводаКомментарийРаздел1_31ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_2ПриИзменении()

Процедура ПолеВводаКомментарийРаздел1_4ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

Процедура ПолеВводаКомментарийРаздел1_5ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаКомментарийРаздел1_1ПриИзменении()

Процедура ПолеВводаКомментарийРаздел2_6_7ПриИзменении(Элемент)

	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел2_8_9ПриИзменении(Элемент)
	Перем Комментарий;

	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);

	Модифицированность = Истина;

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_1ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел1_3ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаРаздел1_2ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел1_31ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел1_31");
	
КонецПроцедуры // ПолеТабличногоДокументаРаздел1_31ПриАктивизацииОбласти()

Процедура ПолеТабличногоДокументаРаздел1_4ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры 

Процедура ПолеТабличногоДокументаРаздел1_5ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2_6_7ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2_8_9ПриАктивизацииОбласти(Элемент)

	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	
	мДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел I (таблица 1)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел I (таблица 2)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Раздел I (таблица 3)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_31";
	СтрокаУровня1.Представление            = "Раздел I (таблица 3.1)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_31";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_4";
	СтрокаУровня1.Представление            = "Раздел I (таблица 4)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_41";
	СтрокаУровня1.Представление            = "Раздел I (таблица 4.1)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_41";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_42";
	СтрокаУровня1.Представление            = "Раздел I (таблица 4.2)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_42";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_43";
	СтрокаУровня1.Представление            = "Раздел I (таблица 4.3)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_43";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_44";
	СтрокаУровня1.Представление            = "Раздел I (таблица 4.4)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_44";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_5";
	СтрокаУровня1.Представление            = "Раздел I (таблица 5)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1_5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_6_7";
	СтрокаУровня1.Представление            = "Раздел II (таблицы 6, 7)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_6_7";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_8_9";
	СтрокаУровня1.Представление            = "Раздел II (таблицы 8, 9)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2_8_9";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
	
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);
	
	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			
			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;
		
	КонецЦикла;
	
	ФормироватьСтруктуруСтраницОтчета();
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
	Расчет(ИмяТекущейСтраницыПанели);
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;
	
	ВключитьПечатьЗаполненногоНеобязательногоРаздела(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

Процедура ВключитьПечатьЗаполненногоНеобязательногоРаздела(ИмяСтраницыПанели)
	
	ОбязательныеРазделы = Новый Массив;
	ОбязательныеРазделы.Добавить("Титульный");
	ОбязательныеРазделы.Добавить("Раздел1_1");
	ОбязательныеРазделы.Добавить("Раздел1_3");
	ОбязательныеРазделы.Добавить("Раздел2_6_7");
	
	Если ОбязательныеРазделы.Найти(ИмяСтраницыПанели) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСтраницыРаздела = мДеревоСтраницОтчета.Строки.Найти(ИмяСтраницыПанели, "ИмяСтраницы");
	Если НастройкиСтраницыРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВРазделеОтключенаПечать = (НастройкиСтраницыРаздела.ВыводНаПечать = 0);
	
	Если ВРазделеОтключенаПечать И РазделЗаполнен(ИмяСтраницыПанели) Тогда
		НастройкиСтраницыРаздела.ВыводНаПечать = 1;
	КонецЕсли;
	
КонецПроцедуры

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник, "ФСС");
	
	Если Имясобытия = "Изменение статуса отправки регламентированного отчета" И ЗначениеЗаполнено(Параметр) И мСохраненныйДок <> Неопределено И Источник = мСохраненныйДок.Ссылка Тогда
		
		Если мСохраненныйДок <> Неопределено Тогда
			РеквизитыОтправки = РегламентированнаяОтчетность.ПолучитьРеквизитыОтправки4ФСС(мСохраненныйДок.Ссылка);
			Если РеквизитыОтправки.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
				РегламентированнаяОтчетность.ЗаписатьСтатусОтчета(Источник, Перечисления.СтатусыРегламентированныхОтчетов.Сдан);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, КаталогВыгрузки = Неопределено) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры, КаталогВыгрузки);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ВыгрузкаВозможна = Истина;
	
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		ВыгрузкаВозможна = Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьКонтрольныеСуммы(Параметры, ДеревоВыгрузки) Тогда
		ВыгрузкаВозможна = Ложь;
	КонецЕсли;
	
	Если НЕ ВыгрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры, КаталогВыгрузки = Неопределено)
	
	Если КаталогВыгрузки = Неопределено Тогда
		ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
		Если ПутьДляВыгрузки = Ложь Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ПутьДляВыгрузки = КаталогВыгрузки;
	КонецЕсли;
	
	ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИмяФайла;
	ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки, ЗначениеЗаполнено(КаталогВыгрузки)); // записываем XML в файл на диск
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузкиXML04");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НомСтр = ВысотаТаблицы - НомерСтроки + 2;
		Если Макет.Область(НомерСтроки, 0, НомерСтроки, 0).Видимость = Неопределено Тогда
			Сообщить(НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
		
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция СформироватьИмяФайла(Параметры)
	
	КодСтрахователя = ?(ЗначениеЗаполнено(Параметры.ДополнительныйКод), Параметры.ДополнительныйКод, Параметры.НомерСтрахователя);
	РасчетныйГод = Параметры.РасчПериод;
	ОтчетныйКвартал = Параметры.ОтчПериод;
	Возврат КодСтрахователя + "_" + РасчетныйГод + "_" + ОтчетныйКвартал + ".xml";
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("НомерСтрахователя", СокрЛП(Титульный.ОргФССКод));
	Параметры.Вставить("ДополнительныйКод", СокрЛП(Титульный.ДополнительныйКод));
	Параметры.Вставить("КодПодчиненности", СокрЛП(Титульный.КодПодчиненности));
	Параметры.Вставить("РасчПериод", СокрЛП(Титульный.ОтчетГод));
	
	Параметры.Вставить("ОтчПериод", СокрЛП(Титульный.Период));
	Если ПустаяСтрока(Параметры.ОтчПериод) Тогда
		Параметры.ОтчПериод = Формат(КонецКвартала(мДатаКонцаПериодаОтчета), "ДФ=ММ");
	КонецЕсли;
	
	Параметры.Вставить("НомерКорректировки", СтрокаВЧисло(Титульный.НомерКорректировки));
	Параметры.Вставить("НомДопРасчета", СтрокаВЧисло(Титульный.НомДопРасчета));
	Параметры.Вставить("ПрекращениеДеятельности", ?(ПустаяСтрока(Титульный.ПрекращениеДеятельности), 0, 1));
	Параметры.Вставить("ОргНазв", СокрЛП(Титульный.ОргНазв));
	Параметры.Вставить("ИНН", СокрЛП(Титульный.ИНН));
	Параметры.Вставить("КПП", СтрокаВЧисло(Титульный.КПП));
	Параметры.Вставить("ОГРН", СокрЛП(Титульный.ОГРН));
	Параметры.Вставить("ОКАТО", СокрЛП(Титульный.ОКАТО));
	Параметры.Вставить("ОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(СтрЗаменить(Титульный.ОКВЭД, " ", ""), ".", " ")), " ", "."));
	Параметры.Вставить("Телефон", СокрЛП(Титульный.ТелОрганизации));
	
	АдресРегистрации = СокрЛП(Титульный.Адрес1) + "," +
	                   СокрЛП(Титульный.Адрес2) + "," +
	                   СокрЛП(Титульный.Адрес3) + "," +
	                   СокрЛП(Титульный.Адрес4) + "," +
	                   СокрЛП(Титульный.Адрес5) + "," +
	                   СокрЛП(Титульный.Адрес6) + "," +
	                   СокрЛП(Титульный.Адрес7) + "," +
	                   СокрЛП(Титульный.Адрес8) + "," +
	                   СокрЛП(Титульный.Адрес9);
	
	Параметры.Вставить("АдресРегистрации", АдресРегистрации);
	Параметры.Вставить("ЭлектроннаяПочта", ПолучитьЭлектроннуюПочтуОрганизации());
	
	Параметры.Вставить("ШифрСтрах1Часть", СокрЛП(Титульный.ШифрСтрах1Часть));
	Параметры.Вставить("ШифрСтрах2Часть", СокрЛП(Титульный.ШифрСтрах2Часть));
	Параметры.Вставить("ШифрСтрах3Часть", СокрЛП(Титульный.ШифрСтрах3Часть));
	
	Параметры.Вставить("ЧислРаботников", СтрокаВЧисло(Титульный.ЧислРаботников));
	Параметры.Вставить("ЧислЖенщин", СтрокаВЧисло(Титульный.ЧислЖенщин));
	Параметры.Вставить("ЧислИнвалидов", СтрокаВЧисло(Титульный.ЧислИнвалидов));
	Параметры.Вставить("ЧислВред", СтрокаВЧисло(Титульный.ЧислВред));
	
	Параметры.Вставить("ПризнакПодписанта", Титульный.ПрПодп);
	Параметры.Вставить("ОргДиректор", СокрЛП(Титульный.ОргПодписантФамилия));
	
	Параметры.Вставить("ДатаПредставления", ТекущаяДата());
	Параметры.Вставить("ДокументПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	Параметры.Вставить("ИмяФайла", СформироватьИмяФайла(Параметры));
	
	Параметры.Вставить("КодФонда", Титульный.КодОрганаФСС); // Используется для контроля заполнения значения
	
	Возврат Параметры;
	
КонецФункции

Функция СтрокаВЧисло(Знач Стр)
	
	Стр = СокрЛП(Стр);
	
	СтрокаСодержитТекстовоеПредставлениеЧисла = ЗначениеЗаполнено(Стр) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Стр, , Ложь);
	
	Возврат ?(СтрокаСодержитТекстовоеПредставлениеЧисла, Число(Стр), 0);
	
КонецФункции

Функция ПроверкаПлатежныхПоручений(Знач Стр1, Знач Стр2, Знач Стр3, Знач Номер, Знач Раздел, Знач Область)
	
	СтатусПроверки = Истина;
	
	СтрокаЗаполнена = (ЗначениеЗаполнено(Стр1) ИЛИ ЗначениеЗаполнено(Стр2) ИЛИ ЗначениеЗаполнено(Стр3));
	
	Если СтрокаЗаполнена И НЕ (ЗначениеЗаполнено(Стр1) И ЗначениеЗаполнено(Стр2) И ЗначениеЗаполнено(Стр3)) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не полностью заполнены сведения о платежном поручение за " + Номер + " месяц!", Раздел, Область);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПолучитьЭлектроннуюПочтуОрганизации()
	
	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	
	Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.EmailУчреждения;
		Данные = Новый Структура("Объект, Тип, Вид", Организация, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидКонтактнойИнформации);
		Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
		Если Результат2 <> Неопределено Тогда
			Значение = Результат2.Представление;
		Иначе
			Значение = "";
		КонецЕсли;
		
	ИначеЕсли ИдКонф = "ЗУП" ИЛИ ИдКонф = "ЗБУ" Тогда
		Значение = "";
		
	Иначе
		ВидКонтактнойИнформации = ?(ЭтоПБОЮЛ, Справочники.ВидыКонтактнойИнформации.EmailФизЛица, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
		Данные = Новый Структура("Объект, Тип, Вид", Организация, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидКонтактнойИнформации);
		Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
		Если Результат2 <> Неопределено Тогда
			Значение = Результат2.Представление;
		Иначе
			Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	// проверка показателей титульного листа
	Если ПустаяСтрока(Параметры.ИНН) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.НомерСтрахователя) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан номер страхователя!", "Титульный", "ОргФССКод");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.КодФонда) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода органа ФСС, в который представляется отчет!", "Титульный", "КодОрганаФСС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СокрЛП(СтрЗаменить(Параметры.ОКВЭД, ".", ""))) И НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Некорректное значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	//Код подчиненности
	Если НЕ ЗначениеЗаполнено(Параметры.КодПодчиненности) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код подчиненности!", "Титульный", "КодПодчиненности");
		СтатусПроверки = Ложь;
	Иначе
		ПоследнийСимвол = Прав(Параметры.КодПодчиненности, 1);
		Если НЕ (ПоследнийСимвол = "1" ИЛИ ПоследнийСимвол = "2" ИЛИ ПоследнийСимвол = "3") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Код подчиненности должен заканчиваться на цифру 1, 2 или 3!", "Титульный", "КодПодчиненности");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВозможныеЗначенияШифра1 = Новый Массив;
	ВозможныеЗначенияШифра1.Добавить("071");
	ВозможныеЗначенияШифра1.Добавить("032");
	ВозможныеЗначенияШифра1.Добавить("041");
	ВозможныеЗначенияШифра1.Добавить("042");
	ВозможныеЗначенияШифра1.Добавить("043");
	ВозможныеЗначенияШифра1.Добавить("061");
	ВозможныеЗначенияШифра1.Добавить("051");
	ВозможныеЗначенияШифра1.Добавить("081");
	ВозможныеЗначенияШифра1.Добавить("091");
	ВозможныеЗначенияШифра1.Добавить("101");
	ВозможныеЗначенияШифра1.Добавить("121");
	ВозможныеЗначенияШифра1.Добавить("131");
	ВозможныеЗначенияШифра1.Добавить("141");
	ВозможныеЗначенияШифра1.Добавить("151");
	ВозможныеЗначенияШифра1.Добавить("161");
	ВозможныеЗначенияШифра2 = Новый Массив;
	ВозможныеЗначенияШифра2.Добавить("00");
	ВозможныеЗначенияШифра2.Добавить("01");
	ВозможныеЗначенияШифра2.Добавить("02");
	ВозможныеЗначенияШифра2.Добавить("03");
	ВозможныеЗначенияШифра3 = Новый Массив;
	ВозможныеЗначенияШифра3.Добавить("00");
	ВозможныеЗначенияШифра3.Добавить("01");
	
	Если ЗначениеЗаполнено(Параметры.ШифрСтрах1Часть) Тогда
		Если ВозможныеЗначенияШифра1.Найти(Параметры.ШифрСтрах1Часть) = Неопределено Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задана первая часть шифра страхователя!", "Титульный", "ШифрСтрах1Часть");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано значение первой части шифра страхователя!", "Титульный", "ШифрСтрах1Часть");
		СтатусПроверки = Ложь;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.ШифрСтрах2Часть) Тогда
		Если ВозможныеЗначенияШифра2.Найти(Параметры.ШифрСтрах2Часть) = Неопределено Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задана вторая часть шифра страхователя!", "Титульный", "ШифрСтрах2Часть");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ШифрСтрах3Часть) Тогда
		Если ВозможныеЗначенияШифра3.Найти(Параметры.ШифрСтрах3Часть) = Неопределено Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задана третья часть шифра страхователя!", "Титульный", "ШифрСтрах3Часть");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.НомерКорректировки <> 0 Тогда
		Если Параметры.НомДопРасчета <> 0 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "При номере корректировки, отличном от 000 вторая часть кода ""Отчетный период"" не должна заполняться!", "Титульный", "НомДопРасчета");
			СтатусПроверки = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ОргДиректор) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не заданы Ф.И.О. руководителя организации (индивидуального предпринимателя, физического лица, представителя страхователя)!", "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	//Проверка платежных поручений
	ДанныеРаздела1_1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_1;
	ДанныеРаздела2_6_7 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_6_7;
	
	Если НЕ ПроверкаПлатежныхПоручений(ДанныеРаздела1_1.П000010016311, ДанныеРаздела1_1.П000010016321, ДанныеРаздела1_1.П000010016301,"первый", "Раздел1_1", "П000010016311") Тогда
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПроверкаПлатежныхПоручений(ДанныеРаздела1_1.П000010016411, ДанныеРаздела1_1.П000010016421, ДанныеРаздела1_1.П000010016401,"второй", "Раздел1_1", "П000010016411") Тогда
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПроверкаПлатежныхПоручений(ДанныеРаздела1_1.П000010016511, ДанныеРаздела1_1.П000010016521, ДанныеРаздела1_1.П000010016501,"третий", "Раздел1_1", "П000010016511") Тогда
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПроверкаПлатежныхПоручений(ДанныеРаздела2_6_7.П000070012104, ДанныеРаздела2_6_7.П000070012105, ДанныеРаздела2_6_7.П000070012101,"первый", "Раздел2_6_7", "П000070012104") Тогда
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПроверкаПлатежныхПоручений(ДанныеРаздела2_6_7.П000070012204, ДанныеРаздела2_6_7.П000070012205, ДанныеРаздела2_6_7.П000070012201,"второй", "Раздел2_6_7", "П000070012204") Тогда
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПроверкаПлатежныхПоручений(ДанныеРаздела2_6_7.П000070012304, ДанныеРаздела2_6_7.П000070012305, ДанныеРаздела2_6_7.П000070012301,"третий", "Раздел2_6_7", "П000070012304") Тогда
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 3.1.
	ДанныеРаздела1_31 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_31;
	НомСтроки = 1;
	
	ФИОСотрудника = Неопределено;
	ДатаВыдачи = Неопределено;
	ДатаОкончания = Неопределено;
	СуммаВсего = Неопределено;
	Сумма1Месяц = Неопределено;
	Сумма2Месяц = Неопределено;
	Сумма3Месяц = Неопределено;
	
	Пока ДанныеРаздела1_31.Свойство("П000310001002_" + Формат(НомСтроки, "ЧГ="), ФИОСотрудника) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела1_31.Свойство("П000310001003_" + НомерСтроки, ДатаВыдачи);
		ДанныеРаздела1_31.Свойство("П000310001004_" + НомерСтроки, ДатаОкончания);
		ДанныеРаздела1_31.Свойство("П000310001005_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела1_31.Свойство("П000310001006_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела1_31.Свойство("П000310001007_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела1_31.Свойство("П000310001008_" + НомерСтроки, Сумма3Месяц);
		
		Если ЗначениеЗаполнено(ФИОСотрудника) ИЛИ  ЗначениеЗаполнено(ДатаВыдачи) ИЛИ ЗначениеЗаполнено(ДатаОкончания) ИЛИ ЗначениеЗаполнено(СуммаВсего) 
		 ИЛИ ЗначениеЗаполнено(Сумма1Месяц) ИЛИ ЗначениеЗаполнено(Сумма2Месяц) ИЛИ ЗначениеЗаполнено(Сумма3Месяц) Тогда
			СтрокаЗаполнена = Истина;
		КонецЕсли;
		
		Если СтрокаЗаполнена Тогда
			
			ФИО = РазложитьФИО(ФИОСотрудника);
			Если НЕ ЗначениеЗаполнено(ФИО.Фамилия) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В таблице 3.1, в строке " + НомерСтроки + " не указана фамилия сотрудника!", "Раздел1_31", "П000310001002_" + НомерСтроки);			
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ФИО.Имя) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В таблице 3.1, в строке " + НомерСтроки + " не указано имя сотрудника!", "Раздел1_31", "П000310001002_" + НомерСтроки);			
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДатаВыдачи) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В таблице 3.1, строке " + НомерСтроки + " не указана дата выдачи справки!", "Раздел1_31", "П000310001003_" + НомерСтроки);			
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПроверитьКонтрольныеСуммы(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	ДанныеРаздела1_1   = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_1;
	ДанныеРаздела1_2   = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_2;
	ДанныеРаздела1_3   = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_3;
	ДанныеРаздела1_31  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_31;
	ДанныеРаздела1_5   = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_5;
	ДанныеРаздела2_6_7 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_6_7;
	ДанныеРаздела2_8_9 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_8_9;
	
	// Проверка показателей титульного листа.
	
	ТекстОписанияОшибки = "Значение показателя «из них: женщин» превышает значение показателя «численность работников»!";
	Если Параметры.ЧислРаботников < Параметры.ЧислЖенщин Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "ЧислЖенщин");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя «из них: работающих инвалидов» превышает значение показателя «численность работников»!";
	Если Параметры.ЧислРаботников < Параметры.ЧислИнвалидов Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "ЧислИнвалидов");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя «из них: работающих, занятых на работах с вредными и (или) опасными производственными факторами» превышает значение показателя «численность работников»!";
	Если Параметры.ЧислРаботников < Параметры.ЧислВред Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "ЧислВред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Не задан показатель «из них: женщин», при заполненной строке 3 таблицы 2!";
	ЗаполненаСтрока3Таблицы2 = ДанныеРаздела1_2.П000020003001 <> 0 
	                       ИЛИ ДанныеРаздела1_2.П000020003003 <> 0
	                       ИЛИ ДанныеРаздела1_2.П000020003004 <> 0
	                       ИЛИ ДанныеРаздела1_2.П000020003005 <> 0;
	Если ЗаполненаСтрока3Таблицы2 И Параметры.ЧислЖенщин < 1 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "ЧислЖенщин");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Не задан показатель «из них: женщин», при заполненной строке 5 таблицы 2!";
	ЗаполненаСтрока5Таблицы2 = (ДанныеРаздела1_2.П000020005003 > 0 ИЛИ ДанныеРаздела1_2.П000020005004 > 0);
	Если ЗаполненаСтрока5Таблицы2 И Параметры.ЧислЖенщин < 1 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "ЧислЖенщин");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Не задан показатель «из них: работающих инвалидов», при заполненной графе 4 строки 1 таблицы 6!";
	ЗаполненаГрафа4Строки1Таблицы6 = (ДанныеРаздела2_6_7.П000060001104 > 0);
	Если ЗаполненаГрафа4Строки1Таблицы6 И Параметры.ЧислИнвалидов < 1 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "ЧислИнвалидов");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	//Таблица 1.
	ТекстОписанияОшибки = "Значение показателя в графе 1 строки 2 таблицы 1 «на начало отчётного периода» не равно нулю (расчёт за 1-й квартал!)";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела1_1.П000010002101 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010002101");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 2 таблицы 1 не равно сумме сумме значений показателей в графе 1!";
	Если ДанныеРаздела1_1.П000010002003 <> ДанныеРаздела1_1.П000010002101 + ДанныеРаздела1_1.П000010002301 + ДанныеРаздела1_1.П000010002401 + ДанныеРаздела1_1.П000010002501 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010002003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Шифр = Параметры.ШифрСтрах1Часть;
	
	Для Счетчик = 3 по 5 Цикл
		
		ИмяЛевойЧасти = "П000010002" + Строка(Счетчик) + "01";
		ПоказательЛевойЧасти = ДанныеРаздела1_1[ИмяЛевойЧасти];
		ТекстОписанияОшибкиЛеваяЧасть = "Значение показателя «" + (Счетчик - 2) + " месяц» графы 1 строки 2 таблицы 1 не равно ";
		
		Если (Шифр = "032" ИЛИ Шифр = "041" ИЛИ Шифр = "042" ИЛИ Шифр = "043" ИЛИ Шифр = "061") Тогда
			ТекстОписанияОшибкиПраваяЧасть = "1,9% значения показателя в графе " + (Счетчик + 1) + " строки 4 таблицы 3 плюс/минус 1 рубль при шифре страхователя 032, 041, 042, 043, 061!";
			ИмяПравойЧасти = "П00003000400" + Строка(Счетчик + 1);
			Если ВыходЗаГраницыДопуска(ПоказательЛевойЧасти, 0.019 * ДанныеРаздела1_3[ИмяПравойЧасти]) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибкиЛеваяЧасть + ТекстОписанияОшибкиПраваяЧасть, "Раздел1_1", ИмяЛевойЧасти);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		ИначеЕсли (Шифр = "051" ИЛИ Шифр = "101") Тогда
			ТекстОписанияОшибкиПраваяЧасть = "2,0% значения показателя в графе " + (Счетчик + 1) + " строки 4 таблицы 3 плюс/минус 1 рубль при шифре 051, 101!";
			ИмяПравойЧасти = "П00003000400" + Строка(Счетчик + 1);
			Если ВыходЗаГраницыДопуска(ПоказательЛевойЧасти, 0.02 * ДанныеРаздела1_3[ИмяПравойЧасти]) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибкиЛеваяЧасть + ТекстОписанияОшибкиПраваяЧасть, "Раздел1_1", ИмяЛевойЧасти);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		ИначеЕсли Шифр = "071" Тогда
			ТекстОписанияОшибкиПраваяЧасть = "2,9% от разности значений показателей в графе " + (Счетчик + 1) + " строки 4 таблицы 3 и графе " + (Счетчик + 1) + " строки 5 таблицы 3 плюс 1,9% значения показателя в графе " + (Счетчик + 1) + " строки 5 таблицы 3 плюс/минус 1 рубль при шифре 071!";
			ИмяПравойЧасти1 = "П00003000400" + Строка(Счетчик + 1);
			ИмяПравойЧасти2 = "П00003000500" + Строка(Счетчик + 1);
			
			Если ВыходЗаГраницыДопуска(ПоказательЛевойЧасти,
				0.029*(ДанныеРаздела1_3[ИмяПравойЧасти1] - ДанныеРаздела1_3[ИмяПравойЧасти2]) + 0.019 * ДанныеРаздела1_3[ИмяПравойЧасти2]) Тогда
				
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибкиЛеваяЧасть + ТекстОписанияОшибкиПраваяЧасть, "Раздел1_1", ИмяЛевойЧасти);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		ИначеЕсли Шифр = "081" ИЛИ Шифр = "121" ИЛИ Шифр = "151" ИЛИ Шифр = "161" Тогда
			ТекстОписанияОшибкиПраваяЧасть = "0 при шифре  081, 121, 151, 161!";
			Если ПоказательЛевойЧасти <> 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибкиЛеваяЧасть + ТекстОписанияОшибкиПраваяЧасть, "Раздел1_1", ИмяЛевойЧасти);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		ИначеЕсли Шифр = "131" Тогда
			ТекстОписанияОшибкиПраваяЧасть = "2,9% от разности значений показателей в графе " + (Счетчик + 1) + " строки 4 таблицы 3 и графе " + (Счетчик + 1) + " строки 5 таблицы 3 и графе " + (Счетчик + 1) + " строки 7 таблицы 3 плюс 1,9% значения показателя в графе " + (Счетчик + 1) + " строки 5 таблицы 3 плюс/минус 1 рубль при шифре 131!";
			ИмяПравойЧасти4 = "П00003000400" + Строка(Счетчик + 1);
			ИмяПравойЧасти5 = "П00003000500" + Строка(Счетчик + 1);
			ИмяПравойЧасти7 = "П00003000700" + Строка(Счетчик + 1);
			Если ВыходЗаГраницыДопуска(ПоказательЛевойЧасти,
				0.029*(ДанныеРаздела1_3[ИмяПравойЧасти4] - ДанныеРаздела1_3[ИмяПравойЧасти5] - ДанныеРаздела1_3[ИмяПравойЧасти7]) + 0.019 * ДанныеРаздела1_3[ИмяПравойЧасти5]) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибкиЛеваяЧасть + ТекстОписанияОшибкиПраваяЧасть, "Раздел1_1", ИмяЛевойЧасти);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		ИначеЕсли Шифр = "141" Тогда
			ТекстОписанияОшибкиПраваяЧасть = "2,9% от разности значений показателей в графе " + (Счетчик + 1) + " строки 4 таблицы 3 и графе " + (Счетчик + 1) + " строки 5 таблицы 3 и графе " + (Счетчик + 1) + " строки 6 таблицы 3 плюс 1,9% значения показателя в графе " + (Счетчик + 1) + " строки 5 таблицы 3 плюс/минус 1 рубль при шифре 141!";
			ИмяПравойЧасти4 = "П00003000400" + Строка(Счетчик + 1);
			ИмяПравойЧасти5 = "П00003000500" + Строка(Счетчик + 1);
			ИмяПравойЧасти6 = "П00003000600" + Строка(Счетчик + 1);
			Если ВыходЗаГраницыДопуска(ПоказательЛевойЧасти,
				0.029*(ДанныеРаздела1_3[ИмяПравойЧасти4] - ДанныеРаздела1_3[ИмяПравойЧасти5] - ДанныеРаздела1_3[ИмяПравойЧасти6]) + 0.019 * ДанныеРаздела1_3[ИмяПравойЧасти5]) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибкиЛеваяЧасть + ТекстОписанияОшибкиПраваяЧасть, "Раздел1_1", ИмяЛевойЧасти);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстОписанияОшибки = "Значение показателя графы 1 строки 3 таблицы 1 «на начало отчётного периода» не равно нулю (расчёт за 1-й квартал)!";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела1_1.П000010003101 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010003101");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя графы 3 строки 3 таблицы 1 не равно сумме значений показателей в графе 1!";
	Если ДанныеРаздела1_1.П000010003003 <> ДанныеРаздела1_1.П000010003101 + ДанныеРаздела1_1.П000010003301 + ДанныеРаздела1_1.П000010003401 + ДанныеРаздела1_1.П000010003501 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010003003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя графы 1 строки 5 таблицы 1 «на начало отчётного периода» не равно нулю (расчёт за 1-й квартал)!";
	Если (Параметры.ОтчПериод = "03" И ДанныеРаздела1_1.П000010005101 <> 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010005101");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя графы 3 строки 5 таблицы 1 не равно сумме значений показателей в графе 1!";
	Если ДанныеРаздела1_1.П000010005003 <> ДанныеРаздела1_1.П000010005101 + ДанныеРаздела1_1.П000010005301 + ДанныеРаздела1_1.П000010005401 + ДанныеРаздела1_1.П000010005501 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010005003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя графы 1 строки 6 таблицы 1 «на начало отчётного периода» не равно нулю (расчёт за 1-й квартал)!";
	Если (Параметры.ОтчПериод = "03" И ДанныеРаздела1_1.П000010006101 <> 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010006101");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя графы 3 строки 6 таблицы 1 не равно сумме значений показателей в графе 1!";
	Если ДанныеРаздела1_1.П000010006003 <> ДанныеРаздела1_1.П000010006101 + ДанныеРаздела1_1.П000010006301 + ДанныеРаздела1_1.П000010006401 + ДанныеРаздела1_1.П000010006501 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010006003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 8 таблицы 1 не равно сумме значений показателей в графе 3 по строкам 1 - 7!";
	Если ДанныеРаздела1_1.П000010008003 <> ДанныеРаздела1_1.П000010001003 + ДанныеРаздела1_1.П000010002003 + ДанныеРаздела1_1.П000010003003 + ДанныеРаздела1_1.П000010004003 + ДанныеРаздела1_1.П000010005003 + ДанныеРаздела1_1.П000010006003 + ДанныеРаздела1_1.П000010007003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010008003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 9 таблицы 1 не равно разнице значений показателей в графе 3 строк 18 и 8, когда значение показателя в графе 3 строки 18 превышает значение показателя в графе 3 строки 8!";
	Если ДанныеРаздела1_1.П000010009003 <> Макс(ДанныеРаздела1_1.П000010018003 - ДанныеРаздела1_1.П000010008003, 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010009003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя графы 1 строки 15 таблицы 1 «на начало отчётного периода» не равно нулю (расчёт за 1-й квартал)!";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела1_1.П000010015101 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010015101");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя графы 3 строки 15 таблицы 1 не равно сумме значений показателей в графе 1!";
	Если ДанныеРаздела1_1.П000010015003 <> ДанныеРаздела1_1.П000010015101 + ДанныеРаздела1_1.П000010015301 + ДанныеРаздела1_1.П000010015401 + ДанныеРаздела1_1.П000010015501 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010015003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя графы 1 строки 16 таблицы 1 «на начало отчётного периода» не равно нулю (расчёт за 1-й квартал)!";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела1_1.П000010016101 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010016101");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя графы 3 строки 16 таблицы 1 не равно сумме значений показателей в графе 1!";
	Если ДанныеРаздела1_1.П000010016003 <> ДанныеРаздела1_1.П000010016101 + ДанныеРаздела1_1.П000010016301 + ДанныеРаздела1_1.П000010016401 + ДанныеРаздела1_1.П000010016501 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010016003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 19 таблицы 1 не равно разнице значений показателей в графе 3 строк 8 и 18, когда значение показателя в графе 3 строки 8 превышает значение показателя в графе 3 строки 18!";
	Если ДанныеРаздела1_1.П000010019003 <> Макс(ДанныеРаздела1_1.П000010008003 - ДанныеРаздела1_1.П000010018003,0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010019003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 20 превышает значение показателя в графе 3 строки 19!";
	Если ДанныеРаздела1_1.П000010020003 > ДанныеРаздела1_1.П000010019003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010020003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Сумма значений показателя в графе 3 строк 8 и 9 таблицы 1 не равна сумме значений показателей в графе 3 строк 18 и 19!";
	Если ДанныеРаздела1_1.П000010008003 + ДанныеРаздела1_1.П000010009003 <> ДанныеРаздела1_1.П000010018003 + ДанныеРаздела1_1.П000010019003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_1", "П000010008003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 2.
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 1 таблицы 2 не равно значению показателя в графе 5 строки 1 таблицы 5!";
	Если ДанныеРаздела1_2.П000020001005 <> ДанныеРаздела1_5.П000050001005 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020001005");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя «число случаев» в графе 1 строки 2 таблицы 2 превышает значение показателя «число случаев» в графе 1 строки 1 таблицы 2!";
	Если ДанныеРаздела1_2.П000020002001 > ДанныеРаздела1_2.П000020001001 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020002001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 2 таблицы 2 превышает значение показателя в графе 3 строки 1 таблицы 2!";
	Если ДанныеРаздела1_2.П000020002003 > ДанныеРаздела1_2.П000020001003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020002003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 2 таблицы 2 превышает значение показателя в графе 4 строки 1 таблицы 2!";
	Если ДанныеРаздела1_2.П000020002004 > ДанныеРаздела1_2.П000020001004 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020002004");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 2 таблицы 2 превышает значение показателя в графе 5 строки 1 таблицы 2!";
	Если ДанныеРаздела1_2.П000020002005 > ДанныеРаздела1_2.П000020001005 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020002005");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя «число случаев» в графе 1 строки 3 таблицы 2 не равно нулю при нулевом значении показателя «из них: женщин» титульного листа!";
	Если Параметры.ЧислЖенщин = 0 И ДанныеРаздела1_2.П000020003001 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020003001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 3 таблицы 2 не равно нулю при нулевом значении показателя «из них: женщин» титульного листа!";
	Если (Параметры.ЧислЖенщин = 0 И ДанныеРаздела1_2.П000020003003 <> 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020003003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 3 таблицы 2 не равно значению показателя в графе 5 строки 2 таблицы 5!";
	Если ДанныеРаздела1_2.П000020003005 <> ДанныеРаздела1_5.П000050002005 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020003005");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя «число случаев» в графе 1 строки 4 таблицы 2 превышает значение показателя «число случаев» в графе 1 строки 3 таблицы 2!";
	Если ДанныеРаздела1_2.П000020004001 > ДанныеРаздела1_2.П000020003001 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020004001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 4 таблицы 2 превышает значение показателя в графе 3 строки 3 таблицы 2!";
	Если ДанныеРаздела1_2.П000020004003 > ДанныеРаздела1_2.П000020003003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020004003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 4 таблицы 2 превышает значение показателя в графе 4 строки 3 таблицы 2!";
	Если ДанныеРаздела1_2.П000020004004 > ДанныеРаздела1_2.П000020003004 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020004004");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 4 таблицы 2 превышает значение показателя в графе 5 строки 3 таблицы 2!";
	Если ДанныеРаздела1_2.П000020004005 > ДанныеРаздела1_2.П000020003005 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020004005");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 5 таблицы 2 не равно нулю при нулевом значении показателя «из них: женщин» титульного листа!";
	Если (Параметры.ЧислЖенщин = 0 И ДанныеРаздела1_2.П000020005003 <> 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020005003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя «количество получателей» в графе 1 строки 7 таблицы 2 превышает сумму показателей «количество получателей» в графе 1 строк 8 и 9 таблицы 2!";
	Если ДанныеРаздела1_2.П000020007001 > ДанныеРаздела1_2.П000020008001 + ДанныеРаздела1_2.П000020009001 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020007001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя «количество получателей» в графе 1 строки 7 таблицы 2 меньше значения показателя «количество получателей» в графе 1 строки 8 таблицы 2!";
	Если ДанныеРаздела1_2.П000020007001 < ДанныеРаздела1_2.П000020008001 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020007001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя «количество получателей» в графе 1 строки 7 таблицы 2 меньше значения показателя «количество получателей» в графе 1 строки 9 таблицы 2!";
	Если ДанныеРаздела1_2.П000020007001 < ДанныеРаздела1_2.П000020009001 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020007001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 7 таблицы 2 не равно значению показателя в графе 5 строки 3 таблицы 5!";
	Если ДанныеРаздела1_2.П000020007005 <> ДанныеРаздела1_5.П000050003005 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020007005");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 8 таблицы 2 не равно значению показателя в графе 5 строки 4 таблицы 5!";
	Если ДанныеРаздела1_2.П000020008005 <> ДанныеРаздела1_5.П000050004005 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020008005");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 9 таблицы 2 не равно значению показателя в графе 5 строки 5 таблицы 5!";
	Если ДанныеРаздела1_2.П000020009005 <> ДанныеРаздела1_5.П000050005005 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020009005");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 11 таблицы 2 не равно значению показателя в графе 5 строки 6 таблицы 5!";
	Если ДанныеРаздела1_2.П000020011005 <> ДанныеРаздела1_5.П000050006005 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_2", "П000020011005");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 3.
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 1 таблицы 3 меньше нуля!";
	Если ДанныеРаздела1_3.П000030001003 < 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 1 таблицы 3 не равно сумме показателей в графах 4, 5, 6 по строке 1 таблицы 3 (расчет за 1-й квартал)!";
	Если (Параметры.ОтчПериод = "03" И ДанныеРаздела1_3.П000030001003 <> ДанныеРаздела1_3.П000030001004 + ДанныеРаздела1_3.П000030001005 + ДанныеРаздела1_3.П000030001006) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 2 таблицы 3 меньше нуля!";
	Если (ДанныеРаздела1_3.П000030002003 < 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030002003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 2 таблицы 3 не равно сумме показателей в графах 4, 5, 6 по строке 2 таблицы 3 (расчет за 1-й квартал)!";
	Если (Параметры.ОтчПериод = "03" И ДанныеРаздела1_3.П000030002003 <> ДанныеРаздела1_3.П000030002004 + ДанныеРаздела1_3.П000030002005 + ДанныеРаздела1_3.П000030002006) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030002003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 3 таблицы 3 меньше нуля!";
	Если (ДанныеРаздела1_3.П000030003003 < 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030003003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 3 таблицы 3 не равно сумме показателей в графах 4, 5, 6 по строке 3 таблицы 3 (расчет за 1-й квартал)!";
	Если (Параметры.ОтчПериод = "03" И ДанныеРаздела1_3.П000030003003 <> ДанныеРаздела1_3.П000030003004 + ДанныеРаздела1_3.П000030003005 + ДанныеРаздела1_3.П000030003006) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030003003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 4 таблицы 3 меньше нуля!";
	Если (ДанныеРаздела1_3.П000030004003 < 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030004003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 4 таблицы 3 не равно сумме показателей в графах 4, 5, 6 по строке 4 таблицы 3 (расчет за 1-й квартал)!";
	Если (Параметры.ОтчПериод = "03" И ДанныеРаздела1_3.П000030004003 <> ДанныеРаздела1_3.П000030004004 + ДанныеРаздела1_3.П000030004005 + ДанныеРаздела1_3.П000030004006) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030004003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 5 таблицы 3 меньше нуля!";
	Если (ДанныеРаздела1_3.П000030005003 < 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030005003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 5 таблицы 3 не равно сумме показателей в графах 4, 5, 6 по строке 5 таблицы 3 (расчет за 1-й квартал)!";
	Если (Параметры.ОтчПериод = "03" И ДанныеРаздела1_3.П000030005003 <> ДанныеРаздела1_3.П000030005004 + ДанныеРаздела1_3.П000030005005 + ДанныеРаздела1_3.П000030005006) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030005003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 5 таблицы 3 превышает значение показателя в графе 3 строки 4 таблицы 3!";
	Если (ДанныеРаздела1_3.П000030005003 > ДанныеРаздела1_3.П000030004003) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030005003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 5 таблицы 3 не равно нулю при нулевом значении показателя «из них: работающих инвалидов» титульного листа!";
	Если (Параметры.ЧислИнвалидов = 0 И ДанныеРаздела1_3.П000030005003 <> 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030005003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 5 таблицы 3 не равно нулю при первой части шифра не равной 071, 131 или 141!";
	Если НЕ (Шифр = "071" ИЛИ Шифр = "131" ИЛИ Шифр = "141") И ДанныеРаздела1_3.П000030005003 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030005003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 6 таблицы 3 меньше нуля!";
	Если ДанныеРаздела1_3.П000030006003 < 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030006003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 6 таблицы 3 не равно нулю при первой части шифра не равной 141!";
	Если Шифр <> "141" И ДанныеРаздела1_3.П000030006003 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030006003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 6 таблицы 3 не равно сумме показателей в графах 4, 5, 6 по строке 6 таблицы 3 (расчет за 1-й квартал)!";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела1_3.П000030006003 <> ДанныеРаздела1_3.П000030006004 + ДанныеРаздела1_3.П000030006005 + ДанныеРаздела1_3.П000030006006 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030006003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 6 таблицы 3 превышает значение показателя в графе 3 строки 4 таблицы 3!";
	Если ДанныеРаздела1_3.П000030006003 > ДанныеРаздела1_3.П000030004003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030006003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 7 таблицы 3 меньше нуля!";
	Если ДанныеРаздела1_3.П000030007003 < 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030007003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 7 таблицы 3 не равно нулю при первой части шифра не равной 131!";
	Если (НЕ Шифр = "131" И НЕ ДанныеРаздела1_3.П000030007003 = 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030007003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 7 таблицы 3 не равно сумме показателей в графах 4, 5, 6 по строке 7 таблицы 3 (расчет за 1-й квартал)!";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела1_3.П000030007003 <> ДанныеРаздела1_3.П000030007004+ДанныеРаздела1_3.П000030007005+ДанныеРаздела1_3.П000030007006 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030007003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 7 таблицы 3 превышает значение показателя в графе 3 строки 4 таблицы 3!";
	Если ДанныеРаздела1_3.П000030007003 > ДанныеРаздела1_3.П000030004003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_3", "П000030007003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 3.1.
	
	ТекстОписанияОшибки = "Значение показателя «Итого выплат» в графе 5 таблицы 3.1 не равно значению показателя в графе 3 строки 5 таблицы 3!";
	Если ДанныеРаздела1_31.П000310002005 <> ДанныеРаздела1_3.П000030005003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_31", "П000310002005");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 5.
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 3 таблицы 5 превышает сумму значений показателей в графе 3 строк 4 и 5 таблицы 5!";
	Если (ДанныеРаздела1_5.П000050003003 > ДанныеРаздела1_5.П000050004003 + ДанныеРаздела1_5.П000050005003) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_5", "П000050003003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 3 таблицы 5 меньше значения показателя в графе 3 строки 4 таблицы 5!";
	Если (ДанныеРаздела1_5.П000050003003 < ДанныеРаздела1_5.П000050004003) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_5", "П000050003003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 3 таблицы 5 меньше значения показателя в графе 3 строки 5 таблицы 5!";
	Если (ДанныеРаздела1_5.П000050003003 < ДанныеРаздела1_5.П000050005003) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел1_5", "П000050003003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 6.
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 1 таблицы 6 меньше нуля!";
	Если (ДанныеРаздела2_6_7.П000060001103 < 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000060001103");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 1 таблицы 6 не равно значению показателя в графе 3 по строке 2 таблицы 6 (расчет за 1-й квартал)!";
	Если (Параметры.ОтчПериод = "03" И ДанныеРаздела2_6_7.П000060001103 <> ДанныеРаздела2_6_7.П000060001203) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000060001103");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 1 таблицы 6 меньше нуля!";
	Если ДанныеРаздела2_6_7.П000060001104 < 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000060001104");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 1 таблицы 6 не равно значению показателя в графе 4 по строке 2 таблицы 6 (расчет за 1-й квартал)!";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела2_6_7.П000060001104 <> ДанныеРаздела2_6_7.П000060001204 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000060001104");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 1 таблицы 6 превышает значение показателя в графе 3 строки 1 таблицы 6!";
	Если ДанныеРаздела2_6_7.П000060001104 > ДанныеРаздела2_6_7.П000060001103 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000060001104");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 1 таблицы 6 не равно нулю при нулевом значении показателя «из них: работающих инвалидов» титульного листа!";
	Если Параметры.ЧислИнвалидов = 0 И ДанныеРаздела2_6_7.П000060001104 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000060001104");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 1 таблицы 6 меньше нуля!";
	Если ДанныеРаздела2_6_7.П000060001105 < 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000060001105");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 1 таблицы 6 не равно значению показателя в графе 5 строки 2 таблицы 6 (расчет за 1-й квартал)!";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела2_6_7.П000060001105 <> ДанныеРаздела2_6_7.П000060001205 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000060001105");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 7.
	
	ТекстОписанияОшибки = "Значение показателя «на начало отчётного периода» в графе 1 строки 2 таблицы 7 не равно нулю (расчет за 1-й квартал)!";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела2_6_7.П000070002001 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000070002001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя «на начало отчётного периода» в графе 1 строки 11 таблицы 7 не равно нулю (расчет за 1-й квартал)!";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела2_6_7.П000070011001 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000070011001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 11 таблицы 7 не равно значению показателя в графе 4 строки 10 таблицы 8!";
	Если ДанныеРаздела2_6_7.П000070011003 <> ДанныеРаздела2_8_9.П000080010004 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000070011001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя «на начало отчётного периода» в графе 1 строки 12 таблицы 7 не равно нулю (расчет за 1-й квартал)!";
	Если Параметры.ОтчПериод = "03" И ДанныеРаздела2_6_7.П000070012001 <> 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000070012001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 15 таблицы 7 не равно разности показателей в графе 3 строк 8 и 14 таблицы 7, при значении показателя в графе 3 строки 8 превышающем значение показателя в графе 3 строки 14!";
	Если ДанныеРаздела2_6_7.П000070015003 <> Макс(ДанныеРаздела2_6_7.П000070008003 - ДанныеРаздела2_6_7.П000070014003, 0) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000070008003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 16 таблицы 7 превышает значение показателя в графе 3 строки 15 таблицы 7!";
	Если (ДанныеРаздела2_6_7.П000070016003 > ДанныеРаздела2_6_7.П000070015003) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000070016003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Сумма значений показателей в графе 3 строк 8 и 9 таблицы 7 не равна сумме значений показателей в графе 3 строк 14 и 15 таблицы 7!";
	Если ДанныеРаздела2_6_7.П000070008003 + ДанныеРаздела2_6_7.П000070009003 <> ДанныеРаздела2_6_7.П000070014003 + ДанныеРаздела2_6_7.П000070015003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_6_7", "П000070008003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 8.
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 7 таблицы 8 меньше значения показателя в графе 3 строки 8 таблицы 8!";
	Если ДанныеРаздела2_8_9.П000080007003 < ДанныеРаздела2_8_9.П000080008003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_8_9", "П000080007003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 7 таблицы 8 меньше значения показателя в графе 4 строки 8 таблицы 8!";
	Если ДанныеРаздела2_8_9.П000080007004 < ДанныеРаздела2_8_9.П000080008004 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_8_9", "П000080007004");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 9.
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 2 таблицы 9 превышает значение показателя в графе 3 строки 1 таблицы 9!";
	Если ДанныеРаздела2_8_9.П000090002003 > ДанныеРаздела2_8_9.П000090001003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_8_9", "П000090002003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 5 таблицы 9 превышает значение показателя в графе 3 строки 4 таблицы 9!";
	Если ДанныеРаздела2_8_9.П000090005003 > ДанныеРаздела2_8_9.П000090004003 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2_8_9", "П000090005003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыходЗаГраницыДопуска(Сумма1, Сумма2)
	
	Возврат (Сумма1 < Сумма2-1) ИЛИ (Сумма1 > Сумма2+1);
	
КонецФункции

Процедура ПроверитьВероятностныеОшибкиЗаполнения()
	
	ИНН = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИНН"));
	Если Лев(ИНН, 2) = "00" Тогда
		ИНН = Сред(ИНН, 3);
	КонецЕсли;
	
	КПП = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП"));
	
	РегистрационныйНомерСтрахователя = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОргФССКод_"));
	ДополнительныйКод = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ДополнительныйКод_"));
	
	Если ЗначениеЗаполнено(РегистрационныйНомерСтрахователя) Тогда
		Если РегистрационныйНомерСтрахователя = ИНН ИЛИ РегистрационныйНомерСтрахователя = КПП Тогда
			Сообщить("Проверьте правильность указания регистрационного номера страхователя! Возможно, регистрационный номер страхователя указан неверно!");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныйКод) Тогда
		Если ДополнительныйКод = ИНН ИЛИ ДополнительныйКод = КПП Тогда
			Сообщить("Проверьте правильность указания дополнительного кода! Возможно, дополнительный код указан неверно!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СкопироватьУзел(Родитель, Узел)
	
	РодительСтрока = ?(Родитель = Неопределено, Узел.Владелец(), Родитель);
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = РодительСтрока.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = РодительСтрока.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= РодительСтрока.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = РодительСтрока.Строки.Добавить();
	Иначе
		НовыйУзел = РодительСтрока.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(Параметры, УзелРодитель)
	
	// выгружаем титульный лист
	УзелTITLE = ПолучитьПодчиненныйЭлемент(УзелРодитель, "TITLE");
	ЗаполнитьДаннымиУзел(Параметры, УзелTITLE);
	
	Раздел1_1  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_1;
	Раздел1_2  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_2;
	Раздел1_3  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_3;
	Раздел1_31 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_31;
	Раздел1_4  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_4;
	Раздел1_41 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_41;
	Раздел1_42 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_42;
	Раздел1_43 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_43;
	Раздел1_44 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_44;
	Раздел1_5  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_5;
	
	Раздел2_6_7  = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_6_7;
	Раздел2_8_9  = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_8_9;
	
	УзелF4INF1 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "F4INF1");
	ЗаполнитьДаннымиУзел(Раздел1_1,  УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_2,  УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_3,  УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_4,  УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_41, УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_42, УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_43, УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_44, УзелF4INF1);
	
	// Выгрузка таблицы 3.1 (многострочная).
	УзелF4INVALШаблон = ПолучитьПодчиненныйЭлемент(УзелF4INF1, "F4INVAL");
	
	НомСтр = 1;
	Пока СвойствоОпределено(Раздел1_31, "П000310001001_" + Формат(НомСтр, "ЧГ=")) Цикл
		ФИОИнвалидаЗаполнено = ЗначениеЗаполнено(Раздел1_31["П000310001002_" + Формат(НомСтр, "ЧГ=")]);
		Если ФИОИнвалидаЗаполнено Тогда
			УзелF4INVAL = СкопироватьУзел(УзелF4INF1, УзелF4INVALШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел1_31, УзелF4INVAL, НомСтр);
			
			ФИО = РазложитьФИО(ВРЕГ(Раздел1_31["П000310001002_" + Формат(НомСтр, "ЧГ=")]));
			ЗадатьЗначениеЭлемента(УзелF4INVAL, "LNAME", ФИО.Фамилия);
			ЗадатьЗначениеЭлемента(УзелF4INVAL, "FNAME", ФИО.Имя);
			ЗадатьЗначениеЭлемента(УзелF4INVAL, "MNAME", ФИО.Отчество);
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	УзелF4INFO = ПолучитьПодчиненныйЭлемент(УзелРодитель, "F4INFO");
	ЗаполнитьДаннымиУзел(Раздел1_5,   УзелF4INFO);
	ЗаполнитьДаннымиУзел(Раздел2_6_7, УзелF4INFO);
	ЗаполнитьДаннымиУзел(Раздел2_8_9, УзелF4INFO);
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ЗаполнитьСодержательнуюЧасть(Параметры, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	РодительСтроки = ?(Стр.Родитель = Неопределено, Стр.Владелец(), Стр.Родитель);
	Возврат (РодительСтроки.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Узел.Значение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0";
	ИначеЕсли Узел.Формат = "D" Тогда
		Возврат Узел.Значение = "0001-01-01";
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "D" Тогда
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd"));
		Иначе
			Узел.Значение = "0001-01-01";
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьДаннымиУзел(Параметры, Стр);
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И СвойствоОпределено(Параметры, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если СвойствоОпределено(Параметры, Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			Сообщить("Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", СтатусСообщения.Важное);
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			Сообщить("Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	
	ПотокXML.ЗаписатьБезОбработки(Символы.ПС + "<?F4FORM version=""0.4""?>");
	
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("F4REPORT");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи, ТихийРежим = Ложь) Экспорт
	
	Если НЕ ТихийРежим Тогда
		ОбъектФайл = Новый Файл(ФайлДляЗаписи);
		Если ОбъектФайл.Существует() Тогда
			Ответ = Вопрос("В указанном каталоге уже существует файл выгрузки с именем """ + ОбъектФайл.Имя + """.
							|Хотите переписать существующий файл?", РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI, , , Символы.ПС);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	
	Если НЕ ТихийРежим Тогда
		Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИнициализироватьВнешнююКомпоненту()
	
	Попытка
		Объект = Новый("Addin.CryptS");
		Возврат Истина;
	Исключение
	КонецПопытки;
	
	ВремФайлКомпоненты = ПолучитьИмяВременногоФайла();
	Попытка
		РегламентированнаяОтчетность.РеглОтчеты("РегламентированныйОтчет4ФСС").ПолучитьМакет("КомпонентаОбмена").Записать(ВремФайлКомпоненты);
	Исключение
		Сообщить("Не удалось выгрузить внешнюю компоненту ExtIntgr.dll в каталог программы:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	ПолноеИмяФайлаКомпоненты = КаталогПрограммы() + "ExtIntgr.dll";
	Попытка
		ПереместитьФайл(ВремФайлКомпоненты, ПолноеИмяФайлаКомпоненты);
	Исключение
		ОбъектФайлКомпоненты = Новый Файл(ПолноеИмяФайлаКомпоненты);
		Если ОбъектФайлКомпоненты.Существует() Тогда
			СравнениеФайлов = Новый СравнениеФайлов;
			СравнениеФайлов.ПервыйФайл = ВремФайлКомпоненты;
			СравнениеФайлов.ВторойФайл = ПолноеИмяФайлаКомпоненты;
			Если НЕ СравнениеФайлов.Сравнить() Тогда
				Сообщить("Не удалось заменить внешнюю компоненту ExtIntgr.dll в каталоге программы.
						|Несоответствие версий компоненты требуемой может привести к некорректной работе программы!" , СтатусСообщения.Важное);
			КонецЕсли;
		Иначе
			Сообщить("Не удалось выгрузить внешнюю компоненту ExtIntgr.dll в каталог программы:
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
	Попытка
		ЗагрузитьВнешнююКомпоненту(ПолноеИмяФайлаКомпоненты);
	Исключение
		Сообщить("Не удалось загрузить внешнюю компоненту ExtIntgr.dll:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьОбъектДляРаботыСКриптографией()
	Перем ИмяКриптопровайдера, ТипКриптопровайдера;
	Попытка
		Крипт = Новый("Addin.CryptS");
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// ищем криптопровайдеров в системе
	Криптопровайдеры = Новый ТаблицаЗначений;
	Криптопровайдеры.Колонки.Добавить("Имя");
	Криптопровайдеры.Колонки.Добавить("Тип");
	Пока Крипт.ПолучитьСледующийКриптопровайдер(ИмяКриптопровайдера, ТипКриптопровайдера) Цикл
		НовСтр = Криптопровайдеры.Добавить();
		НовСтр.Имя = ИмяКриптопровайдера;
		НовСтр.Тип = ТипКриптопровайдера;
	КонецЦикла;

	// ищем криптопровайдера в ИБ
	ПараметрыКриптографии = ПолучитьПараметрыКриптографии(Криптопровайдеры);
	КонстИмяКриптопровайдера = ПараметрыКриптографии["ИмяКриптопровайдера"];
	КонстТипКриптопровайдера = ПараметрыКриптографии["ТипКриптопровайдера"];
	Для Каждого СтрКриптопровайдер Из Криптопровайдеры Цикл
		Если СокрЛП(КонстИмяКриптопровайдера) = СокрЛП(СтрКриптопровайдер.Имя) И КонстТипКриптопровайдера = СтрКриптопровайдер.Тип Тогда
			Крипт.ИмяКриптопровайдера = КонстИмяКриптопровайдера;
			Крипт.ТипКриптопровайдера = КонстТипКриптопровайдера;
			Возврат Крипт;
		КонецЕсли;
	КонецЦикла;
	
	// если криптопровайдер не найден, то сообщим об этом пользователю
	Сообщить("Криптопровайдер """ + КонстИмяКриптопровайдера + """ (тип: " + КонстТипКриптопровайдера + ") не установлен в системе.", СтатусСообщения.Важное);
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПараметрыКриптографии(Криптопровайдеры) Экспорт
	
	ПрисутствуетЗаполненныйПараметр = Ложь;
	
	ПараметрыКриптографии = Новый Соответствие;
	ПараметрыКриптографии.Вставить("ИмяКриптопровайдера");
	ПараметрыКриптографии.Вставить("ТипКриптопровайдера");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера КАК ИмяКриптопровайдера,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера КАК ТипКриптопровайдера
	                      |ИЗ
	                      |	Константы КАК Константы");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого ПараметрКриптографии Из ПараметрыКриптографии Цикл
			ПараметрыКриптографии.Вставить(ПараметрКриптографии.Ключ, Выборка[ПараметрКриптографии.Ключ]);
			Если ЗначениеЗаполнено(Выборка[ПараметрКриптографии.Ключ]) Тогда
				ПрисутствуетЗаполненныйПараметр = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПрисутствуетЗаполненныйПараметр Тогда
		ПараметрыКриптографии.Вставить("АлгоритмПодписания", 11811);
		ПараметрыКриптографии.Вставить("АлгоритмШифрования", 43556);
		ПараметрыКриптографии.Вставить("АлгоритмХешФункции", 32798);
		ПараметрыКриптографии.Вставить("АлгоритмГенерацииСессионногоКлюча", 26142);
		Возврат ПараметрыКриптографии;
	Иначе
		Возврат ПолучитьПараметрыКриптографииПоУмолчанию(Криптопровайдеры);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрыКриптографииПоУмолчанию(Криптопровайдеры) Экспорт
	
	ИмяКриптоПро = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
	ТипКриптоПро = 75;
	
	ИмяВиПНет = "Infotecs Cryptographic Service Provider";
	ТипВиПНет = 2;
	
	ПараметрыКриптографии = Новый Соответствие;
	
	// сначала пытаемся найти криптопровайдер КриптоПро
	Если Криптопровайдеры.НайтиСтроки(Новый Структура("Имя, Тип", ИмяКриптоПро, ТипКриптоПро)).Количество() > 0 Тогда
		ПараметрыКриптографии.Вставить("ИмяКриптопровайдера", ИмяКриптоПро);
		ПараметрыКриптографии.Вставить("ТипКриптопровайдера", ТипКриптоПро);
		
	// если криптопровайдер КриптоПро не установлен, то пытаемся найти ВиПНет
	ИначеЕсли Криптопровайдеры.НайтиСтроки(Новый Структура("Имя, Тип", ИмяВиПНет, ТипВиПНет)).Количество() > 0 Тогда
		ПараметрыКриптографии.Вставить("ИмяКриптопровайдера", ИмяВиПНет);
		ПараметрыКриптографии.Вставить("ТипКриптопровайдера", ТипВиПНет);
		
	// если не найдены ни КриптоПро, ни ВиПНет, то возвращаем результат, как для КриптоПро
	Иначе
		ПараметрыКриптографии.Вставить("ИмяКриптопровайдера", ИмяКриптоПро);
		ПараметрыКриптографии.Вставить("ТипКриптопровайдера", ТипКриптоПро);
	КонецЕсли;
	
	// идентификаторы одинаковы для обоих провайдеров
	ПараметрыКриптографии.Вставить("АлгоритмПодписания", 11811);
	ПараметрыКриптографии.Вставить("АлгоритмШифрования", 43556);
	ПараметрыКриптографии.Вставить("АлгоритмХешФункции", 32798);
	ПараметрыКриптографии.Вставить("АлгоритмГенерацииСессионногоКлюча", 26142);
	
	Возврат ПараметрыКриптографии;
	
КонецФункции

Процедура УдалитьВременныйФайл(ИмяФайла)
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыгрузитьПакет(Кнопка)
	
	РезультатВыгрузки = ВыгрузитьПакет();
	Если ЗначениеЗаполнено(РезультатВыгрузки) Тогда
		Сообщить("Пакет успешно выгружен в файл """ + РезультатВыгрузки + """.", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыФормированияПакета(КодСтрахователя, КодОрганаФСС)
	
	ФормаПараметров = ПолучитьФорму("ПараметрыФормированияПакета");
	ФормаПараметров.КодСтрахователя = КодСтрахователя;
	ФормаПараметров.КодОрганаФСС = КодОрганаФСС;
	Возврат ФормаПараметров.ОткрытьМодально();
	
КонецФункции

Функция ПолучитьКодыСтрахователяИОрганаФСС()
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Титульный = ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	
	КодОрганаФСС = СокрЛП(Титульный.КодОрганаФСС1)
	             + СокрЛП(Титульный.КодОрганаФСС2)
	             + СокрЛП(Титульный.КодОрганаФСС3)
	             + СокрЛП(Титульный.КодОрганаФСС4);
	
	ОргФССКод = СокрЛП(Титульный.ОргФССКод_1) + СокрЛП(Титульный.ОргФССКод_2) + СокрЛП(Титульный.ОргФССКод_3)
	          + СокрЛП(Титульный.ОргФССКод_4) + СокрЛП(Титульный.ОргФССКод_5) + СокрЛП(Титульный.ОргФССКод_6)
	          + СокрЛП(Титульный.ОргФССКод_7) + СокрЛП(Титульный.ОргФССКод_8) + СокрЛП(Титульный.ОргФССКод_9)
	          + СокрЛП(Титульный.ОргФССКод_10);
	
	ДопКодФСС = СокрЛП(Титульный.ДополнительныйКод_1) + СокрЛП(Титульный.ДополнительныйКод_2) + СокрЛП(Титульный.ДополнительныйКод_3)
	          + СокрЛП(Титульный.ДополнительныйКод_4) + СокрЛП(Титульный.ДополнительныйКод_5) + СокрЛП(Титульный.ДополнительныйКод_6)
	          + СокрЛП(Титульный.ДополнительныйКод_7) + СокрЛП(Титульный.ДополнительныйКод_8) + СокрЛП(Титульный.ДополнительныйКод_9)
	          + СокрЛП(Титульный.ДополнительныйКод_10);
	
	Возврат Новый Структура("ОргФССКод, ДополнительныйКод, КодОрганаФСС", ОргФССКод, ДопКодФСС, КодОрганаФСС);
	
КонецФункции

Функция ВыгрузитьПакет()
	
	// инициализируем внешнюю компоненту
	Если НЕ ИнициализироватьВнешнююКомпоненту() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// сохраняем при необходимости
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// извлекаем регистрационный номер страхователя и код органа ФСС из данных программы
	КодыОтчета=  ПолучитьКодыСтрахователяИОрганаФСС();
	ОргФССКод = ?(ЗначениеЗаполнено(КодыОтчета.ДополнительныйКод), СокрЛП(КодыОтчета.ДополнительныйКод), СокрЛП(КодыОтчета.ОргФССКод));
	КодОрганаФСС = СокрЛП(КодыОтчета.КодОрганаФСС);
	Если НЕ ЗначениеЗаполнено(ОргФССКод) Тогда
		Сообщить("Не задан регистрационный номер страхователя.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КодОрганаФСС) Тогда
		Сообщить("Не задан код органа ФСС.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// запрашиваем параметры формирования пакета
	ПараметрыФормированияПакета = ПолучитьПараметрыФормированияПакета(ОргФССКод, КодОрганаФСС);
	Если НЕ ЗначениеЗаполнено(ПараметрыФормированияПакета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	СертификатСтрахователя = ПараметрыФормированияПакета.СертификатСтрахователя;
	СертификатФСС = ПараметрыФормированияПакета.СертификатФСС;
	КаталогВыгрузки = ПараметрыФормированияПакета.КаталогВыгрузки;
	
	// формируем файл выгрузки
	ДокВыгрузки = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	ПолноеИмяФайлаВыгрузки = ДокВыгрузки.ПолучитьФорму().ВыгрузитьОтчет(мСохраненныйДок.Ссылка, Ложь);
	Если ПолноеИмяФайлаВыгрузки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектФайлВыгрузки = Новый Файл(ПолноеИмяФайлаВыгрузки);
	ВременныйКаталог = ОбъектФайлВыгрузки.Путь;
	ИмяФайлаВыгрузкиБезРасширения = ОбъектФайлВыгрузки.ИмяБезРасширения;
	
	// инициализируем объект для работы с криптографией
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		УдалитьВременныйФайл(ВременныйКаталог);
		Возврат Неопределено;
	КонецЕсли;
	
	// подписываем
	Состояние("Подписание и шифрование файла выгрузки ...");
	КороткоеИмяЗашифрованногоПакета = ИмяФайлаВыгрузкиБезРасширения + ".ef4";
	ЗашифрованныйПакет = КаталогВыгрузки + КороткоеИмяЗашифрованногоПакета;
	Попытка
		Крипт.PKCS7ПодписатьСДаннымиИЗашифровать(ПолноеИмяФайлаВыгрузки, СертификатСтрахователя.СерийныйНомер, СертификатСтрахователя.Поставщик, СертификатФСС.СерийныйНомер, СертификатФСС.Поставщик, ЗашифрованныйПакет);
	Исключение
		УдалитьВременныйФайл(ВременныйКаталог);
		Сообщить("Не удалось подписать и зашифровать файл выгрузки:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	// удаляем каталог с временным файлом выгрузки
	Состояние("Удаление временных файлов ...");
	УдалитьВременныйФайл(ВременныйКаталог);
	
	Возврат ЗашифрованныйПакет;
	
КонецФункции

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыОтправить(Кнопка)
	
	// сохраняем при необходимости
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОтправкаОбъектаВФСС(мСохраненныйДок.Ссылка);
КонецПроцедуры

Процедура КоманднаяПанельФормыПоказатьОтправки(Кнопка)
	
	Ссылка4ФСС = ?(мСохраненныйДок <> Неопределено, мСохраненныйДок.Ссылка, Документы.РегламентированныйОтчет.ПустаяСсылка());
	РегламентированнаяОтчетность.ПоказатьОтправки4ФСС(Ссылка4ФСС);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПолучитьРезультат(Кнопка)
	Если мСохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ОбновитьРезультатОтправки4ФСС(мСохраненныйДок.Ссылка) Тогда
		// покажем протокол текущей отправки
		ПоказатьПротоколТекущейОтправки()
	КонецЕсли;
КонецПроцедуры

Процедура Подключаемый_КоманднаяПанельФормыПоказатьРезультат(Кнопка)
	// покажем протокол текущей отправки
	ПоказатьПротоколТекущейОтправки();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ПоказатьПротоколТекущейОтправки()
	Если мСохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОтправки = РегламентированнаяОтчетность.ПолучитьРеквизитыОтправки4ФСС(мСохраненныйДок.Ссылка, Истина);
	
	Если РеквизитыОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаголовокПротокола = "Протокол обработки";
	РегламентированнаяОтчетность.ПоказатьПротоколОбработки(РеквизитыОтправки.Протокол.Получить(), ЗаголовокПротокола);
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел1_31Нажатие(Элемент)
	ВставитьДополнительнуюСтроку();
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел1_31Нажатие(Элемент)
	УдалитьДополнительнуюСтроку();
КонецПроцедуры

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если СпециальноеДобавление Тогда
		//Форма.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе
		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;

		Если ИмяКолонкиНомера <> Неопределено Тогда
			Если ИмяКолонкиНомера = ИмяКолонки Тогда
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Значение = КолСтрокСтр1;
				Иначе
					ОбластьЯчейки.Текст = КолСтрокСтр1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр1;

		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Модифицированность = Истина;
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
		  + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ТаблицаЗначений") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.Найти(ИмяГруппы, "ИдГруппы").Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			// Запустим единую процедуру удаляющая строку по специальному алгоритму
			// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
			//СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		Иначе
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		// Восстановим область.
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					КолонкаИмя = Колонка.Имя;
					ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
					НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;

					ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаИмя Тогда
							// обновляем порядковый номер строки

							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;

				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						// обновляем порядковый номер строки
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;
	
	Расчет();

КонецПроцедуры // УдалитьДополнительнуюСтроку()

Процедура НомерКорректировкиПриИзменении(Элемент)
	ОтобразитьНомерКорректировки();
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей2012Кв1";
мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

ОписаниеТиповЧисло  = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
ОписаниеТиповЧисло5 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5);

ОписаниеТиповЧислоЧ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6, 0);

ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

ОписаниеТиповДата = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП.
// Идентификаторы многострочных групп.
мИдГруппы1  = "П0003100010";

// Количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда).
КолИсхСтрокИдГруппы1 = 40;

// Структура строк многострочного раздела на странице.
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000310001001", ОписаниеТиповЧисло5);
СтруктураГруппы1.Колонки.Добавить("П000310001002", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000310001003", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П000310001004", ОписаниеТиповДата);
СтруктураГруппы1.Колонки.Добавить("П000310001005", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000310001006", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000310001007", ОписаниеТиповЧисло);
СтруктураГруппы1.Колонки.Добавить("П000310001008", ОписаниеТиповЧисло);

// Структура многострочных разделов формы.
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);

// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);

ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен
ЦветБелый = Новый Цвет(255, 255, 255);
ЦветЖелтый = Новый Цвет(255, 255, 192);

// Структура цветов раскраски автозаполняемых ячеек.
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");

// Структура содержит данные дополнительных страниц.
мСтруктураМногостраничныхРазделов = Новый Структура;

// Версия формы.
мВерсияФормы = "05/04/2012";

// Код отчета условный.
мКодОтчета   = "1159999";

мПечатныеФормы = Новый СписокЗначений;

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");