////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Поля табличного документа
Перем мМПм;
Перем мПриложение1;
Перем мПриложение2;
Перем мПриложение3;

// Используется на титульном листе
Перем мАдресвФорматеДляВыгрузки;

// Хранит номер телефона организации, используется в листе ФЛ, в качестве
// рабочего телефона физического лица в данной организации.
// Инициализируется в процедуре ЗаполнитьСведенияОбОрганизации
Перем мТелИсп;

Перем мВПрограммеИзмененаОрганизация;

// Хранят имена многострочных разделов
Перем мИдГруппы1; // Приложение2.
Перем мИдГруппы2; // Приложение3.

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// Хранит код отчета по КНД
Перем мКодОтчета;

Перем мАвтоВыборКодов Экспорт;
// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем мОписаниеТиповЧислоЕ;
Перем мОписаниеТиповБулево;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;
// 
Перем мДанныеОтчета Экспорт;
// 
Перем ТаблицаСообщений Экспорт;

// Настройка св-в листов
Перем мСвойстваРазделовДекларации Экспорт;

Перем мДокументВосстановлен;

Перем СвойстваПоказателей Экспорт;
Перем КолонкаПоиска Экспорт;

////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления()

	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
// Вывод необходимого номера страницы
// Выводит в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь)

	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу);

КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

// ПолучитьСвойствоРаздела
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция ПолучитьСвойствоРаздела(Знач ИмяСтраницы, Знач ИмяСвойства)

	Возврат РегламентированнаяОтчетность.роПолучитьСвойствоРаздела( ЭтаФорма, ИмяСтраницы, ИмяСвойства);

КонецФункции // ПолучитьСвойствоРаздела

// ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения
//
// Процедура считывает св-ва всех разделов и если раздел является автозаполняемым, то добавляется 3 параметра в элементы форм
//
Процедура ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(Форма) Экспорт

	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);

КонецПроцедуры // ЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения

// Блок обязательных процедур
// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	// В случае, если на листе содержатся адреса и лист является многостраничным, то при переходе
	// по листам и через кнопку Перейти, необходимо обновлять переменные.

	//мСвойстваРазделовДекларации.Колонки.Добавить("ЯчейкиСАдресами");
	//ЯчейкиСАдресами = Новый СписокЗначений;
	//ЯчейкиСАдресами.Добавить("ОргАдрес");

	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", мОписаниеТиповБулево);

	МнгПриложение2 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение2.Добавить();
	НовСтр.ИдГруппы = мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	МнгПриложение3 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгПриложение3.Добавить();
	НовСтр.ИдГруппы = мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "МПм";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела Приложение1
	СтрокаУровня1.ИмяСтраницы                          = "Приложение1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Приложение2
	СтрокаУровня1.ИмяСтраницы                          = "Приложение2";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение2;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;       // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Приложение3
	СтрокаУровня1.ИмяСтраницы                          = "Приложение3";
	СтрокаУровня1.МногострочностьВРазделе              = МнгПриложение3;            // Многострочность в разделе, кол-во областей
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;       // Сохраним как структуру
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;         // Многостраничность
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";           // Для многостраничных разделов, имя представления страницы
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;         // Есть ли квадратики на листе
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель"; // Название панели, в некоторых отчетах по две, три панели кроме "Основной"
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы1 Тогда
		ТекТабличноеПоле = мПриложение2;
	ИначеЕсли ИдГруппы = мИдГруппы2 Тогда
		ТекТабличноеПоле = мПриложение3;
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Имя листа, если известно, на каком листе должна быть многострочность;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Приложение2" Тогда
		ИмяГруппы = мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение3" Тогда
		ИмяГруппы = мИдГруппы2;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
		// Сохраним формат отображения нуля для восстановления представления
		// в поле табличного документа и контроля выгрузки показателя в формате XML
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") И ЗначениеПоказателя = 0 Тогда
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(ТекущаяОбласть.Формат);
			Если ЗначениеЗаполнено(ФорматПредставленияНуля) Тогда
				СтруктураДанныхПоля.Вставить("ЧН" + ИмяПоказателя, ФорматПредставленияНуля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	СтруктураДанныхПоля.Вставить("ОргАдрес", мАдресвФорматеДляВыгрузки);
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

Функция ПолучитьПредставлениеНуляИзСтрокиФормата(СтрокаФормата)
	
	Если ПустаяСтрока(СтрокаФормата) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, ";", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки);
		Если Найти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			Возврат СокрЛП(ПодстрокаФормата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ЗаменитьПредставлениеНуляВСтрокеФормата(СтрокаФормата, ПредставлениеНуля)
	
	НоваяСтрокаФормата = "";
	
	РазделительПодстрок = ";";
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, РазделительПодстрок, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СокрЛП(СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки));
		Если ПустаяСтрока(ПодстрокаФормата) Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			ПодстрокаФормата = ПредставлениеНуля;
		КонецЕсли;
		НоваяСтрокаФормата = НоваяСтрокаФормата + ?(ПустаяСтрока(НоваяСтрокаФормата), "", РазделительПодстрок) + ПодстрокаФормата;
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрокаФормата) Тогда
		Возврат ПредставлениеНуля;
	КонецЕсли;

	Возврат НоваяСтрокаФормата;
	
КонецФункции

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	СтрПериод = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'гггг'") + " год";

	ПериодОтчета = " " + СтрПериод;

	// Период в заголовке отчета
	мМПм.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + ПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

// ЗаполнитьДатуВЯчейках
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт

	мМПм.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");

КонецПроцедуры // ЗаполнитьДатуВЯчейках

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "ОКПО");  // ОКПО
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКАТО");
	КонецЕсли;

	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ФИОИсп");

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ИННЮЛ = "";
		ОКПО = "";
		АдрПочт     = "";
		НаимЮЛПол = "";
		ОснВидДеят = "";
		ОКВЭД = "";
		ОКПО = "";
		ОКАТО = "";

	КонецЕсли;

	ДолжнИсп = "";
	ФИОИсп = "";
	ТелИсп = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("ТелИсп", ТелИсп);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
		ОргСведения.Свойство("ОКВЭД",          ОКВЭД);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("ОКАТО",          ОКАТО);

	КонецЕсли;

	ОргСведения.Свойство("ФИОИсп",         ФИОИсп);
	ОргСведения.Свойство("ДолжнИсп",       ДолжнИсп);
	ОргСведения.Свойство("ТелИсп",         ТелИсп);
	

	Если ВПрограммеИзмененаДатаПодписи Тогда

		мМПм.Области.ОргИсполнитель.Значение = ФИОИсп;
		мМПм.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
		мМПм.Области.ОргТелефонИсп.Значение = ТелИсп;

		Возврат;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мМПм.Области.ОргКодОКПО.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мМПм.Области.ОргКодОКПО.Значение = "";
		Иначе
			мМПм.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;

	КонецЕсли;
	
	Если (РегламентированнаяОтчетность.ПустоеЗначение(мМПм.Области.ОргКодОКВЭД.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мМПм.Области.ОргКодОКВЭД.Значение = "";
		Иначе
			мМПм.Области.ОргКодОКВЭД.Значение = ОКВЭД;
		КонецЕсли;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мМПм.Области.ОргНазв.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мМПм.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мМПм.Области.ОргАдрес.Значение)) Тогда

		Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			
			мМПм.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			мАдресвФорматеДляВыгрузки = АдрПочт;
		Иначе
			мМПм.Области.ОргАдрес.Значение = "";
			мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мМПм.Области.ОргИсполнитель.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мМПм.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мМПм.Области.ОргДолжностьИсп.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мМПм.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мМПм.Области.ОргТелефонИсп.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мМПм.Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мПриложение1.Области.ОргНазв.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мПриложение1.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (РегламентированнаяОтчетность.ПустоеЗначение(мПриложение1.Области.ОргКодОКПО.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мПриложение1.Области.ОргКодОКПО.Значение = "";
		Иначе
			мПриложение1.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мПриложение2.Области.ОргНазв.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мПриложение2.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (РегламентированнаяОтчетность.ПустоеЗначение(мПриложение2.Области.ОргКодОКПО.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мПриложение2.Области.ОргКодОКПО.Значение = "";
		Иначе
			мПриложение2.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;

	КонецЕсли;
	
	Если (РегламентированнаяОтчетность.ПустоеЗначение(мПриложение3.Области.ОргНазв.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мПриложение3.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (РегламентированнаяОтчетность.ПустоеЗначение(мПриложение3.Области.ОргКодОКПО.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда

		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мПриложение3.Области.ОргКодОКПО.Значение = "";
		Иначе
			мПриложение3.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()


// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = 0; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = 0; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = 0; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;

	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;
	ФормаНастройкиОтчета.мПараметры.ЗначенияИзСписка = Истина;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Ложь;
	
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницы) Экспорт

	ИмяСтраницыР = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	// Процедура "Заглушка" не удалять!

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	РегламентированнаяОтчетность.роВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле) Экспорт
	
	ОргНазв = мМПм.Области.ОргНазв.Значение;
	ОргАдрес = мМПм.Области.ОргАдрес.Значение;
	ОргКодОКПО = мМПм.Области.ОргКодОКПО.Значение;
	ОргКодОКВЭД = мМПм.Области.ОргКодОКВЭД.Значение;
	ОргДолжностьИсп = мМПм.Области.ОргДолжностьИсп.Значение;
    ОргИсполнитель = мМПм.Области.ОргИсполнитель.Значение;
	ОргТелефонИсп = мМПм.Области.ОргТелефонИсп.Значение;
	ОргКодНазв = мМПм.Области.ОргКодНазв.Значение;
	ОргКодНазв1 = мМПм.Области.ОргКодНазв1.Значение;
	ОргКодЗнач = мМПм.Области.ОргКодЗнач.Значение;
	ОргКодЗнач1 = мМПм.Области.ОргКодЗнач1.Значение;

    РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
	
	мМПм.Области.ОргНазв.Значение = ОргНазв;
	мМПм.Области.ОргАдрес.Значение = ОргАдрес;
	мМПм.Области.ОргКодОКПО.Значение = ОргКодОКПО;
	мМПм.Области.ОргКодОКВЭД.Значение = ОргКодОКВЭД;
	мМПм.Области.ОргДолжностьИсп.Значение = ОргДолжностьИсп;
    мМПм.Области.ОргИсполнитель.Значение = ОргИсполнитель;
	мМПм.Области.ОргТелефонИсп.Значение = ОргТелефонИсп;
	мМПм.Области.ОргКодНазв.Значение = ОргКодНазв;
	мМПм.Области.ОргКодНазв1.Значение = ОргКодНазв1;
	мМПм.Области.ОргКодЗнач.Значение = ОргКодЗнач;
	мМПм.Области.ОргКодЗнач1.Значение = ОргКодЗнач1;
    мПриложение1.Области.ОргНазв.Значение = ОргНазв;
	мПриложение1.Области.ОргКодОКПО.Значение = ОргКодОКПО;
    мПриложение2.Области.ОргНазв.Значение = ОргНазв;
	мПриложение2.Области.ОргКодОКПО.Значение = ОргКодОКПО;
    мПриложение3.Области.ОргНазв.Значение = ОргНазв;
	мПриложение3.Области.ОргКодОКПО.Значение = ОргКодОКПО;
    
    Расчет();	
КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	// ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма,, Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = Неопределено;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = 0;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	// Сохраняем все текущие страницы многостраничных разделов в структуру
	ОбновитьСтруктуруМногострочныхРазделов();
	ОбновитьСтруктуруМногостраничныхРазделов();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!

		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоСтраницОтчета();

	КлючУникальности = мСохраненныйДок.Ссылка;

	// всё прошло без ошибок
	Модифицированность = Ложь;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;
		

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			РегламентированнаяОтчетность.роВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	мАвтоВыборКодов = ?(мАвтоВыборКодов = Неопределено, Ложь, мАвтоВыборКодов);

	// ДанныеВариановАвтоЗаполнения - всегда восстанавливаем первее чем Данные Многостраничных Разделов
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета);

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда

		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			ПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;
	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ИмяЛиста = СтрЗаменить(ТекТабличноеПоле.Имя,"ПолеТабличногоДокумента","");

		ПредставлениеДанных = ПолучитьСвойствоРаздела(ИмяТекТабличноеПоле, "ПредставлениеДанных");
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить; // Пропустим цикл
				КонецЕсли;
			КонецЕсли;

			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// значение показателя с префиксом "ЧН" содержит формат представления нуля
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли; 
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	мАдресвФорматеДляВыгрузки = мМПм.Области.ОргАдрес.Значение;
	мМПм.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	// Функция "заглушка" для универсальности. Не удалять.
	Возврат Ложь;

КонецФункции // ОбновитьПеременныеМодуля

// Процедура РАСЧЕТ ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	Если ИмяТекущейСтраницыПанели = "Приложение2" Тогда
		
		мПриложение2.Области.П0000200019003.Значение = мПриложение2.Области.П0000200020003.Значение
													 + мПриложение2.Области.П0000200021003.Значение
													 + мПриложение2.Области.П0000200022003.Значение
													 + мПриложение2.Области.П0000200023003.Значение
													 + мПриложение2.Области.П0000200024003.Значение
													 + мПриложение2.Области.П0000200025003.Значение
													 + мПриложение2.Области.П0000200026003.Значение
													 + мПриложение2.Области.П0000200027003.Значение;
													 
		мПриложение2.Области.П0000300030003.Значение = мПриложение2.Области.П0000300031003.Значение
													 + мПриложение2.Области.П0000300032003.Значение
													 + мПриложение2.Области.П0000300034003.Значение
													 + мПриложение2.Области.П0000300035003.Значение;
													 
		мПриложение2.Области.П0000300030004.Значение = мПриложение2.Области.П0000300031004.Значение
													 + мПриложение2.Области.П0000300032004.Значение
													 + мПриложение2.Области.П0000300034004.Значение
													 + мПриложение2.Области.П0000300035004.Значение;
													 
		мПриложение2.Области.П0000400036004.Значение = мПриложение2.Области.П0000400037004.Значение
													 + мПриложение2.Области.П0000400039004.Значение
													 + мПриложение2.Области.П0000400040004.Значение
													 + мПриложение2.Области.П0000400041004.Значение
													 + мПриложение2.Области.П0000400042004.Значение
													 + мПриложение2.Области.П0000400043004.Значение
													 + мПриложение2.Области.П0000400044004.Значение
													 + мПриложение2.Области.П0000400045004.Значение
													 + мПриложение2.Области.П0000400046004.Значение
													 + мПриложение2.Области.П0000400047004.Значение
													 + мПриложение2.Области.П0000400048004.Значение
													 + мПриложение2.Области.П0000400051004.Значение
													 + мПриложение2.Области.П0000400052004.Значение
													 + мПриложение2.Области.П0000400053004.Значение
													 + мПриложение2.Области.П0000400054004.Значение
													 + мПриложение2.Области.П0000400055004.Значение
													 + мПриложение2.Области.П0000400056004.Значение
													 + мПриложение2.Области.П0000400057004.Значение
													 + мПриложение2.Области.П0000400058004.Значение
													 + мПриложение2.Области.П0000400059004.Значение
													 + мПриложение2.Области.П0000400060004.Значение
													 + мПриложение2.Области.П0000400061004.Значение
													 + мПриложение2.Области.П0000400062004.Значение
													 + мПриложение2.Области.П0000400063004.Значение
													 + мПриложение2.Области.П0000400064004.Значение
													 + мПриложение2.Области.П0000400065004.Значение
													 + мПриложение2.Области.П0000400066004.Значение
													 + мПриложение2.Области.П0000400067004.Значение
													 + мПриложение2.Области.П0000400068004.Значение
													 + мПриложение2.Области.П0000400069004.Значение
													 + мПриложение2.Области.П0000400070004.Значение
													 + мПриложение2.Области.П0000400071004.Значение
													 + мПриложение2.Области.П0000400072004.Значение
													 + мПриложение2.Области.П0000400073004.Значение
													 + мПриложение2.Области.П0000400074004.Значение
													 + мПриложение2.Области.П0000400075004.Значение
													 + мПриложение2.Области.П0000400076004.Значение;
													 
		мПриложение2.Области.П0000400036005.Значение = мПриложение2.Области.П0000400039005.Значение
													 + мПриложение2.Области.П0000400040005.Значение
													 + мПриложение2.Области.П0000400041005.Значение
													 + мПриложение2.Области.П0000400042005.Значение
													 + мПриложение2.Области.П0000400043005.Значение
													 + мПриложение2.Области.П0000400044005.Значение
													 + мПриложение2.Области.П0000400045005.Значение
													 + мПриложение2.Области.П0000400046005.Значение
													 + мПриложение2.Области.П0000400047005.Значение
													 + мПриложение2.Области.П0000400048005.Значение
													 + мПриложение2.Области.П0000400051005.Значение
													 + мПриложение2.Области.П0000400052005.Значение
													 + мПриложение2.Области.П0000400053005.Значение
													 + мПриложение2.Области.П0000400054005.Значение
													 + мПриложение2.Области.П0000400055005.Значение
													 + мПриложение2.Области.П0000400056005.Значение
													 + мПриложение2.Области.П0000400057005.Значение
													 + мПриложение2.Области.П0000400058005.Значение
													 + мПриложение2.Области.П0000400059005.Значение
													 + мПриложение2.Области.П0000400060005.Значение
													 + мПриложение2.Области.П0000400061005.Значение
													 + мПриложение2.Области.П0000400062005.Значение
													 + мПриложение2.Области.П0000400063005.Значение
													 + мПриложение2.Области.П0000400064005.Значение
													 + мПриложение2.Области.П0000400065005.Значение
													 + мПриложение2.Области.П0000400066005.Значение
													 + мПриложение2.Области.П0000400067005.Значение
													 + мПриложение2.Области.П0000400068005.Значение
													 + мПриложение2.Области.П0000400069005.Значение
													 + мПриложение2.Области.П0000400070005.Значение
													 + мПриложение2.Области.П0000400071005.Значение
													 + мПриложение2.Области.П0000400072005.Значение
													 + мПриложение2.Области.П0000400073005.Значение
													 + мПриложение2.Области.П0000400074005.Значение
													 + мПриложение2.Области.П0000400075005.Значение;
											 
		мПриложение2.Области.П0000400036003.Значение = мПриложение2.Области.П0000400036004.Значение
													 + мПриложение2.Области.П0000400036005.Значение;
													 
		мПриложение2.Области.П0000400037003.Значение = мПриложение2.Области.П0000400037004.Значение;
													 
		мПриложение2.Области.П0000400038003.Значение = мПриложение2.Области.П0000400038004.Значение;
													 
		мПриложение2.Области.П0000400039003.Значение = мПриложение2.Области.П0000400039004.Значение
													 + мПриложение2.Области.П0000400039005.Значение;
													 
		мПриложение2.Области.П0000400040003.Значение = мПриложение2.Области.П0000400040004.Значение
													 + мПриложение2.Области.П0000400040005.Значение;
													 
		мПриложение2.Области.П0000400041003.Значение = мПриложение2.Области.П0000400041004.Значение
													 + мПриложение2.Области.П0000400041005.Значение;
													 
		мПриложение2.Области.П0000400042003.Значение = мПриложение2.Области.П0000400042004.Значение
													 + мПриложение2.Области.П0000400042005.Значение;
													 
		мПриложение2.Области.П0000400043003.Значение = мПриложение2.Области.П0000400043004.Значение
													 + мПриложение2.Области.П0000400043005.Значение;
													 
		мПриложение2.Области.П0000400044003.Значение = мПриложение2.Области.П0000400044004.Значение
													 + мПриложение2.Области.П0000400044005.Значение;
													 
		мПриложение2.Области.П0000400045003.Значение = мПриложение2.Области.П0000400045004.Значение
													 + мПриложение2.Области.П0000400045005.Значение;
													 
		мПриложение2.Области.П0000400046003.Значение = мПриложение2.Области.П0000400046004.Значение
													 + мПриложение2.Области.П0000400046005.Значение;
													 
		мПриложение2.Области.П0000400047003.Значение = мПриложение2.Области.П0000400047004.Значение
													 + мПриложение2.Области.П0000400047005.Значение;
													 
		мПриложение2.Области.П0000400048003.Значение = мПриложение2.Области.П0000400048004.Значение
													 + мПриложение2.Области.П0000400048005.Значение;
													 
		мПриложение2.Области.П0000400049003.Значение = мПриложение2.Области.П0000400049004.Значение
													 + мПриложение2.Области.П0000400049005.Значение;
													 
		мПриложение2.Области.П0000400050003.Значение = мПриложение2.Области.П0000400050004.Значение
													 + мПриложение2.Области.П0000400050005.Значение;
													 
		мПриложение2.Области.П0000400051003.Значение = мПриложение2.Области.П0000400051004.Значение
													 + мПриложение2.Области.П0000400051005.Значение;
													 
		мПриложение2.Области.П0000400052003.Значение = мПриложение2.Области.П0000400052004.Значение
													 + мПриложение2.Области.П0000400052005.Значение;
													 
		мПриложение2.Области.П0000400053003.Значение = мПриложение2.Области.П0000400053004.Значение
													 + мПриложение2.Области.П0000400053005.Значение;
													 
		мПриложение2.Области.П0000400054003.Значение = мПриложение2.Области.П0000400054004.Значение
													 + мПриложение2.Области.П0000400054005.Значение;
													 
		мПриложение2.Области.П0000400055003.Значение = мПриложение2.Области.П0000400055004.Значение
													 + мПриложение2.Области.П0000400055005.Значение;
													 
		мПриложение2.Области.П0000400056003.Значение = мПриложение2.Области.П0000400056004.Значение
													 + мПриложение2.Области.П0000400056005.Значение;
													 
		мПриложение2.Области.П0000400057003.Значение = мПриложение2.Области.П0000400057004.Значение
													 + мПриложение2.Области.П0000400057005.Значение;
													 
		мПриложение2.Области.П0000400058003.Значение = мПриложение2.Области.П0000400058004.Значение
													 + мПриложение2.Области.П0000400058005.Значение;
													 
		мПриложение2.Области.П0000400059003.Значение = мПриложение2.Области.П0000400059004.Значение
													 + мПриложение2.Области.П0000400059005.Значение;
													 
		мПриложение2.Области.П0000400060003.Значение = мПриложение2.Области.П0000400060004.Значение
													 + мПриложение2.Области.П0000400060005.Значение;
													 
		мПриложение2.Области.П0000400061003.Значение = мПриложение2.Области.П0000400061004.Значение
													 + мПриложение2.Области.П0000400061005.Значение;
													 
		мПриложение2.Области.П0000400062003.Значение = мПриложение2.Области.П0000400062004.Значение
													 + мПриложение2.Области.П0000400062005.Значение;
													 
		мПриложение2.Области.П0000400063003.Значение = мПриложение2.Области.П0000400063004.Значение
													 + мПриложение2.Области.П0000400063005.Значение;
													 
		мПриложение2.Области.П0000400064003.Значение = мПриложение2.Области.П0000400064004.Значение
													 + мПриложение2.Области.П0000400064005.Значение;
													 
		мПриложение2.Области.П0000400065003.Значение = мПриложение2.Области.П0000400065004.Значение
													 + мПриложение2.Области.П0000400065005.Значение;
													 
		мПриложение2.Области.П0000400066003.Значение = мПриложение2.Области.П0000400066004.Значение
													 + мПриложение2.Области.П0000400066005.Значение;
													 
		мПриложение2.Области.П0000400067003.Значение = мПриложение2.Области.П0000400067004.Значение
													 + мПриложение2.Области.П0000400067005.Значение;
													 
		мПриложение2.Области.П0000400068003.Значение = мПриложение2.Области.П0000400068004.Значение
													 + мПриложение2.Области.П0000400068005.Значение;
													 
		мПриложение2.Области.П0000400069003.Значение = мПриложение2.Области.П0000400069004.Значение
													 + мПриложение2.Области.П0000400068005.Значение;
													 
		мПриложение2.Области.П0000400070003.Значение = мПриложение2.Области.П0000400070004.Значение
													 + мПриложение2.Области.П0000400070005.Значение;
													
		мПриложение2.Области.П0000400071003.Значение = мПриложение2.Области.П0000400071004.Значение
													 + мПриложение2.Области.П0000400071005.Значение;
													 
		мПриложение2.Области.П0000400072003.Значение = мПриложение2.Области.П0000400072004.Значение
													 + мПриложение2.Области.П0000400072005.Значение;
													 
		мПриложение2.Области.П0000400073003.Значение = мПриложение2.Области.П0000400073004.Значение
													 + мПриложение2.Области.П0000400073005.Значение;
													 
		мПриложение2.Области.П0000400074003.Значение = мПриложение2.Области.П0000400074004.Значение
													 + мПриложение2.Области.П0000400074005.Значение;
													 
		мПриложение2.Области.П0000400075003.Значение = мПриложение2.Области.П0000400075004.Значение
													 + мПриложение2.Области.П0000400075005.Значение;
													 
		мПриложение2.Области.П0000400076003.Значение = мПриложение2.Области.П0000400076004.Значение;
													 
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		Расчет("Приложение2");
	КонецЕсли;
	
 КонецПроцедуры // Расчет()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
   	
	СформироватьСпискиВыбора();
	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	мАдресвФорматеДляВыгрузки = "";
		
	// ФормируемСтруктуруСтраницОтчета
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	мВПрограммеИзмененаОрганизация = Ложь;

	мМПм                = ЭлементыФормы.ПолеТабличногоДокументаМПм;
	мПриложение1        = ЭлементыФормы.ПолеТабличногоДокументаПриложение1;
	мПриложение2        = ЭлементыФормы.ПолеТабличногоДокументаПриложение2;
	мПриложение3        = ЭлементыФормы.ПолеТабличногоДокументаПриложение3;
	
	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;

	// ФлОтклВыборЗначений
	мДокументВосстановлен = Ложь;

	// Инициализируем все переменные хранящиеся в квадратных значениях
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления();
	
	мАвтоВыборКодов = Ложь;

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;

	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];

					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;

					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ТочностьЕдиницыИзмерения = 0;
			мМПм.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");

			// По умолчанию - выбраны все листы
			// при восстановлении - сохраненные ранее
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			УстановитьФорматВывода();
		КонецЕсли;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;

		// Пропустим МПм лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "МПм") Или (НазваниеСтраницы = "ФизЛица") Тогда

			Продолжить;

		КонецЕсли;

		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда

			Продолжить;

		КонецЕсли;

		Если НЕ БезОткрытияФормы Тогда
			УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);
		КонецЕсли;

	КонецЦикла;

	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);
	КонецЕсли;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаПриложение2ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаПриложение2ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение2");

КонецПроцедуры // ПолеТабличногоДокументаПриложение2ПриАктивизацииОбласти

Процедура ПолеТабличногоДокументаПриложение3ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение3");

КонецПроцедуры // ПолеТабличногоДокументаПриложение2ПриАктивизацииОбласти

// Процедура ПолеТабличногоДокументаМПмВыбор
// процедура обработчик "Выбор"
//
Процедура ПолеТабличногоДокументаМПмВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбластьИмя = Область.Имя;

	Если ОбластьИмя = "ОргАдрес" Тогда     		
		СтандартнаяОбработка = Ложь;
		
		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресвФорматеДляВыгрузки);
		
		Если ВводАдреса.ОткрытьМодально() Тогда
			
			мАдресвФорматеДляВыгрузки = ВводАдреса.НачальноеЗначениеВыбора.Представление;
			Если мАдресвФорматеДляВыгрузки = ",,,,,,,,," Тогда
				мАдресвФорматеДляВыгрузки = "";
			КонецЕсли;
			
			Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если Найти(ОбластьИмя, "П000010000100") > 0 Тогда
			СтандартнаяОбработка = Ложь;		
			Если  Найти("П0000100001001П0000100001002", ОбластьИмя) > 0 Тогда
				Для Идн = 1 По 2 Цикл
					Если ("П000010000100"+Идн) = ОбластьИмя Тогда
						 
						 мМПм.Области["П000010000100"+Идн].Значение = 
					     ?(мМПм.Области["П000010000100"+Идн].Значение = "", "V", "");
					 Иначе	 
 						мМПм.Области["П000010000100"+Идн].Значение = "";
					 КонецЕсли; 	 
			    КонецЦикла;	
					
			Иначе
				Для Идн = 3 По 4 Цикл
					Если ("П000010000100"+Идн) = ОбластьИмя Тогда
						 
						 мМПм.Области["П000010000100"+Идн].Значение = 
					     ?(мМПм.Области["П000010000100"+Идн].Значение = "", "V", "");
					 Иначе	 
 						мМПм.Области["П000010000100"+Идн].Значение = "";
                     КонецЕсли;
				КонецЦикла;
			 			
			КонецЕсли;
           
		КонецЕсли;
		     
	КонецЕсли;	
Модифицированность = Истина;	

КонецПроцедуры // ПолеТабличногоДокументаМПмВыбор
                
// КнопкаУдалитьДопСтрокиПриложение2Нажатие
//
Процедура КнопкаУдалитьДопСтрокиПриложение2Нажатие(Элемент)

	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	//Расчет("Приложение2");

КонецПроцедуры // КнопкаУдалитьДопСтрокиПриложение2Нажатие

// КнопкаДобавитьДопСтрокиПриложение2Нажатие
//
Процедура КнопкаДобавитьДопСтрокиПриложение2Нажатие(Элемент)

	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);

КонецПроцедуры // КнопкаДобавитьДопСтрокиПриложение2Нажатие

// КнопкаУдалитьДопСтрокиПриложение2Нажатие
//
Процедура КнопкаУдалитьДопСтрокиПриложение3Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

// КнопкаДобавитьДопСтрокиПриложение2Нажатие
//
Процедура КнопкаДобавитьДопСтрокиПриложение3Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры
// ПолеТабличногоДокументаМПмПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаМПмПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);

КонецПроцедуры // ПолеТабличногоДокументаМПмПриАктивизацииОбласти

// ПолеТабличногоДокументаПриложение1ПриАктивизацииОбласти
//
Процедура ПолеТабличногоДокументаПриложение1ПриАктивизацииОбласти(Элемент)

	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Приложение1");

КонецПроцедуры // ПолеТабличногоДокументаПриложение1ПриАктивизацииОбласти

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	СохранитьДеревоСтраницОтчета();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
КонецПроцедуры // ПриЗакрытии()

//
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(Область.Имя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ИмяДляПоиска = ?(Найти(Область.Имя, "_") > 0, Лев(Область.Имя, Найти(Область.Имя, "_") - 1), Область.Имя);
	массивСрок = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю("П0000100001001.П0000100002001.П0000100003001.П000060000301");
	Если массивСрок.Найти(ИмяДляПоиска) <> Неопределено Тогда 
		КолонкаПоиска = "Название";
	Иначе
		КолонкаПоиска = "Код";
	КонецЕсли;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события Нажатие кнопки Очистить командной панели КоманднаяПанельФормы
// Производит очистку отчета в целом, или текущего листа или текущего экземпляра многостраничного раздела.
//
Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
КонецПроцедуры // КоманднаяПанельФормыВыбратьВариантОчисткиОтчета

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мМПм);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// НомерКорректировкиПриИзменении
// Процедура-обработчик события "ПриИзменении" номер корректировки декларации.
//
Процедура НомерКорректировкиПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма, мМПм);

КонецПроцедуры // НомерКорректировкиПриИзменении


////////////////////////////////////
// Стандартные процедуры и функции
////////////////////////////////////

// ОбновитьСтруктуруМногостраничныхРазделов
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
//
Процедура ОбновитьСтруктуруМногостраничныхРазделов(ИмяСтраницы = Неопределено)

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма, имяСтраницы);

КонецПроцедуры // ОбновитьСтруктуруМногостраничныхРазделов()

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	КолвоМнгБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
	Если ТипЗнч(КолвоМнгБлоков) = Тип("ТаблицаЗначений") Тогда
		КолвоМнгБлоков = КолвоМнгБлоков.Количество();
	КонецЕсли;

	Если КолвоМнгБлоков > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на МПм лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОТ ТАБЛИЧНЫХ ПОЛЕЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт

	// Процедура "заглушка" оставлена для совместимости.
	// Не удалять.
	Возврат;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ПроставитьВКвадратыЗначения(Лист, Показатель, Размерность, Значение)
// проставляет в квадратики необходимые значения
//
Процедура ПроставитьВКвадратыЗначения(Знач Лист, Знач Показатель, Знач Размерность,Знач Значение, ДополнитьЗначение = Ложь, НужноСтавитьЗнакРавенства = Истина) Экспорт

	Раздел = ЭлементыФормы["ПолеТабличногоДокумента" + СтрЗаменить(Лист, "ПолеТабличногоДокумента", "")];

	ПризнакДаты = Ложь;

	ДопРазряд = ""; // дополнительный разряд в счетчике
	ТестОк = Истина;
	Попытка // определим, есть ли дополнительный разряд или нет, ДЛЯ универсальности
		Тест = Раздел     .Области[Показатель + ДопРазряд+"1"].Значение;
	Исключение
		ТестОк = Ложь;
	КонецПопытки;

	Если НЕ ТестОк Тогда
		Если ДопРазряд = "0" Тогда
			ДопРазряд = "";
		Иначе
			ДопРазряд = "0";
		КонецЕсли;
	КонецЕсли;

	СтрокаФорматаЯчейки = СтрЗаменить(мСтрокаФормата, "; ЧН=-", "");
	// Убираем пробелы между группами разрядов числа
	СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";

	Если (ДополнитьЗначение) Или ((РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

		Если ((РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

			ЗначениеДопСтрока = РегламентированнаяОтчетность.ДополнитьСтроку("", Размерность," ");

		Иначе

			ЗначениеДопСтрока = Формат(Значение, СтрокаФорматаЯчейки) + ?(НужноСтавитьЗнакРавенства, "=", "");
			ЗначениеДопСтрока = РегламентированнаяОтчетность.ДополнитьСтроку(ЗначениеДопСтрока, Размерность," ",1);

		КонецЕсли;

		Иначе

		ЗначениеДопСтрока = Значение;

	КонецЕсли; // ДополнитьЗначение

	ДопЗначение = 0;
	Для НомЯчейки = 1 По Размерность Цикл

			Если ПризнакДаты Тогда
				Если (НомЯчейки = 3) Или (НомЯчейки = 5) Тогда
					ДопЗначение = ДопЗначение+1; // перескакиваем точкку
				КонецЕсли;
			Раздел.Области[Показатель + ?(СтрДлина(НомЯчейки)=1,ДопРазряд+НомЯчейки,НомЯчейки) ].Значение = Сред(ЗначениеДопСтрока, НомЯчейки + ДопЗначение, 1);
			Иначе
попытка
			Раздел.Области[Показатель + ?(СтрДлина(НомЯчейки)=1,ДопРазряд+НомЯчейки,НомЯчейки) ].Значение = Сред(ЗначениеДопСтрока, НомЯчейки, 1);
исключение
сообщить("ош");
конецпопытки;
			КонецЕсли; // ПризнакДаты
	КонецЦикла;
КонецПроцедуры // ПроставитьВКвадратыЗначения(Лист, Показатель, Размерность, Значение)

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() 

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "МПм";
	СтрокаУровня1.Представление            = "МП(микро)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаМПм";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение1";
	СтрокаУровня1.Представление            = "Приложение № 1 к форме МП(микро)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение2";
	СтрокаУровня1.Представление            = "Приложение № 2 к форме МП(микро)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение3";
	СтрокаУровня1.Представление            = "Приложение № 3 к форме МП(микро)";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение3";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0 Тогда
			
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			Если НайденнаяСтрока = Неопределено Тогда
				СписокЭлемент = ВыбратьИзСписка(Список, Элемент);
			Иначе
				СписокЭлемент = ВыбратьИзСписка(Список, Элемент, НайденнаяСтрока);
			КонецЕсли;
			
			Если СписокЭлемент <> Неопределено  Тогда
				
				Область.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
				
				Модифицированность = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Модифицированность = Истина;
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	Расчет(ИмяТекущейСтраницыПанели);

КонецПроцедуры // ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Список2011Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
		
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0000100001002",   1, , "Выбор кода", КоллекцияСписковВыбора["ВидыДеятельности"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0000100002002",   1, , "Выбор кода", КоллекцияСписковВыбора["ВидыДеятельности"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0000100003002",   1, , "Выбор кода", КоллекцияСписковВыбора["ВидыДеятельности"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0000100001001", 100, , "Выбор кода", КоллекцияСписковВыбора["ВидыДеятельности"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0000100002001", 100, , "Выбор кода", КоллекцияСписковВыбора["ВидыДеятельности"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0000100003001", 100, , "Выбор кода", КоллекцияСписковВыбора["ВидыДеятельности"]);

	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000060000301", 254, , "Выбор страны", КоллекцияСписковВыбора["ОКСМ"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000060000303",   3, , "Выбор страны", КоллекцияСписковВыбора["ОКСМ"]);

КонецПроцедуры

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка) Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов 
		Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если (Область.Имя = КодПоказателя) ИЛИ (Найти(Область.Имя, мИдГруппы2) > 0) Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	Если ИсходнаяСтрока = Неопределено Тогда
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора);
	Иначе
		РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора, ИсходнаяСтрока);
	КонецЕсли;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле = Сред(Область.Имя,1,11);
	
	Если Область.Имя = КодПоказателя Тогда 
		
		РезультатКод = РезультатВыбора["Код"]; 
		
		Если РезультатКод = "" Тогда РезультатНазвание = ""
		Иначе	РезультатНазвание = РезультатВыбора["Название"]
		КонецЕсли;
		
		мПриложение1.Области[Поле+"001"].Значение = РезультатНазвание;
		мПриложение1.Области[Поле+"002"].Значение = РезультатКод
		
	Иначе
		
		Если Найти(Область.Имя, мИдГруппы2) > 0 Тогда
			
			ВыборКод = Строка(РезультатВыбора["Код"]);
			ВыборНазвание = Строка(РезультатВыбора["Название"]);
			Суффикс = СтрЗаменить(Область.Имя, КодПоказателя, "");
			ТекущийЭлемент.Области[мИдГруппы2 + "03" + Суффикс].Значение = ВыборКод;
			ТекущийЭлемент.Области[мИдГруппы2 + "01" + Суффикс].Значение = ВыборНазвание;
			
		Иначе
			
			СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
			Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
				СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
			КонецЦикла;
			Для Инд = 1 По ИндексОбласти - 1 Цикл
				ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
//	Расчет();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//
// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "") Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	ИмяФайлаВыгрузки = Параметры.ИмяФайла;
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, ИмяФайлаВыгрузки);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, ИмяФайлаXML)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + ИмяФайлаXML;
		ЗаписатьТекстНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузкиXML2011Кв1");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВыгружаемыеПоказателиРаздела(Узел, Раздел, МассивРезультат = Неопределено)
	
	ТипУзла = ТипЗнч(Узел);
	Если ТипУзла = Тип("ДеревоЗначений") Тогда
		МассивРезультат = Новый Массив;
	ИначеЕсли СокрЛП(Узел.Раздел) = СокрЛП(Раздел) Тогда
		МассивРезультат.Добавить(Узел);
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ВыгружаемыеПоказателиРаздела = ПолучитьВыгружаемыеПоказателиРаздела(Стр, Раздел, МассивРезультат);
	КонецЦикла;
	
	Если ТипУзла = Тип("ДеревоЗначений") Тогда
		Возврат МассивРезультат;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция РазделПуст(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел);
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	РазделПуст = Истина;
	Если ТипЗнч(ДанныеРаздела) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из ДанныеРаздела Цикл
			Если НЕ СтраницаПуста(Стр.Данные, ПоказателиРаздела) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, парамРазделы)
	
	Разделы = Новый Массив;
	Если ТипЗнч(парамРазделы) = Тип("Строка") Тогда
		Если Найти(парамРазделы, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(парамРазделы);
			Для Каждого Эл Из СтрРазделы Цикл
				Разделы.Добавить(Эл.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(парамРазделы);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Истина;
	Для Каждого Раздел Из Разделы Цикл
		Если НЕ РазделПуст(ДеревоВыгрузки, Раздел) Тогда
			РазделыПусты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ РазделыПусты;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаМПм";
	
	// проверка показателей раздела
	Если ПустаяСтрока(Параметры.ОКПО) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код ОКПО организации!", ИмяПоляТаблДокумента, "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код вида деятельности по ОКВЭД организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОргНазв) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование оганизации!", ИмяПоляТаблДокумента, "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
									
	Если ПустаяСтрока(Параметры.ОргИсполнитель) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической информации!", ИмяПоляТаблДокумента, "ОргИсполнитель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОргДолжностьИсп) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана должность лица, ответственного за предоставление статистической информации!", ИмяПоляТаблДокумента, "ОргДолжностьИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОргТелефонИсп) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан телефон должностного лица, ответственного за предоставление статистической информации!", ИмяПоляТаблДокумента, "ОргТелефонИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка на незаполненный отчет
	Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, ИмяПоляТаблДокумента) Тогда
		
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнены разделы 1-5!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ, Раздел", Стр.Ключ, Стр.Раздел), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Тип, "A") <> 0 ИЛИ Найти(Узел.Тип, "А") <> 0) // Необязательные атрибуты пропускаем (они удаляются только вместе с узлом)
			И (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
			Возврат;
		КонецЕсли;
		
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	Если (Найти(Узел.Тип, "A") <> 0 ИЛИ Найти(Узел.Тип, "А") <> 0)
	   И (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
		Возврат Истина;
	КонецЕсли;
	
	Если Узел.Формат = "N" Тогда
		ОбязательноеНулевоеЗначение = Ложь;
		Если ТипЗнч(Узел.Показатели) = Тип("Структура") Тогда
			ФорматПредставленияНуля = Неопределено;
			Если Узел.Показатели.Свойство("ЧН" + Узел.Ключ, ФорматПредставленияНуля) Тогда
				ОбязательноеНулевоеЗначение = НЕ ПустаяСтрока(Формат(0, ФорматПредставленияНуля));
			КонецЕсли; 
		КонецЕсли;
		ПустойУзел = (Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение)) И НЕ ОбязательноеНулевоеЗначение;
	Иначе
		ПустойУзел = НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя, ФорматПредставленияНуля = "")
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
		Если Найти(ФорматПредставленияНуля, "ЧН=") > 0 Тогда
			Узел.Показатели = Новый Структура("ЧН" + СокрЛП(Узел.Ключ), ФорматПредставленияНуля);
		КонецЕсли; 
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если Параметры.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если Параметры.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока СвойствоОпределено(Параметры, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(Параметры, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку("utf-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТекстНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.UTF8);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИмяФайла(Параметры, ДопАтрибуты)
	
	Перем ПолученноеЗначение;
	
	КодОКУД        = ДопАтрибуты.OKUD;
	КодФормы       = ДопАтрибуты.idf;
	Периодичность  = ДопАтрибуты.idp;
	КодОКПО        = Параметры.ОКПО;
	РасчетныйГод   = Параметры.РасчПериод;
	ОтчетныйПериод = 17; // Годовая отчетность
	
	Параметры.Свойство("ОКВЭД", ПолученноеЗначение);
	КодОКВЭД = СтрЗаменить(ПолученноеЗначение, ".", "-");
	
	ИмяФайлаXML = КодОКУД + "_" + КодФормы + "_" + Периодичность + "_" + КодОКПО + "_" + РасчетныйГод + "_" + ОтчетныйПериод;
	ИмяФайлаXML = ИмяФайлаXML + ?(ПустаяСтрока(КодОКВЭД), "", "_" + КодОКВЭД) + ".xml";
	
	Возврат  ИмяФайлаXML;
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
	
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаМПм;
	
	ДопАтрибуты = СформироватьСтруктуруДопАтрибутов();
	
	СтрокаСведений = "ФИОРук, ОКВЭД";
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	Параметры = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	Параметры.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	Параметры.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	Параметры.Вставить("ШифрФормы", ПолученноеЗначение);
	
	ОтчПериод  = Месяц(мСохраненныйДок.ДатаОкончания);
	РасчПериод = Формат(Год(мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	Параметры.Вставить("ОКПО",  СокрЛП(ТабДокумент.ОргКодОКПО));
	Параметры.Вставить("ОКВЭД", СокрЛП(ТабДокумент.ОргКодОКВЭД));
	Параметры.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	Параметры.Вставить("РасчПериод", СокрЛП(РасчПериод));
	Параметры.Вставить("ОргНазв", СокрЛП(ТабДокумент.ОргНазв));
	Параметры.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	Параметры.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	Параметры.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	Параметры.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	
	Параметры.Вставить("Зн_П0000100001001", ?(ПустаяСтрока(ТабДокумент.П0000100001001), 0, 1));
	Параметры.Вставить("Зн_П0000100001003", ?(ПустаяСтрока(ТабДокумент.П0000100001003), 0, 1));

	Параметры.Вставить("ИмяФайла", СформироватьИмяФайла(Параметры, ДопАтрибуты));
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	Возврат Параметры;
	
КонецФункции

Функция СформироватьСтруктуруДопАтрибутов() 
	
	ДопАтрибуты = Новый Структура;
	
	Макет = ПолучитьМакет("АтрибВыгрузкиXML2011Кв1");
	
	Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
		АтрКлюч = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
		Если НЕ ПустаяСтрока(АтрКлюч) Тогда
			АтрКлюч = РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими(".- ", АтрКлюч, "___");
			ДопАтрибуты.Вставить(АтрКлюч, СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст));
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ДопАтрибуты;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчетеФСГС(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаПриложение1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаПриложение3Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

// Цвета раскраски автозаполняемых ячеек
ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);  // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // Белый, Ввод запрещен
ЦветАвто                         = Новый Цвет(0, 0, 0);        // Белый, Ввод запрещен

// Структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
мСтруктураЦветовРаскраски.Вставить("_6", ЦветАвто);

ОписаниеТиповСтрока3    = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
ОписаниеТиповСтрока11    = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(11);
ОписаниеТиповСтрока20    = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(20);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2);
ОписаниеТиповЧисло9_1 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(9, 1);
ОписаниеТиповЧисло14_1 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 1);
ОписаниеТиповЧисло10_0 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
// Идентификаторы многострочных групп
мИдГруппы1 = "П0000500090"; 
мИдГруппы2 = "П0000600003";

// количество строк многострочных разделов по "бумажной" форме отчета
// (минимальное количество строк, которое должно присутствовать всегда)
КолИсхСтрокИдГруппы1 = 8;
КолИсхСтрокИдГруппы2 = 3;

// структура строк многострочных разделов
СтруктураГруппы1 = Новый ТаблицаЗначений;
СтруктураГруппы1.Колонки.Добавить("П000050009001", ОписаниеТиповСтрока254);
СтруктураГруппы1.Колонки.Добавить("П000050009002", ОписаниеТиповСтрока3);
СтруктураГруппы1.Колонки.Добавить("П000050009003", ОписаниеТиповСтрока11);
СтруктураГруппы1.Колонки.Добавить("П000050009004", ОписаниеТиповЧисло10_0);
СтруктураГруппы1.Колонки.Добавить("П000050009005", ОписаниеТиповЧисло10_0);

СтруктураГруппы2 = Новый ТаблицаЗначений;
СтруктураГруппы2.Колонки.Добавить("П000060000301", ОписаниеТиповСтрока254);
СтруктураГруппы2.Колонки.Добавить("П000060000303", ОписаниеТиповСтрока3);
СтруктураГруппы2.Колонки.Добавить("П000060000304", ОписаниеТиповЧисло14_1);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы1, СтруктураГруппы1);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы2, СтруктураГруппы2);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы1, КолИсхСтрокИдГруппы1);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы2, КолИсхСтрокИдГруппы2);

ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

СтрПерваяСтраница2 = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Добавить();
СтрПерваяСтраница2.Представление      = "Новая страница";
СтрПерваяСтраница2.АктивнаяСтраница   = Истина;
СтрПерваяСтраница2.АвтоматическоеПредставление = Истина;
СтрПерваяСтраница2.ДанныеДопСтрок = Неопределено; // В разделе есть многострочность, поэтому поле объявлено

// Структура содержит данные дополнительных страниц
мСтруктураМногостраничныхРазделов = Новый Структура;

//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
//
// Версия формы
мВерсияФормы = "25/12/2011";

// Код отчета, равен КНД
мКодОтчета   = 0601016;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;