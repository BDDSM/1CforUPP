Перем ТаблицаОрганизаций Экспорт;

Перем ПараметрыРасшифровки Экспорт;

Перем ТаблицаПоискаРасшифровка Экспорт;


Процедура ОбновитьОтчет()
	
	СформироватьОтчет(ЭтаФорма.ЭлементыФормы.Результат, ДанныеРасшифровки, Ложь, );
	
	ЗаполнитьТаблицуПоиска();
	
КонецПроцедуры

Процедура ВыгрузитьОтчет()

	СформироватьОтчет(ЭтаФорма.ЭлементыФормы.Результат, ДанныеРасшифровки, Истина, );
	
	ФормаВыгрузки = ОтчетОбъект.ПолучитьФорму("ФормаВыгрузкаСведенийОЗатратах", ЭтаФорма);
	
	ФормаВыгрузки.ОткрытьМодально();
	
КонецПроцедуры

Процедура ОбновитьПанельНастроек()
	
	//ЭлементыФормы.ПанельПользователя.Ширина = НастройкиФормы.ШиринаПанелиПользователя
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Метаданные.РегистрыСведений.Найти("ИдентификацияРасходовНаПроизводствоИПродажуПоОКПД") = Неопределено Тогда
		
		Предупреждение("В этой конфигурации нет необходимых объектов. Отчет не открывается.");
		
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ НаборДанныхУстановлен Тогда
	
		Предупреждение("Для этой конфгурации не определен набор данных отчета. Отчет не открывается.");
		
		Отказ = Истина;
		
		Возврат;
	
	КонецЕсли; 
	
	Настроить();
	
	Если Не СохранениеНастроек.ЗаполнитьНастройкиПриОткрытииОтчета(ОтчетОбъект) Тогда
		
		ИнициализацияОтчета();
		
		ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если НастройкиФормы <> Неопределено Тогда
		
		Если НастройкиФормы.Свойство("ПанельПользователяПометка") Тогда
			ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка = НастройкиФормы.ПанельПользователяПометка;
		КонецЕсли;
		
		Если Не НастройкиФормы.Свойство("ШиринаПанелиПользователя") Тогда
			НастройкиФормы.Вставить("ШиринаПанелиПользователя", 306);
		КонецЕсли;
		
	КонецЕсли; 
	
	ОбновитьПанельНастроек();
	
	УправлениеОтображениемПанелиПользователя();
	
	ЗаполнитьТаблицуОрганизаций(ЭтаФорма);
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("Элемент");
	ТаблицаЭлементов.Колонки.Добавить("Верх");
	
	Для Каждого ЭлементУправления Из ЭлементыФормы Цикл
		НоваяСтрока = ТаблицаЭлементов.Добавить();
		НоваяСтрока.Элемент = ЭлементУправления.Имя;
		НоваяСтрока.Верх = ЭлементУправления.Верх;
	КонецЦикла;
	
	Если НастройкиФормы = Неопределено Тогда
		НастройкиФормы = Новый Структура;
	КонецЕсли;
	
	НастройкиФормы.Вставить("ТаблицаЭлементов", ТаблицаЭлементов);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Заголовок = ПолучитьТекстЗаголовка(Ложь);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	НастройкиФормы.Вставить("ПанельПользователяПометка", ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка);
	НастройкиФормы.Вставить("ШиринаПанелиПользователя" , ЭлементыФормы.ПанельПользователя.Ширина);
	
	СохранитьНастройку();
	
КонецПроцедуры

Процедура ДействияФормыОсновныеСформировать(Кнопка)
	
	ОбновитьОтчет();

КонецПроцедуры

Процедура ДействияФормыОсновныеПечать(Кнопка)
	
	ЭлементыФормы.Результат.Напечатать(Ложь);
	
КонецПроцедуры

Процедура ДействияФормыОсновныеСохранитьКак(Кнопка)
	
	ПредставлениеСохраняемогоФайла = ПолучитьТекстЗаголовка(Ложь);
	
	Результат = ЭлементыФормы.Результат;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Save as";
	ПолноеИмяФайла = ОтчетОбъект.Метаданные().Синоним;
	ПолноеИмяФайла = РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ПолноеИмяФайла);
	Диалог.ПолноеИмяФайла = ПолноеИмяФайла;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Фильтр = "Табличный документ (*.mxl)|*.mxl|"
	              + "Документ Microsoft Excel (*.xls)|*.xls|";
	Если Диалог.Выбрать() Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
		Попытка
			Результат.Записать(ИмяФайла, ?(Прав(ИмяФайла,3) = "xls", ТипФайлаТабличногоДокумента.XLS, ТипФайлаТабличногоДокумента.MXL));
		Исключение
			Предупреждение("Ошибка при записи. Файл не записан.");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОсновныеВыгрузить(Кнопка)
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеПанельПользователя(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	
	Кнопка = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя;
	
	УправлениеОтображениемПанелиПользователя();
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеВосстановитьЗначения(Кнопка)
	
	СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя, Ложь);
	
	ПрименитьНастройку();
	
	ОбновитьПанельНастроек();
	
	Отбор = Новый Структура("Организация", Организация);
	НайденныеСтроки = ТаблицаОрганизаций.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 1 Тогда
		ПолеОрганизация = ТаблицаОрганизаций.Индекс(НайденныеСтроки[0]);
	Иначе
		ПолеОрганизация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеСохранитьЗначения(Кнопка)
	
	Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
		
		СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя, Истина);
		
	Иначе
		
		СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, ЭтаФорма, "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя, Истина, ПолучитьТекстЗаголовка(Ложь));
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеОткрытьРегистрИдентификацииОКПД(Кнопка)
	
	ОткрытьФорму("РегистрСведений.ИдентификацияРасходовНаПроизводствоИПродажуПоОКПД.ФормаСписка");
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеОткрытьОКПД(Кнопка)
	
	ОткрытьФорму("Справочник.КодыОКПД.ФормаСписка");
	
КонецПроцедуры

Процедура КоманднаяПанельПанелиНастроекЗакрытьПанельНастроек(Кнопка)
	
	КнопкаПанельПользователя = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя;
	КнопкаПанельПользователя.Пометка = Не КнопкаПанельПользователя.Пометка;
	УправлениеОтображениемПанелиПользователя();
	
КонецПроцедуры

Процедура КоманднаяПанельПанелиНастроекВосстановитьНастройку(Кнопка)
	
	Настроить();
	
КонецПроцедуры

Процедура ПолеВводаПериодПриИзменении(Элемент)
	
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ЗначениеПараметраНачалоПериода <> Неопределено Тогда
		ЗначениеПараметраНачалоПериода.Значение = НачалоПериода;
		ЗначениеПараметраНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеПараметраКонецПериода <> Неопределено Тогда
		ЗначениеПараметраКонецПериода.Значение = ?(КонецПериода = '00010101', КонецПериода, КонецДня(КонецПериода));
		ЗначениеПараметраКонецПериода.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	Если НастройкаПериода = Неопределено Тогда
		НастройкаПериода = Новый НастройкаПериода();
	КонецЕсли;
	
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='00010101', КонецПериода, КонецДня(КонецПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	Если НастройкаПериода.Редактировать() Тогда
		НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
	ПолеВводаПериодПриИзменении(Неопределено);
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ПолеОрганизация = Неопределено Тогда
		Организация = ПолеОрганизация;
	Иначе
		Организация = ТаблицаОрганизаций[ПолеОрганизация].Организация;
	КонецЕсли;
	
	ЗначениеПараметраОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	
	Если ЗначениеПараметраОрганизация <> Неопределено Тогда
		ЗначениеПараметраОрганизация.Значение = Организация;
		ЗначениеПараметраОрганизация.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры 

Процедура УправлениеОтображениемПанелиПользователя()
	
	Кнопка = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя;
	
	Если Кнопка.Пометка тогда
		ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Нет;
		ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
		Если ШиринаПанели / Ширина > 0.5 тогда
			ШиринаПанели = 306;
			ЭлементыФормы.ПанельПользователя.Ширина = ШиринаПанели;
			ЭлементыФормы.ПанельПользователя.Лево = Ширина - ШиринаПанели -6;
		КонецЕсли;
		ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Право);
		
		ЭлементыФормы.Разделитель.Лево = Ширина - ШиринаПанели - 6;
		ЭлементыФормы.Результат.Ширина = Ширина - 6 - ШиринаПанели;
	Иначе
		ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
		ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователя, ГраницаЭлементаУправления.Лево);
		ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
		ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Право;
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Возврат;
	КонецЕсли;
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Область.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Область.Расшифровка];
		
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
				ДоступноеПоле = ДанныеРасшифровки.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Поле.Поле));
				Если ДоступноеПоле = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивПолейРасшифровки.Добавить(Поле);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("СчетДт",      "");
	ПараметрыРасшифровки.Вставить("СубконтоДт1", "");
	ПараметрыРасшифровки.Вставить("СубконтоДт2", "");
	ПараметрыРасшифровки.Вставить("СубконтоДт3", "");
	ПараметрыРасшифровки.Вставить("КодОКПД",     "");
	
	ПараметрыРасшифровки.Вставить("ЭтоПолеКодОКПД", Ложь);
	
	Для каждого ЭлементМассива Из МассивПолейРасшифровки Цикл
		
		Если ЭлементМассива.Поле = "СчетДт" Тогда
			ПараметрыРасшифровки.СчетДт = ЭлементМассива.Значение;
		КонецЕсли;
		Если ЭлементМассива.Поле = "СубконтоДт1" Тогда
			ПараметрыРасшифровки.СубконтоДт1 = ЭлементМассива.Значение;
		КонецЕсли;
		Если ЭлементМассива.Поле = "СубконтоДт2" Тогда
			ПараметрыРасшифровки.СубконтоДт2 = ЭлементМассива.Значение;
		КонецЕсли;
		Если ЭлементМассива.Поле = "СубконтоДт3" Тогда
			ПараметрыРасшифровки.СубконтоДт3 = ЭлементМассива.Значение;
		КонецЕсли;
		Если ЭлементМассива.Поле = "КодОКПД" Тогда
			ПараметрыРасшифровки.ЭтоПолеКодОКПД = Истина;
			ПолеКодОКПД = ?(Область.СодержитЗначение, Область.Значение, Область.Текст);
			ПараметрыРасшифровки.КодОКПД = ?(ПустаяСтрока(ПолеКодОКПД), ЭлементМассива.Значение, ПолеКодОКПД);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыРасшифровки.ЭтоПолеКодОКПД Тогда
		
		// Изменяем свойства области для ввода кода ОКПД
		Область.Защита = Ложь;
		Область.СодержитЗначение = Истина;
		Область.ТипЗначения = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(12);
		//Область.Маска = "99.99.99.999"; // Раскомментировать с релиза 8.2.14
		Область.ЭлементУправления.ВертикальноеПоложение   = ВертикальноеПоложение.Верх;
		Область.ЭлементУправления.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Область.ЭлементУправления.КнопкаВыбора = Истина;
		Область.ЭлементУправления.Маска = "99.99.99.999";
		
		КодОКПДНачалоВыбора = Новый Действие("РезультатКодОКПДНачалоВыбора");
		Область.ЭлементУправления.УстановитьДействие("НачалоВыбора", КодОКПДНачалоВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	СчетДт = "";
	СубконтоДт1 = "";
	СубконтоДт2 = "";
	СубконтоДт3 = "";
	КодОКПД     = "";
	
	ЭтоПолеКодОКПД = Ложь;
	ВызовДляВыбора = Ложь;
	
	Если НЕ (ПараметрыРасшифровки.Свойство("ЭтоПолеКодОКПД", ЭтоПолеКодОКПД) И ЭтоПолеКодОКПД) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметра = Неопределено;
	
	Если ПараметрыРасшифровки.Свойство("СчетДт", ЗначениеПараметра) Тогда
		СчетДт = ЗначениеПараметра;
	КонецЕсли;
	Если ПараметрыРасшифровки.Свойство("СубконтоДт1", ЗначениеПараметра) Тогда
		СубконтоДт1 = ЗначениеПараметра;
	КонецЕсли;
	Если ПараметрыРасшифровки.Свойство("СубконтоДт2", ЗначениеПараметра) Тогда
		СубконтоДт2 = ЗначениеПараметра;
	КонецЕсли;
	Если ПараметрыРасшифровки.Свойство("СубконтоДт3", ЗначениеПараметра) Тогда
		СубконтоДт3 = ЗначениеПараметра;
	КонецЕсли;
	Если ПараметрыРасшифровки.Свойство("КодОКПД", ЗначениеПараметра) Тогда
		КодОКПД = ЗначениеПараметра;
	КонецЕсли;
	
	ВыбКодОКПД = ?(Область.СодержитЗначение, Область.Значение, Область.Текст);
	
	СписокКодовОКПД = СформироватьСписокКодовПоСтроке(ВыбКодОКПД);
	
	Если ПустаяСтрока(СтрЗаменить(ВыбКодОКПД , ".", "")) ИЛИ (ПараметрыРасшифровки.Свойство("ВызовДляВыбора", ВызовДляВыбора) И ВызовДляВыбора) Тогда
		
		СформироватьСтрокуПоиска();
		
		ФормаВыбора = Справочники.КодыОКПД.ПолучитьФормуВыбора("ФормаВыбораПоиск", ЭтаФорма,);
		ФормаВыбора.НачальноеЗначениеВыбора = Справочники.КодыОКПД.НайтиПоКоду(КодОКПД);
		
		ВыбОКПД = ФормаВыбора.ОткрытьМодально();
		
		Если ВыбОКПД = Неопределено Тогда
			
			ВыбКодОКПД = КодОКПД;
			
			ПараметрыРасшифровки.Вставить("ВызовДляВыбора", Ложь);
			
		Иначе
			
			ВыбКодОКПД = Строка(ВыбОКПД);
			
		КонецЕсли;
		
	ИначеЕсли СписокКодовОКПД.Количество() > 50 Тогда
		
		Предупреждение("Найдено более 50 элементов!" + Символы.ПС
		             + "Задайте более длинную строку поиска или воспользуйтесь кнопкой выбора.");
		
		ВыбКодОКПД = КодОКПД;
		
		Если Область.СодержитЗначение Тогда
			Область.Значение = ВыбКодОКПД;
		Иначе
			Область.Текст = ВыбКодОКПД;
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СписокКодовОКПД.Количество() > 1 Тогда
		
		ЭлементСписка = ВыбратьИзСписка(СписокКодовОКПД);
		
		Если ЭлементСписка = Неопределено Тогда
			
			ВыбКодОКПД = КодОКПД;
			
			Если Область.СодержитЗначение Тогда
				Область.Значение = ВыбКодОКПД;
			Иначе
				Область.Текст = ВыбКодОКПД;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли; 
		
		ВыбКодОКПД = ЭлементСписка.Значение;
		
	ИначеЕсли СписокКодовОКПД.Количество() = 1 Тогда
		
		ВыбКодОКПД = СписокКодовОКПД[0].Значение;
		
	Иначе //СписокКодовОКПД.Количество() = 0
		
		Предупреждение("В поле введены некорректные данные.");
		
		ВыбКодОКПД = КодОКПД;
		
		Если Область.СодержитЗначение Тогда
			Область.Значение = ВыбКодОКПД;
		Иначе
			Область.Текст = ВыбКодОКПД;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрЗаменить(ВыбКодОКПД , ".", "")) Тогда
		
		МЗ = РегистрыСведений.ИдентификацияРасходовНаПроизводствоИПродажуПоОКПД.СоздатьМенеджерЗаписи();
		МЗ.Организация = Организация;
		МЗ.СчетДт      = СчетДт;
		МЗ.Субконто1   = СубконтоДт1;
		МЗ.Субконто2   = СубконтоДт2;
		МЗ.Субконто3   = СубконтоДт3;
		МЗ.КодОКПД     = ВыбКодОКПД;
		МЗ.Записать();
		
		Если Область.СодержитЗначение Тогда
			Область.Значение = ВыбКодОКПД;
		Иначе
			Область.Текст = ВыбКодОКПД;
		КонецЕсли;
		
		ПараметрыРасшифровки.Вставить("КодОКПД", ВыбКодОКПД);
		
		Если МЗ.Организация = Организация И МЗ.СчетДт = СчетДт
		   И ?(ЗначениеЗаполнено(МЗ.Субконто1), МЗ.Субконто1, "") = ?(ЗначениеЗаполнено(СубконтоДт1), СубконтоДт1, "")
		   И ?(ЗначениеЗаполнено(МЗ.Субконто2), МЗ.Субконто2, "") = ?(ЗначениеЗаполнено(СубконтоДт2), СубконтоДт2, "")
		   И ?(ЗначениеЗаполнено(МЗ.Субконто3), МЗ.Субконто3, "") = ?(ЗначениеЗаполнено(СубконтоДт3), СубконтоДт3, "")
		   И МЗ.КодОКПД = ВыбКодОКПД Тогда
			
			// При соответствии полей изменим цвет фона строки
			ОбластьТекСтроки = Элемент.Область(Элемент.ТекущаяОбласть.Низ, 1, Элемент.ТекущаяОбласть.Низ, Элемент.ТекущаяОбласть.Право - 1);
			ОбластьТекСтроки.ЦветФона = Новый Цвет(255, 255, 255); //Авто
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("СубконтоДт1", СубконтоДт1);
			ПараметрыОтбора.Вставить("СубконтоДт2", СубконтоДт2);
			ПараметрыОтбора.Вставить("СубконтоДт3", СубконтоДт3);
			
			МассивНайденных = ТаблицаПоискаРасшифровка.НайтиСтроки(ПараметрыОтбора);
			СписокОтобранных = Новый СписокЗначений;
			
			Для каждого СтрокаТаблицыПоиска Из МассивНайденных Цикл
				НайденнаяОбласть = Элемент.Область(СтрокаТаблицыПоиска.АдресОбластиОКПД);
				ЗначениеОбласти = ?(НайденнаяОбласть.СодержитЗначение, НайденнаяОбласть.Значение, НайденнаяОбласть.Текст);
				Если ПустаяСтрока(СтрЗаменить(ЗначениеОбласти , ".", "")) И (ПараметрыРасшифровки.Свойство("ВызовДляВыбора", ВызовДляВыбора) И ВызовДляВыбора) Тогда
					СписокОтобранных.Добавить(СтрокаТаблицыПоиска, СтрокаТаблицыПоиска.СчетДт, Истина);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокОтобранных.Количество() > 0 Тогда
			
				Если СписокОтобранных.ОтметитьЭлементы("Назначить ОКПД отмеченным счетам с такой же аналитикой") Тогда
					Для каждого ЭлементСписка Из СписокОтобранных Цикл
						Если ЭлементСписка.Пометка Тогда
							ВнестиЗаписьВРегистрИдентификации(ЭлементСписка.Значение, ВыбКодОКПД);
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатКодОКПДНачалоВыбора(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыРасшифровки.Вставить("ВызовДляВыбора", Истина);
	
	РезультатПриИзмененииСодержимогоОбласти(ЭлементыФормы.Результат, ЭлементыФормы.Результат.ТекущаяОбласть);
	
	Если ПараметрыРасшифровки.ВызовДляВыбора Тогда
		
		ПараметрыРасшифровки.ВызовДляВыбора = Ложь;
		
		ВыбОбласть = ЭлементыФормы.Результат.ТекущаяОбласть;
		Элемент.Значение = ?(ВыбОбласть.СодержитЗначение, ВыбОбласть.Значение, ВыбОбласть.Текст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнестиЗаписьВРегистрИдентификации(СтрокаТаблицыПоиска, КодОКПД)

	Если НЕ ПустаяСтрока(СтрЗаменить(КодОКПД , ".", "")) Тогда
		
		МЗ = РегистрыСведений.ИдентификацияРасходовНаПроизводствоИПродажуПоОКПД.СоздатьМенеджерЗаписи();
		МЗ.Организация = Организация;
		МЗ.СчетДт      = СтрокаТаблицыПоиска.СчетДт;
		МЗ.Субконто1   = СтрокаТаблицыПоиска.СубконтоДт1;
		МЗ.Субконто2   = СтрокаТаблицыПоиска.СубконтоДт2;
		МЗ.Субконто3   = СтрокаТаблицыПоиска.СубконтоДт3;
		МЗ.КодОКПД     = КодОКПД;
		МЗ.Записать();
		
		ТаблОтчет = ЭтаФорма.ЭлементыФормы.Результат;
		
		Область = ТаблОтчет.Область(СтрокаТаблицыПоиска.АдресОбластиОКПД);
		
		Если Область.СодержитЗначение Тогда
			Область.Значение = КодОКПД;
		Иначе
			Область.Текст = КодОКПД;
		КонецЕсли;
		
		СтрокаТаблицыПоиска.КодОКПД = КодОКПД;
		
		Если МЗ.Организация = Организация И МЗ.СчетДт = СтрокаТаблицыПоиска.СчетДт
		   И ?(ЗначениеЗаполнено(МЗ.Субконто1), МЗ.Субконто1, "") = ?(ЗначениеЗаполнено(СтрокаТаблицыПоиска.СубконтоДт1), СтрокаТаблицыПоиска.СубконтоДт1, "")
		   И ?(ЗначениеЗаполнено(МЗ.Субконто2), МЗ.Субконто2, "") = ?(ЗначениеЗаполнено(СтрокаТаблицыПоиска.СубконтоДт2), СтрокаТаблицыПоиска.СубконтоДт2, "")
		   И ?(ЗначениеЗаполнено(МЗ.Субконто3), МЗ.Субконто3, "") = ?(ЗначениеЗаполнено(СтрокаТаблицыПоиска.СубконтоДт3), СтрокаТаблицыПоиска.СубконтоДт3, "")
		   И МЗ.КодОКПД = КодОКПД Тогда
			
			// При соответствии полей изменим цвет фона строки
			ОбластьТекСтроки = ТаблОтчет.Область(Область.Низ, 1, Область.Низ, Область.Право - 1);
			ОбластьТекСтроки.ЦветФона = Новый Цвет(255, 255, 255); //Авто
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТаблицуПоиска()
	
	ТаблОтчет = ЭтаФорма.ЭлементыФормы.Результат;
	
	ТаблицаПоискаРасшифровка = Новый ТаблицаЗначений;
	ТаблицаПоискаРасшифровка.Колонки.Добавить("ИдРасшифровки", Новый ОписаниеТипов("ИдентификаторРасшифровкиКомпоновкиДанных"));
	ТаблицаПоискаРасшифровка.Колонки.Добавить("АдресОбластиОКПД", Новый ОписаниеТипов("Строка"));
	ТаблицаПоискаРасшифровка.Колонки.Добавить("МассивПохожихСтрок", Новый ОписаниеТипов("Массив"));
	ТаблицаПоискаРасшифровка.Колонки.Добавить("СчетДт");
	ТаблицаПоискаРасшифровка.Колонки.Добавить("СубконтоДт1");
	ТаблицаПоискаРасшифровка.Колонки.Добавить("СубконтоДт2");
	ТаблицаПоискаРасшифровка.Колонки.Добавить("СубконтоДт3");
	ТаблицаПоискаРасшифровка.Колонки.Добавить("КодОКПД");
	
	НомКолонки = 1;
	НайденаОбластьКодОКПД = Ложь;
	
	СписокИменПолей = Новый СписокЗначений;
	
	Для НомСтроки = 1 По ТаблОтчет.ВысотаТаблицы Цикл
		
		Если НЕ НайденаОбластьКодОКПД Тогда
			
			Для НомСтолбца = 1 По ТаблОтчет.ШиринаТаблицы Цикл
				СписокИменПолей.Очистить();
				Область = ТаблОтчет.Область(НомСтроки, НомСтолбца, НомСтроки, НомСтолбца);
				Если ТипЗнч(Область.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Область.Расшифровка];
					Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
						Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
							ДоступноеПоле = ДанныеРасшифровки.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Поле.Поле));
							Если ДоступноеПоле = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							СписокИменПолей.Добавить(Поле.Поле);
						КонецЦикла;
						Если СписокИменПолей.НайтиПоЗначению("КодОКПД") <> Неопределено Тогда
							НайденаОбластьКодОКПД = Истина;
							НомКолонки = НомСтолбца;
							Прервать;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// Не нашли нужной расшифровки
			Если НомСтроки > 50 Тогда
				Возврат;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если НайденаОбластьКодОКПД Тогда
			
			Область = ТаблОтчет.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
			Если ТипЗнч(Область.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Область.Расшифровка];
				Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
					
					ПоляРасшифровки = ЭлементРасшифровки.ПолучитьПоля();
					
					ПолеКодОКПД = ПоляРасшифровки.Найти("КодОКПД");
					Если ПолеКодОКПД <> Неопределено Тогда
						
						СтрокаТаблицыПоиска = ТаблицаПоискаРасшифровка.Добавить();
						
						СтрокаТаблицыПоиска.ИДРасшифровки    = Область.Расшифровка;
						СтрокаТаблицыПоиска.АдресОбластиОКПД = Область.Имя;
						
						СтрокаТаблицыПоиска.КодОКПД = ПолеКодОКПД.Значение;
						
						ПолеСчетДт = ПоляРасшифровки.Найти("СчетДт");
						Если ПолеСчетДт <> Неопределено Тогда
							СтрокаТаблицыПоиска.СчетДт = ПолеСчетДт.Значение;
						КонецЕсли;
						ПолеСубконтоДт1 = ПоляРасшифровки.Найти("СубконтоДт1");
						Если ПолеСубконтоДт1 <> Неопределено Тогда
							СтрокаТаблицыПоиска.СубконтоДт1 = ПолеСубконтоДт1.Значение;
						КонецЕсли;
						ПолеСубконтоДт2 = ПоляРасшифровки.Найти("СубконтоДт2");
						Если ПолеСубконтоДт2 <> Неопределено Тогда
							СтрокаТаблицыПоиска.СубконтоДт2 = ПолеСубконтоДт2.Значение;
						КонецЕсли;
						ПолеСубконтоДт3 = ПоляРасшифровки.Найти("СубконтоДт3");
						Если ПолеСубконтоДт3 <> Неопределено Тогда
							СтрокаТаблицыПоиска.СубконтоДт3 = ПолеСубконтоДт3.Значение;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСтрокуПоиска()
	
	ТекущаяСтрокаПоиска = "";
	
	СубконтоДт1 = "";
	СубконтоДт2 = "";
	СубконтоДт3 = "";
	
	ЭтоПолеКодОКПД = Ложь;
	
	ЗначениеПараметра = Неопределено;
	
	Если НЕ (ПараметрыРасшифровки.Свойство("ЭтоПолеКодОКПД", ЭтоПолеКодОКПД) И ЭтоПолеКодОКПД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРасшифровки.Свойство("СубконтоДт1", ЗначениеПараметра) Тогда
		СубконтоДт1 = ЗначениеПараметра;
	КонецЕсли;
	Если ПараметрыРасшифровки.Свойство("СубконтоДт2", ЗначениеПараметра) Тогда
		СубконтоДт2 = ЗначениеПараметра;
	КонецЕсли;
	Если ПараметрыРасшифровки.Свойство("СубконтоДт3", ЗначениеПараметра) Тогда
		СубконтоДт3 = ЗначениеПараметра;
	КонецЕсли;
	
	СписокДляСортировки = Новый СписокЗначений;
	СписокДляСортировки.Добавить(СубконтоДт1, ?(ТипЗнч(СубконтоДт1) = Тип("СправочникСсылка.Номенклатура"), "0", "1"));
	СписокДляСортировки.Добавить(СубконтоДт2, ?(ТипЗнч(СубконтоДт2) = Тип("СправочникСсылка.Номенклатура"), "0", "2"));
	СписокДляСортировки.Добавить(СубконтоДт3, ?(ТипЗнч(СубконтоДт3) = Тип("СправочникСсылка.Номенклатура"), "0", "3"));
	СписокДляСортировки.СортироватьПоПредставлению();
	
	//Наименование из справочника "Номенклатура" должно быть в строке поиска первым
	
	ТекущаяСтрокаПоиска1 = ОбработатьПодстрокуПоиска(СокрЛП(СписокДляСортировки[0].Значение));
	ТекущаяСтрокаПоиска2 = ОбработатьПодстрокуПоиска(СокрЛП(СписокДляСортировки[1].Значение));
	ТекущаяСтрокаПоиска3 = ОбработатьПодстрокуПоиска(СокрЛП(СписокДляСортировки[2].Значение));
	
	ЕстьРазделитель = Ложь;
	
	Если ПустаяСтрока(ТекущаяСтрокаПоиска1) ИЛИ ПустаяСтрока(ТекущаяСтрокаПоиска2) Тогда
		ТекущаяСтрокаПоиска = ТекущаяСтрокаПоиска1 + ТекущаяСтрокаПоиска2;
	Иначе
		ТекущаяСтрокаПоиска = "(" + ТекущаяСтрокаПоиска1 + ") | (" + ТекущаяСтрокаПоиска2 + ")";
		ЕстьРазделитель = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущаяСтрокаПоиска) ИЛИ ПустаяСтрока(ТекущаяСтрокаПоиска3) Тогда
		ТекущаяСтрокаПоиска = ТекущаяСтрокаПоиска + ТекущаяСтрокаПоиска3;
	Иначе
		Если ЕстьРазделитель Тогда
			ТекущаяСтрокаПоиска = ТекущаяСтрокаПоиска + " | (" +  ТекущаяСтрокаПоиска3 + ")";
		Иначе
			ТекущаяСтрокаПоиска = "(" + ТекущаяСтрокаПоиска + ") | (" + ТекущаяСтрокаПоиска3 + ")";
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьПодстрокуПоиска(ОбрСтрока)
	
	Если ПустаяСтрока(ОбрСтрока) Тогда
		Возврат "";
	КонецЕсли; 
	
	// Оставляем только буквы и пробелы, исключаем короткие слова < 3 симв.
	ПодстрокаПоиска = ""; ТекСлово = ""; ПослСлово = "";
	ПодмножествоСимволов = "abcdefghijklmnopqrstuvwxyz абвгдежзийклмнопрстуфхцчшщъыьэюя";
	
	Для НСим = 1 По СтрДлина(ОбрСтрока) Цикл
		
		Сим = Сред(ОбрСтрока, НСим, 1);
		
		ДобСимв = ?(Найти(ПодмножествоСимволов, НРег(Сим)) > 0, Сим, " ");
		
		Если ДобСимв = " " Тогда
			
			Если СтрДлина(ТекСлово) > 2 Тогда
				ПодстрокаПоиска = ПодстрокаПоиска + ТекСлово + ДобСимв;
			КонецЕсли;
			
			ТекСлово = "";
			
		Иначе
			
			ТекСлово = ТекСлово + ДобСимв;
			Если СтрДлина(ТекСлово) > 1 Тогда
				ПослСлово = ТекСлово;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если слово короткое, но единственное - включаем его в подстроку поиска
	Если (СтрДлина(ТекСлово) > 2) ИЛИ (ПустаяСтрока(ПодстрокаПоиска) И НЕ ПустаяСтрока(ПослСлово)) Тогда
		ПодстрокаПоиска = ПодстрокаПоиска + ПослСлово;
	КонецЕсли; 
	
	Возврат СтрЗаменить(СокрЛП(ПодстрокаПоиска), " ", " & ");
	
КонецФункции

Функция СформироватьСписокКодовПоСтроке(СтрокаОтбора)
	
	СписокКодов = Новый СписокЗначений;
	
	СсылкаСпрКодыОКПД = Новый(Тип("СправочникСсылка.КодыОКПД"));
	ДлинаКода = Число(СсылкаСпрКодыОКПД.Метаданные().ДлинаКода);
	ПозУбрать = Найти(СтрокаОтбора, ". ");
	ЛевСтрокаОтбора = СокрЛП(?(ПозУбрать = 0, СтрокаОтбора, Лев(СтрокаОтбора, ПозУбрать - 1)));
	Если ПустаяСтрока(ЛевСтрокаОтбора) Тогда
		Возврат СписокКодов;
	КонецЕсли;
	
	СтрокаОтбораКодов = ЛевСтрокаОтбора;
	Для НачПоз = СтрДлина(ЛевСтрокаОтбора) + 1  По ДлинаКода Цикл
		СтрокаОтбораКодов = СтрокаОтбораКодов + "[^ ]";
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 51
	|	КодыОКПД.Код,
	|	КодыОКПД.Имя
	|ИЗ
	|	Справочник.КодыОКПД КАК КодыОКПД
	|ГДЕ
	|	КодыОКПД.Код ПОДОБНО &СтрокаОтбора";
	
	Запрос.УстановитьПараметр("СтрокаОтбора", СтрокаОтбораКодов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокКодов.Добавить(Выборка.Код, СокрЛП(Выборка.Код) + "  " + СокрЛП(Выборка.Имя));
	КонецЦикла; 
	
	Возврат СписокКодов;

КонецФункции