// Сокращенные ссылки на поля табличных документов.
Перем ПТД_Титульный;
Перем ПТД_Раздел1;
Перем ПТД_Раздел2;
Перем ПТД_Раздел31;
Перем ПТД_Раздел32;
Перем ПТД_Раздел33;
Перем ПТД_Раздел34;
Перем ПТД_Раздел35;
Перем ПТД_Раздел36;
Перем ПТД_Раздел37;
Перем ПТД_Раздел38;
Перем ПТД_Раздел4;
Перем ПТД_Раздел5;

Перем НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами;

Перем ТаблицаСообщений Экспорт;

Перем мДанныеОтчета Экспорт;

Перем ЦветБелый;
Перем ЦветЖелтый;
Перем мОписаниеТиповБулево;

Перем мСоставПоказателей Экспорт;

// Идентификаторы многострочных разделов.
Перем мИдГруппы31;
Перем мИдГруппы35;
Перем мИдГруппы4;
Перем мИдГруппы5;

Перем мВПрограммеИзмененаОрганизация;

// Хранит структуру многостраничных разделов.
Перем мСтруктураМногостраничныхРазделов Экспорт;

// Хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель Экспорт;

Перем СоответствиеЕдиницыИзмеренияДелителю;

// Хранит код отчета по КНД
Перем мКодОтчета Экспорт;

// Хранит версию формы отчета
Перем мВерсияФормы Экспорт;

// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// Переменные хранят параметры дополнительных листов
Перем НомТекГруппы;

Перем мИННЮЛ;
Перем мКППЮЛ;

Перем мПечатныеФормы Экспорт;

Перем СвойстваПоказателей Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мОписаниеТиповЧислоЕ Экспорт;

Перем мДокументВосстановлен;

Перем мАдресвФорматеДляВыгрузки;

Перем мПоляПоискаПоказателяВТСП Экспорт;

Перем мСтруктураДанныхОтчетаXMLКонтейнер Экспорт;

Перем ИДКонфигурации;

Перем мСтруктураДокУпПред;

Перем мНомерВыгрузки; // счетчик выгрузок, используется при формировании имени файла выгрузки

Перем ФлагСохранения; // для изменения свойства модифицированности при изменеии версии формы

Перем НомерГода;
Перем мСкопированаИз2010; // флаг для определения, что форма скопирова из 2010 в любой кроме 2010 (для вывода "0" в строке 100)

Перем НаименованияЭлементовАдреса; // данные для выгрузки фактического сокращения элементов адреса

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
	Если ФлагСохранения = Истина Тогда
		Модифицированность = Истина;
	Иначе
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьДеревоНастройкиСтраниц();
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

// Титульный лист.
Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)

	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
	Расчет();
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ОбновитьПараметрыАвтозаполненияЯчейки();
	КонецЕсли;
	
КонецПроцедуры

// Раздел 1.
Процедура ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел1ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел1ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел1ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 2.
Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел2ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел2ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 3.1.
Процедура ПолеТабличногоДокументаРаздел31ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел31Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел31ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел31ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел31ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел31ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 3.2.
Процедура ПолеТабличногоДокументаРаздел32ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел32Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел32ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел32ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел32ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел32ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 3.3.
Процедура ПолеТабличногоДокументаРаздел33ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел33Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел33ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел33ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел33ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел33ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 3.4.
Процедура ПолеТабличногоДокументаРаздел34ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел34Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел34ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел34ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел34ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел34ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 3.5.
Процедура ПолеТабличногоДокументаРаздел35ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел35Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел35ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел35ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел35ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел35ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 3.6.
Процедура ПолеТабличногоДокументаРаздел36ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел36Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел36ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел36ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел36ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел36ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 3.7.
Процедура ПолеТабличногоДокументаРаздел37ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел37Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел37ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел37ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел37ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел37ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 3.8.
Процедура ПолеТабличногоДокументаРаздел38ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел38Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел38ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел38ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел38ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел38ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 4.
Процедура ПолеТабличногоДокументаРаздел4ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел4Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел4ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел4ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел4ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел4ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

// Раздел 5.
Процедура ПолеТабличногоДокументаРаздел5ПриАктивизацииОбласти(Элемент)
	
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел5Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел5ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел5ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел5ПриИзменении(Элемент)
	
	ОбработатьИзменениеЗначенияКорректировки(Элемент);
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел5ПриИзменении(Элемент)
	
	ОбработатьИзменениеКомментария(Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
	Расчет();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	ЗаполнитьАвто();
	
КонецПроцедуры

Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму()

Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()

Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийСохранитьИЗакрыть()

Процедура КоманднаяПанельДействийЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийЗаписать()

Процедура КоманднаяПанельФормыРасшифровать(Кнопка)
	
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		СвойстваЗаполненияОтчета.ИсточникЗаполнения.ВывестиОтчетРасшифровку("РегламентированныйОтчетРСВ1_2012", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел31Нажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел31Нажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел35Нажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел35Нажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел4Нажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел4Нажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел5Нажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел5Нажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)
	
	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	ИнициализироватьПоляТабличныхДокументов();
	
	УстановитьПараметрыОбластей();
	
	ЗаполнитьНачальныеНастройки();
	
	СформироватьМенюКнопкиПечать();
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	Если НЕ БезОткрытияФормы Тогда
		Если ИДКонфигурации = "ЗУП" ИЛИ ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" Тогда
			ЭлементыФормы.ФлажокВнешДанные.Видимость = Ложь;
			ФлажокВнешДанные = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	КонецЕсли;
	
	НачальнаяПодготовкаФормы();
	
	РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	
	Если ПТД_Титульный.Области.ПрПодп.Значение = "1" Тогда
		
		ЗапретитьВводСведенийОПредставителе();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьПоляТабличныхДокументов()
	
	// Титульный лист.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Титульный");
	ПТД_Титульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	ПТД_Титульный.Очистить();
	ПТД_Титульный.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Титульный);
	
	// Раздел 1.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1");
	ПТД_Раздел1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	ПТД_Раздел1.Очистить();
	ПТД_Раздел1.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел1);
	
	// Раздел 2.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел2");
	ПТД_Раздел2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	ПТД_Раздел2.Очистить();
	ПТД_Раздел2.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел2);
	
	// Раздел 3.1.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел31");
	ПТД_Раздел31 = ЭлементыФормы.ПолеТабличногоДокументаРаздел31;
	ПТД_Раздел31.Очистить();
	ПТД_Раздел31.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел31);
	
	// Раздел 3.2.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел32");
	ПТД_Раздел32 = ЭлементыФормы.ПолеТабличногоДокументаРаздел32;
	ПТД_Раздел32.Очистить();
	ПТД_Раздел32.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел32);
	
	// Раздел 3.3.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел33");
	ПТД_Раздел33 = ЭлементыФормы.ПолеТабличногоДокументаРаздел33;
	ПТД_Раздел33.Очистить();
	ПТД_Раздел33.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел33);
	
	// Раздел 3.4.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел34");
	ПТД_Раздел34 = ЭлементыФормы.ПолеТабличногоДокументаРаздел34;
	ПТД_Раздел34.Очистить();
	ПТД_Раздел34.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел34);
	
	// Раздел 3.5.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел35");
	ПТД_Раздел35 = ЭлементыФормы.ПолеТабличногоДокументаРаздел35;
	ПТД_Раздел35.Очистить();
	ПТД_Раздел35.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел35);
	
	// Раздел 3.6.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел36");
	ПТД_Раздел36 = ЭлементыФормы.ПолеТабличногоДокументаРаздел36;
	ПТД_Раздел36.Очистить();
	ПТД_Раздел36.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел36);
	
	// Раздел 3.7.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел37");
	ПТД_Раздел37 = ЭлементыФормы.ПолеТабличногоДокументаРаздел37;
	ПТД_Раздел37.Очистить();
	ПТД_Раздел37.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел37);
	
	// Раздел 3.8.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел38");
	ПТД_Раздел38 = ЭлементыФормы.ПолеТабличногоДокументаРаздел38;
	ПТД_Раздел38.Очистить();
	ПТД_Раздел38.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел38);
	
	// Раздел 4.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел4");
	ПТД_Раздел4 = ЭлементыФормы.ПолеТабличногоДокументаРаздел4;
	ПТД_Раздел4.Очистить();
	ПТД_Раздел4.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел4);
	
	// Раздел 5.
	Макет = ПолучитьМакет("ФормаОтчета2012Кв1_Раздел5");
	ПТД_Раздел5 = ЭлементыФормы.ПолеТабличногоДокументаРаздел5;
	ПТД_Раздел5.Очистить();
	ПТД_Раздел5.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел5);
	
КонецПроцедуры // ИнициализироватьПоляТабличныхДокументов()

Процедура УстановитьПараметрыОбластей()
	
	Для Инд = 1 По 41 Цикл
		НомерСтроки = Формат(Инд, "ЧГ=0");
		ПТД_Раздел4.Области["П000400000103_" + НомерСтроки].ЭлементУправления.МаксимальноеЗначение = 12;
	КонецЦикла;
	
	Для Инд = 3 По 6 Цикл
		ИмяОбласти = "П0003200323" + Формат(Инд, "ЧЦ=2; ЧВН=");
		ПТД_Раздел32.Области[ИмяОбласти].ЭлементУправления.МаксимальноеЗначение = 100;
	КонецЦикла;
	
	Для Инд = 3 По 6 Цикл
		ИмяОбласти = "П0003300333" + Формат(Инд, "ЧЦ=2; ЧВН=");
		ПТД_Раздел33.Области[ИмяОбласти].ЭлементУправления.МаксимальноеЗначение = 100;
		
		ИмяОбласти = "П0003300336" + Формат(Инд, "ЧЦ=2; ЧВН=");
		ПТД_Раздел33.Области[ИмяОбласти].ЭлементУправления.МаксимальноеЗначение = 100;
	КонецЦикла;
	
	Для Инд = 3 По 4 Цикл
		ИмяОбласти = "П0003400343" + Формат(Инд, "ЧЦ=2; ЧВН=");
		ПТД_Раздел34.Области[ИмяОбласти].ЭлементУправления.МаксимальноеЗначение = 100;
	КонецЦикла;
	
	Для Инд = 1 По 20 Цикл
		ИмяОбласти = "П000350000104_" + Инд;
		ПТД_Раздел35.Области[ИмяОбласти].ЭлементУправления.МаксимальноеЗначение = 100;
	КонецЦикла;
	
	ПТД_Раздел36.Области.П000360036303.ЭлементУправления.МаксимальноеЗначение = 100;
	
	Для Инд = 3 По 4 Цикл
		ИмяОбласти = "П0003700375" + Формат(Инд, "ЧЦ=2; ЧВН=");
		ПТД_Раздел37.Области[ИмяОбласти].ЭлементУправления.МаксимальноеЗначение = 100;
	КонецЦикла;
	
	Для Инд = 3 По 4 Цикл
		ИмяОбласти = "П0003800383" + Формат(Инд, "ЧЦ=2; ЧВН=");
		ПТД_Раздел38.Области[ИмяОбласти].ЭлементУправления.МаксимальноеЗначение = 100;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбнулитьОбластиЧисловыхЗначений(ПолеТабличногоДокумента)
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Если Область.СодержитЗначение И ТипЗнч(Область.Значение) = Тип("Число") Тогда
				ИсходныйФормат = Область.Формат;
				Область.Формат = ИсходныйФормат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьМенюКнопкиПечать()
	
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
	
	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));
	
	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФорму"));
	
КонецПроцедуры

Процедура ОбработатьИзменениеКомментария(Элемент)
	
	Перем Комментарий;
	
	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ОбработатьИзменениеЗначенияКорректировки(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе");
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	//настройка многострочных частей
	МногострочностьНастройка = Новый ТаблицаЗначений;
	МногострочностьНастройка.Колонки.Добавить("ИдГруппы");
	МногострочностьНастройка.Колонки.Добавить("Область");
	МногострочностьНастройка.Колонки.Добавить("ВысотаСтроки");
	МногострочностьНастройка.Колонки.Добавить("НезаполняемыеПоказателиЕсть", ОписаниеТиповБулево);
	
	МнгРаздел31 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел31.Добавить();
	НовСтр.ИдГруппы = мИдГруппы31;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	МнгРаздел35 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел35.Добавить();
	НовСтр.ИдГруппы = мИдГруппы35;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	МнгРаздел4 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел4.Добавить();
	НовСтр.ИдГруппы = мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	МнгРаздел5 = МногострочностьНастройка.Скопировать();
	НовСтр = МнгРаздел5.Добавить();
	НовСтр.ИдГруппы = мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	мСвойстваРазделовДекларации.Строки.Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел31";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел31;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел32";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел33";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел34";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел35";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел35;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел36";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел37";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел38";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел4;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.МногострочностьВРазделе              = МнгРаздел5;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)
	
	мДелитель = 1;
	
	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 
	
	Возврат ОкругленноеЧисло;
	
КонецФункции // ОкруглитьЧислоПоФормату()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)Экспорт
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = мИдГруппы31 Тогда
		ТекТабличноеПоле = ПТД_Раздел31;
		
	ИначеЕсли ИдГруппы = мИдГруппы35 Тогда
		ТекТабличноеПоле = ПТД_Раздел35;
		
	ИначеЕсли ИдГруппы = мИдГруппы4 Тогда
		ТекТабличноеПоле = ПТД_Раздел4;
		
	ИначеЕсли ИдГруппы = мИдГруппы5 Тогда
		ТекТабличноеПоле = ПТД_Раздел5;
		
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()Экспорт
	Перем ИмяГруппы;
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	
	Если ИмяТекущейСтраницыПанели = "Раздел31" Тогда
		ИмяГруппы = мИдГруппы31;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел35" Тогда
		ИмяГруппы = мИдГруппы35;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = мИдГруппы4;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		ИмяГруппы = мИдГруппы5;
		
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
        ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 ); 
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		//Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
		//	
		//	Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
		//		мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
		//		ЕстьИзменения = Истина;
		//	КонецЕсли;

		//КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				//ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				// Если значение не отображается в квадратах, то и ставить формат ячейки не нужно
				Если НЕ ЗначениеВКвадратах Тогда
					ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// ЗаголовокРегламентированногоОтчета
// Функция генерирует заголовок к форме. Также данный заголовок используется в системе проверки показателей, для вывода
// в заголовок отчета.
// Параметры:
//  ДатаНач        - дата начала периода отчета
//  ДатаКон        - дата окончания периода отчета
//  Периодичность  - периодичность - не обязательно, только в тех декларациях, где присутствует.
// Возвращаемое значение:
//  Строка. Заголовок.
//
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );
	Возврат ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
КонецФункции // ЗаголовокРегламентированногоОтчета

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()
    	
    НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	Если НЕ (НомерМесяца = "12") Тогда  
		НомерМесяца = РегламентированнаяОтчетность.ДополнитьСтроку(НомерМесяца,2,0);
	КонецЕсли;
	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Период", 2, НомерМесяца);
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОтчетГод", 4, НомерГода);
	
	Заголовок = ЗаголовокРегламентированногоОтчета(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета);
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом даты представления отчета в соответствующие
// области табличного документа.
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт
	
	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "), Истина);
	ПроставитьНаВсехЛистах("ДатаПодписиПолная", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ=dd.MM.yyyy"), ""), Ложь);
	
КонецПроцедуры // ЗаполнитьДатуВЯчейках()

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// преобразовываем, при необходимости, значение показателя к типу "Строка"
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// проставляем значение в табличные документы
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;             
	
	 //проставляем значение в многостраничные разделы
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь, СменилсяПризнакПодписанта = Ложь)
	
	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	ПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	
	// Составляем список данных, необходимых для вывода в декларацию.
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОГРН"); 
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "РегистрационныйНомерФСС");
		Сведения.Добавить("", "РегНомПФР");
		Сведения.Добавить("", "АдрЮР");
		Сведения.Добавить("", "АдрФакт");
		Сведения.Добавить("", "АдрПрописки");
		Сведения.Добавить("", "АдрМЖ");
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	Сведения.Добавить("", "ФИО");    // ФИО предпринимателя
	Сведения.Добавить("", "ФИОИсп"); // ФИО исполнителя
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ = "";
		КППЮЛ = "";
		НаимЮЛПол = "";
		ОГРН = "";
		ОКАТО = "";
		ОКПО = "";
		ОКВЭД = "";
		ОКОПФ = "";
		ОКФС = "";
		РегистрационныйНомерФСС = "";
		РегНомПФР = "";
		АдрЮР = "";
		АдрФакт = "";
		АдрПрописки = "";
		АдрМЖ = "";
	КонецЕсли;
	
	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";
	ФИОИсп = "";
	ТелИсп = "";
	ТелОрганизации = "";
	ТелСлуж = "";
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОГРН", ОГРН);
		ОргСведения.Свойство("ОКАТО", ОКАТО);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКВЭД", ОКВЭД);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
		ОргСведения.Свойство("РегНомПФР", РегНомПФР);
		ОргСведения.Свойство("АдрЮР", АдрЮР);
		ОргСведения.Свойство("АдрФакт", АдрФакт);
		ОргСведения.Свойство("АдрПрописки", АдрПрописки);
		ОргСведения.Свойство("АдрМЖ", АдрМЖ);
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);
	ОргСведения.Свойство("ФИОИсп", ФИОИсп);
	ОргСведения.Свойство("ТелИсп", ТелИсп);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж", ТелСлуж);
	Если ПБОЮЛ Тогда
		НаимЮлПол = ФИО;
		Адрес = АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук = ФИО;
		ФИОБух = "";
		ФИОИсп = "";
		ТелИсп = "";
	КонецЕсли;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		
		ПТД_Титульный.Области.ПрПодп.Значение = "1";
		ПТД_Титульный.Области.ОргПодписантФамилия.Значение = ФИОРук;
		ЗапретитьВводСведенийОПредставителе();
		Возврат;
		
	КонецЕсли;
	
	// Производим операции связанные с текущей формой отчетности.
	
	// Работаем с названием ЮЛ.
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(ПТД_Титульный.Области.ОргНазв.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение.
		ПТД_Титульный.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(ПТД_Титульный.Области.ПрПодп.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение.
		ПТД_Титульный.Области.ПрПодп.Значение = "1"; 
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(ПТД_Титульный.Области.ОргПодписантФамилия.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		ПТД_Титульный.Области.ОргПодписантФамилия.Значение = ФИОРук;
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(ПТД_Титульный.Области.ДокУпПред.Значение)) Или (СменилсяПризнакПодписанта) Тогда
		ЗапретитьВводСведенийОПредставителе();
	КонецЕсли;
	
	ИННЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(ИННЮЛ, 12, "-", 1);
	КППЮЛ = РегламентированнаяОтчетность.ДополнитьСтроку(КППЮЛ, 9, "-", 1);
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ИНН"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ИНН", 12, ИННЮЛ);
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "КПП", 9, КППЮЛ);
	КонецЕсли;
	
	// Работаем с ОГРН.
	ОГРН = РегламентированнаяОтчетность.ДополнитьСтроку(ОГРН, 15, "-", 1); // Дополнить справа прочерками
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОГРН"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОГРН", 15, ОГРН);
	КонецЕсли;
	
	// Номер телефона должен заполняться без применения знаков тире и скобок.
	ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
	ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
	ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
	ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ТелОрганизации"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ТелОрганизации", 15, ТелОрганизации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКАТО")) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКАТО", 11, ОКАТО);
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКВЭД"))) Тогда
		// Особая обработка ОКВЭД.
		Если Сред(ОКВЭД, 2, 1) = "." Тогда
			ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
		КонецЕсли;
		Если Сред(ОКВЭД, 5, 1) = "." Тогда
			ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
		КонецЕсли;
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКВЭД", 8, ОКВЭД);
		//Принудительно расставляем точки в квадратиках.
		ПТД_Титульный.Области.ОКВЭД3.Значение = ".";
		ПТД_Титульный.Области.ОКВЭД6.Значение = ".";
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКПО"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКПО", 10, ОКПО);  
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКОПФ"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКОПФ", 2, ОКОПФ);  
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКФС"))) Тогда
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОКФС", 2, ОКФС);  
	КонецЕсли;
	
	Если (мВПрограммеИзмененаОрганизация) ИЛИ (НЕ ЗначениеЗаполнено(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НомРег"))) Тогда
		// Спецобработка РегНомПФР.
		Если СтрДлина(РегНомПФР) < 14 Тогда
			Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
				РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
			КонецЕсли;
			Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
				РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
			КонецЕсли;
		КонецЕсли;
		РегламентированнаяОтчетность.роПроставитьНаВсехЛистах(ЭтаФорма, РегНомПФР, "НомРег", , , , Ложь);
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "НомРег", 14, РегНомПФР);
	КонецЕсли;
	
	Если Не ПБОЮЛ Тогда
		Адрес = АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(Адрес);
	Если Не СтруктураАдреса = Неопределено Тогда
		ПТД_Титульный.Области.Адрес1.Значение = СтруктураАдреса.Индекс;
		ПТД_Титульный.Области.Адрес2.Значение = СтруктураАдреса.Регион;
		ПТД_Титульный.Области.Адрес3.Значение = СтруктураАдреса.Район;
		ПТД_Титульный.Области.Адрес4.Значение = СтруктураАдреса.Город;
		ПТД_Титульный.Области.Адрес5.Значение = СтруктураАдреса.НаселенныйПункт;
		ПТД_Титульный.Области.Адрес6.Значение = СтруктураАдреса.Улица;
		ПТД_Титульный.Области.Адрес7.Значение = СтруктураАдреса.Дом;
		ПТД_Титульный.Области.Адрес8.Значение = СтруктураАдреса.Корпус;
		ПТД_Титульный.Области.Адрес9.Значение = СтруктураАдреса.Квартира;
		
		НаименованияЭлементовАдреса = Новый Структура;
		НаименованияЭлементовАдреса.Вставить("ТипДома",     СтруктураАдреса.ТипДома);
		НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  СтруктураАдреса.ТипКорпуса);
		НаименованияЭлементовАдреса.Вставить("ТипКвартиры", СтруктураАдреса.ТипКвартиры);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

Процедура ЗапретитьВводСведенийОПредставителе()
	
	ПТД_Титульный.Области.ОргПредНаим.Значение = "";
	ПТД_Титульный.Области.ОргПредНаим.Защита = Истина;
	ПТД_Титульный.Области.ОргПредНаим.ЦветФона = ЦветБелый;
	
	ПТД_Титульный.Области.ДокУпПред.Значение = "";
	
	мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
	мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
	мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
	мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	мСтруктураДокУпПред.Вставить("КемВыдан", " ");
	
	ПТД_Титульный.Области.ДокУпПред.Защита = Истина;
	ПТД_Титульный.Области.ДокУпПред.ЦветФона = ЦветБелый;
	
КонецПроцедуры

Процедура РазрешитьВводСведенийОПредставителе()
	
	ПТД_Титульный.Области.ОргПредНаим.Защита = Ложь;
	ПТД_Титульный.Области.ОргПредНаим.ЦветФона = ЦветЖелтый;
	
	ПТД_Титульный.Области.ДокУпПред.Защита = Ложь;
	ПТД_Титульный.Области.ДокУпПред.ЦветФона = ЦветЖелтый;
	
	ПТД_Титульный.Области.ОргПодписантФамилия.Значение = "";
	
КонецПроцедуры

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
КонецПроцедуры

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Если РегламентированнаяОтчетность.роЯвляетсяЧислом(ТекущаяОбласть.Значение) Тогда
				Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
			Иначе
				Дельта = 0;
			КонецЕсли;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма);

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.СчетчикСтраниц = Истина;
	ФормаНастройкиОтчета.мПараметры.Выгрузка = Ложь;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Если СтруктураПараметровЛиста.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПараметровЛиста);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, СтруктураПараметровЛиста);
	КонецЕсли;
КонецПроцедуры

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);

		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			// определяем вставляемую область
			ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// добавляем в таблицу новую строку
			ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + НомИсходнойСтроки;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + НомНовойСтроки;

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			
			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + НомерСтрокиВФормеТаблицы;
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области.Найти(ИмяЯчейки);
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];
			
			Если ОбластьЯчейкиТаблицы <> Неопределено Тогда
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)
	РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяЯчейка);
КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта                                = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)

	ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Комментарий1;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле( ВыбТабличноеПоле ) Экспорт
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт
	
	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // Очистить()

// ПоказатьСтраницуМногостраничногоРаздела
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	//ОткрытьФормуВыбораСтраниц("ВыбратьДляПечати");

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		Если мСчетчикСтраниц <> Истина Тогда
			//проставляем номера страниц
			НомерЛиста = 1;
			Для Каждого Эл Из мПечатныеФормы Цикл
				Если НЕ УдалосьПроставитьНомерСтраницы(Эл.Значение, НомерЛиста) Тогда
					Сообщить("Не удалось проставить номер страницы для " + Эл.Представление);
					Продолжить;
				КонецЕсли;
			    НомерЛиста = НомерЛиста + 1;			 
            КонецЦикла;
			
			//специальный алгоритм постобработки печатных листов для РСВ-1 (удаление раздела 1)
			НомерЛиста = 1; 
			Для Каждого Эл Из мПечатныеФормы Цикл  
				Если НомерЛиста = 2 И Эл.Представление = "Раздел 1, Раздел 2" Тогда
					// Проставим "0" с 100 строке
					Если НомерГода = "2010" Тогда
						Для инд = 3 По 6 Цикл  
							ИмяОбласти = "П00010001000"+инд;
							Эл.Значение.Значение.Области[ИмяОбласти].Формат = СтрЗаменить(Эл.Значение.Значение.Области[ИмяОбласти].Формат, "ЧН=-", "ЧН=");
						КонецЦикла;	
					КонецЕсли; // Проставим "0" с 100 строке
				КонецЕсли;
				
				Если НомерЛиста > 2 И Эл.Представление = "Раздел 1, Раздел 2" Тогда     					
					
					Смещать = ТипСмещенияТабличногоДокумента.ПоВертикали;
					Табл = Новый ТабличныйДокумент;
					ТаблОбл = Эл.Значение.Значение;							
					ТаблОбл.УдалитьОбласть(ТаблОбл.Область("ОсновнаяЧасть_2"), Смещать);
					
					флОбластьОграничителиУмещаетсяНаСтраницу = Табл.ПроверитьВывод(ТаблОбл);  
					Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл 						
						флОбластьОграничителиУмещаетсяНаСтраницу = Табл.ПроверитьВывод(ТаблОбл); 
						Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
							Эл.Значение.Значение.ВставитьОбласть(ТаблОбл.Область("ПустаяСтрока"), ТаблОбл.Область("ПустаяСтрока"), Смещать);
							ТаблОбл.Области.ПустаяСтрока.ВысотаСтроки = ТаблОбл.Области.ПустаяСтрока.ВысотаСтроки + 3;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				НомерЛиста = НомерЛиста + 1;
			КонецЦикла; //специальный алгортим постобработки печатных листов для РСВ-1 (удаление раздела 1)
			
		КонецЕсли;
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Пытается проставить номер страницы НомерЛиста в соответствующие ячейки табличного документа ТаблДок.
// Возвращает Истина, если удалось проставить номер. В противном случае возвращает Ложь.
Функция УдалосьПроставитьНомерСтраницы(ТаблДок,Знач НомерЛиста)
	
	ОбластиСНомерамиЛистов = Новый СписокЗначений;
	Для Каждого Обл Из ТаблДок.Значение.Области Цикл
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		КрайнийПравыйСимвол = Прав(Обл.Имя, 1);
		Если Лев(ВРЕГ(Обл.Имя), 6) = "НОМСТР" И (КодСимвола(КрайнийПравыйСимвол) >= КодСимвола("0") И КодСимвола(КрайнийПравыйСимвол) <= КодСимвола("9"))Тогда
			ОбластиСНомерамиЛистов.Добавить(Обл, Обл.Имя);
		КонецЕсли;
		ОбластиСНомерамиЛистов.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	КонецЦикла;
	
	Цифры = Новый Массив;
	Для Инд = 1 По 9 Цикл
		Цифра = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
		НомерЛиста = Цел(НомерЛиста / 10);
		Если ПустаяСтрока(Цифра) Тогда
			Прервать;
		Иначе
			Цифры.Добавить(Цифра);
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 0 По ОбластиСНомерамиЛистов.Количество() - 1 Цикл
		ОбластиСНомерамиЛистов.Получить(Инд).Значение.Значение = Формат(?(Цифры.Количество() > Инд, Цифры[Инд], 0), "ЧЦ=1; ЧН=0; ЧГ=");
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // УдалосьПроставитьНомерСтраницы()

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт 
	
	Вариант = ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Текущие значения реквизитов документа.
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.Вид                        = Вариант;
	
	мВариант = Вариант;
	
	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	// Обновляем структуру многостраничных разделов.
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	
	// Формируем данные редактируемых ячеек таблицы.
	ПоказателиОтчета = Новый Структура();
	
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		
	КонецЦикла;
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ФлажокВнешДанные", ФлажокВнешДанные);
	
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// Флажок пересчета страниц.
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// Флажок отключения выбора значений из списков.
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);
	
	// Документ, подтверждающий полномочия представителя.
	СписокСохранения.Вставить("ДокументУпПред", мСтруктураДокУпПред);
	
	СписокСохранения.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", ОтображатьНулевыеЗначенияСтрок100и150Цифрами());
	
	СписокСохранения.Вставить("НаименованияЭлементовАдреса", НаименованияЭлементовАдреса);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма, "ПФР");
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц();
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;
	
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если ДеревоНастройкиСтраниц = Неопределено Тогда
		ФормироватьСтруктуруСтраницОтчета();
	Иначе
		мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();	
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		//мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;
		Для Каждого МногострочныйРаздел Из ДанныеМногострочныхРазделов Цикл
			ИмяГруппы       = МногострочныйРаздел.Ключ;
			СтруктураГруппы = МногострочныйРаздел.Значение;
			
			Если мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы) Тогда
				мСтруктураМногострочныхРазделов[ИмяГруппы].Очистить();
				Для Каждого СтрокаДанных Из СтруктураГруппы Цикл
					НоваяСтрокаДанных = мСтруктураМногострочныхРазделов[ИмяГруппы].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, СтрокаДанных);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
		
		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			
			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
			
		КонецЦикла;
		
	КонецЕсли;

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;

	// восстанавливаем  документ, подтверждающий полномочия представителя;
	СписокСохранения.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	Если мСтруктураДокУпПред = Неопределено Тогда
		
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;	
	
	Если СписокСохранения.Свойство("ФлажокВнешДанные") Тогда
		ФлажокВнешДанные = СписокСохранения.ФлажокВнешДанные;
	Иначе
		ФлажокВнешДанные = Ложь;
	КонецЕсли;

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ФлагСохранения = Истина;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			
			ОбластьПоказателя = ТекТабличноеПоле.Области.Найти(ИмяПоказателя);
			Если ОбластьПоказателя <> Неопределено Тогда
				ОбластьПоказателя.Значение = ЗначениеПоказателя;
			КонецЕсли
		КонецЦикла;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
	
	СписокСохранения.Свойство("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами);
	УстановитьФорматОтображенияНулевыхЗначенийСтрок100и150();
	
	СписокСохранения.Свойство("НаименованияЭлементовАдреса", НаименованияЭлементовАдреса);
	Если НаименованияЭлементовАдреса = Неопределено Тогда
		ДанныеАдреса = Новый Структура;
		ДанныеАдреса.Вставить("Индекс", ПТД_Титульный.Области.Адрес1.Значение);
		ДанныеАдреса.Вставить("Регион", ПТД_Титульный.Области.Адрес2.Значение);
		ДанныеАдреса.Вставить("Район", ПТД_Титульный.Области.Адрес3.Значение);
		ДанныеАдреса.Вставить("Город", ПТД_Титульный.Области.Адрес4.Значение);
		ДанныеАдреса.Вставить("НаселенныйПункт", ПТД_Титульный.Области.Адрес5.Значение);
		ДанныеАдреса.Вставить("Улица", ПТД_Титульный.Области.Адрес6.Значение);
		ДанныеАдреса.Вставить("Дом", ПТД_Титульный.Области.Адрес7.Значение);
		ДанныеАдреса.Вставить("Корпус", ПТД_Титульный.Области.Адрес8.Значение);
		ДанныеАдреса.Вставить("Квартира", ПТД_Титульный.Области.Адрес9.Значение);
		ВосстановитьСокращенияЭлементовАдреса(ДанныеАдреса);
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	мДокументВосстановлен = Истина;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

Процедура ВосстановитьСокращенияЭлементовАдреса(ДанныеАдреса)
	
	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "АдрЮР");
	Сведения.Добавить("", "АдрПрописки");
	
	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
	
	АдрЮР = "";
	АдрПрописки = "";
	
	ОргСведения.Свойство("АдрЮР", АдрЮР);
	ОргСведения.Свойство("АдрПрописки", АдрПрописки);
	
	Если ЭтоПБОЮЛ Тогда
		Адрес = АдрПрописки;
	Иначе
		Адрес = АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(Адрес);
	Если Не СтруктураАдреса = Неопределено Тогда
		
		Если СокрЛП(ДанныеАдреса.Индекс)          = СокрЛП(СтруктураАдреса.Индекс)
		   И СокрЛП(ДанныеАдреса.Регион)          = СокрЛП(СтруктураАдреса.Регион)
		   И СокрЛП(ДанныеАдреса.Район)           = СокрЛП(СтруктураАдреса.Район)
		   И СокрЛП(ДанныеАдреса.Город)           = СокрЛП(СтруктураАдреса.Город)
		   И СокрЛП(ДанныеАдреса.НаселенныйПункт) = СокрЛП(СтруктураАдреса.НаселенныйПункт)
		   И СокрЛП(ДанныеАдреса.Улица)           = СокрЛП(СтруктураАдреса.Улица)
		   И СокрЛП(ДанныеАдреса.Дом)             = СокрЛП(СтруктураАдреса.Дом)
		   И СокрЛП(ДанныеАдреса.Корпус)          = СокрЛП(СтруктураАдреса.Корпус)
		   И СокрЛП(ДанныеАдреса.Квартира)        = СокрЛП(СтруктураАдреса.Квартира) Тогда
			
			НаименованияЭлементовАдреса = Новый Структура;
			НаименованияЭлементовАдреса.Вставить("ТипДома",     СтруктураАдреса.ТипДома);
			НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  СтруктураАдреса.ТипКорпуса);
			НаименованияЭлементовАдреса.Вставить("ТипКвартиры", СтруктураАдреса.ТипКвартиры);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательная функция
// Проверяет выполняются ли все условия
// Если в переданной структуре Условия отсутствуют конкретные требуемые значения просходит проверка на заполненность 
//(значение="" - незаполнено). Если заполнено - условие считается выполненным		
// Параметры
//  <СтруктураДанных>  – <Структура> – данные экземпляра раздела
//                 
//  <Условия>  – <Структура> Структура условий (ключ - имя параметра, значение (необязательный параметр) - требуемое значение)
//
// Возвращаемое значение:
//    Истина, Ложь
//
Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		//проверка условия
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		//если хоть одно условие не выполнилось - заканчиваем проверку листа провалом
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции 

// СуммаПоказателяПоВсемСтраницам
// Параметры:
//  ИмяСтраницы     - имя страницы декларации
//  Показатель      - показатель декларации
//  Округлять       - округлять или нет значения
//  Условия         - не обязательный параметр, задает условия, при которых будет суммироваться результат
//
Функция СуммаПоказателяПоВсемСтраницам(ИмяСтраницы, Показатель, Округлять, Условия = Неопределено)
	
	Результат = 0;
	
	МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяСтраницы, "МногостраничностьВРазделе");
	
	Если НЕ МногостраничностьЕсть Тогда
		ТаблПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы];
		ДанныеТаблПоле = СобратьДанныеТекущегоТаблПоля(ТаблПоле);
		Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
			// Нет условий или они все выполняются.
			Результат = ДанныеТаблПоле.Показатель;
		КонецЕсли;
		Результат = ?(Округлять, ОкруглитьЧислоПоФормату(Результат), Результат);
	Иначе
		ТаблицаРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
		Если ТаблицаРаздела <> Неопределено Тогда
			Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
				ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные;
				// Проверка экземпляра.
				Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
					// Нет условий или они все выполняются.
					ЗначениеПоказателя = ДанныеТаблПоле[Показатель];
					Результат = Результат + ?(Округлять, ОкруглитьЧислоПоФормату(ЗначениеПоказателя), ЗначениеПоказателя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). В случае отсутствия заданной
// страницы вызывает расчет всех вычисляемых показателей отчета.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "" Тогда
		//для многостраничных или многостраничных разделов необходимо сохранить данные в структуру
		ИмяТекущейСтраницы = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		МногостраничностьЕсть = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницы, "МногостраничностьВРазделе");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		МногострочностьЕсть = (ИмяГруппы <> Неопределено);
		Если МногостраничностьЕсть Тогда
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницы, Ложь);
		ИначеЕсли МногострочностьЕсть Тогда
			ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		
		РасчетРаздел1();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		РасчетРаздел2();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел31" Тогда
		
		РасчетРаздел31();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел32" Тогда
		
		РасчетРаздел32();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел33" Тогда
		
		РасчетРаздел33();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел34" Тогда
		
		РасчетРаздел34();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел35" Тогда
		
		РасчетРаздел35();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел36" Тогда
		
		РасчетРаздел36();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел37" Тогда
		
		РасчетРаздел37();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел38" Тогда
		
		РасчетРаздел38();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		
		РасчетРаздел4();
		
	ИначеЕсли  ИмяТекущейСтраницыПанели = "Раздел5" Тогда
		
		РасчетРаздел5();
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		
		// Общий расчет показателей всех разделов.
		Расчет("Раздел5");
		Расчет("Раздел4");
		Расчет("Раздел38");
		Расчет("Раздел37");
		Расчет("Раздел36");
		Расчет("Раздел35");
		Расчет("Раздел34");
		Расчет("Раздел33");
		Расчет("Раздел32");
		Расчет("Раздел31");
		Расчет("Раздел2");
		Расчет("Раздел1"); // Должен рассчитываться последним, так как содержит в себе данные остальных разделов
		
	КонецЕсли;
	
КонецПроцедуры // Расчет()

Процедура РасчетРаздел1()
	
	ЗначениеСтроки110Графа03 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025003", Ложь)
	                         + СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025203", Ложь);
	ЗначениеСтроки110Графа04 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025103", Ложь);
	ЗначениеСтроки110Графа05 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200027603", Ложь);
	
	ПТД_Раздел1.Области.П000100011003.Значение = ЗначениеСтроки110Графа03;
	ПТД_Раздел1.Области.П000100011004.Значение = ЗначениеСтроки110Графа04;
	ПТД_Раздел1.Области.П000100011005.Значение = ЗначениеСтроки110Графа05;
	
	ЗначениеСтроки111Графа03 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025004", Ложь)
	                         + СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025204", Ложь);
	ЗначениеСтроки111Графа04 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025104", Ложь);
	ЗначениеСтроки111Графа05 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200027604", Ложь);
	
	ПТД_Раздел1.Области.П000100011103.Значение = ЗначениеСтроки111Графа03;
	ПТД_Раздел1.Области.П000100011104.Значение = ЗначениеСтроки111Графа04;
	ПТД_Раздел1.Области.П000100011105.Значение = ЗначениеСтроки111Графа05;
	
	ЗначениеСтроки112Графа03 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025005", Ложь)
	                         + СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025205", Ложь);
	ЗначениеСтроки112Графа04 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025105", Ложь);
	ЗначениеСтроки112Графа05 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200027605", Ложь);
	
	ПТД_Раздел1.Области.П000100011203.Значение = ЗначениеСтроки112Графа03;
	ПТД_Раздел1.Области.П000100011204.Значение = ЗначениеСтроки112Графа04;
	ПТД_Раздел1.Области.П000100011205.Значение = ЗначениеСтроки112Графа05;
	
	ЗначениеСтроки113Графа03 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025006", Ложь)
	                         + СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025206", Ложь);
	ЗначениеСтроки113Графа04 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200025106", Ложь);
	ЗначениеСтроки113Графа05 = СуммаПоказателяПоВсемСтраницам("Раздел2", "П000200027606", Ложь);
	
	ПТД_Раздел1.Области.П000100011303.Значение = ЗначениеСтроки113Графа03;
	ПТД_Раздел1.Области.П000100011304.Значение = ЗначениеСтроки113Графа04;
	ПТД_Раздел1.Области.П000100011305.Значение = ЗначениеСтроки113Графа05;
	
	Для Графа = 3 По 5 Цикл
		НомерГрафы = Формат(Графа, "ЧЦ=2; ЧВН=; ЧГ=0");
		Строка111 = ПТД_Раздел1.Области["П00010" + "00111" + НомерГрафы].Значение;
		Строка112 = ПТД_Раздел1.Области["П00010" + "00112" + НомерГрафы].Значение;
		Строка113 = ПТД_Раздел1.Области["П00010" + "00113" + НомерГрафы].Значение;
		
		ЗначениеСтроки114  = Строка111 + Строка112 + Строка113;
		
		ПТД_Раздел1.Области["П00010" + "00114" + НомерГрафы].Значение = ЗначениеСтроки114;
	КонецЦикла;
	
	ПТД_Раздел1.Области.П000100012003.Значение = ПТД_Раздел4.Области.П000400000204.Значение;
	ПТД_Раздел1.Области.П000100012004.Значение = ПТД_Раздел4.Области.П000400000205.Значение;
	ПТД_Раздел1.Области.П000100012005.Значение = ПТД_Раздел4.Области.П000400000206.Значение;
	
	Для Графа = 3 По 5 Цикл
		НомерГрафы = Формат(Графа, "ЧЦ=2; ЧВН=; ЧГ=0");
		
		Строка100 = ПТД_Раздел1.Области["П00010" + "00100" + НомерГрафы].Значение;
		Строка110 = ПТД_Раздел1.Области["П00010" + "00110" + НомерГрафы].Значение;
		Строка120 = ПТД_Раздел1.Области["П00010" + "00120" + НомерГрафы].Значение;
		
		ЗначениеСтроки130 = Строка100 + Строка110 + Строка120;
		
		ПТД_Раздел1.Области["П00010" + "00130" + НомерГрафы].Значение = ЗначениеСтроки130;
		
		Строка141 = ПТД_Раздел1.Области["П00010" + "00141" + НомерГрафы].Значение;
		Строка142 = ПТД_Раздел1.Области["П00010" + "00142" + НомерГрафы].Значение;
		Строка143 = ПТД_Раздел1.Области["П00010" + "00143" + НомерГрафы].Значение;
		
		ЗначениеСтроки144 = Строка141 + Строка142 + Строка143;
		
		ПТД_Раздел1.Области["П00010" + "00144" + НомерГрафы].Значение = ЗначениеСтроки144;
		
		Строка130 = ПТД_Раздел1.Области["П00010" + "00130" + НомерГрафы].Значение;
		Строка140 = ПТД_Раздел1.Области["П00010" + "00140" + НомерГрафы].Значение;
		
		ЗначениеСтроки150 = Строка130 - Строка140;
		
		ПТД_Раздел1.Области["П00010" + "00150" + НомерГрафы].Значение = ЗначениеСтроки150;
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетРаздел2()
	
	ИмяЛиста = "Раздел2";
	
	ТаблицаРаздела = мСтруктураМногостраничныхРазделов[ИмяЛиста];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Если (Страница.Данные = Неопределено) ИЛИ (Тип(Страница.Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = Страница.Данные;
		
		Для Графа = 3 По 6 Цикл
			
			НомерГрафы = Формат(Графа, "ЧЦ=2; ЧВН=; ЧГ=0");
			
			Строка201 = Страница.Данные["П0002000" + "201" + НомерГрафы];
			Строка202 = Страница.Данные["П0002000" + "202" + НомерГрафы];
			Строка203 = Страница.Данные["П0002000" + "203" + НомерГрафы];
			Строка211 = Страница.Данные["П0002000" + "211" + НомерГрафы];
			Строка212 = Страница.Данные["П0002000" + "212" + НомерГрафы];
			Строка213 = Страница.Данные["П0002000" + "213" + НомерГрафы];
			Строка221 = Страница.Данные["П0002000" + "221" + НомерГрафы];
			Строка222 = Страница.Данные["П0002000" + "222" + НомерГрафы];
			Строка223 = Страница.Данные["П0002000" + "223" + НомерГрафы];
			Строка231 = Страница.Данные["П0002000" + "231" + НомерГрафы];
			Строка232 = Страница.Данные["П0002000" + "232" + НомерГрафы];
			Строка233 = Страница.Данные["П0002000" + "233" + НомерГрафы];
			Строка271 = Страница.Данные["П0002000" + "271" + НомерГрафы];
			Строка272 = Страница.Данные["П0002000" + "272" + НомерГрафы];
			Строка273 = Страница.Данные["П0002000" + "273" + НомерГрафы];
			Строка274 = Страница.Данные["П0002000" + "274" + НомерГрафы];
			
			ЗначениеСтроки240 = Строка201 + Строка203 - Строка211 - Строка213 - Строка221 - Строка223 - Строка231 - Строка233;
			ЗначениеСтроки241 = Строка202 - Строка212 - Строка222 - Строка232;
			ЗначениеСтроки275 = Строка271 - Строка272 - Строка273 - Строка274;
			
			Страница.Данные["П0002000" + "240" + НомерГрафы] = ЗначениеСтроки240;
			Страница.Данные["П0002000" + "241" + НомерГрафы] = ЗначениеСтроки241;
			Страница.Данные["П0002000" + "275" + НомерГрафы] = ЗначениеСтроки275;
			
		КонецЦикла;
		
		// Если рассчитывается активный лист, то необходимо значения из структуры данных отобразить в табличном поле.
		Если Страница.АктивнаяСтраница Тогда
			Для каждого ЭлементДанных Из Данные Цикл
				Если ТипЗнч(ЭлементДанных.Значение) <> Тип("Число") 
					ИЛИ СтрДлина(ЭлементДанных.Ключ) < 13
					ИЛИ НЕ ЭтоКодПоказателяП(Лев(ЭлементДанных.Ключ, 13)) Тогда
					Продолжить;
				КонецЕсли;
				ЭлементыФормы["ПолеТабличногоДокумента" + ИмяЛиста].Области[ЭлементДанных.Ключ].Значение = ЭлементДанных.Значение;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетРаздел31()
	
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы31);
	
	ИтогГрафы05 = мСтруктураМногострочныхРазделов[мИдГруппы31].Итог("П000310001005");
	ИтогГрафы06 = мСтруктураМногострочныхРазделов[мИдГруппы31].Итог("П000310001006");
	ИтогГрафы07 = мСтруктураМногострочныхРазделов[мИдГруппы31].Итог("П000310001007");
	ИтогГрафы08 = мСтруктураМногострочныхРазделов[мИдГруппы31].Итог("П000310001008");
	
	ПТД_Раздел31.Области.П000310002005.Значение = ИтогГрафы05;
	ПТД_Раздел31.Области.П000310002006.Значение = ИтогГрафы06;
	ПТД_Раздел31.Области.П000310002007.Значение = ИтогГрафы07;
	ПТД_Раздел31.Области.П000310002008.Значение = ИтогГрафы08;
	
КонецПроцедуры

Процедура РасчетРаздел32()
	
	Строка321Графа03 = ПТД_Раздел32.Области.П000320032103.Значение;
	Строка321Графа04 = ПТД_Раздел32.Области.П000320032104.Значение;
	Строка321Графа05 = ПТД_Раздел32.Области.П000320032105.Значение;
	Строка321Графа06 = ПТД_Раздел32.Области.П000320032106.Значение;
	
	Строка322Графа03 = ПТД_Раздел32.Области.П000320032203.Значение;
	Строка322Графа04 = ПТД_Раздел32.Области.П000320032204.Значение;
	Строка322Графа05 = ПТД_Раздел32.Области.П000320032205.Значение;
	Строка322Графа06 = ПТД_Раздел32.Области.П000320032206.Значение;
	
	ЗначениеСтроки323Графа03 = ?(Строка321Графа03 = 0, 0, Строка322Графа03 / Строка321Графа03 * 100);
	ЗначениеСтроки323Графа04 = ?(Строка321Графа04 = 0, 0, Строка322Графа04 / Строка321Графа04 * 100);
	ЗначениеСтроки323Графа05 = ?(Строка321Графа05 = 0, 0, Строка322Графа05 / Строка321Графа05 * 100);
	ЗначениеСтроки323Графа06 = ?(Строка321Графа06 = 0, 0, Строка322Графа06 / Строка321Графа06 * 100);
	
	ПТД_Раздел32.Области.П000320032303.Значение = ЗначениеСтроки323Графа03;
	ПТД_Раздел32.Области.П000320032304.Значение = ЗначениеСтроки323Графа04;
	ПТД_Раздел32.Области.П000320032305.Значение = ЗначениеСтроки323Графа05;
	ПТД_Раздел32.Области.П000320032306.Значение = ЗначениеСтроки323Графа06;
	
КонецПроцедуры

Процедура РасчетРаздел33()
	
	Строка331Графа03 = ПТД_Раздел33.Области.П000330033103.Значение;
	Строка331Графа04 = ПТД_Раздел33.Области.П000330033104.Значение;
	Строка331Графа05 = ПТД_Раздел33.Области.П000330033105.Значение;
	Строка331Графа06 = ПТД_Раздел33.Области.П000330033106.Значение;
	
	Строка332Графа03 = ПТД_Раздел33.Области.П000330033203.Значение;
	Строка332Графа04 = ПТД_Раздел33.Области.П000330033204.Значение;
	Строка332Графа05 = ПТД_Раздел33.Области.П000330033205.Значение;
	Строка332Графа06 = ПТД_Раздел33.Области.П000330033206.Значение;
	
	Строка334Графа03 = ПТД_Раздел33.Области.П000330033403.Значение;
	Строка334Графа04 = ПТД_Раздел33.Области.П000330033404.Значение;
	Строка334Графа05 = ПТД_Раздел33.Области.П000330033405.Значение;
	Строка334Графа06 = ПТД_Раздел33.Области.П000330033406.Значение;
	
	Строка335Графа03 = ПТД_Раздел33.Области.П000330033503.Значение;
	Строка335Графа04 = ПТД_Раздел33.Области.П000330033504.Значение;
	Строка335Графа05 = ПТД_Раздел33.Области.П000330033505.Значение;
	Строка335Графа06 = ПТД_Раздел33.Области.П000330033506.Значение;
	
	ЗначениеСтроки333Графа03 = ?(Строка331Графа03 = 0, 0, Строка332Графа03 / Строка331Графа03 * 100);
	ЗначениеСтроки333Графа04 = ?(Строка331Графа04 = 0, 0, Строка332Графа04 / Строка331Графа04 * 100);
	ЗначениеСтроки333Графа05 = ?(Строка331Графа05 = 0, 0, Строка332Графа05 / Строка331Графа05 * 100);
	ЗначениеСтроки333Графа06 = ?(Строка331Графа06 = 0, 0, Строка332Графа06 / Строка331Графа06 * 100);
	
	ЗначениеСтроки336Графа03 = ?(Строка334Графа03 = 0, 0, Строка335Графа03 / Строка334Графа03 * 100);
	ЗначениеСтроки336Графа04 = ?(Строка334Графа04 = 0, 0, Строка335Графа04 / Строка334Графа04 * 100);
	ЗначениеСтроки336Графа05 = ?(Строка334Графа05 = 0, 0, Строка335Графа05 / Строка334Графа05 * 100);
	ЗначениеСтроки336Графа06 = ?(Строка334Графа06 = 0, 0, Строка335Графа06 / Строка334Графа06 * 100);
	
	ПТД_Раздел33.Области.П000330033303.Значение = ЗначениеСтроки333Графа03;
	ПТД_Раздел33.Области.П000330033304.Значение = ЗначениеСтроки333Графа04;
	ПТД_Раздел33.Области.П000330033305.Значение = ЗначениеСтроки333Графа05;
	ПТД_Раздел33.Области.П000330033306.Значение = ЗначениеСтроки333Графа06;
	
	ПТД_Раздел33.Области.П000330033603.Значение = ЗначениеСтроки336Графа03;
	ПТД_Раздел33.Области.П000330033604.Значение = ЗначениеСтроки336Графа04;
	ПТД_Раздел33.Области.П000330033605.Значение = ЗначениеСтроки336Графа05;
	ПТД_Раздел33.Области.П000330033606.Значение = ЗначениеСтроки336Графа06;
	
КонецПроцедуры

Процедура РасчетРаздел34()
	
	Строка341Графа03 = ПТД_Раздел34.Области.П000340034103.Значение;
	Строка341Графа04 = ПТД_Раздел34.Области.П000340034104.Значение;
	
	Строка342Графа03 = ПТД_Раздел34.Области.П000340034203.Значение;
	Строка342Графа04 = ПТД_Раздел34.Области.П000340034204.Значение;
	
	ЗначениеСтроки343Графа03 = ?(Строка341Графа03 = 0, 0, Строка342Графа03 / Строка341Графа03 * 100);
	ЗначениеСтроки343Графа04 = ?(Строка341Графа04 = 0, 0, Строка342Графа04 / Строка341Графа04 * 100);
	
	ПТД_Раздел34.Области.П000340034303.Значение = ЗначениеСтроки343Графа03;
	ПТД_Раздел34.Области.П000340034304.Значение = ЗначениеСтроки343Графа04;
	
КонецПроцедуры

Процедура РасчетРаздел35()
	
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы35);
	
	ИтогГрафы03 = мСтруктураМногострочныхРазделов[мИдГруппы35].Итог("П000350000103");
	ИтогГрафы04 = мСтруктураМногострочныхРазделов[мИдГруппы35].Итог("П000350000104");
	
	ПТД_Раздел35.Области.П000350000203.Значение = ИтогГрафы03;
	ПТД_Раздел35.Области.П000350000204.Значение = ИтогГрафы04;
	
КонецПроцедуры

Процедура РасчетРаздел36()
	
	Строка361Графа03 = ПТД_Раздел36.Области.П000360036103.Значение;
	Строка362Графа03 = ПТД_Раздел36.Области.П000360036203.Значение;
	
	ЗначениеСтроки363Графа03 = ?(Строка361Графа03 = 0, 0, Строка362Графа03 / Строка361Графа03 * 100);
	
	ПТД_Раздел36.Области.П000360036303.Значение = ЗначениеСтроки363Графа03;
	
КонецПроцедуры

Процедура РасчетРаздел37()
	
	Строка371Графа03 = ПТД_Раздел37.Области.П000370037103.Значение;
	Строка371Графа04 = ПТД_Раздел37.Области.П000370037104.Значение;
	
	Строка372Графа03 = ПТД_Раздел37.Области.П000370037203.Значение;
	Строка372Графа04 = ПТД_Раздел37.Области.П000370037204.Значение;
	
	Строка373Графа03 = ПТД_Раздел37.Области.П000370037303.Значение;
	Строка373Графа04 = ПТД_Раздел37.Области.П000370037304.Значение;
	
	Строка374Графа03 = ПТД_Раздел37.Области.П000370037403.Значение;
	Строка374Графа04 = ПТД_Раздел37.Области.П000370037404.Значение;
	
	СуммаСтрок372_373_374Графа03 = Строка372Графа03 + Строка373Графа03 + Строка374Графа03;
	СуммаСтрок372_373_374Графа04 = Строка372Графа04 + Строка373Графа04 + Строка374Графа04;
	
	ЗначениеСтроки375Графа03 = ?(Строка371Графа03 = 0, 0, СуммаСтрок372_373_374Графа03 / Строка371Графа03 * 100);
	ЗначениеСтроки375Графа04 = ?(Строка371Графа04 = 0, 0, СуммаСтрок372_373_374Графа04 / Строка371Графа04 * 100);
	
	ПТД_Раздел37.Области.П000370037503.Значение = ЗначениеСтроки375Графа03;
	ПТД_Раздел37.Области.П000370037504.Значение = ЗначениеСтроки375Графа04;
	
КонецПроцедуры

Процедура РасчетРаздел38()
	
	Строка381Графа03 = ПТД_Раздел38.Области.П000380038103.Значение;
	Строка381Графа04 = ПТД_Раздел38.Области.П000380038104.Значение;
	
	Строка382Графа03 = ПТД_Раздел38.Области.П000380038203.Значение;
	Строка382Графа04 = ПТД_Раздел38.Области.П000380038204.Значение;
	
	ЗначениеСтроки383Графа03 = ?(Строка381Графа03 = 0, 0, Строка382Графа03 / Строка381Графа03 * 100);
	ЗначениеСтроки383Графа04 = ?(Строка381Графа04 = 0, 0, Строка382Графа04 / Строка381Графа04 * 100);
	
	ПТД_Раздел38.Области.П000380038303.Значение = ЗначениеСтроки383Графа03;
	ПТД_Раздел38.Области.П000380038304.Значение = ЗначениеСтроки383Графа04;
	
КонецПроцедуры

Процедура РасчетРаздел4()
	
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы4);
	
	ИтогГрафы04 = мСтруктураМногострочныхРазделов[мИдГруппы4].Итог("П000400000104");
	ИтогГрафы05 = мСтруктураМногострочныхРазделов[мИдГруппы4].Итог("П000400000105");
	ИтогГрафы06 = мСтруктураМногострочныхРазделов[мИдГруппы4].Итог("П000400000106");
	
	ПТД_Раздел4.Области.П000400000204.Значение = ИтогГрафы04;
	ПТД_Раздел4.Области.П000400000205.Значение = ИтогГрафы05;
	ПТД_Раздел4.Области.П000400000206.Значение = ИтогГрафы06;
	
КонецПроцедуры

Процедура РасчетРаздел5()
	
	ОбновитьСтруктуруМногострочногоРаздела(мИдГруппы5);
	
	ИтогГрафы05 = мСтруктураМногострочныхРазделов[мИдГруппы5].Итог("П000500000150");
	ИтогГрафы06 = мСтруктураМногострочныхРазделов[мИдГруппы5].Итог("П000500000160");
	ИтогГрафы07 = мСтруктураМногострочныхРазделов[мИдГруппы5].Итог("П000500000170");
	ИтогГрафы08 = мСтруктураМногострочныхРазделов[мИдГруппы5].Итог("П000500000180");
	
	ПТД_Раздел5.Области.П000500000250.Значение = ИтогГрафы05;
	ПТД_Раздел5.Области.П000500000260.Значение = ИтогГрафы06;
	ПТД_Раздел5.Области.П000500000270.Значение = ИтогГрафы07;
	ПТД_Раздел5.Области.П000500000280.Значение = ИтогГрафы08;
	
КонецПроцедуры

Процедура ОтобразитьНомерКорректировки()
	
	НомерКорр = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	НомерКорректировкиСтрока = РегламентированнаяОтчетность.ДополнитьСтроку(НомерКорректировкиСтрока,3,"0",0);	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "НомерКорректировки", 3, НомерКорректировкиСтрока);
Конецпроцедуры

// Проверяет указанную строку КодПок на соответствие требованиям, предъявляемым
// к именам предписанных показателей в форматах представления отчетности версий 2.00, 2.01 и 3.00
Функция ЭтоКодПоказателяП(КодПок) 
	
	Если СтрДлина(КодПок) < 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По 13 Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет("Списки2012Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрПодп", 1, , "Выбор подписанта", КоллекцияСписковВыбора["Подписант"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрекращениеДеятельности", 1, , "Прекращение деятельности", КоллекцияСписковВыбора["ПрекращениеДеятельности"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00020000100", 2, , "Выбор тарифа", КоллекцияСписковВыбора["КодыТарифов"]);
	
КонецПроцедуры

// ЗавершитьИмпортXMLфайлаВОтчет
//
Процедура ЗавершитьИмпортXMLфайлаВОтчет(СтруктураДанныхОтчетаXMLКонтейнер)
	Если СтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Перебор по страницам.
	Иднтиф = 0;
	Для каждого Раздел Из СтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл
		// ИмяРаздела = Раздел.Раздел;
		
		ИмяРаздела = ОпределитьИмяРазделаПриИмпорте(Раздел.Данные[0].СтруктураДанных);
		
		Если ИмяРаздела = Неопределено Тогда
			// Не удалось по показателю определить имя раздела декларации.
			Продолжить;
		КонецЕсли;
		
		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "ПредставлениеДанных", Ложь);
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "МногострочностьВРазделе", 0);
		МногостраничностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяРаздела, "МногостраничностьВРазделе", Ложь);
		ПределНеДостигнут = Истина;
		
		Если МногостраничностьВРазделе Тогда
			Если мСтруктураМногостраничныхРазделов[ИмяРаздела].Количество() <> Раздел.Данные.Количество() Тогда
				// Вставим нужные экземпляры.
				Для Инд1 = 1 По Раздел.Данные.Количество() - 1 Цикл
					ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяРаздела);
					ВставитьДополнительнуюСтраницу(ИмяРаздела);  					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Срез Из Раздел.Данные Цикл
			Если МногостраничностьВРазделе Тогда
				ПоказатьСтраницуМногостраничногоРаздела(Иднтиф, ИмяРаздела, Истина);
				Если Раздел.Раздел = "Раздел2" Тогда
					Иднтиф = Иднтиф + 1;
				КонецЕсли;
			КонецЕсли;  			
			
			Для каждого ПоказательОтчета Из Срез.СтруктураДанных Цикл
				
				Показатель = ПоказательОтчета.Ключ;
				Значение = СокрЛП(ПоказательОтчета.Значение);
				
				КоличествоСтрокВБлоке = 0;
				Если МногострочностьВРазделе <> 0 Тогда
					
					// Определим, принмадлежит ли показатель к группе многострочности.
					КоличествоСтрокВБлоке = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, Показатель);
					
					Если КоличествоСтрокВБлоке > 0 Тогда
						Если ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области.Найти(Показатель) = Неопределено Тогда
							ВставитьДополнительнуюСтроку(Сред(Показатель, 1, 11));
							
							// Если вставка строки по какой-либо причине не состоялась, пропустим показатель.
							Если ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области.Найти(Показатель) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
						
						ПоказательДляПоискаВТаблицеСоставаПоказателей = Сред(Показатель, 1, 13);
					КонецЕсли;
					
				КонецЕсли;
				
				Если КоличествоСтрокВБлоке = 0 Тогда
					НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(Показатель, мПоляПоискаПоказателяВТСП);
				Иначе
					НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(ПоказательДляПоискаВТаблицеСоставаПоказателей, мПоляПоискаПоказателяВТСП);
				КонецЕсли;
				
				Если НайденнаяСтрока = Неопределено Тогда
					// Либо показателя нет, или он в квадратах
					Если ИмяРаздела = "Раздел1" Тогда
						Если (Найти(Показатель, "СуммаМес") = 1) И 
							(Найти(Показатель,"Раздел1") > 0) Тогда
							ТипДанных = "Е";
						ИначеЕсли (Найти(Показатель, "КБКРаздел1_") > 0)
							Или (Показатель = "КБКРаздел1_2")
							Или  (Показатель = "КодПлательщикаРаздел1")
							Или  (Показатель = "ОКАТОРаздел1") Тогда
							ТипДанных = "С";
						ИначеЕсли Найти(Показатель, "Тариф1") = 1 Тогда 
							Показатель = "П000200001001_1";
							ТипДанных = "К";
						ИначеЕсли Найти(Показатель, "Тариф2") = 1 Тогда 
							Показатель = "П000200001001_2";
							ТипДанных = "К";
						ИначеЕсли Найти(Показатель, "П000200001001") = 1 Тогда
							ТипДанных = "К";	
						Иначе
							// Показателя нет в составе показателей и нет в квадратных ячейках.
							Продолжить;
						КонецЕсли;
					Иначе
						// Показатель не обнаружен в составе показателей. Пропускаем.
						Продолжить;
					КонецЕсли;
				Иначе
					ТипДанных = НайденнаяСтрока.ТипДанныхПоказателя;
				КонецЕсли;
				
				Если ТипДанных = "Е" Или ТипДанных = "E" Или ТипДанных = "Ч" Тогда
					Значение = ?(РегламентированнаяОтчетность.роЯвляетсяЧислом(Значение), Число(Значение), 0);
				ИначеЕсли ТипДанных = "Д" Тогда
					Если РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
						Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
					Иначе
						Год = Прав(Значение, 4);
						Мес = Сред(Значение, 4, 2);
						День = Лев(Значение, 2);
						Значение = Год + Мес + День;
						Значение = ?(РегламентированнаяОтчетность.роЯвляетсяДатой(Значение), Дата(Значение), ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")));
					КонецЕсли;
				КонецЕсли;
				
				ДанныеИмпортированы = Истина;
				
				Если КоличествоСтрокВБлоке > 0 Тогда
					Попытка
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела].Области[Показатель].Значение = Значение;
					Исключение
						Сообщить("Показатель " + Показатель + " не проимпортирован!", СтатусСообщения.ОченьВажное);
					КонецПопытки;
					Продолжить;
				КонецЕсли;
				
				Попытка
					РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, Показатель, Значение);
					
				Исключение
					Сообщить("Показатель " + Показатель + " не проимпортирован!", СтатусСообщения.ОченьВажное);
				КонецПопытки;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗавершитьИмпортXMLфайлаВОтчет

// ОпределитьИмяРазделаПриИмпорте
//
Функция ОпределитьИмяРазделаПриИмпорте(СтруктураДанных)
	Перем Результат;

	Для каждого Зап Из СтруктураДанных Цикл
		ИмяСтраницы = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, Зап.Ключ);
		Если ИмяСтраницы <> Неопределено Тогда
			Результат = ИмяСтраницы;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ОпределитьИмяРазделаПриИмпорте

Процедура ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, ИД, МинимальноеКоличествоСтрок, ТекущееКоличествоСтрок)
	
	НовСтр = СвойстваМногострочныхЧастей.Добавить();
	НовСтр.ИД = ИД;
	НовСтр.МинимальноеКоличествоСтрок = МинимальноеКоличествоСтрок;
	НовСтр.ТекущееКоличествоСтрок = ТекущееКоличествоСтрок;
	
КонецПроцедуры

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто(Параметр = Неопределено) Экспорт 
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ФлажокВнешДанные И НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено!");
		Возврат;
	КонецЕсли;
	
	// Запрашиваем подтверждение у пользователя и очищаем отчет.
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетность.роОчистить(ЭтаФорма, Ложь);
	Расчет("Раздел2");
	Расчет("Раздел1");
	
	// формируем структуру с данными из внешнего файла, если установлен признак заполнения по внешним данным
	мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если ФлажокВнешДанные Тогда
		мСтруктураДанныхОтчетаXMLКонтейнер = РегламентированнаяОтчетность.ИмпортироватьДанныеКонтейнераXML(ЭтаФорма);
		Если мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
			Сообщить("Данные из XML файла не подходят для текущего отчета.", СтатусСообщения.Важное);
			Сообщить("Необходимо проверить период отчета и организацию (ИНН/КПП).", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	// формируем таблицу свойств многострочных частей отчета (необходима для заполнения)
	СвойстваМногострочныхЧастей = Новый ТаблицаЗначений;
	СвойстваМногострочныхЧастей.Колонки.Добавить("ИД");
	СвойстваМногострочныхЧастей.Колонки.Добавить("МинимальноеКоличествоСтрок");
	СвойстваМногострочныхЧастей.Колонки.Добавить("ТекущееКоличествоСтрок");
	ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, "П0003100010", 34, 0);
	
	СчетчикиЛистовМногостраничныхРазделов = Новый Соответствие;
	Для Каждого Стр Из мСтруктураМногостраничныхРазделов Цикл
		СчетчикиЛистовМногостраничныхРазделов.Вставить(Стр.Ключ, 0);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
		ПараметрыОтчета.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ПараметрыОтчета.Вставить("ТочностьЕдиницыИзмерения", ТочностьЕдиницыИзмерения);
		ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
		Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
			Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
				СчетчикЛистовРаздела = СчетчикиЛистовМногостраничныхРазделов[СтрУровня1.Имя];
				Если СчетчикЛистовРаздела = Неопределено Тогда // раздел не многостраничный
					Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
						СтрУровня2Имя = СтрУровня2.Имя;
						СвойстваМнЧ = СвойстваМногострочныхЧастей.Найти(СтрУровня2Имя, "ИД");
						Если СвойстваМнЧ <> Неопределено Тогда // это определение многострочного раздела
							Если СвойстваМнЧ.ТекущееКоличествоСтрок >= СвойстваМнЧ.МинимальноеКоличествоСтрок Тогда
								ВставитьДополнительнуюСтроку(СвойстваМнЧ.ИД);
							КонецЕсли;
							СвойстваМнЧ.ТекущееКоличествоСтрок = СвойстваМнЧ.ТекущееКоличествоСтрок + 1;
							НомерСтрокиСтр = Формат(СвойстваМнЧ.ТекущееКоличествоСтрок,"ЧГ=0");
							Для Каждого СтрУровня3 Из СтрУровня2.Строки Цикл
								УстановитьЗначениеПоказателя(СтрУровня3.Имя + "_" + НомерСтрокиСтр, СтрУровня3.Значение, СтрУровня1.Имя);
							КонецЦикла;
							ОбновитьСтруктуруМногострочногоРаздела(СвойстваМнЧ.ИД);
						Иначе // это показатель
							УстановитьЗначениеПоказателя(СтрУровня2Имя, СтрУровня2.Значение, СтрУровня1.Имя);
						КонецЕсли;
					КонецЦикла;
				Иначе // раздел многостраничный
					СчетчикиЛистовМногостраничныхРазделов.Вставить(СтрУровня1.Имя, СчетчикЛистовРаздела + 1);
					Если СчетчикЛистовРаздела > 0 Тогда // если это не первый лист раздела, то добавим еще один
						РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, СтрУровня1.Имя, Ложь);
						Расчет(СтрУровня1.Имя);
						ИзменитьТаблицуПараметровАвтозаполнения(1, СтрУровня1.Имя);
						ВставитьДополнительнуюСтраницу("Раздел2");
					КонецЕсли;
					Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
						УстановитьЗначениеПоказателя(СтрУровня2.Имя, СтрУровня2.Значение, СтрУровня1.Имя);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// добавляем показатели в внешнего файла
	ЗавершитьИмпортXMLФайлаВОтчет(мСтруктураДанныхОтчетаXMLКонтейнер);
	
	// перед расчетом сохраним данные последней страницы Раздела 2
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Истина);
	
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

// УстановитьЗначениеПоказателя
// Процедура "прослойка". Она обрабатывает показатель с учетом источника данных ИБ и XML контейнера.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач Значение,  ИмяРаздела = Неопределено)
	// Вызываем процедуру, которая обработает показатель на предмет присутствия в XML контейнере.
	// Если в xml нет такого показателя, то установится из ИБ. Если есть, то из XML.
	// РегламентированнаяОтчетность.УстановитьПоказательСУчетомXML(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
	// Флаг, что заполнение отчета происходит с учетом данных XML файла.
	// ДанныеXMLПрисутствуют
	ДанныеXMLПрисутствуют = НЕ мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если НЕ ДанныеXMLПрисутствуют Тогда
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, Значение);
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = Неопределено Тогда
		// Определим раздел отчета.
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяПоказателя);
	Иначе
		ИмяСтраницыПанели = ИмяРаздела;
	КонецЕсли;
	
	// Есть ли данные по этому разделу в контейнере XML.
	//ДанныеРазделаXML = мСтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета.Найти(ИмяСтраницыПанели, "Раздел");
	// Просмотрим все разделы в xml документе. Т.к. в одном разделе Раздел2 может содержаться показатели раздела 2.1 и т.д.
	ДанныеРазделаXML = Неопределено;
	Для каждого РазделXML Из мСтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл
		Для каждого Экз Из РазделXML.Данные Цикл
			Если Экз.СтруктураДанных.Свойство(ИмяПоказателя) И НЕ ИмяРаздела = "Титульный" Тогда
				ДанныеРазделаXML = РазделXML;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеРазделаXML = Неопределено Тогда
		// В контейнере XML нет данных по заполняемому разделу, и соответвтвенно по показателю.
		РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, Значение);
		Возврат;
	КонецЕсли;
	
	// Получим таблицу раздела.
	ДанныеРазделаXMLДанные = ДанныеРазделаXML.Данные;
	
	Многостраничность = мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели);
	Если Многостраничность Тогда
		ИндАктивнойСтр = мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели].Найти(Истина, "АктивнаяСтраница");
		ИндАктивнойСтраницы = мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели].Индекс(ИндАктивнойСтр);
	КонецЕсли;
	
	Для каждого Экз Из ДанныеРазделаXMLДанные Цикл
		Если Многостраничность Тогда
			Если ИндАктивнойСтраницы <> ДанныеРазделаXMLДанные.Индекс(Экз) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
		Если Экз.СтруктураДанных.Свойство(ИмяПоказателя) Тогда
			// Показатель есть в XML контейнере.
			ЗначениеПоПоказателюИзКонтейнераXML = СокрЛП(Экз.СтруктураДанных[ИмяПоказателя]);
			
			// Если пустая строка, то считаем, что в контейнере xml показателя нет, равносильно или 0, если число или "" если дата.
			Если ПустаяСтрока(ЗначениеПоПоказателюИзКонтейнераXML) Тогда
				ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
			ИначеЕсли (СтрДлина(ЗначениеПоПоказателюИзКонтейнераXML) = 10) И (СтрЧислоВхождений(ЗначениеПоПоказателюИзКонтейнераXML, ".") = 2) Тогда
				Год = Прав(ЗначениеПоПоказателюИзКонтейнераXML, 4);
				Мес = Сред(ЗначениеПоПоказателюИзКонтейнераXML, 4, 2);
				День = Лев(ЗначениеПоПоказателюИзКонтейнераXML, 2);
				ЗначениеДата = Год + Мес + День;
				ЗначениеПоПоказателюИзКонтейнераXML = ?(РегламентированнаяОтчетность.роЯвляетсяДатой(ЗначениеДата), Дата(ЗначениеДата), Неопределено);
			ИначеЕсли РегламентированнаяОтчетность.роЯвляетсяЧислом(ЗначениеПоПоказателюИзКонтейнераXML) Тогда
				ЗначениеПоПоказателюИзКонтейнераXML = Число(ЗначениеПоПоказателюИзКонтейнераXML);
				Если ЗначениеПоПоказателюИзКонтейнераXML = 0 Тогда
					// В случае, если числовое значение равное 0 в xml, считаем, что показатель отсутствует.
					ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			// Удаляем ключ, чтобы при окончательном импорте xml данные снова не перетерлись на листе из источника xml.
			// Таким образом остаются только те показатели, которые из ИБ не заполняются или не заполнились.
			
			Экз.СтруктураДанных.Удалить(ИмяПоказателя);
			
		КонецЕсли;
		
		// Если показатель в XML отсутствует (Неопределено) или не заполнен, то всегда записываем в отчет переданное значение (из ИБ).
		Если ЗначениеПоПоказателюИзКонтейнераXML = Неопределено Тогда
			// В контейнере не оказалось необходимого показателя. Заполняем стандартной процедурой.
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, Значение);
			Прервать;
		КонецЕсли;
		
		// Если показатель есть в ИБ и в XML, тогда за основу берем показатель из XML контейнера.
		Если ЗначениеПоПоказателюИзКонтейнераXML <> Неопределено Тогда
			// Значение из XML всегда приоритетнее. Заполняем по данным XML файла.
			РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, ЗначениеПоПоказателюИзКонтейнераXML);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры // УстановитьЗначениеПоказателя

Процедура НачальнаяПодготовкаФормы() Экспорт 
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	мВПрограммеИзмененаОрганизация = Ложь;
	
	мВПрограммеИзмененаОрганизация = Ложь;
	
	мДокументВосстановлен = Ложь;
	
	мАдресвФорматеДляВыгрузки = "";
	
	мАвтоВыборКодов = Ложь;
	
	ФлагСохранения = Ложь;
	
	РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
	ПТД_Титульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	
	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	
	Если мСохраненныйДок = Неопределено Тогда
		
		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
			
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл
				
				СтрокаГруппы = СтруктураГруппы.Добавить();
				
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					
					ИмяКолонки    = Колонка.Имя;
					КодПоказателя = ИмяКолонки + "_" + НСтр;
					
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
					
					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// создаём структуру документа, подтверждающего полномочия представителя
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			ОтобразитьНомерКорректировки();
			
			РегламентированнаяОтчетность.роУстановитьФорматВывода(ЭтаФорма);
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			
		КонецЕсли;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		
		Если мСкопированаФорма <> Неопределено Тогда
			Если Год(мСохраненныйДок.ДатаОкончания) = 2010 И Год(мДатаКонцаПериодаОтчета) > 2010 Тогда
				мСкопированаИз2010 = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ВосстановитьСохраненныеДанные();
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	// ИНИЦИАЛИЗАЦИЯ ЗАПОЛНЕНИЯ СОДЕРЖАТЕЛЬНОЙ ЧАСТИ ПО УЧЕТНЫМ ДАННЫМ
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	КонецЕсли;
	Если СвойстваЗаполненияОтчета = Неопределено И (ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ") Тогда
		//не нужно очищать мСтруктураВариантыЗаполнения в общем модуле, авторасчитываемые ячейки раскрашиваем из макета
		ИзМакета = Истина;
		РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета, ИзМакета);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////
	
	ПоказатьПериод();
	
	// В случае, если по F9 поменяли организацию при копировании, тогда в переменную
	// мВПрограммеИзмененаОрганизация будет записано значение Истина;
	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		
		ЗаполнитьДатуВЯчейках();
		ЗаполнитьСведенияОбОрганизации();
		
	КонецЕсли;
	
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		
		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если (НазваниеСтраницы = "Титульный") Или (НазваниеСтраницы = "ФизЛица") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяТекущейСтраницыПанели].Заголовок;
			Сообщить("В разделе """ + ЗаголовокСтраницы + """ максимальное количество экземпляров страниц равно " + МаксКолвоЭкз + ".", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = ЭлементыФормы[ИмяТекТабличногоПоля];
	
	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);

	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	
	Если СтрТаблицаСтраницы <> Неопределено Тогда

		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		ОчиститьТабличноеПоле(ТекТабличноеПоле);
		//итоговые ячейки не очистились - необходимо провести расчет
		//для этого сохраним данные страницы
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
		Расчет(ИмяТекущейСтраницыПанели);
		
		//ТекущийЭлемент     = ТекТабличноеПоле;
		Модифицированность = Истина;

	КонецЕсли;

	РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел2Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2");
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел2Нажатие(Элемент)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел2");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2");
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел2Нажатие(Элемент)
	
	ВставитьДополнительнуюСтраницу("Раздел2");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел2Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2");
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел2Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2");
	
КонецПроцедуры

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если СпециальноеДобавление Тогда
		//Форма.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе
		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;

		Если ИмяКолонкиНомера <> Неопределено Тогда
			Если ИмяКолонкиНомера = ИмяКолонки Тогда
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Значение = КолСтрокСтр1;
				Иначе
					ОбластьЯчейки.Текст = КолСтрокСтр1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр1;

		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Модифицированность = Истина;
КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
		  + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ТаблицаЗначений") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.Найти(ИмяГруппы, "ИдГруппы").Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			// Запустим единую процедуру удаляющая строку по специальному алгоритму
			// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
			//СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		Иначе
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		// Восстановим область.
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					КолонкаИмя = Колонка.Имя;
					ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
					НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;

					ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаИмя Тогда
							// обновляем порядковый номер строки

							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;

				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						// обновляем порядковый номер строки
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Модифицированность = Истина;
	
	Расчет();

КонецПроцедуры // УдалитьДополнительнуюСтроку()

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	ИмяОбласти = Область.Имя;
	Если ИмяОбласти = "ЗаголовокСтроки100" ИЛИ ИмяОбласти = "ЗаголовокСтроки150" Тогда
		СписокВариантовОтображения = Новый СписокЗначений;
		ВариантПрочерк = СписокВариантовОтображения.Добавить(, "Отображать прочерком");
		ВариантЦифры = СписокВариантовОтображения.Добавить(, "Отображать цифрами");
		
		ВыбранныйВариант = ВыбратьИзМеню(СписокВариантовОтображения, Элемент);
		
		Если ВыбранныйВариант <> Неопределено Тогда
			ВыбранВариантОтображенияЦифрами = (ВыбранныйВариант = ВариантЦифры);
			НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами = ВыбранВариантОтображенияЦифрами;
			Модифицированность = Истина;
		КонецЕсли;
		УстановитьФорматОтображенияНулевыхЗначенийСтрок100и150();
	КонецЕсли;

	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИмя = Область.Имя;
	
	ВводТолькоЦифр = Новый Структура;
	ВводТолькоЦифр.Вставить("СтрокаТолькоИзЧисел", Истина);
	
	Если Найти(ОбластьИмя, "НомСтр") > 0 Тогда
		ИмяРаздела = Сред(Элемент.Имя, 24);
		НомерСтраницы = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, ИмяРаздела, "НомСтр"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , ИмяРаздела                   // Название раздела.
										   , "НомСтр"                 // Имя ячейки для записи.
										   , НомерСтраницы // Первоначальное значение.
										   , 3              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите номер страницы"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 3    // Кол-во квадратиков, если в квадратах
										   );
	ИначеЕсли Найти(ОбластьИмя, "КолЗастрахованных") > 0 Тогда
		КолЗастрахованных = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КолЗастрахованных"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"
										   , "КолЗастрахованных"
										   , КолЗастрахованных
										   , 6
										   , 0
										   , Истина
										   , "Введите количество"
										   , 
										   , 
										   , Неопределено
										   , СтандартнаяОбработка
										   , 6, , ВводТолькоЦифр);
	ИначеЕсли Найти(ОбластьИмя, "СрСписЧисл") > 0 Тогда
		СрСписЧисл = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "СрСписЧисл"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"
										   , "СрСписЧисл"
										   , СрСписЧисл
										   , 6
										   , 0
										   , Истина
										   , "Введите количество"
										   ,
										   ,
										   , Неопределено
										   , СтандартнаяОбработка
										   , 6, , ВводТолькоЦифр);
	ИначеЕсли Найти(ОбластьИмя, "ОКАТО") > 0 Тогда
		ОКАТО = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ОКАТО"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "ОКАТО"                 // Имя ячейки для записи.
										   , ОКАТО // Первоначальное значение.
										   , 11              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "ОКАТО"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 11    // Кол-во квадратиков, если в квадратах
										   );
	ИначеЕсли Найти(ОбластьИмя, "НомТФОМС") > 0 Тогда
		НомТФОМС = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НомТФОМС"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "НомТФОМС"                 // Имя ячейки для записи.
										   , НомТФОМС // Первоначальное значение.
										   , 15              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите код"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 15    // Кол-во квадратиков, если в квадратах
										   );
	ИначеЕсли Найти(ОбластьИмя, "ТелОрганизации") > 0 Тогда
		ТелОрганизации = СокрЛП(РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ТелОрганизации"));
		РегламентированнаяОтчетность.ВвестиЗначениеПоказателяРеглОтчета(ЭтаФорма
										   , "Титульный"                   // Название раздела.
										   , "ТелОрганизации"                 // Имя ячейки для записи.
										   , ТелОрганизации // Первоначальное значение.
										   , 15              // РазмерностьЦ.
										   , 0                          // РазмерностьД.
										   , Ложь                       // Это сумма?
										   , "Введите код"                 // Текст ввода.
										   ,                          // Текст выбора из таблицы значений.
										   , // Таблица выбора значений.
										   , Неопределено               // Строка доп. ввода.
										   , СтандартнаяОбработка       // Стандартная обработка.
										   , 15    // Кол-во квадратиков, если в квадратах
										   );
	ИначеЕсли Найти(ОбластьИмя, "ДокУпПред") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВводаДокументПредставителя = ПолучитьФорму("ФормаВводаДокументПредставителя");
		ФормаВводаДокументПредставителя.СтруктураДокумента = мСтруктураДокУпПред;
		Результат = ФормаВводаДокументПредставителя.ОткрытьМодально();
		
		Если Результат <> Неопределено Тогда
			мСтруктураДокУпПред = Результат;
			Текст = "";
			
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НаименованиеУдостоверяющего, "");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРимскиеЦифры, " ");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРусскиеБуквы, " ");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НомерУдостоверяющего, " № ");
			Текст = ДобавитьРеквизит(Текст, Формат(мСтруктураДокУпПред.ДатаВыдачи,"ДФ=dd.MM.yyyy"), " от ");
			Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.КемВыдан, " выдан: ");
			
			ПТД_Титульный.Области.ДокУпПред.Значение = Текст;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(ОбластьИмя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВводитьПоНазванию = (Найти(ОбластьИмя, "П000350000122") = 1);
	КолонкаПоиска = ?(ВводитьПоНазванию, "Название", "Код");
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		ПрПодписанта = ПТД_Титульный.Области.ПрПодп.Значение;
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, КолонкаПоиска);
		Если Область.Имя = "ПрПодп" Тогда
			ПрПодписантаНов = ПТД_Титульный.Области.ПрПодп.Значение;
			СменилсяПрПодписанта = ?(ПрПодписанта = ПрПодписантаНов, Ложь, Истина);
			Если СменилсяПрПодписанта Тогда
				Если ПрПодписантаНов = "1" Тогда
					ЗаполнитьСведенияОбОрганизации(, Истина);
				Иначе
					РазрешитьВводСведенийОПредставителе();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс)
     
     Если ЗначениеЗаполнено(ДобСтрока) Тогда
          Текст = Текст + Префикс + ДобСтрока;
     КонецЕсли;
     
     Возврат Текст;
     
КонецФункции

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	ФормаВыбора = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.Заголовок = ТекстВыбора;
	ФормаВыбора.СписокКодов = ТаблицаВыбора;
	Если ИсходнаяСтрока <> Неопределено Тогда
		ФормаВыбора.КодИсходнойСтроки = ИсходнаяСтрока.Код;
	КонецЕсли;
	
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Расчет();
	
КонецПроцедуры

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если НЕ мСохраненныйДок.ЭтоНовый() Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);
	ОтобразитьНомерКорректировки()

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// Процедура - обработчик события при смене текущей страницы основной
// панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;

	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);

	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИдГруппы <> Неопределено Тогда
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
		ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	КонецЕсли;

	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда

		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		ВывестиЭлементыВариантаЗаполнения(ТекущаяОбласть);
	КонецЕсли;
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	//Проставим Новые ИНН и ФИО на титульный лист
	ЗаполнитьСведенияОбОрганизации(Истина);

	// Переформируем листы ФЛ
	//ЗаполнитьСведенияОбФЛ(Истина);

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Истина;

	// Заполним дату на листах
	ЗаполнитьДатуВЯчейках();

	// Переменна изменяется, для простановки дат на всех листах многостраничных разделов
	мВПрограммеИзмененаОрганизация = Ложь;

	// Возведем признак модифицированности
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	
	мДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел31";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел31";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел32";
	СтрокаУровня1.Представление            = "Раздел 3.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел32";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел33";
	СтрокаУровня1.Представление            = "Раздел 3.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел33";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел34";
	СтрокаУровня1.Представление            = "Раздел 3.4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел34";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел35";
	СтрокаУровня1.Представление            = "Раздел 3.5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел35";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел36";
	СтрокаУровня1.Представление            = "Раздел 3.6";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел36";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел37";
	СтрокаУровня1.Представление            = "Раздел 3.7";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел37";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел38";
	СтрокаУровня1.Представление            = "Раздел 3.8";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел38";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел5";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();

	УстановитьФорматОтображенияНулевыхЗначенийСтрок100и150();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Функция ТекущаяСтраницаПервая(ИмяТекущейСтраницыПанели) Экспорт
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭтаФорма.ЭлементыФормы[ИмяТекТабличногоПоля];
	
	Пр = ЭтаФорма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела); 
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	
	
	НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы)+1;
	
	Возврат НомерТекущейСтраницы = 1
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры
// 
Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчетеПФР(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник, "ПФР");
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)
	ОтобразитьНомерКорректировки();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		// Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	
	РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(Организация, Число(Параметры.КалендарныйГод), мНомерВыгрузки);
	
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИмяФайла;
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузки700_2012");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НомСтр = ВысотаТаблицы - НомерСтроки + 2;
		Если Макет.Область(НомерСтроки, 0, НомерСтроки, 0).Видимость = Неопределено Тогда
			Сообщить(НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция СформироватьИмяФайла(Параметры)
	
	мНомерВыгрузки = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(Организация, Число(Параметры.КалендарныйГод));
	мНомерВыгрузки = мНомерВыгрузки + 1;
	
	СтрНомПачки = РегламентированнаяОтчетность.ДополнитьСтроку(Формат(мНомерВыгрузки, "ЧГ="), 5, "0");
	
	// Имя файла без подразделений.
	ИмяФайла = "PFR-700-Y-" + Параметры.КалендарныйГод + "-ORG-" + Параметры.РегистрационныйНомерПФР +
	"-DCK-" + СтрНомПачки + "-DPT-000000-DCK-00000.XML";
	
	Возврат ИмяФайла;
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
	// Восстанавливаем  документ, подтверждающий полномочия представителя.
	СохрСтруктура.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	
	// Структура с сокращениями элементов адреса;
	СохрСтруктура.Свойство("НаименованияЭлементовАдреса", НаименованияЭлементовАдреса);
	
	Если НаименованияЭлементовАдреса = Неопределено Тогда
		ДанныеАдреса = Новый Структура;
		ДанныеАдреса.Вставить("Индекс", мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес1);
		ДанныеАдреса.Вставить("Регион", мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес2);
		ДанныеАдреса.Вставить("Район", мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес3);
		ДанныеАдреса.Вставить("Город", мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес4);
		ДанныеАдреса.Вставить("НаселенныйПункт", мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес5);
		ДанныеАдреса.Вставить("Улица", мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес6);
		ДанныеАдреса.Вставить("Дом", мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес7);
		ДанныеАдреса.Вставить("Корпус", мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес8);
		ДанныеАдреса.Вставить("Квартира", мДанныеОтчета.ПолеТабличногоДокументаТитульный.Адрес9);
		ВосстановитьСокращенияЭлементовАдреса(ДанныеАдреса);
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеЧисла(Знач ЗначЧисло)
	
	Если ТипЗнч(ЗначЧисло) = Тип("Строка") Тогда
		ЗначЧисло = СокрЛП(ЗначЧисло);	
		ЗначЧисло = ?(ЗначениеЗаполнено(ЗначЧисло) И ОбщегоНазначения.ТолькоЦифрыВСтроке(ЗначЧисло), Число(ЗначЧисло), 0);
	КонецЕсли;
	
	СтрЧисло = Формат(ЗначЧисло, "ЧН=; ЧГ=");	
	
	Возврат СтрЧисло;
	
КонецФункции

Процедура ЗаменитьБуквуЁ(РедактируемаяСтрока, НазваниеРеквизита)
	Если Найти(ВРег(РедактируемаяСтрока), "Ё") > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В реквизите """ + НазваниеРеквизита + """ (" + РедактируемаяСтрока +") буква Ё заменена на Е.");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "Ё", "Е");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "ё", "е");
		
	КонецЕсли;
КонецПроцедуры // ЗаменитьБуквуЁ()

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Параметры = Новый Структура;
	
	// Заполнение свойств программы подготовки данных.
	ВерсПрог = РегламентированнаяОтчетность.СформироватьВерсПрог();
	
	ПромСтрока = СтрЗаменить(ВерсПрог," ",Символы.ПС);
	ПоследнееВхождениеРазделителя = СтрДлина(ВерсПрог) - СтрДлина(СтрПолучитьСтроку(ПромСтрока,СтрЧислоСтрок(ПромСтрока)));
	
	Параметры.Вставить("НазваниеПрограммы", ВРЕГ(СокрЛП(Лев(ВерсПрог, ПоследнееВхождениеРазделителя - 1))));
	Параметры.Вставить("ВерсияПрограммы", СокрЛП(Сред(ВерсПрог, ПоследнееВхождениеРазделителя + 1)));
	
	Параметры.Вставить("ЭтоПБОЮЛ", РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация));
	Параметры.Вставить("ЭтоГоловнаяОрганизация", НЕ ЗначениеЗаполнено(Организация.ГоловнаяОрганизация));
	
	Параметры.Вставить("НомерВПачке", 1);
	Параметры.Вставить("РегистрационныйНомерПФР", СокрЛП(Титульный.НомРег));
	Параметры.Вставить("НомерКорректировки", СокрЛП(Титульный.НомерКорректировки));
	Параметры.Вставить("КодОтчетногоПериода", СокрЛП(Титульный.Период));
	Параметры.Вставить("КалендарныйГод", СокрЛП(Титульный.ОтчетГод));
	Параметры.Вставить("ПрекращениеДеятельности", СокрЛП(Титульный.ПрекращениеДеятельности));
	Если Параметры.ЭтоПБОЮЛ Тогда
		ФИОИП = РазложитьФИО(ВРЕГ(Титульный.ОргНазв));
		
		ЗаменитьБуквуЁ(ФИОИП.Фамилия,  "Фамилия физического лица");
		ЗаменитьБуквуЁ(ФИОИП.Имя,      "Имя физического лица");
		ЗаменитьБуквуЁ(ФИОИП.Отчество, "Отчество физического лица");
		
		Параметры.Вставить("ФамилияИП",  ФИОИП.Фамилия);
		Параметры.Вставить("ИмяИП",      ФИОИП.Имя);
		Параметры.Вставить("ОтчествоИП", ФИОИП.Отчество);
		
		Параметры.Вставить("ОГРНИП", СокрЛП(Титульный.ОГРН));
	Иначе
		НаимОрг = ВРЕГ(СокрЛП(Титульный.ОргНазв));
		ЗаменитьБуквуЁ(НаимОрг, "Наименование организации");
		Параметры.Вставить("НаименованиеОрганизации", НаимОрг);
		Параметры.Вставить("КПП", СокрЛП(СтрЗаменить(Титульный.КПП, "-", "")));
		Если НЕ ЭтоИностраннаяОрганизация() Тогда
			Параметры.Вставить("ОГРН", СокрЛП(СтрЗаменить(Титульный.ОГРН, "-", "")));
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("ИНН", СокрЛП(СтрЗаменить(Титульный.ИНН, "-", "")));
	
	Параметры.Вставить("КодПоОКАТО", СокрЛП(Титульный.ОКАТО));
	Параметры.Вставить("КодПоОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(СтрЗаменить(Титульный.ОКВЭД, " ", ""), ".", " ")), " ", "."));
	Параметры.Вставить("Телефон", СокрЛП(Титульный.ТелОрганизации));
	
	Параметры.Вставить("ЛицоПодтверждающееСведения", ПредставлениеЧисла(Титульный.ПрПодп));
	
	ФИОПодписанта = РазложитьФИО(ВРЕГ(Титульный.ОргПодписантФамилия));
	
	ЗаменитьБуквуЁ(ФИОПодписанта.Фамилия,  "Фамилия подписанта");
	ЗаменитьБуквуЁ(ФИОПодписанта.Имя,      "Имя подписанта");
	ЗаменитьБуквуЁ(ФИОПодписанта.Отчество, "Отчество подписанта");

	Параметры.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	Параметры.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	Параметры.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	Параметры.Вставить("НаименованиеОрганизацииПредставителя", Титульный.ОргПредНаим);
	
	Параметры.Вставить("КоличествоЗЛ", ПредставлениеЧисла(Титульный.КолЗастрахованных));
	Параметры.Вставить("СреднесписочнаяЧисленность", ПредставлениеЧисла(Титульный.СрСписЧисл));
	
	КоличествоСтраниц = ПредставлениеЧисла(Титульный.СоставленаНа);
	КоличествоСтраниц = ?(КоличествоСтраниц = "0", "1", КоличествоСтраниц);
	Параметры.Вставить("КоличествоСтраниц", КоличествоСтраниц);
	Параметры.Вставить("КоличествоЛистовПриложения", ПредставлениеЧисла(Титульный.Прил));
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_СВ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_НАЧИНАЯ_С_2012_ГОДА");
	
	// Заполнение параметров адреса.
	Параметры.Вставить("Индекс", СокрЛП(Титульный.Адрес1));
	
	РегионСокращение = "";
	РегионНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес2)), РегионСокращение);
	ЗаменитьБуквуЁ(РегионНазвание, "Регион");
	Параметры.Вставить("РегионНазвание", РегионНазвание);
	Параметры.Вставить("РегионСокращение", РегионСокращение);
	
	РайонСокращение = "";
	РайонНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес3)), РайонСокращение);
	ЗаменитьБуквуЁ(РайонНазвание, "Район");
	Параметры.Вставить("РайонНазвание", РайонНазвание);
	Параметры.Вставить("РайонСокращение", РайонСокращение);
	
	ГородСокращение = "";
	ГородНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес4)), ГородСокращение);
	ЗаменитьБуквуЁ(ГородНазвание, "Город");
	Параметры.Вставить("ГородНазвание", ГородНазвание);
	Параметры.Вставить("ГородСокращение", ГородСокращение);
	
	НаселенныйПунктСокращение = "";
	НаселенныйПунктНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес5)), НаселенныйПунктСокращение);
	ЗаменитьБуквуЁ(НаселенныйПунктНазвание, "Населенный пункт");
	Параметры.Вставить("НаселенныйПунктНазвание", НаселенныйПунктНазвание);
	Параметры.Вставить("НаселенныйПунктСокращение", НаселенныйПунктСокращение);
	
	УлицаСокращение = "";
	УлицаНазвание = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(ВРЕГ(СокрЛП(Титульный.Адрес6)), УлицаСокращение);
	ЗаменитьБуквуЁ(УлицаНазвание, "Улица");
	Параметры.Вставить("УлицаНазвание", УлицаНазвание);
	Параметры.Вставить("УлицаСокращение", УлицаСокращение);
	
	ТипДома = Неопределено;
	Если НаименованияЭлементовАдреса <> Неопределено
	   И НаименованияЭлементовАдреса.Свойство("ТипДома", ТипДома)
	   И ВРег(ТипДома) = "ВЛАДЕНИЕ" Тогда
		ДомСокращение = "ВЛД";
	Иначе
		ДомСокращение = "Д";
	КонецЕсли;
	
	ДомНомер = ВРЕГ(СокрЛП(Титульный.Адрес7));
	Если ЗначениеЗаполнено(ДомНомер) Тогда
		Параметры.Вставить("ДомСокращение", ДомСокращение);
		Параметры.Вставить("ДомНомер", ДомНомер);
	КонецЕсли;
	
	ТипКорпуса = Неопределено;
	Если НаименованияЭлементовАдреса <> Неопределено
	   И НаименованияЭлементовАдреса.Свойство("ТипКорпуса", ТипКорпуса)
	   И ВРег(ТипКорпуса) = "СТРОЕНИЕ" Тогда
		КорпусСокращение = "СТР";
	Иначе
		КорпусСокращение = "КОРП";
	КонецЕсли;
	
	КорпусНомер = ВРЕГ(СокрЛП(Титульный.Адрес8));
	Если ЗначениеЗаполнено(КорпусНомер) Тогда
		Параметры.Вставить("КорпусСокращение", КорпусСокращение);
		Параметры.Вставить("КорпусНомер", КорпусНомер);
	КонецЕсли;
	
	ТипКвартиры = Неопределено;
	Если НаименованияЭлементовАдреса <> Неопределено
	   И НаименованияЭлементовАдреса.Свойство("ТипКвартиры", ТипКвартиры)
	   И ВРег(ТипКвартиры) = "ОФ." Тогда
		КвартираСокращение = "ОФИС";
	Иначе
		КвартираСокращение = "КВ";
	КонецЕсли;
	
	КвартираНомер = ВРЕГ(СокрЛП(Титульный.Адрес9));
	Если ЗначениеЗаполнено(КвартираНомер) Тогда
		Параметры.Вставить("КвартираСокращение", КвартираСокращение);
		Параметры.Вставить("КвартираНомер", КвартираНомер);
	КонецЕсли;
	
	Параметры.Вставить("НаименованиеУдостоверяющего", ВРЕГ(СокрЛП(мСтруктураДокУпПред.НаименованиеУдостоверяющего)));
	Параметры.Вставить("СерияРимскиеЦифры", ВРЕГ(СокрЛП(мСтруктураДокУпПред.СерияРимскиеЦифры)));
	Параметры.Вставить("СерияРусскиеБуквы", ВРЕГ(СокрЛП(мСтруктураДокУпПред.СерияРусскиеБуквы)));
	Параметры.Вставить("НомерУдостоверяющего", ПредставлениеЧисла(мСтруктураДокУпПред.НомерУдостоверяющего));
	Параметры.Вставить("ДатаВыдачи", Формат(мСтруктураДокУпПред.ДатаВыдачи, "ДФ=dd.MM.yyyy"));
	
	КемВыдан = ВРЕГ(СокрЛП(мСтруктураДокУпПред.КемВыдан));
	ЗаменитьБуквуЁ(КемВыдан, "Кем выдан");
	Параметры.Вставить("КемВыдан", КемВыдан);
	
	Параметры.Вставить("ДатаЗаполнения", Титульный.ДатаПодписи);
	
	Параметры.Вставить("ИмяФайла", СформироватьИмяФайла(Параметры));
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Функция ЛишьОдноИзЗначениеЗаполнено(Значение1, Значение2)
	ЕстьЗначение1 = ЗначениеЗаполнено(Значение1);
	ЕстьЗначение2 = ЗначениеЗаполнено(Значение2);
	
	Возврат ЕстьЗначение1 И НЕ ЕстьЗначение2 ИЛИ ЕстьЗначение2 И НЕ ЕстьЗначение1;
КонецФункции 

Функция РегНомерПФРСоответствуетТребованиям(Знач РегНомерПФР) Экспорт
	
	Для Инд = 0 По 8 Цикл
		РегНомерПФР = СтрЗаменить(РегНомерПФР, Строка(Инд), "9");
	КонецЦикла;
	
	Возврат РегНомерПФР = "999-999-999999";
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнениеТитульный(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел1(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел2(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел31(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел32(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел33(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел34(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел35(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел36(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел37(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел38(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел4(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнениеРаздел5(Параметры, ДеревоВыгрузки, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьЗаполнениеТитульный(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Если ПустаяСтрока(Параметры.ИНН) И НЕ ЭтоИностраннаяОрганизация() Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.ИНН) <> 0 И СтрДлина(Параметры.ИНН) <> 10 И СтрДлина(Параметры.ИНН) <> 12 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("КПП") И НЕ ПустаяСтрока(Параметры.КПП) И СтрДлина(Параметры.КПП) <> 9 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ОГРН") Тогда
		Если ПустаяСтрока(Параметры.ОГРН) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ОГРН организации!", "Титульный", "ОГРН1");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(Параметры.ОГРН) <> 13 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ОГРН организации!", "Титульный", "ОГРН1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ОГРНИП") Тогда
		Если ПустаяСтрока(Параметры.ОГРНИП) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ОГРН индивидуального предпринимателя!", "Титульный", "ОГРН1");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(Параметры.ОГРНИП) <> 15 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно задан ОГРН индивидуального предпринимателя!", "Титульный", "ОГРН1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ Параметры.ЭтоПБОЮЛ И ПустаяСтрока(Параметры.НаименованиеОрганизации)) ИЛИ (Параметры.ЭтоПБОЮЛ И ПустаяСтрока(Параметры.ФамилияИП)) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан налогоплательщик!", "Титульный", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ РегНомерПФРСоответствуетТребованиям(Параметры.РегистрационныйНомерПФР) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Значение рег. номера в ПФР не соответствует шаблону:""XXX-XXX-XXXXXX"" (X - любая цифра)!", "Титульный", "НомРег");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТекстОписанияОшибки = "Признак прекращения деятельности должен указываться как ""Л"" !";
	Если НЕ ПустаяСтрока(Параметры.ПрекращениеДеятельности) И Параметры.ПрекращениеДеятельности <> "Л" Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Титульный", "ПрекращениеДеятельности");
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КодПоОКАТО) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан код ОКАТО!", "Титульный", "ОКАТО");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(Параметры.КодПоОКАТО) <> 11 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно указан код ОКАТО!", "Титульный", "ОКАТО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(СтрЗаменить(Параметры.КодПоОКВЭД, ".", ""))) ИЛИ НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.КодПоОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Некорректное значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ЛицоПодтверждающееСведения) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан тип подписанта!", "Титульный", "ПрПодп");
		СтатусПроверки = Ложь;
	ИначеЕсли Найти("1,2,3", Параметры.ЛицоПодтверждающееСведения) = 0 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Неверно указан тип подписанта!", "Титульный", "ПрПодп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана фамилия подписанта!", "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано имя подписанта!", "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.ЛицоПодтверждающееСведения = "2" ИЛИ Параметры.ЛицоПодтверждающееСведения = "3" Тогда
		Если ПустаяСтрока(Параметры.НаименованиеУдостоверяющего) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано наименование документа, подтверждающего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Параметры.ДатаВыдачи) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана дата выдачи документа, подтверждающего полномочия представителя!", "Титульный", "ДокУпПред");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.Индекс) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан почтовый индекс адреса регистрации!", "Титульный", "Адрес1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(Параметры.РегионНазвание, Параметры.РегионСокращение) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Регион не соответствует шаблону (Название Сокращение)!", "Титульный", "Адрес2");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(Параметры.РайонНазвание, Параметры.РайонСокращение) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Район не соответствует шаблону (Название Сокращение)!", "Титульный", "Адрес3");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(Параметры.ГородНазвание, Параметры.ГородСокращение) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Город не соответствует шаблону (Название Сокращение)!", "Титульный", "Адрес4");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(Параметры.НаселенныйПунктНазвание, Параметры.НаселенныйПунктСокращение) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Населенный пункт не соответствует шаблону (Название Сокращение)!", "Титульный", "Адрес5");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЛишьОдноИзЗначениеЗаполнено(Параметры.УлицаНазвание, Параметры.УлицаСокращение) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Улица не соответствует шаблону (Название Сокращение)!", "Титульный", "Адрес6");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел1(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	ДанныеРаздела2 = мДанныеОтчета.Раздел2;
	ДанныеРаздела4 = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	ТекстОписанияОшибки = "При заполненной строке 120 раздела 1 должен быть заполнен раздел 4!";
	ЗаполненаСтрока120 = ЗначениеЗаполнено(ДанныеРаздела.П000100012003)
	                 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000100012004)
	                 ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000100012005);
	Если ЗаполненаСтрока120 И НЕ ЗаполненРаздел4() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000101_1");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 110 раздела 1 не равно сумме значений в графе 3 строк 250 и 252 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011003;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025003", Ложь)
	                 + СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025203", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011003");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 110 раздела 1 не равно сумме значений в графе 3 строк 251 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011004;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025103", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011004");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 110 раздела 1 не равно сумме значений в графе 3 строк 276 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011005;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200027603", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011005");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 111 раздела 1 не равно сумме значений в графе 4 строк 250 и 252 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011103;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025004", Ложь)
	                 + СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025204", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011103");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 111 раздела 1 не равно сумме значений в графе 4 строк 251 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011104;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025104", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011104");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 111 раздела 1 не равно сумме значений в графе 4 строк 276 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011105;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200027604", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011105");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 112 раздела 1 не равно сумме значений в графе 5 строк 250 и 252 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011203;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025005", Ложь)
	                 + СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025205", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011203");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 112 раздела 1 не равно сумме значений в графе 5 строк 251 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011204;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025105", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011204");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 112 раздела 1 не равно сумме значений в графе 5 строк 276 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011205;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200027605", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011205");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 3 строки 113 раздела 1 не равно сумме значений в графе 6 строк 250 и 252 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011303;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025006", Ложь)
	                 + СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025206", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011303");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 4 строки 113 раздела 1 не равно сумме значений в графе 6 строк 251 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011304;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200025106", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011304");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение показателя в графе 5 строки 113 раздела 1 не равно сумме значений в графе 6 строк 276 по всем листам раздела 2!";
	ПроверяемоеЗначение = ДанныеРаздела.П000100011305;
	ПроверочнаяСумма = СуммаПоказателяМногостраничногоРаздела(ДанныеРаздела2, "П000200027606", Ложь);
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", "П000100011305");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 3 строки 114 не равно сумме значений в графе 3 строк 111, 112 и 113!";
	ПроверяемыйПоказатель = "П000100011403";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела.П000100011103 + ДанныеРаздела.П000100011203 + ДанныеРаздела.П000100011303;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 4 строки 114 не равно сумме значений в графе 4 строк 111, 112 и 113!";
	ПроверяемыйПоказатель = "П000100011404";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела.П000100011104 + ДанныеРаздела.П000100011204 + ДанныеРаздела.П000100011304;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 5 строки 114 не равно сумме значений в графе 5 строк 111, 112 и 113!";
	ПроверяемыйПоказатель = "П000100011405";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела.П000100011105 + ДанныеРаздела.П000100011205 + ДанныеРаздела.П000100011305;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 3 строки 120 не равно значению в графе 4 строки ""Итого доначислено"" раздела 4!";
	ПроверяемыйПоказатель = "П000100012003";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела4.П000400000204;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 4 строки 120 не равно значению в графе 5 строки ""Итого доначислено"" раздела 4!";
	ПроверяемыйПоказатель = "П000100012004";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела4.П000400000205;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 5 строки 120 не равно значению в графе 6 строки ""Итого доначислено"" раздела 4!";
	ПроверяемыйПоказатель = "П000100012005";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела4.П000400000206;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 3 строки 130 не равно сумме значений в графе 3 строк 100, 110 и 120!";
	ПроверяемыйПоказатель = "П000100013003";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела.П000100010003 + ДанныеРаздела.П000100011003 + ДанныеРаздела.П000100012003;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 4 строки 130 не равно сумме значений в графе 4 строк 100, 110 и 120!";
	ПроверяемыйПоказатель = "П000100013004";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела.П000100010004 + ДанныеРаздела.П000100011004 + ДанныеРаздела.П000100012004;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 5 строки 130 не равно сумме значений в графе 5 строк 100, 110 и 120!";
	ПроверяемыйПоказатель = "П000100013005";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела.П000100010005 + ДанныеРаздела.П000100011005 + ДанныеРаздела.П000100012005;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 3 строки 144 не равно сумме значений в графе 3 строк 141, 142 и 143!";
	ПроверяемыйПоказатель = "П000100014403";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела.П000100014103 + ДанныеРаздела.П000100014203 + ДанныеРаздела.П000100014303;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 4 строки 144 не равно сумме значений в графе 4 строк 141, 142 и 143!";
	ПроверяемыйПоказатель = "П000100014404";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела.П000100014104 + ДанныеРаздела.П000100014204 + ДанныеРаздела.П000100014304;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 5 строки 144 не равно сумме значений в графе 5 строк 141, 142 и 143!";
	ПроверяемыйПоказатель = "П000100014405";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	ПроверочнаяСумма = ДанныеРаздела.П000100014105 + ДанныеРаздела.П000100014205 + ДанныеРаздела.П000100014305;
	Если ПроверяемоеЗначение <> ПроверочнаяСумма Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 3 строки 150 не равно разности значений в графе 3 строк 130 и 140!";
	ПроверяемыйПоказатель = "П000100015003";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	КонтрольноеЗначение = ДанныеРаздела.П000100013003 - ДанныеРаздела.П000100014003;
	Если ПроверяемоеЗначение <> КонтрольноеЗначение Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 4 строки 150 не равно разности значений в графе 4 строк 130 и 140!";
	ПроверяемыйПоказатель = "П000100015004";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	КонтрольноеЗначение = ДанныеРаздела.П000100013004 - ДанныеРаздела.П000100014004;
	Если ПроверяемоеЗначение <> КонтрольноеЗначение Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 1 значение показателя в графе 5 строки 150 не равно разности значений в графе 5 строк 130 и 140!";
	ПроверяемыйПоказатель = "П000100015005";
	ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
	КонтрольноеЗначение = ДанныеРаздела.П000100013005 - ДанныеРаздела.П000100014005;
	Если ПроверяемоеЗначение <> КонтрольноеЗначение Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел1", ПроверяемыйПоказатель);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел2(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Раздел2 = мДанныеОтчета.Раздел2;
	ДанныеРаздела31 = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	ДанныеРаздела33 = мДанныеОтчета.ПолеТабличногоДокументаРаздел33;
	
	РазрешенныеКодыТарифов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок("01,03,04,06,07,08,09,10,11,12,13,14,15,18,19,20,36,52,53");
	ЭтоПервыйКвартал = (Параметры.КодОтчетногоПериода = "03");
	
	КодыТарифовНаЛистах = Новый Соответствие;
	
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		НомерЛиста = Раздел2.Индекс(ЛистРаздела2) + 1;
		ДанныеЛиста = ЛистРаздела2.Данные;
		
		КодТарифа = ДанныеЛиста.П000200001001 + ДанныеЛиста.П000200001002;
		
		Если ПустаяСтрока(КодТарифа) Тогда
			ТекстОписанияОшибки = "На странице " + НомерЛиста + " раздела 2 не задан код тарифа!";
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2", "П000200001001", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли РазрешенныеКодыТарифов.Найти(КодТарифа) = Неопределено Тогда
			ТекстОписанияОшибки = "На странице " + НомерЛиста + " раздела 2 неверно задан код тарифа!";
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2", "П000200001001", НомерЛиста);
			СтатусПроверки = Ложь;
		Иначе
			КодыТарифовНаЛистах.Вставить(КодТарифа, Истина);
		КонецЕсли;
		
		ПроверитьЗаполнениеРаздел2Графа3(НомерЛиста, ДанныеЛиста, ЭтоПервыйКвартал, СтатусПроверки);
		
		Если КодТарифа = "01" ИЛИ КодТарифа = "52" ИЛИ КодТарифа = "53" Тогда
			Для Графа = 3 По 6 Цикл
				КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
				ТекстОписанияОшибки = "На странице " + НомерЛиста + " раздела 2 значение показателя в графе " + Графа + " строки 252 меньше нуля при положительной сумме значений показателей строк 231, 232, 233 по графе " + Графа + "!";
				ПроверяемоеЗначение = ДанныеЛиста["П0002000252" + КодГрафы];
				КонтрольноеЗначение = ДанныеЛиста["П0002000231" + КодГрафы]
				                    + ДанныеЛиста["П0002000232" + КодГрафы]
				                    + ДанныеЛиста["П0002000233" + КодГрафы];
				Если КонтрольноеЗначение > 0 И ПроверяемоеЗначение < 0 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2", "П0002000252" + КодГрафы, НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КодТарифа = "03" И ЗаполненРаздел31() Тогда
			Для Инд = 3 По 6 Цикл
				ТекстОписанияОшибки = "На странице " + НомерЛиста + " раздела 2 сумма значений показателей в строках 201, 202 и 203 по графе " + Инд + " не равна итогу по графе " + (Инд + 2) + " раздела 3.1!";
				ГрафаРаздел2 = Формат(Инд, "ЧЦ=2; ЧВН=");
				ГрафаРаздел31 = Формат(Инд + 2, "ЧЦ=2; ЧВН=");
				ПроверяемоеЗначение = ДанныеЛиста["П0002000201" + ГрафаРаздел2] + ДанныеЛиста["П0002000202" + ГрафаРаздел2] + ДанныеЛиста["П0002000203" + ГрафаРаздел2];
				КонтрольноеЗначение = ДанныеРаздела31["П0003100020" + ГрафаРаздел31];
				Если ПроверяемоеЗначение <>  КонтрольноеЗначение Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2", "П0002000201" + ГрафаРаздел2, НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КодТарифа = "03" И ЗаполненРаздел34() Тогда
			Для Инд = 3 По 6 Цикл
				ТекстОписанияОшибки = "На странице " + НомерЛиста + " раздела 2 сумма значений показателей в строках 201, 202 и 203 по графе " + Инд + " меньше значения показателя в графе " + Инд + " строки 334 раздела 3.3!";
				ГрафаРаздел2 = Формат(Инд, "ЧЦ=2; ЧВН=");
				ГрафаРаздел33 = Формат(Инд, "ЧЦ=2; ЧВН=");
				ПроверяемоеЗначение = ДанныеЛиста["П0002000201" + ГрафаРаздел2] + ДанныеЛиста["П0002000202" + ГрафаРаздел2] + ДанныеЛиста["П0002000203" + ГрафаРаздел2];
				КонтрольноеЗначение = ДанныеРаздела33["П0003300334" + ГрафаРаздел33];
				Если ПроверяемоеЗначение <>  КонтрольноеЗначение Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2", "П0002000201" + ГрафаРаздел2, НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Графа = 3 По 6 Цикл
			КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
			ТекстОписанияОшибки = "На странице " + НомерЛиста + " раздела 2 значение показателя в графе " + Графа + " строки 260 равно нулю при ненулевой сумме значений показателей строк 231, 232, 233 по графе " + Графа + "!";
			ПроверяемоеЗначение = ДанныеЛиста["П0002000260" + КодГрафы];
			КонтрольноеЗначение = ДанныеЛиста["П0002000231" + КодГрафы]
			                    + ДанныеЛиста["П0002000232" + КодГрафы]
			                    + ДанныеЛиста["П0002000233" + КодГрафы];
			Если КонтрольноеЗначение <> 0 И ПроверяемоеЗначение = 0 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2", "П0002000260" + КодГрафы, НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ТекстОписанияОшибки = "На странице " + НомерЛиста + " раздела 2 значение показателя в графе " + Графа + " строки 275 не равно разнице значений показателя строки 271 и суммы строк 272, 273, 274 по графе " + Графа + "!";
			ПроверяемоеЗначение = ДанныеЛиста["П0002000275" + КодГрафы];
			КонтрольноеЗначение = ДанныеЛиста["П0002000271" + КодГрафы]
			                    - ДанныеЛиста["П0002000272" + КодГрафы]
			                    - ДанныеЛиста["П0002000273" + КодГрафы]
			                    - ДанныеЛиста["П0002000274" + КодГрафы];
			Если КонтрольноеЗначение <>  ПроверяемоеЗначение Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2", "П0002000275" + КодГрафы, НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекстОписанияОшибки = "При заполненном разделе 2 с кодом тарифа 03 должен быть заполнен либо раздел 3.1, либо раздел 3.2, либо раздел 3.3!";
	Если КодыТарифовНаЛистах.Получить("03") <> Неопределено И НЕ (ЗаполненРаздел31() ИЛИ ЗаполненРаздел32() ИЛИ ЗаполненРаздел33()) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел31", "П000310001001_1");
	КонецЕсли;
	
	ТекстОписанияОшибки = "При заполненном разделе 2 с кодом тарифа 06 должен быть заполнен раздел 3.4!";
	Если КодыТарифовНаЛистах.Получить("06") <> Неопределено И НЕ ЗаполненРаздел34() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", "П000340034103");
	КонецЕсли;
	
	ТекстОписанияОшибки = "При заполненном разделе 2 с кодом тарифа 07 должен быть заполнен раздел 3.6!";
	Если КодыТарифовНаЛистах.Получить("07") <> Неопределено И НЕ ЗаполненРаздел36() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел36", "П000360036103");
	КонецЕсли;
	
	ТекстОписанияОшибки = "При заполненном разделе 2 с кодом тарифа 09 должен быть заполнен раздел 3.5!";
	Если КодыТарифовНаЛистах.Получить("09") <> Неопределено И НЕ ЗаполненРаздел35() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000101_1");
	КонецЕсли;
	
	ТекстОписанияОшибки = "При заполненном разделе 2 с кодом тарифа 12 должен быть заполнен раздел 3.7!";
	Если КодыТарифовНаЛистах.Получить("12") <> Неопределено И НЕ ЗаполненРаздел37() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел37", "П000370037103");
	КонецЕсли;
	
	ТекстОписанияОшибки = "При заполненном разделе 2 с кодом тарифа 14 должен быть заполнен раздел 3.8!";
	Если КодыТарифовНаЛистах.Получить("14") <> Неопределено И НЕ ЗаполненРаздел38() Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", "П000380038103");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел2Графа3(НомерЛиста, ДанныеЛиста, ЭтоПервыйКвартал, СтатусПроверки)
	
	ПроверяемыеСтроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок("201,202,203,211,212,213,221,222,223,231,232,233,240,241,250,251,252,271,272,273,274,275,276");
	
	Для Каждого ПроверяемаяСтрока Из ПроверяемыеСтроки Цикл
		ИмяСтроки = "П0002000" + ПроверяемаяСтрока;
		ПроверяемыйПоказатель = ИмяСтроки + "03";
		КонтрольныйПоказатель4 = ИмяСтроки + "04";
		КонтрольныйПоказатель5 = ИмяСтроки + "05";
		КонтрольныйПоказатель6 = ИмяСтроки + "06";
		
		СуммаВсего = ДанныеЛиста[ПроверяемыйПоказатель];
		Сумма1Месяц = ДанныеЛиста[КонтрольныйПоказатель4];
		Сумма2Месяц = ДанныеЛиста[КонтрольныйПоказатель5];
		Сумма3Месяц = ДанныеЛиста[КонтрольныйПоказатель6];
		
		Если ЭтоПервыйКвартал Тогда
			ТекстОписанияОшибки = "На странице " + НомерЛиста + " раздела 2 сумма значений показателей в графах 4, 5, 6 строки " + ПроверяемаяСтрока + " не равна значению показателя в графе 3 (расчет за 1-й квартал)!";
			Если СуммаВсего <> (Сумма1Месяц + Сумма2Месяц + Сумма3Месяц) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2", ПроверяемыйПоказатель, НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "На странице " + НомерЛиста + " раздела 2 сумма значений показателей в графах 4, 5, 6 строки " + ПроверяемаяСтрока + " превышает значение показателя в графе 3!";
			Если СуммаВсего < (Сумма1Месяц + Сумма2Месяц + Сумма3Месяц) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Раздел2", ПроверяемыйПоказатель, НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел31(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел31() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	ЭтоПервыйКвартал = (Параметры.КодОтчетногоПериода = "03");
	
	НомСтроки = 1;
	ФИОСотрудника = Неопределено;
	ДатаВыдачи    = Неопределено;
	ДатаОкончания = Неопределено;
	СуммаВсего    = Неопределено;
	Сумма1Месяц   = Неопределено;
	Сумма2Месяц   = Неопределено;
	Сумма3Месяц   = Неопределено;
	
	ИтогоСуммаВсего  = 0;
	ИтогоСумма1Месяц = 0;
	ИтогоСумма2Месяц = 0;
	ИтогоСумма3Месяц = 0;
	
	Пока ДанныеРаздела.Свойство("П000310001002_" + Формат(НомСтроки, "ЧГ="), ФИОСотрудника) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000310001003_" + НомерСтроки, ДатаВыдачи);
		ДанныеРаздела.Свойство("П000310001004_" + НомерСтроки, ДатаОкончания);
		ДанныеРаздела.Свойство("П000310001005_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела.Свойство("П000310001006_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела.Свойство("П000310001007_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела.Свойство("П000310001008_" + НомерСтроки, Сумма3Месяц);
		
		Если ЗначениеЗаполнено(ФИОСотрудника) ИЛИ  ЗначениеЗаполнено(ДатаВыдачи) ИЛИ ЗначениеЗаполнено(ДатаОкончания) ИЛИ ЗначениеЗаполнено(СуммаВсего) 
		 ИЛИ ЗначениеЗаполнено(Сумма1Месяц) ИЛИ ЗначениеЗаполнено(Сумма2Месяц) ИЛИ ЗначениеЗаполнено(Сумма3Месяц) Тогда
			СтрокаЗаполнена = Истина;
		КонецЕсли;
		
		Если СтрокаЗаполнена Тогда
			
			ФИО = РазложитьФИО(ФИОСотрудника);
			Если НЕ ЗначениеЗаполнено(ФИО.Фамилия) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1, в строке " + НомерСтроки + " не указана фамилия сотрудника!", "Раздел31", "П000310001002_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ФИО.Имя) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1, в строке " + НомерСтроки + " не указано имя сотрудника!", "Раздел31", "П000310001002_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаВыдачи) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1, в строке " + НомерСтроки + " не указана дата выдачи справки!", "Раздел31", "П000310001003_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3.1, в строке " + НомерСтроки + " не указана дата окончания действия справки!", "Раздел31", "П000310001004_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ТекстОписанияОшибки = "В разделе 3.1, в строке " + НомерСтроки + " дата окончания действия справки предшествует дате выдачи справки!";
			Если ДатаВыдачи > ДатаОкончания Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел31", "П000310001004_" + НомерСтроки);
			КонецЕсли;
			
			Если ЭтоПервыйКвартал Тогда
				ТекстОписанияОшибки = "В разделе 3.1 сумма значений показателей в графах 6, 7, 8 строки " + НомерСтроки + " не равна значению показателя в графе 5 (расчет за 1-й квартал)!";
				Если СуммаВсего <> (Сумма1Месяц + Сумма2Месяц + Сумма3Месяц) Тогда
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел31", "П000310001005_" + НомерСтроки);
				КонецЕсли;
			Иначе
				ТекстОписанияОшибки = "В разделе 3.1 сумма значений показателей в графах 6, 7, 8 строки " + НомерСтроки + " превышает значение показателя в графе 5!";
				Если СуммаВсего < (Сумма1Месяц + Сумма2Месяц + Сумма3Месяц) Тогда
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел31", "П000310001005_" + НомерСтроки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ИтогоСуммаВсего  = ИтогоСуммаВсего + СуммаВсего;
		ИтогоСумма1Месяц = ИтогоСумма1Месяц + Сумма1Месяц;
		ИтогоСумма2Месяц = ИтогоСумма2Месяц + Сумма2Месяц;
		ИтогоСумма3Месяц = ИтогоСумма3Месяц + Сумма3Месяц;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	ТекстОписанияОшибки = "Значение итога по графе 5 раздела 31 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000310002005 <> ИтогоСуммаВсего Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел31", "П000310002005");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение итога по графе 6 раздела 31 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000310002006 <> ИтогоСумма1Месяц Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел31", "П000310002006");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение итога по графе 7 раздела 31 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000310002007 <> ИтогоСумма2Месяц Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел31", "П000310002007");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение итога по графе 8 раздела 31 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000310002008 <> ИтогоСумма3Месяц Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел31", "П000310002008");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел32(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел32() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	Для Графа = 3 По 6 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
		
		ИмяПоказателя321 = "П0003200321" + КодГрафы;
		ИмяПоказателя322 = "П0003200322" + КодГрафы;
		ИмяПоказателя323 = "П0003200323" + КодГрафы;
		ПроверяемоеЗначение = ДанныеРаздела[ИмяПоказателя323];
		Если ДанныеРаздела[ИмяПоказателя321] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя322]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя322]) Тогда
				ТекстОписанияОшибки = "Не указана численность членов организации в графе " + Графа + " строки 321 раздела 3.2!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел32", ИмяПоказателя321);
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 323 раздела 3.2 не равно отношению значений показателей строк 321 и 322, умноженному на 100%!";
			КонтрольноеЗначение = Окр(ДанныеРаздела[ИмяПоказателя322] / ДанныеРаздела[ИмяПоказателя321] * 100, 5);
			Если ПроверяемоеЗначение <> КонтрольноеЗначение Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел32", ИмяПоказателя321);
			КонецЕсли;
		КонецЕсли;
		
		ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 323 раздела 3.2 не может быть меньше 50%!";
		Если (ДанныеРаздела[ИмяПоказателя323] <> 0) И (ДанныеРаздела[ИмяПоказателя323] < 50) Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел32", ИмяПоказателя323);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел33(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел33() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПервыйКвартал = (Параметры.КодОтчетногоПериода = "03");
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел33;
	
	Если ЕстьРаздел2СКодомТарифа("03") Тогда
		ТекстОписанияОшибки = "Значение показателя в графе 3 строки 331 раздела 3.3 не равно значений показателя ""Среднесписочная численность"" на титульном листе!";
		Если Число(Параметры.СреднесписочнаяЧисленность) <> ДанныеРаздела.П000330033103 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", "П000330033103");
		КонецЕсли;
	КонецЕсли;
	
	Для Графа = 3 По 6 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
		
		ИмяПоказателя331 = "П0003300331" + КодГрафы;
		ИмяПоказателя332 = "П0003300332" + КодГрафы;
		ИмяПоказателя333 = "П0003300333" + КодГрафы;
		
		Если ДанныеРаздела[ИмяПоказателя331] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя332]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя333]) Тогда
				ТекстОписанияОшибки = "Не указана среднесписочная численность в графе " + Графа + " строки 331 раздела 3.3!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", ИмяПоказателя331);
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 333 раздела 3.3 не равно отношению значений показателей строк 331 и 332, умноженному на 100%!";
			ПроверяемоеЗначение = ДанныеРаздела[ИмяПоказателя333];
			КонтрольноеЗначение = Окр(ДанныеРаздела[ИмяПоказателя332] / ДанныеРаздела[ИмяПоказателя331] * 100, 5);
			Если ПроверяемоеЗначение <> КонтрольноеЗначение Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", ИмяПоказателя333);
			КонецЕсли;
		КонецЕсли;
		
		ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 333 раздела 3.3 не может быть меньше 50%!";
		ИмяПоказателя = "П0003300333" + Формат(Графа, "ЧЦ=2; ЧВН=");
		Если ДанныеРаздела[ИмяПоказателя] <> 0 И ДанныеРаздела[ИмяПоказателя] < 50 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", ИмяПоказателя);
		КонецЕсли;
		
		ИмяПоказателя334 = "П0003300334" + КодГрафы;
		ИмяПоказателя335 = "П0003300335" + КодГрафы;
		ИмяПоказателя336 = "П0003300336" + КодГрафы;
		
		Если ДанныеРаздела[ИмяПоказателя334] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя335]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя336]) Тогда
				ТекстОписанияОшибки = "Не указан фонд оплаты труда в графе " + Графа + " строки 334 раздела 3.3!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", ИмяПоказателя334);
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 336 раздела 3.3 не равно отношению значений показателей строк 334 и 335, умноженному на 100%!";
			ПроверяемоеЗначение = ДанныеРаздела[ИмяПоказателя336];
			КонтрольноеЗначение = Окр(ДанныеРаздела[ИмяПоказателя335] / ДанныеРаздела[ИмяПоказателя334] * 100, 5);
			Если ПроверяемоеЗначение <> КонтрольноеЗначение Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", ИмяПоказателя336);
			КонецЕсли;
		КонецЕсли;
		
		ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 336 раздела 3.3 не может быть меньше 25%!";
		ИмяПоказателя = "П0003300336" + Формат(Графа, "ЧЦ=2; ЧВН=");
		Если ДанныеРаздела[ИмяПоказателя] <> 0 И ДанныеРаздела[ИмяПоказателя] < 25 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", ИмяПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	СуммаПоСтроке334 = ДанныеРаздела.П000330033404
	                 + ДанныеРаздела.П000330033405
	                 + ДанныеРаздела.П000330033406;
	Если ЭтоПервыйКвартал Тогда
		ТекстОписанияОшибки = "Сумма значений показателей в графах 4, 5, 6 строки 334 не равна значению показателя в графе 3 строки 334 (расчет за 1-й квартал)!";
		Если ДанныеРаздела.П000330033403 <> СуммаПоСтроке334 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", "П000330033403");
		КонецЕсли;
	Иначе
		ТекстОписанияОшибки = "Сумма значений показателей в графах 4, 5, 6 строки 334 превышает значение показателя в графе 3 строки 334!";
		Если ДанныеРаздела.П000330033403 < СуммаПоСтроке334 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", "П000330033403");
		КонецЕсли;
	КонецЕсли;
	
	СуммаПоСтроке335 = ДанныеРаздела.П000330033504
	                 + ДанныеРаздела.П000330033505
	                 + ДанныеРаздела.П000330033506;
	Если ЭтоПервыйКвартал Тогда
		ТекстОписанияОшибки = "Сумма значений показателей в графах 4, 5, 6 строки 335 не равна значению показателя в графе 3 строки 335 (расчет за 1-й квартал)!";
		Если ДанныеРаздела.П000330033503 <> СуммаПоСтроке335 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", "П000330033503");
		КонецЕсли;
	Иначе
		ТекстОписанияОшибки = "Сумма значений показателей в графах 4, 5, 6 строки 335 превышает значение показателя в графе 3 строки 335!";
		Если ДанныеРаздела.П000330033503 < СуммаПоСтроке335 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел33", "П000330033503");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел34(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел34() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел34;
	
	Для Графа = 3 По 4 Цикл
		ТекстОписанияОшибки = "В разделе 3.4 значение показателя в графе " + Графа + " строки 342 превышает значение показателя в графе " + Графа + " строки 341!";
		ПроверяемыйПоказатель = "П0003400342" + Формат(Графа, "ЧЦ=2; ЧВН=");
		КонтрольныйПоказатель = "П0003400341" + Формат(Графа, "ЧЦ=2; ЧВН=");
		Если ДанныеРаздела[ПроверяемыйПоказатель] > ДанныеРаздела[КонтрольныйПоказатель]Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", ПроверяемыйПоказатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Графа = 3 По 4 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
		ИмяПоказателя341 = "П0003400341" + КодГрафы;
		ИмяПоказателя342 = "П0003400342" + КодГрафы;
		ИмяПоказателя343 = "П0003400343" + КодГрафы;
		
		Если ДанныеРаздела[ИмяПоказателя341] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя342]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя343]) Тогда
				ТекстОписанияОшибки = "Не указана сумма доходов в графе " + Графа + " строки 341 раздела 3.4!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", ИмяПоказателя341);
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 343 раздела 3.4 не равно отношению значений показателей строк 341 и 342, умноженному на 100%!";
			ПроверяемоеЗначение = ДанныеРаздела[ИмяПоказателя343];
			КонтрольноеЗначение = Окр(ДанныеРаздела[ИмяПоказателя342] / ДанныеРаздела[ИмяПоказателя341] * 100, 5);
			Если ПроверяемоеЗначение <> КонтрольноеЗначение Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", ИмяПоказателя343);
			КонецЕсли;
		КонецЕсли;
		
		ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 343 раздела 3.4 не может быть меньше 90%!";
		ИмяПоказателя = "П0003400343" + Формат(Графа, "ЧЦ=2; ЧВН=");
		Если ДанныеРаздела[ИмяПоказателя] <> 0 И ДанныеРаздела[ИмяПоказателя] < 90 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", ИмяПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	ТекстОписанияОшибки = "Не указана дата записи в реестре аккредитованных организаций в строке 345 раздела 3.4!";
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000340034503) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", "П000340034503");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Не указан номер записи в реестре аккредитованных организаций в строке 345 раздела 3.4!";
	Если ПустаяСтрока(ДанныеРаздела.П000340034504) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел34", "П000340034504");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел35(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел35() Тогда
		Возврат;
	КонецЕсли;
	
	СписокПредопределенныхКодовОКВЭД = "22.12, 22.13, 92.20, 92.40";
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел35;
	
	НомерПП = Неопределено;
	КодДеятельностиПоОКВЭД = Неопределено;
	ВидЭкономическойДеятельности = Неопределено;
	Доходы = Неопределено;
	ДоляДоходов = Неопределено;
	
	СуммаДоходов = 0;
	СуммаДолейДоходов = 0;
	ЕстьПредопределенныйОКВЭД = Ложь;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000350000122_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000350000101_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000350000121_" + НомерСтроки, КодДеятельностиПоОКВЭД);
		ДанныеРаздела.Свойство("П000350000122_" + НомерСтроки, ВидЭкономическойДеятельности);
		ДанныеРаздела.Свойство("П000350000103_" + НомерСтроки, Доходы);
		ДанныеРаздела.Свойство("П000350000104_" + НомерСтроки, ДоляДоходов);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(КодДеятельностиПоОКВЭД)
		              ИЛИ ЗначениеЗаполнено(ВидЭкономическойДеятельности)
		              ИЛИ ЗначениеЗаполнено(Доходы) ИЛИ ЗначениеЗаполнено(ДоляДоходов);
		
		Если СтрокаЗаполнена Тогда
			Если ПустаяСтрока(КодДеятельностиПоОКВЭД) Тогда
				ТекстОписанияОшибки = "Не задан код вида деятельности по ОКВЭД в строке " + НомерСтроки + "!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000121_" + НомерСтроки);
			Иначе
				Если НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(КодДеятельностиПоОКВЭД) Тогда
					ТекстОписанияОшибки = "Указан некорректный код вида деятельности по ОКВЭД в строке " + НомерСтроки + "!";
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000121_" + НомерСтроки);
				КонецЕсли;
				ЕстьПредопределенныйОКВЭД = ЕстьПредопределенныйОКВЭД ИЛИ ЗначениеСодержитсяВСписке(КодДеятельностиПоОКВЭД, СписокПредопределенныхКодовОКВЭД);
			КонецЕсли;
		КонецЕсли;
		
		СуммаДоходов = СуммаДоходов + Доходы;
		СуммаДолейДоходов = СуммаДолейДоходов + ДоляДоходов;
		
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	
	ТекстОписанияОшибки = "В таблице раздела 3.5 нет ни одной строки с кодом деятельности по ОКВЭД из списка " + СписокПредопределенныхКодовОКВЭД + "!";
	Если НЕ ЕстьПредопределенныйОКВЭД Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000121_1");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 3.5 значение итога по графе 3 не равно сумме значений строк таблицы по графе 3!";
	Если ДанныеРаздела.П000350000203 <> СуммаДоходов Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000203");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 3.5 итог по графе 4 должен равняться 100!";
	Если ДанныеРаздела.П000350000204 <> 100 Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000204");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 3.5 значение итога по графе 4 не равно сумме значений строк таблицы по графе 4!";
	Если ДанныеРаздела.П000350000204 <> СуммаДолейДоходов Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350000204");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Не указана дата внесения в реестр СМИ в строке 351 раздела 3.5!";
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000350035103) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350035103");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Не указан номер записи в реестре аккредитованных организаций в строке 351 раздела 3.5!";
	Если ПустаяСтрока(ДанныеРаздела.П000350035104) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел35", "П000350035104");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел36(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел36() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел36;
	
	ИмяПоказателя361 = "П000360036103";
	ИмяПоказателя362 = "П000360036203";
	ИмяПоказателя363 = "П000360036303";
	
	Если ДанныеРаздела[ИмяПоказателя361] = 0 Тогда
		Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя362]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя363]) Тогда
			ТекстОписанияОшибки = "Не указана сумма доходов в графе 3 строки 361 раздела 3.6!";
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел36", ИмяПоказателя361);
		КонецЕсли;
	Иначе
		ТекстОписанияОшибки = "Значение показателя в графе 3 строки 363 раздела 3.6 не равно отношению значений показателей строк 361 и 362, умноженному на 100%!";
		ПроверяемоеЗначение = ДанныеРаздела[ИмяПоказателя363];
		КонтрольноеЗначение = Окр(ДанныеРаздела[ИмяПоказателя362] / ДанныеРаздела[ИмяПоказателя361] * 100, 5);
		Если ПроверяемоеЗначение <> КонтрольноеЗначение Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел36", ИмяПоказателя363);
		КонецЕсли;
	КонецЕсли;
		
	ТекстОписанияОшибки = "Значение показателя в строке 363 раздела 3.6 не может быть меньше 70%!";
	ИмяПоказателя = "П000360036303";
	Если ДанныеРаздела[ИмяПоказателя] <> 0 И ДанныеРаздела[ИмяПоказателя] < 70 Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел36", ИмяПоказателя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел37(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел37() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел37;
	
	Для Графа = 3 По 4 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
		
		ПроверяемыйПоказатель  = "П0003700371" + КодГрафы;
		КонтрольныйПоказатель1 = "П0003700372" + КодГрафы;
		КонтрольныйПоказатель2 = "П0003700373" + КодГрафы;
		КонтрольныйПоказатель3 = "П0003700374" + КодГрафы;
		
		ТекстОписанияОшибки = "В разделе 3.7 сумма значений показателей в графе " + Графа + " по строкам 372, 373 и 374 превышает значение показателя в графе " + Графа + " строки 371!";
		Если ДанныеРаздела[ПроверяемыйПоказатель] < ДанныеРаздела[КонтрольныйПоказатель1] + ДанныеРаздела[КонтрольныйПоказатель2] + ДанныеРаздела[КонтрольныйПоказатель3] Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел37", ПроверяемыйПоказатель);
		КонецЕсли;
		
		ПроверяемыйПоказатель    = "П0003700375" + КодГрафы;
		КонтрольныйПоказатель371 = "П0003700371" + КодГрафы;
		КонтрольныйПоказатель372 = "П0003700372" + КодГрафы;
		КонтрольныйПоказатель373 = "П0003700373" + КодГрафы;
		КонтрольныйПоказатель374 = "П0003700374" + КодГрафы;
		КонтрольныйПоказатель375 = "П0003700375" + КодГрафы;
		
		Если ДанныеРаздела[КонтрольныйПоказатель371] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель372])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель373])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель374])
			 ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель375]) Тогда
				ТекстОписанияОшибки = "Не указана сумма доходов в графе " + Графа + " строки 371 раздела 3.7!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел37", КонтрольныйПоказатель371);
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 363 раздела 3.7 не равно отношению суммы показателей строк 372, 373, 374 и значения показателя в строке 371, умноженному на 100%!";
			ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
			Сумма372_373_374 = ДанныеРаздела[КонтрольныйПоказатель372] + ДанныеРаздела[КонтрольныйПоказатель373] + ДанныеРаздела[КонтрольныйПоказатель374];
			КонтрольноеЗначение = Окр(Сумма372_373_374 / ДанныеРаздела[КонтрольныйПоказатель371] * 100, 5);
			Если ПроверяемоеЗначение <> КонтрольноеЗначение Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел37", ПроверяемыйПоказатель);
			КонецЕсли;
		КонецЕсли;
		
		ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 375 раздела 3.7 не может быть меньше 70%!";
		Если ДанныеРаздела[ПроверяемыйПоказатель] <> 0 И ДанныеРаздела[ПроверяемыйПоказатель] < 70 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел37", ПроверяемыйПоказатель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел38(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел38;
	
	Если НЕ ЗаполненРаздел38() Тогда
		Возврат;
	КонецЕсли;
	
	Для Графа = 3 По 4 Цикл
		КодГрафы = Формат(Графа, "ЧЦ=2; ЧВН=");
		
		ИмяПоказателя1 = "П0003800381" + КодГрафы;
		ИмяПоказателя2 = "П0003800382" + КодГрафы;
		
		ТекстОписанияОшибки = "В разделе 3.8 значение показателя в графе " + Графа + " строки 382 превышает значение показателя в графе " + Графа + " строки 381!";
		Если ДанныеРаздела[ИмяПоказателя2] > ДанныеРаздела[ИмяПоказателя1] Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", ИмяПоказателя2);
		КонецЕсли;
		
		ПроверяемыйПоказатель   = "П0003800383" + КодГрафы;
		КонтрольныйПоказатель381 = "П0003800381" + КодГрафы;
		КонтрольныйПоказатель382 = "П0003800382" + КодГрафы;
		КонтрольныйПоказатель383 = "П0003800383" + КодГрафы;
		
		Если ДанныеРаздела[КонтрольныйПоказатель381] = 0 Тогда
			Если ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель382]) ИЛИ ЗначениеЗаполнено(ДанныеРаздела[КонтрольныйПоказатель383]) Тогда
				ТекстОписанияОшибки = "Не указана сумма доходов в графе " + Графа + " строки 381 раздела 3.8!";
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", КонтрольныйПоказатель381);
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 383 раздела 3.8 не равно отношению значений показателей строк 381 и 382, умноженному на 100%!";
			ПроверяемоеЗначение = ДанныеРаздела[ПроверяемыйПоказатель];
			КонтрольноеЗначение = Окр(ДанныеРаздела[КонтрольныйПоказатель382] / ДанныеРаздела[КонтрольныйПоказатель381] * 100, 5);
			Если ПроверяемоеЗначение <> КонтрольноеЗначение Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", ПроверяемыйПоказатель);
			КонецЕсли;
		КонецЕсли;
		
		ТекстОписанияОшибки = "Значение показателя в графе " + Графа + " строки 383 раздела 3.8 не может быть меньше 90%!";
		ИмяПоказателя = "П0003800383" + КодГрафы;
		Если ДанныеРаздела[ИмяПоказателя] <> 0 И ДанныеРаздела[ИмяПоказателя] < 90 Тогда
			СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", ИмяПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	ТекстОписанияОшибки = "Не указана дата получения положительного заключения в строке 385 раздела 3.8!";
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000380038503) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", "П000380038503");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Не указан номер положительного заключения в строке 385 раздела 3.8!";
	Если ПустаяСтрока(ДанныеРаздела.П000380038504) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел38", "П000380038504");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел4(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел4() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	НомерПП = Неопределено;
	ГодНачисления = Неопределено;
	МесяцНачисления = Неопределено;
	ВзносыОПС_СЧ = Неопределено;
	ВзносыОПС_НЧ = Неопределено;
	ВзносыОМС = Неопределено;
	
	ИтогГрафа4 = 0;
	ИтогГрафа5 = 0;
	ИтогГрафа6 = 0;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000400000102_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000400000101_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000400000102_" + НомерСтроки, ГодНачисления);
		ДанныеРаздела.Свойство("П000400000103_" + НомерСтроки, МесяцНачисления);
		ДанныеРаздела.Свойство("П000400000104_" + НомерСтроки, ВзносыОПС_СЧ);
		ДанныеРаздела.Свойство("П000400000105_" + НомерСтроки, ВзносыОПС_НЧ);
		ДанныеРаздела.Свойство("П000400000106_" + НомерСтроки, ВзносыОМС);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(ГодНачисления)
		              ИЛИ ЗначениеЗаполнено(МесяцНачисления) ИЛИ ЗначениеЗаполнено(ВзносыОПС_СЧ)
		              ИЛИ ЗначениеЗаполнено(ВзносыОПС_НЧ) ИЛИ ЗначениеЗаполнено(ВзносыОМС);
		
		Если СтрокаЗаполнена Тогда
			ТекстОписанияОшибки = "Некорректно указан период, за который выявлены и доначислены страховые взносы в строке "  + НомерСтроки + " раздела 4!";
			Если НЕ ЗначениеЗаполнено(ГодНачисления) ИЛИ НЕ ЗначениеЗаполнено(МесяцНачисления) Тогда
				СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000102_" + НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
		ИтогГрафа4 = ИтогГрафа4 + ВзносыОПС_СЧ;
		ИтогГрафа5 = ИтогГрафа5 + ВзносыОПС_НЧ;
		ИтогГрафа6 = ИтогГрафа6 + ВзносыОМС;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	ТекстОписанияОшибки = "Значение итога по графе 4 раздела 4 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000400000204 <> ИтогГрафа4 Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000204");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение итога по графе 5 раздела 4 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000400000205 <> ИтогГрафа5 Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000205");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение итога по графе 6 раздела 4 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000400000206 <> ИтогГрафа6 Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел4", "П000400000206");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел5(Параметры, ДеревоВыгрузки, СтатусПроверки)
	
	Если НЕ ЗаполненРаздел5() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел5;
	ЭтоПервыйКвартал = (Параметры.КодОтчетногоПериода = "03");
	
	НомерПП = Неопределено;
	ФИОСтудента = Неопределено;
	НомерСправкиСО = Неопределено;
	ДатаСправкиСО = Неопределено;
	НомерСправкиОФО = Неопределено;
	ДатаСправкиОФО = Неопределено;
	СуммаВсего    = Неопределено;
	Сумма1Месяц   = Неопределено;
	Сумма2Месяц   = Неопределено;
	Сумма3Месяц   = Неопределено;
	
	ИтогГрафа5 = 0;
	ИтогГрафа6 = 0;
	ИтогГрафа7 = 0;
	ИтогГрафа8 = 0;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000500000120_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000500000110_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000500000120_" + НомерСтроки, ФИОСтудента);
		ДанныеРаздела.Свойство("П000500000131_" + НомерСтроки, НомерСправкиСО);
		ДанныеРаздела.Свойство("П000500000132_" + НомерСтроки, ДатаСправкиСО);
		ДанныеРаздела.Свойство("П000500000141_" + НомерСтроки, НомерСправкиОФО);
		ДанныеРаздела.Свойство("П000500000142_" + НомерСтроки, ДатаСправкиОФО);
		ДанныеРаздела.Свойство("П000500000150_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела.Свойство("П000500000160_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела.Свойство("П000500000170_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела.Свойство("П000500000180_" + НомерСтроки, Сумма3Месяц);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(ФИОСтудента)
		              ИЛИ ЗначениеЗаполнено(НомерСправкиСО) ИЛИ ЗначениеЗаполнено(ДатаСправкиСО)
		              ИЛИ ЗначениеЗаполнено(НомерСправкиОФО) ИЛИ ЗначениеЗаполнено(ДатаСправкиОФО)
		              ИЛИ ЗначениеЗаполнено(СуммаВсего) ИЛИ ЗначениеЗаполнено(Сумма1Месяц)
		              ИЛИ ЗначениеЗаполнено(Сумма2Месяц) ИЛИ ЗначениеЗаполнено(Сумма3Месяц);
		
		Если СтрокаЗаполнена Тогда
			
			ФИО = РазложитьФИО(ФИОСтудента);
			Если НЕ ЗначениеЗаполнено(ФИО.Фамилия) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки + " не указана фамилия студента!", "Раздел5", "П000500000120_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ФИО.Имя) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки + " не указано имя студента!", "Раздел5", "П000500000120_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомерСправкиСО) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки + " не указан номер справки!", "Раздел5", "П000500000131_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаСправкиСО) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки + " не указана дата выдачи справки!", "Раздел5", "П000500000132_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(НомерСправкиОФО) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки + " не указан номер справки!", "Раздел5", "П000500000141_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаСправкиОФО) Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 5, в строке " + НомерСтроки + " не указана дата выдачи справки!", "Раздел5", "П000500000142_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЭтоПервыйКвартал Тогда
				ТекстОписанияОшибки = "В разделе 5 сумма значений показателей в графах 6, 7, 8 строки " + НомерСтроки + " не равна значению показателя в графе 5 (расчет за 1-й квартал)!";
				Если СуммаВсего <> (Сумма1Месяц + Сумма2Месяц + Сумма3Месяц) Тогда
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500000150_" + НомерСтроки);
				КонецЕсли;
			Иначе
				ТекстОписанияОшибки = "В разделе 5 сумма значений показателей в графах 6, 7, 8 строки " + НомерСтроки + " превышает значение показателя в графе 5!";
				Если СуммаВсего < (Сумма1Месяц + Сумма2Месяц + Сумма3Месяц) Тогда
					СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500000150_" + НомерСтроки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ИтогГрафа5 = ИтогГрафа5 + СуммаВсего;
		ИтогГрафа6 = ИтогГрафа6 + Сумма1Месяц;
		ИтогГрафа7 = ИтогГрафа7 + Сумма2Месяц;
		ИтогГрафа8 = ИтогГрафа8 + Сумма3Месяц;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	ТекстОписанияОшибки = "Значение итога по графе 5 раздела 5 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000500000250 <> ИтогГрафа5 Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500000250");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение итога по графе 6 раздела 5 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000500000260 <> ИтогГрафа6 Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500000260");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение итога по графе 7 раздела 5 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000500000270 <> ИтогГрафа7 Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500000270");
	КонецЕсли;
	
	ТекстОписанияОшибки = "Значение итога по графе 8 раздела 5 не совпадает с суммой значений по строкам!";
	Если ДанныеРаздела.П000500000280 <> ИтогГрафа8 Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500000280");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 5 не указана дата записи в реестре!";
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501104) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501103) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501103");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 5 не указан номер записи в реестре!";
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501103) И ПустаяСтрока(ДанныеРаздела.П000500501104) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501104");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 5 не указана дата записи в реестре!";
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501204) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501203) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501203");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 5 не указан номер записи в реестре!";
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501203) И ПустаяСтрока(ДанныеРаздела.П000500501204) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501204");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 5 не указана дата записи в реестре!";
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501304) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501303) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501303");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 5 не указан номер записи в реестре!";
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501303) И ПустаяСтрока(ДанныеРаздела.П000500501304) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501304");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 5 не указана дата записи в реестре!";
	Если НЕ ПустаяСтрока(ДанныеРаздела.П000500501404) И НЕ ЗначениеЗаполнено(ДанныеРаздела.П000500501403) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501403");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 5 не указан номер записи в реестре!";
	Если ЗначениеЗаполнено(ДанныеРаздела.П000500501403) И ПустаяСтрока(ДанныеРаздела.П000500501404) Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501404");
	КонецЕсли;
	
	ТекстОписанияОшибки = "В разделе 5 не указаны сведения из реестра молодежных и детских общественных объединений, пользующихся государственной поддержкой!";
	ЗаполненыСведенияИзРеестра = НЕ ПустаяСтрока(ДанныеРаздела.П000500501104) ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501103)
	                         ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000500501204) ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501203)
	                         ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000500501304) ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501303)
	                         ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000500501404) ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501403);
	Если НЕ ЗаполненыСведенияИзРеестра Тогда
		СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, "Раздел5", "П000500501103");
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполненРаздел31()
	
	Результат = Ложь;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	
	НомерПП       = Неопределено;
	ФИОСотрудника = Неопределено;
	ДатаВыдачи    = Неопределено;
	ДатаОкончания = Неопределено;
	СуммаВсего    = Неопределено;
	Сумма1Месяц   = Неопределено;
	Сумма2Месяц   = Неопределено;
	Сумма3Месяц   = Неопределено;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000310001002_" + Формат(НомСтроки, "ЧГ="), ФИОСотрудника) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		ДанныеРаздела.Свойство("П000310001001_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000310001003_" + НомерСтроки, ДатаВыдачи);
		ДанныеРаздела.Свойство("П000310001004_" + НомерСтроки, ДатаОкончания);
		ДанныеРаздела.Свойство("П000310001005_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела.Свойство("П000310001006_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела.Свойство("П000310001007_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела.Свойство("П000310001008_" + НомерСтроки, Сумма3Месяц);
		
		Если ЗначениеЗаполнено(ФИОСотрудника) ИЛИ ЗначениеЗаполнено(ДатаВыдачи)
		 ИЛИ ЗначениеЗаполнено(ДатаОкончания) ИЛИ ЗначениеЗаполнено(СуммаВсего) 
		 ИЛИ ЗначениеЗаполнено(Сумма1Месяц) ИЛИ ЗначениеЗаполнено(Сумма2Месяц) 
		 ИЛИ ЗначениеЗаполнено(Сумма3Месяц) ИЛИ ЗначениеЗаполнено (НомерПП) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	Результат = Результат
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000310002005)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000310002006)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000310002007)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000310002008);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненРаздел32()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	
	Результат = Ложь;
	
	Для НомерСтроки = 321 По 323 Цикл
		Для НомерГрафы = 3 По 6 Цикл
			ИмяОбласти = "П0003200" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненРаздел33()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел33;
	
	Результат = Ложь;
	
	Для НомерСтроки = 331 По 336 Цикл
		Для НомерГрафы = 3 По 6 Цикл
			ИмяОбласти = "П0003300" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненРаздел34()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел34;
	
	Результат = Ложь;
	
	Для НомерСтроки = 341 По 345 Цикл
		Для НомерГрафы = 3 По 4 Цикл
			ИмяОбласти = "П0003400" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненРаздел35()
	
	Результат = Ложь;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел35;
	
	ЗаполненыСтрокиРаздела = Ложь;
	
	НомерПП = Неопределено;
	КодДеятельностиПоОКВЭД = Неопределено;
	ВидЭкономическойДеятельности = Неопределено;
	Доходы = Неопределено;
	ДоляДоходов = Неопределено;
	СуммаДолейДоходов = 0;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000350000122_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000350000101_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000350000121_" + НомерСтроки, КодДеятельностиПоОКВЭД);
		ДанныеРаздела.Свойство("П000350000122_" + НомерСтроки, ВидЭкономическойДеятельности);
		ДанныеРаздела.Свойство("П000350000103_" + НомерСтроки, Доходы);
		ДанныеРаздела.Свойство("П000350000104_" + НомерСтроки, ДоляДоходов);
		
		Если ДоляДоходов <> Неопределено Тогда
			СуммаДолейДоходов = СуммаДолейДоходов + ДоляДоходов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(КодДеятельностиПоОКВЭД)
		 ИЛИ ЗначениеЗаполнено(ВидЭкономическойДеятельности) ИЛИ ЗначениеЗаполнено(Доходы)
		 ИЛИ ЗначениеЗаполнено(ДоляДоходов) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	
	Результат = Результат
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000350000203)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000350000204)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000350035103)
	        ИЛИ НЕ ПустаяСтрока(ДанныеРаздела.П000350035104);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненРаздел36()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел36;
	
	Результат = ЗначениеЗаполнено(ДанныеРаздела.П000360036103)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000360036203)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000360036303);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненРаздел37()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел37;
	
	Результат = Ложь;
	
	Для НомерСтроки = 371 По 375 Цикл
		Для НомерГрафы = 3 По 4 Цикл
			ИмяОбласти = "П0003700" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненРаздел38()
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел38;
	
	Результат = Ложь;
	
	Для НомерСтроки = 381 По 385 Цикл
		Для НомерГрафы = 3 По 4 Цикл
			ИмяОбласти = "П0003800" + НомерСтроки + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			Результат = (Результат ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбласти]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненРаздел4()
	
	Результат = Ложь;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	
	НомерПП         = Неопределено;
	ГодНачисления   = Неопределено;
	МесяцНачисления = Неопределено;
	ВзносыОПС_СЧ    = Неопределено;
	ВзносыОПС_НЧ    = Неопределено;
	ВзносыОМС       = Неопределено;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000400000102_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		ДанныеРаздела.Свойство("П000400000101_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000400000102_" + НомерСтроки, ГодНачисления);
		ДанныеРаздела.Свойство("П000400000103_" + НомерСтроки, МесяцНачисления);
		ДанныеРаздела.Свойство("П000400000104_" + НомерСтроки, ВзносыОПС_СЧ);
		ДанныеРаздела.Свойство("П000400000105_" + НомерСтроки, ВзносыОПС_НЧ);
		ДанныеРаздела.Свойство("П000400000106_" + НомерСтроки, ВзносыОМС);
		
		Если ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(ГодНачисления)
		 ИЛИ ЗначениеЗаполнено(МесяцНачисления) ИЛИ ЗначениеЗаполнено(ВзносыОПС_СЧ)
		 ИЛИ ЗначениеЗаполнено(ВзносыОПС_НЧ) ИЛИ ЗначениеЗаполнено(ВзносыОМС) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	Результат = Результат
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000204)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000205)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000400000206);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненРаздел5()
	
	Результат = Ложь;
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел5;
	
	НомерПП = Неопределено;
	ФИОСтудента = Неопределено;
	НомерСправкиСО = Неопределено;
	ДатаСправкиСО = Неопределено;
	НомерСправкиОФО = Неопределено;
	ДатаСправкиОФО = Неопределено;
	СуммаВсего    = Неопределено;
	Сумма1Месяц   = Неопределено;
	Сумма2Месяц   = Неопределено;
	Сумма3Месяц   = Неопределено;
	
	НомСтроки = 1;
	Пока ДанныеРаздела.Свойство("П000500000120_" + Формат(НомСтроки, "ЧГ=")) Цикл
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела.Свойство("П000500000110_" + НомерСтроки, НомерПП);
		ДанныеРаздела.Свойство("П000500000120_" + НомерСтроки, ФИОСтудента);
		ДанныеРаздела.Свойство("П000500000131_" + НомерСтроки, НомерСправкиСО);
		ДанныеРаздела.Свойство("П000500000132_" + НомерСтроки, ДатаСправкиСО);
		ДанныеРаздела.Свойство("П000500000141_" + НомерСтроки, НомерСправкиОФО);
		ДанныеРаздела.Свойство("П000500000142_" + НомерСтроки, ДатаСправкиОФО);
		ДанныеРаздела.Свойство("П000500000150_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела.Свойство("П000500000160_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела.Свойство("П000500000170_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела.Свойство("П000500000180_" + НомерСтроки, Сумма3Месяц);
		
		Если ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(ФИОСтудента)
		 ИЛИ ЗначениеЗаполнено(НомерСправкиСО) ИЛИ ЗначениеЗаполнено(ДатаСправкиСО)
		 ИЛИ ЗначениеЗаполнено(НомерСправкиОФО) ИЛИ ЗначениеЗаполнено(ДатаСправкиОФО)
		 ИЛИ ЗначениеЗаполнено(СуммаВсего) ИЛИ ЗначениеЗаполнено(Сумма1Месяц)
		 ИЛИ ЗначениеЗаполнено(Сумма2Месяц) ИЛИ ЗначениеЗаполнено(Сумма3Месяц) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	Результат = Результат
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000250)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000260)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000270)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500000280)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501103)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501104)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501204)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501203)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501304)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501303)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501403)
	        ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000500501404);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоИностраннаяОрганизация()
	
	Если Организация.Метаданные().Реквизиты.Найти("ИностраннаяОрганизация") <> Неопределено Тогда
		Возврат Организация.ИностраннаяОрганизация;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СообщитьОбОшибкеЗаполнения(СтатусПроверки, ТекстОписанияОшибки, Раздел, Показатель)
	
	СтатусПроверки = Ложь;
	РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, Раздел, Показатель);
	
КонецПроцедуры

Функция СуммаПоказателяМногостраничногоРаздела(ТаблицаРаздела, Показатель, Округлять = Ложь)
	
	Результат = 0;
	
	Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
		ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные;
		ЗначениеПоказателя = ДанныеТаблПоле[Показатель];
		Результат = Результат + ?(Округлять, ОкруглитьЧислоПоФормату(ЗначениеПоказателя), ЗначениеПоказателя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьРаздел2СКодомТарифа(КодТарифа)
	
	Результат = Ложь;
	
	Раздел2 = мДанныеОтчета.Раздел2;
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		ДанныеЛиста = ЛистРаздела2.Данные;
		КодТарифаЛиста = ДанныеЛиста.П000200001001 + ДанныеЛиста.П000200001002;
		Если КодТарифаЛиста = КодТарифа Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(Параметры, УзелРодитель)
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	Раздел1   = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел2   = мДанныеОтчета.Раздел2;
	Раздел31  = мДанныеОтчета.ПолеТабличногоДокументаРаздел31;
	Раздел32  = мДанныеОтчета.ПолеТабличногоДокументаРаздел32;
	Раздел33  = мДанныеОтчета.ПолеТабличногоДокументаРаздел33;
	Раздел34  = мДанныеОтчета.ПолеТабличногоДокументаРаздел34;
	Раздел35  = мДанныеОтчета.ПолеТабличногоДокументаРаздел35;
	Раздел36  = мДанныеОтчета.ПолеТабличногоДокументаРаздел36;
	Раздел37  = мДанныеОтчета.ПолеТабличногоДокументаРаздел37;
	Раздел38  = мДанныеОтчета.ПолеТабличногоДокументаРаздел38;
	Раздел4   = мДанныеОтчета.ПолеТабличногоДокументаРаздел4;
	Раздел5   = мДанныеОтчета.ПолеТабличногоДокументаРаздел5;
	
	Если Параметры.ЭтоПБОЮЛ Тогда
		УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "НаименованиеОрганизации"));
		УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "КПП"));
		УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОГРН"));
	Иначе
		УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "ФИОфизическогоЛица"));
		УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОГРНИП"));
	КонецЕсли;
	
	УзелРаздела1 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел1РасчетПоНачисленнымУплаченным");
	ЗаполнитьДаннымиУзел(Раздел1, УзелРаздела1);
	
	УзелРаздела2 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел2РасчетПоТарифу");
	Для Каждого ЛистРаздела2 Из Раздел2 Цикл
		НовыйУзелРаздела2 = СкопироватьУзел(УзелРодитель, УзелРаздела2);
		ЗаполнитьДаннымиУзел(ЛистРаздела2.Данные, НовыйУзелРаздела2);
		
		КодТарифа = СокрЛП(ЛистРаздела2.Данные.П000200001001 + ЛистРаздела2.Данные.П000200001002);
		ЗадатьЗначениеЭлемента(НовыйУзелРаздела2, "КодТарифа", КодТарифа);
	КонецЦикла;
	
	КорневойУзелРаздела3 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел3РасчетНаПравоПримененияПониженногоТарифа");
	
	УзелРаздела31 = ПолучитьПодчиненныйЭлемент(КорневойУзелРаздела3, "Раздел3_1_СведенияДляПримененияПониженногоТарифа_ФЛ_Инвалиду");
	УзелРаздела31_СведенияОбИнвалиде = ПолучитьПодчиненныйЭлемент(УзелРаздела31, "СведенияОработникеИнвалиде");
	ЗаполнитьДаннымиУзел(Раздел31, УзелРаздела31);
	
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока СвойствоОпределено(Раздел31, "П000310001002_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(Раздел31["П000310001002_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			УзелСведенияОработникеИнвалиде = СкопироватьУзел(УзелРаздела31, УзелРаздела31_СведенияОбИнвалиде);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел31, УзелСведенияОработникеИнвалиде, НомСтр);
			
			УзелФИО = ПолучитьПодчиненныйЭлемент(УзелСведенияОработникеИнвалиде, "ФИО");
			ФИО = РазложитьФИО(ВРЕГ(Раздел31["П000310001002_" + Формат(НомСтр, "ЧГ=")]));
			
			ЗаменитьБуквуЁ(ФИО.Фамилия,  "Раздел 3.1, строка " + ЧислоВыгруженныхСтрок +" Фамилия");
			ЗаменитьБуквуЁ(ФИО.Имя,      "Раздел 3.1, строка " + ЧислоВыгруженныхСтрок +" Имя");
			ЗаменитьБуквуЁ(ФИО.Отчество, "Раздел 3.1, строка " + ЧислоВыгруженныхСтрок +" Отчество");
			
			ЗадатьЗначениеЭлемента(УзелФИО, "Фамилия",  ФИО.Фамилия);
			ЗадатьЗначениеЭлемента(УзелФИО, "Имя",      ФИО.Имя);
			ЗадатьЗначениеЭлемента(УзелФИО, "Отчество", ФИО.Отчество);
			
			ЗадатьЗначениеЭлемента(УзелСведенияОработникеИнвалиде, "НомерПП", ЧислоВыгруженныхСтрок);
			
			УзелСуммыВыплатИвознаграждений = ПолучитьПодчиненныйЭлемент(УзелСведенияОработникеИнвалиде, "СуммыВыплатИвознаграждений");
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел31, УзелСуммыВыплатИвознаграждений, НомСтр, , Истина);
			
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		УдалитьУзел(УзелРаздела31_СведенияОбИнвалиде); // Удаление образца
	КонецЕсли;
	
	ЗадатьЗначениеЭлемента(УзелРаздела31, "КоличествоРаботниковИнвалидов", ЧислоВыгруженныхСтрок);
	
	УзелРаздела32 = ПолучитьПодчиненныйЭлемент(КорневойУзелРаздела3, "Раздел3_2_ДляОбщественныхОрганизацийИнвалидов");
	ЗаполнитьДаннымиУзел(Раздел32, УзелРаздела32);
	
	УзелРаздела33 = ПолучитьПодчиненныйЭлемент(КорневойУзелРаздела3, "Раздел3_3_ДляОрганизацийУставныйКапиталСостоитИзВкладовОбщОргИнвалидов");
	ЗаполнитьДаннымиУзел(Раздел33, УзелРаздела33);
	
	УзелРаздела34 = ПолучитьПодчиненныйЭлемент(КорневойУзелРаздела3, "Раздел3_4_ДляОрганизацийИТ");
	ЗаполнитьДаннымиУзел(Раздел34, УзелРаздела34);
	
	УзелРаздела36 = ПолучитьПодчиненныйЭлемент(КорневойУзелРаздела3, "Раздел3_6_ДляОрганизацийПрименяющихУСН");
	ЗаполнитьДаннымиУзел(Раздел36, УзелРаздела36);
	
	УзелРаздела35 = ПолучитьПодчиненныйЭлемент(КорневойУзелРаздела3, "Раздел3_5_ДляОрганизацийСМИ");
	УзелРаздела35_СведенияПоВидуДеятельности = ПолучитьПодчиненныйЭлемент(УзелРаздела35, "СведенияПоВидуДеятельности");
	ЗаполнитьДаннымиУзел(Раздел35, УзелРаздела35);
	
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока СвойствоОпределено(Раздел35, "П000350000122_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(Раздел35["П000350000122_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			УзелСведенияПоВидуДеятельности = СкопироватьУзел(УзелРаздела35, УзелРаздела35_СведенияПоВидуДеятельности);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел35, УзелСведенияПоВидуДеятельности, НомСтр);
			
			ЗадатьЗначениеЭлемента(УзелСведенияПоВидуДеятельности, "НомерПП", ЧислоВыгруженныхСтрок);
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		УдалитьУзел(УзелРаздела35_СведенияПоВидуДеятельности); // Удаление образца
	КонецЕсли;
	
	УзелРаздела37 = ПолучитьПодчиненныйЭлемент(КорневойУзелРаздела3, "Раздел3_7_ДляНекоммерческихОрганизацийПрименяющихУСН");
	ЗаполнитьДаннымиУзел(Раздел37, УзелРаздела37);
	
	УзелРаздела38 = ПолучитьПодчиненныйЭлемент(КорневойУзелРаздела3, "Раздел3_8_ДляОрганизацийОказывающихИнжиниринговыеУслуги");
	ЗаполнитьДаннымиУзел(Раздел38, УзелРаздела38);
	
	УзелРаздела4 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел4СуммыДоначисленныхСтраховыхВзносов");
	УзелРаздела4_СуммаДоначисленныхВзносовЗаПериод = ПолучитьПодчиненныйЭлемент(УзелРаздела4, "СуммаДоначисленныхВзносовЗаПериод");
	ЗаполнитьДаннымиУзел(Раздел4, УзелРаздела4);
	
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока СвойствоОпределено(Раздел4, "П000400000102_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(Раздел4["П000400000102_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			УзелСуммаДоначисленныхВзносовЗаПериод = СкопироватьУзел(УзелРаздела4, УзелРаздела4_СуммаДоначисленныхВзносовЗаПериод);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел4, УзелСуммаДоначисленныхВзносовЗаПериод, НомСтр);
			
			ЗадатьЗначениеЭлемента(УзелСуммаДоначисленныхВзносовЗаПериод, "НомерПП", ЧислоВыгруженныхСтрок);
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		УдалитьУзел(УзелРаздела4_СуммаДоначисленныхВзносовЗаПериод); // Удаление образца
	КонецЕсли;
	
	УзелРаздела5 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "Раздел5СведенияОВыплатахВпользуОбучающихся");
	УзелРаздела5_СведенияОбОбучающемся = ПолучитьПодчиненныйЭлемент(УзелРаздела5, "СведенияОбОбучающемся");
	ЗаполнитьДаннымиУзел(Раздел5, УзелРаздела5);
	
	НомСтр = 1;
	ЧислоВыгруженныхСтрок = 0;
	Пока СвойствоОпределено(Раздел5, "П000500000120_" + Формат(НомСтр, "ЧГ=")) Цикл
		Если ЗначениеЗаполнено(Раздел5["П000500000120_" + Формат(НомСтр, "ЧГ=")]) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			
			УзелСведенияОбОбучающемся = СкопироватьУзел(УзелРаздела5, УзелРаздела5_СведенияОбОбучающемся);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел5, УзелСведенияОбОбучающемся, НомСтр);
			
			УзелФИО = ПолучитьПодчиненныйЭлемент(УзелСведенияОбОбучающемся, "ФИО");
			ФИО = РазложитьФИО(ВРЕГ(Раздел5["П000500000120_" + Формат(НомСтр, "ЧГ=")]));
			
			ЗаменитьБуквуЁ(ФИО.Фамилия,  "Раздел 5, строка " + ЧислоВыгруженныхСтрок +" Фамилия");
			ЗаменитьБуквуЁ(ФИО.Имя,      "Раздел 5, строка " + ЧислоВыгруженныхСтрок +" Имя");
			ЗаменитьБуквуЁ(ФИО.Отчество, "Раздел 5, строка " + ЧислоВыгруженныхСтрок +" Отчество");
			
			ЗадатьЗначениеЭлемента(УзелФИО, "Фамилия",  ФИО.Фамилия);
			ЗадатьЗначениеЭлемента(УзелФИО, "Имя",      ФИО.Имя);
			ЗадатьЗначениеЭлемента(УзелФИО, "Отчество", ФИО.Отчество);
			
			УзелСуммыВыплатИвознаграждений = ПолучитьПодчиненныйЭлемент(УзелСведенияОбОбучающемся, "СуммыВыплатИвознаграждений");
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел5, УзелСуммыВыплатИвознаграждений, НомСтр, , Истина);
			
			ЗадатьЗначениеЭлемента(УзелСведенияОбОбучающемся, "НомерПП", ЧислоВыгруженныхСтрок);
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	ЗадатьЗначениеЭлемента(УзелРаздела5, "КоличествоОбучающихся", ЧислоВыгруженныхСтрок);
	
	Если ЧислоВыгруженныхСтрок > 0 Тогда
		УдалитьУзел(УзелРаздела5_СведенияОбОбучающемся); // Удаление образца
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ?(Узел.Формат = "N", СокрЛП(Узел.Значение) = "" ИЛИ Число(Узел.Значение) = 0 ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Параметры.ИмяКлючевогоУзлаСодержательнойЧасти = Узел.Код Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ВРег(ЗначениеПоказателя)); // В этом отчете все символьные строки должны быть представлены в верхнем регистре
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.; ЧН=; ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "D" Тогда
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy"));
		Иначе
			Узел.Значение = "";
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Параметры.ИмяКлючевогоУзлаСодержательнойЧасти = Стр.Код Тогда
				ЗаполнитьДаннымиУзел(Параметры, Стр);
				ЗаполнитьСодержательнуюЧасть(Параметры, Стр);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И СвойствоОпределено(Параметры, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если СвойствоОпределено(Параметры, Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("ФайлПФР");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI, , , Символы.ПС);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

Функция ОтображатьНулевыеЗначенияСтрок100и150Цифрами()

	ЗначениеПоУмолчанию = Ложь;

	Если ТипЗнч(НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами) <> Тип("Булево") Тогда
		НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат НастройкиОтображатьНулевыеЗначенияСтрок100и150Цифрами;

КонецФункции

Процедура УстановитьФорматОтображенияНулевыхЗначенийСтрок100и150()
	
	СтрокаИменОбластейДляФорматирования = "П000100010003, П000100010004, П000100010005,
	                                      |П000100015003, П000100015004, П000100015005";
	
	МассивОбластейДляФорматирования = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаИменОбластейДляФорматирования, ",");
	
	Для Каждого ИмяФорматируемойОбласти Из МассивОбластейДляФорматирования Цикл
		УстановитьФорматОтображенияНулевогоЗначенияПоказателяСтрок100и150(СокрЛП(ИмяФорматируемойОбласти));
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьФорматОтображенияНулевогоЗначенияПоказателяСтрок100и150(ИмяОбласти)
	
	ФорматируемаяОбласть = ЭлементыФормы.ПолеТабличногоДокументаРаздел1.Области[ИмяОбласти];
	ИсходнаяСтрокаФормата = ФорматируемаяОбласть.Формат;
	МассивЭлементовФорматирования = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИсходнаяСтрокаФормата, ";");
	
	Для Инд = 0 По МассивЭлементовФорматирования.ВГраница() Цикл
		ЭлементФорматаБезКрайнихПробелов = СокрЛП(МассивЭлементовФорматирования[Инд]);
		Если Найти(ЭлементФорматаБезКрайнихПробелов, "ЧН") = 1 Тогда
			МассивЭлементовФорматирования[Инд] = ?(ОтображатьНулевыеЗначенияСтрок100и150Цифрами(), "ЧН=", "ЧН=-");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СобраннаяСтрокаФормата = "";
	Для Каждого ЭлементФормата Из МассивЭлементовФорматирования Цикл
		ВставлятьРазделитель = НЕ ПустаяСтрока(СобраннаяСтрокаФормата);
		СобраннаяСтрокаФормата = СобраннаяСтрокаФормата + ?(ВставлятьРазделитель, ";", "")+ ЭлементФормата;
	КонецЦикла;
	
	ФорматируемаяОбласть.Формат = СобраннаяСтрокаФормата;
	
КонецПроцедуры

мСоставПоказателей = "СоставПоказателей2012Кв1";
мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

ОписаниеТиповЧисло  = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(16, 2);
ОписаниеТиповДеньги = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
ОписаниеТиповДоля   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(8, 5);
ОписаниеТиповЧисло6 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6);

ОписаниеТиповЧислоЧ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 0);

ОписаниеТиповСтрока10  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

ОписаниеТиповДата = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// Описание многострочных групп формы.
мИдГруппы31 = "П0003100010";
КолИсхСтрокИдГруппы31 = 34;

СтруктураГруппы31 = Новый ТаблицаЗначений;
СтруктураГруппы31.Колонки.Добавить("П000310001001", ОписаниеТиповЧисло6);
СтруктураГруппы31.Колонки.Добавить("П000310001002", ОписаниеТиповСтрока254);
СтруктураГруппы31.Колонки.Добавить("П000310001003", ОписаниеТиповДата);
СтруктураГруппы31.Колонки.Добавить("П000310001004", ОписаниеТиповДата);
СтруктураГруппы31.Колонки.Добавить("П000310001005", ОписаниеТиповДеньги);
СтруктураГруппы31.Колонки.Добавить("П000310001006", ОписаниеТиповДеньги);
СтруктураГруппы31.Колонки.Добавить("П000310001007", ОписаниеТиповДеньги);
СтруктураГруппы31.Колонки.Добавить("П000310001008", ОписаниеТиповДеньги);

мИдГруппы35 = "П0003500001";
КолИсхСтрокИдГруппы35 = 20;

СтруктураГруппы35 = Новый ТаблицаЗначений;
СтруктураГруппы35.Колонки.Добавить("П000350000101", ОписаниеТиповЧисло6);
СтруктураГруппы35.Колонки.Добавить("П000350000121", ОписаниеТиповСтрока10);
СтруктураГруппы35.Колонки.Добавить("П000350000122", ОписаниеТиповСтрока254);
СтруктураГруппы35.Колонки.Добавить("П000350000103", ОписаниеТиповДеньги);
СтруктураГруппы35.Колонки.Добавить("П000350000104", ОписаниеТиповДоля);

мИдГруппы4 = "П0004000001";
КолИсхСтрокИдГруппы4 = 41;

СтруктураГруппы4 = Новый ТаблицаЗначений;
СтруктураГруппы4.Колонки.Добавить("П000400000101", ОписаниеТиповЧисло6);
СтруктураГруппы4.Колонки.Добавить("П000400000102", ОписаниеТиповЧисло6);
СтруктураГруппы4.Колонки.Добавить("П000400000103", ОписаниеТиповЧисло6);
СтруктураГруппы4.Колонки.Добавить("П000400000104", ОписаниеТиповДеньги);
СтруктураГруппы4.Колонки.Добавить("П000400000105", ОписаниеТиповДеньги);
СтруктураГруппы4.Колонки.Добавить("П000400000106", ОписаниеТиповДеньги);

мИдГруппы5 = "П0005000001";
КолИсхСтрокИдГруппы5 = 26;

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("П000500000110", ОписаниеТиповЧисло6);
СтруктураГруппы5.Колонки.Добавить("П000500000120", ОписаниеТиповСтрока254);
СтруктураГруппы5.Колонки.Добавить("П000500000131", ОписаниеТиповСтрока254);
СтруктураГруппы5.Колонки.Добавить("П000500000132", ОписаниеТиповДата);
СтруктураГруппы5.Колонки.Добавить("П000500000141", ОписаниеТиповСтрока254);
СтруктураГруппы5.Колонки.Добавить("П000500000142", ОписаниеТиповДата);
СтруктураГруппы5.Колонки.Добавить("П000500000150", ОписаниеТиповДеньги);
СтруктураГруппы5.Колонки.Добавить("П000500000160", ОписаниеТиповДеньги);
СтруктураГруппы5.Колонки.Добавить("П000500000170", ОписаниеТиповДеньги);
СтруктураГруппы5.Колонки.Добавить("П000500000180", ОписаниеТиповДеньги);

// Структура многострочных разделов формы.
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы31, СтруктураГруппы31);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы35, СтруктураГруппы35);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы4, СтруктураГруппы4);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5, СтруктураГруппы5);

// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы31, КолИсхСтрокИдГруппы31);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы35, КолИсхСтрокИдГруппы35);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы4, КолИсхСтрокИдГруппы4);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5, КолИсхСтрокИдГруппы5);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);
ЦветБелый                        = Новый Цвет(255, 255, 255);
ЦветЖелтый                       = Новый Цвет(255, 255, 192);

// Структура цветов раскраски автозаполняемых ячеек.
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы.
//
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", ОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");

// Структура содержит данные дополнительных страниц раздела 2.
мСтруктураМногостраничныхРазделов = Новый Структура;
ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

ТаблицаСтраницыРаздел2 = ТаблицаСтраницыРаздела.Скопировать();
СтрПерваяСтраница = ТаблицаСтраницыРаздел2.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаСтраницыРаздел2);

// Версия формы.
мВерсияФормы = "10/05/2012";

// Код отчета условный.
мКодОтчета   = "1169999";

ВариантыФорматовВыгрузки = Новый СписокЗначений;
ВариантыФорматовВыгрузки.Добавить(мСоставПоказателей, "Формат 7.00", Истина);

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

мПечатныеФормы = Новый СписокЗначений;