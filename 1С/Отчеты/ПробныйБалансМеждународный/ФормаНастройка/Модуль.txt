// Процедура - обработчик нажатия кнопки настройки периода.
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(ДатаНач, ДатаКон);

	Если НП.Редактировать() Тогда

		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура НижняяКоманднаяПанельОК(Элемент)

	СтруктураРезультата = Неопределено;
	
	Закрыть(Истина);
	
КонецПроцедуры

//Процедура НижняяКоманднаяПанельОтмена(Кнопка)
//	
//	Закрыть(Неопределено);
//	
//КонецПроцедуры

// Обработка начала выбора разворота по субконто
Процедура НачалоВыбораРазворотаПоСубконто(Элемент, ТабличноеПоле)

	Счет = ТабличноеПоле.ТекущиеДанные.Счет;
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Предупреждение("Не выбран счет!");
		Возврат;
	КонецЕсли;
	
	СписокСубконто = Новый СписокЗначений;
	
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл

		// Для развернутого сальдо не используются оборотные субконто.
		Если ВидСубконто.ТолькоОбороты 
			И ТабличноеПоле = ЭлементыФормы.ПравилаРазвернутогоСальдо Тогда
			Продолжить;
		КонецЕсли;
		
		СписокСубконто.Добавить("Субконто" + Строка(Счет.ВидыСубконто.Индекс(ВидСубконто)+1), ВидСубконто.ВидСубконто.Наименование);
		
	КонецЦикла;

	// Данные этой строки должны быть отмечены
	Для Каждого Строка Из ТабличноеПоле.ТекущиеДанные.РазворотПоСубконто Цикл
		ЭлементСписка = СписокСубконто.НайтиПоЗначению(Строка.Имя);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;

	Форма = ПолучитьФорму("ФормаНастройкаПоСубконто", Элемент);

	// Передача параметров в форму
	Форма.Список = СписокСубконто;
	
	Форма.РежимВыбора = Истина;
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры // НачалоВыбораРазворотаПоСубконто()

Процедура ПравилаВыводаИтоговНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораРазворотаПоСубконто(Элемент, ЭлементыФормы.ПравилаВыводаИтогов);
	
КонецПроцедуры // ПравилаВыводаИтоговДополнительныеПоляНачалоВыбора()

Процедура ПравилаВыводаИтоговОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбработкаВыбораРазворотаПоСубконто(ВыбранноеЗначение, ЭлементыФормы.ПравилаВыводаИтогов);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПравилаРазвернутогоСальдоРазворотПоСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораРазворотаПоСубконто(Элемент, ЭлементыФормы.ПравилаРазвернутогоСальдо);

КонецПроцедуры

Процедура ПравилаРазвернутогоСальдоРазворотПоСубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораРазворотаПоСубконто(ВыбранноеЗначение, ЭлементыФормы.ПравилаРазвернутогоСальдо);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура обрабатывает выбор показателей, группировок или фильтров из отдельного окна.
Процедура ОбработкаВыбораРазворотаПоСубконто(ВыбранноеЗначение,ТабличноеПоле)

	Если ТабличноеПоле.ТекущаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущаяСтрока)];

	МассивСтрока = Новый Массив; 
	МассивСтрока.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(100);
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);


	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Очистить();
	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Имя",           ОписаниеТиповСтрока);
	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Представление", ОписаниеТиповСтрока);

	РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = "";

	Для Каждого Строка Из ВыбранноеЗначение Цикл 

		Если Строка.Пометка Тогда
			НоваяСтрокаПоСубконто = РедактируемаяСтрока.РазворотПоСубконто.Добавить();
			
			НоваяСтрокаПоСубконто.Имя = Строка.Значение;
			НоваяСтрокаПоСубконто.Представление = Строка.Представление;
			
			РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = РедактируемаяСтрока.ПредставлениеРазворотПоСубконто + ", " 
			+ Строка.Представление;
		КонецЕсли;

	КонецЦикла;

	РедактируемаяСтрока.ПредставлениеРазворотПоСубконто  = Сред(РедактируемаяСтрока.ПредставлениеРазворотПоСубконто, 3);

КонецПроцедуры // ОбработкаВыбора()

// Обработка изменения счета 
//
// Параметры:
//	Нет.
//
Процедура ПриИзмененииСчета(ТабличноеПоле)

	Если ТабличноеПоле.ТекущаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущаяСтрока)];

	МассивСтрока = Новый Массив; 
	МассивСтрока.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(100);
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Очистить();
	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Имя",           ОписаниеТиповСтрока);
	РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Представление", ОписаниеТиповСтрока);

	РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = "";

	// Признак того, что счет найден способ развернуть счет
	НайденСпособРазворота = Ложь;

	Счет = РедактируемаяСтрока.Счет;
	Если ЗначениеЗаполнено(Счет) Тогда
		ВыборкаПоСчету = ПланыСчетов[Счет.Метаданные().Имя].Выбрать(Счет);
		Если ВыборкаПоСчету.Следующий() Тогда
			РедактируемаяСтрока.Субсчета = Истина;

			НайденСпособРазворота = Истина;
		КонецЕсли;

		// Развернутое сальдо только по субсчетам
		Если ТабличноеПоле = ЭлементыФормы.ПравилаРазвернутогоСальдо 
			И НайденСпособРазворота Тогда
			Возврат;
		КонецЕсли;
		
		Если Счет.ВидыСубконто.Количество() >0 Тогда

			// Развернутое сальдо - отключим субсчета
			Если ТабличноеПоле = ЭлементыФормы.ПравилаРазвернутогоСальдо Тогда
				РедактируемаяСтрока.Субсчета = Ложь;
			КонецЕсли;

			Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл

				// Для развернутого сальдо не используются оборотные субконто.
				Если ВидСубконто.ТолькоОбороты 
					И ТабличноеПоле = ЭлементыФормы.ПравилаРазвернутогоСальдо Тогда
					Продолжить;
				КонецЕсли;

				НоваяСтрокаПоСубконто = РедактируемаяСтрока.РазворотПоСубконто.Добавить();
				НоваяСтрокаПоСубконто.Имя = "Субконто" + Строка(Счет.ВидыСубконто.Индекс(ВидСубконто)+1);
				НоваяСтрокаПоСубконто.Представление = ВидСубконто.ВидСубконто.Наименование;

				РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = РедактируемаяСтрока.ПредставлениеРазворотПоСубконто + ", " 
				+ ВидСубконто.ВидСубконто.Наименование;

			КонецЦикла;

			РедактируемаяСтрока.ПредставлениеРазворотПоСубконто  = Сред(РедактируемаяСтрока.ПредставлениеРазворотПоСубконто, 3);

			НайденСпособРазворота = Истина;

		КонецЕсли;

		// Если у счета нет ни субсчетов, ни субконто, не дадим его выбрать.
		Если НЕ НайденСпособРазворота Тогда
			Если ТабличноеПоле = ЭлементыФормы.ПравилаРазвернутогоСальдо Тогда
				ВидНастройки = "развернутого сальдо ";
			Иначе
				ВидНастройки = "итогов по субсчетам и субконто ";
			КонецЕсли;
			Предупреждение("Счет """ + Счет.Код + """ не имеет ни субсчетов, ни субконто." + Символы.ПС + "Настройка " + ВидНастройки + "не имеет смысла!");
			РедактируемаяСтрока.Счет = Неопределено;
		КонецЕсли;

	КонецЕсли;

	
КонецПроцедуры // ПриИзмененииСчета()

Процедура ПравилаВыводаИтоговСчетПриИзменении(Элемент)
	
	ПриИзмененииСчета(ЭлементыФормы.ПравилаВыводаИтогов);
	
КонецПроцедуры

Процедура ПравилаРазвернутогоСальдоСчетПриИзменении(Элемент)
	
	ПриИзмененииСчета(ЭлементыФормы.ПравилаРазвернутогоСальдо);
	
КонецПроцедуры

Процедура ПравилаРазвернутогоСальдоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ТабличноеПоле = Элемент;

	Если ТабличноеПоле.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущаяСтрока)];
	
	Если НРег(ТабличноеПоле.ТекущаяКолонка.Имя) = НРег("Субсчета") Тогда

		Если РедактируемаяСтрока.Субсчета Тогда
			МассивСтрока = Новый Массив; 
			МассивСтрока.Добавить(Тип("Строка"));
			КвалификаторСтроки = Новый КвалификаторыСтроки(100);
			ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);


			РедактируемаяСтрока.РазворотПоСубконто.Колонки.Очистить();
			РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Имя",           ОписаниеТиповСтрока);
			РедактируемаяСтрока.РазворотПоСубконто.Колонки.Добавить("Представление", ОписаниеТиповСтрока);

			РедактируемаяСтрока.ПредставлениеРазворотПоСубконто = "";
		КонецЕсли;
		
	ИначеЕсли НРег(ТабличноеПоле.ТекущаяКолонка.Имя) = НРег("ПредставлениеРазворотПоСубконто") Тогда

		Если РедактируемаяСтрока.РазворотПоСубконто.Количество() > 0 Тогда
			РедактируемаяСтрока.СубСчета = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаОчисткиРазворотПоСубконто(ТабличноеПоле)

	Если ТабличноеПоле.ТекущаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущаяСтрока)];
	РедактируемаяСтрока.РазворотПоСубконто.Очистить();

КонецПроцедуры

Процедура ПравилаРазвернутогоСальдоПредставлениеРазворотПоСубконтоОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаОчисткиРазворотПоСубконто(Элемент);
	
КонецПроцедуры

Процедура ПравилаВыводаИтоговПредставлениеРазворотПоСубконтоОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаОчисткиРазворотПоСубконто(Элемент);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Связывание с данными колонок "Счет": тип определяется типом колонки у таблицы
	ЭлементыФормы.ПравилаВыводаИтогов.Колонки.Счет.Данные = "Счет";
	ЭлементыФормы.ПравилаВыводаИтогов.Колонки.Счет.ЭлементУправления.КнопкаВыбора = Истина;
	ЭлементыФормы.ПравилаВыводаИтогов.Колонки.Счет.ЭлементУправления.КнопкаОчистки = Ложь;
	
	ЭлементыФормы.ПравилаРазвернутогоСальдо.Колонки.Счет.Данные = "Счет";
	ЭлементыФормы.ПравилаРазвернутогоСальдо.Колонки.Счет.ЭлементУправления.КнопкаВыбора = Истина;
	ЭлементыФормы.ПравилаРазвернутогоСальдо.Колонки.Счет.ЭлементУправления.КнопкаОчистки = Ложь;
	
КонецПроцедуры

Процедура СписокСчетовСчетПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ЭлементыФормы.СписокСчетов.ТекущиеДанные.Представление = "";
	Иначе
		ЭлементыФормы.СписокСчетов.ТекущиеДанные.Представление = Элемент.Значение.Наименование;
	КонецЕсли;
КонецПроцедуры