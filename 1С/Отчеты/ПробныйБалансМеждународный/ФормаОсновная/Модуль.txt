Перем ВысотаЗаголовка;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПометкамиКнопокКоманднойПанели()
	
	Если ПоказыватьЗаголовок Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Истина;

	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Ложь;

	КонецЕсли;
	
КонецПроцедуры // УправлениеПометкамиКнопокКоманднойПанели()

// Обновляет таблицу отчета
//
// Параметры:
//	Нет.
//
Процедура ОбновитьОтчет() Экспорт
	
	СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);

	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;
	
	УправлениеПометкамиКнопокКоманднойПанели();
	
КонецПроцедуры // ОбновитьОтчет()

//  Управляет выводом заголовка
//
// Параметры:
//	Нет.
//
Процедура ВыводЗаголовка()

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ОбластьЗаголовка = СформироватьЗаголовок();
		ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
		ЭлементыФормы.ДокументРезультат.Вывести(ОбластьЗаголовка);
	КонецЕсли;


	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокКоманднойПанели();

КонецПроцедуры // ВыводЗаголовка()

// Формирует заголовок формы
//
// Параметры:
//	Нет.
//
Процедура СформироватьЗаголовокФормы()

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период не установлен";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе

			Если ДатаНач <= ДатаКон Тогда
				ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Заголовок = "Пробный баланс. " + Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Представление()+" (" + ОписаниеПериода + ") " + ?(Организация.Пустая(), "", Организация.ПолноеНаименование());

КонецПроцедуры // СформироватьЗаголовокФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(ДатаНач, ДатаКон);

	Если НП.Редактировать() Тогда

		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

Процедура КоманднаяПанельФормыНастройка(Кнопка)

	ФормаНастройка = ПолучитьФорму("ФормаНастройка", ЭтаФорма);
	
	Если ФормаНастройка.ОткрытьМодально() =  Истина Тогда

		ОбновитьОтчет();

	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыНастройка()

Процедура КоманднаяПанельФормыСформировать(Кнопка)

	ОбновитьОтчет();

КонецПроцедуры // КоманднаяПанельФормыСформировать()

Процедура КоманднаяПанельЗаголовок(Кнопка)

	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	ВыводЗаголовка();

КонецПроцедуры // КоманднаяПанельЗаголовок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриЗакрытии()

	СтруктураОбщихПараметров = Новый Структура;
	СтруктураОбщихПараметров.Вставить("Организация", Организация);
	СтруктураОбщихПараметров.Вставить("ВыводитьРазвернутроеСальдо", ВыводитьРазвернутоеСальдо);
	СтруктураОбщихПараметров.Вставить("ДатаНач", ДатаНач);
	СтруктураОбщихПараметров.Вставить("ДатаКон", ДатаКон);
	СтруктураОбщихПараметров.Вставить("ПоЗабалансовымСчетам", ПоЗабалансовымСчетам);
	СтруктураОбщихПараметров.Вставить("ПоВалютам", ПоВалютам);
	СтруктураОбщихПараметров.Вставить("ПоСубсчетамИСубконто", ПоСубсчетамИСубконто);
	СтруктураОбщихПараметров.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
	СтруктураОбщихПараметров.Вставить("ПравилаВыводаИтогов", ПравилаВыводаИтогов);
	СтруктураОбщихПараметров.Вставить("ПравилаРазвернутогоСальдо", ПравилаРазвернутогоСальдо);

	СохранитьЗначение("ОбщиеПараметрыОтчетов"+ИмяРегистраБухгалтерии, СтруктураОбщихПараметров);

КонецПроцедуры // ПриЗакрытии()

Процедура ОбновлениеОтображения()

	СформироватьЗаголовокФормы();

КонецПроцедуры // ОбновлениеОтображения()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	МассивТаблицаЗначений        = Новый Массив;
	МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);
	
	СтруктураОбщихПараметров = ВосстановитьЗначение("ОбщиеПараметрыОтчетов"+ИмяРегистраБухгалтерии);
	Если ТипЗнч(СтруктураОбщихПараметров) = Тип("Структура") Тогда
		
		СтруктураОбщихПараметров.Свойство("Организация", Организация);
		СтруктураОбщихПараметров.Свойство("ВыводитьРазвернутроеСальдо", ВыводитьРазвернутоеСальдо);
		СтруктураОбщихПараметров.Свойство("ПоСубсчетамИСубконто",    ПоСубсчетамИСубконто);
		СтруктураОбщихПараметров.Свойство("ПоЗабалансовымСчетам", ПоЗабалансовымСчетам);
		СтруктураОбщихПараметров.Свойство("ПоВалютам",      ПоВалютам);
		СтруктураОбщихПараметров.Свойство("ДатаНач", ДатаНач);
		СтруктураОбщихПараметров.Свойство("ДатаКон", ДатаКон);
		
		ЗаполнитьТаблицуПоСвойству("ПравилаВыводаИтогов",       СтруктураОбщихПараметров);
		ЗаполнитьТаблицуПоСвойству("ПравилаРазвернутогоСальдо", СтруктураОбщихПараметров);
		
	КонецЕсли;

	НП.УстановитьПериод(ДатаНач,ДатаКон);

	ПоказыватьЗаголовок = Истина;
	
	ВысотаЗаголовка = 0;

КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()
	
	ОбновитьОтчет();
	СформироватьЗаголовокФормы();

КонецПроцедуры // ПриОткрытии()

Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("СписокЗначений") Тогда
		Если Расшифровка.Количество() = 1 Тогда
			ВыбранноеЗначение = Расшифровка[0];
		Иначе
			ВыбранноеЗначение = Расшифровка.ВыбратьЭлемент("Выберите расшифровку",Расшифровка[0]);
		КонецЕсли;
		Если ВыбранноеЗначение <> Неопределено Тогда
			ВыбраннаяРасшифровка = ВыбранноеЗначение.Значение;
		Иначе
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура")
		ИЛИ ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		
		ВыбраннаяРасшифровка = Расшифровка;
	КонецЕсли;

	Если ТипЗнч(ВыбраннаяРасшифровка) = Тип("Структура") 
		ИЛИ ТипЗнч(ВыбраннаяРасшифровка) = Тип("Соответствие") Тогда

		// Добавим общую расшифровку из левого верхнего угла
		ОбщаяРасшифровка = Элемент.Область(1,1).Расшифровка;

		Если ТипЗнч(ОбщаяРасшифровка) = Тип("Структура") 
			ИЛИ ТипЗнч(ОбщаяРасшифровка) = Тип("Соответствие") Тогда

			Для Каждого Элемент Из ОбщаяРасшифровка Цикл
				ВыбраннаяРасшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		
		Отчет = Отчеты[ВыбраннаяРасшифровка["ИмяОбъекта"]].Создать();
		
		Отчет.Настроить(ВыбраннаяРасшифровка);
		
		ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
		
		ФормаОтчета.ПоказыватьЗаголовок = ПоказыватьЗаголовок;
		
		ФормаОтчета.ОбновитьОтчет();
	
		ФормаОтчета.Открыть();

	КонецЕсли;

КонецПроцедуры // ДокументРезультатОбработкаРасшифровки()

Процедура ПередСохранениемЗначений(Отказ)

	СохраняемыеРеквизиты = Новый Структура;

	СохраняемыеРеквизиты.Вставить("Организация", Организация);
	СохраняемыеРеквизиты.Вставить("ПоВалютам", ПоВалютам);
	СохраняемыеРеквизиты.Вставить("ПоЗабалансовымСчетам", ПоЗабалансовымСчетам);
	СохраняемыеРеквизиты.Вставить("ПоСубсчетамИСубконто", ПоСубсчетамИСубконто);
	СохраняемыеРеквизиты.Вставить("ВыводитьРазвернутоеСальдо", ВыводитьРазвернутоеСальдо);
	СохраняемыеРеквизиты.Вставить("ПравилаВыводаИтогов", ПравилаВыводаИтогов.Скопировать());
	СохраняемыеРеквизиты.Вставить("ПравилаРазвернутогоСальдо",  ПравилаРазвернутогоСальдо.Скопировать());

КонецПроцедуры // ПередСохранениемЗначений()

Процедура ПослеВосстановленияЗначений()

	СохраняемыеРеквизиты.Свойство("Организация", Организация);
	СохраняемыеРеквизиты.Свойство("ПоВалютам", ПоВалютам);
	СохраняемыеРеквизиты.Свойство("ПоЗабалансовымСчетам", ПоЗабалансовымСчетам);
	СохраняемыеРеквизиты.Свойство("ПоСубсчетамИСубконто", ПоСубсчетамИСубконто);
	СохраняемыеРеквизиты.Свойство("ВыводитьРазвернутоеСальдо", ВыводитьРазвернутоеСальдо);
	
	ЗаполнитьТаблицуПоСвойству("ПравилаВыводаИтогов",       СохраняемыеРеквизиты);
	ЗаполнитьТаблицуПоСвойству("ПравилаРазвернутогоСальдо", СохраняемыеРеквизиты);

КонецПроцедуры // ПослеВосстановленияЗначений()

Процедура ЗаполнитьТаблицуПоСвойству(ИмяРеквизита, Структура)
	
	Если Структура.Свойство(ИмяРеквизита) Тогда
		
		ЭтотОбъект[ИмяРеквизита].Очистить();
		
		// Загрузим совпадающие колонки.
		Для каждого СтрокаТаблицыИсточника Из Структура[ИмяРеквизита] Цикл
			
			СтрокаТаблицыПриемника = ЭтотОбъект[ИмяРеквизита].Добавить();
			
			Для каждого Колонка Из ЭтотОбъект[ИмяРеквизита].Колонки Цикл
				
				Если Структура[ИмяРеквизита].Колонки.Найти(Колонка.Имя) <> Неопределено Тогда
					СтрокаТаблицыПриемника[Колонка.Имя] = СтрокаТаблицыИсточника[Колонка.Имя];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуПоСвойству()