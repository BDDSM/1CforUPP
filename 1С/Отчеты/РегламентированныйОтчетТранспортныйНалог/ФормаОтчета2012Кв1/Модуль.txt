Перем ПолеТаблДокументаТитульный;
Перем ПолеТаблДокументаРаздел1;
Перем ПолеТаблДокументаРаздел2;

Перем ДополнительныеПараметрыФормы; // Структура для хранения дополнительных параметров формы

Перем СвойстваПоказателей; // Списки значений для выбора в полях отчета

Перем мСтруктураМногостраничныхРазделов Экспорт; // Хранит структуру многостраничных разделов
Перем мСтруктураМногострочныхРазделов Экспорт; // Хранят структуру многострочных разделов

Перем мСтруктураИсхКолвоСтрокРазделов;

// Хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц Экспорт;

// Хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата Экспорт;

// Для явной установки типа значения 17, 2 - менять нельзя!
Перем мОписаниеТиповЧислоЕ;
Перем мОписаниеТиповБулево;

// Ссылка на спрачоник налоговых органов, НО - для которого формируется деклараций.
Перем мСсылкаНО;

// Таблица для хранения настроек при вставки, удалении строк многострочных частей
Перем мТаблицаНастроекРежимаДляВставкиСтрок;

// Переменная для механизма обхода номеров страниц, при вводе показателей.
Перем мСтруктураВзаимныхПереходов Экспорт;

// Хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;
// Хранит код отчета по КНД
Перем мКодОтчета;
// Хранит версию формы отчета
Перем мСтараяВерсияФормы Экспорт;
// Хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски Экспорт;

Перем мКодыБюджетнойКлассификации2005;

Перем мКодыЛьгот;
Перем мВидыТранспортныхСредств;
Перем мКодыОКЕИ;
Перем мПоляПоискаПоказателяВТСП Экспорт;

// Переменные титульного листа, представитель.
Перем мПредставительФизЛицо Экспорт;
Перем мНазваниеПредставителя Экспорт;
Перем мДокументПредставителя Экспорт;
Перем мФамилияПредставителя Экспорт;
Перем мИмяПредставителя Экспорт;
Перем мОтчествоПредставителя Экспорт;

// Инициализируется при открытии формы
// используется в ЗаполнитьСведенияОбОрганизации
Перем мВПрограммеИзмененаОрганизация;

Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;

Перем мБезОткрытияФормы;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мСоставПоказателей Экспорт;

Перем мДокументВосстановлен;

Перем мРежимПечати;
Перем мИсключитьЗапускРасчета;

Перем мСтруктураПеременных;

Перем мДанныеОтчета Экспорт;
Перем ТаблицаСообщений Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
	ИДКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонф <> "ББУ" И ИДКонф <> "БГУ" Тогда
	
		КоманднаяПанель = ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
		
		КнопкаСтавки = КоманднаяПанель.Вставить(КоманднаяПанель.Индекс(КоманднаяПанель.Найти("Справка")),
												"РегистрацияТранспортныхСредств",
												ТипКнопкиКоманднойПанели.Действие,
												"Регистрация транспортных средств",
												Новый Действие("КнопкаРегистрацияТранспортныхСредствНажатие"));
												
		КнопкаСтавки.Подсказка = "Открыть журнал регистрации транспортных средств";
								 
		КоманднаяПанель.Вставить(КоманднаяПанель.Индекс(КоманднаяПанель.Найти("Справка")),
								 Новый УникальныйИдентификатор,
								  ТипКнопкиКоманднойПанели.Разделитель);
								  
	КонецЕсли;
		
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

Процедура ПриЗакрытии()

    СохранитьДеревоНастройкиСтраниц();

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	Расчет();
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)
	
	ПроверитьТочность();
	УстановитьФорматВывода();
	Расчет();
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	ЗаполнитьДатуПодписи();
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ФлажокОтклАвтоРасчетПриИзменении(Элемент)
	
	Если ФлажокОтклАвтоРасчет = Ложь Тогда
		Ответ = Вопрос("Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			ФлажокОтклАвтоРасчет = Истина;
			Возврат;
		КонецЕсли;
		Расчет();
	КонецЕсли;
	
	РегламентированнаяОтчетность.роИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ ФлажокОтклАвтоРасчет);
	УстановитьДоступностьОбластей();
	
КонецПроцедуры

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)
	
	УправлениеЭУВидДокументаНомерКорректировки();
	ОтобразитьНомерКорректировки();
	
КонецПроцедуры

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)
	
	ОтобразитьНомерКорректировки();
	
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	Перем ТекущаяОбласть;
	
	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе") > 0 Тогда
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИдГруппы <> Неопределено Тогда
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
			ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
		КонецЕсли;
		// управляем доступностью кнопок "Добавить" и "Удалить"
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда
		
		// управляем показом статика, отображающего номер текущей страницы
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		// управляем доступностью и выводом значений в поля отображения варианта заполнения ячеек
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;
	
	УстановитьДоступностьОбластей();
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Титульный лист.

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
КонецПроцедуры

// Раздел 1.

Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
КонецПроцедуры

// Раздел 2.

Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	ЗаполнитьАвто();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	ПоискВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)
	
	мВпрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВпрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)
	
	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДействийЗаписать(Кнопка)
	
	Сохранить();
	
КонецПроцедуры

// Раздел 1.

Процедура СобратьДанныеРаздел1(Элемент)
	
	Перем СтраницыРаздела1;
	Перем СтраницыРаздела2;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство("Раздел1", СтраницыРаздела1) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство("Раздел2", СтраницыРаздела2) Тогда
		Возврат;
	КонецЕсли;
	
	КБК = ПолеТаблДокументаРаздел1.Области.П000010001003.Значение;
	
	ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокументаРаздел1"]);
	
	Если СтраницыРаздела1.Количество() > 1 Тогда
		ИндексСтраницы = 0;
		Пока НЕ (ИндексСтраницы > (СтраницыРаздела1.Количество() - 1)) Цикл
			СтрокаТаблицы = СтраницыРаздела1[ИндексСтраницы];
			Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
				СтраницыРаздела1.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			ИндексСтраницы = ИндексСтраницы + 1;
		КонецЦикла;
	КонецЕсли;
	
	ПанельРаздела = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, "Раздел1", "НазваниеПанелиТабличногоПоляРаздела");
	Если ЭлементыФормы[ПанельРаздела].ТекущаяСтраница.Имя = "Раздел1" Тогда
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, "Раздел1");
	КонецЕсли;
	
	ПереченьОКАТО = Новый ТаблицаЗначений;
	ПереченьОКАТО.Колонки.Добавить("ОКАТО");
	
	Для Каждого СтраницаРаздела2 Из СтраницыРаздела2 Цикл
		ОбработкаВТабличномПоле = СтраницаРаздела2.АктивнаяСтраница;
		Если ОбработкаВТабличномПоле Тогда
			ОКАТО = ПолеТаблДокументаРаздел2.Области.П000020002003.Значение;
		Иначе
			ОКАТО = СтраницаРаздела2.Данные.П000020002003;
		КонецЕсли;
		
		Если ПустаяСтрока(ОКАТО) Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеОКАТО = ПереченьОКАТО.Добавить();
		НовоеОКАТО.ОКАТО = СокрЛП(ОКАТО);
	КонецЦикла;
	
	ПереченьОКАТО.Свернуть("ОКАТО");
	
	ПолеТаблДокументаРаздел1.Области.П000010001003.Значение = КБК;
	
	ПозицияВывода = 1;
	Для Каждого ЭлементОКАТО Из ПереченьОКАТО Цикл
		ОКАТО = ЭлементОКАТО.ОКАТО;
		
		Если ПозицияВывода > 3 Тогда
			ВставитьДополнительнуюСтраницу("Раздел1");
			ПолеТаблДокументаРаздел1.Области.П000010001003.Значение = КБК;
			ПозицияВывода = 1;
		КонецЕсли;
		
		ОбластьОКАТО = ПолеТаблДокументаРаздел1.Области["П000010002003_" + ПозицияВывода];
		ОбластьОКАТО.Значение = ОКАТО;
		
		ПозицияВывода = ПозицияВывода + 1;
	КонецЦикла;
	
	ПолныйРасчетРаздел1();
	
КонецПроцедуры

Процедура КнопкаПредыдущаяСтраницаРаздел1Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел1");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел1Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел1");
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел1Нажатие(Элемент)
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел1");
	
	КБК = ПолеТаблДокументаРаздел1.Области.П000010001003.Значение;
	ВставитьДополнительнуюСтраницу("Раздел1");
	ПолеТаблДокументаРаздел1.Области.П000010001003.Значение = КБК;
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел1Нажатие(Элемент)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, "Раздел1");
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел1");
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел1Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел1");
	
КонецПроцедуры

// Раздел 2.

Процедура КнопкаПредыдущаяСтраницаРаздел2Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(-1, "Раздел2");
	
КонецПроцедуры

Процедура КнопкаСледующаяСтраницаРаздел2Нажатие(Элемент)
	
	ПоказатьСтраницуМногостраничногоРаздела(1, "Раздел2");
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтраницуРаздел2Нажатие(Элемент)
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, "Раздел2");
	ВставитьДополнительнуюСтраницу("Раздел2");
	ОчиститьРасшифровкуВМногостраничнойСтруктуре();
	УстановитьДоступностьОбластей();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтраницуРаздел2Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роУдалитьДополнительнуюСтраницу(ЭтаФорма, "Раздел2");
	УстановитьДоступностьОбластей();
	
КонецПроцедуры

Процедура КнопкаПерейтиНаСтраницуРаздел2Нажатие(Элемент)
	
	РегламентированнаяОтчетность.роОткрытьФормуСпискаДопСтраниц(ЭтаФорма, "Раздел2");
	УстановитьДоступностьОбластей();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Очистить
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт
	
	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		ОчиститьРасшифровкуВМногостраничнойСтруктуре();
		ЗаполнитьДатуПодписи();
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	
	мБезОткрытияФормы = БезОткрытияФормы;
	
	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
		РегламентированнаяОтчетность.УдалитьКнопкуЗаполненияПоДаннымИБ(ЭтаФорма);
	КонецЕсли;
	
	ИнициализироватьПоляТабличныхДокументов();
	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	мСтараяВерсияФормы = мВерсияФормы;
	
	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	
	мАвтоВыборКодов = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
		ЗагрузитьПоказателиИзМакета("КодыКБК2005");
		ЗагрузитьПоказателиИзМакета("КодыЛьгот");
		ЗагрузитьПоказателиИзМакета("ВидыТранспортныхСредств");
		ЗагрузитьПоказателиИзМакета("КодыОКЕИ");
		// Установим маски на ввод только чисел.
		РегламентированнаяОтчетность.СтандратныеОперацииПоУстановкамМасок(ЭтаФорма);
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	// Вызов этой процедуры нельзя вставлять в блок БЕЗОткрытияФормы.
	РегламентированнаяОтчетность.роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);
	
	// для обновления листа о ФЛ, если Истина, то обновлять перезаписывать данные на листе
	мВПрограммеИзмененаОрганизация = Ложь;
	мДокументВосстановлен = Ложь;
	мРежимПечати = Ложь;
	мИсключитьЗапускРасчета = Ложь;
	
	Если мСохраненныйДок = Неопределено Тогда

		// создаем исходную структуру многострочных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл
				
				СтрокаГруппы = СтруктураГруппы.Добавить();
				
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					
					ИмяКолонки    = Колонка.Имя;
					
					КодПоказателя = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
					
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 0;
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Период", 2, "34");
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ПоМесту", 3, "260");
			
			// По умолчанию - выбраны все листы
			// при восстановлении - сохраненные ранее
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
			УстановитьФорматВывода();
			
			ПолеТаблДокументаРаздел1.Области.П000010001003.Значение = "18210604011021000110";
			
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел1", Ложь);
			РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);
		КонецЕсли;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
		ЗаполнитьДатуПодписи();
		// Сохраним все значения.
		РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	Иначе
		УправлениеЛистами();
	КонецЕсли;
	
	// устанавливаем раскраску ячеек, участвующих в автозаполнении
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		
		// Пропустим титульный лист, физлица, т.к. они не входят в систему автозаполнения
		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;
		
		// Если док-т восстановлен и многостраничный, то пропустим установку цветности, т.к. при восстановлении многостраничного раздела
		// цветность проставляется, чтобы дважды не выполнялся код, поставим ограничение
		Если (мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьЦветФонаЯчейки(,, НазваниеСтраницы);
		
	КонецЦикла;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		УстановитьДоступностьОбластей();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // Инициализация

Процедура ИнициализироватьПоляТабличныхДокументов()
	
	Макет = ЭтотОбъект.ПолучитьМакет("ФормаОтчета2012Кв1_Титульный");
	ПолеТаблДокументаТитульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	ПолеТаблДокументаТитульный.Очистить();
	ПолеТаблДокументаТитульный.Вывести(Макет);
	
	Макет = ЭтотОбъект.ПолучитьМакет("ФормаОтчета2012Кв1_Раздел1");
	ПолеТаблДокументаРаздел1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	ПолеТаблДокументаРаздел1.Очистить();
	ПолеТаблДокументаРаздел1.Вывести(Макет);
	
	Макет = ЭтотОбъект.ПолучитьМакет("ФормаОтчета2012Кв1_Раздел2");
	ПолеТаблДокументаРаздел2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	ПолеТаблДокументаРаздел2.Очистить();
	ПолеТаблДокументаРаздел2.Вывести(Макет);
	
	ИнициализироватьМаскиПолейВводаТабличныхДокументов();
	
КонецПроцедуры

Процедура ИнициализироватьМаскиПолейВводаТабличныхДокументов()
	
	// Маски полей ввода должны задаваться в программном коде для совместимости
	// с платформой версии 8.2.13 и более ранних.
	
	ПолеТаблДокументаТитульный.Области.ИННРеорганизованнойОрганизации.ЭлементУправления.Маска = "9999999999";
	ПолеТаблДокументаТитульный.Области.КППРеорганизованнойОрганизации.ЭлементУправления.Маска = "999999999";
	
	ПолеТаблДокументаТитульный.Области.СоставленаНа1.ЭлементУправления.Маска = "9";
	ПолеТаблДокументаТитульный.Области.СоставленаНа2.ЭлементУправления.Маска = "9";
	ПолеТаблДокументаТитульный.Области.СоставленаНа3.ЭлементУправления.Маска = "9";
	
	ПолеТаблДокументаТитульный.Области.Прил1.ЭлементУправления.Маска = "9";
	ПолеТаблДокументаТитульный.Области.Прил2.ЭлементУправления.Маска = "9";
	ПолеТаблДокументаТитульный.Области.Прил3.ЭлементУправления.Маска = "9";
	
	МаскаВводаОКАТО = "99999999999";
	
	ПолеТаблДокументаРаздел1.Области.П000010002003_1.ЭлементУправления.Маска = МаскаВводаОКАТО;
	ПолеТаблДокументаРаздел1.Области.П000010002003_2.ЭлементУправления.Маска = МаскаВводаОКАТО;
	ПолеТаблДокументаРаздел1.Области.П000010002003_3.ЭлементУправления.Маска = МаскаВводаОКАТО;
	
	ПолеТаблДокументаРаздел1.Области.НомСтр1_1.ЭлементУправления.Маска = "9";
	ПолеТаблДокументаРаздел1.Области.НомСтр1_2.ЭлементУправления.Маска = "9";
	ПолеТаблДокументаРаздел1.Области.НомСтр1_3.ЭлементУправления.Маска = "9";
	
	ПолеТаблДокументаРаздел2.Области.П000020002003.ЭлементУправления.Маска = МаскаВводаОКАТО;
	
	ПолеТаблДокументаРаздел2.Области.НомСтр1_1.ЭлементУправления.Маска = "9";
	ПолеТаблДокументаРаздел2.Области.НомСтр1_2.ЭлементУправления.Маска = "9";
	ПолеТаблДокументаРаздел2.Области.НомСтр1_3.ЭлементУправления.Маска = "9";
	
КонецПроцедуры

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)
	
	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКВЭД";
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		Для Инд = СтрДлина(ИНН) + 1 По 12 Цикл
			ИНН = ИНН + "-";
		КонецЦикла;
		
		ПроставитьНаВсехЛистах("ИНН1_", ИНН);
		
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Для Инд = СтрДлина(КПП) + 1 По 9 Цикл
			КПП = КПП + "-";
		КонецЦикла;
		ПроставитьНаВсехЛистах("КПП1_", КПП);
		
		// Заполняем код ИФНС.
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Для Инд = 1 По 4 Цикл
			ПолеТаблДокументаТитульный.Области["КодИМНС" + Инд].Значение = Сред(КодНО, Инд, 1);
		КонецЦикла;
		
		ПолеТаблДокументаТитульный.Области["ОКВЭД"].Значение = СокрЛП(СведенияОбОрганизации.ОКВЭД);
		
		ОбластьНаименованияОрганизации = ПолеТаблДокументаТитульный.Области.НаименованиеОрганизации;
		ОбластьНаименованияОрганизации.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		ОбластьТелефонаОрганизации = ПолеТаблДокументаТитульный.Области.ТелефонОрганизации;
		ОбластьТелефонаОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
	КонецЕсли;
	
	// заполняем сведения о подписантах
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Страница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	
	Если ОбластьИмя = "ОКВЭД" Тогда
		ЗначениеОКВЭД = Область.Значение;
		Если НЕ ПустаяСтрока(ЗначениеОКВЭД) И НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(ЗначениеОКВЭД) Тогда
			Сообщить("На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!", СтатусСообщения.Важное);
			Сообщить("Допустимы значения, соответствующие следующим шаблонам:", СтатусСообщения.Обычное);
			Сообщить("""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", СтатусСообщения.Обычное);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭтоПолеВводаКоличестваМесяцев = (ОбластьИмя = "П000020011003" ИЛИ ОбластьИмя = "П000020015003");
	Если ЭтоПолеВводаКоличестваМесяцев И Область.Значение > 12 Тогда
		Область.Значение = 12;
	КонецЕсли;
	
	ЭтоПолеОКАТО = ((Элемент = ПолеТаблДокументаРаздел1 И (ОбластьИмя = "П000010002003_1" ИЛИ ОбластьИмя = "П000010002003_2"  ИЛИ ОбластьИмя = "П000010002003_3"))
	            ИЛИ (Элемент = ПолеТаблДокументаРаздел2 И ОбластьИмя = "П000020002003"));
	Если ЭтоПолеОКАТО И ЗначениеЗаполнено(Область.Значение) Тогда
		ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
		Для Инд = ДлинаЗначения По 11 Цикл
			Область.Значение = СокрЛП(Область.Значение) + "0";
		КонецЦикла;
	КонецЕсли;
	
	Если (Найти(ОбластьИмя, "R") > 0) Или (Найти(ОбластьИмя, "C") > 0) Или (Найти(ОбластьИмя, "НомСтр") > 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если Страница = "Раздел1" Тогда
		Расчет("Раздел1");
	КонецЕсли;
	
	Если Страница = "Раздел2" Тогда
		Расчет();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	// преобразовываем, при необходимости, значение показателя к типу "Строка"
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// проставляем значение в табличные документы
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// проставляем значение в многостраничные разделы
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах()
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	НаименованиеДокументаПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП   = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	
	СведенияОПредставителе = РегламентированнаяОтчетность.ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			// Поле подписанта остается пустым.
		Иначе
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант                            = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		НаименованиеДокументаПредставителя   = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ПолеТаблДокументаТитульный.Области.ТипПодписанта.Значение                        = ТипПодписанта;
	ПолеТаблДокументаТитульный.Области.Подписант.Значение                            = Подписант;
	ПолеТаблДокументаТитульный.Области.НаименованиеОрганизацииПредставителя.Значение = НаименованиеОрганизацииПредставителя;
	ПолеТаблДокументаТитульный.Области.НаименованиеДокументаПредставителя.Значение   = НаименованиеДокументаПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ОбработкаВыбораИФНС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.Ссылка КАК Ссылка,
				   |	СправочникИФНС.КПП КАК КПП,
	               |	СправочникИФНС.Код КАК КодНО,
	               |	СправочникИФНС.Представитель КАК Представитель
	               |ИЗ
	               |	Справочник.РегистрацияВИФНС КАК СправочникИФНС
	               |ГДЕ
	               |	СправочникИФНС.Владелец = &Владелец
	               |	И СправочникИФНС.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодНО,
	               |	КПП";
	Запрос.УстановитьПараметр("Владелец", Организация);
	ТаблицаВыбора = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВыбора.Колонки.КПП.Ширина = 10;
	ТаблицаВыбора.Колонки.КодНО.Ширина = 7;
	ТаблицаВыбора.Колонки.КодНО.Заголовок = "ИФНС";
	ТаблицаВыбора.Колонки.Представитель.Ширина = 42;
	
	КодИМНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_"); 
	Отбор = Новый Структура("КодНО, КПП", КодИМНС, КПП);
	
	Ссылки = ТаблицаВыбора.ВыгрузитьКолонку("Ссылка");
	ТаблицаВыбора.Колонки.Удалить("Ссылка");
	
	Если ТаблицаВыбора.Количество() <> 0 Тогда
		//определение первоначального значеня
		Строки = ТаблицаВыбора.НайтиСтроки(Отбор);
		
		Если Строки.Количество() > 0 Тогда
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС", Строки[0]);
		Иначе
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС");
		КонецЕсли;
		
		Если РезультатВыбора <> Неопределено Тогда
			ВыбранныйКодНО = РезультатВыбора.КодНО;
			
			//доработка результата выбора
			ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
			Для Инд = ДлинаКодаНО + 1 По 4 Цикл
				ВыбранныйКодНО = "0" + ВыбранныйКодНО;
			КонецЦикла;
			
			//заполнение отчета данными выбора
			Для Инд = 1 По 4 Цикл
				ПолеТаблДокументаТитульный.Области["КодИМНС" + Инд].Значение = Сред(ВыбранныйКодНО, Инд, 1);
			КонецЦикла;

			ПроставитьНаВсехЛистах("КПП1_", РезультатВыбора.КПП);
			
			//заполняем сведения о подписантах
			ЗаполнитьСведенияОПодписантах();
			
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщить("Код налогового органа необходимо задать в справочнике ""Организации"".", СтатусСообщения.Информация);
	Иначе
		Сообщить("Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрация в ИФНС"".", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет(ДополнительныеПараметрыФормы.ИмяМакетаСписковЗначенийДляВыбора);
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор налогового периода", КоллекцияСписковВыбора["НалоговыеПериоды"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, , "Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["КодыФормыРеорганизации"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020003003", 5, , "Выбор вида транспортного средства", КоллекцияСписковВыбора["ВидыТранспортныхСредств"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020008003", 3, , "Выбор единицы измерения налоговой базы", КоллекцияСписковВыбора["КодыОКЕИ"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020009003", 1, , "Выбор экологического класса", КоллекцияСписковВыбора["КодыЭкологическихКлассов"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020017003_КодЛьготы", 5, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьготОсвобожденияОтНалогообложения"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020019003_КодЛьготы", 5, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьготУменьшенияСуммыНалога"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020021003_КодЛьготы", 5, , "Выбор льготы", КоллекцияСписковВыбора["КодыЛьготСниженияНалоговойСтавки"]);
	
КонецПроцедуры // СформироватьСпискиВыбора()

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ЗаполнитьДатуПодписи()
	
	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "));
	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, ""), Ложь);
	
КонецПроцедуры

Процедура ЗаполнениеЗначенийВКвадратиках(ИмяТекущейСтраницыПанели) Экспорт
	// Заглушка вызываемая из общего модуля РегламентированнаяОтчетность.
КонецПроцедуры

Процедура УстановитьДоступностьОбластей()
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	ЦветОбластиРучногоВвода = мСтруктураЦветовРаскраски["_0"];
	ЦветАвторасчитываемойОбласти = мСтруктураЦветовРаскраски["_4"];
	
	ОпределяющаяОбласть = ПолеТаблДокументаТитульный.Области.КодФормыРеорганизации;
	ОбрабатываемаяОбласть1 = ПолеТаблДокументаТитульный.Области.ИННРеорганизованнойОрганизации;
	ОбрабатываемаяОбласть2 = ПолеТаблДокументаТитульный.Области.КППРеорганизованнойОрганизации;
	Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
	 ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть1);
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть2);
	Иначе
		РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть1);
		РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть2);
	КонецЕсли;
	
	ОпределяющаяОбласть = ПолеТаблДокументаРаздел2.Области.П000020017003_КодЛьготы;
	ОбрабатываемаяОбласть = ПолеТаблДокументаРаздел2.Области.П000020017003_Основание;
	ОбрабатываемаяОбласть2 = ПолеТаблДокументаРаздел2.Области.П000020018003;
	Если ПустаяСтрока(ОпределяющаяОбласть.Значение)Тогда
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть);
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть2);
	ИначеЕсли ОпределяющаяОбласть.Значение = "30200" Тогда
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть);
		ОбрабатываемаяОбласть2.Защита   = Ложь;
		ОбрабатываемаяОбласть2.ЦветФона = ?(ФлажокОтклАвтоРасчет, ЦветОбластиРучногоВвода, ЦветАвторасчитываемойОбласти);
	Иначе
		РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть);
		УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
		
		ОбрабатываемаяОбласть2.Защита   = Ложь;
		ОбрабатываемаяОбласть2.ЦветФона = ?(ФлажокОтклАвтоРасчет, ЦветОбластиРучногоВвода, ЦветАвторасчитываемойОбласти);
	КонецЕсли;
	
	ОпределяющаяОбласть = ПолеТаблДокументаРаздел2.Области.П000020019003_КодЛьготы;
	ОбрабатываемаяОбласть = ПолеТаблДокументаРаздел2.Области.П000020019003_Основание;
	ОбрабатываемаяОбласть2 = ПолеТаблДокументаРаздел2.Области.П000020020003;
	Если ПустаяСтрока(ОпределяющаяОбласть.Значение) Тогда
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть);
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть2);
	Иначе
		РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть);
		РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть2);
		
		УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
	КонецЕсли;
	
	ОпределяющаяОбласть = ПолеТаблДокументаРаздел2.Области.П000020021003_КодЛьготы;
	ОбрабатываемаяОбласть = ПолеТаблДокументаРаздел2.Области.П000020021003_Основание;
	ОбрабатываемаяОбласть2 = ПолеТаблДокументаРаздел2.Области.П000020022003;
	Если ПустаяСтрока(ОпределяющаяОбласть.Значение) Тогда
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть);
		ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть2);
	Иначе
		РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть);
		РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть2);
		
		УстановитьОснованиеЛьготыПоУмолчанию(ОбрабатываемаяОбласть);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапретитьВводДанныхВОбласть(ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура РазрешитьВводДанныхВОбласть(ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

Процедура УстановитьОснованиеЛьготыПоУмолчанию(ОбластьОснованияЛьготы)
	Если ПустаяСтрока(ОбластьОснованияЛьготы.Значение) Тогда
		ОбластьОснованияЛьготы.Значение = "000000000000";
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;
	
	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы);
	КонецЦикла;
	
	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

Процедура ВывестиНаПечатьЛист(Параметры)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаТитульный", "МЧБ_2012Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел1",   "МЧБ_2012Кв1_Раздел1");
	СоответствиеРазделовМакетам.Вставить("ПолеТабличногоДокументаРаздел2",   "МЧБ_2012Кв1_Раздел2");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Параметры.ИмяТабличногоПоля];
	
	сохрТаблДок = ЭлементыФормы[Параметры.ИмяТабличногоПоля].ПолучитьОбласть();
	
	МакетМЧБ = ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 10;
	МакетМЧБ.ПолеСправа = 10;
	МакетМЧБ.ПолеСнизу  = 10;
	МакетМЧБ.ПолеСлева  = 10;
	
	ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ);
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	ЗаполнитьЗначенияСвойств(ВремПоля, ЭлементыФормы[Параметры.ИмяТабличногоПоля], СтрПоля);
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], МакетМЧБ, СтрПоля);
	
	ВывестиНаПечатьЛистРаздела(Параметры);
	
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[Параметры.ИмяТабличногоПоля].Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ЭлементыФормы[Параметры.ИмяТабличногоПоля], ВремПоля, СтрПоля);
	
КонецПроцедуры

Процедура ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ЭлементыФормы[Параметры.ИмяТабличногоПоля];
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	// Особая обработка ФИО на титульном листе.
	Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
		
		ПокПодписант = Показатели.Найти("Подписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Особая обработка ИНН.
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// Особая обработка ОКВЭД.
	Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ИмяТабличногоПоля = ПолеТаблДокументаРаздел2.Имя Тогда
		ЗаполнитьОсобыеЗначенияМЧБРаздел2(Показатели);
	КонецЕсли;
	
	СписокСтроковыхПоказателейДополняемыхПрочерком = "П000020007003_Цел, П000020007003_Дроб,
	                                                 |П000020012003_Цел, П000020012003_Дроб,
	                                                 |П000020013003_Цел, П000020013003_Дроб,
	                                                 |П000020016003_Цел, П000020016003_Дроб";
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						ДополнятьПрочерком = (ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") 
						                  ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение)
						                  ИЛИ Найти(СписокСтроковыхПоказателейДополняемыхПрочерком, ТекАдресЗначенияОбласти.Корень) > 0);
						ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ДополнятьПрочерком);
						ЗначениеВыведено = Истина;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					Сообщить("Не удалось заполнить область """ + ИмяОбласти + """!");
				КонецЕсли;
			Иначе
				Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
					ДополнятьПрочерком = (НЕ (Лев(РезультатПоиска.Имя, СтрДлина("НомСтр")) = "НомСтр"
					                  ИЛИ Лев(РезультатПоиска.Имя, СтрДлина("СоставленаНа")) = "СоставленаНа"));
				Иначе
					ДополнятьПрочерком = Лев(РезультатПоиска.Имя, СтрДлина("НомСтр")) <> "НомСтр";
				КонецЕсли;
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, , ДополнятьПрочерком);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОсобыеЗначенияМЧБРаздел2(ТаблицаПоказателей)
	
	ИмяПоказателя = "П000020007003";
	РазделитьДробныйПоказательДляБланкаМЧБ(ТаблицаПоказателей, ИмяПоказателя);
	
	ИмяПоказателя = "П000020012003";
	РазделитьДробныйПоказательДляБланкаМЧБ(ТаблицаПоказателей, ИмяПоказателя);
	
	ИмяПоказателя = "П000020013003";
	РазделитьДробныйПоказательДляБланкаМЧБ(ТаблицаПоказателей, ИмяПоказателя);
	
	ИмяПоказателя = "П000020016003";
	РазделитьДробныйПоказательДляБланкаМЧБ(ТаблицаПоказателей, ИмяПоказателя);
	
КонецПроцедуры

Процедура РазделитьДробныйПоказательДляБланкаМЧБ(ТаблицаПоказателей, ИмяПоказателя)
	
	СтрокаПоказателя = ТаблицаПоказателей.Найти(ИмяПоказателя, "Имя");
	ИсходноеЗначение = СтрокаПоказателя.Значение;
	
	ЦелаяЧасть = Цел(ИсходноеЗначение);
	ДробнаяЧасть = ИсходноеЗначение - ЦелаяЧасть;
	
	Если ЦелаяЧасть = 0 Тогда
		Если ДробнаяЧасть = 0 Тогда
			ПредставлениеЦелойЧасти = "";
		Иначе
			ПредставлениеЦелойЧасти = "0";
		КонецЕсли;
	Иначе
		ПредставлениеЦелойЧасти = Формат(ЦелаяЧасть, "ЧГ=0");
	КонецЕсли;
	
	Если ДробнаяЧасть = 0 Тогда
		Если ЦелаяЧасть = 0 Тогда
			ПредставлениеДробнойЧасти = "";
		Иначе
			ПредставлениеДробнойЧасти = "0";
		КонецЕсли;
	Иначе
		ПредставлениеДробнойЧасти = Сред(Формат(ДробнаяЧасть, "ЧГ=0"), 3);
	КонецЕсли;
	
	ПоказательЦелойЧасти = ТаблицаПоказателей.Добавить();
	ПоказательЦелойЧасти.Имя = ИмяПоказателя + "_Цел";
	ПоказательЦелойЧасти.Значение = ЦелаяЧасть;
	ПоказательЦелойЧасти.ЗначениеМЧБ = ПредставлениеЦелойЧасти;
	
	ПоказательДробойЧасти = ТаблицаПоказателей.Добавить();
	ПоказательДробойЧасти.Имя = ИмяПоказателя + "_Дроб";
	ПоказательДробойЧасти.Значение = ДробнаяЧасть;
	ПоказательДробойЧасти.ЗначениеМЧБ = ПредставлениеДробнойЧасти;
	
КонецПроцедуры

Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, Дополнять_ = Истина)
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=0");
	КонецЕсли;
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) И Дополнять_ Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста) Экспорт
	
	Состояние(Заголовок + ". Формирование печатной формы " + СтруктураПараметровЛиста.НаименованиеЛиста + "...");
	
	ПечатныеЛисты = Новый СписокЗначений;
	ПечатныеЛисты.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	мПечатныеФормы.Добавить(ПечатныеЛисты[0], СтруктураПараметровЛиста.НаименованиеЛиста);
	
КонецПроцедуры

Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;
	
	ТаблДок = ЭлементыФормы[СтруктураПараметровЛиста.ИмяТабличногоПоля];
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТаблДок, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТаблДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТаблДок.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=dd.MM.yyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	
	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = Найти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = Найти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	
	Возврат СтрокаФормата;
	
КонецФункции

Процедура ОчиститьРасшифровкуВМногостраничнойСтруктуре()
	
	ИндАкт = мСтруктураМногостраничныхРазделов.Раздел2.Найти(Истина, "АктивнаяСтраница");
	Инд = мСтруктураМногостраничныхРазделов.Раздел2.Индекс(ИндАкт);
	
	Если мСтруктураМногостраничныхРазделов.Раздел2[Инд].ДанныеДопСтрок = Неопределено Тогда
		РегламентированнаяОтчетность.роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Раздел2", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);


	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  мОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателеньДляВыгрузки",  мОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", мОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОКАТОРаздел1";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ОКАТОРаздел2";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателеньДляВыгрузки         = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	// Формируем настройки для спец-режима вставки строк
	мТаблицаНастроекРежимаДляВставкиСтрок = Новый ТаблицаЗначений;
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазделДекларации"        , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("мИдГруппы"               , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиХ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("РазмерПоОсиУ"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ДельтаСтрокаКонкатенации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницы"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НомерГраницыСтр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Для объед страниц

	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧасть"            , ОписаниеТиповСтрока254);
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьХ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУ"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ОсновнаяЧастьУСтр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));  // Для объед страниц

	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("ШиринаСтрокиМногострочнойЧасти"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3)); // Определяет, из скольких строк состоит строчка многострочного раздела
	мТаблицаНастроекРежимаДляВставкиСтрок.Колонки.Добавить("НазваниеМногострочнаяЧасть", ОписаниеТиповСтрока254); // Определяет, из скольких строк состоит строчка многострочного раздела

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура обнуляем переменные модуля, используемые для отображения в квадратиках
// в разделе 1
// запускается при добавлении новой страницы, а также при инициализации формы
//
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела) Экспорт

	Если Найти(ИмяРаздела, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницы = СтрЗаменить(ИмяРаздела, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницы = ИмяРаздела;
	КонецЕсли;

	Если ТипЗнч(мСтруктураПеременных) <> Тип("Структура") Тогда
		мСтруктураПеременных = Новый Структура;
	КонецЕсли;

	Если ИмяСтраницы = "Титульный" Тогда

		мПредставительФизЛицо = Неопределено;
		мНазваниеПредставителя = "";
		мДокументПредставителя = "";

		мФамилияПредставителя = "";
		мИмяПредставителя = "";
		мОтчествоПредставителя = "";

	ИначеЕсли ИмяСтраницы = "Раздел1" Тогда

		мСтруктураПеременных.Вставить("КБКРаздел1", "");
		мСтруктураПеременных.Вставить("ОКАТОРаздел1", "");
		мСтруктураПеременных.Вставить("Сумма30Раздел1", 0);
		мСтруктураПеременных.Вставить("Сумма40Раздел1", 0);
		мСтруктураПеременных.Вставить("Сумма50Раздел1", 0);
		мСтруктураПеременных.Вставить("Сумма60Раздел1", 0);

	ИначеЕсли ИмяСтраницы = "Раздел2" Тогда
		мСтруктураПеременных.Вставить("ОКАТОРаздел2", "");
	КонецЕсли;

КонецПроцедуры // ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// Окончание блока обязательных функций

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	Перем ТекТабличноеПоле;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ЕстьИзменения = Ложь;

	Для ПереборныйИнд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован Цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[ПереборныйИнд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",     ОписаниеТиповСтрока50  );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Скопировать();
					//Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.Найти(КодПоказателя, "КодПоказателя");
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();
                                     
	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если мДеревоСтраницОтчета.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл

		НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	Если мБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		Если ВариантЗаполнения = 4 Тогда
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
		КонецЕсли;
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				// Пропустим
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ОбновитьПеременныеМодуля
// Обновляет переменные модуля из переменных структур
// Вызывается при показе и листании доп. страниц
//
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	// Титульный лист
	//
	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли (ИмяПоказателя = "Сумма30Раздел1")
	 Или (ИмяПоказателя = "Сумма40Раздел1")
	 Или (ИмяПоказателя = "Сумма50Раздел1")
	 Или (ИмяПоказателя = "Сумма60Раздел1") Тогда
		мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
		мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
		мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел2" Тогда
		мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		ИзмененияПроизошли = Истина;

	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции // ОбновитьПеременныеМодуля

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;

		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	НомерМесяца   = Формат(мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(мДатаКонцаПериодаОтчета, "ДФ=гггг");

	ПолеТаблДокументаТитульный.Области.ОтчетГод1.Значение   = Сред(НомерГода, 1, 1);
	ПолеТаблДокументаТитульный.Области.ОтчетГод2.Значение   = Сред(НомерГода, 2, 1);
	ПолеТаблДокументаТитульный.Области.ОтчетГод3.Значение   = Сред(НомерГода, 3, 1);
	ПолеТаблДокументаТитульный.Области.ОтчетГод4.Значение   = Сред(НомерГода, 4, 1);

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	// Период в заголовке отчета
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";

КонецПроцедуры // ПоказатьПериод()

Процедура ЗаполнитьДатуВЯчейках() Экспорт
	
КонецПроцедуры

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(ЭтаФорма.Заголовок+": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// ПоказатьСтраницуМногостраничногоРаздела
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура ПоказатьСтраницуМногостраничногоРаздела(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	УстановитьДоступностьОбластей();
	
КонецПроцедуры

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		мСтрокаФормата          = "ЧЦ=17; ЧДЦ=" + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС=0";
		СтрокаФорматаНольЦифрой = "ЧЦ=17; ЧДЦ=" + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=0";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		мСтрокаФормата          = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС=3";
		СтрокаФорматаНольЦифрой = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		мСтрокаФормата          = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС=6";
		СтрокаФорматаНольЦифрой = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=; ЧС=6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = ?(ОтображатьНольКакЧисло(ИмяПоказателя), СтрокаФорматаНольЦифрой, мСтрокаФормата);
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе

				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.ТипЗначения = мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = ?(ОтображатьНольКакЧисло(ИмяПоказателя), СтрокаФорматаНольЦифрой, мСтрокаФормата);
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

Функция ОтображатьНольКакЧисло(ИмяПоказателя)
	
	Результат = Найти(ИмяПоказателя, "П000010002303") = 1
	        ИЛИ Найти(ИмяПоказателя, "П000010002503") = 1
	        ИЛИ Найти(ИмяПоказателя, "П000010002703") = 1;
	
	Возврат Результат;
	
КонецФункции

// Обновляет пользовательские настройки при изменении версии формы.
//
Процедура ОбновитьПользовательскиеНастройки()

	Сообщить("Изменилась версия формы отчета.
				|Выполняется обновление пользовательских настроек.", СтатусСообщения.Информация);

	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить("Обновление пользовательских настроек успешно завершено!");

	Иначе

		Сообщить("Изменения в структуре пользовательских настроек не обнаружены!");

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиОтчета.Открыта() Тогда
		ФормаНастройкиОтчета.Активизировать();
		Если Вопрос("Предыдущая операция выбора листов не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиОтчета.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;

	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// УправлениеЛистами
// Процедура раскрашивает ячейки листов, в зависимости от типов организаций.
// Запускается в ЗаполнитьСведенияОбОрганизации и при отрктыии всегда.
// Параметры:
//  ТипНП          - число, тип налогоплательщика, если не указано, то берется из ИБ.
//
Процедура УправлениеЛистами(ТипНП = Неопределено) Экспорт

	// Процедура "заглушка" для сохранения работающих механизмов.
	// Вызов осуществляется из роЗаполнитьСведенияОбОрганизации.
	Возврат;

КонецПроцедуры // УправлениеЛистами

// Функция определяет многострочный раздел табличного документа
// на заданном табличном поле.
//
// Параметры:
//  ТекТабличноеПоле - поле тбличного документа.
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле)
	Перем ИдГруппы;
	
	Возврат ИдГруппы;
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоТабличномуПолю()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт

	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	
	ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПоле);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.

		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];

				ИмяПервойКолонки = ПромТаблицаДопСтрокРаздела.Колонки[0].Имя;
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

				Если НСтр > 11 Тогда
					// Определим область удаляемой строки
					УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

					// непосредственно удаляем область строки табличного документа
					ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
				Иначе
					СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
				КонецЕсли;

				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если (ВыбТабличноеПоле.Имя <> "ПолеТабличногоДокументаФизЛица") Тогда
		//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (Найти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (Найти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;

	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", ""));

	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

		ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПоле.Имя, "ПолеТабличногоДокумента", "");
		Расчет(ИмяСтраницыПанели);

	КонецЕсли;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт
	
	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	
	мРежимПечати = Истина;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1);
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если СтрокаУровня1.Строки.Количество() > 0 Тогда
			
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2);
				
				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;
				
				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
						
						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;
						
						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",          ЧтоИскать);
						
						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛист(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",          ЧтоИскать);
				
				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛист(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",          ЧтоИскать);
		
		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛист(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;
	
	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	
	мРежимПечати = Ложь;
	
КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Перем ТаблицаСтраниц;
	
	Вариант = ВидДокумента * НомерКорректировки;

	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 	= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		// Многостраничность - не записываем в Показатели отчета !!!
		//
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя, ТаблицаСтраниц) Тогда
			ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", ФлажокОтклАвтоРасчет);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;

	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);

	СохранитьДеревоНастройкиСтраниц();

	КлючУникальности = мСохраненныйДок.Ссылка;

	Модифицированность = Ложь;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			мСтараяВерсияФормы = ВерсияФормы;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			ТаблПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

			// Если лист многостраничный, то всегда выведется текущий на момент сохранения блок многострочности
			// а в процедуре вывести активную страницу, выведутся оставшиеся данные.
			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

		КонецЦикла;
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;

		// Отображаем данные, хранящиеся в структуре многостраничных разделов
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			// 1 Нужно найти Активную страницу по индексу
			// и ей отобразить в табличном документе

			Если ЭлементСтруктуры.Ключ = "Раздел2" Тогда
				// В случае, если открытая декларация не содержит колонку 15 в структуре, тогда
				// добавим, для хранения ссылки.
				Для Каждого Стр Из ЭлементСтруктуры.Значение Цикл

					Если ТипЗнч(Стр.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						Если Стр.ДанныеДопСтрок.Колонки.Найти("П000020002015") = Неопределено Тогда
							Стр.ДанныеДопСтрок.Колонки.Добавить("П000020002015");
						КонецЕсли;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;

			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ);
		КонецЦикла;

	КонецЕсли;

	// восстанавливаем флажок ПодсчетаСтраниц       
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	Если мАвтоВыборКодов = Неопределено Тогда
		мАвтоВыборКодов = Ложь;
	КонецЕсли;

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				// Обрабатываем случай, когда старые данные открываются новой версией, где не предусмотрено
				// хранение данных многостраничных разделов в ПоказателяхОтчета, в этой процедуре ранее
				// данные многостраничных разделов уже были выведены в соответствующие листы
				Продолжить;
			КонецЕсли;

			Если ПредставлениеДанных Тогда
				Если ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	СписокСохранения.Свойство("Автозаполнение", ФлажокОтклАвтоРасчет);

	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

	УстановитьФорматВывода();

	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);

	Модифицированность = Ложь;

	мДокументВосстановлен = Истина;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

			Если НомИсходнойСтроки < 11 Тогда
				СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			Иначе

				// определяем вставляемую область
				ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

				// добавляем в таблицу новую строку
				ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

			КонецЕсли;

			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				Если ИмяКолонки = "П000020002015" Тогда
					Продолжить;
				КонецЕсли;

				ИмяОбластиЯчейки    = ИмяКолонки + "_" + Формат(НомИсходнойСтроки, "ЧГ=0");
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + Формат(НомНовойСтроки, "ЧГ=0");

				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядковый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0"+ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;

					ОбластьЯчейки.Текст  = Строка(НовыйПорядковыйНомер);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			Если КолонкаТаблицы.Имя = "П000020002015" Тогда
				Продолжить;
			КонецЕсли;

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Процедура создает(удаляет) таблицу значений, содержащий параметры
// автозаполнения показателей дополнительного листа многолистового раздела.
//
// Параметры:
//  Парам - число, принимает значение:
//           1 - при создании дополнительного листа;
//          -1 - при удалении дополнительного листа;
// Лист - имя листа, необходимо для интерактивного добавления
// если Лист - неопределно, то текущий берется, равносильно нажатию на кнопку Добавить или Удалить
//
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист = Неопределено)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Лист = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
		Иначе
		//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = Лист;
	КонецЕсли;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		Если СтрТаблицаСтраницы <> Неопределено Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ ФлажокОтклАвтоРасчет, мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = НоваяТаблицаВариантыЗаполнения.Скопировать();
			// Добавляем в массив таблицу значений, содержащей варианты заполнения
			// для добавленной страницы.
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ИзменитьТаблицуПараметровАвтозаполнения()

Процедура ВставитьДополнительнуюСтраницу(ИмяТекущейСтраницыПанели = Неопределено)
	
	РегламентированнаяОтчетность.роВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

// ЗаполнитьАвто
//
Процедура ЗаполнитьАвто()

	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Перед автозаполнением произойдет очистка отчета. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	// Очистим декларацию.
	РегламентированнаяОтчетность.роОчистить(ЭтаФорма, Ложь);
	РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
	Расчет("");
		
	// Получим ссылку на налоговый орган, для которого составляется отчетность.
	КодНО 		= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КодИМНС");
	КПП 		= РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	мСсылкаНО 	= РегламентированнаяОтчетность.ПолучитьПоКодамРегистрациюВИФНС(Организация, КодНО, КПП);
	
	// Массив для отбора по налоговому органу.
	МассивНО = Новый Массив;
	Если НЕ ЗначениеЗаполнено(мСсылкаНО) Тогда
		МассивНО.Добавить(Справочники.РегистрацияВИФНС.ПустаяСсылка());
	ИначеЕсли мСсылкаНО.Код = Организация.КодИМНС Тогда
		МассивНО.Добавить(Справочники.РегистрацияВИФНС.ПустаяСсылка());
		МассивНО.Добавить(мСсылкаНО);
	Иначе
		МассивНО.Добавить(мСсылкаНО);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НалоговыйОрган", МассивНО);
	
	ТекстОбъединяющегоЗапроса = "";
	
	Период = мДатаНачалаПериодаОтчета;
	
	Пока Период <= мДатаКонцаПериодаОтчета Цикл
		
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК КоличествоМесяцев,
		|	СписокОсновныхСредств.ОсновноеСредство КАК ОсновноеСредство,
		|	РегистрацияТранспортныхСредствСрезПоследних.РегистрационныйЗнак КАК РегистрационныйЗнак,
		|	РегистрацияТранспортныхСредствСрезПоследних.Марка КАК Марка,
		|	РегистрацияТранспортныхСредствСрезПоследних.ИдентификационныйНомер КАК ИдентификационныйНомер,
		|	ВЫБОР КОГДА РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган = ЗНАЧЕНИЕ(Справочник.РегистрацияВИФНС.ПустаяСсылка)
		|		ТОГДА РегистрацияТранспортныхСредствСрезПоследних.Организация.КодПоОКАТО
		|		ИНАЧЕ РегистрацияТранспортныхСредствСрезПоследних.КодПоОКАТО
		|	КОНЕЦ КодПоОКАТО,
		|	РегистрацияТранспортныхСредствСрезПоследних.КодВидаТранспортногоСредства КАК КодВидаТранспортногоСредства,
		|	РегистрацияТранспортныхСредствСрезПоследних.НалоговаяБаза КАК НалоговаяБаза,
		|	РегистрацияТранспортныхСредствСрезПоследних.ЕдиницаИзмеренияНалоговойБазы КАК ЕдиницаИзмеренияНалоговойБазы,
		|	РегистрацияТранспортныхСредствСрезПоследних.НалоговаяСтавка КАК НалоговаяСтавка,
		|	РегистрацияТранспортныхСредствСрезПоследних.НалоговаяЛьгота КАК НалоговаяЛьгота,
		|	РегистрацияТранспортныхСредствСрезПоследних.КодНалоговойЛьготы КАК КодНалоговойЛьготы,
		|	РегистрацияТранспортныхСредствСрезПоследних.РегиональныйКодЛьготы КАК РегиональныйКодЛьготы,
		|	РегистрацияТранспортныхСредствСрезПоследних.ЛьготнаяСтавка КАК ЛьготнаяСтавка,
		|	РегистрацияТранспортныхСредствСрезПоследних.ПроцентУменьшения КАК ПроцентУменьшения,
		|	РегистрацияТранспортныхСредствСрезПоследних.СуммаУменьшения КАК СуммаУменьшения,
		|	РегистрацияТранспортныхСредствСрезПоследних.ЭкологическийКласс КАК ЭкологическийКласс,
		|	РегистрацияТранспортныхСредствСрезПоследних.Период КАК ДатаРегистрации
		|ПОМЕСТИТЬ
		|	РегистрацияТранспортныхСредств" + Формат(Период, "ДФ=MM") + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|		СУММА(РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу) КАК ВключатьВНалоговуюБазу
		|	ИЗ
		|		(ВЫБРАТЬ
		|			РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|			ВЫБОР
		|				КОГДА РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ВключатьВНалоговуюБазу
		|		ИЗ
		|			РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, -1), МЕСЯЦ), Организация = &Организация) КАК РегистрацияТранспортныхСредствСрезПоследних
		|		ГДЕ
		|			РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган В (&НалоговыйОрган)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство,
		|			ВЫБОР
		|				КОГДА РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИЗ
		|			РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), Организация = &Организация) КАК РегистрацияТранспортныхСредствСрезПоследних
		|		ГДЕ
		|			РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган В (&НалоговыйОрган)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство,
		|			ВЫБОР
		|				КОГДА РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИЗ
		|			РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), Организация = &Организация 
		|                                                                                                          И ВключатьВНалоговуюБазу = ИСТИНА И Период >= НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)) КАК РегистрацияТранспортныхСредствСрезПоследних
		|		ГДЕ
		|			РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган В (&НалоговыйОрган)) КАК РегистрацияТранспортныхСредствСрезПоследних
		|		
		|	СГРУППИРОВАТЬ ПО
		|		РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство) КАК СписокОсновныхСредств
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), ВключатьВНалоговуюБазу = ИСТИНА И Организация = &Организация) КАК РегистрацияТранспортныхСредствСрезПоследних
		|		ПО СписокОсновныхСредств.ОсновноеСредство = РегистрацияТранспортныхСредствСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	СписокОсновныхСредств.ВключатьВНалоговуюБазу > 0
		|	И РегистрацияТранспортныхСредствСрезПоследних.НалоговыйОрган В (НалоговыйОрган)
		|";
		Запрос.Выполнить();
		
		ТекстОбъединяющегоЗапроса = ТекстОбъединяющегоЗапроса
								  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
									  "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
									  |",
									  "ОБЪЕДИНИТЬ ВСЕ
									  |ВЫБРАТЬ *
									  |")
								  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
									  "ПОМЕСТИТЬ РегистрацияТранспортныхСредств
									  |",
									  "")
								  + "ИЗ РегистрацияТранспортныхСредств" + Формат(Период, "ДФ=MM") + "
									|";
		
		Период = ДобавитьМесяц(Период, 1);	
		
	КонецЦикла;
	
	Запрос.Текст = ТекстОбъединяющегоЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(РегистрацияТранспортныхСредств.КоличествоМесяцев) КАК КоличествоМесяцев,
	|	РегистрацияТранспортныхСредств.ОсновноеСредство КАК ОсновноеСредство,
	|	РегистрацияТранспортныхСредств.РегистрационныйЗнак,
	|	РегистрацияТранспортныхСредств.Марка,
	|	РегистрацияТранспортныхСредств.ИдентификационныйНомер,
	|	РегистрацияТранспортныхСредств.КодПоОКАТО КАК КодПоОКАТО,
	|	РегистрацияТранспортныхСредств.КодВидаТранспортногоСредства,
	|	РегистрацияТранспортныхСредств.НалоговаяБаза,
	|	РегистрацияТранспортныхСредств.ЕдиницаИзмеренияНалоговойБазы,
	|	РегистрацияТранспортныхСредств.НалоговаяСтавка,
	|	РегистрацияТранспортныхСредств.НалоговаяЛьгота,
	|	РегистрацияТранспортныхСредств.КодНалоговойЛьготы,
	|	РегистрацияТранспортныхСредств.РегиональныйКодЛьготы,
	|	РегистрацияТранспортныхСредств.ЛьготнаяСтавка,
	|	РегистрацияТранспортныхСредств.ПроцентУменьшения,
	|	РегистрацияТранспортныхСредств.СуммаУменьшения,
	|	РегистрацияТранспортныхСредств.ЭкологическийКласс,
	|	МАКСИМУМ(РегистрацияТранспортныхСредств.ДатаРегистрации) КАК ДатаРегистрации
	|ИЗ
	|    РегистрацияТранспортныхСредств
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияТранспортныхСредств.ОсновноеСредство,
	|	РегистрацияТранспортныхСредств.РегистрационныйЗнак,
	|	РегистрацияТранспортныхСредств.Марка,
	|	РегистрацияТранспортныхСредств.ИдентификационныйНомер,
	|	РегистрацияТранспортныхСредств.КодПоОКАТО,
	|	РегистрацияТранспортныхСредств.КодВидаТранспортногоСредства,
	|	РегистрацияТранспортныхСредств.НалоговаяБаза,
	|	РегистрацияТранспортныхСредств.ЕдиницаИзмеренияНалоговойБазы,
	|	РегистрацияТранспортныхСредств.НалоговаяСтавка,
	|	РегистрацияТранспортныхСредств.НалоговаяЛьгота,
	|	РегистрацияТранспортныхСредств.КодНалоговойЛьготы,
	|	РегистрацияТранспортныхСредств.РегиональныйКодЛьготы,
	|	РегистрацияТранспортныхСредств.ЛьготнаяСтавка,
	|	РегистрацияТранспортныхСредств.ПроцентУменьшения,
	|	РегистрацияТранспортныхСредств.СуммаУменьшения,
	|	РегистрацияТранспортныхСредств.ЭкологическийКласс
	|ИТОГИ
	|	КОЛИЧЕСТВО(ОсновноеСредство)
	|ПО
	|	КодПоОКАТО";
	ВыборкаОКАТО = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОКАТО.Количество() = 0 Тогда
		
		Если НЕ ПустаяСтрока(КодНО) Тогда
		   
			ПредставлениеНалоговогоОргана = " Код ИФНС:" + СокрЛП(КодНО) + " ";
				
		Иначе
			
			ПредставлениеНалоговогоОргана = "";
		   
		КонецЕсли;
		
		ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
		Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
			
			Если ГлавныйИнтерфейс.Полный.Видимость Тогда
				ПутьКРегистру = "(меню ""Справочники"" - ""Внеоборотные активы"" - ""Регистрация транспортных средств"")";
			ИначеЕсли ГлавныйИнтерфейс.БухгалтерскийИНалоговыйУчет.Видимость Тогда
				ПутьКРегистру = "(меню ""Справочники"" - ""Основные средства и нематериальные активы"" - ""Регистрация транспортных средств"")";
			ИначеЕсли ГлавныйИнтерфейс.УправлениеОборудованием.Видимость Тогда
				ПутьКРегистру = "(меню ""Основные средства"" - ""Регистрация транспортных средств"")";
			Иначе
				ПутьКРегистру = "(меню ""Операции"" - ""Регистры сведений..."" - ""Регистрация транспортных средств"")";
			КонецЕсли;
			
		Иначе
			ПутьКРегистру = "(меню ""ОС"" - ""Регистрация транспортных средств"")";
		КонецЕсли;
		
		Сообщить("Отсутствуют данные о регистрации транспортных средств на " + ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина") + " для " + Организация + ПредставлениеНалоговогоОргана + "
				 |" + ПутьКРегистру + ".");
				 
		Возврат;		
		
	КонецЕсли;
	
	ПервыйПроход = Истина;

	Пока ВыборкаОКАТО.Следующий() Цикл
		ВыборкаТранспортныхСредств = ВыборкаОКАТО.Выбрать();
		Пока ВыборкаТранспортныхСредств.Следующий() Цикл
			Если НЕ ПервыйПроход Тогда
				ВставитьДополнительнуюСтраницу("Раздел2");
			Иначе
				ПервыйПроход = Ложь;
			КонецЕсли;

			СтраницаРаздел2 = мСтруктураМногостраничныхРазделов.Раздел2[мСтруктураМногостраничныхРазделов.Раздел2.Количество()-1].Данные;
			ДатаВыпуска = ВыборкаТранспортныхСредств.ОсновноеСредство.ДатаВыпуска;
			
			ПолеТаблДокументаРаздел2.Области.П000020002003.Значение = ВыборкаТранспортныхСредств.КодПоОКАТО;
			ПолеТаблДокументаРаздел2.Области.П000020003003.Значение = ВыборкаТранспортныхСредств.КодВидаТранспортногоСредства;
			ПолеТаблДокументаРаздел2.Области.П000020004003.Значение = ВыборкаТранспортныхСредств.ИдентификационныйНомер;
			ПолеТаблДокументаРаздел2.Области.П000020005003.Значение = ВыборкаТранспортныхСредств.Марка;
			ПолеТаблДокументаРаздел2.Области.П000020006003.Значение = ВыборкаТранспортныхСредств.РегистрационныйЗнак;
			ПолеТаблДокументаРаздел2.Области.П000020007003.Значение = ВыборкаТранспортныхСредств.НалоговаяБаза;
			ПолеТаблДокументаРаздел2.Области.П000020008003.Значение = ВыборкаТранспортныхСредств.ЕдиницаИзмеренияНалоговойБазы;
			ПолеТаблДокументаРаздел2.Области.П000020009003.Значение = ВыборкаТранспортныхСредств.ЭкологическийКласс;
			ПолеТаблДокументаРаздел2.Области.П000020010003.Значение = ?(ЗначениеЗаполнено(ДатаВыпуска),Год(мДатаКонцаПериодаОтчета) - Год(ДатаВыпуска),"");
			ПолеТаблДокументаРаздел2.Области.П000020011003.Значение = ВыборкаТранспортныхСредств.КоличествоМесяцев;
			ПолеТаблДокументаРаздел2.Области.П000020013003.Значение = ВыборкаТранспортныхСредств.НалоговаяСтавка;
			
			НалоговаяЛьгота = ВыборкаТранспортныхСредств.НалоговаяЛьгота;
			
			Если НалоговаяЛьгота <> Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется Тогда 
				ПолеТаблДокументаРаздел2.Области.П000020015003.Значение = ВыборкаТранспортныхСредств.КоличествоМесяцев;
			КонецЕсли;
			
			ПолеТаблДокументаРаздел2.Области.П000020018003.Значение = 0;
			ПолеТаблДокументаРаздел2.Области.П000020020003.Значение = 0;
			ПолеТаблДокументаРаздел2.Области.П000020022003.Значение = 0;
			ПолеТаблДокументаРаздел2.Области.П000020017003_КодЛьготы.Значение = "";
			ПолеТаблДокументаРаздел2.Области.П000020017003_Основание.Значение = "";
			ПолеТаблДокументаРаздел2.Области.П000020019003_КодЛьготы.Значение = "";
			ПолеТаблДокументаРаздел2.Области.П000020019003_Основание.Значение = "";
			ПолеТаблДокументаРаздел2.Области.П000020021003_КодЛьготы.Значение = "";
			ПолеТаблДокументаРаздел2.Области.П000020021003_Основание.Значение = "";
			
			Если НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах Тогда 
				ПолеТаблДокументаРаздел2.Области.П000020019003_КодЛьготы.Значение = ВыборкаТранспортныхСредств.КодНалоговойЛьготы;
				ПолеТаблДокументаРаздел2.Области.П000020019003_Основание.Значение = ВыборкаТранспортныхСредств.РегиональныйКодЛьготы;
				Если ВыборкаТранспортныхСредств.ПроцентУменьшения > 0 И ВыборкаТранспортныхСредств.ПроцентУменьшения < 100 Тогда 
					СуммаЛьготы = ВыборкаТранспортныхСредств.ПроцентУменьшения * ВыборкаТранспортныхСредств.КоличествоМесяцев * ВыборкаТранспортныхСредств.НалоговаяБаза * ВыборкаТранспортныхСредств.НалоговаяСтавка / (12*100); 
					ПолеТаблДокументаРаздел2.Области.П000020022003.Значение = СуммаЛьготы;
				КонецЕсли;
			ИначеЕсли НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму Тогда
				ПолеТаблДокументаРаздел2.Области.П000020019003_КодЛьготы.Значение = ВыборкаТранспортныхСредств.КодНалоговойЛьготы;
				ПолеТаблДокументаРаздел2.Области.П000020019003_Основание.Значение = ВыборкаТранспортныхСредств.РегиональныйКодЛьготы;
				ПолеТаблДокументаРаздел2.Области.П000020020003.Значение = ВыборкаТранспортныхСредств.СуммаУменьшения;
			ИначеЕсли НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения Тогда 
				ПолеТаблДокументаРаздел2.Области.П000020017003_КодЛьготы.Значение = ВыборкаТранспортныхСредств.КодНалоговойЛьготы;
				ПолеТаблДокументаРаздел2.Области.П000020017003_Основание.Значение = ВыборкаТранспортныхСредств.РегиональныйКодЛьготы;
			ИначеЕсли НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки Тогда 
				ПолеТаблДокументаРаздел2.Области.П000020021003_КодЛьготы.Значение = ВыборкаТранспортныхСредств.КодНалоговойЛьготы;
				ПолеТаблДокументаРаздел2.Области.П000020021003_Основание.Значение = ВыборкаТранспортныхСредств.РегиональныйКодЛьготы;
				Если ВыборкаТранспортныхСредств.ЛьготнаяСтавка < ВыборкаТранспортныхСредств.НалоговаяСтавка Тогда 
					СуммаЛьготы = (ВыборкаТранспортныхСредств.НалоговаяСтавка - ВыборкаТранспортныхСредств.ЛьготнаяСтавка) * ВыборкаТранспортныхСредств.КоличествоМесяцев * ВыборкаТранспортныхСредств.НалоговаяБаза / 12; 
					ПолеТаблДокументаРаздел2.Области.П000020022003.Значение = СуммаЛьготы;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьДоступностьОбластей();
	Расчет("");
	
КонецПроцедуры // ЗаполнитьАвто

// ЗаполнитьТекстПроДокументы
// Временная процедура. Добавлена для совместимости с док-тами регистрации данных.
//
Процедура ЗаполнитьТекстПроДокументы() Экспорт
	Возврат;
	// Временная процедура-заглушка. Добавлена для совместимости с док-тами регистрации данных.
КонецПроцедуры // ЗаполнитьТекстПроДокументы

// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
//
// Параметры:
//     ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы, для которой необходимо
//         произвести расчет, если не указана, то расчет будет выполнен для всех разделов декларации.
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "", НомерСтроки = Неопределено) Экспорт
	
	Если ФлажокОтклАвтоРасчет Или мРежимПечати Или мИсключитьЗапускРасчета Тогда
		Возврат; // автрасчет отключен или не требуется
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		
		РасчетРаздел1(ПолеТаблДокументаРаздел1);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		РасчетРаздел2(ПолеТаблДокументаРаздел2);
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "" Тогда
		
		ПолныйРасчетРаздел2();
		ПолныйРасчетРаздел1();
		
	КонецЕсли;
	
КонецПроцедуры // Расчет()

Процедура ПолныйРасчетРаздел1()
	
	СтруктураРаздела = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1", СтруктураРаздела);
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		ОбработкаВТабличномПоле = СтраницаРаздела.АктивнаяСтраница;
		Если ОбработкаВТабличномПоле Тогда
			РазмещениеДанных = ПолеТаблДокументаРаздел1;
		Иначе
			РазмещениеДанных = СтраницаРаздела.Данные;
		КонецЕсли;
		РасчетРаздел1(РазмещениеДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолныйРасчетРаздел2()
	
	СтруктураРаздела = Неопределено;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел2", СтруктураРаздела);
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		ОбработкаВТабличномПоле = СтраницаРаздела.АктивнаяСтраница;
		Если ОбработкаВТабличномПоле Тогда
			РазмещениеДанных = ПолеТаблДокументаРаздел2;
		Иначе
			РазмещениеДанных = СтраницаРаздела.Данные;
		КонецЕсли;
		РасчетРаздел2(РазмещениеДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетРаздел1(МестоРазмещенияДанных)
	
	КоличествоСходныхБлоковНаЛисте = 3;
	
	Для Инд = 1 По КоличествоСходныхБлоковНаЛисте Цикл
		ПостфиксИмениОбласти = "_" + Формат(Инд, "ЧГ=0");
		
		Строка020 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002003" + ПостфиксИмениОбласти); // ОКАТО
		
		Если Не ПустаяСтрока(Строка020) Тогда
			УсловиеСуммирования = Новый Структура;
			УсловиеСуммирования.Вставить("П000020002003", Строка020);
			ЗначениеСтроки021 = СуммаПоказателяРазделаПоСтраницам("Раздел2", "П000020023003", УсловиеСуммирования);
		Иначе
			ЗначениеСтроки021 = 0;
		КонецЕсли;
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000010002103" + ПостфиксИмениОбласти, ЗначениеСтроки021);
		
		Строка021 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002103" + ПостфиксИмениОбласти);
		Строка023 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002303" + ПостфиксИмениОбласти);
		Строка025 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002503" + ПостфиксИмениОбласти);
		Строка027 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000010002703" + ПостфиксИмениОбласти);
		
		СуммаНалога = Строка021 - Строка023 - Строка025 - Строка027;
		
		ЗначениеСтроки30 = Макс(0, СуммаНалога);
		ЗначениеСтроки40 = -Мин(0, СуммаНалога);
		
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000010003003" + ПостфиксИмениОбласти, ЗначениеСтроки30);
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000010004003" + ПостфиксИмениОбласти, ЗначениеСтроки40);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчетРаздел2(МестоРазмещенияДанных)
	
	ЗначениеСтроки110 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020011003");
	
	ЗначениеДляСтроки120 = ЗначениеСтроки110/12;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020012003", ЗначениеДляСтроки120);
	
	ЗначениеСтроки070 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020007003");
	ЗначениеСтроки130 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020013003");
	ЗначениеСтроки120 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020012003");
	
	ЗначениеДляСтроки140 = ЗначениеСтроки070 * ЗначениеСтроки130 * ЗначениеСтроки120;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020014003", ЗначениеДляСтроки140);
	
	ЗначениеСтроки150 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020015003");
	
	ЗначениеДляСтроки160 = ЗначениеСтроки150/12;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020016003", ЗначениеДляСтроки160);
	
	КодЛьготыВСтроке170 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020017003_КодЛьготы");
	Если Не ПустаяСтрока(КодЛьготыВСтроке170) Тогда
		ЗначениеДляСтроки180 = ЗначениеСтроки070 * ЗначениеСтроки130 * ЗначениеСтроки120;
		ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020018003", ЗначениеДляСтроки180);
	КонецЕсли;
	
	ЗначениеСтроки140 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020014003");
	ЗначениеСтроки180 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020018003");
	ЗначениеСтроки200 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020020003");
	ЗначениеСтроки220 = ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, "П000020022003");
	
	Если ЗначениеСтроки180 <> 0 Тогда
		ЗначениеДляСтроки230 = ЗначениеСтроки140 - ЗначениеСтроки180;
	Иначе
		ЗначениеДляСтроки230 = ЗначениеСтроки140 - ЗначениеСтроки200 - ЗначениеСтроки220;
	КонецЕсли;
	ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, "П000020023003", ЗначениеДляСтроки230);
	
КонецПроцедуры

Функция ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, АдресДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		ЗначениеВСтруктуре = Неопределено;
		Если МестоРазмещенияДанных.Свойство(АдресДанных, ЗначениеВСтруктуре) Тогда
			Возврат ЗначениеВСтруктуре;
		Иначе
			ВызватьИсключение "Невозможно получить данные из структуры: поле " + АдресДанных + " не существует";
		КонецЕсли;
	Иначе
		// Это должны быть данные в поле табличного документа.
		Возврат МестоРазмещенияДанных.Области[АдресДанных].Значение;
	КонецЕсли;
	
КонецФункции

Процедура ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, АдресДанных, ЗначениеДанных)
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		МестоРазмещенияДанных.Вставить(АдресДанных, ЗначениеДанных);
	Иначе
		МестоРазмещенияДанных.Области[АдресДанных].Значение = ЗначениеДанных;
	КонецЕсли;
	
КонецПроцедуры

Функция СуммаПоказателяРазделаПоСтраницам(ИмяРаздела, ИмяПоказателя, Условия = Неопределено)
	
	СтруктураРаздела = Неопределено;
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, СтруктураРаздела) Тогда
		ВызватьИсключение "Раздел """ + ИмяРаздела + """ не существует в описании структуры многостраничных разделов";
	КонецЕсли;
	
	Результат = 0;
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		
		РазмещениеВТабличномПоле = СтраницаРаздела.АктивнаяСтраница;
		Если РазмещениеВТабличномПоле Тогда
			РазмещениеДанных = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
		Иначе
			РазмещениеДанных = СтраницаРаздела.Данные;
		КонецЕсли;
		
		ЗначениеПоказателя = ПолучитьДанныеИзМестаРазмещения(РазмещениеДанных, ИмяПоказателя);
		
		Если ТипЗнч(Условия) = Тип("Структура") Тогда
			Для Каждого ЭлементСтруктуры ИЗ Условия Цикл
				ИмяПоказателяУсловия = ЭлементСтруктуры.Ключ;
				ЗначениеПоказателяУсловия = ПолучитьДанныеИзМестаРазмещения(РазмещениеДанных, ИмяПоказателяУсловия);
				Если ЗначениеПоказателяУсловия <> ЭлементСтруктуры.Значение Тогда
					ЗначениеПоказателя = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат = Результат + ЗначениеПоказателя;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Обработчик нажатия на кнопку "Регистрация транспортных средств".
// Открывает форму списка регистра сведений "Регистрация транспортных средств".
//
Процедура КнопкаРегистрацияТранспортныхСредствНажатие(Элемент)
	
	Форма = РегистрыСведений.РегистрацияТранспортныхСредств.ПолучитьФормуСписка();
	Форма.Организация = Организация;
	Форма.РегистрСведенийСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
	Форма.РегистрСведенийСписок.Отбор.Организация.Значение      = Организация;
	Форма.РегистрСведенийСписок.Отбор.Организация.Использование = Истина;	
	Форма.Открыть();
	
КонецПроцедуры // КнопкаРегистрацияТранспортныхСредствНажатие() 

Процедура СохранитьДеревоНастройкиСтраниц()
	
	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
Конецпроцедуры

Процедура ПоискВРегламентированномОтчете(Форма) Экспорт
	
	ФормаПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиПоиска", Форма);
	ЧтоИскать = ФормаПоиска.ОткрытьМодально();
	Если ЧтоИскать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мРезультатПоиска = Новый ТаблицаЗначений;
	мРезультатПоиска.Колонки.Добавить("Раздел");
	мРезультатПоиска.Колонки.Добавить("Страница");
	мРезультатПоиска.Колонки.Добавить("НаименованиеЛиста");
	мРезультатПоиска.Колонки.Добавить("ИмяЯчейки");
	мРезультатПоиска.Колонки.Добавить("СтрокаПП");
	мРезультатПоиска.Колонки.Добавить("НайденоВСтроке");
	
	мСчетчикиСтраницПриПоиске = Новый ТаблицаЗначений;
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("ИмяТабличногоПоля");
	мСчетчикиСтраницПриПоиске.Колонки.Добавить("Счетчик");
	
	ПечатьЧерновика("", ЧтоИскать);
	
	Состояние("Поиск завершен.");
	Если мРезультатПоиска.Количество() = 0 Тогда
		Предупреждение("По Вашему запросу ничего не найдено!");
		Возврат;
	КонецЕсли;
	
	ФормаРезультатыПоиска = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("РезультатыПоиска", Форма);
	Если ФормаРезультатыПоиска.Открыта() Тогда
		ФормаРезультатыПоиска.Закрыть();
	КонецЕсли;
	ФормаРезультатыПоиска.Заголовок = Заголовок + " - результаты поиска значения [" + ЧтоИскать.ИскомоеЗначение + "]";
	ФормаРезультатыПоиска.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаРезультатыПоиска.ЭлементыФормы.РезультатыПоиска.Значение = мРезультатПоиска.Скопировать();
	ФормаРезультатыПоиска.НадписьНайдено = "Найдено: " + Формат(мРезультатПоиска.Количество(), "ЧГ=");
	ФормаРезультатыПоиска.Открыть();
	
КонецПроцедуры

Процедура ПечатьЧерновика(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	мРежимПечати = Истина;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1, ЧтоИскать);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2, ЧтоИскать);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3, ЧтоИскать);
						Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

						Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
							ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
						Иначе
							// выводим на печать все созданные страницы многостраничного раздела
							СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
							ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
						КонецЕсли;
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

				Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
					ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
				Иначе
					// выводим на печать все созданные страницы многостраничного раздела
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
					ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 И ЧтоИскать = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",	       ЧтоИскать);

		Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели) Тогда
			ВывестиНаПечатьЛистЧерновика(СтруктураПараметров);
		Иначе
			// выводим на печать все созданные страницы многостраничного раздела
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", ИмяСтраницыПанели);
			ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	мРежимПечати = Ложь;

КонецПроцедуры

Процедура ВывестиНаПечатьЛистЧерновика(Парам1)
	
	Если Парам1.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, Парам1);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, Парам1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНаПечатьДополнительныеСтраницыЧерновика(СтруктураПараметровСтраницы)
	Перем ИмяСтраницы; // имя страницы основной панели формы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	АктивнаяСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если АктивнаяСтраницаРаздела = Неопределено Тогда
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
		Возврат;
	КонецЕсли;

	ИсходныйИндекс = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаРаздела);

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ПоказатьСтраницуМногостраничногоРаздела(ТекущийИндекс, ИмяСтраницы, Истина);
		ВывестиНаПечатьЛистЧерновика(СтруктураПараметровСтраницы);
	КонецЦикла;

	// вывод в форму данных исходной (активной) страницы
	ПоказатьСтраницуМногостраничногоРаздела(ИсходныйИндекс, ИмяСтраницы, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)// Не является ошибкой проверки конфигурации
	
	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ

Процедура ОтобразитьНомерКорректировки()
	
	НомерКорр = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	Для Инд = 1 По 3 Цикл
		ПолеТаблДокументаТитульный.Области["НомерКорректировки" + Инд].Значение = ?(Инд > СтрДлинаНомерКорректировкиСтрока, "-", Сред(НомерКорректировкиСтрока, Инд, 1));
	КонецЦикла;
	
Конецпроцедуры

Процедура УправлениеЭУВидДокументаНомерКорректировки()
	
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	
КонецПроцедуры

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// загружает данные стандартные данные из Макет.Списки
//
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	МакетСоставаПоказателей = ПолучитьМакет("Списки2007Кв1");
	
	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);
	
	Если ТекОбласть <> Неопределено Тогда
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе
				
				Если РазделВМакете = "КодыКБК2005" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2005.Добавить();
				ИначеЕсли РазделВМакете = "КодыЛьгот" Тогда
					НовСтрока = мКодыЛьгот.Добавить();
				ИначеЕсли РазделВМакете = "ВидыТранспортныхСредств" Тогда
					НовСтрока = мВидыТранспортныхСредств.Добавить();
				ИначеЕсли РазделВМакете = "КодыОКЕИ" Тогда
					НовСтрока = мКодыОКЕИ.Добавить();
				КонецЕсли;
				
				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьПоказателиИзМакета

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки()

	МакетСоставаПоказателей = ПолучитьМакет(мСоставПоказателей);

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            мОписаниеТиповЧислоЕ   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// Код показателя по структуре определяется по колонке 9 макета
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// СпециальногоУдаленияСтроки
// Процедура предназначена для удаления строки с сохранением правой части табличного документа.
// Параметры:
//  ТекТабличноеПоле - поле табл. документа, где необходимо удалить доп. строку
//  ИмяГруппы        - имя группы доп. строк.
//  НомерВерхЯчейкиОбласти - номер верхней ячейки области.
//  НомерНижнЯчейкиОбласти - номер нижней ячейки области.
//
Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	//верх //лево         //низ   //.право
	Ч1Верх  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Верх;
	Ч1Лево  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Лево;
	Ч1Низ   = ТекТабличноеПоле.Области.ПравоеПрисоединение.Низ;
	Ч1Право = ТекТабличноеПоле.Области.ПравоеПрисоединение.Право;

	// Сохраним координаты многострочной части, для последующего восстановления.
	Ч1ВерхСтраница  = ТекТабличноеПоле.Области.Страница.Верх;
	Ч1ЛевоСтраница  = ТекТабличноеПоле.Области.Страница.Лево;
	Ч1НизСтраница   = ТекТабличноеПоле.Области.Страница.Низ;
	Ч1ПравоСтраница = ТекТабличноеПоле.Области.Страница.Право;

	// Сохраним координаты многострочной части, для последующего восстановления.
	Ч1ВерхНазваниеКНД  = ТекТабличноеПоле.Области.НазваниеКНД.Верх;
	Ч1ЛевоНазваниеКНД  = ТекТабличноеПоле.Области.НазваниеКНД.Лево;
	Ч1НизНазваниеКНД   = ТекТабличноеПоле.Области.НазваниеКНД.Низ;
	Ч1ПравоНазваниеКНД = ТекТабличноеПоле.Области.НазваниеКНД.Право;

	// Параметры бокового дисперсионного отступа
	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	НазваниеМногострочнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НазваниеМногострочнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ШиринаСтрокиМногострочнойЧасти = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ШиринаСтрокиМногострочнойЧасти");

	// Подразумевается, что состоит из одной строчки
	Если ШиринаСтрокиМногострочнойЧасти = 0 Или ШиринаСтрокиМногострочнойЧасти = 1 Тогда
		ШиринаСтрокиМногострочнойЧасти = 1;
	КонецЕсли;

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");

	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти + ШиринаСтрокиМногострочнойЧасти - 1, РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали,);

	// Определим область удаляемой строки
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		Если ТекТабличноеПоле.Области.Найти(ФормаКНД) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ФормаКНД].Имя = "";
		КонецЕсли;

		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1ВерхНазваниеКНД, Ч1ЛевоНазваниеКНД, Ч1НизНазваниеКНД, Ч1ПравоНазваниеКНД);
		СледующаяЧасть.Имя = ФормаКНД;
		СледующаяЧасть.Объединить();
		СледующаяЧасть.Текст = " Форма по КНД 1152004";
		СледующаяЧасть.ОриентацияТекста = 270;
		СледующаяЧасть.Шрифт = Новый Шрифт(ТекТабличноеПоле.Области.Раздел.Шрифт);

	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

			Если ТекТабличноеПоле.Области.Найти(Страница) <> Неопределено Тогда
				ТекТабличноеПоле.Области[Страница].Имя = "";
			КонецЕсли;

			СледующаяЧасть = ТекТабличноеПоле.Область(Ч1ВерхСтраница, Ч1ЛевоСтраница, Ч1НизСтраница, Ч1ПравоСтраница);
			СледующаяЧасть.Имя = Страница;
			СледующаяЧасть.Объединить();
			СледующаяЧасть.Текст = "Стр.";
			СледующаяЧасть.ОриентацияТекста = 270;
			СледующаяЧасть.Шрифт = Новый Шрифт(ТекТабличноеПоле.Области.КПП.Шрифт);

		КонецЕсли;

	КонецЕсли;

	// Определим область удаляемой строки, Выравним позицию
	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ , ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх + ШиринаСтрокиМногострочнойЧасти - 1, РазмерПоОсиУ);

	// непосредственно удаляем область строки табличного документа
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	//Предупреждение("Ок3");
	// КонецСпециального режима удаления

	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители"].Низ + 1,,1 + ТекТабличноеПоле.Области["Ограничители"].Низ + 10);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,57,, 500);
	КонецЕсли;

	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	// Восстановим координаты правых полей

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда

		Если ТекТабличноеПоле.Области.Найти("ПравоеПрисоединение") <> Неопределено Тогда
			ТекТабличноеПоле.Области["ПравоеПрисоединение"].Имя = "";
		КонецЕсли;

		//Восстановим
		СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
		СледующаяЧасть.Имя = "ПравоеПрисоединение";

		Если ТекТабличноеПоле.Области.Найти(НазваниеМногострочнаяЧасть) <> Неопределено Тогда
			ТекТабличноеПоле.Области[НазваниеМногострочнаяЧасть].Имя = "";
			МногострочнаяЧастьОбл = ТекТабличноеПоле.Область(21, , 53,);
			МногострочнаяЧастьОбл.Имя = НазваниеМногострочнаяЧасть;
		КонецЕсли;

		Если ШиринаСтрокиМногострочнойЧасти > 0 Тогда
			ОпределениеВысотыСтрокиМногострочнойЧасти = "ОпределениеВысотыСтрокиМногострочнойЧасти";
			Если ТекТабличноеПоле.Области.Найти(ОпределениеВысотыСтрокиМногострочнойЧасти) <> Неопределено Тогда
				ТекТабличноеПоле.Области[ОпределениеВысотыСтрокиМногострочнойЧасти].Имя = "";
			КонецЕсли;

			СледующаяЧасть = ТекТабличноеПоле.Область(21, 50, 23, 50);
			СледующаяЧасть.Имя = ОпределениеВысотыСтрокиМногострочнойЧасти;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // СпециальногоУдаленияСтроки

// СпециальногоДобавленияСтроки
//
Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти)

	//Сохраним координаты правых полей

	// сохраним имеющиеся настройки правой присоединяющейся части (((

	//верх //лево         //низ   //.право
	Ч1Верх  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Верх;
	Ч1Лево  = ТекТабличноеПоле.Области.ПравоеПрисоединение.Лево;
	Ч1Низ   = ТекТабличноеПоле.Области.ПравоеПрисоединение.Низ;
	Ч1Право = ТекТабличноеПоле.Области.ПравоеПрисоединение.Право;

	РазмерПоОсиХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиХ");
	РазмерПоОсиУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "РазмерПоОсиУ");

	ШиринаСтрокиМногострочнойЧасти = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ШиринаСтрокиМногострочнойЧасти");

	// Подразумевается, что состоит из одной строчки
	Если ШиринаСтрокиМногострочнойЧасти = 0 Или ШиринаСтрокиМногострочнойЧасти = 1 Тогда
		ШиринаСтрокиМногострочнойЧасти = 1;
	КонецЕсли;

	// Параметры для объединения
	НомерГраницы = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницы");
	//ОсновнаяЧастьХ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьХ");
	ОсновнаяЧастьУ = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУ");

	// Название Пустойстроки с индексом
	ОсновнаяЧасть = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧасть");

	// Координата страницы
	НомерГраницыСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "НомерГраницыСтр");
	ОсновнаяЧастьУСтр = ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(ТекТабличноеПоле.Имя, ИмяГруппы, "ОсновнаяЧастьУСтр");

	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );

	// Необходимо отыскивать номер координаты области ПустаяСтрока !!! Ппустая строка без доп. строк или складывать необходимо.
	ВставляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх, РазмерПоОсиХ, ТекТабличноеПоле.Области[ОсновнаяЧасть].Верх + ?(ШиринаСтрокиМногострочнойЧасти<>0,ШиринаСтрокиМногострочнойЧасти-1,0), РазмерПоОсиУ);
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали, ЛОжь);

	// Удалим часть, все состыкуется
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, РазмерПоОсиХ, НомерВерхЯчейкиОбласти + ?(ШиринаСтрокиМногострочнойЧасти<>0,ШиринаСтрокиМногострочнойЧасти-1,0), РазмерПоОсиУ);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	ФормаКНД = "НазваниеКНД" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	// НомерГраницы - Ширина объединения ячейки с номером КНД
	Если НомерГраницы > 0 Тогда
		// Режим объединения
		Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ФормаКНД].Верх, ОсновнаяЧастьУ, ТекТабличноеПоле.Области[ФормаКНД].Верх + НомерГраницы, ОсновнаяЧастьУ);
		ТекТабличноеПоле.Области[ФормаКНД].Имя = "";
		Область.Объединить();
		Область.Имя = ФормаКНД;
	КонецЕсли;

	Если НомерГраницыСтр <> Неопределено Тогда

		Если НомерГраницыСтр > 0 Тогда
			Страница = "Страница" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");
			// Режим объединения
			Область = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[Страница].Верх, ОсновнаяЧастьУСтр, ТекТабличноеПоле.Области[Страница].Верх + НомерГраницыСтр, ОсновнаяЧастьУСтр);
			ТекТабличноеПоле.Области[Страница].Имя = "";
			Область.Объединить();
			Область.Имя = Страница;
		КонецЕсли;

	КонецЕсли;

	УдаляемаяОбласть = ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["Ограничители"].Низ + 1,,1 + ТекТабличноеПоле.Области["Ограничители"].Низ + 10);
	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

	Если ТекТабличноеПоле.Имя = "ПолеТабличногоДокументаРаздел2" Тогда
		УдаляемаяОбласть = ТекТабличноеПоле.Область(,57,, 500);
	КонецЕсли;

	ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоГоризонтали);

	ПравПрисоед = "ПравоеПрисоединение" + СтрЗаменить(ОсновнаяЧасть, "ПустаяСтрока", "");

	//Восстановим
	Если ТекТабличноеПоле.Области.Найти(ПравПрисоед) <> Неопределено Тогда
		ТекТабличноеПоле.Области[ПравПрисоед].Имя = "";
	КонецЕсли;

	СледующаяЧасть = ТекТабличноеПоле.Область(Ч1Верх, Ч1Лево, Ч1Низ, Ч1Право);
	СледующаяЧасть.Имя = ПравПрисоед;

КонецПроцедуры // СпециальногоДобавленияСтроки

// ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций
// Функция возвращает значение из таблицы настроек к операциям с доп. строками
//
// Параметры:
//
// РазделДекларации        - раздел декларации, указывается с ПолеТабличногоДокумента ...
// НомерМногострочнойЧасти - номер многострочной части в разделе (мИд)
// ТребуемыйПараметр - название колонки таблицы, где хранится требуемое значений настройки
//
// Возврат:
//
// Значение параметра, если такого нет в таблице - неопределено
//
Функция ПолучитьЗначениеИзТаблицыНастроекСтрочныхОпераций(РазделДекларации, НомерМногострочнойЧасти, ТребуемыйПараметр)

	Если Найти(РазделДекларации, "ПолеТабличногоДокумента") > 0 Тогда
		Раздел = СтрЗаменить(РазделДекларации, "ПолеТабличногоДокумента", "");
	Иначе
		Раздел = РазделДекларации;
	КонецЕсли;

	// Если многострочности нет в таблице настройки, то выходим
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, Раздел, "МногострочностьВРазделе") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоисковаяСтруктура = Новый Структура;
	ПоисковаяСтруктура.Вставить("РазделДекларации", "ПолеТабличногоДокумента" + Раздел);
	ПоисковаяСтруктура.Вставить("мИдГруппы"       , НомерМногострочнойЧасти);

	Результат = мТаблицаНастроекРежимаДляВставкиСтрок.НайтиСтроки(ПоисковаяСтруктура);

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат[0][ТребуемыйПараметр];

КонецФункции

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	Перем СтруктураГруппы;
	
	Возврат;
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	// Заполняем таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями.
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;
			
			ИмяЯчейки     = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			
			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочногоРаздела()

// ФормироватьСтруктуруСтраницОтчета
//
Процедура ФормироватьСтруктуруСтраницОтчета()

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	Для ПереборныйИнд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[ПереборныйИнд];

		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	ТабличноеПолеИмя = ТабличноеПоле.Имя;
	Если ТабличноеПолеИмя = "ПолеТабличногоДокументаТитульный" Тогда
		СтруктураДанныхПоля.Вставить("ПредставительФизЛицо", мПредставительФизЛицо);
		СтруктураДанныхПоля.Вставить("НазваниеПредставителя", мНазваниеПредставителя);
		СтруктураДанныхПоля.Вставить("ДокументПредставителя", мДокументПредставителя);
		СтруктураДанныхПоля.Вставить("ФамилияПредставителя", мФамилияПредставителя);
		СтруктураДанныхПоля.Вставить("ИмяПредставителя", мИмяПредставителя);
		СтруктураДанныхПоля.Вставить("ОтчествоПредставителя", мОтчествоПредставителя);

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел1" Тогда
		Для Каждого Стр Из мСтруктураПеременных Цикл
			Если Стр.Ключ = "ОКАТОРаздел2" Тогда
				Продолжить;
			Иначе
				СтруктураДанныхПоля.Вставить(Стр.Ключ, Стр.Значение);
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли ТабличноеПолеИмя = "ПолеТабличногоДокументаРаздел2" Тогда
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел2", мСтруктураПеременных.ОКАТОРаздел2);
	КонецЕсли;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Процедура активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(Область.Имя, 7) = "КодИМНС" Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭтоПолеВводаОснованияЛьготы = (Найти(Область.Имя, "_Основание") > 0);
	Если ЭтоПолеВводаОснованияЛьготы Тогда
		ВвестиОснованиеЛьготы(Область);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(Область.Имя, "Показатель");
	Если ПараметрВводаПоля = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				ПараметрВводаПоля = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭтоКБКРаздела1 = (Элемент = ПолеТаблДокументаРаздел1 И Область.Имя = "П000010001003");
	ИсходноеЗначениеКБКРаздела1 = ПолеТаблДокументаРаздел1.Области.П000010001003.Значение;
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ЭтоКБКРаздела1 Тогда
		НовоеЗначениеКБКРаздела1 = ПолеТаблДокументаРаздел1.Области.П000010001003.Значение;
		ИзменилсяКБК = (ИсходноеЗначениеКБКРаздела1 <> НовоеЗначениеКБКРаздела1);
		Если ИзменилсяКБК Тогда
			УстановитьКБКВРазделе1();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОбластей();
	
	Расчет();
	
КонецПроцедуры

Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	ФормаВыбора = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.Заголовок = ТекстВыбора;
	ФормаВыбора.СписокКодов = ТаблицаВыбора;
	Если ИсходнаяСтрока <> Неопределено Тогда
		ФормаВыбора.КодИсходнойСтроки = ИсходнаяСтрока.Код;
	КонецЕсли;
	
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Расчет();
	
КонецПроцедуры

Процедура ВвестиОснованиеЛьготы(Область)
	
	ФормаВвода = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВводаОснованияЛьготы");
	ФормаВвода.ОснованиеЛьготы = Область.Значение;
	
	Результат = ФормаВвода.ОткрытьМодально();
	
	Если Результат <> Неопределено Тогда
		Область.Значение = Результат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКБКВРазделе1()
	
	Перем ТаблицаСтраницРаздела;
	
	КБК = ПолеТаблДокументаРаздел1.Области.П000010001003.Значение;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1", ТаблицаСтраницРаздела);
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		Если Страница.Данные <> Неопределено Тогда
			Страница.Данные.П000010001003 = КБК;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	
	НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, Параметры);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, Параметры)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + Параметры.ИдФайл + ".xml";
		ЗаписатьТесктНаДиск(ТекстXML, ФайлДляВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузки501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция СформироватьИдФайл(Параметры)
	
	ЭтоПБОЮЛ = Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ;
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодНО)
			+ "_" + Параметры.КодНО
			+ "_" + ?(ЭтоПБОЮЛ, СокрЛП(Параметры.ИННЮЛОрг), СокрЛП(Параметры.ИННЮЛОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Параметры = Новый Структура;
	Параметры.Вставить("КодИФНСПосредника", СокрЛП(Организация.КодИФНСПолучателя));
	Параметры.Вставить("ИмяФайлаСхемы",             "NO_TRAND_1_054_00_05_01_01.xsd");
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_TRAND");
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ТрНалНД");
	
	Параметры.Вставить("ВерсПрог", РегламентированнаяОтчетность.СформироватьВерсПрог());
	Параметры.Вставить("ДатаДок",  Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("Период",   СокрЛП(Титульный.Период));
	Параметры.Вставить("ОтчетГод", Формат(мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	Параметры.Вставить("КодНО",    СокрЛП(Титульный.КодИМНС));
	Параметры.Вставить("НомКорр",  Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	Параметры.Вставить("ОКВЭД",    СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	Параметры.Вставить("Тлф",      СокрЛП(Титульный.ТелефонОрганизации));
	Параметры.Вставить("НаимОрг",  СокрЛП(Титульный.НаименованиеОрганизации));
	Параметры.Вставить("ИННЮЛОрг", СокрЛП(Организация.ИНН));
	Параметры.Вставить("КППОрг",   СокрЛП(Титульный.КПП1));
	
	Параметры.Вставить("ФормРеорг",  СокрЛП(Титульный.КодФормыРеорганизации));
	Параметры.Вставить("ИННЮЛРеорг", СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	Параметры.Вставить("КППРеорг",   СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ФИОПодписанта = РазложитьФИО(Титульный.Подписант);
	
	Параметры.Вставить("ТипПодписанта",        СокрЛП(Титульный.ТипПодписанта));
	
	Параметры.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	Параметры.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	Параметры.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	Параметры.Вставить("НаимОргПредставителя", СокрЛП(Титульный.НаименованиеОрганизацииПредставителя));
	Параметры.Вставить("НаимДокПредставителя", СокрЛП(Титульный.НаименованиеДокументаПредставителя));
	
	Параметры.Вставить("ИдФайл",   СформироватьИдФайл(Параметры));
	
	Возврат Параметры;
	
КонецФункции

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры)
	
	СтатусПроверки = Истина;
	
	ФиксированныеЗначения = Новый Структура;
	
	ФиксированныеЗначения.Вставить("НалоговыйПериод", Новый Массив());
	ФиксированныеЗначения.НалоговыйПериод.Добавить("34");
	ФиксированныеЗначения.НалоговыйПериод.Добавить("50");
	
	ФиксированныеЗначения.Вставить("КодМестаПредставления", Новый Массив());
	ФиксированныеЗначения.КодМестаПредставления.Добавить("213");
	ФиксированныеЗначения.КодМестаПредставления.Добавить("216");
	ФиксированныеЗначения.КодМестаПредставления.Добавить("260");
	
	ФиксированныеЗначения.Вставить("КодФормыРеорганизации", Новый Массив());
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("0");
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("1");
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("2");
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("3");
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("5");
	ФиксированныеЗначения.КодФормыРеорганизации.Добавить("6");
	
	ФиксированныеЗначения.Вставить("ЭкологическийКласс", Новый Массив());
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("0");
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("1");
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("2");
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("3");
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("4");
	ФиксированныеЗначения.ЭкологическийКласс.Добавить("5");
	
	ФиксированныеЗначения.Вставить("КБК", Новый Массив());
	ФиксированныеЗначения.КБК.Добавить("18210604011021000110");
	
	Если ПустаяСтрока(Параметры.ИННЮЛОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КППОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации!", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	КлассификаторПоказателя = ФиксированныеЗначения.НалоговыйПериод;
	ПоказательПрошелПроверку = ПроверитьПоказательПоКлассификатору(Параметры.Период, КлассификаторПоказателя);
	Если НЕ ПоказательПрошелПроверку Тогда
		СообщениеОбОшибке = "Значение кода налогового периода должно быть равно одному из следующих значений: ";
		СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьСписокЗначенийКлассификатора(КлассификаторПоказателя);
		СообщениеОбОшибке = СообщениеОбОшибке + "!";
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.НаимОрг) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указано полное наименование организации!", "Титульный", "НаименованиеОрганизации");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.КодНО) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа!", "Титульный", "КодИМНС1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД!", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетность.ОКВЭДСоответствуетТребованиям(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	КлассификаторПоказателя = ФиксированныеЗначения.КодМестаПредставления;
	ПоказательПрошелПроверку = ПроверитьПоказательПоКлассификатору(Параметры.ПоМесту, КлассификаторПоказателя);
	Если НЕ ПоказательПрошелПроверку Тогда
		СообщениеОбОшибке = "Значение кода места, по которому представляется документ, должно быть равно одному из следующих значений: ";
		СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьСписокЗначенийКлассификатора(КлассификаторПоказателя);
		СообщениеОбОшибке = СообщениеОбОшибке + "!";
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка параметров секции подписанта декларации.
	Если ПустаяСтрока(Параметры.ФамилияПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяПодписанта) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.ТипПодписанта = "2" И ПустаяСтрока(Параметры.НаимДокПредставителя) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка параметров секции реорганизации.
	Если ЗначениеЗаполнено(Параметры.ФормРеорг) Тогда
		
		КлассификаторПоказателя = ФиксированныеЗначения.КодФормыРеорганизации;
		ПоказательПрошелПроверку = ПроверитьПоказательПоКлассификатору(Параметры.ФормРеорг, КлассификаторПоказателя);
		Если НЕ ПоказательПрошелПроверку Тогда
			СообщениеОбОшибке = "Значение код формы реорганизации (ликвидации) должно быть равно одному из следующих значений: ";
			СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьСписокЗначенийКлассификатора(КлассификаторПоказателя);
			СообщениеОбОшибке = СообщениеОбОшибке + "!";
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, СообщениеОбОшибке, "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если Параметры.ФормРеорг <> "0" Тогда
			
			ДлинаИННРеорг = СтрДлина(Параметры.ИННЮЛРеорг);
			Если ДлинаИННРеорг <> 10 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации!", "Титульный", "ИНН_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКППРеорг = СтрДлина(Параметры.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации!", "Титульный", "КПП_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка правильности заполнения Раздела 1.
	
	// Возможные проблемы:
	//   - не задан КБК;
	//   - неправильный КБК;
	//   - различные значения КБК;
	//   - нет ни одного раздела с заполненным кодом ОКАТО;
	//   - код ОКАТО задан неверно;
	//   - код ОКАТО дублируетя;
	//   - не задан код ОКАТО при заполненных суммах налогов и платежей.
	Раздел1 = мДанныеОтчета.Раздел1;
	
	ТаблицаКБК = Новый ТаблицаЗначений;
	ТаблицаКБК.Колонки.Добавить("НомерСтраницы");
	ТаблицаКБК.Колонки.Добавить("КБК");
	ТаблицаКБК.Колонки.Добавить("НеЗадан");
	
	ОКАТОРаздела1 = Новый ТаблицаЗначений;
	ОКАТОРаздела1.Колонки.Добавить("КодОКАТО");
	
	ЕстьЗаполненныйБлокРаздела1 = Ложь;
	
	КоличествоСходныхБлоковРаздела1 = 3;
	Для Каждого Лист Из Раздел1 Цикл
		ДанныеЛиста = Лист.Данные;
		НомерСтраницы = Раздел1.Индекс(Лист) + 1;
		
		НоваяСтрокаТаблицыКБК = ТаблицаКБК.Добавить();
		НоваяСтрокаТаблицыКБК.НомерСтраницы = НомерСтраницы;
		НоваяСтрокаТаблицыКБК.КБК = ДанныеЛиста.П000010001003;
		НоваяСтрокаТаблицыКБК.НеЗадан = ПустаяСтрока(НоваяСтрокаТаблицыКБК.КБК);
		
		Для Инд = 1 По КоличествоСходныхБлоковРаздела1 Цикл
			ПостфиксБлока = "_" + Формат(Инд, "ЧГ=0");
			ИмяОбластиОКАТО = "П000010002003" + ПостфиксБлока;
			
			ОКАТО = СокрЛП(ДанныеЛиста[ИмяОбластиОКАТО]);
			ЗаданоОКАТО = (НЕ ПустаяСтрока(ОКАТО));
			ЗаданыСуммыНалогаИПлатежей = (ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002103" + ПостфиксБлока])
			                          ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002303" + ПостфиксБлока])
			                          ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002503" + ПостфиксБлока])
			                          ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010002703" + ПостфиксБлока])
			                          ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010003003" + ПостфиксБлока])
			                          ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста["П000010004003" + ПостфиксБлока]));
			
			ЕстьЗаполненныйБлокРаздела1 = (ЕстьЗаполненныйБлокРаздела1 ИЛИ ЗаданоОКАТО ИЛИ ЗаданыСуммыНалогаИПлатежей);
			
			Если ЗаданоОКАТО Тогда
				НоваяСтрокаОКАТО = ОКАТОРаздела1.Добавить();
				НоваяСтрокаОКАТО.КодОКАТО = ОКАТО;
				
				ДлинаОКАТО = СтрДлина(ОКАТО);
				Если ДлинаОКАТО <> 11 Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + НомерСтраницы + " неверно задан код по ОКАТО!", "Раздел1", ИмяОбластиОКАТО, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			Иначе
				Если ЗаданыСуммыНалогаИПлатежей Тогда
					РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + НомерСтраницы + " не задан код по ОКАТО!", "Раздел1", ИмяОбластиОКАТО, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	НезаданныйКБК = ТаблицаКБК.Найти(Истина, "НеЗадан");
	Если НезаданныйКБК <> Неопределено Тогда
		НомерСтраницы = ТаблицаКБК.Индекс(НезаданныйКБК) + 1;
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 на странице " + НомерСтраницы + " не задан КБК!", "Раздел1", "П000010001003", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЕстьЗаполненныйБлокРаздела1 Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не заполнен ни один блок с информацией о суммах налога!", "Раздел1", "П000010002003_1", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ТаблицаПроверкиУникальностиОКАТО = ОКАТОРаздела1.Скопировать();
	ТаблицаПроверкиУникальностиОКАТО.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1));
	ТаблицаПроверкиУникальностиОКАТО.ЗаполнитьЗначения(1, "Количество");
	ТаблицаПроверкиУникальностиОКАТО.Свернуть("КодОКАТО", "Количество");
	
	Для Каждого ПроверяемыйОКАТО Из ТаблицаПроверкиУникальностиОКАТО Цикл
		Если ПроверяемыйОКАТО.Количество > 1 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 обнаружен повторяющийся код ОКАТО " + ПроверяемыйОКАТО.КодОКАТО + "!", "Раздел1", , 1);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка правильности заполнения Раздела 2.
	
	// Возможные проблемы:
	//   - не задан код ОКАТО при заполненных полях раздела;
	//   - код ОКАТО задан неверно;
	//   - код ОКАТО раздела 2 не соответствует ни одному коду ОКАТО из раздела 1;
	//   - не заполнены обязательные поля;
	//   - неверно заданы коды льгот и основания;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Для Каждого Лист Из Раздел2 Цикл
		ДанныеЛиста = Лист.Данные;
		НомерСтраницы = Раздел2.Индекс(Лист) + 1;
		
		ЛистЗаполнен = (НЕ ПустаяСтрока(ДанныеЛиста.П000020003003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020004003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020005003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020006003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020007003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020008003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020009003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020009003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020010003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020011003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020012003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020013003)
		            ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020014003)
		            ИЛИ ЗначениеЗаполнено(ДанныеЛиста.П000020015003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020017003_КодЛьготы)
		            ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020018003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020019003_КодЛьготы)
		            ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020020003)
		            ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.П000020021003_КодЛьготы)
		            ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020022003)
		            ИЛИ ЗначениеСуммыЗаполнено(ДанныеЛиста.П000020023003));
		
		ИмяОбластиОКАТО = "П000020002003";
		ОКАТО = СокрЛП(ДанныеЛиста[ИмяОбластиОКАТО]);
		ЗаданоОКАТО = (НЕ ПустаяСтрока(ОКАТО));
		
		Если ЗаданоОКАТО Тогда
			ДлинаОКАТО = СтрДлина(ОКАТО);
			Если ДлинаОКАТО <> 11 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы + " неверно задан код по ОКАТО!", "Раздел2", ИмяОбластиОКАТО, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКАТОНайденВРазделе1 = (ОКАТОРаздела1.Найти(ОКАТО, "КодОКАТО") <> Неопределено);
			
			Если НЕ ОКАТОНайденВРазделе1 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Для значения кода по ОКАТО на странице " + НомерСтраницы + " раздела 2 не найдено соответствующее значение кода по ОКАТО в разделе 1!", "Раздел2", ИмяОбластиОКАТО, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		Иначе
			Если ЛистЗаполнен Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 2 на странице " + НомерСтраницы + " не задан код по ОКАТО!", "Раздел2", ИмяОбластиОКАТО, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЛистЗаполнен ИЛИ ЗаданоОКАТО Тогда
			
			ИмяПроверяемойОбласти = "П000020003003"; // Код вида транспортного средства
			ДлинаКодаВидаТC = СтрДлина(СокрЛП(ДанныеЛиста[ИмяПроверяемойОбласти]));
			Если ДлинаКодаВидаТC <> 5 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 2 не задан код вид транспортного средства!", "Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПроверяемойОбласти = "П000020006003"; // Регистрационный знак транспортного средства
			ОбластьЗаполнена = НЕ ПустаяСтрока(СокрЛП(ДанныеЛиста[ИмяПроверяемойОбласти]));
			Если НЕ ОбластьЗаполнена Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 2 не задан регистрационный знак транспортного средства!", "Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПроверяемойОбласти = "П000020007003"; // Налоговая база
			ОбластьЗаполнена = ЗначениеЗаполнено(ДанныеЛиста[ИмяПроверяемойОбласти]);
			Если НЕ ОбластьЗаполнена Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 2 не задана налоговая база!", "Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПроверяемойОбласти = "П000020008003"; // Код вида единицы измерения по ОКЕИ
			ДлинаЗначенияОбласти = СтрДлина(СокрЛП(ДанныеЛиста[ИмяПроверяемойОбласти]));
			Если ДлинаЗначенияОбласти <> 3 Тогда
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 2 не задан код единицы измерения по ОКЕИ!", "Раздел2", ИмяПроверяемойОбласти, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПроверитьПоказательПоКлассификатору(ЗначениеПоказателя, МассивЗначенийКлассификатора)
	
	ЗначениеНайденоВМассиве = (МассивЗначенийКлассификатора.Найти(ЗначениеПоказателя) <> Неопределено);
	Возврат ЗначениеНайденоВМассиве;
	
КонецФункции

Функция ПолучитьСписокЗначенийКлассификатора(МассивЗначенийКлассификатора)
	
	СтрокаЗначений = "";
	Для Инд = 0 По МассивЗначенийКлассификатора.ВГраница() Цикл
		СтрокаЗначений = СтрокаЗначений + ?(Инд = 0, "", ", ") + """" + МассивЗначенийКлассификатора[Инд] + """";
	КонецЦикла;
	
	Возврат СтрокаЗначений;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = мДанныеОтчета.Раздел2;
	
	Узел_СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	Узел_СумПУ = ПолучитьПодчиненныйЭлемент(Узел_СумНалПУ, "СумПУ");
	
	Для Каждого ЛистРаздела1 Из Раздел1 Цикл
		
		ДанныеРаздела1 = ЛистРаздела1.Данные;
		
		ЗадатьЗначениеЭлемента(Узел_СумНалПУ, "КБК", ДанныеРаздела1.П000010001003);
		
		КоличествоОднородныхБлоковНаЛистеРаздела1 = 3;
		
		Для НомерБлока = 1 По КоличествоОднородныхБлоковНаЛистеРаздела1 Цикл
			
			ПостфиксБлока = "_" + Формат(НомерБлока, "ЧГ=0");
			
			ОКАТО = СокрЛП(ДанныеРаздела1["П000010002003" + ПостфиксБлока]);
			
			СуммаНалогаИсчисленная  = ДанныеРаздела1["П000010002103" + ПостфиксБлока];
			СуммаАвансовыхПлатежей1 = ДанныеРаздела1["П000010002303" + ПостфиксБлока];
			СуммаАвансовыхПлатежей2 = ДанныеРаздела1["П000010002503" + ПостфиксБлока];
			СуммаАвансовыхПлатежей3 = ДанныеРаздела1["П000010002703" + ПостфиксБлока];
			
			СуммаНалогаКУплате     = ДанныеРаздела1["П000010003003" + ПостфиксБлока];
			СуммаНалогаКУменьшению = ДанныеРаздела1["П000010004003" + ПостфиксБлока];
			СуммаНалога = СуммаНалогаКУплате - СуммаНалогаКУменьшению;
			
			Если НЕ ЗначениеЗаполнено(ОКАТО) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйУзел_СумПУ = СкопироватьУзел(Узел_СумНалПУ, Узел_СумПУ);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "ОКАТО", ОКАТО);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "НалИсчисл", СуммаНалогаИсчисленная);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "АвПУКв1", СуммаАвансовыхПлатежей1);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "АвПУКв2", СуммаАвансовыхПлатежей2);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "АвПУКв3", СуммаАвансовыхПлатежей3);
			ЗадатьЗначениеЭлемента(НовыйУзел_СумПУ, "НалПУ", СуммаНалога);
			
			// Данные из раздела 2, связанные с разделом 1 по коду по ОКАТО
			Узел_РасчНалТС = ПолучитьПодчиненныйЭлемент(НовыйУзел_СумПУ, "РасчНалТС");
			Для Каждого ЛистРаздела2 Из Раздел2 Цикл
				
				ДанныеРаздела2 = ЛистРаздела2.Данные;
				
				Если ОКАТО <> СокрЛП(ДанныеРаздела2.П000020002003) Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйУзел_РасчНалТС = СкопироватьУзел(НовыйУзел_СумПУ, Узел_РасчНалТС);
				
				Для Каждого Элемент Из НовыйУзел_РасчНалТС.Строки Цикл
					Если ПустаяСтрока(Элемент.Ключ) Тогда
						Продолжить;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(НовыйУзел_РасчНалТС, Элемент.Код, ДанныеРаздела2[Элемент.Ключ]);
				КонецЦикла;
				
				// Льготы и основания.
				УзелЛьготы = ПолучитьПодчиненныйЭлемент(НовыйУзел_РасчНалТС, "ЛьготОсвНал");
				КодЛьготы = ДанныеРаздела2.П000020017003_КодЛьготы;
				Основание = ДанныеРаздела2.П000020017003_Основание;
				СуммаЛьготы = ДанныеРаздела2.П000020018003;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					Если ПустаяСтрока(Основание) Тогда
						ПолныйКодЛьготы = КодЛьготы;
					Иначе
						ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(УзелЛьготы, "КодОсвНал", ПолныйКодЛьготы);
					ЗадатьЗначениеЭлемента(УзелЛьготы, "СумОсвНал", СуммаЛьготы);
				КонецЕсли;
				
				УзелЛьготы = ПолучитьПодчиненныйЭлемент(НовыйУзел_РасчНалТС, "ЛьготУменСум");
				КодЛьготы = ДанныеРаздела2.П000020019003_КодЛьготы;
				Основание = ДанныеРаздела2.П000020019003_Основание;
				СуммаЛьготы = ДанныеРаздела2.П000020020003;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					Если ПустаяСтрока(Основание) Тогда
						ПолныйКодЛьготы = КодЛьготы;
					Иначе
						ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(УзелЛьготы, "КодУменСум", ПолныйКодЛьготы);
					ЗадатьЗначениеЭлемента(УзелЛьготы, "СумУменСум", СуммаЛьготы);
				КонецЕсли;
				
				УзелЛьготы = ПолучитьПодчиненныйЭлемент(НовыйУзел_РасчНалТС, "ЛьготСнижСтав");
				КодЛьготы = ДанныеРаздела2.П000020021003_КодЛьготы;
				Основание = ДанныеРаздела2.П000020021003_Основание;
				СуммаЛьготы = ДанныеРаздела2.П000020022003;
				Если НЕ ПустаяСтрока(КодЛьготы) Тогда
					Если ПустаяСтрока(Основание) Тогда
						ПолныйКодЛьготы = КодЛьготы;
					Иначе
						ПолныйКодЛьготы = КодЛьготы + "/" + Основание;
					КонецЕсли;
					ЗадатьЗначениеЭлемента(УзелЛьготы, "КодСнижСтав", ПолныйКодЛьготы);
					ЗадатьЗначениеЭлемента(УзелЛьготы, "СумСнижСтав", СуммаЛьготы);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, "ПолеТабличногоДокумента" + Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	Возврат ПотокXML.Закрыть(); // получаем текст XML
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", Параметры.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

// Процедура вызывается при выборе пункта "Показать машиночитаемый бланк" подменю "Печать"
// командной панели действий формы. 
//
// Обработчик уставливается динамически методом "Действие" из общего модуля
// "Регламентированная отчетность".
//
Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";

мСоставПоказателей = "СоставПоказателей2012Кв1";

мИдГруппы1  = "П0000200020";
КолИсхСтрокИдГруппы1 = 11;

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       "в рублях");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    "в тысячах рублей");
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "в миллионах рублей");

мКодыЛьгот = Новый ТаблицаЗначений;
мКодыЛьгот.Колонки.Добавить("Код",,,6);
мКодыЛьгот.Колонки.Добавить("Название",,,70);

мВидыТранспортныхСредств = Новый ТаблицаЗначений;
мВидыТранспортныхСредств.Колонки.Добавить("Код",,,6);
мВидыТранспортныхСредств.Колонки.Добавить("Название",,,70);

мКодыОКЕИ = Новый ТаблицаЗначений;
мКодыОКЕИ.Колонки.Добавить("Код",,,5);
мКодыОКЕИ.Колонки.Добавить("Название",,,70);

мКодыБюджетнойКлассификации2005 = Новый ТаблицаЗначений;
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Код",,, 18);
мКодыБюджетнойКлассификации2005.Колонки.Добавить("Название",,, 50);

ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);  // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);  // БЕЛЫЙ

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

// Таблица значений хранит данные дополнительной страницы многостраничных разделов отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя дополнительной страницы (отображается в списке дополнительных страниц);
//    - булево, признак текущей страницы (отображенной в поле табличного документа);
//    - структура, содержащая имена и значения редактируемых ячеек дополнительной страницы;
//    - таблица значений, содержит данные строк многострочного блока показателей страницы.
//
ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповДата      = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
мОписаниеТиповЧислоЕ   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2);

мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;

ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

// Структура содержит данные дополнительных страниц раздела 1
мСтруктураМногостраничныхРазделов = Новый Структура;

ТаблицаСтраницыРазделаДляМногострочныхРазделов            = Новый ТаблицаЗначений;
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("Данные");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("ДанныеДопСтрок");
ТаблицаСтраницыРазделаДляМногострочныхРазделов.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

// Добавим данные первой страницы
СтрПерваяСтраница = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Добавить();
СтрПерваяСтраница.Представление      = "Новая страница";
СтрПерваяСтраница.ДанныеДопСтрок     = Неопределено; // В разделе есть многострочность, поэтому поле объявлено
СтрПерваяСтраница.АктивнаяСтраница   = Истина;
СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

ТаблицаСтраницыРаздел1 = ТаблицаСтраницыРаздела.Скопировать();
ТаблицаСтраницыРаздел2 = ТаблицаСтраницыРазделаДляМногострочныхРазделов.Скопировать();

мСтруктураМногостраничныхРазделов.Вставить("Раздел1", ТаблицаСтраницыРаздел1);
мСтруктураМногостраничныхРазделов.Вставить("Раздел2", ТаблицаСтраницыРаздел2);

мВерсияФормы = "18/07/2012";
мКодОтчета   = 1152004;

мПечатныеформы = Новый СписокЗначений;
мПечатаемыеРазделы = Новый СписокЗначений;

ДополнительныеПараметрыФормы = Новый Структура;
ДополнительныеПараметрыФормы.Вставить("ИмяМакетаСписковЗначенийДляВыбора", "Списки2012Кв1");

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");