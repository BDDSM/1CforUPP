////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
Перем мФормаОтчета;

// хранит код отчета по КНД
Перем мКодОтчета;

// хранит версию формы отчета
Перем мВерсияФормы Экспорт;

Перем мПечатныеФормы Экспорт;

Перем мВПрограммеИзмененаОрганизация;

Перем мСвойстваРазделовДекларации Экспорт;

Перем мАдресвФорматеДляВыгрузки;

Перем мДанныеОтчета Экспорт;

Перем ТаблицаСообщений Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// ЗаполнитьДатуВЯчейках
//
Процедура ЗаполнитьДатуВЯчейках() Экспорт
	// Процедура "заглушка", для роОчистить.
	Возврат;
КонецПроцедуры // ЗаполнитьДатуВЯчейках

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	мСвойстваРазделовДекларации           = Новый ДеревоЗначений;

	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе",  ОписаниеТиповЧисло1);
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе

	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);

	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);

	// 6. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	// Ложь   - нет
	// Истина - да

	// 7. Обязательный раздел для выгрузки или нет
	// Название параметра
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);

	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);

	мСвойстваРазделовДекларации.Строки.Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет(ИмяТекущейСтраницыПанели = "") Экспорт

	//Для Инд = 1 По 11 Цикл
	//	ИндСтроки = "П00010"+?(Инд<10,"0","")+Строка(Инд);
	//	Если Инд > 1 Тогда
	//		мФормаОтчета.Области[ИндСтроки + "А2"].Значение = мФормаОтчета.Области[ИндСтроки + "А1"].Значение;
	//	КонецЕсли;
	//КонецЦикла;

	мФормаОтчета.Области.П010000102.Значение = мФормаОтчета.Области.П010000202.Значение + мФормаОтчета.Области.П010000302.Значение + мФормаОтчета.Области.П010000402.Значение + мФормаОтчета.Области.П010000502.Значение + мФормаОтчета.Области.П010000602.Значение
	                                         + мФормаОтчета.Области.П010000702.Значение + мФормаОтчета.Области.П010000802.Значение + мФормаОтчета.Области.П010000902.Значение + мФормаОтчета.Области.П010001002.Значение + мФормаОтчета.Области.П010001102.Значение;
	Если мФормаОтчета.Области.П010000102.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000202.Текст + мФормаОтчета.Области.П010000302.Текст + мФормаОтчета.Области.П010000402.Текст + мФормаОтчета.Области.П010000502.Текст + мФормаОтчета.Области.П010000602.Текст
		                                       + мФормаОтчета.Области.П010000702.Текст + мФормаОтчета.Области.П010000802.Текст + мФормаОтчета.Области.П010000902.Текст + мФормаОтчета.Области.П010001002.Текст + мФормаОтчета.Области.П010001102.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000102.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000102.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000103.Значение = мФормаОтчета.Области.П010000203.Значение + мФормаОтчета.Области.П010000303.Значение + мФормаОтчета.Области.П010000403.Значение + мФормаОтчета.Области.П010000503.Значение + мФормаОтчета.Области.П010000603.Значение
	                                         + мФормаОтчета.Области.П010000703.Значение + мФормаОтчета.Области.П010000803.Значение + мФормаОтчета.Области.П010000903.Значение + мФормаОтчета.Области.П010001003.Значение + мФормаОтчета.Области.П010001103.Значение;
	Если мФормаОтчета.Области.П010000103.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000203.Текст + мФормаОтчета.Области.П010000303.Текст + мФормаОтчета.Области.П010000403.Текст + мФормаОтчета.Области.П010000503.Текст + мФормаОтчета.Области.П010000603.Текст
		                                       + мФормаОтчета.Области.П010000703.Текст + мФормаОтчета.Области.П010000803.Текст + мФормаОтчета.Области.П010000903.Текст + мФормаОтчета.Области.П010001003.Текст + мФормаОтчета.Области.П010001103.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000103.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000103.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000104.Значение = мФормаОтчета.Области.П010000204.Значение + мФормаОтчета.Области.П010000304.Значение + мФормаОтчета.Области.П010000404.Значение + мФормаОтчета.Области.П010000504.Значение + мФормаОтчета.Области.П010000604.Значение
	                                         + мФормаОтчета.Области.П010000704.Значение + мФормаОтчета.Области.П010000804.Значение + мФормаОтчета.Области.П010000904.Значение + мФормаОтчета.Области.П010001004.Значение + мФормаОтчета.Области.П010001104.Значение;
	Если мФормаОтчета.Области.П010000104.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000204.Текст + мФормаОтчета.Области.П010000304.Текст + мФормаОтчета.Области.П010000404.Текст + мФормаОтчета.Области.П010000504.Текст + мФормаОтчета.Области.П010000604.Текст
		                                       + мФормаОтчета.Области.П010000704.Текст + мФормаОтчета.Области.П010000804.Текст + мФормаОтчета.Области.П010000904.Текст + мФормаОтчета.Области.П010001004.Текст + мФормаОтчета.Области.П010001104.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000104.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000104.Формат, ФорматПредставленияНуля);
	КонецЕсли;

	мФормаОтчета.Области.П010000101.Значение = мФормаОтчета.Области.П010000102.Значение + мФормаОтчета.Области.П010000103.Значение + мФормаОтчета.Области.П010000104.Значение;
	Если мФормаОтчета.Области.П010000101.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000102.Текст + мФормаОтчета.Области.П010000103.Текст + мФормаОтчета.Области.П010000104.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000101.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000101.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000201.Значение = мФормаОтчета.Области.П010000202.Значение + мФормаОтчета.Области.П010000203.Значение + мФормаОтчета.Области.П010000204.Значение;
	Если мФормаОтчета.Области.П010000201.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000202.Текст + мФормаОтчета.Области.П010000203.Текст + мФормаОтчета.Области.П010000204.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000201.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000201.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000301.Значение = мФормаОтчета.Области.П010000302.Значение + мФормаОтчета.Области.П010000303.Значение + мФормаОтчета.Области.П010000304.Значение;
	Если мФормаОтчета.Области.П010000301.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000302.Текст + мФормаОтчета.Области.П010000303.Текст + мФормаОтчета.Области.П010000304.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000301.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000301.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000401.Значение = мФормаОтчета.Области.П010000402.Значение + мФормаОтчета.Области.П010000403.Значение + мФормаОтчета.Области.П010000404.Значение;
	Если мФормаОтчета.Области.П010000401.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000402.Текст + мФормаОтчета.Области.П010000403.Текст + мФормаОтчета.Области.П010000404.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000401.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000401.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000501.Значение = мФормаОтчета.Области.П010000502.Значение + мФормаОтчета.Области.П010000503.Значение + мФормаОтчета.Области.П010000504.Значение;
	Если мФормаОтчета.Области.П010000501.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000502.Текст + мФормаОтчета.Области.П010000503.Текст + мФормаОтчета.Области.П010000504.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000501.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000501.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000601.Значение = мФормаОтчета.Области.П010000602.Значение + мФормаОтчета.Области.П010000603.Значение + мФормаОтчета.Области.П010000604.Значение;
	Если мФормаОтчета.Области.П010000601.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000602.Текст + мФормаОтчета.Области.П010000603.Текст + мФормаОтчета.Области.П010000604.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000601.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000601.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000701.Значение = мФормаОтчета.Области.П010000702.Значение + мФормаОтчета.Области.П010000703.Значение + мФормаОтчета.Области.П010000704.Значение;
	Если мФормаОтчета.Области.П010000701.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000702.Текст + мФормаОтчета.Области.П010000703.Текст + мФормаОтчета.Области.П010000704.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000701.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000701.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000801.Значение = мФормаОтчета.Области.П010000802.Значение + мФормаОтчета.Области.П010000803.Значение + мФормаОтчета.Области.П010000804.Значение;
	Если мФормаОтчета.Области.П010000801.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000802.Текст + мФормаОтчета.Области.П010000803.Текст + мФормаОтчета.Области.П010000804.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000801.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000801.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000901.Значение = мФормаОтчета.Области.П010000902.Значение + мФормаОтчета.Области.П010000903.Значение + мФормаОтчета.Области.П010000904.Значение;
	Если мФормаОтчета.Области.П010000901.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000902.Текст + мФормаОтчета.Области.П010000903.Текст + мФормаОтчета.Области.П010000904.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000901.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000901.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010001001.Значение = мФормаОтчета.Области.П010001002.Значение + мФормаОтчета.Области.П010001003.Значение + мФормаОтчета.Области.П010001004.Значение;
	Если мФормаОтчета.Области.П010001001.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010001002.Текст + мФормаОтчета.Области.П010001003.Текст + мФормаОтчета.Области.П010001004.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010001001.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010001001.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010001101.Значение = мФормаОтчета.Области.П010001102.Значение + мФормаОтчета.Области.П010001103.Значение + мФормаОтчета.Области.П010001104.Значение;
	Если мФормаОтчета.Области.П010001101.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010001102.Текст + мФормаОтчета.Области.П010001103.Текст + мФормаОтчета.Области.П010001104.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010001101.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010001101.Формат, ФорматПредставленияНуля);
	КонецЕсли;

	// Раздел 1 продолжение, расчет графы 5 и 6.
	мФормаОтчета.Области.П010000105.Значение = мФормаОтчета.Области.П010000205.Значение
	                                         + мФормаОтчета.Области.П010000305.Значение
	                                         + мФормаОтчета.Области.П010000405.Значение
	                                         + мФормаОтчета.Области.П010000505.Значение
	                                         + мФормаОтчета.Области.П010000605.Значение
	                                         + мФормаОтчета.Области.П010000705.Значение
	                                         + мФормаОтчета.Области.П010000805.Значение
	                                         + мФормаОтчета.Области.П010000905.Значение
	                                         + мФормаОтчета.Области.П010001005.Значение
	                                         + мФормаОтчета.Области.П010001105.Значение;
	Если мФормаОтчета.Области.П010000105.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000205.Текст
	                                           + мФормаОтчета.Области.П010000305.Текст
	                                           + мФормаОтчета.Области.П010000405.Текст
	                                           + мФормаОтчета.Области.П010000505.Текст
	                                           + мФормаОтчета.Области.П010000605.Текст
	                                           + мФормаОтчета.Области.П010000705.Текст
	                                           + мФормаОтчета.Области.П010000805.Текст
	                                           + мФормаОтчета.Области.П010000905.Текст
	                                           + мФормаОтчета.Области.П010001005.Текст
	                                           + мФормаОтчета.Области.П010001105.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000105.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000105.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	
	мФормаОтчета.Области.П010000106.Значение = мФормаОтчета.Области.П010000206.Значение
	                                         + мФормаОтчета.Области.П010000306.Значение
	                                         + мФормаОтчета.Области.П010000406.Значение
	                                         + мФормаОтчета.Области.П010000506.Значение
	                                         + мФормаОтчета.Области.П010000606.Значение
	                                         + мФормаОтчета.Области.П010000706.Значение
	                                         + мФормаОтчета.Области.П010000806.Значение
	                                         + мФормаОтчета.Области.П010000906.Значение
	                                         + мФормаОтчета.Области.П010001006.Значение
	                                         + мФормаОтчета.Области.П010001106.Значение;
	Если мФормаОтчета.Области.П010000106.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000206.Текст
	                                           + мФормаОтчета.Области.П010000306.Текст
	                                           + мФормаОтчета.Области.П010000406.Текст
	                                           + мФормаОтчета.Области.П010000506.Текст
	                                           + мФормаОтчета.Области.П010000606.Текст
	                                           + мФормаОтчета.Области.П010000706.Текст
	                                           + мФормаОтчета.Области.П010000806.Текст
	                                           + мФормаОтчета.Области.П010000906.Текст
	                                           + мФормаОтчета.Области.П010001006.Текст
	                                           + мФормаОтчета.Области.П010001106.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000106.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000106.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	
	мФормаОтчета.Области.П010000107.Значение = мФормаОтчета.Области.П010000207.Значение
	                                         + мФормаОтчета.Области.П010000307.Значение
	                                         + мФормаОтчета.Области.П010000407.Значение
	                                         + мФормаОтчета.Области.П010000507.Значение
	                                         + мФормаОтчета.Области.П010000607.Значение
	                                         + мФормаОтчета.Области.П010000707.Значение
	                                         + мФормаОтчета.Области.П010000807.Значение
	                                         + мФормаОтчета.Области.П010000907.Значение
	                                         + мФормаОтчета.Области.П010001007.Значение
	                                         + мФормаОтчета.Области.П010001107.Значение;
	Если мФормаОтчета.Области.П010000107.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000207.Текст
	                                           + мФормаОтчета.Области.П010000307.Текст
	                                           + мФормаОтчета.Области.П010000407.Текст
	                                           + мФормаОтчета.Области.П010000507.Текст
	                                           + мФормаОтчета.Области.П010000607.Текст
	                                           + мФормаОтчета.Области.П010000707.Текст
	                                           + мФормаОтчета.Области.П010000807.Текст
	                                           + мФормаОтчета.Области.П010000907.Текст
	                                           + мФормаОтчета.Области.П010001007.Текст
	                                           + мФормаОтчета.Области.П010001107.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000107.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000107.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	
	мФормаОтчета.Области.П010000108.Значение = мФормаОтчета.Области.П010000208.Значение
	                                         + мФормаОтчета.Области.П010000308.Значение
	                                         + мФормаОтчета.Области.П010000408.Значение
	                                         + мФормаОтчета.Области.П010000508.Значение
	                                         + мФормаОтчета.Области.П010000608.Значение
	                                         + мФормаОтчета.Области.П010000708.Значение
	                                         + мФормаОтчета.Области.П010000808.Значение
	                                         + мФормаОтчета.Области.П010000908.Значение
	                                         + мФормаОтчета.Области.П010001008.Значение
	                                         + мФормаОтчета.Области.П010001108.Значение;
	Если мФормаОтчета.Области.П010000108.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000208.Текст
	                                           + мФормаОтчета.Области.П010000308.Текст
	                                           + мФормаОтчета.Области.П010000408.Текст
	                                           + мФормаОтчета.Области.П010000508.Текст
	                                           + мФормаОтчета.Области.П010000608.Текст
	                                           + мФормаОтчета.Области.П010000708.Текст
	                                           + мФормаОтчета.Области.П010000808.Текст
	                                           + мФормаОтчета.Области.П010000908.Текст
	                                           + мФормаОтчета.Области.П010001008.Текст
	                                           + мФормаОтчета.Области.П010001108.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000108.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000108.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	
	мФормаОтчета.Области.П010000109.Значение = мФормаОтчета.Области.П010000209.Значение
	                                         + мФормаОтчета.Области.П010000309.Значение
	                                         + мФормаОтчета.Области.П010000409.Значение
	                                         + мФормаОтчета.Области.П010000509.Значение
	                                         + мФормаОтчета.Области.П010000609.Значение
	                                         + мФормаОтчета.Области.П010000709.Значение
	                                         + мФормаОтчета.Области.П010000809.Значение
	                                         + мФормаОтчета.Области.П010000909.Значение
	                                         + мФормаОтчета.Области.П010001009.Значение
	                                         + мФормаОтчета.Области.П010001109.Значение;
	Если мФормаОтчета.Области.П010000109.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000209.Текст
	                                           + мФормаОтчета.Области.П010000309.Текст
	                                           + мФормаОтчета.Области.П010000409.Текст
	                                           + мФормаОтчета.Области.П010000509.Текст
	                                           + мФормаОтчета.Области.П010000609.Текст
	                                           + мФормаОтчета.Области.П010000709.Текст
	                                           + мФормаОтчета.Области.П010000809.Текст
	                                           + мФормаОтчета.Области.П010000909.Текст
	                                           + мФормаОтчета.Области.П010001009.Текст
	                                           + мФормаОтчета.Области.П010001109.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000109.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000109.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	
	мФормаОтчета.Области.П010000110.Значение = мФормаОтчета.Области.П010000210.Значение
	                                         + мФормаОтчета.Области.П010000310.Значение
	                                         + мФормаОтчета.Области.П010000410.Значение
	                                         + мФормаОтчета.Области.П010000510.Значение
	                                         + мФормаОтчета.Области.П010000610.Значение
	                                         + мФормаОтчета.Области.П010000710.Значение
	                                         + мФормаОтчета.Области.П010000810.Значение
	                                         + мФормаОтчета.Области.П010000910.Значение
	                                         + мФормаОтчета.Области.П010001010.Значение
	                                         + мФормаОтчета.Области.П010001110.Значение;
	Если мФормаОтчета.Области.П010000110.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000210.Текст
	                                           + мФормаОтчета.Области.П010000310.Текст
	                                           + мФормаОтчета.Области.П010000410.Текст
	                                           + мФормаОтчета.Области.П010000510.Текст
	                                           + мФормаОтчета.Области.П010000610.Текст
	                                           + мФормаОтчета.Области.П010000710.Текст
	                                           + мФормаОтчета.Области.П010000810.Текст
	                                           + мФормаОтчета.Области.П010000910.Текст
	                                           + мФормаОтчета.Области.П010001010.Текст
	                                           + мФормаОтчета.Области.П010001110.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000110.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000110.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	
	мФормаОтчета.Области.П010000111.Значение = мФормаОтчета.Области.П010000211.Значение
	                                         + мФормаОтчета.Области.П010000311.Значение
	                                         + мФормаОтчета.Области.П010000411.Значение
	                                         + мФормаОтчета.Области.П010000511.Значение
	                                         + мФормаОтчета.Области.П010000611.Значение
	                                         + мФормаОтчета.Области.П010000711.Значение
	                                         + мФормаОтчета.Области.П010000811.Значение
	                                         + мФормаОтчета.Области.П010000911.Значение
	                                         + мФормаОтчета.Области.П010001011.Значение
	                                         + мФормаОтчета.Области.П010001111.Значение;
	Если мФормаОтчета.Области.П010000111.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000211.Текст
	                                           + мФормаОтчета.Области.П010000311.Текст
	                                           + мФормаОтчета.Области.П010000411.Текст
	                                           + мФормаОтчета.Области.П010000511.Текст
	                                           + мФормаОтчета.Области.П010000611.Текст
	                                           + мФормаОтчета.Области.П010000711.Текст
	                                           + мФормаОтчета.Области.П010000811.Текст
	                                           + мФормаОтчета.Области.П010000911.Текст
	                                           + мФормаОтчета.Области.П010001011.Текст
	                                           + мФормаОтчета.Области.П010001111.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000111.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000111.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	
	мФормаОтчета.Области.П010000107.Значение = мФормаОтчета.Области.П010000108.Значение + мФормаОтчета.Области.П010000109.Значение + мФормаОтчета.Области.П010000110.Значение;
	Если мФормаОтчета.Области.П010000107.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000108.Текст + мФормаОтчета.Области.П010000109.Текст + мФормаОтчета.Области.П010000110.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000107.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000107.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000207.Значение = мФормаОтчета.Области.П010000208.Значение + мФормаОтчета.Области.П010000209.Значение + мФормаОтчета.Области.П010000210.Значение;
	Если мФормаОтчета.Области.П010000207.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000208.Текст + мФормаОтчета.Области.П010000209.Текст + мФормаОтчета.Области.П010000210.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000207.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000207.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000307.Значение = мФормаОтчета.Области.П010000308.Значение + мФормаОтчета.Области.П010000309.Значение + мФормаОтчета.Области.П010000310.Значение;
	Если мФормаОтчета.Области.П010000307.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000308.Текст + мФормаОтчета.Области.П010000309.Текст + мФормаОтчета.Области.П010000310.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000307.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000307.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000407.Значение = мФормаОтчета.Области.П010000408.Значение + мФормаОтчета.Области.П010000409.Значение + мФормаОтчета.Области.П010000410.Значение;
	Если мФормаОтчета.Области.П010000407.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000408.Текст + мФормаОтчета.Области.П010000409.Текст + мФормаОтчета.Области.П010000410.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000407.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000407.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000507.Значение = мФормаОтчета.Области.П010000508.Значение + мФормаОтчета.Области.П010000509.Значение + мФормаОтчета.Области.П010000510.Значение;
	Если мФормаОтчета.Области.П010000507.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000508.Текст + мФормаОтчета.Области.П010000509.Текст + мФормаОтчета.Области.П010000510.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000507.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000507.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000607.Значение = мФормаОтчета.Области.П010000608.Значение + мФормаОтчета.Области.П010000609.Значение + мФормаОтчета.Области.П010000610.Значение;
	Если мФормаОтчета.Области.П010000607.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000608.Текст + мФормаОтчета.Области.П010000609.Текст + мФормаОтчета.Области.П010000610.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000607.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000607.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000707.Значение = мФормаОтчета.Области.П010000708.Значение + мФормаОтчета.Области.П010000709.Значение + мФормаОтчета.Области.П010000710.Значение;
	Если мФормаОтчета.Области.П010000707.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000708.Текст + мФормаОтчета.Области.П010000709.Текст + мФормаОтчета.Области.П010000710.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000707.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000707.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000807.Значение = мФормаОтчета.Области.П010000808.Значение + мФормаОтчета.Области.П010000809.Значение + мФормаОтчета.Области.П010000810.Значение;
	Если мФормаОтчета.Области.П010000807.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000808.Текст + мФормаОтчета.Области.П010000809.Текст + мФормаОтчета.Области.П010000810.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000807.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000807.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010000907.Значение = мФормаОтчета.Области.П010000908.Значение + мФормаОтчета.Области.П010000909.Значение + мФормаОтчета.Области.П010000910.Значение;
	Если мФормаОтчета.Области.П010000907.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010000908.Текст + мФормаОтчета.Области.П010000909.Текст + мФормаОтчета.Области.П010000910.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010000907.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010000907.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010001007.Значение = мФормаОтчета.Области.П010001008.Значение + мФормаОтчета.Области.П010001009.Значение + мФормаОтчета.Области.П010001010.Значение;
	Если мФормаОтчета.Области.П010001007.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010001008.Текст + мФормаОтчета.Области.П010001009.Текст + мФормаОтчета.Области.П010001010.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010001007.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010001007.Формат, ФорматПредставленияНуля);
	КонецЕсли;
	мФормаОтчета.Области.П010001107.Значение = мФормаОтчета.Области.П010001108.Значение + мФормаОтчета.Области.П010001109.Значение + мФормаОтчета.Области.П010001110.Значение;
	Если мФормаОтчета.Области.П010001107.Значение = 0 Тогда
		ФорматПредставленияНуля = ?(ПустаяСтрока(мФормаОтчета.Области.П010001108.Текст + мФормаОтчета.Области.П010001109.Текст + мФормаОтчета.Области.П010001110.Текст), "ЧН=' '", "ЧН=");
		мФормаОтчета.Области.П010001107.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(мФормаОтчета.Области.П010001107.Формат, ФорматПредставленияНуля);
	КонецЕсли;

КонецПроцедуры // Расчет()

// Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле)

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
		// Сохраним формат отображения нуля для восстановления представления
		// в поле табличного документа и контроля выгрузки показателя в формате XML
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") И ЗначениеПоказателя = 0 Тогда
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(ТекущаяОбласть.Формат);
			Если ЗначениеЗаполнено(ФорматПредставленияНуля) Тогда
				СтруктураДанныхПоля.Вставить("ЧН" + ИмяПоказателя, ФорматПредставленияНуля);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	СтруктураДанныхПоля.Вставить("ОргАдрес", мАдресвФорматеДляВыгрузки);

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

Функция ПолучитьПредставлениеНуляИзСтрокиФормата(СтрокаФормата)
	
	Если ПустаяСтрока(СтрокаФормата) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, ";", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки);
		Если Найти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			Возврат СокрЛП(ПодстрокаФормата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ЗаменитьПредставлениеНуляВСтрокеФормата(СтрокаФормата, ПредставлениеНуля)
	
	НоваяСтрокаФормата = "";
	
	РазделительПодстрок = ";";
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, РазделительПодстрок, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СокрЛП(СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки));
		Если ПустаяСтрока(ПодстрокаФормата) Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			ПодстрокаФормата = ПредставлениеНуля;
		КонецЕсли;
		НоваяСтрокаФормата = НоваяСтрокаФормата + ?(ПустаяСтрока(НоваяСтрокаФормата), "", РазделительПодстрок) + ПодстрокаФормата;
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрокаФормата) Тогда
		Возврат ПредставлениеНуля;
	КонецЕсли;

	Возврат НоваяСтрокаФормата;
	
КонецФункции

// Процедура управляет показом в форме периода построения отчета,
//
Процедура ПоказатьПериод()

	СтрПериод = ПредставлениеПериода( НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина" );

	ПериодОтчета = " за " + СтрПериод;
	
	// Период в заголовке отчета
	мФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;

	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериод+ ")";

КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "ОКПО");  // ОКПО
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКВЭД");

	КонецЕсли;

	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ТелИсп");

	ОргСведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ИННЮЛ = "";
		ОКПО = "";
		АдрПочт     = "";
		НаимЮЛПол = "";
		ОснВидДеят = "";
		ОКВЭД = "";
		
	КонецЕсли;

	ФИОИсп = "";
	ДолжнИсп = "";
	ТелИсп   = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);

	КонецЕсли;

	ОргСведения.Свойство("ФИОИсп",         ФИОИсп);
	ОргСведения.Свойство("ДолжнИсп",       ДолжнИсп);
	ОргСведения.Свойство("ТелИсп", 		   ТелИсп);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		мФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
		мФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
		мФормаОтчета.Области.ОргТелефонИсп.Значение  = ТелИсп;

		Возврат;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргНазв.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргКодОКПО.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			мФормаОтчета.Области.ОргКодОКПО.Значение = "";
		Иначе
			мФормаОтчета.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;
	КонецЕсли;

	Если (мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(мФормаОтчета.Области.ОргАдрес.Значение)) Тогда

		Если (НЕ РегламентированнаяОтчетность.ПустоеЗначение(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			
			мФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			мАдресвФорматеДляВыгрузки = АдрПочт;
		Иначе
			мФормаОтчета.Области.ОргАдрес.Значение = "";
			мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;

	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргИсполнитель.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргДолжностьИсп.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (РегламентированнаяОтчетность.ПустоеЗначение(мФормаОтчета.Области.ОргТелефонИсп.Значение)) ИЛИ (мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт
	Перем СписокПоказателейНеПодлежащихОчистке;
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдрес");

	СписокПоказателейНеПодлежащихОчистке.Добавить("КодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КодЗнач2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КодЗнач3");
	СписокПоказателейНеПодлежащихОчистке.Добавить("КодЗнач4");

	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефонИсп");

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
		ТекущаяОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекущаяОбласть.Формат, "ЧН=' '");
	КонецЦикла;

	Расчет();

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить() Экспорт

	Если РегламентированнаяОтчетность.роОчистить(ЭтаФорма) Тогда

		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

	КонецЕсли;

КонецПроцедуры // Очистить()

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено) Экспорт

	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
						|задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ЧтоИскать <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяТабличногоПоля, НаименованиеЛиста, ЧтоИскать", "ПолеТабличногоДокументаФормаОтчета", "Форма П-4", ЧтоИскать);
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	ОбластиСтроки = Новый Структура;
	Для Каждого Обл Из ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ОбластиСтроки.Вставить(Обл.Имя, ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(Обл.Имя));
		КонецЕсли;
	КонецЦикла;
	Для Каждого Обл Из ОбластиСтроки Цикл
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		ПечатнаяФорма.Вывести(Обл.Значение);
		мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма П-4");
	КонецЦикла;

	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт

	Вариант = ВидДокумента * НомерКорректировки;

	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = Неопределено;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Вид                        = Вариант;

	мВариант = Вариант;

	мСохраненныйДок.Комментарий                = Комментарий;

	//мСохраненныйДок.КодИМНС                    = ПолучитьКодИМНС();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ИмяТекТабличногоПоля    = "ПолеТабличногоДокументаФормаОтчета";

	ТекТабличноеПоле        = мФормаОтчета;

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
   	мСохраненныйДок.ФорматВыгрузки = "Автоматически";

	// записываем документ, хранящий данные отчета
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если Организация <> мСохраненныйДок.Организация
	   И Организация <> ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		мВПрограммеИзмененаОрганизация = Истина;
		мСохраненныйДок.Организация = Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		Организация              = мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;

	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
				// значение показателя с префиксом "ЧН" содержит формат представления нуля
				ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
				ОбластьПоказателя.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
				Продолжить;
			КонецЕсли; 
			ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;
	КонецЦикла;

	мАдресвФорматеДляВыгрузки = мФормаОтчета.Области.ОргАдрес.Значение;
	мФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	Модифицированность = Ложь;

КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Процедура вызывается при изменении содержимого доступных для редактирования
// ячеек табличного документа.
//   Устанавливает признак модифицированности данных в форме, вызывает пересчет
// вычисляемых показателей  табличных полей и обновляет структуру данных
// многострочного раздела.
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзменении()

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	мВПрограммеИзмененаОрганизация = Ложь;

	мФормаОтчета = ЭлементыФормы.ПолеТабличногоДокументаФормаОтчета;
	ТекТабличноеПоле = мФормаОтчета;

	ВидДокумента = 0;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	НомерКорректировки = 1;
	ФормироватьСтруктуруСвойствСтраниц();
	мАдресвФорматеДляВыгрузки = "";

	Если мСохраненныйДок = Неопределено Тогда

		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		КонецЕсли;

	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	мФормаОтчета.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");

	ПоказатьПериод();

	Если мСохраненныйДок = Неопределено Или мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;

	ТекущийЭлемент = мФормаОтчета;

	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// ПолеТабличногоДокументаФормаОтчетаВыбор
//
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Имя = "ОргАдрес" Тогда

		СтандартнаяОбработка = Ложь;

		ВводАдреса = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ВводРоссийскогоАдреса");
		ВводАдреса.НачальноеЗначениеВыбора = Новый Структура("Представление", мАдресвФорматеДляВыгрузки);

		Если ВводАдреса.ОткрытьМодально() Тогда

			мАдресвФорматеДляВыгрузки = ВводАдреса.НачальноеЗначениеВыбора.Представление;
			Если мАдресвФорматеДляВыгрузки = ",,,,,,,,," Тогда
				мАдресвФорматеДляВыгрузки = "";
			КонецЕсли;

			Область.Значение = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(мАдресвФорматеДляВыгрузки);

			Модифицированность = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаВыбор

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Инициализация();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Если мСохраненныйДок <> Неопределено Тогда

		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура - действие кнопки Поиск командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// ПолеВыбораВидДокументаОчистка
// Процедура-обработчик события "Очистка"
//
Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПолеВыбораВидДокументаОчистка

// ПолеВыбораВидДокументаПриИзменении
// Процедура-обработчик события "ПриИзменении"
//
Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)

	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);

КонецПроцедуры // ПолеВыбораВидДокументаПриИзменении

// КнопкаЗаполнитьСведенияОбОрганизацииНажатие
// Процедура-обработчик "Нажатие". Активизируется при нажатии на кнопку
// ЗаполнитьСведенияОбОрганизации
//
Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)

	мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;

КонецПроцедуры // КнопкаЗаполнитьСведенияОбОрганизацииНажатие

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)

	мФормаОтчета.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");
	ЗаполнитьСведенияОбОрганизации(Истина);
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти
//
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти <= 1 Тогда
			
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			Если НайденнаяСтрока = Неопределено Тогда
				СписокЭлемент = ВыбратьИзСписка(Список, Элемент);
			Иначе
				СписокЭлемент = ВыбратьИзСписка(Список, Элемент, НайденнаяСтрока);
			КонецЕсли;
			
			Если СписокЭлемент <> Неопределено  Тогда
				
				Область.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
				
				Модифицированность = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Расчет();
	
	Модифицированность = Истина;

КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти

////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ 
//                                                             

// Процедура является частью механизма автосохранения 
// и назначается динамически методом ПодключитьОбработчикОжидания()
// Обработчик может подключаться и отключаться из процедуры ПриОткрытии текущей формы и
// процедуры ОсновныеДействияФормыКнопкаВыбратьНажатие формы ФормаНастройки
Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В XML
//
// Процедура - обработчик события Нажатие кнопки Выгрузить командной панели КоманднаяПанельФормы
// Выгружает регламентированный отчет и записывает его в указанный пользователем каталог
// При этом создается и проводится экземпляр документа "ВыгрузкаРегламентированныхОтчетов"
//

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Организация не выбрана! Выгрузка невозможна.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
 	Если НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн) Тогда
		Сообщить("Отчет успешно выгружен!", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Параметры = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "") Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьСтруктуруПоказателей();
	Параметры = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, Параметры);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	ИмяФайлаВыгрузки = Параметры.ИмяФайла;
	Если Открыта() Тогда
		СохранитьФайлВыгрузкиНаДиск(ТекстВыгрузки, ИмяФайлаВыгрузки);
	Иначе
		// Сообщить("" + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мСохраненныйДок) + " успешно выгружен!");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СохранитьФайлВыгрузкиНаДиск(ТекстXML, ИмяФайлаXML)
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки(); // получаем каталог для сохранения
	Если ПутьДляВыгрузки <> Ложь Тогда
		ФайлДляВыгрузки = ?(Прав(ПутьДляВыгрузки, 1) = "\", ПутьДляВыгрузки, ПутьДляВыгрузки + "\") + ИмяФайлаXML;
		ЗаписатьТекстНаДиск(ТекстXML, ФайлДляВыгрузки); // записываем XML в файл на диск
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СхемаВыгрузкиXML2012Кв1");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВыгружаемыеПоказателиРаздела(Узел, Раздел, МассивРезультат = Неопределено)
	
	ТипУзла = ТипЗнч(Узел);
	Если ТипУзла = Тип("ДеревоЗначений") Тогда
		МассивРезультат = Новый Массив;
	ИначеЕсли СокрЛП(Узел.Раздел) = СокрЛП(Раздел) Тогда
		МассивРезультат.Добавить(Узел);
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ВыгружаемыеПоказателиРаздела = ПолучитьВыгружаемыеПоказателиРаздела(Стр, Раздел, МассивРезультат);
	КонецЦикла;
	
	Если ТипУзла = Тип("ДеревоЗначений") Тогда
		Возврат МассивРезультат;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция РазделПуст(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел);
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	РазделПуст = Истина;
	Если ТипЗнч(ДанныеРаздела) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из ДанныеРаздела Цикл
			Если НЕ СтраницаПуста(Стр.Данные, ПоказателиРаздела) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, парамРазделы)
	
	Разделы = Новый Массив;
	Если ТипЗнч(парамРазделы) = Тип("Строка") Тогда
		Если Найти(парамРазделы, ",") <> 0 Тогда
			СтрРазделы = Новый Структура(парамРазделы);
			Для Каждого Эл Из СтрРазделы Цикл
				Разделы.Добавить(Эл.Ключ);
			КонецЦикла;
		Иначе
			Разделы.Добавить(парамРазделы);
		КонецЕсли;
	КонецЕсли;
	
	РазделыПусты = Истина;
	Для Каждого Раздел Из Разделы Цикл
		Если НЕ РазделПуст(ДеревоВыгрузки, Раздел) Тогда
			РазделыПусты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ РазделыПусты;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(Параметры, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	// проверка показателей раздела
	Если ПустаяСтрока(Параметры.ОКПО) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код ОКПО организации!", ИмяПоляТаблДокумента, "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКВЭД) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код вида деятельности по ОКВЭД организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОКФС) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код ОКФС организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОргНазв) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование оганизации!", ИмяПоляТаблДокумента, "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
									
	Если ПустаяСтрока(Параметры.ОргИсполнитель) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической информации!", ИмяПоляТаблДокумента, "ОргИсполнитель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОргДолжностьИсп) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указана должность лица, ответственного за предоставление статистической информации!", ИмяПоляТаблДокумента, "ОргДолжностьИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ОргТелефонИсп) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не указан телефон должностного лица, ответственного за предоставление статистической информации!", ИмяПоляТаблДокумента, "ОргТелефонИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// проверка на незаполненный отчет
	Если НЕ ПроверитьРазделыНаНаличиеИнформации(ДеревоВыгрузки, ИмяПоляТаблДокумента) Тогда
		
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнены Раздел 1 и Раздел 2!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ, Раздел", Стр.Ключ, Стр.Раздел), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Тип, "A") <> 0 ИЛИ Найти(Узел.Тип, "А") <> 0) // Необязательные атрибуты пропускаем (они удаляются только вместе с узлом)
			И (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
			Возврат;
		КонецЕсли;
		
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	Если (Найти(Узел.Тип, "A") <> 0 ИЛИ Найти(Узел.Тип, "А") <> 0)
	   И (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
		Возврат Истина;
	КонецЕсли;
	
	Если Узел.Формат = "N" Тогда
		ОбязательноеНулевоеЗначение = Ложь;
		Если ТипЗнч(Узел.Показатели) = Тип("Структура") Тогда
			ФорматПредставленияНуля = Неопределено;
			Если Узел.Показатели.Свойство("ЧН" + Узел.Ключ, ФорматПредставленияНуля) Тогда
				ОбязательноеНулевоеЗначение = НЕ ПустаяСтрока(Формат(0, ФорматПредставленияНуля));
			КонецЕсли; 
		КонецЕсли;
		ПустойУзел = (Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение)) И НЕ ОбязательноеНулевоеЗначение;
	Иначе
		ПустойУзел = НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ДополнитьСтруктуруПараметров(Параметры, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		Если СвойствоОпределено(мДанныеОтчета, Узел.Раздел) Тогда
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		Иначе
			ПоказателиРаздела = мДанныеОтчета[Узел.Раздел];
			Для Каждого Эл Из ПоказателиРаздела Цикл
				Параметры.Вставить(Эл.Ключ, Эл.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда // !!!
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруПараметров(Параметры, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя, ФорматПредставленияНуля = "")
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
		Если Найти(ФорматПредставленияНуля, "ЧН=") > 0 Тогда
			Узел.Показатели = Новый Структура("ЧН" + СокрЛП(Узел.Ключ), ФорматПредставленияНуля);
		КонецЕсли; 
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если Параметры.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			ВывестиПоказательВXML(Стр, Параметры[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если Параметры.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если Параметры.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьДаннымиУзел(Параметры, Стр, НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку("utf-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		//ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		//ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		//ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", Параметры.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		//ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ЗаписатьТекстНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.UTF8);
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();
	Сообщить("Отчет успешно выгружен в файл """ + ФайлДляЗаписи + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьИмяФайла(Параметры, ДопАтрибуты)
	
	Перем ПолученноеЗначение;
	
	КодОКУД        = ДопАтрибуты.OKUD;
	КодФормы       = ДопАтрибуты.idf;
	Периодичность  = ДопАтрибуты.idp;
	КодОКПО        = Параметры.ОКПО;
	РасчетныйГод   = Параметры.РасчПериод;
	ОтчетныйПериод = Параметры.ОтчПериод; //Месяц любого отчетного периода
	
	Параметры.Свойство("ОКФС", ПолученноеЗначение);
	КодОКФС = ПолученноеЗначение;
	Параметры.Свойство("ОКВЭД", ПолученноеЗначение);
	КодОКВЭД = СтрЗаменить(ПолученноеЗначение, ".", "-");
	
	ИмяФайлаXML = КодОКУД + "_" + КодФормы + "_" + Периодичность + "_" + КодОКПО + "_" + РасчетныйГод + "_" + ОтчетныйПериод;
	ИмяФайлаXML = ИмяФайлаXML + ?(ПустаяСтрока(КодОКФС), "", "_" + КодОКФС) + ?(ПустаяСтрока(КодОКВЭД), "", "_" + КодОКВЭД) + ".xml";
	
	Возврат  ИмяФайлаXML;
	
КонецФункции

Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	//мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	//Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
	//	ТаблицаЛистовРаздела = Раздел.Значение;
	//	Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
	//		Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
	//	КонецЦикла;
	//	мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	//КонецЦикла;
	
КонецФункции

Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
				
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ДопАтрибуты = СформироватьСтруктуруДопАтрибутов();
	
	СтрокаСведений = "ФИОРук, ОКВЭД, ОКФС";
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	Параметры = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	Параметры.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	Параметры.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	Параметры.Вставить("ШифрФормы", ПолученноеЗначение);
	
	//ДопАтрибуты.Свойство("idp", ПолученноеЗначение); //периодичность (количество отчетов в год)
	//МесПериод = 12 / Число(ПолученноеЗначение);      //количество месяцев в периоде
	//ОтчПериод = Окр(Месяц(мСохраненныйДок.ДатаОкончания) / МесПериод);
	
	ОтчПериод  = Месяц(мСохраненныйДок.ДатаОкончания);
	РасчПериод = Формат(Год(мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	Параметры.Вставить("ОКПО",  СокрЛП(ТабДокумент.ОргКодОКПО));
	Параметры.Вставить("ОКВЭД", СокрЛП(СведенияОбОрганизации.ОКВЭД));
	Параметры.Вставить("ОКФС",  СокрЛП(СведенияОбОрганизации.ОКФС));	
	Параметры.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	Параметры.Вставить("РасчПериод", СокрЛП(РасчПериод));
	Параметры.Вставить("ОргНазв", СокрЛП(ТабДокумент.ОргНазв));
	Параметры.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	Параметры.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	Параметры.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	Параметры.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	
	Параметры.Вставить("ИмяФайла", СформироватьИмяФайла(Параметры, ДопАтрибуты));
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	Возврат Параметры;
	
КонецФункции

Функция СформироватьСтруктуруДопАтрибутов() 
	
	ДопАтрибуты = Новый Структура;
	
	Макет = ПолучитьМакет("АтрибВыгрузкиXML2012Кв1");
	ИмяОбласти = ?(мПериодичность = Перечисления.Периодичность.Месяц, "АтрПериодМесяц", "АтрПериодКвартал");
	МакетПериод = Макет.ПолучитьОбласть(ИмяОбласти);
	Для НомСтр = 1 По МакетПериод.ВысотаТаблицы Цикл
		АтрКлюч = СокрЛП(МакетПериод.Область(НомСтр, 1, НомСтр, 1).Текст);
		Если НЕ ПустаяСтрока(АтрКлюч) Тогда
			АтрКлюч = РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими(".- ", АтрКлюч, "___");
			ДопАтрибуты.Вставить(АтрКлюч, СокрЛП(МакетПериод.Область(НомСтр, 2, НомСтр, 2).Текст));
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ДопАтрибуты;
	
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчетеФСГС(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ТаблицаСообщений = Новый ТаблицаЗначений;
ТаблицаСообщений.Колонки.Добавить("Раздел");
ТаблицаСообщений.Колонки.Добавить("Графа");
ТаблицаСообщений.Колонки.Добавить("Строка");
ТаблицаСообщений.Колонки.Добавить("Страница");
ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
ТаблицаСообщений.Колонки.Добавить("Описание");

// Версия формы
мВерсияФормы = "23/12/2011";
// Код отчета, равен коду по ОКУД
мКодОтчета   = "0606010";

мПечатныеФормы = Новый СписокЗначений;